!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.UnipeptVisualizations=e():t.UnipeptVisualizations=e()}(this,(function(){return(()=>{var t={1926:(t,e,n)=>{n(2526),n(2443),n(1817),n(2401),n(8722),n(2165),n(9007),n(6066),n(3510),n(1840),n(6982),n(2159),n(6649),n(9341),n(543),n(9170),n(1038),n(9753),n(6572),n(2222),n(545),n(6541),n(3290),n(7327),n(9826),n(4553),n(4944),n(6535),n(9554),n(6699),n(2772),n(9600),n(4986),n(1249),n(5827),n(6644),n(5069),n(7042),n(5212),n(2707),n(561),n(8706),n(3792),n(9244),n(6992),n(4812),n(8309),n(4855),n(5837),n(9601),n(8011),n(9070),n(3321),n(9720),n(3371),n(8559),n(5003),n(9337),n(6210),n(489),n(3304),n(1825),n(8410),n(2200),n(7941),n(7227),n(514),n(8304),n(6833),n(1539),n(9595),n(5500),n(4869),n(3952),n(4953),n(8992),n(9841),n(7852),n(2023),n(4723),n(6373),n(6528),n(3112),n(2481),n(5306),n(4765),n(3123),n(6755),n(3210),n(5674),n(8702),n(8783),n(5218),n(4475),n(7929),n(915),n(9253),n(2125),n(8830),n(8734),n(9254),n(7268),n(7397),n(86),n(623),n(8757),n(4603),n(4916),n(2087),n(8386),n(7601),n(9714),n(1058),n(4678),n(9653),n(3299),n(5192),n(3161),n(4048),n(8285),n(4363),n(5994),n(1874),n(9494),n(6977),n(5147),n(9752),n(2376),n(3181),n(3484),n(2388),n(8621),n(403),n(4755),n(5438),n(332),n(658),n(197),n(4914),n(2420),n(160),n(970),n(2703),n(3689),n(3843),n(5735),n(8733),n(3710),n(6078),n(8862),n(3706),n(8674),n(7922),n(4668),n(7727),n(1532),n(189),n(4129),n(8478),n(8264),n(6938),n(9575),n(6716),n(7145),n(2472),n(9743),n(5109),n(8255),n(5125),n(9135),n(4197),n(6495),n(8145),n(5206),n(2990),n(8927),n(3105),n(5035),n(4345),n(7174),n(2846),n(4731),n(7209),n(6319),n(8867),n(7789),n(3739),n(9368),n(4483),n(2056),n(3462),n(678),n(7462),n(3824),n(5021),n(2974),n(5016),n(224),n(2419),n(9596),n(2586),n(4819),n(5683),n(9361),n(1037),n(5898),n(7556),n(4361),n(3593),n(9532),n(1299);var r=n(857);t.exports=r},3099:t=>{t.exports=function(t){if("function"!=typeof t)throw TypeError(String(t)+" is not a function");return t}},6077:(t,e,n)=>{var r=n(111);t.exports=function(t){if(!r(t)&&null!==t)throw TypeError("Can't set "+String(t)+" as a prototype");return t}},1223:(t,e,n)=>{var r=n(5112),i=n(30),o=n(3070),a=r("unscopables"),s=Array.prototype;null==s[a]&&o.f(s,a,{configurable:!0,value:i(null)}),t.exports=function(t){s[a][t]=!0}},1530:(t,e,n)=>{"use strict";var r=n(8710).charAt;t.exports=function(t,e,n){return e+(n?r(t,e).length:1)}},5787:t=>{t.exports=function(t,e,n){if(!(t instanceof e))throw TypeError("Incorrect "+(n?n+" ":"")+"invocation");return t}},9670:(t,e,n)=>{var r=n(111);t.exports=function(t){if(!r(t))throw TypeError(String(t)+" is not an object");return t}},4019:t=>{t.exports="undefined"!=typeof ArrayBuffer&&"undefined"!=typeof DataView},260:(t,e,n)=>{"use strict";var r,i=n(4019),o=n(9781),a=n(7854),s=n(111),u=n(6656),c=n(648),l=n(8880),f=n(1320),h=n(3070).f,p=n(9518),d=n(7674),v=n(5112),g=n(9711),y=a.Int8Array,m=y&&y.prototype,b=a.Uint8ClampedArray,x=b&&b.prototype,w=y&&p(y),S=m&&p(m),_=Object.prototype,A=_.isPrototypeOf,M=v("toStringTag"),T=g("TYPED_ARRAY_TAG"),E=i&&!!d&&"Opera"!==c(a.opera),k=!1,O={Int8Array:1,Uint8Array:1,Uint8ClampedArray:1,Int16Array:2,Uint16Array:2,Int32Array:4,Uint32Array:4,Float32Array:4,Float64Array:8},P={BigInt64Array:8,BigUint64Array:8},C=function(t){if(!s(t))return!1;var e=c(t);return u(O,e)||u(P,e)};for(r in O)a[r]||(E=!1);if((!E||"function"!=typeof w||w===Function.prototype)&&(w=function(){throw TypeError("Incorrect invocation")},E))for(r in O)a[r]&&d(a[r],w);if((!E||!S||S===_)&&(S=w.prototype,E))for(r in O)a[r]&&d(a[r].prototype,S);if(E&&p(x)!==S&&d(x,S),o&&!u(S,M))for(r in k=!0,h(S,M,{get:function(){return s(this)?this[T]:void 0}}),O)a[r]&&l(a[r],T,r);t.exports={NATIVE_ARRAY_BUFFER_VIEWS:E,TYPED_ARRAY_TAG:k&&T,aTypedArray:function(t){if(C(t))return t;throw TypeError("Target is not a typed array")},aTypedArrayConstructor:function(t){if(d){if(A.call(w,t))return t}else for(var e in O)if(u(O,r)){var n=a[e];if(n&&(t===n||A.call(n,t)))return t}throw TypeError("Target is not a typed array constructor")},exportTypedArrayMethod:function(t,e,n){if(o){if(n)for(var r in O){var i=a[r];i&&u(i.prototype,t)&&delete i.prototype[t]}S[t]&&!n||f(S,t,n?e:E&&m[t]||e)}},exportTypedArrayStaticMethod:function(t,e,n){var r,i;if(o){if(d){if(n)for(r in O)(i=a[r])&&u(i,t)&&delete i[t];if(w[t]&&!n)return;try{return f(w,t,n?e:E&&y[t]||e)}catch(t){}}for(r in O)!(i=a[r])||i[t]&&!n||f(i,t,e)}},isView:function(t){if(!s(t))return!1;var e=c(t);return"DataView"===e||u(O,e)||u(P,e)},isTypedArray:C,TypedArray:w,TypedArrayPrototype:S}},3331:(t,e,n)=>{"use strict";var r=n(7854),i=n(9781),o=n(4019),a=n(8880),s=n(2248),u=n(7293),c=n(5787),l=n(9958),f=n(7466),h=n(7067),p=n(1179),d=n(9518),v=n(7674),g=n(8006).f,y=n(3070).f,m=n(1285),b=n(8003),x=n(9909),w=x.get,S=x.set,_="ArrayBuffer",A="DataView",M="Wrong index",T=r.ArrayBuffer,E=T,k=r.DataView,O=k&&k.prototype,P=Object.prototype,C=r.RangeError,R=p.pack,I=p.unpack,j=function(t){return[255&t]},N=function(t){return[255&t,t>>8&255]},L=function(t){return[255&t,t>>8&255,t>>16&255,t>>24&255]},z=function(t){return t[3]<<24|t[2]<<16|t[1]<<8|t[0]},D=function(t){return R(t,23,4)},F=function(t){return R(t,52,8)},U=function(t,e){y(t.prototype,e,{get:function(){return w(this)[e]}})},B=function(t,e,n,r){var i=h(n),o=w(t);if(i+e>o.byteLength)throw C(M);var a=w(o.buffer).bytes,s=i+o.byteOffset,u=a.slice(s,s+e);return r?u:u.reverse()},q=function(t,e,n,r,i,o){var a=h(n),s=w(t);if(a+e>s.byteLength)throw C(M);for(var u=w(s.buffer).bytes,c=a+s.byteOffset,l=r(+i),f=0;f<e;f++)u[c+f]=l[o?f:e-f-1]};if(o){if(!u((function(){T(1)}))||!u((function(){new T(-1)}))||u((function(){return new T,new T(1.5),new T(NaN),T.name!=_}))){for(var V,W=(E=function(t){return c(this,E),new T(h(t))}).prototype=T.prototype,H=g(T),Y=0;H.length>Y;)(V=H[Y++])in E||a(E,V,T[V]);W.constructor=E}v&&d(O)!==P&&v(O,P);var G=new k(new E(2)),X=O.setInt8;G.setInt8(0,2147483648),G.setInt8(1,2147483649),!G.getInt8(0)&&G.getInt8(1)||s(O,{setInt8:function(t,e){X.call(this,t,e<<24>>24)},setUint8:function(t,e){X.call(this,t,e<<24>>24)}},{unsafe:!0})}else E=function(t){c(this,E,_);var e=h(t);S(this,{bytes:m.call(new Array(e),0),byteLength:e}),i||(this.byteLength=e)},k=function(t,e,n){c(this,k,A),c(t,E,A);var r=w(t).byteLength,o=l(e);if(o<0||o>r)throw C("Wrong offset");if(o+(n=void 0===n?r-o:f(n))>r)throw C("Wrong length");S(this,{buffer:t,byteLength:n,byteOffset:o}),i||(this.buffer=t,this.byteLength=n,this.byteOffset=o)},i&&(U(E,"byteLength"),U(k,"buffer"),U(k,"byteLength"),U(k,"byteOffset")),s(k.prototype,{getInt8:function(t){return B(this,1,t)[0]<<24>>24},getUint8:function(t){return B(this,1,t)[0]},getInt16:function(t){var e=B(this,2,t,arguments.length>1?arguments[1]:void 0);return(e[1]<<8|e[0])<<16>>16},getUint16:function(t){var e=B(this,2,t,arguments.length>1?arguments[1]:void 0);return e[1]<<8|e[0]},getInt32:function(t){return z(B(this,4,t,arguments.length>1?arguments[1]:void 0))},getUint32:function(t){return z(B(this,4,t,arguments.length>1?arguments[1]:void 0))>>>0},getFloat32:function(t){return I(B(this,4,t,arguments.length>1?arguments[1]:void 0),23)},getFloat64:function(t){return I(B(this,8,t,arguments.length>1?arguments[1]:void 0),52)},setInt8:function(t,e){q(this,1,t,j,e)},setUint8:function(t,e){q(this,1,t,j,e)},setInt16:function(t,e){q(this,2,t,N,e,arguments.length>2?arguments[2]:void 0)},setUint16:function(t,e){q(this,2,t,N,e,arguments.length>2?arguments[2]:void 0)},setInt32:function(t,e){q(this,4,t,L,e,arguments.length>2?arguments[2]:void 0)},setUint32:function(t,e){q(this,4,t,L,e,arguments.length>2?arguments[2]:void 0)},setFloat32:function(t,e){q(this,4,t,D,e,arguments.length>2?arguments[2]:void 0)},setFloat64:function(t,e){q(this,8,t,F,e,arguments.length>2?arguments[2]:void 0)}});b(E,_),b(k,A),t.exports={ArrayBuffer:E,DataView:k}},1048:(t,e,n)=>{"use strict";var r=n(7908),i=n(1400),o=n(7466),a=Math.min;t.exports=[].copyWithin||function(t,e){var n=r(this),s=o(n.length),u=i(t,s),c=i(e,s),l=arguments.length>2?arguments[2]:void 0,f=a((void 0===l?s:i(l,s))-c,s-u),h=1;for(c<u&&u<c+f&&(h=-1,c+=f-1,u+=f-1);f-- >0;)c in n?n[u]=n[c]:delete n[u],u+=h,c+=h;return n}},1285:(t,e,n)=>{"use strict";var r=n(7908),i=n(1400),o=n(7466);t.exports=function(t){for(var e=r(this),n=o(e.length),a=arguments.length,s=i(a>1?arguments[1]:void 0,n),u=a>2?arguments[2]:void 0,c=void 0===u?n:i(u,n);c>s;)e[s++]=t;return e}},8533:(t,e,n)=>{"use strict";var r=n(2092).forEach,i=n(2133)("forEach");t.exports=i?[].forEach:function(t){return r(this,t,arguments.length>1?arguments[1]:void 0)}},8457:(t,e,n)=>{"use strict";var r=n(9974),i=n(7908),o=n(3411),a=n(7659),s=n(7466),u=n(6135),c=n(1246);t.exports=function(t){var e,n,l,f,h,p,d=i(t),v="function"==typeof this?this:Array,g=arguments.length,y=g>1?arguments[1]:void 0,m=void 0!==y,b=c(d),x=0;if(m&&(y=r(y,g>2?arguments[2]:void 0,2)),null==b||v==Array&&a(b))for(n=new v(e=s(d.length));e>x;x++)p=m?y(d[x],x):d[x],u(n,x,p);else for(h=(f=b.call(d)).next,n=new v;!(l=h.call(f)).done;x++)p=m?o(f,y,[l.value,x],!0):l.value,u(n,x,p);return n.length=x,n}},1318:(t,e,n)=>{var r=n(5656),i=n(7466),o=n(1400),a=function(t){return function(e,n,a){var s,u=r(e),c=i(u.length),l=o(a,c);if(t&&n!=n){for(;c>l;)if((s=u[l++])!=s)return!0}else for(;c>l;l++)if((t||l in u)&&u[l]===n)return t||l||0;return!t&&-1}};t.exports={includes:a(!0),indexOf:a(!1)}},2092:(t,e,n)=>{var r=n(9974),i=n(8361),o=n(7908),a=n(7466),s=n(5417),u=[].push,c=function(t){var e=1==t,n=2==t,c=3==t,l=4==t,f=6==t,h=7==t,p=5==t||f;return function(d,v,g,y){for(var m,b,x=o(d),w=i(x),S=r(v,g,3),_=a(w.length),A=0,M=y||s,T=e?M(d,_):n||h?M(d,0):void 0;_>A;A++)if((p||A in w)&&(b=S(m=w[A],A,x),t))if(e)T[A]=b;else if(b)switch(t){case 3:return!0;case 5:return m;case 6:return A;case 2:u.call(T,m)}else switch(t){case 4:return!1;case 7:u.call(T,m)}return f?-1:c||l?l:T}};t.exports={forEach:c(0),map:c(1),filter:c(2),some:c(3),every:c(4),find:c(5),findIndex:c(6),filterOut:c(7)}},6583:(t,e,n)=>{"use strict";var r=n(5656),i=n(9958),o=n(7466),a=n(2133),s=Math.min,u=[].lastIndexOf,c=!!u&&1/[1].lastIndexOf(1,-0)<0,l=a("lastIndexOf"),f=c||!l;t.exports=f?function(t){if(c)return u.apply(this,arguments)||0;var e=r(this),n=o(e.length),a=n-1;for(arguments.length>1&&(a=s(a,i(arguments[1]))),a<0&&(a=n+a);a>=0;a--)if(a in e&&e[a]===t)return a||0;return-1}:u},1194:(t,e,n)=>{var r=n(7293),i=n(5112),o=n(7392),a=i("species");t.exports=function(t){return o>=51||!r((function(){var e=[];return(e.constructor={})[a]=function(){return{foo:1}},1!==e[t](Boolean).foo}))}},2133:(t,e,n)=>{"use strict";var r=n(7293);t.exports=function(t,e){var n=[][t];return!!n&&r((function(){n.call(null,e||function(){throw 1},1)}))}},3671:(t,e,n)=>{var r=n(3099),i=n(7908),o=n(8361),a=n(7466),s=function(t){return function(e,n,s,u){r(n);var c=i(e),l=o(c),f=a(c.length),h=t?f-1:0,p=t?-1:1;if(s<2)for(;;){if(h in l){u=l[h],h+=p;break}if(h+=p,t?h<0:f<=h)throw TypeError("Reduce of empty array with no initial value")}for(;t?h>=0:f>h;h+=p)h in l&&(u=n(u,l[h],h,c));return u}};t.exports={left:s(!1),right:s(!0)}},5417:(t,e,n)=>{var r=n(111),i=n(3157),o=n(5112)("species");t.exports=function(t,e){var n;return i(t)&&("function"!=typeof(n=t.constructor)||n!==Array&&!i(n.prototype)?r(n)&&null===(n=n[o])&&(n=void 0):n=void 0),new(void 0===n?Array:n)(0===e?0:e)}},3411:(t,e,n)=>{var r=n(9670),i=n(9212);t.exports=function(t,e,n,o){try{return o?e(r(n)[0],n[1]):e(n)}catch(e){throw i(t),e}}},7072:(t,e,n)=>{var r=n(5112)("iterator"),i=!1;try{var o=0,a={next:function(){return{done:!!o++}},return:function(){i=!0}};a[r]=function(){return this},Array.from(a,(function(){throw 2}))}catch(t){}t.exports=function(t,e){if(!e&&!i)return!1;var n=!1;try{var o={};o[r]=function(){return{next:function(){return{done:n=!0}}}},t(o)}catch(t){}return n}},4326:t=>{var e={}.toString;t.exports=function(t){return e.call(t).slice(8,-1)}},648:(t,e,n)=>{var r=n(1694),i=n(4326),o=n(5112)("toStringTag"),a="Arguments"==i(function(){return arguments}());t.exports=r?i:function(t){var e,n,r;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(n=function(t,e){try{return t[e]}catch(t){}}(e=Object(t),o))?n:a?i(e):"Object"==(r=i(e))&&"function"==typeof e.callee?"Arguments":r}},5631:(t,e,n)=>{"use strict";var r=n(3070).f,i=n(30),o=n(2248),a=n(9974),s=n(5787),u=n(408),c=n(654),l=n(6340),f=n(9781),h=n(2423).fastKey,p=n(9909),d=p.set,v=p.getterFor;t.exports={getConstructor:function(t,e,n,c){var l=t((function(t,r){s(t,l,e),d(t,{type:e,index:i(null),first:void 0,last:void 0,size:0}),f||(t.size=0),null!=r&&u(r,t[c],{that:t,AS_ENTRIES:n})})),p=v(e),g=function(t,e,n){var r,i,o=p(t),a=y(t,e);return a?a.value=n:(o.last=a={index:i=h(e,!0),key:e,value:n,previous:r=o.last,next:void 0,removed:!1},o.first||(o.first=a),r&&(r.next=a),f?o.size++:t.size++,"F"!==i&&(o.index[i]=a)),t},y=function(t,e){var n,r=p(t),i=h(e);if("F"!==i)return r.index[i];for(n=r.first;n;n=n.next)if(n.key==e)return n};return o(l.prototype,{clear:function(){for(var t=p(this),e=t.index,n=t.first;n;)n.removed=!0,n.previous&&(n.previous=n.previous.next=void 0),delete e[n.index],n=n.next;t.first=t.last=void 0,f?t.size=0:this.size=0},delete:function(t){var e=this,n=p(e),r=y(e,t);if(r){var i=r.next,o=r.previous;delete n.index[r.index],r.removed=!0,o&&(o.next=i),i&&(i.previous=o),n.first==r&&(n.first=i),n.last==r&&(n.last=o),f?n.size--:e.size--}return!!r},forEach:function(t){for(var e,n=p(this),r=a(t,arguments.length>1?arguments[1]:void 0,3);e=e?e.next:n.first;)for(r(e.value,e.key,this);e&&e.removed;)e=e.previous},has:function(t){return!!y(this,t)}}),o(l.prototype,n?{get:function(t){var e=y(this,t);return e&&e.value},set:function(t,e){return g(this,0===t?0:t,e)}}:{add:function(t){return g(this,t=0===t?0:t,t)}}),f&&r(l.prototype,"size",{get:function(){return p(this).size}}),l},setStrong:function(t,e,n){var r=e+" Iterator",i=v(e),o=v(r);c(t,e,(function(t,e){d(this,{type:r,target:t,state:i(t),kind:e,last:void 0})}),(function(){for(var t=o(this),e=t.kind,n=t.last;n&&n.removed;)n=n.previous;return t.target&&(t.last=n=n?n.next:t.state.first)?"keys"==e?{value:n.key,done:!1}:"values"==e?{value:n.value,done:!1}:{value:[n.key,n.value],done:!1}:(t.target=void 0,{value:void 0,done:!0})}),n?"entries":"values",!n,!0),l(e)}}},9320:(t,e,n)=>{"use strict";var r=n(2248),i=n(2423).getWeakData,o=n(9670),a=n(111),s=n(5787),u=n(408),c=n(2092),l=n(6656),f=n(9909),h=f.set,p=f.getterFor,d=c.find,v=c.findIndex,g=0,y=function(t){return t.frozen||(t.frozen=new m)},m=function(){this.entries=[]},b=function(t,e){return d(t.entries,(function(t){return t[0]===e}))};m.prototype={get:function(t){var e=b(this,t);if(e)return e[1]},has:function(t){return!!b(this,t)},set:function(t,e){var n=b(this,t);n?n[1]=e:this.entries.push([t,e])},delete:function(t){var e=v(this.entries,(function(e){return e[0]===t}));return~e&&this.entries.splice(e,1),!!~e}},t.exports={getConstructor:function(t,e,n,c){var f=t((function(t,r){s(t,f,e),h(t,{type:e,id:g++,frozen:void 0}),null!=r&&u(r,t[c],{that:t,AS_ENTRIES:n})})),d=p(e),v=function(t,e,n){var r=d(t),a=i(o(e),!0);return!0===a?y(r).set(e,n):a[r.id]=n,t};return r(f.prototype,{delete:function(t){var e=d(this);if(!a(t))return!1;var n=i(t);return!0===n?y(e).delete(t):n&&l(n,e.id)&&delete n[e.id]},has:function(t){var e=d(this);if(!a(t))return!1;var n=i(t);return!0===n?y(e).has(t):n&&l(n,e.id)}}),r(f.prototype,n?{get:function(t){var e=d(this);if(a(t)){var n=i(t);return!0===n?y(e).get(t):n?n[e.id]:void 0}},set:function(t,e){return v(this,t,e)}}:{add:function(t){return v(this,t,!0)}}),f}}},7710:(t,e,n)=>{"use strict";var r=n(2109),i=n(7854),o=n(4705),a=n(1320),s=n(2423),u=n(408),c=n(5787),l=n(111),f=n(7293),h=n(7072),p=n(8003),d=n(9587);t.exports=function(t,e,n){var v=-1!==t.indexOf("Map"),g=-1!==t.indexOf("Weak"),y=v?"set":"add",m=i[t],b=m&&m.prototype,x=m,w={},S=function(t){var e=b[t];a(b,t,"add"==t?function(t){return e.call(this,0===t?0:t),this}:"delete"==t?function(t){return!(g&&!l(t))&&e.call(this,0===t?0:t)}:"get"==t?function(t){return g&&!l(t)?void 0:e.call(this,0===t?0:t)}:"has"==t?function(t){return!(g&&!l(t))&&e.call(this,0===t?0:t)}:function(t,n){return e.call(this,0===t?0:t,n),this})};if(o(t,"function"!=typeof m||!(g||b.forEach&&!f((function(){(new m).entries().next()})))))x=n.getConstructor(e,t,v,y),s.REQUIRED=!0;else if(o(t,!0)){var _=new x,A=_[y](g?{}:-0,1)!=_,M=f((function(){_.has(1)})),T=h((function(t){new m(t)})),E=!g&&f((function(){for(var t=new m,e=5;e--;)t[y](e,e);return!t.has(-0)}));T||((x=e((function(e,n){c(e,x,t);var r=d(new m,e,x);return null!=n&&u(n,r[y],{that:r,AS_ENTRIES:v}),r}))).prototype=b,b.constructor=x),(M||E)&&(S("delete"),S("has"),v&&S("get")),(E||A)&&S(y),g&&b.clear&&delete b.clear}return w[t]=x,r({global:!0,forced:x!=m},w),p(x,t),g||n.setStrong(x,t,v),x}},9920:(t,e,n)=>{var r=n(6656),i=n(3887),o=n(1236),a=n(3070);t.exports=function(t,e){for(var n=i(e),s=a.f,u=o.f,c=0;c<n.length;c++){var l=n[c];r(t,l)||s(t,l,u(e,l))}}},4964:(t,e,n)=>{var r=n(5112)("match");t.exports=function(t){var e=/./;try{"/./"[t](e)}catch(n){try{return e[r]=!1,"/./"[t](e)}catch(t){}}return!1}},8544:(t,e,n)=>{var r=n(7293);t.exports=!r((function(){function t(){}return t.prototype.constructor=null,Object.getPrototypeOf(new t)!==t.prototype}))},4230:(t,e,n)=>{var r=n(4488),i=/"/g;t.exports=function(t,e,n,o){var a=String(r(t)),s="<"+e;return""!==n&&(s+=" "+n+'="'+String(o).replace(i,"&quot;")+'"'),s+">"+a+"</"+e+">"}},4994:(t,e,n)=>{"use strict";var r=n(3383).IteratorPrototype,i=n(30),o=n(9114),a=n(8003),s=n(7497),u=function(){return this};t.exports=function(t,e,n){var c=e+" Iterator";return t.prototype=i(r,{next:o(1,n)}),a(t,c,!1,!0),s[c]=u,t}},8880:(t,e,n)=>{var r=n(9781),i=n(3070),o=n(9114);t.exports=r?function(t,e,n){return i.f(t,e,o(1,n))}:function(t,e,n){return t[e]=n,t}},9114:t=>{t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},6135:(t,e,n)=>{"use strict";var r=n(7593),i=n(3070),o=n(9114);t.exports=function(t,e,n){var a=r(e);a in t?i.f(t,a,o(0,n)):t[a]=n}},5573:(t,e,n)=>{"use strict";var r=n(7293),i=n(6650).start,o=Math.abs,a=Date.prototype,s=a.getTime,u=a.toISOString;t.exports=r((function(){return"0385-07-25T07:06:39.999Z"!=u.call(new Date(-50000000000001))}))||!r((function(){u.call(new Date(NaN))}))?function(){if(!isFinite(s.call(this)))throw RangeError("Invalid time value");var t=this,e=t.getUTCFullYear(),n=t.getUTCMilliseconds(),r=e<0?"-":e>9999?"+":"";return r+i(o(e),r?6:4,0)+"-"+i(t.getUTCMonth()+1,2,0)+"-"+i(t.getUTCDate(),2,0)+"T"+i(t.getUTCHours(),2,0)+":"+i(t.getUTCMinutes(),2,0)+":"+i(t.getUTCSeconds(),2,0)+"."+i(n,3,0)+"Z"}:u},8709:(t,e,n)=>{"use strict";var r=n(9670),i=n(7593);t.exports=function(t){if("string"!==t&&"number"!==t&&"default"!==t)throw TypeError("Incorrect hint");return i(r(this),"number"!==t)}},654:(t,e,n)=>{"use strict";var r=n(2109),i=n(4994),o=n(9518),a=n(7674),s=n(8003),u=n(8880),c=n(1320),l=n(5112),f=n(1913),h=n(7497),p=n(3383),d=p.IteratorPrototype,v=p.BUGGY_SAFARI_ITERATORS,g=l("iterator"),y="keys",m="values",b="entries",x=function(){return this};t.exports=function(t,e,n,l,p,w,S){i(n,e,l);var _,A,M,T=function(t){if(t===p&&C)return C;if(!v&&t in O)return O[t];switch(t){case y:case m:case b:return function(){return new n(this,t)}}return function(){return new n(this)}},E=e+" Iterator",k=!1,O=t.prototype,P=O[g]||O["@@iterator"]||p&&O[p],C=!v&&P||T(p),R="Array"==e&&O.entries||P;if(R&&(_=o(R.call(new t)),d!==Object.prototype&&_.next&&(f||o(_)===d||(a?a(_,d):"function"!=typeof _[g]&&u(_,g,x)),s(_,E,!0,!0),f&&(h[E]=x))),p==m&&P&&P.name!==m&&(k=!0,C=function(){return P.call(this)}),f&&!S||O[g]===C||u(O,g,C),h[e]=C,p)if(A={values:T(m),keys:w?C:T(y),entries:T(b)},S)for(M in A)(v||k||!(M in O))&&c(O,M,A[M]);else r({target:e,proto:!0,forced:v||k},A);return A}},7235:(t,e,n)=>{var r=n(857),i=n(6656),o=n(6061),a=n(3070).f;t.exports=function(t){var e=r.Symbol||(r.Symbol={});i(e,t)||a(e,t,{value:o.f(t)})}},9781:(t,e,n)=>{var r=n(7293);t.exports=!r((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]}))},317:(t,e,n)=>{var r=n(7854),i=n(111),o=r.document,a=i(o)&&i(o.createElement);t.exports=function(t){return a?o.createElement(t):{}}},8324:t=>{t.exports={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0}},8334:(t,e,n)=>{var r=n(8113);t.exports=/(iphone|ipod|ipad).*applewebkit/i.test(r)},5268:(t,e,n)=>{var r=n(4326),i=n(7854);t.exports="process"==r(i.process)},1036:(t,e,n)=>{var r=n(8113);t.exports=/web0s(?!.*chrome)/i.test(r)},8113:(t,e,n)=>{var r=n(5005);t.exports=r("navigator","userAgent")||""},7392:(t,e,n)=>{var r,i,o=n(7854),a=n(8113),s=o.process,u=s&&s.versions,c=u&&u.v8;c?i=(r=c.split("."))[0]+r[1]:a&&(!(r=a.match(/Edge\/(\d+)/))||r[1]>=74)&&(r=a.match(/Chrome\/(\d+)/))&&(i=r[1]),t.exports=i&&+i},748:t=>{t.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},2109:(t,e,n)=>{var r=n(7854),i=n(1236).f,o=n(8880),a=n(1320),s=n(3505),u=n(9920),c=n(4705);t.exports=function(t,e){var n,l,f,h,p,d=t.target,v=t.global,g=t.stat;if(n=v?r:g?r[d]||s(d,{}):(r[d]||{}).prototype)for(l in e){if(h=e[l],f=t.noTargetGet?(p=i(n,l))&&p.value:n[l],!c(v?l:d+(g?".":"#")+l,t.forced)&&void 0!==f){if(typeof h==typeof f)continue;u(h,f)}(t.sham||f&&f.sham)&&o(h,"sham",!0),a(n,l,h,t)}}},7293:t=>{t.exports=function(t){try{return!!t()}catch(t){return!0}}},7007:(t,e,n)=>{"use strict";n(4916);var r=n(1320),i=n(7293),o=n(5112),a=n(2261),s=n(8880),u=o("species"),c=!i((function(){var t=/./;return t.exec=function(){var t=[];return t.groups={a:"7"},t},"7"!=="".replace(t,"$<a>")})),l="$0"==="a".replace(/./,"$0"),f=o("replace"),h=!!/./[f]&&""===/./[f]("a","$0"),p=!i((function(){var t=/(?:)/,e=t.exec;t.exec=function(){return e.apply(this,arguments)};var n="ab".split(t);return 2!==n.length||"a"!==n[0]||"b"!==n[1]}));t.exports=function(t,e,n,f){var d=o(t),v=!i((function(){var e={};return e[d]=function(){return 7},7!=""[t](e)})),g=v&&!i((function(){var e=!1,n=/a/;return"split"===t&&((n={}).constructor={},n.constructor[u]=function(){return n},n.flags="",n[d]=/./[d]),n.exec=function(){return e=!0,null},n[d](""),!e}));if(!v||!g||"replace"===t&&(!c||!l||h)||"split"===t&&!p){var y=/./[d],m=n(d,""[t],(function(t,e,n,r,i){return e.exec===a?v&&!i?{done:!0,value:y.call(e,n,r)}:{done:!0,value:t.call(n,e,r)}:{done:!1}}),{REPLACE_KEEPS_$0:l,REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE:h}),b=m[0],x=m[1];r(String.prototype,t,b),r(RegExp.prototype,d,2==e?function(t,e){return x.call(t,this,e)}:function(t){return x.call(t,this)})}f&&s(RegExp.prototype[d],"sham",!0)}},6790:(t,e,n)=>{"use strict";var r=n(3157),i=n(7466),o=n(9974),a=function(t,e,n,s,u,c,l,f){for(var h,p=u,d=0,v=!!l&&o(l,f,3);d<s;){if(d in n){if(h=v?v(n[d],d,e):n[d],c>0&&r(h))p=a(t,e,h,i(h.length),p,c-1)-1;else{if(p>=9007199254740991)throw TypeError("Exceed the acceptable array length");t[p]=h}p++}d++}return p};t.exports=a},6677:(t,e,n)=>{var r=n(7293);t.exports=!r((function(){return Object.isExtensible(Object.preventExtensions({}))}))},9974:(t,e,n)=>{var r=n(3099);t.exports=function(t,e,n){if(r(t),void 0===e)return t;switch(n){case 0:return function(){return t.call(e)};case 1:return function(n){return t.call(e,n)};case 2:return function(n,r){return t.call(e,n,r)};case 3:return function(n,r,i){return t.call(e,n,r,i)}}return function(){return t.apply(e,arguments)}}},7065:(t,e,n)=>{"use strict";var r=n(3099),i=n(111),o=[].slice,a={},s=function(t,e,n){if(!(e in a)){for(var r=[],i=0;i<e;i++)r[i]="a["+i+"]";a[e]=Function("C,a","return new C("+r.join(",")+")")}return a[e](t,n)};t.exports=Function.bind||function(t){var e=r(this),n=o.call(arguments,1),a=function(){var r=n.concat(o.call(arguments));return this instanceof a?s(e,r.length,r):e.apply(t,r)};return i(e.prototype)&&(a.prototype=e.prototype),a}},5005:(t,e,n)=>{var r=n(857),i=n(7854),o=function(t){return"function"==typeof t?t:void 0};t.exports=function(t,e){return arguments.length<2?o(r[t])||o(i[t]):r[t]&&r[t][e]||i[t]&&i[t][e]}},1246:(t,e,n)=>{var r=n(648),i=n(7497),o=n(5112)("iterator");t.exports=function(t){if(null!=t)return t[o]||t["@@iterator"]||i[r(t)]}},8554:(t,e,n)=>{var r=n(9670),i=n(1246);t.exports=function(t){var e=i(t);if("function"!=typeof e)throw TypeError(String(t)+" is not iterable");return r(e.call(t))}},647:(t,e,n)=>{var r=n(7908),i=Math.floor,o="".replace,a=/\$([$&'`]|\d{1,2}|<[^>]*>)/g,s=/\$([$&'`]|\d{1,2})/g;t.exports=function(t,e,n,u,c,l){var f=n+t.length,h=u.length,p=s;return void 0!==c&&(c=r(c),p=a),o.call(l,p,(function(r,o){var a;switch(o.charAt(0)){case"$":return"$";case"&":return t;case"`":return e.slice(0,n);case"'":return e.slice(f);case"<":a=c[o.slice(1,-1)];break;default:var s=+o;if(0===s)return r;if(s>h){var l=i(s/10);return 0===l?r:l<=h?void 0===u[l-1]?o.charAt(1):u[l-1]+o.charAt(1):r}a=u[s-1]}return void 0===a?"":a}))}},7854:(t,e,n)=>{var r=function(t){return t&&t.Math==Math&&t};t.exports=r("object"==typeof globalThis&&globalThis)||r("object"==typeof window&&window)||r("object"==typeof self&&self)||r("object"==typeof n.g&&n.g)||function(){return this}()||Function("return this")()},6656:t=>{var e={}.hasOwnProperty;t.exports=function(t,n){return e.call(t,n)}},3501:t=>{t.exports={}},842:(t,e,n)=>{var r=n(7854);t.exports=function(t,e){var n=r.console;n&&n.error&&(1===arguments.length?n.error(t):n.error(t,e))}},490:(t,e,n)=>{var r=n(5005);t.exports=r("document","documentElement")},4664:(t,e,n)=>{var r=n(9781),i=n(7293),o=n(317);t.exports=!r&&!i((function(){return 7!=Object.defineProperty(o("div"),"a",{get:function(){return 7}}).a}))},1179:t=>{var e=Math.abs,n=Math.pow,r=Math.floor,i=Math.log,o=Math.LN2;t.exports={pack:function(t,a,s){var u,c,l,f=new Array(s),h=8*s-a-1,p=(1<<h)-1,d=p>>1,v=23===a?n(2,-24)-n(2,-77):0,g=t<0||0===t&&1/t<0?1:0,y=0;for((t=e(t))!=t||t===1/0?(c=t!=t?1:0,u=p):(u=r(i(t)/o),t*(l=n(2,-u))<1&&(u--,l*=2),(t+=u+d>=1?v/l:v*n(2,1-d))*l>=2&&(u++,l/=2),u+d>=p?(c=0,u=p):u+d>=1?(c=(t*l-1)*n(2,a),u+=d):(c=t*n(2,d-1)*n(2,a),u=0));a>=8;f[y++]=255&c,c/=256,a-=8);for(u=u<<a|c,h+=a;h>0;f[y++]=255&u,u/=256,h-=8);return f[--y]|=128*g,f},unpack:function(t,e){var r,i=t.length,o=8*i-e-1,a=(1<<o)-1,s=a>>1,u=o-7,c=i-1,l=t[c--],f=127&l;for(l>>=7;u>0;f=256*f+t[c],c--,u-=8);for(r=f&(1<<-u)-1,f>>=-u,u+=e;u>0;r=256*r+t[c],c--,u-=8);if(0===f)f=1-s;else{if(f===a)return r?NaN:l?-1/0:1/0;r+=n(2,e),f-=s}return(l?-1:1)*r*n(2,f-e)}}},8361:(t,e,n)=>{var r=n(7293),i=n(4326),o="".split;t.exports=r((function(){return!Object("z").propertyIsEnumerable(0)}))?function(t){return"String"==i(t)?o.call(t,""):Object(t)}:Object},9587:(t,e,n)=>{var r=n(111),i=n(7674);t.exports=function(t,e,n){var o,a;return i&&"function"==typeof(o=e.constructor)&&o!==n&&r(a=o.prototype)&&a!==n.prototype&&i(t,a),t}},2788:(t,e,n)=>{var r=n(5465),i=Function.toString;"function"!=typeof r.inspectSource&&(r.inspectSource=function(t){return i.call(t)}),t.exports=r.inspectSource},2423:(t,e,n)=>{var r=n(3501),i=n(111),o=n(6656),a=n(3070).f,s=n(9711),u=n(6677),c=s("meta"),l=0,f=Object.isExtensible||function(){return!0},h=function(t){a(t,c,{value:{objectID:"O"+ ++l,weakData:{}}})},p=t.exports={REQUIRED:!1,fastKey:function(t,e){if(!i(t))return"symbol"==typeof t?t:("string"==typeof t?"S":"P")+t;if(!o(t,c)){if(!f(t))return"F";if(!e)return"E";h(t)}return t[c].objectID},getWeakData:function(t,e){if(!o(t,c)){if(!f(t))return!0;if(!e)return!1;h(t)}return t[c].weakData},onFreeze:function(t){return u&&p.REQUIRED&&f(t)&&!o(t,c)&&h(t),t}};r[c]=!0},9909:(t,e,n)=>{var r,i,o,a=n(8536),s=n(7854),u=n(111),c=n(8880),l=n(6656),f=n(5465),h=n(6200),p=n(3501),d=s.WeakMap;if(a){var v=f.state||(f.state=new d),g=v.get,y=v.has,m=v.set;r=function(t,e){return e.facade=t,m.call(v,t,e),e},i=function(t){return g.call(v,t)||{}},o=function(t){return y.call(v,t)}}else{var b=h("state");p[b]=!0,r=function(t,e){return e.facade=t,c(t,b,e),e},i=function(t){return l(t,b)?t[b]:{}},o=function(t){return l(t,b)}}t.exports={set:r,get:i,has:o,enforce:function(t){return o(t)?i(t):r(t,{})},getterFor:function(t){return function(e){var n;if(!u(e)||(n=i(e)).type!==t)throw TypeError("Incompatible receiver, "+t+" required");return n}}}},7659:(t,e,n)=>{var r=n(5112),i=n(7497),o=r("iterator"),a=Array.prototype;t.exports=function(t){return void 0!==t&&(i.Array===t||a[o]===t)}},3157:(t,e,n)=>{var r=n(4326);t.exports=Array.isArray||function(t){return"Array"==r(t)}},4705:(t,e,n)=>{var r=n(7293),i=/#|\.prototype\./,o=function(t,e){var n=s[a(t)];return n==c||n!=u&&("function"==typeof e?r(e):!!e)},a=o.normalize=function(t){return String(t).replace(i,".").toLowerCase()},s=o.data={},u=o.NATIVE="N",c=o.POLYFILL="P";t.exports=o},8730:(t,e,n)=>{var r=n(111),i=Math.floor;t.exports=function(t){return!r(t)&&isFinite(t)&&i(t)===t}},111:t=>{t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},1913:t=>{t.exports=!1},7850:(t,e,n)=>{var r=n(111),i=n(4326),o=n(5112)("match");t.exports=function(t){var e;return r(t)&&(void 0!==(e=t[o])?!!e:"RegExp"==i(t))}},408:(t,e,n)=>{var r=n(9670),i=n(7659),o=n(7466),a=n(9974),s=n(1246),u=n(9212),c=function(t,e){this.stopped=t,this.result=e};t.exports=function(t,e,n){var l,f,h,p,d,v,g,y=n&&n.that,m=!(!n||!n.AS_ENTRIES),b=!(!n||!n.IS_ITERATOR),x=!(!n||!n.INTERRUPTED),w=a(e,y,1+m+x),S=function(t){return l&&u(l),new c(!0,t)},_=function(t){return m?(r(t),x?w(t[0],t[1],S):w(t[0],t[1])):x?w(t,S):w(t)};if(b)l=t;else{if("function"!=typeof(f=s(t)))throw TypeError("Target is not iterable");if(i(f)){for(h=0,p=o(t.length);p>h;h++)if((d=_(t[h]))&&d instanceof c)return d;return new c(!1)}l=f.call(t)}for(v=l.next;!(g=v.call(l)).done;){try{d=_(g.value)}catch(t){throw u(l),t}if("object"==typeof d&&d&&d instanceof c)return d}return new c(!1)}},9212:(t,e,n)=>{var r=n(9670);t.exports=function(t){var e=t.return;if(void 0!==e)return r(e.call(t)).value}},3383:(t,e,n)=>{"use strict";var r,i,o,a=n(7293),s=n(9518),u=n(8880),c=n(6656),l=n(5112),f=n(1913),h=l("iterator"),p=!1;[].keys&&("next"in(o=[].keys())?(i=s(s(o)))!==Object.prototype&&(r=i):p=!0);var d=null==r||a((function(){var t={};return r[h].call(t)!==t}));d&&(r={}),f&&!d||c(r,h)||u(r,h,(function(){return this})),t.exports={IteratorPrototype:r,BUGGY_SAFARI_ITERATORS:p}},7497:t=>{t.exports={}},6736:t=>{var e=Math.expm1,n=Math.exp;t.exports=!e||e(10)>22025.465794806718||e(10)<22025.465794806718||-2e-17!=e(-2e-17)?function(t){return 0==(t=+t)?t:t>-1e-6&&t<1e-6?t+t*t/2:n(t)-1}:e},6130:(t,e,n)=>{var r=n(4310),i=Math.abs,o=Math.pow,a=o(2,-52),s=o(2,-23),u=o(2,127)*(2-s),c=o(2,-126);t.exports=Math.fround||function(t){var e,n,o=i(t),l=r(t);return o<c?l*(o/c/s+1/a-1/a)*c*s:(n=(e=(1+s/a)*o)-(e-o))>u||n!=n?l*(1/0):l*n}},6513:t=>{var e=Math.log;t.exports=Math.log1p||function(t){return(t=+t)>-1e-8&&t<1e-8?t-t*t/2:e(1+t)}},4310:t=>{t.exports=Math.sign||function(t){return 0==(t=+t)||t!=t?t:t<0?-1:1}},5948:(t,e,n)=>{var r,i,o,a,s,u,c,l,f=n(7854),h=n(1236).f,p=n(261).set,d=n(8334),v=n(1036),g=n(5268),y=f.MutationObserver||f.WebKitMutationObserver,m=f.document,b=f.process,x=f.Promise,w=h(f,"queueMicrotask"),S=w&&w.value;S||(r=function(){var t,e;for(g&&(t=b.domain)&&t.exit();i;){e=i.fn,i=i.next;try{e()}catch(t){throw i?a():o=void 0,t}}o=void 0,t&&t.enter()},d||g||v||!y||!m?x&&x.resolve?(c=x.resolve(void 0),l=c.then,a=function(){l.call(c,r)}):a=g?function(){b.nextTick(r)}:function(){p.call(f,r)}:(s=!0,u=m.createTextNode(""),new y(r).observe(u,{characterData:!0}),a=function(){u.data=s=!s})),t.exports=S||function(t){var e={fn:t,next:void 0};o&&(o.next=e),i||(i=e,a()),o=e}},3366:(t,e,n)=>{var r=n(7854);t.exports=r.Promise},133:(t,e,n)=>{var r=n(5268),i=n(7392),o=n(7293);t.exports=!!Object.getOwnPropertySymbols&&!o((function(){return!Symbol.sham&&(r?38===i:i>37&&i<41)}))},590:(t,e,n)=>{var r=n(7293),i=n(5112),o=n(1913),a=i("iterator");t.exports=!r((function(){var t=new URL("b?a=1&b=2&c=3","http://a"),e=t.searchParams,n="";return t.pathname="c%20d",e.forEach((function(t,r){e.delete("b"),n+=r+t})),o&&!t.toJSON||!e.sort||"http://a/c%20d?a=1&c=3"!==t.href||"3"!==e.get("c")||"a=1"!==String(new URLSearchParams("?a=1"))||!e[a]||"a"!==new URL("https://a@b").username||"b"!==new URLSearchParams(new URLSearchParams("a=b")).get("a")||"xn--e1aybc"!==new URL("http://тест").host||"#%D0%B1"!==new URL("http://a#б").hash||"a1c3"!==n||"x"!==new URL("http://x",void 0).host}))},8536:(t,e,n)=>{var r=n(7854),i=n(2788),o=r.WeakMap;t.exports="function"==typeof o&&/native code/.test(i(o))},8523:(t,e,n)=>{"use strict";var r=n(3099),i=function(t){var e,n;this.promise=new t((function(t,r){if(void 0!==e||void 0!==n)throw TypeError("Bad Promise constructor");e=t,n=r})),this.resolve=r(e),this.reject=r(n)};t.exports.f=function(t){return new i(t)}},3929:(t,e,n)=>{var r=n(7850);t.exports=function(t){if(r(t))throw TypeError("The method doesn't accept regular expressions");return t}},7023:(t,e,n)=>{var r=n(7854).isFinite;t.exports=Number.isFinite||function(t){return"number"==typeof t&&r(t)}},2814:(t,e,n)=>{var r=n(7854),i=n(3111).trim,o=n(1361),a=r.parseFloat,s=1/a(o+"-0")!=-1/0;t.exports=s?function(t){var e=i(String(t)),n=a(e);return 0===n&&"-"==e.charAt(0)?-0:n}:a},3009:(t,e,n)=>{var r=n(7854),i=n(3111).trim,o=n(1361),a=r.parseInt,s=/^[+-]?0[Xx]/,u=8!==a(o+"08")||22!==a(o+"0x16");t.exports=u?function(t,e){var n=i(String(t));return a(n,e>>>0||(s.test(n)?16:10))}:a},1574:(t,e,n)=>{"use strict";var r=n(9781),i=n(7293),o=n(1956),a=n(5181),s=n(5296),u=n(7908),c=n(8361),l=Object.assign,f=Object.defineProperty;t.exports=!l||i((function(){if(r&&1!==l({b:1},l(f({},"a",{enumerable:!0,get:function(){f(this,"b",{value:3,enumerable:!1})}}),{b:2})).b)return!0;var t={},e={},n=Symbol(),i="abcdefghijklmnopqrst";return t[n]=7,i.split("").forEach((function(t){e[t]=t})),7!=l({},t)[n]||o(l({},e)).join("")!=i}))?function(t,e){for(var n=u(t),i=arguments.length,l=1,f=a.f,h=s.f;i>l;)for(var p,d=c(arguments[l++]),v=f?o(d).concat(f(d)):o(d),g=v.length,y=0;g>y;)p=v[y++],r&&!h.call(d,p)||(n[p]=d[p]);return n}:l},30:(t,e,n)=>{var r,i=n(9670),o=n(6048),a=n(748),s=n(3501),u=n(490),c=n(317),l=n(6200)("IE_PROTO"),f=function(){},h=function(t){return"<script>"+t+"<\/script>"},p=function(){try{r=document.domain&&new ActiveXObject("htmlfile")}catch(t){}var t,e;p=r?function(t){t.write(h("")),t.close();var e=t.parentWindow.Object;return t=null,e}(r):((e=c("iframe")).style.display="none",u.appendChild(e),e.src=String("javascript:"),(t=e.contentWindow.document).open(),t.write(h("document.F=Object")),t.close(),t.F);for(var n=a.length;n--;)delete p.prototype[a[n]];return p()};s[l]=!0,t.exports=Object.create||function(t,e){var n;return null!==t?(f.prototype=i(t),n=new f,f.prototype=null,n[l]=t):n=p(),void 0===e?n:o(n,e)}},6048:(t,e,n)=>{var r=n(9781),i=n(3070),o=n(9670),a=n(1956);t.exports=r?Object.defineProperties:function(t,e){o(t);for(var n,r=a(e),s=r.length,u=0;s>u;)i.f(t,n=r[u++],e[n]);return t}},3070:(t,e,n)=>{var r=n(9781),i=n(4664),o=n(9670),a=n(7593),s=Object.defineProperty;e.f=r?s:function(t,e,n){if(o(t),e=a(e,!0),o(n),i)try{return s(t,e,n)}catch(t){}if("get"in n||"set"in n)throw TypeError("Accessors not supported");return"value"in n&&(t[e]=n.value),t}},1236:(t,e,n)=>{var r=n(9781),i=n(5296),o=n(9114),a=n(5656),s=n(7593),u=n(6656),c=n(4664),l=Object.getOwnPropertyDescriptor;e.f=r?l:function(t,e){if(t=a(t),e=s(e,!0),c)try{return l(t,e)}catch(t){}if(u(t,e))return o(!i.f.call(t,e),t[e])}},1156:(t,e,n)=>{var r=n(5656),i=n(8006).f,o={}.toString,a="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];t.exports.f=function(t){return a&&"[object Window]"==o.call(t)?function(t){try{return i(t)}catch(t){return a.slice()}}(t):i(r(t))}},8006:(t,e,n)=>{var r=n(6324),i=n(748).concat("length","prototype");e.f=Object.getOwnPropertyNames||function(t){return r(t,i)}},5181:(t,e)=>{e.f=Object.getOwnPropertySymbols},9518:(t,e,n)=>{var r=n(6656),i=n(7908),o=n(6200),a=n(8544),s=o("IE_PROTO"),u=Object.prototype;t.exports=a?Object.getPrototypeOf:function(t){return t=i(t),r(t,s)?t[s]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?u:null}},6324:(t,e,n)=>{var r=n(6656),i=n(5656),o=n(1318).indexOf,a=n(3501);t.exports=function(t,e){var n,s=i(t),u=0,c=[];for(n in s)!r(a,n)&&r(s,n)&&c.push(n);for(;e.length>u;)r(s,n=e[u++])&&(~o(c,n)||c.push(n));return c}},1956:(t,e,n)=>{var r=n(6324),i=n(748);t.exports=Object.keys||function(t){return r(t,i)}},5296:(t,e)=>{"use strict";var n={}.propertyIsEnumerable,r=Object.getOwnPropertyDescriptor,i=r&&!n.call({1:2},1);e.f=i?function(t){var e=r(this,t);return!!e&&e.enumerable}:n},9026:(t,e,n)=>{"use strict";var r=n(1913),i=n(7854),o=n(7293);t.exports=r||!o((function(){var t=Math.random();__defineSetter__.call(null,t,(function(){})),delete i[t]}))},7674:(t,e,n)=>{var r=n(9670),i=n(6077);t.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var t,e=!1,n={};try{(t=Object.getOwnPropertyDescriptor(Object.prototype,"__proto__").set).call(n,[]),e=n instanceof Array}catch(t){}return function(n,o){return r(n),i(o),e?t.call(n,o):n.__proto__=o,n}}():void 0)},4699:(t,e,n)=>{var r=n(9781),i=n(1956),o=n(5656),a=n(5296).f,s=function(t){return function(e){for(var n,s=o(e),u=i(s),c=u.length,l=0,f=[];c>l;)n=u[l++],r&&!a.call(s,n)||f.push(t?[n,s[n]]:s[n]);return f}};t.exports={entries:s(!0),values:s(!1)}},288:(t,e,n)=>{"use strict";var r=n(1694),i=n(648);t.exports=r?{}.toString:function(){return"[object "+i(this)+"]"}},3887:(t,e,n)=>{var r=n(5005),i=n(8006),o=n(5181),a=n(9670);t.exports=r("Reflect","ownKeys")||function(t){var e=i.f(a(t)),n=o.f;return n?e.concat(n(t)):e}},857:(t,e,n)=>{var r=n(7854);t.exports=r},2534:t=>{t.exports=function(t){try{return{error:!1,value:t()}}catch(t){return{error:!0,value:t}}}},9478:(t,e,n)=>{var r=n(9670),i=n(111),o=n(8523);t.exports=function(t,e){if(r(t),i(e)&&e.constructor===t)return e;var n=o.f(t);return(0,n.resolve)(e),n.promise}},2248:(t,e,n)=>{var r=n(1320);t.exports=function(t,e,n){for(var i in e)r(t,i,e[i],n);return t}},1320:(t,e,n)=>{var r=n(7854),i=n(8880),o=n(6656),a=n(3505),s=n(2788),u=n(9909),c=u.get,l=u.enforce,f=String(String).split("String");(t.exports=function(t,e,n,s){var u,c=!!s&&!!s.unsafe,h=!!s&&!!s.enumerable,p=!!s&&!!s.noTargetGet;"function"==typeof n&&("string"!=typeof e||o(n,"name")||i(n,"name",e),(u=l(n)).source||(u.source=f.join("string"==typeof e?e:""))),t!==r?(c?!p&&t[e]&&(h=!0):delete t[e],h?t[e]=n:i(t,e,n)):h?t[e]=n:a(e,n)})(Function.prototype,"toString",(function(){return"function"==typeof this&&c(this).source||s(this)}))},7651:(t,e,n)=>{var r=n(4326),i=n(2261);t.exports=function(t,e){var n=t.exec;if("function"==typeof n){var o=n.call(t,e);if("object"!=typeof o)throw TypeError("RegExp exec method returned something other than an Object or null");return o}if("RegExp"!==r(t))throw TypeError("RegExp#exec called on incompatible receiver");return i.call(t,e)}},2261:(t,e,n)=>{"use strict";var r,i,o=n(7066),a=n(2999),s=RegExp.prototype.exec,u=String.prototype.replace,c=s,l=(r=/a/,i=/b*/g,s.call(r,"a"),s.call(i,"a"),0!==r.lastIndex||0!==i.lastIndex),f=a.UNSUPPORTED_Y||a.BROKEN_CARET,h=void 0!==/()??/.exec("")[1];(l||h||f)&&(c=function(t){var e,n,r,i,a=this,c=f&&a.sticky,p=o.call(a),d=a.source,v=0,g=t;return c&&(-1===(p=p.replace("y","")).indexOf("g")&&(p+="g"),g=String(t).slice(a.lastIndex),a.lastIndex>0&&(!a.multiline||a.multiline&&"\n"!==t[a.lastIndex-1])&&(d="(?: "+d+")",g=" "+g,v++),n=new RegExp("^(?:"+d+")",p)),h&&(n=new RegExp("^"+d+"$(?!\\s)",p)),l&&(e=a.lastIndex),r=s.call(c?n:a,g),c?r?(r.input=r.input.slice(v),r[0]=r[0].slice(v),r.index=a.lastIndex,a.lastIndex+=r[0].length):a.lastIndex=0:l&&r&&(a.lastIndex=a.global?r.index+r[0].length:e),h&&r&&r.length>1&&u.call(r[0],n,(function(){for(i=1;i<arguments.length-2;i++)void 0===arguments[i]&&(r[i]=void 0)})),r}),t.exports=c},7066:(t,e,n)=>{"use strict";var r=n(9670);t.exports=function(){var t=r(this),e="";return t.global&&(e+="g"),t.ignoreCase&&(e+="i"),t.multiline&&(e+="m"),t.dotAll&&(e+="s"),t.unicode&&(e+="u"),t.sticky&&(e+="y"),e}},2999:(t,e,n)=>{"use strict";var r=n(7293);function i(t,e){return RegExp(t,e)}e.UNSUPPORTED_Y=r((function(){var t=i("a","y");return t.lastIndex=2,null!=t.exec("abcd")})),e.BROKEN_CARET=r((function(){var t=i("^r","gy");return t.lastIndex=2,null!=t.exec("str")}))},4488:t=>{t.exports=function(t){if(null==t)throw TypeError("Can't call method on "+t);return t}},1150:t=>{t.exports=Object.is||function(t,e){return t===e?0!==t||1/t==1/e:t!=t&&e!=e}},3505:(t,e,n)=>{var r=n(7854),i=n(8880);t.exports=function(t,e){try{i(r,t,e)}catch(n){r[t]=e}return e}},6340:(t,e,n)=>{"use strict";var r=n(5005),i=n(3070),o=n(5112),a=n(9781),s=o("species");t.exports=function(t){var e=r(t),n=i.f;a&&e&&!e[s]&&n(e,s,{configurable:!0,get:function(){return this}})}},8003:(t,e,n)=>{var r=n(3070).f,i=n(6656),o=n(5112)("toStringTag");t.exports=function(t,e,n){t&&!i(t=n?t:t.prototype,o)&&r(t,o,{configurable:!0,value:e})}},6200:(t,e,n)=>{var r=n(2309),i=n(9711),o=r("keys");t.exports=function(t){return o[t]||(o[t]=i(t))}},5465:(t,e,n)=>{var r=n(7854),i=n(3505),o="__core-js_shared__",a=r[o]||i(o,{});t.exports=a},2309:(t,e,n)=>{var r=n(1913),i=n(5465);(t.exports=function(t,e){return i[t]||(i[t]=void 0!==e?e:{})})("versions",[]).push({version:"3.9.1",mode:r?"pure":"global",copyright:"© 2021 Denis Pushkarev (zloirock.ru)"})},6707:(t,e,n)=>{var r=n(9670),i=n(3099),o=n(5112)("species");t.exports=function(t,e){var n,a=r(t).constructor;return void 0===a||null==(n=r(a)[o])?e:i(n)}},3429:(t,e,n)=>{var r=n(7293);t.exports=function(t){return r((function(){var e=""[t]('"');return e!==e.toLowerCase()||e.split('"').length>3}))}},8710:(t,e,n)=>{var r=n(9958),i=n(4488),o=function(t){return function(e,n){var o,a,s=String(i(e)),u=r(n),c=s.length;return u<0||u>=c?t?"":void 0:(o=s.charCodeAt(u))<55296||o>56319||u+1===c||(a=s.charCodeAt(u+1))<56320||a>57343?t?s.charAt(u):o:t?s.slice(u,u+2):a-56320+(o-55296<<10)+65536}};t.exports={codeAt:o(!1),charAt:o(!0)}},7061:(t,e,n)=>{var r=n(8113);t.exports=/Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(r)},6650:(t,e,n)=>{var r=n(7466),i=n(8415),o=n(4488),a=Math.ceil,s=function(t){return function(e,n,s){var u,c,l=String(o(e)),f=l.length,h=void 0===s?" ":String(s),p=r(n);return p<=f||""==h?l:(u=p-f,(c=i.call(h,a(u/h.length))).length>u&&(c=c.slice(0,u)),t?l+c:c+l)}};t.exports={start:s(!1),end:s(!0)}},3197:t=>{"use strict";var e=2147483647,n=/[^\0-\u007E]/,r=/[.\u3002\uFF0E\uFF61]/g,i="Overflow: input needs wider integers to process",o=Math.floor,a=String.fromCharCode,s=function(t){return t+22+75*(t<26)},u=function(t,e,n){var r=0;for(t=n?o(t/700):t>>1,t+=o(t/e);t>455;r+=36)t=o(t/35);return o(r+36*t/(t+38))},c=function(t){var n,r,c=[],l=(t=function(t){for(var e=[],n=0,r=t.length;n<r;){var i=t.charCodeAt(n++);if(i>=55296&&i<=56319&&n<r){var o=t.charCodeAt(n++);56320==(64512&o)?e.push(((1023&i)<<10)+(1023&o)+65536):(e.push(i),n--)}else e.push(i)}return e}(t)).length,f=128,h=0,p=72;for(n=0;n<t.length;n++)(r=t[n])<128&&c.push(a(r));var d=c.length,v=d;for(d&&c.push("-");v<l;){var g=e;for(n=0;n<t.length;n++)(r=t[n])>=f&&r<g&&(g=r);var y=v+1;if(g-f>o((e-h)/y))throw RangeError(i);for(h+=(g-f)*y,f=g,n=0;n<t.length;n++){if((r=t[n])<f&&++h>e)throw RangeError(i);if(r==f){for(var m=h,b=36;;b+=36){var x=b<=p?1:b>=p+26?26:b-p;if(m<x)break;var w=m-x,S=36-x;c.push(a(s(x+w%S))),m=o(w/S)}c.push(a(s(m))),p=u(h,y,v==d),h=0,++v}}++h,++f}return c.join("")};t.exports=function(t){var e,i,o=[],a=t.toLowerCase().replace(r,".").split(".");for(e=0;e<a.length;e++)i=a[e],o.push(n.test(i)?"xn--"+c(i):i);return o.join(".")}},8415:(t,e,n)=>{"use strict";var r=n(9958),i=n(4488);t.exports="".repeat||function(t){var e=String(i(this)),n="",o=r(t);if(o<0||o==1/0)throw RangeError("Wrong number of repetitions");for(;o>0;(o>>>=1)&&(e+=e))1&o&&(n+=e);return n}},6091:(t,e,n)=>{var r=n(7293),i=n(1361);t.exports=function(t){return r((function(){return!!i[t]()||"​᠎"!="​᠎"[t]()||i[t].name!==t}))}},3111:(t,e,n)=>{var r=n(4488),i="["+n(1361)+"]",o=RegExp("^"+i+i+"*"),a=RegExp(i+i+"*$"),s=function(t){return function(e){var n=String(r(e));return 1&t&&(n=n.replace(o,"")),2&t&&(n=n.replace(a,"")),n}};t.exports={start:s(1),end:s(2),trim:s(3)}},261:(t,e,n)=>{var r,i,o,a=n(7854),s=n(7293),u=n(9974),c=n(490),l=n(317),f=n(8334),h=n(5268),p=a.location,d=a.setImmediate,v=a.clearImmediate,g=a.process,y=a.MessageChannel,m=a.Dispatch,b=0,x={},w=function(t){if(x.hasOwnProperty(t)){var e=x[t];delete x[t],e()}},S=function(t){return function(){w(t)}},_=function(t){w(t.data)},A=function(t){a.postMessage(t+"",p.protocol+"//"+p.host)};d&&v||(d=function(t){for(var e=[],n=1;arguments.length>n;)e.push(arguments[n++]);return x[++b]=function(){("function"==typeof t?t:Function(t)).apply(void 0,e)},r(b),b},v=function(t){delete x[t]},h?r=function(t){g.nextTick(S(t))}:m&&m.now?r=function(t){m.now(S(t))}:y&&!f?(o=(i=new y).port2,i.port1.onmessage=_,r=u(o.postMessage,o,1)):a.addEventListener&&"function"==typeof postMessage&&!a.importScripts&&p&&"file:"!==p.protocol&&!s(A)?(r=A,a.addEventListener("message",_,!1)):r="onreadystatechange"in l("script")?function(t){c.appendChild(l("script")).onreadystatechange=function(){c.removeChild(this),w(t)}}:function(t){setTimeout(S(t),0)}),t.exports={set:d,clear:v}},863:(t,e,n)=>{var r=n(4326);t.exports=function(t){if("number"!=typeof t&&"Number"!=r(t))throw TypeError("Incorrect invocation");return+t}},1400:(t,e,n)=>{var r=n(9958),i=Math.max,o=Math.min;t.exports=function(t,e){var n=r(t);return n<0?i(n+e,0):o(n,e)}},7067:(t,e,n)=>{var r=n(9958),i=n(7466);t.exports=function(t){if(void 0===t)return 0;var e=r(t),n=i(e);if(e!==n)throw RangeError("Wrong length or index");return n}},5656:(t,e,n)=>{var r=n(8361),i=n(4488);t.exports=function(t){return r(i(t))}},9958:t=>{var e=Math.ceil,n=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?n:e)(t)}},7466:(t,e,n)=>{var r=n(9958),i=Math.min;t.exports=function(t){return t>0?i(r(t),9007199254740991):0}},7908:(t,e,n)=>{var r=n(4488);t.exports=function(t){return Object(r(t))}},4590:(t,e,n)=>{var r=n(3002);t.exports=function(t,e){var n=r(t);if(n%e)throw RangeError("Wrong offset");return n}},3002:(t,e,n)=>{var r=n(9958);t.exports=function(t){var e=r(t);if(e<0)throw RangeError("The argument can't be less than 0");return e}},7593:(t,e,n)=>{var r=n(111);t.exports=function(t,e){if(!r(t))return t;var n,i;if(e&&"function"==typeof(n=t.toString)&&!r(i=n.call(t)))return i;if("function"==typeof(n=t.valueOf)&&!r(i=n.call(t)))return i;if(!e&&"function"==typeof(n=t.toString)&&!r(i=n.call(t)))return i;throw TypeError("Can't convert object to primitive value")}},1694:(t,e,n)=>{var r={};r[n(5112)("toStringTag")]="z",t.exports="[object z]"===String(r)},9843:(t,e,n)=>{"use strict";var r=n(2109),i=n(7854),o=n(9781),a=n(3832),s=n(260),u=n(3331),c=n(5787),l=n(9114),f=n(8880),h=n(7466),p=n(7067),d=n(4590),v=n(7593),g=n(6656),y=n(648),m=n(111),b=n(30),x=n(7674),w=n(8006).f,S=n(7321),_=n(2092).forEach,A=n(6340),M=n(3070),T=n(1236),E=n(9909),k=n(9587),O=E.get,P=E.set,C=M.f,R=T.f,I=Math.round,j=i.RangeError,N=u.ArrayBuffer,L=u.DataView,z=s.NATIVE_ARRAY_BUFFER_VIEWS,D=s.TYPED_ARRAY_TAG,F=s.TypedArray,U=s.TypedArrayPrototype,B=s.aTypedArrayConstructor,q=s.isTypedArray,V="BYTES_PER_ELEMENT",W="Wrong length",H=function(t,e){for(var n=0,r=e.length,i=new(B(t))(r);r>n;)i[n]=e[n++];return i},Y=function(t,e){C(t,e,{get:function(){return O(this)[e]}})},G=function(t){var e;return t instanceof N||"ArrayBuffer"==(e=y(t))||"SharedArrayBuffer"==e},X=function(t,e){return q(t)&&"symbol"!=typeof e&&e in t&&String(+e)==String(e)},$=function(t,e){return X(t,e=v(e,!0))?l(2,t[e]):R(t,e)},Z=function(t,e,n){return!(X(t,e=v(e,!0))&&m(n)&&g(n,"value"))||g(n,"get")||g(n,"set")||n.configurable||g(n,"writable")&&!n.writable||g(n,"enumerable")&&!n.enumerable?C(t,e,n):(t[e]=n.value,t)};o?(z||(T.f=$,M.f=Z,Y(U,"buffer"),Y(U,"byteOffset"),Y(U,"byteLength"),Y(U,"length")),r({target:"Object",stat:!0,forced:!z},{getOwnPropertyDescriptor:$,defineProperty:Z}),t.exports=function(t,e,n){var o=t.match(/\d+$/)[0]/8,s=t+(n?"Clamped":"")+"Array",u="get"+t,l="set"+t,v=i[s],g=v,y=g&&g.prototype,M={},T=function(t,e){C(t,e,{get:function(){return function(t,e){var n=O(t);return n.view[u](e*o+n.byteOffset,!0)}(this,e)},set:function(t){return function(t,e,r){var i=O(t);n&&(r=(r=I(r))<0?0:r>255?255:255&r),i.view[l](e*o+i.byteOffset,r,!0)}(this,e,t)},enumerable:!0})};z?a&&(g=e((function(t,e,n,r){return c(t,g,s),k(m(e)?G(e)?void 0!==r?new v(e,d(n,o),r):void 0!==n?new v(e,d(n,o)):new v(e):q(e)?H(g,e):S.call(g,e):new v(p(e)),t,g)})),x&&x(g,F),_(w(v),(function(t){t in g||f(g,t,v[t])})),g.prototype=y):(g=e((function(t,e,n,r){c(t,g,s);var i,a,u,l=0,f=0;if(m(e)){if(!G(e))return q(e)?H(g,e):S.call(g,e);i=e,f=d(n,o);var v=e.byteLength;if(void 0===r){if(v%o)throw j(W);if((a=v-f)<0)throw j(W)}else if((a=h(r)*o)+f>v)throw j(W);u=a/o}else u=p(e),i=new N(a=u*o);for(P(t,{buffer:i,byteOffset:f,byteLength:a,length:u,view:new L(i)});l<u;)T(t,l++)})),x&&x(g,F),y=g.prototype=b(U)),y.constructor!==g&&f(y,"constructor",g),D&&f(y,D,s),M[s]=g,r({global:!0,forced:g!=v,sham:!z},M),V in g||f(g,V,o),V in y||f(y,V,o),A(s)}):t.exports=function(){}},3832:(t,e,n)=>{var r=n(7854),i=n(7293),o=n(7072),a=n(260).NATIVE_ARRAY_BUFFER_VIEWS,s=r.ArrayBuffer,u=r.Int8Array;t.exports=!a||!i((function(){u(1)}))||!i((function(){new u(-1)}))||!o((function(t){new u,new u(null),new u(1.5),new u(t)}),!0)||i((function(){return 1!==new u(new s(2),1,void 0).length}))},3074:(t,e,n)=>{var r=n(260).aTypedArrayConstructor,i=n(6707);t.exports=function(t,e){for(var n=i(t,t.constructor),o=0,a=e.length,s=new(r(n))(a);a>o;)s[o]=e[o++];return s}},7321:(t,e,n)=>{var r=n(7908),i=n(7466),o=n(1246),a=n(7659),s=n(9974),u=n(260).aTypedArrayConstructor;t.exports=function(t){var e,n,c,l,f,h,p=r(t),d=arguments.length,v=d>1?arguments[1]:void 0,g=void 0!==v,y=o(p);if(null!=y&&!a(y))for(h=(f=y.call(p)).next,p=[];!(l=h.call(f)).done;)p.push(l.value);for(g&&d>2&&(v=s(v,arguments[2],2)),n=i(p.length),c=new(u(this))(n),e=0;n>e;e++)c[e]=g?v(p[e],e):p[e];return c}},9711:t=>{var e=0,n=Math.random();t.exports=function(t){return"Symbol("+String(void 0===t?"":t)+")_"+(++e+n).toString(36)}},3307:(t,e,n)=>{var r=n(133);t.exports=r&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},6061:(t,e,n)=>{var r=n(5112);e.f=r},5112:(t,e,n)=>{var r=n(7854),i=n(2309),o=n(6656),a=n(9711),s=n(133),u=n(3307),c=i("wks"),l=r.Symbol,f=u?l:l&&l.withoutSetter||a;t.exports=function(t){return o(c,t)&&(s||"string"==typeof c[t])||(s&&o(l,t)?c[t]=l[t]:c[t]=f("Symbol."+t)),c[t]}},1361:t=>{t.exports="\t\n\v\f\r                　\u2028\u2029\ufeff"},9170:(t,e,n)=>{"use strict";var r=n(2109),i=n(9518),o=n(7674),a=n(30),s=n(8880),u=n(9114),c=n(408),l=function(t,e){var n=this;if(!(n instanceof l))return new l(t,e);o&&(n=o(new Error(void 0),i(n))),void 0!==e&&s(n,"message",String(e));var r=[];return c(t,r.push,{that:r}),s(n,"errors",r),n};l.prototype=a(Error.prototype,{constructor:u(5,l),message:u(5,""),name:u(5,"AggregateError")}),r({global:!0},{AggregateError:l})},8264:(t,e,n)=>{"use strict";var r=n(2109),i=n(7854),o=n(3331),a=n(6340),s=o.ArrayBuffer;r({global:!0,forced:i.ArrayBuffer!==s},{ArrayBuffer:s}),a("ArrayBuffer")},6938:(t,e,n)=>{var r=n(2109),i=n(260);r({target:"ArrayBuffer",stat:!0,forced:!i.NATIVE_ARRAY_BUFFER_VIEWS},{isView:i.isView})},9575:(t,e,n)=>{"use strict";var r=n(2109),i=n(7293),o=n(3331),a=n(9670),s=n(1400),u=n(7466),c=n(6707),l=o.ArrayBuffer,f=o.DataView,h=l.prototype.slice;r({target:"ArrayBuffer",proto:!0,unsafe:!0,forced:i((function(){return!new l(2).slice(1,void 0).byteLength}))},{slice:function(t,e){if(void 0!==h&&void 0===e)return h.call(a(this),t);for(var n=a(this).byteLength,r=s(t,n),i=s(void 0===e?n:e,n),o=new(c(this,l))(u(i-r)),p=new f(this),d=new f(o),v=0;r<i;)d.setUint8(v++,p.getUint8(r++));return o}})},2222:(t,e,n)=>{"use strict";var r=n(2109),i=n(7293),o=n(3157),a=n(111),s=n(7908),u=n(7466),c=n(6135),l=n(5417),f=n(1194),h=n(5112),p=n(7392),d=h("isConcatSpreadable"),v=9007199254740991,g="Maximum allowed index exceeded",y=p>=51||!i((function(){var t=[];return t[d]=!1,t.concat()[0]!==t})),m=f("concat"),b=function(t){if(!a(t))return!1;var e=t[d];return void 0!==e?!!e:o(t)};r({target:"Array",proto:!0,forced:!y||!m},{concat:function(t){var e,n,r,i,o,a=s(this),f=l(a,0),h=0;for(e=-1,r=arguments.length;e<r;e++)if(b(o=-1===e?a:arguments[e])){if(h+(i=u(o.length))>v)throw TypeError(g);for(n=0;n<i;n++,h++)n in o&&c(f,h,o[n])}else{if(h>=v)throw TypeError(g);c(f,h++,o)}return f.length=h,f}})},545:(t,e,n)=>{var r=n(2109),i=n(1048),o=n(1223);r({target:"Array",proto:!0},{copyWithin:i}),o("copyWithin")},6541:(t,e,n)=>{"use strict";var r=n(2109),i=n(2092).every;r({target:"Array",proto:!0,forced:!n(2133)("every")},{every:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}})},3290:(t,e,n)=>{var r=n(2109),i=n(1285),o=n(1223);r({target:"Array",proto:!0},{fill:i}),o("fill")},7327:(t,e,n)=>{"use strict";var r=n(2109),i=n(2092).filter;r({target:"Array",proto:!0,forced:!n(1194)("filter")},{filter:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}})},4553:(t,e,n)=>{"use strict";var r=n(2109),i=n(2092).findIndex,o=n(1223),a="findIndex",s=!0;a in[]&&Array(1).findIndex((function(){s=!1})),r({target:"Array",proto:!0,forced:s},{findIndex:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}}),o(a)},9826:(t,e,n)=>{"use strict";var r=n(2109),i=n(2092).find,o=n(1223),a="find",s=!0;a in[]&&Array(1).find((function(){s=!1})),r({target:"Array",proto:!0,forced:s},{find:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}}),o(a)},6535:(t,e,n)=>{"use strict";var r=n(2109),i=n(6790),o=n(7908),a=n(7466),s=n(3099),u=n(5417);r({target:"Array",proto:!0},{flatMap:function(t){var e,n=o(this),r=a(n.length);return s(t),(e=u(n,0)).length=i(e,n,n,r,0,1,t,arguments.length>1?arguments[1]:void 0),e}})},4944:(t,e,n)=>{"use strict";var r=n(2109),i=n(6790),o=n(7908),a=n(7466),s=n(9958),u=n(5417);r({target:"Array",proto:!0},{flat:function(){var t=arguments.length?arguments[0]:void 0,e=o(this),n=a(e.length),r=u(e,0);return r.length=i(r,e,e,n,0,void 0===t?1:s(t)),r}})},9554:(t,e,n)=>{"use strict";var r=n(2109),i=n(8533);r({target:"Array",proto:!0,forced:[].forEach!=i},{forEach:i})},1038:(t,e,n)=>{var r=n(2109),i=n(8457);r({target:"Array",stat:!0,forced:!n(7072)((function(t){Array.from(t)}))},{from:i})},6699:(t,e,n)=>{"use strict";var r=n(2109),i=n(1318).includes,o=n(1223);r({target:"Array",proto:!0},{includes:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}}),o("includes")},2772:(t,e,n)=>{"use strict";var r=n(2109),i=n(1318).indexOf,o=n(2133),a=[].indexOf,s=!!a&&1/[1].indexOf(1,-0)<0,u=o("indexOf");r({target:"Array",proto:!0,forced:s||!u},{indexOf:function(t){return s?a.apply(this,arguments)||0:i(this,t,arguments.length>1?arguments[1]:void 0)}})},9753:(t,e,n)=>{n(2109)({target:"Array",stat:!0},{isArray:n(3157)})},6992:(t,e,n)=>{"use strict";var r=n(5656),i=n(1223),o=n(7497),a=n(9909),s=n(654),u="Array Iterator",c=a.set,l=a.getterFor(u);t.exports=s(Array,"Array",(function(t,e){c(this,{type:u,target:r(t),index:0,kind:e})}),(function(){var t=l(this),e=t.target,n=t.kind,r=t.index++;return!e||r>=e.length?(t.target=void 0,{value:void 0,done:!0}):"keys"==n?{value:r,done:!1}:"values"==n?{value:e[r],done:!1}:{value:[r,e[r]],done:!1}}),"values"),o.Arguments=o.Array,i("keys"),i("values"),i("entries")},9600:(t,e,n)=>{"use strict";var r=n(2109),i=n(8361),o=n(5656),a=n(2133),s=[].join,u=i!=Object,c=a("join",",");r({target:"Array",proto:!0,forced:u||!c},{join:function(t){return s.call(o(this),void 0===t?",":t)}})},4986:(t,e,n)=>{var r=n(2109),i=n(6583);r({target:"Array",proto:!0,forced:i!==[].lastIndexOf},{lastIndexOf:i})},1249:(t,e,n)=>{"use strict";var r=n(2109),i=n(2092).map;r({target:"Array",proto:!0,forced:!n(1194)("map")},{map:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}})},6572:(t,e,n)=>{"use strict";var r=n(2109),i=n(7293),o=n(6135);r({target:"Array",stat:!0,forced:i((function(){function t(){}return!(Array.of.call(t)instanceof t)}))},{of:function(){for(var t=0,e=arguments.length,n=new("function"==typeof this?this:Array)(e);e>t;)o(n,t,arguments[t++]);return n.length=e,n}})},6644:(t,e,n)=>{"use strict";var r=n(2109),i=n(3671).right,o=n(2133),a=n(7392),s=n(5268);r({target:"Array",proto:!0,forced:!o("reduceRight")||!s&&a>79&&a<83},{reduceRight:function(t){return i(this,t,arguments.length,arguments.length>1?arguments[1]:void 0)}})},5827:(t,e,n)=>{"use strict";var r=n(2109),i=n(3671).left,o=n(2133),a=n(7392),s=n(5268);r({target:"Array",proto:!0,forced:!o("reduce")||!s&&a>79&&a<83},{reduce:function(t){return i(this,t,arguments.length,arguments.length>1?arguments[1]:void 0)}})},5069:(t,e,n)=>{"use strict";var r=n(2109),i=n(3157),o=[].reverse,a=[1,2];r({target:"Array",proto:!0,forced:String(a)===String(a.reverse())},{reverse:function(){return i(this)&&(this.length=this.length),o.call(this)}})},7042:(t,e,n)=>{"use strict";var r=n(2109),i=n(111),o=n(3157),a=n(1400),s=n(7466),u=n(5656),c=n(6135),l=n(5112),f=n(1194)("slice"),h=l("species"),p=[].slice,d=Math.max;r({target:"Array",proto:!0,forced:!f},{slice:function(t,e){var n,r,l,f=u(this),v=s(f.length),g=a(t,v),y=a(void 0===e?v:e,v);if(o(f)&&("function"!=typeof(n=f.constructor)||n!==Array&&!o(n.prototype)?i(n)&&null===(n=n[h])&&(n=void 0):n=void 0,n===Array||void 0===n))return p.call(f,g,y);for(r=new(void 0===n?Array:n)(d(y-g,0)),l=0;g<y;g++,l++)g in f&&c(r,l,f[g]);return r.length=l,r}})},5212:(t,e,n)=>{"use strict";var r=n(2109),i=n(2092).some;r({target:"Array",proto:!0,forced:!n(2133)("some")},{some:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}})},2707:(t,e,n)=>{"use strict";var r=n(2109),i=n(3099),o=n(7908),a=n(7293),s=n(2133),u=[],c=u.sort,l=a((function(){u.sort(void 0)})),f=a((function(){u.sort(null)})),h=s("sort");r({target:"Array",proto:!0,forced:l||!f||!h},{sort:function(t){return void 0===t?c.call(o(this)):c.call(o(this),i(t))}})},8706:(t,e,n)=>{n(6340)("Array")},561:(t,e,n)=>{"use strict";var r=n(2109),i=n(1400),o=n(9958),a=n(7466),s=n(7908),u=n(5417),c=n(6135),l=n(1194)("splice"),f=Math.max,h=Math.min,p=9007199254740991,d="Maximum allowed length exceeded";r({target:"Array",proto:!0,forced:!l},{splice:function(t,e){var n,r,l,v,g,y,m=s(this),b=a(m.length),x=i(t,b),w=arguments.length;if(0===w?n=r=0:1===w?(n=0,r=b-x):(n=w-2,r=h(f(o(e),0),b-x)),b+n-r>p)throw TypeError(d);for(l=u(m,r),v=0;v<r;v++)(g=x+v)in m&&c(l,v,m[g]);if(l.length=r,n<r){for(v=x;v<b-r;v++)y=v+n,(g=v+r)in m?m[y]=m[g]:delete m[y];for(v=b;v>b-r+n;v--)delete m[v-1]}else if(n>r)for(v=b-r;v>x;v--)y=v+n-1,(g=v+r-1)in m?m[y]=m[g]:delete m[y];for(v=0;v<n;v++)m[v+x]=arguments[v+2];return m.length=b-r+n,l}})},9244:(t,e,n)=>{n(1223)("flatMap")},3792:(t,e,n)=>{n(1223)("flat")},6716:(t,e,n)=>{var r=n(2109),i=n(3331);r({global:!0,forced:!n(4019)},{DataView:i.DataView})},3843:(t,e,n)=>{n(2109)({target:"Date",stat:!0},{now:function(){return(new Date).getTime()}})},8733:(t,e,n)=>{var r=n(2109),i=n(5573);r({target:"Date",proto:!0,forced:Date.prototype.toISOString!==i},{toISOString:i})},5735:(t,e,n)=>{"use strict";var r=n(2109),i=n(7293),o=n(7908),a=n(7593);r({target:"Date",proto:!0,forced:i((function(){return null!==new Date(NaN).toJSON()||1!==Date.prototype.toJSON.call({toISOString:function(){return 1}})}))},{toJSON:function(t){var e=o(this),n=a(e);return"number"!=typeof n||isFinite(n)?e.toISOString():null}})},6078:(t,e,n)=>{var r=n(8880),i=n(8709),o=n(5112)("toPrimitive"),a=Date.prototype;o in a||r(a,o,i)},3710:(t,e,n)=>{var r=n(1320),i=Date.prototype,o="Invalid Date",a=i.toString,s=i.getTime;new Date(NaN)+""!=o&&r(i,"toString",(function(){var t=s.call(this);return t==t?a.call(this):o}))},4812:(t,e,n)=>{n(2109)({target:"Function",proto:!0},{bind:n(7065)})},4855:(t,e,n)=>{"use strict";var r=n(111),i=n(3070),o=n(9518),a=n(5112)("hasInstance"),s=Function.prototype;a in s||i.f(s,a,{value:function(t){if("function"!=typeof this||!r(t))return!1;if(!r(this.prototype))return t instanceof this;for(;t=o(t);)if(this.prototype===t)return!0;return!1}})},8309:(t,e,n)=>{var r=n(9781),i=n(3070).f,o=Function.prototype,a=o.toString,s=/^\s*function ([^ (]*)/,u="name";r&&!(u in o)&&i(o,u,{configurable:!0,get:function(){try{return a.call(this).match(s)[1]}catch(t){return""}}})},5837:(t,e,n)=>{n(2109)({global:!0},{globalThis:n(7854)})},8862:(t,e,n)=>{var r=n(2109),i=n(5005),o=n(7293),a=i("JSON","stringify"),s=/[\uD800-\uDFFF]/g,u=/^[\uD800-\uDBFF]$/,c=/^[\uDC00-\uDFFF]$/,l=function(t,e,n){var r=n.charAt(e-1),i=n.charAt(e+1);return u.test(t)&&!c.test(i)||c.test(t)&&!u.test(r)?"\\u"+t.charCodeAt(0).toString(16):t},f=o((function(){return'"\\udf06\\ud834"'!==a("\udf06\ud834")||'"\\udead"'!==a("\udead")}));a&&r({target:"JSON",stat:!0,forced:f},{stringify:function(t,e,n){var r=a.apply(null,arguments);return"string"==typeof r?r.replace(s,l):r}})},3706:(t,e,n)=>{var r=n(7854);n(8003)(r.JSON,"JSON",!0)},1532:(t,e,n)=>{"use strict";var r=n(7710),i=n(5631);t.exports=r("Map",(function(t){return function(){return t(this,arguments.length?arguments[0]:void 0)}}),i)},9752:(t,e,n)=>{var r=n(2109),i=n(6513),o=Math.acosh,a=Math.log,s=Math.sqrt,u=Math.LN2;r({target:"Math",stat:!0,forced:!o||710!=Math.floor(o(Number.MAX_VALUE))||o(1/0)!=1/0},{acosh:function(t){return(t=+t)<1?NaN:t>94906265.62425156?a(t)+u:i(t-1+s(t-1)*s(t+1))}})},2376:(t,e,n)=>{var r=n(2109),i=Math.asinh,o=Math.log,a=Math.sqrt;r({target:"Math",stat:!0,forced:!(i&&1/i(0)>0)},{asinh:function t(e){return isFinite(e=+e)&&0!=e?e<0?-t(-e):o(e+a(e*e+1)):e}})},3181:(t,e,n)=>{var r=n(2109),i=Math.atanh,o=Math.log;r({target:"Math",stat:!0,forced:!(i&&1/i(-0)<0)},{atanh:function(t){return 0==(t=+t)?t:o((1+t)/(1-t))/2}})},3484:(t,e,n)=>{var r=n(2109),i=n(4310),o=Math.abs,a=Math.pow;r({target:"Math",stat:!0},{cbrt:function(t){return i(t=+t)*a(o(t),1/3)}})},2388:(t,e,n)=>{var r=n(2109),i=Math.floor,o=Math.log,a=Math.LOG2E;r({target:"Math",stat:!0},{clz32:function(t){return(t>>>=0)?31-i(o(t+.5)*a):32}})},8621:(t,e,n)=>{var r=n(2109),i=n(6736),o=Math.cosh,a=Math.abs,s=Math.E;r({target:"Math",stat:!0,forced:!o||o(710)===1/0},{cosh:function(t){var e=i(a(t)-1)+1;return(e+1/(e*s*s))*(s/2)}})},403:(t,e,n)=>{var r=n(2109),i=n(6736);r({target:"Math",stat:!0,forced:i!=Math.expm1},{expm1:i})},4755:(t,e,n)=>{n(2109)({target:"Math",stat:!0},{fround:n(6130)})},5438:(t,e,n)=>{var r=n(2109),i=Math.hypot,o=Math.abs,a=Math.sqrt;r({target:"Math",stat:!0,forced:!!i&&i(1/0,NaN)!==1/0},{hypot:function(t,e){for(var n,r,i=0,s=0,u=arguments.length,c=0;s<u;)c<(n=o(arguments[s++]))?(i=i*(r=c/n)*r+1,c=n):i+=n>0?(r=n/c)*r:n;return c===1/0?1/0:c*a(i)}})},332:(t,e,n)=>{var r=n(2109),i=n(7293),o=Math.imul;r({target:"Math",stat:!0,forced:i((function(){return-5!=o(4294967295,5)||2!=o.length}))},{imul:function(t,e){var n=65535,r=+t,i=+e,o=n&r,a=n&i;return 0|o*a+((n&r>>>16)*a+o*(n&i>>>16)<<16>>>0)}})},658:(t,e,n)=>{var r=n(2109),i=Math.log,o=Math.LOG10E;r({target:"Math",stat:!0},{log10:function(t){return i(t)*o}})},197:(t,e,n)=>{n(2109)({target:"Math",stat:!0},{log1p:n(6513)})},4914:(t,e,n)=>{var r=n(2109),i=Math.log,o=Math.LN2;r({target:"Math",stat:!0},{log2:function(t){return i(t)/o}})},2420:(t,e,n)=>{n(2109)({target:"Math",stat:!0},{sign:n(4310)})},160:(t,e,n)=>{var r=n(2109),i=n(7293),o=n(6736),a=Math.abs,s=Math.exp,u=Math.E;r({target:"Math",stat:!0,forced:i((function(){return-2e-17!=Math.sinh(-2e-17)}))},{sinh:function(t){return a(t=+t)<1?(o(t)-o(-t))/2:(s(t-1)-s(-t-1))*(u/2)}})},970:(t,e,n)=>{var r=n(2109),i=n(6736),o=Math.exp;r({target:"Math",stat:!0},{tanh:function(t){var e=i(t=+t),n=i(-t);return e==1/0?1:n==1/0?-1:(e-n)/(o(t)+o(-t))}})},2703:(t,e,n)=>{n(8003)(Math,"Math",!0)},3689:(t,e,n)=>{var r=n(2109),i=Math.ceil,o=Math.floor;r({target:"Math",stat:!0},{trunc:function(t){return(t>0?o:i)(t)}})},9653:(t,e,n)=>{"use strict";var r=n(9781),i=n(7854),o=n(4705),a=n(1320),s=n(6656),u=n(4326),c=n(9587),l=n(7593),f=n(7293),h=n(30),p=n(8006).f,d=n(1236).f,v=n(3070).f,g=n(3111).trim,y="Number",m=i.Number,b=m.prototype,x=u(h(b))==y,w=function(t){var e,n,r,i,o,a,s,u,c=l(t,!1);if("string"==typeof c&&c.length>2)if(43===(e=(c=g(c)).charCodeAt(0))||45===e){if(88===(n=c.charCodeAt(2))||120===n)return NaN}else if(48===e){switch(c.charCodeAt(1)){case 66:case 98:r=2,i=49;break;case 79:case 111:r=8,i=55;break;default:return+c}for(a=(o=c.slice(2)).length,s=0;s<a;s++)if((u=o.charCodeAt(s))<48||u>i)return NaN;return parseInt(o,r)}return+c};if(o(y,!m(" 0o1")||!m("0b1")||m("+0x1"))){for(var S,_=function(t){var e=arguments.length<1?0:t,n=this;return n instanceof _&&(x?f((function(){b.valueOf.call(n)})):u(n)!=y)?c(new m(w(e)),n,_):w(e)},A=r?p(m):"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger,fromString,range".split(","),M=0;A.length>M;M++)s(m,S=A[M])&&!s(_,S)&&v(_,S,d(m,S));_.prototype=b,b.constructor=_,a(i,y,_)}},3299:(t,e,n)=>{n(2109)({target:"Number",stat:!0},{EPSILON:Math.pow(2,-52)})},5192:(t,e,n)=>{n(2109)({target:"Number",stat:!0},{isFinite:n(7023)})},3161:(t,e,n)=>{n(2109)({target:"Number",stat:!0},{isInteger:n(8730)})},4048:(t,e,n)=>{n(2109)({target:"Number",stat:!0},{isNaN:function(t){return t!=t}})},8285:(t,e,n)=>{var r=n(2109),i=n(8730),o=Math.abs;r({target:"Number",stat:!0},{isSafeInteger:function(t){return i(t)&&o(t)<=9007199254740991}})},4363:(t,e,n)=>{n(2109)({target:"Number",stat:!0},{MAX_SAFE_INTEGER:9007199254740991})},5994:(t,e,n)=>{n(2109)({target:"Number",stat:!0},{MIN_SAFE_INTEGER:-9007199254740991})},1874:(t,e,n)=>{var r=n(2109),i=n(2814);r({target:"Number",stat:!0,forced:Number.parseFloat!=i},{parseFloat:i})},9494:(t,e,n)=>{var r=n(2109),i=n(3009);r({target:"Number",stat:!0,forced:Number.parseInt!=i},{parseInt:i})},6977:(t,e,n)=>{"use strict";var r=n(2109),i=n(9958),o=n(863),a=n(8415),s=n(7293),u=1..toFixed,c=Math.floor,l=function(t,e,n){return 0===e?n:e%2==1?l(t,e-1,n*t):l(t*t,e/2,n)},f=function(t,e,n){for(var r=-1,i=n;++r<6;)i+=e*t[r],t[r]=i%1e7,i=c(i/1e7)},h=function(t,e){for(var n=6,r=0;--n>=0;)r+=t[n],t[n]=c(r/e),r=r%e*1e7},p=function(t){for(var e=6,n="";--e>=0;)if(""!==n||0===e||0!==t[e]){var r=String(t[e]);n=""===n?r:n+a.call("0",7-r.length)+r}return n};r({target:"Number",proto:!0,forced:u&&("0.000"!==8e-5.toFixed(3)||"1"!==.9.toFixed(0)||"1.25"!==1.255.toFixed(2)||"1000000000000000128"!==(0xde0b6b3a7640080).toFixed(0))||!s((function(){u.call({})}))},{toFixed:function(t){var e,n,r,s,u=o(this),c=i(t),d=[0,0,0,0,0,0],v="",g="0";if(c<0||c>20)throw RangeError("Incorrect fraction digits");if(u!=u)return"NaN";if(u<=-1e21||u>=1e21)return String(u);if(u<0&&(v="-",u=-u),u>1e-21)if(n=(e=function(t){for(var e=0,n=t;n>=4096;)e+=12,n/=4096;for(;n>=2;)e+=1,n/=2;return e}(u*l(2,69,1))-69)<0?u*l(2,-e,1):u/l(2,e,1),n*=4503599627370496,(e=52-e)>0){for(f(d,0,n),r=c;r>=7;)f(d,1e7,0),r-=7;for(f(d,l(10,r,1),0),r=e-1;r>=23;)h(d,1<<23),r-=23;h(d,1<<r),f(d,1,1),h(d,2),g=p(d)}else f(d,0,n),f(d,1<<-e,0),g=p(d)+a.call("0",c);return c>0?v+((s=g.length)<=c?"0."+a.call("0",c-s)+g:g.slice(0,s-c)+"."+g.slice(s-c)):v+g}})},5147:(t,e,n)=>{"use strict";var r=n(2109),i=n(7293),o=n(863),a=1..toPrecision;r({target:"Number",proto:!0,forced:i((function(){return"1"!==a.call(1,void 0)}))||!i((function(){a.call({})}))},{toPrecision:function(t){return void 0===t?a.call(o(this)):a.call(o(this),t)}})},9601:(t,e,n)=>{var r=n(2109),i=n(1574);r({target:"Object",stat:!0,forced:Object.assign!==i},{assign:i})},8011:(t,e,n)=>{n(2109)({target:"Object",stat:!0,sham:!n(9781)},{create:n(30)})},9595:(t,e,n)=>{"use strict";var r=n(2109),i=n(9781),o=n(9026),a=n(7908),s=n(3099),u=n(3070);i&&r({target:"Object",proto:!0,forced:o},{__defineGetter__:function(t,e){u.f(a(this),t,{get:s(e),enumerable:!0,configurable:!0})}})},3321:(t,e,n)=>{var r=n(2109),i=n(9781);r({target:"Object",stat:!0,forced:!i,sham:!i},{defineProperties:n(6048)})},9070:(t,e,n)=>{var r=n(2109),i=n(9781);r({target:"Object",stat:!0,forced:!i,sham:!i},{defineProperty:n(3070).f})},5500:(t,e,n)=>{"use strict";var r=n(2109),i=n(9781),o=n(9026),a=n(7908),s=n(3099),u=n(3070);i&&r({target:"Object",proto:!0,forced:o},{__defineSetter__:function(t,e){u.f(a(this),t,{set:s(e),enumerable:!0,configurable:!0})}})},9720:(t,e,n)=>{var r=n(2109),i=n(4699).entries;r({target:"Object",stat:!0},{entries:function(t){return i(t)}})},3371:(t,e,n)=>{var r=n(2109),i=n(6677),o=n(7293),a=n(111),s=n(2423).onFreeze,u=Object.freeze;r({target:"Object",stat:!0,forced:o((function(){u(1)})),sham:!i},{freeze:function(t){return u&&a(t)?u(s(t)):t}})},8559:(t,e,n)=>{var r=n(2109),i=n(408),o=n(6135);r({target:"Object",stat:!0},{fromEntries:function(t){var e={};return i(t,(function(t,n){o(e,t,n)}),{AS_ENTRIES:!0}),e}})},5003:(t,e,n)=>{var r=n(2109),i=n(7293),o=n(5656),a=n(1236).f,s=n(9781),u=i((function(){a(1)}));r({target:"Object",stat:!0,forced:!s||u,sham:!s},{getOwnPropertyDescriptor:function(t,e){return a(o(t),e)}})},9337:(t,e,n)=>{var r=n(2109),i=n(9781),o=n(3887),a=n(5656),s=n(1236),u=n(6135);r({target:"Object",stat:!0,sham:!i},{getOwnPropertyDescriptors:function(t){for(var e,n,r=a(t),i=s.f,c=o(r),l={},f=0;c.length>f;)void 0!==(n=i(r,e=c[f++]))&&u(l,e,n);return l}})},6210:(t,e,n)=>{var r=n(2109),i=n(7293),o=n(1156).f;r({target:"Object",stat:!0,forced:i((function(){return!Object.getOwnPropertyNames(1)}))},{getOwnPropertyNames:o})},489:(t,e,n)=>{var r=n(2109),i=n(7293),o=n(7908),a=n(9518),s=n(8544);r({target:"Object",stat:!0,forced:i((function(){a(1)})),sham:!s},{getPrototypeOf:function(t){return a(o(t))}})},1825:(t,e,n)=>{var r=n(2109),i=n(7293),o=n(111),a=Object.isExtensible;r({target:"Object",stat:!0,forced:i((function(){a(1)}))},{isExtensible:function(t){return!!o(t)&&(!a||a(t))}})},8410:(t,e,n)=>{var r=n(2109),i=n(7293),o=n(111),a=Object.isFrozen;r({target:"Object",stat:!0,forced:i((function(){a(1)}))},{isFrozen:function(t){return!o(t)||!!a&&a(t)}})},2200:(t,e,n)=>{var r=n(2109),i=n(7293),o=n(111),a=Object.isSealed;r({target:"Object",stat:!0,forced:i((function(){a(1)}))},{isSealed:function(t){return!o(t)||!!a&&a(t)}})},3304:(t,e,n)=>{n(2109)({target:"Object",stat:!0},{is:n(1150)})},7941:(t,e,n)=>{var r=n(2109),i=n(7908),o=n(1956);r({target:"Object",stat:!0,forced:n(7293)((function(){o(1)}))},{keys:function(t){return o(i(t))}})},4869:(t,e,n)=>{"use strict";var r=n(2109),i=n(9781),o=n(9026),a=n(7908),s=n(7593),u=n(9518),c=n(1236).f;i&&r({target:"Object",proto:!0,forced:o},{__lookupGetter__:function(t){var e,n=a(this),r=s(t,!0);do{if(e=c(n,r))return e.get}while(n=u(n))}})},3952:(t,e,n)=>{"use strict";var r=n(2109),i=n(9781),o=n(9026),a=n(7908),s=n(7593),u=n(9518),c=n(1236).f;i&&r({target:"Object",proto:!0,forced:o},{__lookupSetter__:function(t){var e,n=a(this),r=s(t,!0);do{if(e=c(n,r))return e.set}while(n=u(n))}})},7227:(t,e,n)=>{var r=n(2109),i=n(111),o=n(2423).onFreeze,a=n(6677),s=n(7293),u=Object.preventExtensions;r({target:"Object",stat:!0,forced:s((function(){u(1)})),sham:!a},{preventExtensions:function(t){return u&&i(t)?u(o(t)):t}})},514:(t,e,n)=>{var r=n(2109),i=n(111),o=n(2423).onFreeze,a=n(6677),s=n(7293),u=Object.seal;r({target:"Object",stat:!0,forced:s((function(){u(1)})),sham:!a},{seal:function(t){return u&&i(t)?u(o(t)):t}})},8304:(t,e,n)=>{n(2109)({target:"Object",stat:!0},{setPrototypeOf:n(7674)})},1539:(t,e,n)=>{var r=n(1694),i=n(1320),o=n(288);r||i(Object.prototype,"toString",o,{unsafe:!0})},6833:(t,e,n)=>{var r=n(2109),i=n(4699).values;r({target:"Object",stat:!0},{values:function(t){return i(t)}})},4678:(t,e,n)=>{var r=n(2109),i=n(2814);r({global:!0,forced:parseFloat!=i},{parseFloat:i})},1058:(t,e,n)=>{var r=n(2109),i=n(3009);r({global:!0,forced:parseInt!=i},{parseInt:i})},7922:(t,e,n)=>{"use strict";var r=n(2109),i=n(3099),o=n(8523),a=n(2534),s=n(408);r({target:"Promise",stat:!0},{allSettled:function(t){var e=this,n=o.f(e),r=n.resolve,u=n.reject,c=a((function(){var n=i(e.resolve),o=[],a=0,u=1;s(t,(function(t){var i=a++,s=!1;o.push(void 0),u++,n.call(e,t).then((function(t){s||(s=!0,o[i]={status:"fulfilled",value:t},--u||r(o))}),(function(t){s||(s=!0,o[i]={status:"rejected",reason:t},--u||r(o))}))})),--u||r(o)}));return c.error&&u(c.value),n.promise}})},4668:(t,e,n)=>{"use strict";var r=n(2109),i=n(3099),o=n(5005),a=n(8523),s=n(2534),u=n(408),c="No one promise resolved";r({target:"Promise",stat:!0},{any:function(t){var e=this,n=a.f(e),r=n.resolve,l=n.reject,f=s((function(){var n=i(e.resolve),a=[],s=0,f=1,h=!1;u(t,(function(t){var i=s++,u=!1;a.push(void 0),f++,n.call(e,t).then((function(t){u||h||(h=!0,r(t))}),(function(t){u||h||(u=!0,a[i]=t,--f||l(new(o("AggregateError"))(a,c)))}))})),--f||l(new(o("AggregateError"))(a,c))}));return f.error&&l(f.value),n.promise}})},7727:(t,e,n)=>{"use strict";var r=n(2109),i=n(1913),o=n(3366),a=n(7293),s=n(5005),u=n(6707),c=n(9478),l=n(1320);r({target:"Promise",proto:!0,real:!0,forced:!!o&&a((function(){o.prototype.finally.call({then:function(){}},(function(){}))}))},{finally:function(t){var e=u(this,s("Promise")),n="function"==typeof t;return this.then(n?function(n){return c(e,t()).then((function(){return n}))}:t,n?function(n){return c(e,t()).then((function(){throw n}))}:t)}}),i||"function"!=typeof o||o.prototype.finally||l(o.prototype,"finally",s("Promise").prototype.finally)},8674:(t,e,n)=>{"use strict";var r,i,o,a,s=n(2109),u=n(1913),c=n(7854),l=n(5005),f=n(3366),h=n(1320),p=n(2248),d=n(8003),v=n(6340),g=n(111),y=n(3099),m=n(5787),b=n(2788),x=n(408),w=n(7072),S=n(6707),_=n(261).set,A=n(5948),M=n(9478),T=n(842),E=n(8523),k=n(2534),O=n(9909),P=n(4705),C=n(5112),R=n(5268),I=n(7392),j=C("species"),N="Promise",L=O.get,z=O.set,D=O.getterFor(N),F=f,U=c.TypeError,B=c.document,q=c.process,V=l("fetch"),W=E.f,H=W,Y=!!(B&&B.createEvent&&c.dispatchEvent),G="function"==typeof PromiseRejectionEvent,X="unhandledrejection",$=P(N,(function(){if(b(F)===String(F)){if(66===I)return!0;if(!R&&!G)return!0}if(u&&!F.prototype.finally)return!0;if(I>=51&&/native code/.test(F))return!1;var t=F.resolve(1),e=function(t){t((function(){}),(function(){}))};return(t.constructor={})[j]=e,!(t.then((function(){}))instanceof e)})),Z=$||!w((function(t){F.all(t).catch((function(){}))})),K=function(t){var e;return!(!g(t)||"function"!=typeof(e=t.then))&&e},J=function(t,e){if(!t.notified){t.notified=!0;var n=t.reactions;A((function(){for(var r=t.value,i=1==t.state,o=0;n.length>o;){var a,s,u,c=n[o++],l=i?c.ok:c.fail,f=c.resolve,h=c.reject,p=c.domain;try{l?(i||(2===t.rejection&&nt(t),t.rejection=1),!0===l?a=r:(p&&p.enter(),a=l(r),p&&(p.exit(),u=!0)),a===c.promise?h(U("Promise-chain cycle")):(s=K(a))?s.call(a,f,h):f(a)):h(r)}catch(t){p&&!u&&p.exit(),h(t)}}t.reactions=[],t.notified=!1,e&&!t.rejection&&tt(t)}))}},Q=function(t,e,n){var r,i;Y?((r=B.createEvent("Event")).promise=e,r.reason=n,r.initEvent(t,!1,!0),c.dispatchEvent(r)):r={promise:e,reason:n},!G&&(i=c["on"+t])?i(r):t===X&&T("Unhandled promise rejection",n)},tt=function(t){_.call(c,(function(){var e,n=t.facade,r=t.value;if(et(t)&&(e=k((function(){R?q.emit("unhandledRejection",r,n):Q(X,n,r)})),t.rejection=R||et(t)?2:1,e.error))throw e.value}))},et=function(t){return 1!==t.rejection&&!t.parent},nt=function(t){_.call(c,(function(){var e=t.facade;R?q.emit("rejectionHandled",e):Q("rejectionhandled",e,t.value)}))},rt=function(t,e,n){return function(r){t(e,r,n)}},it=function(t,e,n){t.done||(t.done=!0,n&&(t=n),t.value=e,t.state=2,J(t,!0))},ot=function(t,e,n){if(!t.done){t.done=!0,n&&(t=n);try{if(t.facade===e)throw U("Promise can't be resolved itself");var r=K(e);r?A((function(){var n={done:!1};try{r.call(e,rt(ot,n,t),rt(it,n,t))}catch(e){it(n,e,t)}})):(t.value=e,t.state=1,J(t,!1))}catch(e){it({done:!1},e,t)}}};$&&(F=function(t){m(this,F,N),y(t),r.call(this);var e=L(this);try{t(rt(ot,e),rt(it,e))}catch(t){it(e,t)}},(r=function(t){z(this,{type:N,done:!1,notified:!1,parent:!1,reactions:[],rejection:!1,state:0,value:void 0})}).prototype=p(F.prototype,{then:function(t,e){var n=D(this),r=W(S(this,F));return r.ok="function"!=typeof t||t,r.fail="function"==typeof e&&e,r.domain=R?q.domain:void 0,n.parent=!0,n.reactions.push(r),0!=n.state&&J(n,!1),r.promise},catch:function(t){return this.then(void 0,t)}}),i=function(){var t=new r,e=L(t);this.promise=t,this.resolve=rt(ot,e),this.reject=rt(it,e)},E.f=W=function(t){return t===F||t===o?new i(t):H(t)},u||"function"!=typeof f||(a=f.prototype.then,h(f.prototype,"then",(function(t,e){var n=this;return new F((function(t,e){a.call(n,t,e)})).then(t,e)}),{unsafe:!0}),"function"==typeof V&&s({global:!0,enumerable:!0,forced:!0},{fetch:function(t){return M(F,V.apply(c,arguments))}}))),s({global:!0,wrap:!0,forced:$},{Promise:F}),d(F,N,!1,!0),v(N),o=l(N),s({target:N,stat:!0,forced:$},{reject:function(t){var e=W(this);return e.reject.call(void 0,t),e.promise}}),s({target:N,stat:!0,forced:u||$},{resolve:function(t){return M(u&&this===o?F:this,t)}}),s({target:N,stat:!0,forced:Z},{all:function(t){var e=this,n=W(e),r=n.resolve,i=n.reject,o=k((function(){var n=y(e.resolve),o=[],a=0,s=1;x(t,(function(t){var u=a++,c=!1;o.push(void 0),s++,n.call(e,t).then((function(t){c||(c=!0,o[u]=t,--s||r(o))}),i)})),--s||r(o)}));return o.error&&i(o.value),n.promise},race:function(t){var e=this,n=W(e),r=n.reject,i=k((function(){var i=y(e.resolve);x(t,(function(t){i.call(e,t).then(n.resolve,r)}))}));return i.error&&r(i.value),n.promise}})},224:(t,e,n)=>{var r=n(2109),i=n(5005),o=n(3099),a=n(9670),s=n(7293),u=i("Reflect","apply"),c=Function.apply;r({target:"Reflect",stat:!0,forced:!s((function(){u((function(){}))}))},{apply:function(t,e,n){return o(t),a(n),u?u(t,e,n):c.call(t,e,n)}})},2419:(t,e,n)=>{var r=n(2109),i=n(5005),o=n(3099),a=n(9670),s=n(111),u=n(30),c=n(7065),l=n(7293),f=i("Reflect","construct"),h=l((function(){function t(){}return!(f((function(){}),[],t)instanceof t)})),p=!l((function(){f((function(){}))})),d=h||p;r({target:"Reflect",stat:!0,forced:d,sham:d},{construct:function(t,e){o(t),a(e);var n=arguments.length<3?t:o(arguments[2]);if(p&&!h)return f(t,e,n);if(t==n){switch(e.length){case 0:return new t;case 1:return new t(e[0]);case 2:return new t(e[0],e[1]);case 3:return new t(e[0],e[1],e[2]);case 4:return new t(e[0],e[1],e[2],e[3])}var r=[null];return r.push.apply(r,e),new(c.apply(t,r))}var i=n.prototype,l=u(s(i)?i:Object.prototype),d=Function.apply.call(t,l,e);return s(d)?d:l}})},9596:(t,e,n)=>{var r=n(2109),i=n(9781),o=n(9670),a=n(7593),s=n(3070);r({target:"Reflect",stat:!0,forced:n(7293)((function(){Reflect.defineProperty(s.f({},1,{value:1}),1,{value:2})})),sham:!i},{defineProperty:function(t,e,n){o(t);var r=a(e,!0);o(n);try{return s.f(t,r,n),!0}catch(t){return!1}}})},2586:(t,e,n)=>{var r=n(2109),i=n(9670),o=n(1236).f;r({target:"Reflect",stat:!0},{deleteProperty:function(t,e){var n=o(i(t),e);return!(n&&!n.configurable)&&delete t[e]}})},5683:(t,e,n)=>{var r=n(2109),i=n(9781),o=n(9670),a=n(1236);r({target:"Reflect",stat:!0,sham:!i},{getOwnPropertyDescriptor:function(t,e){return a.f(o(t),e)}})},9361:(t,e,n)=>{var r=n(2109),i=n(9670),o=n(9518);r({target:"Reflect",stat:!0,sham:!n(8544)},{getPrototypeOf:function(t){return o(i(t))}})},4819:(t,e,n)=>{var r=n(2109),i=n(111),o=n(9670),a=n(6656),s=n(1236),u=n(9518);r({target:"Reflect",stat:!0},{get:function t(e,n){var r,c,l=arguments.length<3?e:arguments[2];return o(e)===l?e[n]:(r=s.f(e,n))?a(r,"value")?r.value:void 0===r.get?void 0:r.get.call(l):i(c=u(e))?t(c,n,l):void 0}})},1037:(t,e,n)=>{n(2109)({target:"Reflect",stat:!0},{has:function(t,e){return e in t}})},5898:(t,e,n)=>{var r=n(2109),i=n(9670),o=Object.isExtensible;r({target:"Reflect",stat:!0},{isExtensible:function(t){return i(t),!o||o(t)}})},7556:(t,e,n)=>{n(2109)({target:"Reflect",stat:!0},{ownKeys:n(3887)})},4361:(t,e,n)=>{var r=n(2109),i=n(5005),o=n(9670);r({target:"Reflect",stat:!0,sham:!n(6677)},{preventExtensions:function(t){o(t);try{var e=i("Object","preventExtensions");return e&&e(t),!0}catch(t){return!1}}})},9532:(t,e,n)=>{var r=n(2109),i=n(9670),o=n(6077),a=n(7674);a&&r({target:"Reflect",stat:!0},{setPrototypeOf:function(t,e){i(t),o(e);try{return a(t,e),!0}catch(t){return!1}}})},3593:(t,e,n)=>{var r=n(2109),i=n(9670),o=n(111),a=n(6656),s=n(7293),u=n(3070),c=n(1236),l=n(9518),f=n(9114);r({target:"Reflect",stat:!0,forced:s((function(){var t=function(){},e=u.f(new t,"a",{configurable:!0});return!1!==Reflect.set(t.prototype,"a",1,e)}))},{set:function t(e,n,r){var s,h,p=arguments.length<4?e:arguments[3],d=c.f(i(e),n);if(!d){if(o(h=l(e)))return t(h,n,r,p);d=f(0)}if(a(d,"value")){if(!1===d.writable||!o(p))return!1;if(s=c.f(p,n)){if(s.get||s.set||!1===s.writable)return!1;s.value=r,u.f(p,n,s)}else u.f(p,n,f(0,r));return!0}return void 0!==d.set&&(d.set.call(p,r),!0)}})},1299:(t,e,n)=>{var r=n(2109),i=n(7854),o=n(8003);r({global:!0},{Reflect:{}}),o(i.Reflect,"Reflect",!0)},4603:(t,e,n)=>{var r=n(9781),i=n(7854),o=n(4705),a=n(9587),s=n(3070).f,u=n(8006).f,c=n(7850),l=n(7066),f=n(2999),h=n(1320),p=n(7293),d=n(9909).set,v=n(6340),g=n(5112)("match"),y=i.RegExp,m=y.prototype,b=/a/g,x=/a/g,w=new y(b)!==b,S=f.UNSUPPORTED_Y;if(r&&o("RegExp",!w||S||p((function(){return x[g]=!1,y(b)!=b||y(x)==x||"/a/i"!=y(b,"i")})))){for(var _=function(t,e){var n,r=this instanceof _,i=c(t),o=void 0===e;if(!r&&i&&t.constructor===_&&o)return t;w?i&&!o&&(t=t.source):t instanceof _&&(o&&(e=l.call(t)),t=t.source),S&&(n=!!e&&e.indexOf("y")>-1)&&(e=e.replace(/y/g,""));var s=a(w?new y(t,e):y(t,e),r?this:m,_);return S&&n&&d(s,{sticky:n}),s},A=function(t){t in _||s(_,t,{configurable:!0,get:function(){return y[t]},set:function(e){y[t]=e}})},M=u(y),T=0;M.length>T;)A(M[T++]);m.constructor=_,_.prototype=m,h(i,"RegExp",_)}v("RegExp")},4916:(t,e,n)=>{"use strict";var r=n(2109),i=n(2261);r({target:"RegExp",proto:!0,forced:/./.exec!==i},{exec:i})},2087:(t,e,n)=>{var r=n(9781),i=n(3070),o=n(7066),a=n(2999).UNSUPPORTED_Y;r&&("g"!=/./g.flags||a)&&i.f(RegExp.prototype,"flags",{configurable:!0,get:o})},8386:(t,e,n)=>{var r=n(9781),i=n(2999).UNSUPPORTED_Y,o=n(3070).f,a=n(9909).get,s=RegExp.prototype;r&&i&&o(RegExp.prototype,"sticky",{configurable:!0,get:function(){if(this!==s){if(this instanceof RegExp)return!!a(this).sticky;throw TypeError("Incompatible receiver, RegExp required")}}})},7601:(t,e,n)=>{"use strict";n(4916);var r,i,o=n(2109),a=n(111),s=(r=!1,(i=/[ac]/).exec=function(){return r=!0,/./.exec.apply(this,arguments)},!0===i.test("abc")&&r),u=/./.test;o({target:"RegExp",proto:!0,forced:!s},{test:function(t){if("function"!=typeof this.exec)return u.call(this,t);var e=this.exec(t);if(null!==e&&!a(e))throw new Error("RegExp exec method returned something other than an Object or null");return!!e}})},9714:(t,e,n)=>{"use strict";var r=n(1320),i=n(9670),o=n(7293),a=n(7066),s="toString",u=RegExp.prototype,c=u.toString,l=o((function(){return"/a/b"!=c.call({source:"a",flags:"b"})})),f=c.name!=s;(l||f)&&r(RegExp.prototype,s,(function(){var t=i(this),e=String(t.source),n=t.flags;return"/"+e+"/"+String(void 0===n&&t instanceof RegExp&&!("flags"in u)?a.call(t):n)}),{unsafe:!0})},189:(t,e,n)=>{"use strict";var r=n(7710),i=n(5631);t.exports=r("Set",(function(t){return function(){return t(this,arguments.length?arguments[0]:void 0)}}),i)},5218:(t,e,n)=>{"use strict";var r=n(2109),i=n(4230);r({target:"String",proto:!0,forced:n(3429)("anchor")},{anchor:function(t){return i(this,"a","name",t)}})},4475:(t,e,n)=>{"use strict";var r=n(2109),i=n(4230);r({target:"String",proto:!0,forced:n(3429)("big")},{big:function(){return i(this,"big","","")}})},7929:(t,e,n)=>{"use strict";var r=n(2109),i=n(4230);r({target:"String",proto:!0,forced:n(3429)("blink")},{blink:function(){return i(this,"blink","","")}})},915:(t,e,n)=>{"use strict";var r=n(2109),i=n(4230);r({target:"String",proto:!0,forced:n(3429)("bold")},{bold:function(){return i(this,"b","","")}})},9841:(t,e,n)=>{"use strict";var r=n(2109),i=n(8710).codeAt;r({target:"String",proto:!0},{codePointAt:function(t){return i(this,t)}})},7852:(t,e,n)=>{"use strict";var r,i=n(2109),o=n(1236).f,a=n(7466),s=n(3929),u=n(4488),c=n(4964),l=n(1913),f="".endsWith,h=Math.min,p=c("endsWith");i({target:"String",proto:!0,forced:!(!l&&!p&&(r=o(String.prototype,"endsWith"),r&&!r.writable)||p)},{endsWith:function(t){var e=String(u(this));s(t);var n=arguments.length>1?arguments[1]:void 0,r=a(e.length),i=void 0===n?r:h(a(n),r),o=String(t);return f?f.call(e,o,i):e.slice(i-o.length,i)===o}})},9253:(t,e,n)=>{"use strict";var r=n(2109),i=n(4230);r({target:"String",proto:!0,forced:n(3429)("fixed")},{fixed:function(){return i(this,"tt","","")}})},2125:(t,e,n)=>{"use strict";var r=n(2109),i=n(4230);r({target:"String",proto:!0,forced:n(3429)("fontcolor")},{fontcolor:function(t){return i(this,"font","color",t)}})},8830:(t,e,n)=>{"use strict";var r=n(2109),i=n(4230);r({target:"String",proto:!0,forced:n(3429)("fontsize")},{fontsize:function(t){return i(this,"font","size",t)}})},4953:(t,e,n)=>{var r=n(2109),i=n(1400),o=String.fromCharCode,a=String.fromCodePoint;r({target:"String",stat:!0,forced:!!a&&1!=a.length},{fromCodePoint:function(t){for(var e,n=[],r=arguments.length,a=0;r>a;){if(e=+arguments[a++],i(e,1114111)!==e)throw RangeError(e+" is not a valid code point");n.push(e<65536?o(e):o(55296+((e-=65536)>>10),e%1024+56320))}return n.join("")}})},2023:(t,e,n)=>{"use strict";var r=n(2109),i=n(3929),o=n(4488);r({target:"String",proto:!0,forced:!n(4964)("includes")},{includes:function(t){return!!~String(o(this)).indexOf(i(t),arguments.length>1?arguments[1]:void 0)}})},8734:(t,e,n)=>{"use strict";var r=n(2109),i=n(4230);r({target:"String",proto:!0,forced:n(3429)("italics")},{italics:function(){return i(this,"i","","")}})},8783:(t,e,n)=>{"use strict";var r=n(8710).charAt,i=n(9909),o=n(654),a="String Iterator",s=i.set,u=i.getterFor(a);o(String,"String",(function(t){s(this,{type:a,string:String(t),index:0})}),(function(){var t,e=u(this),n=e.string,i=e.index;return i>=n.length?{value:void 0,done:!0}:(t=r(n,i),e.index+=t.length,{value:t,done:!1})}))},9254:(t,e,n)=>{"use strict";var r=n(2109),i=n(4230);r({target:"String",proto:!0,forced:n(3429)("link")},{link:function(t){return i(this,"a","href",t)}})},6373:(t,e,n)=>{"use strict";var r=n(2109),i=n(4994),o=n(4488),a=n(7466),s=n(3099),u=n(9670),c=n(4326),l=n(7850),f=n(7066),h=n(8880),p=n(7293),d=n(5112),v=n(6707),g=n(1530),y=n(9909),m=n(1913),b=d("matchAll"),x="RegExp String Iterator",w=y.set,S=y.getterFor(x),_=RegExp.prototype,A=_.exec,M="".matchAll,T=!!M&&!p((function(){"a".matchAll(/./)})),E=i((function(t,e,n,r){w(this,{type:x,regexp:t,string:e,global:n,unicode:r,done:!1})}),"RegExp String",(function(){var t=S(this);if(t.done)return{value:void 0,done:!0};var e=t.regexp,n=t.string,r=function(t,e){var n,r=t.exec;if("function"==typeof r){if("object"!=typeof(n=r.call(t,e)))throw TypeError("Incorrect exec result");return n}return A.call(t,e)}(e,n);return null===r?{value:void 0,done:t.done=!0}:t.global?(""==String(r[0])&&(e.lastIndex=g(n,a(e.lastIndex),t.unicode)),{value:r,done:!1}):(t.done=!0,{value:r,done:!1})})),k=function(t){var e,n,r,i,o,s,c=u(this),l=String(t);return e=v(c,RegExp),void 0===(n=c.flags)&&c instanceof RegExp&&!("flags"in _)&&(n=f.call(c)),r=void 0===n?"":String(n),i=new e(e===RegExp?c.source:c,r),o=!!~r.indexOf("g"),s=!!~r.indexOf("u"),i.lastIndex=a(c.lastIndex),new E(i,l,o,s)};r({target:"String",proto:!0,forced:T},{matchAll:function(t){var e,n,r,i=o(this);if(null!=t){if(l(t)&&!~String(o("flags"in _?t.flags:f.call(t))).indexOf("g"))throw TypeError("`.matchAll` does not allow non-global regexes");if(T)return M.apply(i,arguments);if(void 0===(n=t[b])&&m&&"RegExp"==c(t)&&(n=k),null!=n)return s(n).call(t,i)}else if(T)return M.apply(i,arguments);return e=String(i),r=new RegExp(t,"g"),m?k.call(r,e):r[b](e)}}),m||b in _||h(_,b,k)},4723:(t,e,n)=>{"use strict";var r=n(7007),i=n(9670),o=n(7466),a=n(4488),s=n(1530),u=n(7651);r("match",1,(function(t,e,n){return[function(e){var n=a(this),r=null==e?void 0:e[t];return void 0!==r?r.call(e,n):new RegExp(e)[t](String(n))},function(t){var r=n(e,t,this);if(r.done)return r.value;var a=i(t),c=String(this);if(!a.global)return u(a,c);var l=a.unicode;a.lastIndex=0;for(var f,h=[],p=0;null!==(f=u(a,c));){var d=String(f[0]);h[p]=d,""===d&&(a.lastIndex=s(c,o(a.lastIndex),l)),p++}return 0===p?null:h}]}))},6528:(t,e,n)=>{"use strict";var r=n(2109),i=n(6650).end;r({target:"String",proto:!0,forced:n(7061)},{padEnd:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}})},3112:(t,e,n)=>{"use strict";var r=n(2109),i=n(6650).start;r({target:"String",proto:!0,forced:n(7061)},{padStart:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}})},8992:(t,e,n)=>{var r=n(2109),i=n(5656),o=n(7466);r({target:"String",stat:!0},{raw:function(t){for(var e=i(t.raw),n=o(e.length),r=arguments.length,a=[],s=0;n>s;)a.push(String(e[s++])),s<r&&a.push(String(arguments[s]));return a.join("")}})},2481:(t,e,n)=>{n(2109)({target:"String",proto:!0},{repeat:n(8415)})},8757:(t,e,n)=>{"use strict";var r=n(2109),i=n(4488),o=n(7850),a=n(7066),s=n(647),u=n(5112),c=n(1913),l=u("replace"),f=RegExp.prototype,h=Math.max,p=function(t,e,n){return n>t.length?-1:""===e?n:t.indexOf(e,n)};r({target:"String",proto:!0},{replaceAll:function(t,e){var n,r,u,d,v,g,y,m,b=i(this),x=0,w=0,S="";if(null!=t){if((n=o(t))&&!~String(i("flags"in f?t.flags:a.call(t))).indexOf("g"))throw TypeError("`.replaceAll` does not allow non-global regexes");if(void 0!==(r=t[l]))return r.call(t,b,e);if(c&&n)return String(b).replace(t,e)}for(u=String(b),d=String(t),(v="function"==typeof e)||(e=String(e)),g=d.length,y=h(1,g),x=p(u,d,0);-1!==x;)m=v?String(e(d,x,u)):s(d,u,x,[],void 0,e),S+=u.slice(w,x)+m,w=x+g,x=p(u,d,x+y);return w<u.length&&(S+=u.slice(w)),S}})},5306:(t,e,n)=>{"use strict";var r=n(7007),i=n(9670),o=n(7466),a=n(9958),s=n(4488),u=n(1530),c=n(647),l=n(7651),f=Math.max,h=Math.min;r("replace",2,(function(t,e,n,r){var p=r.REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE,d=r.REPLACE_KEEPS_$0,v=p?"$":"$0";return[function(n,r){var i=s(this),o=null==n?void 0:n[t];return void 0!==o?o.call(n,i,r):e.call(String(i),n,r)},function(t,r){if(!p&&d||"string"==typeof r&&-1===r.indexOf(v)){var s=n(e,t,this,r);if(s.done)return s.value}var g=i(t),y=String(this),m="function"==typeof r;m||(r=String(r));var b=g.global;if(b){var x=g.unicode;g.lastIndex=0}for(var w=[];;){var S=l(g,y);if(null===S)break;if(w.push(S),!b)break;""===String(S[0])&&(g.lastIndex=u(y,o(g.lastIndex),x))}for(var _,A="",M=0,T=0;T<w.length;T++){S=w[T];for(var E=String(S[0]),k=f(h(a(S.index),y.length),0),O=[],P=1;P<S.length;P++)O.push(void 0===(_=S[P])?_:String(_));var C=S.groups;if(m){var R=[E].concat(O,k,y);void 0!==C&&R.push(C);var I=String(r.apply(void 0,R))}else I=c(E,y,k,O,C,r);k>=M&&(A+=y.slice(M,k)+I,M=k+E.length)}return A+y.slice(M)}]}))},4765:(t,e,n)=>{"use strict";var r=n(7007),i=n(9670),o=n(4488),a=n(1150),s=n(7651);r("search",1,(function(t,e,n){return[function(e){var n=o(this),r=null==e?void 0:e[t];return void 0!==r?r.call(e,n):new RegExp(e)[t](String(n))},function(t){var r=n(e,t,this);if(r.done)return r.value;var o=i(t),u=String(this),c=o.lastIndex;a(c,0)||(o.lastIndex=0);var l=s(o,u);return a(o.lastIndex,c)||(o.lastIndex=c),null===l?-1:l.index}]}))},7268:(t,e,n)=>{"use strict";var r=n(2109),i=n(4230);r({target:"String",proto:!0,forced:n(3429)("small")},{small:function(){return i(this,"small","","")}})},3123:(t,e,n)=>{"use strict";var r=n(7007),i=n(7850),o=n(9670),a=n(4488),s=n(6707),u=n(1530),c=n(7466),l=n(7651),f=n(2261),h=n(7293),p=[].push,d=Math.min,v=4294967295,g=!h((function(){return!RegExp(v,"y")}));r("split",2,(function(t,e,n){var r;return r="c"=="abbc".split(/(b)*/)[1]||4!="test".split(/(?:)/,-1).length||2!="ab".split(/(?:ab)*/).length||4!=".".split(/(.?)(.?)/).length||".".split(/()()/).length>1||"".split(/.?/).length?function(t,n){var r=String(a(this)),o=void 0===n?v:n>>>0;if(0===o)return[];if(void 0===t)return[r];if(!i(t))return e.call(r,t,o);for(var s,u,c,l=[],h=(t.ignoreCase?"i":"")+(t.multiline?"m":"")+(t.unicode?"u":"")+(t.sticky?"y":""),d=0,g=new RegExp(t.source,h+"g");(s=f.call(g,r))&&!((u=g.lastIndex)>d&&(l.push(r.slice(d,s.index)),s.length>1&&s.index<r.length&&p.apply(l,s.slice(1)),c=s[0].length,d=u,l.length>=o));)g.lastIndex===s.index&&g.lastIndex++;return d===r.length?!c&&g.test("")||l.push(""):l.push(r.slice(d)),l.length>o?l.slice(0,o):l}:"0".split(void 0,0).length?function(t,n){return void 0===t&&0===n?[]:e.call(this,t,n)}:e,[function(e,n){var i=a(this),o=null==e?void 0:e[t];return void 0!==o?o.call(e,i,n):r.call(String(i),e,n)},function(t,i){var a=n(r,t,this,i,r!==e);if(a.done)return a.value;var f=o(t),h=String(this),p=s(f,RegExp),y=f.unicode,m=(f.ignoreCase?"i":"")+(f.multiline?"m":"")+(f.unicode?"u":"")+(g?"y":"g"),b=new p(g?f:"^(?:"+f.source+")",m),x=void 0===i?v:i>>>0;if(0===x)return[];if(0===h.length)return null===l(b,h)?[h]:[];for(var w=0,S=0,_=[];S<h.length;){b.lastIndex=g?S:0;var A,M=l(b,g?h:h.slice(S));if(null===M||(A=d(c(b.lastIndex+(g?0:S)),h.length))===w)S=u(h,S,y);else{if(_.push(h.slice(w,S)),_.length===x)return _;for(var T=1;T<=M.length-1;T++)if(_.push(M[T]),_.length===x)return _;S=w=A}}return _.push(h.slice(w)),_}]}),!g)},6755:(t,e,n)=>{"use strict";var r,i=n(2109),o=n(1236).f,a=n(7466),s=n(3929),u=n(4488),c=n(4964),l=n(1913),f="".startsWith,h=Math.min,p=c("startsWith");i({target:"String",proto:!0,forced:!(!l&&!p&&(r=o(String.prototype,"startsWith"),r&&!r.writable)||p)},{startsWith:function(t){var e=String(u(this));s(t);var n=a(h(arguments.length>1?arguments[1]:void 0,e.length)),r=String(t);return f?f.call(e,r,n):e.slice(n,n+r.length)===r}})},7397:(t,e,n)=>{"use strict";var r=n(2109),i=n(4230);r({target:"String",proto:!0,forced:n(3429)("strike")},{strike:function(){return i(this,"strike","","")}})},86:(t,e,n)=>{"use strict";var r=n(2109),i=n(4230);r({target:"String",proto:!0,forced:n(3429)("sub")},{sub:function(){return i(this,"sub","","")}})},623:(t,e,n)=>{"use strict";var r=n(2109),i=n(4230);r({target:"String",proto:!0,forced:n(3429)("sup")},{sup:function(){return i(this,"sup","","")}})},8702:(t,e,n)=>{"use strict";var r=n(2109),i=n(3111).end,o=n(6091)("trimEnd"),a=o?function(){return i(this)}:"".trimEnd;r({target:"String",proto:!0,forced:o},{trimEnd:a,trimRight:a})},5674:(t,e,n)=>{"use strict";var r=n(2109),i=n(3111).start,o=n(6091)("trimStart"),a=o?function(){return i(this)}:"".trimStart;r({target:"String",proto:!0,forced:o},{trimStart:a,trimLeft:a})},3210:(t,e,n)=>{"use strict";var r=n(2109),i=n(3111).trim;r({target:"String",proto:!0,forced:n(6091)("trim")},{trim:function(){return i(this)}})},2443:(t,e,n)=>{n(7235)("asyncIterator")},1817:(t,e,n)=>{"use strict";var r=n(2109),i=n(9781),o=n(7854),a=n(6656),s=n(111),u=n(3070).f,c=n(9920),l=o.Symbol;if(i&&"function"==typeof l&&(!("description"in l.prototype)||void 0!==l().description)){var f={},h=function(){var t=arguments.length<1||void 0===arguments[0]?void 0:String(arguments[0]),e=this instanceof h?new l(t):void 0===t?l():l(t);return""===t&&(f[e]=!0),e};c(h,l);var p=h.prototype=l.prototype;p.constructor=h;var d=p.toString,v="Symbol(test)"==String(l("test")),g=/^Symbol\((.*)\)[^)]+$/;u(p,"description",{configurable:!0,get:function(){var t=s(this)?this.valueOf():this,e=d.call(t);if(a(f,t))return"";var n=v?e.slice(7,-1):e.replace(g,"$1");return""===n?void 0:n}}),r({global:!0,forced:!0},{Symbol:h})}},2401:(t,e,n)=>{n(7235)("hasInstance")},8722:(t,e,n)=>{n(7235)("isConcatSpreadable")},2165:(t,e,n)=>{n(7235)("iterator")},2526:(t,e,n)=>{"use strict";var r=n(2109),i=n(7854),o=n(5005),a=n(1913),s=n(9781),u=n(133),c=n(3307),l=n(7293),f=n(6656),h=n(3157),p=n(111),d=n(9670),v=n(7908),g=n(5656),y=n(7593),m=n(9114),b=n(30),x=n(1956),w=n(8006),S=n(1156),_=n(5181),A=n(1236),M=n(3070),T=n(5296),E=n(8880),k=n(1320),O=n(2309),P=n(6200),C=n(3501),R=n(9711),I=n(5112),j=n(6061),N=n(7235),L=n(8003),z=n(9909),D=n(2092).forEach,F=P("hidden"),U="Symbol",B=I("toPrimitive"),q=z.set,V=z.getterFor(U),W=Object.prototype,H=i.Symbol,Y=o("JSON","stringify"),G=A.f,X=M.f,$=S.f,Z=T.f,K=O("symbols"),J=O("op-symbols"),Q=O("string-to-symbol-registry"),tt=O("symbol-to-string-registry"),et=O("wks"),nt=i.QObject,rt=!nt||!nt.prototype||!nt.prototype.findChild,it=s&&l((function(){return 7!=b(X({},"a",{get:function(){return X(this,"a",{value:7}).a}})).a}))?function(t,e,n){var r=G(W,e);r&&delete W[e],X(t,e,n),r&&t!==W&&X(W,e,r)}:X,ot=function(t,e){var n=K[t]=b(H.prototype);return q(n,{type:U,tag:t,description:e}),s||(n.description=e),n},at=c?function(t){return"symbol"==typeof t}:function(t){return Object(t)instanceof H},st=function(t,e,n){t===W&&st(J,e,n),d(t);var r=y(e,!0);return d(n),f(K,r)?(n.enumerable?(f(t,F)&&t[F][r]&&(t[F][r]=!1),n=b(n,{enumerable:m(0,!1)})):(f(t,F)||X(t,F,m(1,{})),t[F][r]=!0),it(t,r,n)):X(t,r,n)},ut=function(t,e){d(t);var n=g(e),r=x(n).concat(ht(n));return D(r,(function(e){s&&!ct.call(n,e)||st(t,e,n[e])})),t},ct=function(t){var e=y(t,!0),n=Z.call(this,e);return!(this===W&&f(K,e)&&!f(J,e))&&(!(n||!f(this,e)||!f(K,e)||f(this,F)&&this[F][e])||n)},lt=function(t,e){var n=g(t),r=y(e,!0);if(n!==W||!f(K,r)||f(J,r)){var i=G(n,r);return!i||!f(K,r)||f(n,F)&&n[F][r]||(i.enumerable=!0),i}},ft=function(t){var e=$(g(t)),n=[];return D(e,(function(t){f(K,t)||f(C,t)||n.push(t)})),n},ht=function(t){var e=t===W,n=$(e?J:g(t)),r=[];return D(n,(function(t){!f(K,t)||e&&!f(W,t)||r.push(K[t])})),r};u||(k((H=function(){if(this instanceof H)throw TypeError("Symbol is not a constructor");var t=arguments.length&&void 0!==arguments[0]?String(arguments[0]):void 0,e=R(t),n=function(t){this===W&&n.call(J,t),f(this,F)&&f(this[F],e)&&(this[F][e]=!1),it(this,e,m(1,t))};return s&&rt&&it(W,e,{configurable:!0,set:n}),ot(e,t)}).prototype,"toString",(function(){return V(this).tag})),k(H,"withoutSetter",(function(t){return ot(R(t),t)})),T.f=ct,M.f=st,A.f=lt,w.f=S.f=ft,_.f=ht,j.f=function(t){return ot(I(t),t)},s&&(X(H.prototype,"description",{configurable:!0,get:function(){return V(this).description}}),a||k(W,"propertyIsEnumerable",ct,{unsafe:!0}))),r({global:!0,wrap:!0,forced:!u,sham:!u},{Symbol:H}),D(x(et),(function(t){N(t)})),r({target:U,stat:!0,forced:!u},{for:function(t){var e=String(t);if(f(Q,e))return Q[e];var n=H(e);return Q[e]=n,tt[n]=e,n},keyFor:function(t){if(!at(t))throw TypeError(t+" is not a symbol");if(f(tt,t))return tt[t]},useSetter:function(){rt=!0},useSimple:function(){rt=!1}}),r({target:"Object",stat:!0,forced:!u,sham:!s},{create:function(t,e){return void 0===e?b(t):ut(b(t),e)},defineProperty:st,defineProperties:ut,getOwnPropertyDescriptor:lt}),r({target:"Object",stat:!0,forced:!u},{getOwnPropertyNames:ft,getOwnPropertySymbols:ht}),r({target:"Object",stat:!0,forced:l((function(){_.f(1)}))},{getOwnPropertySymbols:function(t){return _.f(v(t))}}),Y&&r({target:"JSON",stat:!0,forced:!u||l((function(){var t=H();return"[null]"!=Y([t])||"{}"!=Y({a:t})||"{}"!=Y(Object(t))}))},{stringify:function(t,e,n){for(var r,i=[t],o=1;arguments.length>o;)i.push(arguments[o++]);if(r=e,(p(e)||void 0!==t)&&!at(t))return h(e)||(e=function(t,e){if("function"==typeof r&&(e=r.call(this,t,e)),!at(e))return e}),i[1]=e,Y.apply(null,i)}}),H.prototype[B]||E(H.prototype,B,H.prototype.valueOf),L(H,U),C[F]=!0},6066:(t,e,n)=>{n(7235)("matchAll")},9007:(t,e,n)=>{n(7235)("match")},3510:(t,e,n)=>{n(7235)("replace")},1840:(t,e,n)=>{n(7235)("search")},6982:(t,e,n)=>{n(7235)("species")},2159:(t,e,n)=>{n(7235)("split")},6649:(t,e,n)=>{n(7235)("toPrimitive")},9341:(t,e,n)=>{n(7235)("toStringTag")},543:(t,e,n)=>{n(7235)("unscopables")},2990:(t,e,n)=>{"use strict";var r=n(260),i=n(1048),o=r.aTypedArray;(0,r.exportTypedArrayMethod)("copyWithin",(function(t,e){return i.call(o(this),t,e,arguments.length>2?arguments[2]:void 0)}))},8927:(t,e,n)=>{"use strict";var r=n(260),i=n(2092).every,o=r.aTypedArray;(0,r.exportTypedArrayMethod)("every",(function(t){return i(o(this),t,arguments.length>1?arguments[1]:void 0)}))},3105:(t,e,n)=>{"use strict";var r=n(260),i=n(1285),o=r.aTypedArray;(0,r.exportTypedArrayMethod)("fill",(function(t){return i.apply(o(this),arguments)}))},5035:(t,e,n)=>{"use strict";var r=n(260),i=n(2092).filter,o=n(3074),a=r.aTypedArray;(0,r.exportTypedArrayMethod)("filter",(function(t){var e=i(a(this),t,arguments.length>1?arguments[1]:void 0);return o(this,e)}))},7174:(t,e,n)=>{"use strict";var r=n(260),i=n(2092).findIndex,o=r.aTypedArray;(0,r.exportTypedArrayMethod)("findIndex",(function(t){return i(o(this),t,arguments.length>1?arguments[1]:void 0)}))},4345:(t,e,n)=>{"use strict";var r=n(260),i=n(2092).find,o=r.aTypedArray;(0,r.exportTypedArrayMethod)("find",(function(t){return i(o(this),t,arguments.length>1?arguments[1]:void 0)}))},4197:(t,e,n)=>{n(9843)("Float32",(function(t){return function(e,n,r){return t(this,e,n,r)}}))},6495:(t,e,n)=>{n(9843)("Float64",(function(t){return function(e,n,r){return t(this,e,n,r)}}))},2846:(t,e,n)=>{"use strict";var r=n(260),i=n(2092).forEach,o=r.aTypedArray;(0,r.exportTypedArrayMethod)("forEach",(function(t){i(o(this),t,arguments.length>1?arguments[1]:void 0)}))},8145:(t,e,n)=>{"use strict";var r=n(3832);(0,n(260).exportTypedArrayStaticMethod)("from",n(7321),r)},4731:(t,e,n)=>{"use strict";var r=n(260),i=n(1318).includes,o=r.aTypedArray;(0,r.exportTypedArrayMethod)("includes",(function(t){return i(o(this),t,arguments.length>1?arguments[1]:void 0)}))},7209:(t,e,n)=>{"use strict";var r=n(260),i=n(1318).indexOf,o=r.aTypedArray;(0,r.exportTypedArrayMethod)("indexOf",(function(t){return i(o(this),t,arguments.length>1?arguments[1]:void 0)}))},5109:(t,e,n)=>{n(9843)("Int16",(function(t){return function(e,n,r){return t(this,e,n,r)}}))},5125:(t,e,n)=>{n(9843)("Int32",(function(t){return function(e,n,r){return t(this,e,n,r)}}))},7145:(t,e,n)=>{n(9843)("Int8",(function(t){return function(e,n,r){return t(this,e,n,r)}}))},6319:(t,e,n)=>{"use strict";var r=n(7854),i=n(260),o=n(6992),a=n(5112)("iterator"),s=r.Uint8Array,u=o.values,c=o.keys,l=o.entries,f=i.aTypedArray,h=i.exportTypedArrayMethod,p=s&&s.prototype[a],d=!!p&&("values"==p.name||null==p.name),v=function(){return u.call(f(this))};h("entries",(function(){return l.call(f(this))})),h("keys",(function(){return c.call(f(this))})),h("values",v,!d),h(a,v,!d)},8867:(t,e,n)=>{"use strict";var r=n(260),i=r.aTypedArray,o=r.exportTypedArrayMethod,a=[].join;o("join",(function(t){return a.apply(i(this),arguments)}))},7789:(t,e,n)=>{"use strict";var r=n(260),i=n(6583),o=r.aTypedArray;(0,r.exportTypedArrayMethod)("lastIndexOf",(function(t){return i.apply(o(this),arguments)}))},3739:(t,e,n)=>{"use strict";var r=n(260),i=n(2092).map,o=n(6707),a=r.aTypedArray,s=r.aTypedArrayConstructor;(0,r.exportTypedArrayMethod)("map",(function(t){return i(a(this),t,arguments.length>1?arguments[1]:void 0,(function(t,e){return new(s(o(t,t.constructor)))(e)}))}))},5206:(t,e,n)=>{"use strict";var r=n(260),i=n(3832),o=r.aTypedArrayConstructor;(0,r.exportTypedArrayStaticMethod)("of",(function(){for(var t=0,e=arguments.length,n=new(o(this))(e);e>t;)n[t]=arguments[t++];return n}),i)},4483:(t,e,n)=>{"use strict";var r=n(260),i=n(3671).right,o=r.aTypedArray;(0,r.exportTypedArrayMethod)("reduceRight",(function(t){return i(o(this),t,arguments.length,arguments.length>1?arguments[1]:void 0)}))},9368:(t,e,n)=>{"use strict";var r=n(260),i=n(3671).left,o=r.aTypedArray;(0,r.exportTypedArrayMethod)("reduce",(function(t){return i(o(this),t,arguments.length,arguments.length>1?arguments[1]:void 0)}))},2056:(t,e,n)=>{"use strict";var r=n(260),i=r.aTypedArray,o=r.exportTypedArrayMethod,a=Math.floor;o("reverse",(function(){for(var t,e=this,n=i(e).length,r=a(n/2),o=0;o<r;)t=e[o],e[o++]=e[--n],e[n]=t;return e}))},3462:(t,e,n)=>{"use strict";var r=n(260),i=n(7466),o=n(4590),a=n(7908),s=n(7293),u=r.aTypedArray;(0,r.exportTypedArrayMethod)("set",(function(t){u(this);var e=o(arguments.length>1?arguments[1]:void 0,1),n=this.length,r=a(t),s=i(r.length),c=0;if(s+e>n)throw RangeError("Wrong length");for(;c<s;)this[e+c]=r[c++]}),s((function(){new Int8Array(1).set({})})))},678:(t,e,n)=>{"use strict";var r=n(260),i=n(6707),o=n(7293),a=r.aTypedArray,s=r.aTypedArrayConstructor,u=r.exportTypedArrayMethod,c=[].slice;u("slice",(function(t,e){for(var n=c.call(a(this),t,e),r=i(this,this.constructor),o=0,u=n.length,l=new(s(r))(u);u>o;)l[o]=n[o++];return l}),o((function(){new Int8Array(1).slice()})))},7462:(t,e,n)=>{"use strict";var r=n(260),i=n(2092).some,o=r.aTypedArray;(0,r.exportTypedArrayMethod)("some",(function(t){return i(o(this),t,arguments.length>1?arguments[1]:void 0)}))},3824:(t,e,n)=>{"use strict";var r=n(260),i=r.aTypedArray,o=r.exportTypedArrayMethod,a=[].sort;o("sort",(function(t){return a.call(i(this),t)}))},5021:(t,e,n)=>{"use strict";var r=n(260),i=n(7466),o=n(1400),a=n(6707),s=r.aTypedArray;(0,r.exportTypedArrayMethod)("subarray",(function(t,e){var n=s(this),r=n.length,u=o(t,r);return new(a(n,n.constructor))(n.buffer,n.byteOffset+u*n.BYTES_PER_ELEMENT,i((void 0===e?r:o(e,r))-u))}))},2974:(t,e,n)=>{"use strict";var r=n(7854),i=n(260),o=n(7293),a=r.Int8Array,s=i.aTypedArray,u=i.exportTypedArrayMethod,c=[].toLocaleString,l=[].slice,f=!!a&&o((function(){c.call(new a(1))}));u("toLocaleString",(function(){return c.apply(f?l.call(s(this)):s(this),arguments)}),o((function(){return[1,2].toLocaleString()!=new a([1,2]).toLocaleString()}))||!o((function(){a.prototype.toLocaleString.call([1,2])})))},5016:(t,e,n)=>{"use strict";var r=n(260).exportTypedArrayMethod,i=n(7293),o=n(7854).Uint8Array,a=o&&o.prototype||{},s=[].toString,u=[].join;i((function(){s.call({})}))&&(s=function(){return u.call(this)});var c=a.toString!=s;r("toString",s,c)},8255:(t,e,n)=>{n(9843)("Uint16",(function(t){return function(e,n,r){return t(this,e,n,r)}}))},9135:(t,e,n)=>{n(9843)("Uint32",(function(t){return function(e,n,r){return t(this,e,n,r)}}))},2472:(t,e,n)=>{n(9843)("Uint8",(function(t){return function(e,n,r){return t(this,e,n,r)}}))},9743:(t,e,n)=>{n(9843)("Uint8",(function(t){return function(e,n,r){return t(this,e,n,r)}}),!0)},4129:(t,e,n)=>{"use strict";var r,i=n(7854),o=n(2248),a=n(2423),s=n(7710),u=n(9320),c=n(111),l=n(9909).enforce,f=n(8536),h=!i.ActiveXObject&&"ActiveXObject"in i,p=Object.isExtensible,d=function(t){return function(){return t(this,arguments.length?arguments[0]:void 0)}},v=t.exports=s("WeakMap",d,u);if(f&&h){r=u.getConstructor(d,"WeakMap",!0),a.REQUIRED=!0;var g=v.prototype,y=g.delete,m=g.has,b=g.get,x=g.set;o(g,{delete:function(t){if(c(t)&&!p(t)){var e=l(this);return e.frozen||(e.frozen=new r),y.call(this,t)||e.frozen.delete(t)}return y.call(this,t)},has:function(t){if(c(t)&&!p(t)){var e=l(this);return e.frozen||(e.frozen=new r),m.call(this,t)||e.frozen.has(t)}return m.call(this,t)},get:function(t){if(c(t)&&!p(t)){var e=l(this);return e.frozen||(e.frozen=new r),m.call(this,t)?b.call(this,t):e.frozen.get(t)}return b.call(this,t)},set:function(t,e){if(c(t)&&!p(t)){var n=l(this);n.frozen||(n.frozen=new r),m.call(this,t)?x.call(this,t,e):n.frozen.set(t,e)}else x.call(this,t,e);return this}})}},8478:(t,e,n)=>{"use strict";n(7710)("WeakSet",(function(t){return function(){return t(this,arguments.length?arguments[0]:void 0)}}),n(9320))},4747:(t,e,n)=>{var r=n(7854),i=n(8324),o=n(8533),a=n(8880);for(var s in i){var u=r[s],c=u&&u.prototype;if(c&&c.forEach!==o)try{a(c,"forEach",o)}catch(t){c.forEach=o}}},3948:(t,e,n)=>{var r=n(7854),i=n(8324),o=n(6992),a=n(8880),s=n(5112),u=s("iterator"),c=s("toStringTag"),l=o.values;for(var f in i){var h=r[f],p=h&&h.prototype;if(p){if(p[u]!==l)try{a(p,u,l)}catch(t){p[u]=l}if(p[c]||a(p,c,f),i[f])for(var d in o)if(p[d]!==o[d])try{a(p,d,o[d])}catch(t){p[d]=o[d]}}}},4633:(t,e,n)=>{var r=n(2109),i=n(7854),o=n(261);r({global:!0,bind:!0,enumerable:!0,forced:!i.setImmediate||!i.clearImmediate},{setImmediate:o.set,clearImmediate:o.clear})},5844:(t,e,n)=>{var r=n(2109),i=n(7854),o=n(5948),a=n(5268),s=i.process;r({global:!0,enumerable:!0,noTargetGet:!0},{queueMicrotask:function(t){var e=a&&s.domain;o(e?e.bind(t):t)}})},2564:(t,e,n)=>{var r=n(2109),i=n(7854),o=n(8113),a=[].slice,s=function(t){return function(e,n){var r=arguments.length>2,i=r?a.call(arguments,2):void 0;return t(r?function(){("function"==typeof e?e:Function(e)).apply(this,i)}:e,n)}};r({global:!0,bind:!0,forced:/MSIE .\./.test(o)},{setTimeout:s(i.setTimeout),setInterval:s(i.setInterval)})},1637:(t,e,n)=>{"use strict";n(6992);var r=n(2109),i=n(5005),o=n(590),a=n(1320),s=n(2248),u=n(8003),c=n(4994),l=n(9909),f=n(5787),h=n(6656),p=n(9974),d=n(648),v=n(9670),g=n(111),y=n(30),m=n(9114),b=n(8554),x=n(1246),w=n(5112),S=i("fetch"),_=i("Headers"),A=w("iterator"),M="URLSearchParams",T="URLSearchParamsIterator",E=l.set,k=l.getterFor(M),O=l.getterFor(T),P=/\+/g,C=Array(4),R=function(t){return C[t-1]||(C[t-1]=RegExp("((?:%[\\da-f]{2}){"+t+"})","gi"))},I=function(t){try{return decodeURIComponent(t)}catch(e){return t}},j=function(t){var e=t.replace(P," "),n=4;try{return decodeURIComponent(e)}catch(t){for(;n;)e=e.replace(R(n--),I);return e}},N=/[!'()~]|%20/g,L={"!":"%21","'":"%27","(":"%28",")":"%29","~":"%7E","%20":"+"},z=function(t){return L[t]},D=function(t){return encodeURIComponent(t).replace(N,z)},F=function(t,e){if(e)for(var n,r,i=e.split("&"),o=0;o<i.length;)(n=i[o++]).length&&(r=n.split("="),t.push({key:j(r.shift()),value:j(r.join("="))}))},U=function(t){this.entries.length=0,F(this.entries,t)},B=function(t,e){if(t<e)throw TypeError("Not enough arguments")},q=c((function(t,e){E(this,{type:T,iterator:b(k(t).entries),kind:e})}),"Iterator",(function(){var t=O(this),e=t.kind,n=t.iterator.next(),r=n.value;return n.done||(n.value="keys"===e?r.key:"values"===e?r.value:[r.key,r.value]),n})),V=function(){f(this,V,M);var t,e,n,r,i,o,a,s,u,c=arguments.length>0?arguments[0]:void 0,l=this,p=[];if(E(l,{type:M,entries:p,updateURL:function(){},updateSearchParams:U}),void 0!==c)if(g(c))if("function"==typeof(t=x(c)))for(n=(e=t.call(c)).next;!(r=n.call(e)).done;){if((a=(o=(i=b(v(r.value))).next).call(i)).done||(s=o.call(i)).done||!o.call(i).done)throw TypeError("Expected sequence with length 2");p.push({key:a.value+"",value:s.value+""})}else for(u in c)h(c,u)&&p.push({key:u,value:c[u]+""});else F(p,"string"==typeof c?"?"===c.charAt(0)?c.slice(1):c:c+"")},W=V.prototype;s(W,{append:function(t,e){B(arguments.length,2);var n=k(this);n.entries.push({key:t+"",value:e+""}),n.updateURL()},delete:function(t){B(arguments.length,1);for(var e=k(this),n=e.entries,r=t+"",i=0;i<n.length;)n[i].key===r?n.splice(i,1):i++;e.updateURL()},get:function(t){B(arguments.length,1);for(var e=k(this).entries,n=t+"",r=0;r<e.length;r++)if(e[r].key===n)return e[r].value;return null},getAll:function(t){B(arguments.length,1);for(var e=k(this).entries,n=t+"",r=[],i=0;i<e.length;i++)e[i].key===n&&r.push(e[i].value);return r},has:function(t){B(arguments.length,1);for(var e=k(this).entries,n=t+"",r=0;r<e.length;)if(e[r++].key===n)return!0;return!1},set:function(t,e){B(arguments.length,1);for(var n,r=k(this),i=r.entries,o=!1,a=t+"",s=e+"",u=0;u<i.length;u++)(n=i[u]).key===a&&(o?i.splice(u--,1):(o=!0,n.value=s));o||i.push({key:a,value:s}),r.updateURL()},sort:function(){var t,e,n,r=k(this),i=r.entries,o=i.slice();for(i.length=0,n=0;n<o.length;n++){for(t=o[n],e=0;e<n;e++)if(i[e].key>t.key){i.splice(e,0,t);break}e===n&&i.push(t)}r.updateURL()},forEach:function(t){for(var e,n=k(this).entries,r=p(t,arguments.length>1?arguments[1]:void 0,3),i=0;i<n.length;)r((e=n[i++]).value,e.key,this)},keys:function(){return new q(this,"keys")},values:function(){return new q(this,"values")},entries:function(){return new q(this,"entries")}},{enumerable:!0}),a(W,A,W.entries),a(W,"toString",(function(){for(var t,e=k(this).entries,n=[],r=0;r<e.length;)t=e[r++],n.push(D(t.key)+"="+D(t.value));return n.join("&")}),{enumerable:!0}),u(V,M),r({global:!0,forced:!o},{URLSearchParams:V}),o||"function"!=typeof S||"function"!=typeof _||r({global:!0,enumerable:!0,forced:!0},{fetch:function(t){var e,n,r,i=[t];return arguments.length>1&&(g(e=arguments[1])&&(n=e.body,d(n)===M&&((r=e.headers?new _(e.headers):new _).has("content-type")||r.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"),e=y(e,{body:m(0,String(n)),headers:m(0,r)}))),i.push(e)),S.apply(this,i)}}),t.exports={URLSearchParams:V,getState:k}},285:(t,e,n)=>{"use strict";n(8783);var r,i=n(2109),o=n(9781),a=n(590),s=n(7854),u=n(6048),c=n(1320),l=n(5787),f=n(6656),h=n(1574),p=n(8457),d=n(8710).codeAt,v=n(3197),g=n(8003),y=n(1637),m=n(9909),b=s.URL,x=y.URLSearchParams,w=y.getState,S=m.set,_=m.getterFor("URL"),A=Math.floor,M=Math.pow,T="Invalid scheme",E="Invalid host",k="Invalid port",O=/[A-Za-z]/,P=/[\d+-.A-Za-z]/,C=/\d/,R=/^(0x|0X)/,I=/^[0-7]+$/,j=/^\d+$/,N=/^[\dA-Fa-f]+$/,L=/[\u0000\t\u000A\u000D #%/:?@[\\]]/,z=/[\u0000\t\u000A\u000D #/:?@[\\]]/,D=/^[\u0000-\u001F ]+|[\u0000-\u001F ]+$/g,F=/[\t\u000A\u000D]/g,U=function(t,e){var n,r,i;if("["==e.charAt(0)){if("]"!=e.charAt(e.length-1))return E;if(!(n=q(e.slice(1,-1))))return E;t.host=n}else if(Z(t)){if(e=v(e),L.test(e))return E;if(null===(n=B(e)))return E;t.host=n}else{if(z.test(e))return E;for(n="",r=p(e),i=0;i<r.length;i++)n+=X(r[i],W);t.host=n}},B=function(t){var e,n,r,i,o,a,s,u=t.split(".");if(u.length&&""==u[u.length-1]&&u.pop(),(e=u.length)>4)return t;for(n=[],r=0;r<e;r++){if(""==(i=u[r]))return t;if(o=10,i.length>1&&"0"==i.charAt(0)&&(o=R.test(i)?16:8,i=i.slice(8==o?1:2)),""===i)a=0;else{if(!(10==o?j:8==o?I:N).test(i))return t;a=parseInt(i,o)}n.push(a)}for(r=0;r<e;r++)if(a=n[r],r==e-1){if(a>=M(256,5-e))return null}else if(a>255)return null;for(s=n.pop(),r=0;r<n.length;r++)s+=n[r]*M(256,3-r);return s},q=function(t){var e,n,r,i,o,a,s,u=[0,0,0,0,0,0,0,0],c=0,l=null,f=0,h=function(){return t.charAt(f)};if(":"==h()){if(":"!=t.charAt(1))return;f+=2,l=++c}for(;h();){if(8==c)return;if(":"!=h()){for(e=n=0;n<4&&N.test(h());)e=16*e+parseInt(h(),16),f++,n++;if("."==h()){if(0==n)return;if(f-=n,c>6)return;for(r=0;h();){if(i=null,r>0){if(!("."==h()&&r<4))return;f++}if(!C.test(h()))return;for(;C.test(h());){if(o=parseInt(h(),10),null===i)i=o;else{if(0==i)return;i=10*i+o}if(i>255)return;f++}u[c]=256*u[c]+i,2!=++r&&4!=r||c++}if(4!=r)return;break}if(":"==h()){if(f++,!h())return}else if(h())return;u[c++]=e}else{if(null!==l)return;f++,l=++c}}if(null!==l)for(a=c-l,c=7;0!=c&&a>0;)s=u[c],u[c--]=u[l+a-1],u[l+--a]=s;else if(8!=c)return;return u},V=function(t){var e,n,r,i;if("number"==typeof t){for(e=[],n=0;n<4;n++)e.unshift(t%256),t=A(t/256);return e.join(".")}if("object"==typeof t){for(e="",r=function(t){for(var e=null,n=1,r=null,i=0,o=0;o<8;o++)0!==t[o]?(i>n&&(e=r,n=i),r=null,i=0):(null===r&&(r=o),++i);return i>n&&(e=r,n=i),e}(t),n=0;n<8;n++)i&&0===t[n]||(i&&(i=!1),r===n?(e+=n?":":"::",i=!0):(e+=t[n].toString(16),n<7&&(e+=":")));return"["+e+"]"}return t},W={},H=h({},W,{" ":1,'"':1,"<":1,">":1,"`":1}),Y=h({},H,{"#":1,"?":1,"{":1,"}":1}),G=h({},Y,{"/":1,":":1,";":1,"=":1,"@":1,"[":1,"\\":1,"]":1,"^":1,"|":1}),X=function(t,e){var n=d(t,0);return n>32&&n<127&&!f(e,t)?t:encodeURIComponent(t)},$={ftp:21,file:null,http:80,https:443,ws:80,wss:443},Z=function(t){return f($,t.scheme)},K=function(t){return""!=t.username||""!=t.password},J=function(t){return!t.host||t.cannotBeABaseURL||"file"==t.scheme},Q=function(t,e){var n;return 2==t.length&&O.test(t.charAt(0))&&(":"==(n=t.charAt(1))||!e&&"|"==n)},tt=function(t){var e;return t.length>1&&Q(t.slice(0,2))&&(2==t.length||"/"===(e=t.charAt(2))||"\\"===e||"?"===e||"#"===e)},et=function(t){var e=t.path,n=e.length;!n||"file"==t.scheme&&1==n&&Q(e[0],!0)||e.pop()},nt=function(t){return"."===t||"%2e"===t.toLowerCase()},rt={},it={},ot={},at={},st={},ut={},ct={},lt={},ft={},ht={},pt={},dt={},vt={},gt={},yt={},mt={},bt={},xt={},wt={},St={},_t={},At=function(t,e,n,i){var o,a,s,u,c,l=n||rt,h=0,d="",v=!1,g=!1,y=!1;for(n||(t.scheme="",t.username="",t.password="",t.host=null,t.port=null,t.path=[],t.query=null,t.fragment=null,t.cannotBeABaseURL=!1,e=e.replace(D,"")),e=e.replace(F,""),o=p(e);h<=o.length;){switch(a=o[h],l){case rt:if(!a||!O.test(a)){if(n)return T;l=ot;continue}d+=a.toLowerCase(),l=it;break;case it:if(a&&(P.test(a)||"+"==a||"-"==a||"."==a))d+=a.toLowerCase();else{if(":"!=a){if(n)return T;d="",l=ot,h=0;continue}if(n&&(Z(t)!=f($,d)||"file"==d&&(K(t)||null!==t.port)||"file"==t.scheme&&!t.host))return;if(t.scheme=d,n)return void(Z(t)&&$[t.scheme]==t.port&&(t.port=null));d="","file"==t.scheme?l=gt:Z(t)&&i&&i.scheme==t.scheme?l=at:Z(t)?l=lt:"/"==o[h+1]?(l=st,h++):(t.cannotBeABaseURL=!0,t.path.push(""),l=wt)}break;case ot:if(!i||i.cannotBeABaseURL&&"#"!=a)return T;if(i.cannotBeABaseURL&&"#"==a){t.scheme=i.scheme,t.path=i.path.slice(),t.query=i.query,t.fragment="",t.cannotBeABaseURL=!0,l=_t;break}l="file"==i.scheme?gt:ut;continue;case at:if("/"!=a||"/"!=o[h+1]){l=ut;continue}l=ft,h++;break;case st:if("/"==a){l=ht;break}l=xt;continue;case ut:if(t.scheme=i.scheme,a==r)t.username=i.username,t.password=i.password,t.host=i.host,t.port=i.port,t.path=i.path.slice(),t.query=i.query;else if("/"==a||"\\"==a&&Z(t))l=ct;else if("?"==a)t.username=i.username,t.password=i.password,t.host=i.host,t.port=i.port,t.path=i.path.slice(),t.query="",l=St;else{if("#"!=a){t.username=i.username,t.password=i.password,t.host=i.host,t.port=i.port,t.path=i.path.slice(),t.path.pop(),l=xt;continue}t.username=i.username,t.password=i.password,t.host=i.host,t.port=i.port,t.path=i.path.slice(),t.query=i.query,t.fragment="",l=_t}break;case ct:if(!Z(t)||"/"!=a&&"\\"!=a){if("/"!=a){t.username=i.username,t.password=i.password,t.host=i.host,t.port=i.port,l=xt;continue}l=ht}else l=ft;break;case lt:if(l=ft,"/"!=a||"/"!=d.charAt(h+1))continue;h++;break;case ft:if("/"!=a&&"\\"!=a){l=ht;continue}break;case ht:if("@"==a){v&&(d="%40"+d),v=!0,s=p(d);for(var m=0;m<s.length;m++){var b=s[m];if(":"!=b||y){var x=X(b,G);y?t.password+=x:t.username+=x}else y=!0}d=""}else if(a==r||"/"==a||"?"==a||"#"==a||"\\"==a&&Z(t)){if(v&&""==d)return"Invalid authority";h-=p(d).length+1,d="",l=pt}else d+=a;break;case pt:case dt:if(n&&"file"==t.scheme){l=mt;continue}if(":"!=a||g){if(a==r||"/"==a||"?"==a||"#"==a||"\\"==a&&Z(t)){if(Z(t)&&""==d)return E;if(n&&""==d&&(K(t)||null!==t.port))return;if(u=U(t,d))return u;if(d="",l=bt,n)return;continue}"["==a?g=!0:"]"==a&&(g=!1),d+=a}else{if(""==d)return E;if(u=U(t,d))return u;if(d="",l=vt,n==dt)return}break;case vt:if(!C.test(a)){if(a==r||"/"==a||"?"==a||"#"==a||"\\"==a&&Z(t)||n){if(""!=d){var w=parseInt(d,10);if(w>65535)return k;t.port=Z(t)&&w===$[t.scheme]?null:w,d=""}if(n)return;l=bt;continue}return k}d+=a;break;case gt:if(t.scheme="file","/"==a||"\\"==a)l=yt;else{if(!i||"file"!=i.scheme){l=xt;continue}if(a==r)t.host=i.host,t.path=i.path.slice(),t.query=i.query;else if("?"==a)t.host=i.host,t.path=i.path.slice(),t.query="",l=St;else{if("#"!=a){tt(o.slice(h).join(""))||(t.host=i.host,t.path=i.path.slice(),et(t)),l=xt;continue}t.host=i.host,t.path=i.path.slice(),t.query=i.query,t.fragment="",l=_t}}break;case yt:if("/"==a||"\\"==a){l=mt;break}i&&"file"==i.scheme&&!tt(o.slice(h).join(""))&&(Q(i.path[0],!0)?t.path.push(i.path[0]):t.host=i.host),l=xt;continue;case mt:if(a==r||"/"==a||"\\"==a||"?"==a||"#"==a){if(!n&&Q(d))l=xt;else if(""==d){if(t.host="",n)return;l=bt}else{if(u=U(t,d))return u;if("localhost"==t.host&&(t.host=""),n)return;d="",l=bt}continue}d+=a;break;case bt:if(Z(t)){if(l=xt,"/"!=a&&"\\"!=a)continue}else if(n||"?"!=a)if(n||"#"!=a){if(a!=r&&(l=xt,"/"!=a))continue}else t.fragment="",l=_t;else t.query="",l=St;break;case xt:if(a==r||"/"==a||"\\"==a&&Z(t)||!n&&("?"==a||"#"==a)){if(".."===(c=(c=d).toLowerCase())||"%2e."===c||".%2e"===c||"%2e%2e"===c?(et(t),"/"==a||"\\"==a&&Z(t)||t.path.push("")):nt(d)?"/"==a||"\\"==a&&Z(t)||t.path.push(""):("file"==t.scheme&&!t.path.length&&Q(d)&&(t.host&&(t.host=""),d=d.charAt(0)+":"),t.path.push(d)),d="","file"==t.scheme&&(a==r||"?"==a||"#"==a))for(;t.path.length>1&&""===t.path[0];)t.path.shift();"?"==a?(t.query="",l=St):"#"==a&&(t.fragment="",l=_t)}else d+=X(a,Y);break;case wt:"?"==a?(t.query="",l=St):"#"==a?(t.fragment="",l=_t):a!=r&&(t.path[0]+=X(a,W));break;case St:n||"#"!=a?a!=r&&("'"==a&&Z(t)?t.query+="%27":t.query+="#"==a?"%23":X(a,W)):(t.fragment="",l=_t);break;case _t:a!=r&&(t.fragment+=X(a,H))}h++}},Mt=function(t){var e,n,r=l(this,Mt,"URL"),i=arguments.length>1?arguments[1]:void 0,a=String(t),s=S(r,{type:"URL"});if(void 0!==i)if(i instanceof Mt)e=_(i);else if(n=At(e={},String(i)))throw TypeError(n);if(n=At(s,a,null,e))throw TypeError(n);var u=s.searchParams=new x,c=w(u);c.updateSearchParams(s.query),c.updateURL=function(){s.query=String(u)||null},o||(r.href=Et.call(r),r.origin=kt.call(r),r.protocol=Ot.call(r),r.username=Pt.call(r),r.password=Ct.call(r),r.host=Rt.call(r),r.hostname=It.call(r),r.port=jt.call(r),r.pathname=Nt.call(r),r.search=Lt.call(r),r.searchParams=zt.call(r),r.hash=Dt.call(r))},Tt=Mt.prototype,Et=function(){var t=_(this),e=t.scheme,n=t.username,r=t.password,i=t.host,o=t.port,a=t.path,s=t.query,u=t.fragment,c=e+":";return null!==i?(c+="//",K(t)&&(c+=n+(r?":"+r:"")+"@"),c+=V(i),null!==o&&(c+=":"+o)):"file"==e&&(c+="//"),c+=t.cannotBeABaseURL?a[0]:a.length?"/"+a.join("/"):"",null!==s&&(c+="?"+s),null!==u&&(c+="#"+u),c},kt=function(){var t=_(this),e=t.scheme,n=t.port;if("blob"==e)try{return new URL(e.path[0]).origin}catch(t){return"null"}return"file"!=e&&Z(t)?e+"://"+V(t.host)+(null!==n?":"+n:""):"null"},Ot=function(){return _(this).scheme+":"},Pt=function(){return _(this).username},Ct=function(){return _(this).password},Rt=function(){var t=_(this),e=t.host,n=t.port;return null===e?"":null===n?V(e):V(e)+":"+n},It=function(){var t=_(this).host;return null===t?"":V(t)},jt=function(){var t=_(this).port;return null===t?"":String(t)},Nt=function(){var t=_(this),e=t.path;return t.cannotBeABaseURL?e[0]:e.length?"/"+e.join("/"):""},Lt=function(){var t=_(this).query;return t?"?"+t:""},zt=function(){return _(this).searchParams},Dt=function(){var t=_(this).fragment;return t?"#"+t:""},Ft=function(t,e){return{get:t,set:e,configurable:!0,enumerable:!0}};if(o&&u(Tt,{href:Ft(Et,(function(t){var e=_(this),n=String(t),r=At(e,n);if(r)throw TypeError(r);w(e.searchParams).updateSearchParams(e.query)})),origin:Ft(kt),protocol:Ft(Ot,(function(t){var e=_(this);At(e,String(t)+":",rt)})),username:Ft(Pt,(function(t){var e=_(this),n=p(String(t));if(!J(e)){e.username="";for(var r=0;r<n.length;r++)e.username+=X(n[r],G)}})),password:Ft(Ct,(function(t){var e=_(this),n=p(String(t));if(!J(e)){e.password="";for(var r=0;r<n.length;r++)e.password+=X(n[r],G)}})),host:Ft(Rt,(function(t){var e=_(this);e.cannotBeABaseURL||At(e,String(t),pt)})),hostname:Ft(It,(function(t){var e=_(this);e.cannotBeABaseURL||At(e,String(t),dt)})),port:Ft(jt,(function(t){var e=_(this);J(e)||(""==(t=String(t))?e.port=null:At(e,t,vt))})),pathname:Ft(Nt,(function(t){var e=_(this);e.cannotBeABaseURL||(e.path=[],At(e,t+"",bt))})),search:Ft(Lt,(function(t){var e=_(this);""==(t=String(t))?e.query=null:("?"==t.charAt(0)&&(t=t.slice(1)),e.query="",At(e,t,St)),w(e.searchParams).updateSearchParams(e.query)})),searchParams:Ft(zt),hash:Ft(Dt,(function(t){var e=_(this);""!=(t=String(t))?("#"==t.charAt(0)&&(t=t.slice(1)),e.fragment="",At(e,t,_t)):e.fragment=null}))}),c(Tt,"toJSON",(function(){return Et.call(this)}),{enumerable:!0}),c(Tt,"toString",(function(){return Et.call(this)}),{enumerable:!0}),b){var Ut=b.createObjectURL,Bt=b.revokeObjectURL;Ut&&c(Mt,"createObjectURL",(function(t){return Ut.apply(b,arguments)})),Bt&&c(Mt,"revokeObjectURL",(function(t){return Bt.apply(b,arguments)}))}g(Mt,"URL"),i({global:!0,forced:!a,sham:!o},{URL:Mt})},3753:(t,e,n)=>{"use strict";n(2109)({target:"URL",proto:!0,enumerable:!0},{toJSON:function(){return URL.prototype.toString.call(this)}})},8594:(t,e,n)=>{n(1926),n(6337);var r=n(857);t.exports=r},6337:(t,e,n)=>{n(4747),n(3948),n(4633),n(5844),n(2564),n(285),n(3753),n(1637);var r=n(857);t.exports=r},5666:t=>{var e=function(t){"use strict";var e,n=Object.prototype,r=n.hasOwnProperty,i="function"==typeof Symbol?Symbol:{},o=i.iterator||"@@iterator",a=i.asyncIterator||"@@asyncIterator",s=i.toStringTag||"@@toStringTag";function u(t,e,n){return Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{u({},"")}catch(t){u=function(t,e,n){return t[e]=n}}function c(t,e,n,r){var i=e&&e.prototype instanceof g?e:g,o=Object.create(i.prototype),a=new k(r||[]);return o._invoke=function(t,e,n){var r=f;return function(i,o){if(r===p)throw new Error("Generator is already running");if(r===d){if("throw"===i)throw o;return P()}for(n.method=i,n.arg=o;;){var a=n.delegate;if(a){var s=M(a,n);if(s){if(s===v)continue;return s}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(r===f)throw r=d,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r=p;var u=l(t,e,n);if("normal"===u.type){if(r=n.done?d:h,u.arg===v)continue;return{value:u.arg,done:n.done}}"throw"===u.type&&(r=d,n.method="throw",n.arg=u.arg)}}}(t,n,a),o}function l(t,e,n){try{return{type:"normal",arg:t.call(e,n)}}catch(t){return{type:"throw",arg:t}}}t.wrap=c;var f="suspendedStart",h="suspendedYield",p="executing",d="completed",v={};function g(){}function y(){}function m(){}var b={};b[o]=function(){return this};var x=Object.getPrototypeOf,w=x&&x(x(O([])));w&&w!==n&&r.call(w,o)&&(b=w);var S=m.prototype=g.prototype=Object.create(b);function _(t){["next","throw","return"].forEach((function(e){u(t,e,(function(t){return this._invoke(e,t)}))}))}function A(t,e){function n(i,o,a,s){var u=l(t[i],t,o);if("throw"!==u.type){var c=u.arg,f=c.value;return f&&"object"==typeof f&&r.call(f,"__await")?e.resolve(f.__await).then((function(t){n("next",t,a,s)}),(function(t){n("throw",t,a,s)})):e.resolve(f).then((function(t){c.value=t,a(c)}),(function(t){return n("throw",t,a,s)}))}s(u.arg)}var i;this._invoke=function(t,r){function o(){return new e((function(e,i){n(t,r,e,i)}))}return i=i?i.then(o,o):o()}}function M(t,n){var r=t.iterator[n.method];if(r===e){if(n.delegate=null,"throw"===n.method){if(t.iterator.return&&(n.method="return",n.arg=e,M(t,n),"throw"===n.method))return v;n.method="throw",n.arg=new TypeError("The iterator does not provide a 'throw' method")}return v}var i=l(r,t.iterator,n.arg);if("throw"===i.type)return n.method="throw",n.arg=i.arg,n.delegate=null,v;var o=i.arg;return o?o.done?(n[t.resultName]=o.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,v):o:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,v)}function T(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function E(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function k(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(T,this),this.reset(!0)}function O(t){if(t){var n=t[o];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var i=-1,a=function n(){for(;++i<t.length;)if(r.call(t,i))return n.value=t[i],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}return{next:P}}function P(){return{value:e,done:!0}}return y.prototype=S.constructor=m,m.constructor=y,y.displayName=u(m,s,"GeneratorFunction"),t.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===y||"GeneratorFunction"===(e.displayName||e.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,m):(t.__proto__=m,u(t,s,"GeneratorFunction")),t.prototype=Object.create(S),t},t.awrap=function(t){return{__await:t}},_(A.prototype),A.prototype[a]=function(){return this},t.AsyncIterator=A,t.async=function(e,n,r,i,o){void 0===o&&(o=Promise);var a=new A(c(e,n,r,i),o);return t.isGeneratorFunction(n)?a:a.next().then((function(t){return t.done?t.value:a.next()}))},_(S),u(S,s,"Generator"),S[o]=function(){return this},S.toString=function(){return"[object Generator]"},t.keys=function(t){var e=[];for(var n in t)e.push(n);return e.reverse(),function n(){for(;e.length;){var r=e.pop();if(r in t)return n.value=r,n.done=!1,n}return n.done=!0,n}},t.values=O,k.prototype={constructor:k,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(E),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function i(r,i){return s.type="throw",s.arg=t,n.next=r,i&&(n.method="next",n.arg=e),!!i}for(var o=this.tryEntries.length-1;o>=0;--o){var a=this.tryEntries[o],s=a.completion;if("root"===a.tryLoc)return i("end");if(a.tryLoc<=this.prev){var u=r.call(a,"catchLoc"),c=r.call(a,"finallyLoc");if(u&&c){if(this.prev<a.catchLoc)return i(a.catchLoc,!0);if(this.prev<a.finallyLoc)return i(a.finallyLoc)}else if(u){if(this.prev<a.catchLoc)return i(a.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return i(a.finallyLoc)}}}},abrupt:function(t,e){for(var n=this.tryEntries.length-1;n>=0;--n){var i=this.tryEntries[n];if(i.tryLoc<=this.prev&&r.call(i,"finallyLoc")&&this.prev<i.finallyLoc){var o=i;break}}o&&("break"===t||"continue"===t)&&o.tryLoc<=e&&e<=o.finallyLoc&&(o=null);var a=o?o.completion:{};return a.type=t,a.arg=e,o?(this.method="next",this.next=o.finallyLoc,v):this.complete(a)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),v},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.finallyLoc===t)return this.complete(n.completion,n.afterLoc),E(n),v}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.tryLoc===t){var r=n.completion;if("throw"===r.type){var i=r.arg;E(n)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:O(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),v}},t}(t.exports);try{regeneratorRuntime=e}catch(t){Function("r","regeneratorRuntime = r")(e)}}},e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={exports:{}};return t[r](i,i.exports,n),i.exports}n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})};var r={};return(()=>{"use strict";function t(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}n.r(r),n.d(r,{ColorPalette:()=>Wo,ColorUtils:()=>sa,DataNode:()=>e,EuclidianDistanceMetric:()=>mo,Heatmap:()=>Bo,HeatmapSettings:()=>To,MoloReorderer:()=>xo,PearsonCorrelationMetric:()=>Vo,StringUtils:()=>Yo,Sunburst:()=>pa,SunburstSettings:()=>Jo,Transition:()=>io,TreeNode:()=>uo,Treemap:()=>Ea,TreemapSettings:()=>ba,Treeview:()=>Qa,TreeviewSettings:()=>ja,UPGMAClusterer:()=>go});var e=function e(n,r){var i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:[],o=arguments.length>3?arguments[3]:void 0,a=arguments.length>4?arguments[4]:void 0,s=arguments.length>5&&void 0!==arguments[5]?arguments[5]:{};t(this,e),this.id=n,this.name=r,this.children=i,this.count=o,this.selfCount=a,this.extra=s};function i(){}function o(t){return null==t?i:function(){return this.querySelector(t)}}function a(t){return"object"==typeof t&&"length"in t?t:Array.from(t)}function s(){return[]}function u(t){return null==t?s:function(){return this.querySelectorAll(t)}}function c(t){return function(){return this.matches(t)}}function l(t){return function(e){return e.matches(t)}}var f=Array.prototype.find;function h(){return this.firstElementChild}var p=Array.prototype.filter;function d(){return this.children}function v(t){return new Array(t.length)}function g(t,e){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=e}function y(t){return function(){return t}}function m(t,e,n,r,i,o){for(var a,s=0,u=e.length,c=o.length;s<c;++s)(a=e[s])?(a.__data__=o[s],r[s]=a):n[s]=new g(t,o[s]);for(;s<u;++s)(a=e[s])&&(i[s]=a)}function b(t,e,n,r,i,o,a){var s,u,c,l=new Map,f=e.length,h=o.length,p=new Array(f);for(s=0;s<f;++s)(u=e[s])&&(p[s]=c=a.call(u,u.__data__,s,e)+"",l.has(c)?i[s]=u:l.set(c,u));for(s=0;s<h;++s)c=a.call(t,o[s],s,o)+"",(u=l.get(c))?(r[s]=u,u.__data__=o[s],l.delete(c)):n[s]=new g(t,o[s]);for(s=0;s<f;++s)(u=e[s])&&l.get(p[s])===u&&(i[s]=u)}function x(t){return t.__data__}function w(t,e){return t<e?-1:t>e?1:t>=e?0:NaN}g.prototype={constructor:g,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,e){return this._parent.insertBefore(t,e)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};var S="http://www.w3.org/1999/xhtml";const _={svg:"http://www.w3.org/2000/svg",xhtml:S,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"};function A(t){var e=t+="",n=e.indexOf(":");return n>=0&&"xmlns"!==(e=t.slice(0,n))&&(t=t.slice(n+1)),_.hasOwnProperty(e)?{space:_[e],local:t}:t}function M(t){return function(){this.removeAttribute(t)}}function T(t){return function(){this.removeAttributeNS(t.space,t.local)}}function E(t,e){return function(){this.setAttribute(t,e)}}function k(t,e){return function(){this.setAttributeNS(t.space,t.local,e)}}function O(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttribute(t):this.setAttribute(t,n)}}function P(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,n)}}function C(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView}function R(t){return function(){this.style.removeProperty(t)}}function I(t,e,n){return function(){this.style.setProperty(t,e,n)}}function j(t,e,n){return function(){var r=e.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,n)}}function N(t,e){return t.style.getPropertyValue(e)||C(t).getComputedStyle(t,null).getPropertyValue(e)}function L(t){return function(){delete this[t]}}function z(t,e){return function(){this[t]=e}}function D(t,e){return function(){var n=e.apply(this,arguments);null==n?delete this[t]:this[t]=n}}function F(t){return t.trim().split(/^|\s+/)}function U(t){return t.classList||new B(t)}function B(t){this._node=t,this._names=F(t.getAttribute("class")||"")}function q(t,e){for(var n=U(t),r=-1,i=e.length;++r<i;)n.add(e[r])}function V(t,e){for(var n=U(t),r=-1,i=e.length;++r<i;)n.remove(e[r])}function W(t){return function(){q(this,t)}}function H(t){return function(){V(this,t)}}function Y(t,e){return function(){(e.apply(this,arguments)?q:V)(this,t)}}function G(){this.textContent=""}function X(t){return function(){this.textContent=t}}function $(t){return function(){var e=t.apply(this,arguments);this.textContent=null==e?"":e}}function Z(){this.innerHTML=""}function K(t){return function(){this.innerHTML=t}}function J(t){return function(){var e=t.apply(this,arguments);this.innerHTML=null==e?"":e}}function Q(){this.nextSibling&&this.parentNode.appendChild(this)}function tt(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function et(t){return function(){var e=this.ownerDocument,n=this.namespaceURI;return n===S&&e.documentElement.namespaceURI===S?e.createElement(t):e.createElementNS(n,t)}}function nt(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}function rt(t){var e=A(t);return(e.local?nt:et)(e)}function it(){return null}function ot(){var t=this.parentNode;t&&t.removeChild(this)}function at(){var t=this.cloneNode(!1),e=this.parentNode;return e?e.insertBefore(t,this.nextSibling):t}function st(){var t=this.cloneNode(!0),e=this.parentNode;return e?e.insertBefore(t,this.nextSibling):t}function ut(t){return t.trim().split(/^|\s+/).map((function(t){var e="",n=t.indexOf(".");return n>=0&&(e=t.slice(n+1),t=t.slice(0,n)),{type:t,name:e}}))}function ct(t){return function(){var e=this.__on;if(e){for(var n,r=0,i=-1,o=e.length;r<o;++r)n=e[r],t.type&&n.type!==t.type||n.name!==t.name?e[++i]=n:this.removeEventListener(n.type,n.listener,n.options);++i?e.length=i:delete this.__on}}}function lt(t,e,n){return function(){var r,i=this.__on,o=function(t){return function(e){t.call(this,e,this.__data__)}}(e);if(i)for(var a=0,s=i.length;a<s;++a)if((r=i[a]).type===t.type&&r.name===t.name)return this.removeEventListener(r.type,r.listener,r.options),this.addEventListener(r.type,r.listener=o,r.options=n),void(r.value=e);this.addEventListener(t.type,o,n),r={type:t.type,name:t.name,value:e,listener:o,options:n},i?i.push(r):this.__on=[r]}}function ft(t,e,n){var r=C(t),i=r.CustomEvent;"function"==typeof i?i=new i(e,n):(i=r.document.createEvent("Event"),n?(i.initEvent(e,n.bubbles,n.cancelable),i.detail=n.detail):i.initEvent(e,!1,!1)),t.dispatchEvent(i)}function ht(t,e){return function(){return ft(this,t,e)}}function pt(t,e){return function(){return ft(this,t,e.apply(this,arguments))}}B.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var e=this._names.indexOf(t);e>=0&&(this._names.splice(e,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};var dt=[null];function vt(t,e){this._groups=t,this._parents=e}function gt(){return new vt([[document.documentElement]],dt)}vt.prototype=gt.prototype={constructor:vt,select:function(t){"function"!=typeof t&&(t=o(t));for(var e=this._groups,n=e.length,r=new Array(n),i=0;i<n;++i)for(var a,s,u=e[i],c=u.length,l=r[i]=new Array(c),f=0;f<c;++f)(a=u[f])&&(s=t.call(a,a.__data__,f,u))&&("__data__"in a&&(s.__data__=a.__data__),l[f]=s);return new vt(r,this._parents)},selectAll:function(t){t="function"==typeof t?function(t){return function(){var e=t.apply(this,arguments);return null==e?[]:a(e)}}(t):u(t);for(var e=this._groups,n=e.length,r=[],i=[],o=0;o<n;++o)for(var s,c=e[o],l=c.length,f=0;f<l;++f)(s=c[f])&&(r.push(t.call(s,s.__data__,f,c)),i.push(s));return new vt(r,i)},selectChild:function(t){return this.select(null==t?h:function(t){return function(){return f.call(this.children,t)}}("function"==typeof t?t:l(t)))},selectChildren:function(t){return this.selectAll(null==t?d:function(t){return function(){return p.call(this.children,t)}}("function"==typeof t?t:l(t)))},filter:function(t){"function"!=typeof t&&(t=c(t));for(var e=this._groups,n=e.length,r=new Array(n),i=0;i<n;++i)for(var o,a=e[i],s=a.length,u=r[i]=[],l=0;l<s;++l)(o=a[l])&&t.call(o,o.__data__,l,a)&&u.push(o);return new vt(r,this._parents)},data:function(t,e){if(!arguments.length)return Array.from(this,x);var n=e?b:m,r=this._parents,i=this._groups;"function"!=typeof t&&(t=y(t));for(var o=i.length,s=new Array(o),u=new Array(o),c=new Array(o),l=0;l<o;++l){var f=r[l],h=i[l],p=h.length,d=a(t.call(f,f&&f.__data__,l,r)),v=d.length,g=u[l]=new Array(v),w=s[l]=new Array(v),S=c[l]=new Array(p);n(f,h,g,w,S,d,e);for(var _,A,M=0,T=0;M<v;++M)if(_=g[M]){for(M>=T&&(T=M+1);!(A=w[T])&&++T<v;);_._next=A||null}}return(s=new vt(s,r))._enter=u,s._exit=c,s},enter:function(){return new vt(this._enter||this._groups.map(v),this._parents)},exit:function(){return new vt(this._exit||this._groups.map(v),this._parents)},join:function(t,e,n){var r=this.enter(),i=this,o=this.exit();return r="function"==typeof t?t(r):r.append(t+""),null!=e&&(i=e(i)),null==n?o.remove():n(o),r&&i?r.merge(i).order():i},merge:function(t){if(!(t instanceof vt))throw new Error("invalid merge");for(var e=this._groups,n=t._groups,r=e.length,i=n.length,o=Math.min(r,i),a=new Array(r),s=0;s<o;++s)for(var u,c=e[s],l=n[s],f=c.length,h=a[s]=new Array(f),p=0;p<f;++p)(u=c[p]||l[p])&&(h[p]=u);for(;s<r;++s)a[s]=e[s];return new vt(a,this._parents)},selection:function(){return this},order:function(){for(var t=this._groups,e=-1,n=t.length;++e<n;)for(var r,i=t[e],o=i.length-1,a=i[o];--o>=0;)(r=i[o])&&(a&&4^r.compareDocumentPosition(a)&&a.parentNode.insertBefore(r,a),a=r);return this},sort:function(t){function e(e,n){return e&&n?t(e.__data__,n.__data__):!e-!n}t||(t=w);for(var n=this._groups,r=n.length,i=new Array(r),o=0;o<r;++o){for(var a,s=n[o],u=s.length,c=i[o]=new Array(u),l=0;l<u;++l)(a=s[l])&&(c[l]=a);c.sort(e)}return new vt(i,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){return Array.from(this)},node:function(){for(var t=this._groups,e=0,n=t.length;e<n;++e)for(var r=t[e],i=0,o=r.length;i<o;++i){var a=r[i];if(a)return a}return null},size:function(){let t=0;for(const e of this)++t;return t},empty:function(){return!this.node()},each:function(t){for(var e=this._groups,n=0,r=e.length;n<r;++n)for(var i,o=e[n],a=0,s=o.length;a<s;++a)(i=o[a])&&t.call(i,i.__data__,a,o);return this},attr:function(t,e){var n=A(t);if(arguments.length<2){var r=this.node();return n.local?r.getAttributeNS(n.space,n.local):r.getAttribute(n)}return this.each((null==e?n.local?T:M:"function"==typeof e?n.local?P:O:n.local?k:E)(n,e))},style:function(t,e,n){return arguments.length>1?this.each((null==e?R:"function"==typeof e?j:I)(t,e,null==n?"":n)):N(this.node(),t)},property:function(t,e){return arguments.length>1?this.each((null==e?L:"function"==typeof e?D:z)(t,e)):this.node()[t]},classed:function(t,e){var n=F(t+"");if(arguments.length<2){for(var r=U(this.node()),i=-1,o=n.length;++i<o;)if(!r.contains(n[i]))return!1;return!0}return this.each(("function"==typeof e?Y:e?W:H)(n,e))},text:function(t){return arguments.length?this.each(null==t?G:("function"==typeof t?$:X)(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?Z:("function"==typeof t?J:K)(t)):this.node().innerHTML},raise:function(){return this.each(Q)},lower:function(){return this.each(tt)},append:function(t){var e="function"==typeof t?t:rt(t);return this.select((function(){return this.appendChild(e.apply(this,arguments))}))},insert:function(t,e){var n="function"==typeof t?t:rt(t),r=null==e?it:"function"==typeof e?e:o(e);return this.select((function(){return this.insertBefore(n.apply(this,arguments),r.apply(this,arguments)||null)}))},remove:function(){return this.each(ot)},clone:function(t){return this.select(t?st:at)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,e,n){var r,i,o=ut(t+""),a=o.length;if(!(arguments.length<2)){for(s=e?lt:ct,r=0;r<a;++r)this.each(s(o[r],e,n));return this}var s=this.node().__on;if(s)for(var u,c=0,l=s.length;c<l;++c)for(r=0,u=s[c];r<a;++r)if((i=o[r]).type===u.type&&i.name===u.name)return u.value},dispatch:function(t,e){return this.each(("function"==typeof e?pt:ht)(t,e))},[Symbol.iterator]:function*(){for(var t=this._groups,e=0,n=t.length;e<n;++e)for(var r,i=t[e],o=0,a=i.length;o<a;++o)(r=i[o])&&(yield r)}};const yt=gt;var mt={value:()=>{}};function bt(){for(var t,e=0,n=arguments.length,r={};e<n;++e){if(!(t=arguments[e]+"")||t in r||/[\s.]/.test(t))throw new Error("illegal type: "+t);r[t]=[]}return new xt(r)}function xt(t){this._=t}function wt(t,e){return t.trim().split(/^|\s+/).map((function(t){var n="",r=t.indexOf(".");if(r>=0&&(n=t.slice(r+1),t=t.slice(0,r)),t&&!e.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:n}}))}function St(t,e){for(var n,r=0,i=t.length;r<i;++r)if((n=t[r]).name===e)return n.value}function _t(t,e,n){for(var r=0,i=t.length;r<i;++r)if(t[r].name===e){t[r]=mt,t=t.slice(0,r).concat(t.slice(r+1));break}return null!=n&&t.push({name:e,value:n}),t}xt.prototype=bt.prototype={constructor:xt,on:function(t,e){var n,r=this._,i=wt(t+"",r),o=-1,a=i.length;if(!(arguments.length<2)){if(null!=e&&"function"!=typeof e)throw new Error("invalid callback: "+e);for(;++o<a;)if(n=(t=i[o]).type)r[n]=_t(r[n],t.name,e);else if(null==e)for(n in r)r[n]=_t(r[n],t.name,null);return this}for(;++o<a;)if((n=(t=i[o]).type)&&(n=St(r[n],t.name)))return n},copy:function(){var t={},e=this._;for(var n in e)t[n]=e[n].slice();return new xt(t)},call:function(t,e){if((n=arguments.length-2)>0)for(var n,r,i=new Array(n),o=0;o<n;++o)i[o]=arguments[o+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(o=0,n=(r=this._[t]).length;o<n;++o)r[o].value.apply(e,i)},apply:function(t,e,n){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var r=this._[t],i=0,o=r.length;i<o;++i)r[i].value.apply(e,n)}};const At=bt;var Mt,Tt,Et=0,kt=0,Ot=0,Pt=0,Ct=0,Rt=0,It="object"==typeof performance&&performance.now?performance:Date,jt="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function Nt(){return Ct||(jt(Lt),Ct=It.now()+Rt)}function Lt(){Ct=0}function zt(){this._call=this._time=this._next=null}function Dt(t,e,n){var r=new zt;return r.restart(t,e,n),r}function Ft(){Ct=(Pt=It.now())+Rt,Et=kt=0;try{!function(){Nt(),++Et;for(var t,e=Mt;e;)(t=Ct-e._time)>=0&&e._call.call(null,t),e=e._next;--Et}()}finally{Et=0,function(){for(var t,e,n=Mt,r=1/0;n;)n._call?(r>n._time&&(r=n._time),t=n,n=n._next):(e=n._next,n._next=null,n=t?t._next=e:Mt=e);Tt=t,Bt(r)}(),Ct=0}}function Ut(){var t=It.now(),e=t-Pt;e>1e3&&(Rt-=e,Pt=t)}function Bt(t){Et||(kt&&(kt=clearTimeout(kt)),t-Ct>24?(t<1/0&&(kt=setTimeout(Ft,t-It.now()-Rt)),Ot&&(Ot=clearInterval(Ot))):(Ot||(Pt=It.now(),Ot=setInterval(Ut,1e3)),Et=1,jt(Ft)))}function qt(t,e,n){var r=new zt;return e=null==e?0:+e,r.restart((n=>{r.stop(),t(n+e)}),e,n),r}zt.prototype=Dt.prototype={constructor:zt,restart:function(t,e,n){if("function"!=typeof t)throw new TypeError("callback is not a function");n=(null==n?Nt():+n)+(null==e?0:+e),this._next||Tt===this||(Tt?Tt._next=this:Mt=this,Tt=this),this._call=t,this._time=n,Bt()},stop:function(){this._call&&(this._call=null,this._time=1/0,Bt())}};var Vt=At("start","end","cancel","interrupt"),Wt=[];function Ht(t,e,n,r,i,o){var a=t.__transition;if(a){if(n in a)return}else t.__transition={};!function(t,e,n){var r,i=t.__transition;function o(u){var c,l,f,h;if(1!==n.state)return s();for(c in i)if((h=i[c]).name===n.name){if(3===h.state)return qt(o);4===h.state?(h.state=6,h.timer.stop(),h.on.call("interrupt",t,t.__data__,h.index,h.group),delete i[c]):+c<e&&(h.state=6,h.timer.stop(),h.on.call("cancel",t,t.__data__,h.index,h.group),delete i[c])}if(qt((function(){3===n.state&&(n.state=4,n.timer.restart(a,n.delay,n.time),a(u))})),n.state=2,n.on.call("start",t,t.__data__,n.index,n.group),2===n.state){for(n.state=3,r=new Array(f=n.tween.length),c=0,l=-1;c<f;++c)(h=n.tween[c].value.call(t,t.__data__,n.index,n.group))&&(r[++l]=h);r.length=l+1}}function a(e){for(var i=e<n.duration?n.ease.call(null,e/n.duration):(n.timer.restart(s),n.state=5,1),o=-1,a=r.length;++o<a;)r[o].call(t,i);5===n.state&&(n.on.call("end",t,t.__data__,n.index,n.group),s())}function s(){for(var r in n.state=6,n.timer.stop(),delete i[e],i)return;delete t.__transition}i[e]=n,n.timer=Dt((function(t){n.state=1,n.timer.restart(o,n.delay,n.time),n.delay<=t&&o(t-n.delay)}),0,n.time)}(t,n,{name:e,index:r,group:i,on:Vt,tween:Wt,time:o.time,delay:o.delay,duration:o.duration,ease:o.ease,timer:null,state:0})}function Yt(t,e){var n=Xt(t,e);if(n.state>0)throw new Error("too late; already scheduled");return n}function Gt(t,e){var n=Xt(t,e);if(n.state>3)throw new Error("too late; already running");return n}function Xt(t,e){var n=t.__transition;if(!n||!(n=n[e]))throw new Error("transition not found");return n}function $t(t,e){var n,r,i,o=t.__transition,a=!0;if(o){for(i in e=null==e?null:e+"",o)(n=o[i]).name===e?(r=n.state>2&&n.state<5,n.state=6,n.timer.stop(),n.on.call(r?"interrupt":"cancel",t,t.__data__,n.index,n.group),delete o[i]):a=!1;a&&delete t.__transition}}function Zt(t,e){return t=+t,e=+e,function(n){return t*(1-n)+e*n}}var Kt,Jt=180/Math.PI,Qt={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1};function te(t,e,n,r,i,o){var a,s,u;return(a=Math.sqrt(t*t+e*e))&&(t/=a,e/=a),(u=t*n+e*r)&&(n-=t*u,r-=e*u),(s=Math.sqrt(n*n+r*r))&&(n/=s,r/=s,u/=s),t*r<e*n&&(t=-t,e=-e,u=-u,a=-a),{translateX:i,translateY:o,rotate:Math.atan2(e,t)*Jt,skewX:Math.atan(u)*Jt,scaleX:a,scaleY:s}}function ee(t,e,n,r){function i(t){return t.length?t.pop()+" ":""}return function(o,a){var s=[],u=[];return o=t(o),a=t(a),function(t,r,i,o,a,s){if(t!==i||r!==o){var u=a.push("translate(",null,e,null,n);s.push({i:u-4,x:Zt(t,i)},{i:u-2,x:Zt(r,o)})}else(i||o)&&a.push("translate("+i+e+o+n)}(o.translateX,o.translateY,a.translateX,a.translateY,s,u),function(t,e,n,o){t!==e?(t-e>180?e+=360:e-t>180&&(t+=360),o.push({i:n.push(i(n)+"rotate(",null,r)-2,x:Zt(t,e)})):e&&n.push(i(n)+"rotate("+e+r)}(o.rotate,a.rotate,s,u),function(t,e,n,o){t!==e?o.push({i:n.push(i(n)+"skewX(",null,r)-2,x:Zt(t,e)}):e&&n.push(i(n)+"skewX("+e+r)}(o.skewX,a.skewX,s,u),function(t,e,n,r,o,a){if(t!==n||e!==r){var s=o.push(i(o)+"scale(",null,",",null,")");a.push({i:s-4,x:Zt(t,n)},{i:s-2,x:Zt(e,r)})}else 1===n&&1===r||o.push(i(o)+"scale("+n+","+r+")")}(o.scaleX,o.scaleY,a.scaleX,a.scaleY,s,u),o=a=null,function(t){for(var e,n=-1,r=u.length;++n<r;)s[(e=u[n]).i]=e.x(t);return s.join("")}}}var ne=ee((function(t){const e=new("function"==typeof DOMMatrix?DOMMatrix:WebKitCSSMatrix)(t+"");return e.isIdentity?Qt:te(e.a,e.b,e.c,e.d,e.e,e.f)}),"px, ","px)","deg)"),re=ee((function(t){return null==t?Qt:(Kt||(Kt=document.createElementNS("http://www.w3.org/2000/svg","g")),Kt.setAttribute("transform",t),(t=Kt.transform.baseVal.consolidate())?te((t=t.matrix).a,t.b,t.c,t.d,t.e,t.f):Qt)}),", ",")",")");function ie(t,e){var n,r;return function(){var i=Gt(this,t),o=i.tween;if(o!==n)for(var a=0,s=(r=n=o).length;a<s;++a)if(r[a].name===e){(r=r.slice()).splice(a,1);break}i.tween=r}}function oe(t,e,n){var r,i;if("function"!=typeof n)throw new Error;return function(){var o=Gt(this,t),a=o.tween;if(a!==r){i=(r=a).slice();for(var s={name:e,value:n},u=0,c=i.length;u<c;++u)if(i[u].name===e){i[u]=s;break}u===c&&i.push(s)}o.tween=i}}function ae(t,e,n){var r=t._id;return t.each((function(){var t=Gt(this,r);(t.value||(t.value={}))[e]=n.apply(this,arguments)})),function(t){return Xt(t,r).value[e]}}function se(t,e,n){t.prototype=e.prototype=n,n.constructor=t}function ue(t,e){var n=Object.create(t.prototype);for(var r in e)n[r]=e[r];return n}function ce(){}var le=.7,fe=1/le,he="\\s*([+-]?\\d+)\\s*",pe="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",de="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",ve=/^#([0-9a-f]{3,8})$/,ge=new RegExp("^rgb\\("+[he,he,he]+"\\)$"),ye=new RegExp("^rgb\\("+[de,de,de]+"\\)$"),me=new RegExp("^rgba\\("+[he,he,he,pe]+"\\)$"),be=new RegExp("^rgba\\("+[de,de,de,pe]+"\\)$"),xe=new RegExp("^hsl\\("+[pe,de,de]+"\\)$"),we=new RegExp("^hsla\\("+[pe,de,de,pe]+"\\)$"),Se={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function _e(){return this.rgb().formatHex()}function Ae(){return this.rgb().formatRgb()}function Me(t){var e,n;return t=(t+"").trim().toLowerCase(),(e=ve.exec(t))?(n=e[1].length,e=parseInt(e[1],16),6===n?Te(e):3===n?new Pe(e>>8&15|e>>4&240,e>>4&15|240&e,(15&e)<<4|15&e,1):8===n?Ee(e>>24&255,e>>16&255,e>>8&255,(255&e)/255):4===n?Ee(e>>12&15|e>>8&240,e>>8&15|e>>4&240,e>>4&15|240&e,((15&e)<<4|15&e)/255):null):(e=ge.exec(t))?new Pe(e[1],e[2],e[3],1):(e=ye.exec(t))?new Pe(255*e[1]/100,255*e[2]/100,255*e[3]/100,1):(e=me.exec(t))?Ee(e[1],e[2],e[3],e[4]):(e=be.exec(t))?Ee(255*e[1]/100,255*e[2]/100,255*e[3]/100,e[4]):(e=xe.exec(t))?je(e[1],e[2]/100,e[3]/100,1):(e=we.exec(t))?je(e[1],e[2]/100,e[3]/100,e[4]):Se.hasOwnProperty(t)?Te(Se[t]):"transparent"===t?new Pe(NaN,NaN,NaN,0):null}function Te(t){return new Pe(t>>16&255,t>>8&255,255&t,1)}function Ee(t,e,n,r){return r<=0&&(t=e=n=NaN),new Pe(t,e,n,r)}function ke(t){return t instanceof ce||(t=Me(t)),t?new Pe((t=t.rgb()).r,t.g,t.b,t.opacity):new Pe}function Oe(t,e,n,r){return 1===arguments.length?ke(t):new Pe(t,e,n,null==r?1:r)}function Pe(t,e,n,r){this.r=+t,this.g=+e,this.b=+n,this.opacity=+r}function Ce(){return"#"+Ie(this.r)+Ie(this.g)+Ie(this.b)}function Re(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}function Ie(t){return((t=Math.max(0,Math.min(255,Math.round(t)||0)))<16?"0":"")+t.toString(16)}function je(t,e,n,r){return r<=0?t=e=n=NaN:n<=0||n>=1?t=e=NaN:e<=0&&(t=NaN),new ze(t,e,n,r)}function Ne(t){if(t instanceof ze)return new ze(t.h,t.s,t.l,t.opacity);if(t instanceof ce||(t=Me(t)),!t)return new ze;if(t instanceof ze)return t;var e=(t=t.rgb()).r/255,n=t.g/255,r=t.b/255,i=Math.min(e,n,r),o=Math.max(e,n,r),a=NaN,s=o-i,u=(o+i)/2;return s?(a=e===o?(n-r)/s+6*(n<r):n===o?(r-e)/s+2:(e-n)/s+4,s/=u<.5?o+i:2-o-i,a*=60):s=u>0&&u<1?0:a,new ze(a,s,u,t.opacity)}function Le(t,e,n,r){return 1===arguments.length?Ne(t):new ze(t,e,n,null==r?1:r)}function ze(t,e,n,r){this.h=+t,this.s=+e,this.l=+n,this.opacity=+r}function De(t,e,n){return 255*(t<60?e+(n-e)*t/60:t<180?n:t<240?e+(n-e)*(240-t)/60:e)}function Fe(t,e,n,r,i){var o=t*t,a=o*t;return((1-3*t+3*o-a)*e+(4-6*o+3*a)*n+(1+3*t+3*o-3*a)*r+a*i)/6}se(ce,Me,{copy:function(t){return Object.assign(new this.constructor,this,t)},displayable:function(){return this.rgb().displayable()},hex:_e,formatHex:_e,formatHsl:function(){return Ne(this).formatHsl()},formatRgb:Ae,toString:Ae}),se(Pe,Oe,ue(ce,{brighter:function(t){return t=null==t?fe:Math.pow(fe,t),new Pe(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?le:Math.pow(le,t),new Pe(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return-.5<=this.r&&this.r<255.5&&-.5<=this.g&&this.g<255.5&&-.5<=this.b&&this.b<255.5&&0<=this.opacity&&this.opacity<=1},hex:Ce,formatHex:Ce,formatRgb:Re,toString:Re})),se(ze,Le,ue(ce,{brighter:function(t){return t=null==t?fe:Math.pow(fe,t),new ze(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?le:Math.pow(le,t),new ze(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),e=isNaN(t)||isNaN(this.s)?0:this.s,n=this.l,r=n+(n<.5?n:1-n)*e,i=2*n-r;return new Pe(De(t>=240?t-240:t+120,i,r),De(t,i,r),De(t<120?t+240:t-120,i,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1},formatHsl:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"hsl(":"hsla(")+(this.h||0)+", "+100*(this.s||0)+"%, "+100*(this.l||0)+"%"+(1===t?")":", "+t+")")}}));const Ue=t=>()=>t;function Be(t,e){var n=e-t;return n?function(t,e){return function(n){return t+n*e}}(t,n):Ue(isNaN(t)?e:t)}const qe=function t(e){var n=function(t){return 1==(t=+t)?Be:function(e,n){return n-e?function(t,e,n){return t=Math.pow(t,n),e=Math.pow(e,n)-t,n=1/n,function(r){return Math.pow(t+r*e,n)}}(e,n,t):Ue(isNaN(e)?n:e)}}(e);function r(t,e){var r=n((t=Oe(t)).r,(e=Oe(e)).r),i=n(t.g,e.g),o=n(t.b,e.b),a=Be(t.opacity,e.opacity);return function(e){return t.r=r(e),t.g=i(e),t.b=o(e),t.opacity=a(e),t+""}}return r.gamma=t,r}(1);function Ve(t){return function(e){var n,r,i=e.length,o=new Array(i),a=new Array(i),s=new Array(i);for(n=0;n<i;++n)r=Oe(e[n]),o[n]=r.r||0,a[n]=r.g||0,s[n]=r.b||0;return o=t(o),a=t(a),s=t(s),r.opacity=1,function(t){return r.r=o(t),r.g=a(t),r.b=s(t),r+""}}}Ve((function(t){var e=t.length-1;return function(n){var r=n<=0?n=0:n>=1?(n=1,e-1):Math.floor(n*e),i=t[r],o=t[r+1],a=r>0?t[r-1]:2*i-o,s=r<e-1?t[r+2]:2*o-i;return Fe((n-r/e)*e,a,i,o,s)}})),Ve((function(t){var e=t.length;return function(n){var r=Math.floor(((n%=1)<0?++n:n)*e),i=t[(r+e-1)%e],o=t[r%e],a=t[(r+1)%e],s=t[(r+2)%e];return Fe((n-r/e)*e,i,o,a,s)}}));var We=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,He=new RegExp(We.source,"g");function Ye(t,e){var n,r,i,o=We.lastIndex=He.lastIndex=0,a=-1,s=[],u=[];for(t+="",e+="";(n=We.exec(t))&&(r=He.exec(e));)(i=r.index)>o&&(i=e.slice(o,i),s[a]?s[a]+=i:s[++a]=i),(n=n[0])===(r=r[0])?s[a]?s[a]+=r:s[++a]=r:(s[++a]=null,u.push({i:a,x:Zt(n,r)})),o=He.lastIndex;return o<e.length&&(i=e.slice(o),s[a]?s[a]+=i:s[++a]=i),s.length<2?u[0]?function(t){return function(e){return t(e)+""}}(u[0].x):function(t){return function(){return t}}(e):(e=u.length,function(t){for(var n,r=0;r<e;++r)s[(n=u[r]).i]=n.x(t);return s.join("")})}function Ge(t,e){var n;return("number"==typeof e?Zt:e instanceof Me?qe:(n=Me(e))?(e=n,qe):Ye)(t,e)}function Xe(t){return function(){this.removeAttribute(t)}}function $e(t){return function(){this.removeAttributeNS(t.space,t.local)}}function Ze(t,e,n){var r,i,o=n+"";return function(){var a=this.getAttribute(t);return a===o?null:a===r?i:i=e(r=a,n)}}function Ke(t,e,n){var r,i,o=n+"";return function(){var a=this.getAttributeNS(t.space,t.local);return a===o?null:a===r?i:i=e(r=a,n)}}function Je(t,e,n){var r,i,o;return function(){var a,s,u=n(this);if(null!=u)return(a=this.getAttribute(t))===(s=u+"")?null:a===r&&s===i?o:(i=s,o=e(r=a,u));this.removeAttribute(t)}}function Qe(t,e,n){var r,i,o;return function(){var a,s,u=n(this);if(null!=u)return(a=this.getAttributeNS(t.space,t.local))===(s=u+"")?null:a===r&&s===i?o:(i=s,o=e(r=a,u));this.removeAttributeNS(t.space,t.local)}}function tn(t,e){return function(n){this.setAttribute(t,e.call(this,n))}}function en(t,e){return function(n){this.setAttributeNS(t.space,t.local,e.call(this,n))}}function nn(t,e){var n,r;function i(){var i=e.apply(this,arguments);return i!==r&&(n=(r=i)&&en(t,i)),n}return i._value=e,i}function rn(t,e){var n,r;function i(){var i=e.apply(this,arguments);return i!==r&&(n=(r=i)&&tn(t,i)),n}return i._value=e,i}function on(t,e){return function(){Yt(this,t).delay=+e.apply(this,arguments)}}function an(t,e){return e=+e,function(){Yt(this,t).delay=e}}function sn(t,e){return function(){Gt(this,t).duration=+e.apply(this,arguments)}}function un(t,e){return e=+e,function(){Gt(this,t).duration=e}}function cn(t,e){if("function"!=typeof e)throw new Error;return function(){Gt(this,t).ease=e}}function ln(t,e,n){var r,i,o=function(t){return(t+"").trim().split(/^|\s+/).every((function(t){var e=t.indexOf(".");return e>=0&&(t=t.slice(0,e)),!t||"start"===t}))}(e)?Yt:Gt;return function(){var a=o(this,t),s=a.on;s!==r&&(i=(r=s).copy()).on(e,n),a.on=i}}var fn=yt.prototype.constructor;function hn(t){return function(){this.style.removeProperty(t)}}function pn(t,e,n){return function(r){this.style.setProperty(t,e.call(this,r),n)}}function dn(t,e,n){var r,i;function o(){var o=e.apply(this,arguments);return o!==i&&(r=(i=o)&&pn(t,o,n)),r}return o._value=e,o}function vn(t){return function(e){this.textContent=t.call(this,e)}}function gn(t){var e,n;function r(){var r=t.apply(this,arguments);return r!==n&&(e=(n=r)&&vn(r)),e}return r._value=t,r}var yn=0;function mn(t,e,n,r){this._groups=t,this._parents=e,this._name=n,this._id=r}function bn(){return++yn}var xn=yt.prototype;mn.prototype=function(t){return yt().transition(t)}.prototype={constructor:mn,select:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=o(t));for(var r=this._groups,i=r.length,a=new Array(i),s=0;s<i;++s)for(var u,c,l=r[s],f=l.length,h=a[s]=new Array(f),p=0;p<f;++p)(u=l[p])&&(c=t.call(u,u.__data__,p,l))&&("__data__"in u&&(c.__data__=u.__data__),h[p]=c,Ht(h[p],e,n,p,h,Xt(u,n)));return new mn(a,this._parents,e,n)},selectAll:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=u(t));for(var r=this._groups,i=r.length,o=[],a=[],s=0;s<i;++s)for(var c,l=r[s],f=l.length,h=0;h<f;++h)if(c=l[h]){for(var p,d=t.call(c,c.__data__,h,l),v=Xt(c,n),g=0,y=d.length;g<y;++g)(p=d[g])&&Ht(p,e,n,g,d,v);o.push(d),a.push(c)}return new mn(o,a,e,n)},filter:function(t){"function"!=typeof t&&(t=c(t));for(var e=this._groups,n=e.length,r=new Array(n),i=0;i<n;++i)for(var o,a=e[i],s=a.length,u=r[i]=[],l=0;l<s;++l)(o=a[l])&&t.call(o,o.__data__,l,a)&&u.push(o);return new mn(r,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var e=this._groups,n=t._groups,r=e.length,i=n.length,o=Math.min(r,i),a=new Array(r),s=0;s<o;++s)for(var u,c=e[s],l=n[s],f=c.length,h=a[s]=new Array(f),p=0;p<f;++p)(u=c[p]||l[p])&&(h[p]=u);for(;s<r;++s)a[s]=e[s];return new mn(a,this._parents,this._name,this._id)},selection:function(){return new fn(this._groups,this._parents)},transition:function(){for(var t=this._name,e=this._id,n=bn(),r=this._groups,i=r.length,o=0;o<i;++o)for(var a,s=r[o],u=s.length,c=0;c<u;++c)if(a=s[c]){var l=Xt(a,e);Ht(a,t,n,c,s,{time:l.time+l.delay+l.duration,delay:0,duration:l.duration,ease:l.ease})}return new mn(r,this._parents,t,n)},call:xn.call,nodes:xn.nodes,node:xn.node,size:xn.size,empty:xn.empty,each:xn.each,on:function(t,e){var n=this._id;return arguments.length<2?Xt(this.node(),n).on.on(t):this.each(ln(n,t,e))},attr:function(t,e){var n=A(t),r="transform"===n?re:Ge;return this.attrTween(t,"function"==typeof e?(n.local?Qe:Je)(n,r,ae(this,"attr."+t,e)):null==e?(n.local?$e:Xe)(n):(n.local?Ke:Ze)(n,r,e))},attrTween:function(t,e){var n="attr."+t;if(arguments.length<2)return(n=this.tween(n))&&n._value;if(null==e)return this.tween(n,null);if("function"!=typeof e)throw new Error;var r=A(t);return this.tween(n,(r.local?nn:rn)(r,e))},style:function(t,e,n){var r="transform"==(t+="")?ne:Ge;return null==e?this.styleTween(t,function(t,e){var n,r,i;return function(){var o=N(this,t),a=(this.style.removeProperty(t),N(this,t));return o===a?null:o===n&&a===r?i:i=e(n=o,r=a)}}(t,r)).on("end.style."+t,hn(t)):"function"==typeof e?this.styleTween(t,function(t,e,n){var r,i,o;return function(){var a=N(this,t),s=n(this),u=s+"";return null==s&&(this.style.removeProperty(t),u=s=N(this,t)),a===u?null:a===r&&u===i?o:(i=u,o=e(r=a,s))}}(t,r,ae(this,"style."+t,e))).each(function(t,e){var n,r,i,o,a="style."+e,s="end."+a;return function(){var u=Gt(this,t),c=u.on,l=null==u.value[a]?o||(o=hn(e)):void 0;c===n&&i===l||(r=(n=c).copy()).on(s,i=l),u.on=r}}(this._id,t)):this.styleTween(t,function(t,e,n){var r,i,o=n+"";return function(){var a=N(this,t);return a===o?null:a===r?i:i=e(r=a,n)}}(t,r,e),n).on("end.style."+t,null)},styleTween:function(t,e,n){var r="style."+(t+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==e)return this.tween(r,null);if("function"!=typeof e)throw new Error;return this.tween(r,dn(t,e,null==n?"":n))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var e=t(this);this.textContent=null==e?"":e}}(ae(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},textTween:function(t){var e="text";if(arguments.length<1)return(e=this.tween(e))&&e._value;if(null==t)return this.tween(e,null);if("function"!=typeof t)throw new Error;return this.tween(e,gn(t))},remove:function(){return this.on("end.remove",function(t){return function(){var e=this.parentNode;for(var n in this.__transition)if(+n!==t)return;e&&e.removeChild(this)}}(this._id))},tween:function(t,e){var n=this._id;if(t+="",arguments.length<2){for(var r,i=Xt(this.node(),n).tween,o=0,a=i.length;o<a;++o)if((r=i[o]).name===t)return r.value;return null}return this.each((null==e?ie:oe)(n,t,e))},delay:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?on:an)(e,t)):Xt(this.node(),e).delay},duration:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?sn:un)(e,t)):Xt(this.node(),e).duration},ease:function(t){var e=this._id;return arguments.length?this.each(cn(e,t)):Xt(this.node(),e).ease},easeVarying:function(t){if("function"!=typeof t)throw new Error;return this.each(function(t,e){return function(){var n=e.apply(this,arguments);if("function"!=typeof n)throw new Error;Gt(this,t).ease=n}}(this._id,t))},end:function(){var t,e,n=this,r=n._id,i=n.size();return new Promise((function(o,a){var s={value:a},u={value:function(){0==--i&&o()}};n.each((function(){var n=Gt(this,r),i=n.on;i!==t&&((e=(t=i).copy())._.cancel.push(s),e._.interrupt.push(s),e._.end.push(u)),n.on=e})),0===i&&o()}))},[Symbol.iterator]:xn[Symbol.iterator]};var wn={time:null,delay:0,duration:250,ease:function(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}};function Sn(t,e){for(var n;!(n=t.__transition)||!(n=n[e]);)if(!(t=t.parentNode))throw new Error(`transition ${e} not found`);return n}yt.prototype.interrupt=function(t){return this.each((function(){$t(this,t)}))},yt.prototype.transition=function(t){var e,n;t instanceof mn?(e=t._id,t=t._name):(e=bn(),(n=wn).time=Nt(),t=null==t?null:t+"");for(var r=this._groups,i=r.length,o=0;o<i;++o)for(var a,s=r[o],u=s.length,c=0;c<u;++c)(a=s[c])&&Ht(a,t,e,c,s,n||Sn(a,e));return new mn(r,this._parents,t,e)};const{abs:_n,max:An,min:Mn}=Math;function Tn(t){return{type:t}}["w","e"].map(Tn),["n","s"].map(Tn),["n","w","e","s","nw","ne","sw","se"].map(Tn);const En=Math.PI/180,kn=180/Math.PI,On=.96422,Pn=.82521,Cn=4/29,Rn=6/29,In=3*Rn*Rn;function jn(t){if(t instanceof Ln)return new Ln(t.l,t.a,t.b,t.opacity);if(t instanceof qn)return Vn(t);t instanceof Pe||(t=ke(t));var e,n,r=Un(t.r),i=Un(t.g),o=Un(t.b),a=zn((.2225045*r+.7168786*i+.0606169*o)/1);return r===i&&i===o?e=n=a:(e=zn((.4360747*r+.3850649*i+.1430804*o)/On),n=zn((.0139322*r+.0971045*i+.7141733*o)/Pn)),new Ln(116*a-16,500*(e-a),200*(a-n),t.opacity)}function Nn(t,e,n,r){return 1===arguments.length?jn(t):new Ln(t,e,n,null==r?1:r)}function Ln(t,e,n,r){this.l=+t,this.a=+e,this.b=+n,this.opacity=+r}function zn(t){return t>.008856451679035631?Math.pow(t,1/3):t/In+Cn}function Dn(t){return t>Rn?t*t*t:In*(t-Cn)}function Fn(t){return 255*(t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055)}function Un(t){return(t/=255)<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4)}function Bn(t){if(t instanceof qn)return new qn(t.h,t.c,t.l,t.opacity);if(t instanceof Ln||(t=jn(t)),0===t.a&&0===t.b)return new qn(NaN,0<t.l&&t.l<100?0:NaN,t.l,t.opacity);var e=Math.atan2(t.b,t.a)*kn;return new qn(e<0?e+360:e,Math.sqrt(t.a*t.a+t.b*t.b),t.l,t.opacity)}function qn(t,e,n,r){this.h=+t,this.c=+e,this.l=+n,this.opacity=+r}function Vn(t){if(isNaN(t.h))return new Ln(t.l,0,0,t.opacity);var e=t.h*En;return new Ln(t.l,Math.cos(e)*t.c,Math.sin(e)*t.c,t.opacity)}function Wn(t){var e=0,n=t.children,r=n&&n.length;if(r)for(;--r>=0;)e+=n[r].value;else e=1;t.value=e}function Hn(t,e){t instanceof Map?(t=[void 0,t],void 0===e&&(e=Gn)):void 0===e&&(e=Yn);for(var n,r,i,o,a,s=new Zn(t),u=[s];n=u.pop();)if((i=e(n.data))&&(a=(i=Array.from(i)).length))for(n.children=i,o=a-1;o>=0;--o)u.push(r=i[o]=new Zn(i[o])),r.parent=n,r.depth=n.depth+1;return s.eachBefore($n)}function Yn(t){return t.children}function Gn(t){return Array.isArray(t)?t[1]:null}function Xn(t){void 0!==t.data.value&&(t.value=t.data.value),t.data=t.data.data}function $n(t){var e=0;do{t.height=e}while((t=t.parent)&&t.height<++e)}function Zn(t){this.data=t,this.depth=this.height=0,this.parent=null}function Kn(t){t.x0=Math.round(t.x0),t.y0=Math.round(t.y0),t.x1=Math.round(t.x1),t.y1=Math.round(t.y1)}function Jn(t,e,n,r,i){for(var o,a=t.children,s=-1,u=a.length,c=t.value&&(r-e)/t.value;++s<u;)(o=a[s]).y0=n,o.y1=i,o.x0=e,o.x1=e+=o.value*c}function Qn(){var t=1,e=1,n=0,r=!1;function i(i){var o=i.height+1;return i.x0=i.y0=n,i.x1=t,i.y1=e/o,i.eachBefore(function(t,e){return function(r){r.children&&Jn(r,r.x0,t*(r.depth+1)/e,r.x1,t*(r.depth+2)/e);var i=r.x0,o=r.y0,a=r.x1-n,s=r.y1-n;a<i&&(i=a=(i+a)/2),s<o&&(o=s=(o+s)/2),r.x0=i,r.y0=o,r.x1=a,r.y1=s}}(e,o)),r&&i.eachBefore(Kn),i}return i.round=function(t){return arguments.length?(r=!!t,i):r},i.size=function(n){return arguments.length?(t=+n[0],e=+n[1],i):[t,e]},i.padding=function(t){return arguments.length?(n=+t,i):n},i}function tr(t,e){return t.parent===e.parent?1:2}function er(t){var e=t.children;return e?e[0]:t.t}function nr(t){var e=t.children;return e?e[e.length-1]:t.t}function rr(t,e,n){var r=n/(e.i-t.i);e.c-=r,e.s+=n,t.c+=r,e.z+=n,e.m+=n}function ir(t,e,n){return t.a.parent===e.parent?t.a:n}function or(t,e){this._=t,this.parent=null,this.children=null,this.A=null,this.a=this,this.z=0,this.m=0,this.c=0,this.s=0,this.t=null,this.i=e}function ar(){var t=tr,e=1,n=1,r=null;function i(i){var u=function(t){for(var e,n,r,i,o,a=new or(t,0),s=[a];e=s.pop();)if(r=e._.children)for(e.children=new Array(o=r.length),i=o-1;i>=0;--i)s.push(n=e.children[i]=new or(r[i],i)),n.parent=e;return(a.parent=new or(null,0)).children=[a],a}(i);if(u.eachAfter(o),u.parent.m=-u.z,u.eachBefore(a),r)i.eachBefore(s);else{var c=i,l=i,f=i;i.eachBefore((function(t){t.x<c.x&&(c=t),t.x>l.x&&(l=t),t.depth>f.depth&&(f=t)}));var h=c===l?1:t(c,l)/2,p=h-c.x,d=e/(l.x+h+p),v=n/(f.depth||1);i.eachBefore((function(t){t.x=(t.x+p)*d,t.y=t.depth*v}))}return i}function o(e){var n=e.children,r=e.parent.children,i=e.i?r[e.i-1]:null;if(n){!function(t){for(var e,n=0,r=0,i=t.children,o=i.length;--o>=0;)(e=i[o]).z+=n,e.m+=n,n+=e.s+(r+=e.c)}(e);var o=(n[0].z+n[n.length-1].z)/2;i?(e.z=i.z+t(e._,i._),e.m=e.z-o):e.z=o}else i&&(e.z=i.z+t(e._,i._));e.parent.A=function(e,n,r){if(n){for(var i,o=e,a=e,s=n,u=o.parent.children[0],c=o.m,l=a.m,f=s.m,h=u.m;s=nr(s),o=er(o),s&&o;)u=er(u),(a=nr(a)).a=e,(i=s.z+f-o.z-c+t(s._,o._))>0&&(rr(ir(s,e,r),e,i),c+=i,l+=i),f+=s.m,c+=o.m,h+=u.m,l+=a.m;s&&!nr(a)&&(a.t=s,a.m+=f-l),o&&!er(u)&&(u.t=o,u.m+=c-h,r=e)}return r}(e,i,e.parent.A||r[0])}function a(t){t._.x=t.z+t.parent.m,t.m+=t.parent.m}function s(t){t.x*=e,t.y=t.depth*n}return i.separation=function(e){return arguments.length?(t=e,i):t},i.size=function(t){return arguments.length?(r=!1,e=+t[0],n=+t[1],i):r?null:[e,n]},i.nodeSize=function(t){return arguments.length?(r=!0,e=+t[0],n=+t[1],i):r?[e,n]:null},i}function sr(t,e,n,r,i){for(var o,a=t.children,s=-1,u=a.length,c=t.value&&(i-n)/t.value;++s<u;)(o=a[s]).x0=e,o.x1=r,o.y0=n,o.y1=n+=o.value*c}se(Ln,Nn,ue(ce,{brighter:function(t){return new Ln(this.l+18*(null==t?1:t),this.a,this.b,this.opacity)},darker:function(t){return new Ln(this.l-18*(null==t?1:t),this.a,this.b,this.opacity)},rgb:function(){var t=(this.l+16)/116,e=isNaN(this.a)?t:t+this.a/500,n=isNaN(this.b)?t:t-this.b/200;return new Pe(Fn(3.1338561*(e=On*Dn(e))-1.6168667*(t=1*Dn(t))-.4906146*(n=Pn*Dn(n))),Fn(-.9787684*e+1.9161415*t+.033454*n),Fn(.0719453*e-.2289914*t+1.4052427*n),this.opacity)}})),se(qn,(function(t,e,n,r){return 1===arguments.length?Bn(t):new qn(t,e,n,null==r?1:r)}),ue(ce,{brighter:function(t){return new qn(this.h,this.c,this.l+18*(null==t?1:t),this.opacity)},darker:function(t){return new qn(this.h,this.c,this.l-18*(null==t?1:t),this.opacity)},rgb:function(){return Vn(this).rgb()}})),Zn.prototype=Hn.prototype={constructor:Zn,count:function(){return this.eachAfter(Wn)},each:function(t,e){let n=-1;for(const r of this)t.call(e,r,++n,this);return this},eachAfter:function(t,e){for(var n,r,i,o=this,a=[o],s=[],u=-1;o=a.pop();)if(s.push(o),n=o.children)for(r=0,i=n.length;r<i;++r)a.push(n[r]);for(;o=s.pop();)t.call(e,o,++u,this);return this},eachBefore:function(t,e){for(var n,r,i=this,o=[i],a=-1;i=o.pop();)if(t.call(e,i,++a,this),n=i.children)for(r=n.length-1;r>=0;--r)o.push(n[r]);return this},find:function(t,e){let n=-1;for(const r of this)if(t.call(e,r,++n,this))return r},sum:function(t){return this.eachAfter((function(e){for(var n=+t(e.data)||0,r=e.children,i=r&&r.length;--i>=0;)n+=r[i].value;e.value=n}))},sort:function(t){return this.eachBefore((function(e){e.children&&e.children.sort(t)}))},path:function(t){for(var e=this,n=function(t,e){if(t===e)return t;var n=t.ancestors(),r=e.ancestors(),i=null;for(t=n.pop(),e=r.pop();t===e;)i=t,t=n.pop(),e=r.pop();return i}(e,t),r=[e];e!==n;)e=e.parent,r.push(e);for(var i=r.length;t!==n;)r.splice(i,0,t),t=t.parent;return r},ancestors:function(){for(var t=this,e=[t];t=t.parent;)e.push(t);return e},descendants:function(){return Array.from(this)},leaves:function(){var t=[];return this.eachBefore((function(e){e.children||t.push(e)})),t},links:function(){var t=this,e=[];return t.each((function(n){n!==t&&e.push({source:n.parent,target:n})})),e},copy:function(){return Hn(this).eachBefore(Xn)},[Symbol.iterator]:function*(){var t,e,n,r,i=this,o=[i];do{for(t=o.reverse(),o=[];i=t.pop();)if(yield i,e=i.children)for(n=0,r=e.length;n<r;++n)o.push(e[n])}while(o.length)}},or.prototype=Object.create(Zn.prototype);const ur=function t(e){function n(t,n,r,i,o){!function(t,e,n,r,i,o){for(var a,s,u,c,l,f,h,p,d,v,g,y=[],m=e.children,b=0,x=0,w=m.length,S=e.value;b<w;){u=i-n,c=o-r;do{l=m[x++].value}while(!l&&x<w);for(f=h=l,g=l*l*(v=Math.max(c/u,u/c)/(S*t)),d=Math.max(h/g,g/f);x<w;++x){if(l+=s=m[x].value,s<f&&(f=s),s>h&&(h=s),g=l*l*v,(p=Math.max(h/g,g/f))>d){l-=s;break}d=p}y.push(a={value:l,dice:u<c,children:m.slice(b,x)}),a.dice?Jn(a,n,r,i,S?r+=c*l/S:o):sr(a,n,r,S?n+=u*l/S:i,o),S-=l,b=x}}(e,t,n,r,i,o)}return n.ratio=function(e){return t((e=+e)>1?e:1)},n}((1+Math.sqrt(5))/2);function cr(t){if("function"!=typeof t)throw new Error;return t}function lr(){return 0}function fr(t){return function(){return t}}function hr(){var t=ur,e=!1,n=1,r=1,i=[0],o=lr,a=lr,s=lr,u=lr,c=lr;function l(t){return t.x0=t.y0=0,t.x1=n,t.y1=r,t.eachBefore(f),i=[0],e&&t.eachBefore(Kn),t}function f(e){var n=i[e.depth],r=e.x0+n,l=e.y0+n,f=e.x1-n,h=e.y1-n;f<r&&(r=f=(r+f)/2),h<l&&(l=h=(l+h)/2),e.x0=r,e.y0=l,e.x1=f,e.y1=h,e.children&&(n=i[e.depth+1]=o(e)/2,r+=c(e)-n,l+=a(e)-n,(f-=s(e)-n)<r&&(r=f=(r+f)/2),(h-=u(e)-n)<l&&(l=h=(l+h)/2),t(e,r,l,f,h))}return l.round=function(t){return arguments.length?(e=!!t,l):e},l.size=function(t){return arguments.length?(n=+t[0],r=+t[1],l):[n,r]},l.tile=function(e){return arguments.length?(t=cr(e),l):t},l.padding=function(t){return arguments.length?l.paddingInner(t).paddingOuter(t):l.paddingInner()},l.paddingInner=function(t){return arguments.length?(o="function"==typeof t?t:fr(+t),l):o},l.paddingOuter=function(t){return arguments.length?l.paddingTop(t).paddingRight(t).paddingBottom(t).paddingLeft(t):l.paddingTop()},l.paddingTop=function(t){return arguments.length?(a="function"==typeof t?t:fr(+t),l):a},l.paddingRight=function(t){return arguments.length?(s="function"==typeof t?t:fr(+t),l):s},l.paddingBottom=function(t){return arguments.length?(u="function"==typeof t?t:fr(+t),l):u},l.paddingLeft=function(t){return arguments.length?(c="function"==typeof t?t:fr(+t),l):c},l}function pr(t,e){var n,r=e?e.length:0,i=t?Math.min(r,t.length):0,o=new Array(i),a=new Array(r);for(n=0;n<i;++n)o[n]=yr(t[n],e[n]);for(;n<r;++n)a[n]=e[n];return function(t){for(n=0;n<i;++n)a[n]=o[n](t);return a}}function dr(t,e){var n=new Date;return t=+t,e=+e,function(r){return n.setTime(t*(1-r)+e*r),n}}function vr(t,e){var n,r={},i={};for(n in null!==t&&"object"==typeof t||(t={}),null!==e&&"object"==typeof e||(e={}),e)n in t?r[n]=yr(t[n],e[n]):i[n]=e[n];return function(t){for(n in r)i[n]=r[n](t);return i}}function gr(t,e){e||(e=[]);var n,r=t?Math.min(e.length,t.length):0,i=e.slice();return function(o){for(n=0;n<r;++n)i[n]=t[n]*(1-o)+e[n]*o;return i}}function yr(t,e){var n,r,i=typeof e;return null==e||"boolean"===i?Ue(e):("number"===i?Zt:"string"===i?(n=Me(e))?(e=n,qe):Ye:e instanceof Me?qe:e instanceof Date?dr:(r=e,!ArrayBuffer.isView(r)||r instanceof DataView?Array.isArray(e)?pr:"function"!=typeof e.valueOf&&"function"!=typeof e.toString||isNaN(e)?vr:Zt:gr))(t,e)}function mr(t,e){var n=Be((t=Nn(t)).l,(e=Nn(e)).l),r=Be(t.a,e.a),i=Be(t.b,e.b),o=Be(t.opacity,e.opacity);return function(e){return t.l=n(e),t.a=r(e),t.b=i(e),t.opacity=o(e),t+""}}var br=Math.sqrt(50),xr=Math.sqrt(10),wr=Math.sqrt(2);function Sr(t,e,n){var r=(e-t)/Math.max(0,n),i=Math.floor(Math.log(r)/Math.LN10),o=r/Math.pow(10,i);return i>=0?(o>=br?10:o>=xr?5:o>=wr?2:1)*Math.pow(10,i):-Math.pow(10,-i)/(o>=br?10:o>=xr?5:o>=wr?2:1)}function _r(t,e){return t<e?-1:t>e?1:t>=e?0:NaN}function Ar(t){let e=t,n=t;function r(t,e,r,i){for(null==r&&(r=0),null==i&&(i=t.length);r<i;){const o=r+i>>>1;n(t[o],e)<0?r=o+1:i=o}return r}return 1===t.length&&(e=(e,n)=>t(e)-n,n=function(t){return(e,n)=>_r(t(e),n)}(t)),{left:r,center:function(t,n,i,o){null==i&&(i=0),null==o&&(o=t.length);const a=r(t,n,i,o-1);return a>i&&e(t[a-1],n)>-e(t[a],n)?a-1:a},right:function(t,e,r,i){for(null==r&&(r=0),null==i&&(i=t.length);r<i;){const o=r+i>>>1;n(t[o],e)>0?i=o:r=o+1}return r}}}const Mr=Ar(_r),Tr=Mr.right,Er=(Mr.left,Ar((function(t){return null===t?NaN:+t})).center,Tr);function kr(t,e){return t=+t,e=+e,function(n){return Math.round(t*(1-n)+e*n)}}function Or(t){return+t}var Pr=[0,1];function Cr(t){return t}function Rr(t,e){return(e-=t=+t)?function(n){return(n-t)/e}:(n=isNaN(e)?NaN:.5,function(){return n});var n}function Ir(t,e,n){var r=t[0],i=t[1],o=e[0],a=e[1];return i<r?(r=Rr(i,r),o=n(a,o)):(r=Rr(r,i),o=n(o,a)),function(t){return o(r(t))}}function jr(t,e,n){var r=Math.min(t.length,e.length)-1,i=new Array(r),o=new Array(r),a=-1;for(t[r]<t[0]&&(t=t.slice().reverse(),e=e.slice().reverse());++a<r;)i[a]=Rr(t[a],t[a+1]),o[a]=n(e[a],e[a+1]);return function(e){var n=Er(t,e,1,r)-1;return o[n](i[n](e))}}function Nr(t,e){return e.domain(t.domain()).range(t.range()).interpolate(t.interpolate()).clamp(t.clamp()).unknown(t.unknown())}function Lr(){return function(){var t,e,n,r,i,o,a=Pr,s=Pr,u=yr,c=Cr;function l(){var t,e,n,u=Math.min(a.length,s.length);return c!==Cr&&(t=a[0],e=a[u-1],t>e&&(n=t,t=e,e=n),c=function(n){return Math.max(t,Math.min(e,n))}),r=u>2?jr:Ir,i=o=null,f}function f(e){return isNaN(e=+e)?n:(i||(i=r(a.map(t),s,u)))(t(c(e)))}return f.invert=function(n){return c(e((o||(o=r(s,a.map(t),Zt)))(n)))},f.domain=function(t){return arguments.length?(a=Array.from(t,Or),l()):a.slice()},f.range=function(t){return arguments.length?(s=Array.from(t),l()):s.slice()},f.rangeRound=function(t){return s=Array.from(t),u=kr,l()},f.clamp=function(t){return arguments.length?(c=!!t||Cr,l()):c!==Cr},f.interpolate=function(t){return arguments.length?(u=t,l()):u},f.unknown=function(t){return arguments.length?(n=t,f):n},function(n,r){return t=n,e=r,l()}}()(Cr,Cr)}function zr(t,e){switch(arguments.length){case 0:break;case 1:this.range(t);break;default:this.range(e).domain(t)}return this}var Dr,Fr=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function Ur(t){if(!(e=Fr.exec(t)))throw new Error("invalid format: "+t);var e;return new Br({fill:e[1],align:e[2],sign:e[3],symbol:e[4],zero:e[5],width:e[6],comma:e[7],precision:e[8]&&e[8].slice(1),trim:e[9],type:e[10]})}function Br(t){this.fill=void 0===t.fill?" ":t.fill+"",this.align=void 0===t.align?">":t.align+"",this.sign=void 0===t.sign?"-":t.sign+"",this.symbol=void 0===t.symbol?"":t.symbol+"",this.zero=!!t.zero,this.width=void 0===t.width?void 0:+t.width,this.comma=!!t.comma,this.precision=void 0===t.precision?void 0:+t.precision,this.trim=!!t.trim,this.type=void 0===t.type?"":t.type+""}function qr(t,e){if((n=(t=e?t.toExponential(e-1):t.toExponential()).indexOf("e"))<0)return null;var n,r=t.slice(0,n);return[r.length>1?r[0]+r.slice(2):r,+t.slice(n+1)]}function Vr(t){return(t=qr(Math.abs(t)))?t[1]:NaN}function Wr(t,e){var n=qr(t,e);if(!n)return t+"";var r=n[0],i=n[1];return i<0?"0."+new Array(-i).join("0")+r:r.length>i+1?r.slice(0,i+1)+"."+r.slice(i+1):r+new Array(i-r.length+2).join("0")}Ur.prototype=Br.prototype,Br.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(void 0===this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(void 0===this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};const Hr={"%":(t,e)=>(100*t).toFixed(e),b:t=>Math.round(t).toString(2),c:t=>t+"",d:function(t){return Math.abs(t=Math.round(t))>=1e21?t.toLocaleString("en").replace(/,/g,""):t.toString(10)},e:(t,e)=>t.toExponential(e),f:(t,e)=>t.toFixed(e),g:(t,e)=>t.toPrecision(e),o:t=>Math.round(t).toString(8),p:(t,e)=>Wr(100*t,e),r:Wr,s:function(t,e){var n=qr(t,e);if(!n)return t+"";var r=n[0],i=n[1],o=i-(Dr=3*Math.max(-8,Math.min(8,Math.floor(i/3))))+1,a=r.length;return o===a?r:o>a?r+new Array(o-a+1).join("0"):o>0?r.slice(0,o)+"."+r.slice(o):"0."+new Array(1-o).join("0")+qr(t,Math.max(0,e+o-1))[0]},X:t=>Math.round(t).toString(16).toUpperCase(),x:t=>Math.round(t).toString(16)};function Yr(t){return t}var Gr,Xr,$r,Zr=Array.prototype.map,Kr=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];function Jr(t){var e=t.domain;return t.ticks=function(t){var n=e();return function(t,e,n){var r,i,o,a,s=-1;if(n=+n,(t=+t)==(e=+e)&&n>0)return[t];if((r=e<t)&&(i=t,t=e,e=i),0===(a=Sr(t,e,n))||!isFinite(a))return[];if(a>0)for(t=Math.ceil(t/a),e=Math.floor(e/a),o=new Array(i=Math.ceil(e-t+1));++s<i;)o[s]=(t+s)*a;else for(a=-a,t=Math.ceil(t*a),e=Math.floor(e*a),o=new Array(i=Math.ceil(e-t+1));++s<i;)o[s]=(t+s)/a;return r&&o.reverse(),o}(n[0],n[n.length-1],null==t?10:t)},t.tickFormat=function(t,n){var r=e();return function(t,e,n,r){var i,o=function(t,e,n){var r=Math.abs(e-t)/Math.max(0,n),i=Math.pow(10,Math.floor(Math.log(r)/Math.LN10)),o=r/i;return o>=br?i*=10:o>=xr?i*=5:o>=wr&&(i*=2),e<t?-i:i}(t,e,n);switch((r=Ur(null==r?",f":r)).type){case"s":var a=Math.max(Math.abs(t),Math.abs(e));return null!=r.precision||isNaN(i=function(t,e){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(Vr(e)/3)))-Vr(Math.abs(t)))}(o,a))||(r.precision=i),$r(r,a);case"":case"e":case"g":case"p":case"r":null!=r.precision||isNaN(i=function(t,e){return t=Math.abs(t),e=Math.abs(e)-t,Math.max(0,Vr(e)-Vr(t))+1}(o,Math.max(Math.abs(t),Math.abs(e))))||(r.precision=i-("e"===r.type));break;case"f":case"%":null!=r.precision||isNaN(i=function(t){return Math.max(0,-Vr(Math.abs(t)))}(o))||(r.precision=i-2*("%"===r.type))}return Xr(r)}(r[0],r[r.length-1],null==t?10:t,n)},t.nice=function(n){null==n&&(n=10);var r,i,o=e(),a=0,s=o.length-1,u=o[a],c=o[s],l=10;for(c<u&&(i=u,u=c,c=i,i=a,a=s,s=i);l-- >0;){if((i=Sr(u,c,n))===r)return o[a]=u,o[s]=c,e(o);if(i>0)u=Math.floor(u/i)*i,c=Math.ceil(c/i)*i;else{if(!(i<0))break;u=Math.ceil(u*i)/i,c=Math.floor(c*i)/i}r=i}return t},t}function Qr(){var t=Lr();return t.copy=function(){return Nr(t,Qr())},zr.apply(t,arguments),Jr(t)}Gr=function(t){var e,n,r=void 0===t.grouping||void 0===t.thousands?Yr:(e=Zr.call(t.grouping,Number),n=t.thousands+"",function(t,r){for(var i=t.length,o=[],a=0,s=e[0],u=0;i>0&&s>0&&(u+s+1>r&&(s=Math.max(1,r-u)),o.push(t.substring(i-=s,i+s)),!((u+=s+1)>r));)s=e[a=(a+1)%e.length];return o.reverse().join(n)}),i=void 0===t.currency?"":t.currency[0]+"",o=void 0===t.currency?"":t.currency[1]+"",a=void 0===t.decimal?".":t.decimal+"",s=void 0===t.numerals?Yr:function(t){return function(e){return e.replace(/[0-9]/g,(function(e){return t[+e]}))}}(Zr.call(t.numerals,String)),u=void 0===t.percent?"%":t.percent+"",c=void 0===t.minus?"−":t.minus+"",l=void 0===t.nan?"NaN":t.nan+"";function f(t){var e=(t=Ur(t)).fill,n=t.align,f=t.sign,h=t.symbol,p=t.zero,d=t.width,v=t.comma,g=t.precision,y=t.trim,m=t.type;"n"===m?(v=!0,m="g"):Hr[m]||(void 0===g&&(g=12),y=!0,m="g"),(p||"0"===e&&"="===n)&&(p=!0,e="0",n="=");var b="$"===h?i:"#"===h&&/[boxX]/.test(m)?"0"+m.toLowerCase():"",x="$"===h?o:/[%p]/.test(m)?u:"",w=Hr[m],S=/[defgprs%]/.test(m);function _(t){var i,o,u,h=b,_=x;if("c"===m)_=w(t)+_,t="";else{var A=(t=+t)<0||1/t<0;if(t=isNaN(t)?l:w(Math.abs(t),g),y&&(t=function(t){t:for(var e,n=t.length,r=1,i=-1;r<n;++r)switch(t[r]){case".":i=e=r;break;case"0":0===i&&(i=r),e=r;break;default:if(!+t[r])break t;i>0&&(i=0)}return i>0?t.slice(0,i)+t.slice(e+1):t}(t)),A&&0==+t&&"+"!==f&&(A=!1),h=(A?"("===f?f:c:"-"===f||"("===f?"":f)+h,_=("s"===m?Kr[8+Dr/3]:"")+_+(A&&"("===f?")":""),S)for(i=-1,o=t.length;++i<o;)if(48>(u=t.charCodeAt(i))||u>57){_=(46===u?a+t.slice(i+1):t.slice(i))+_,t=t.slice(0,i);break}}v&&!p&&(t=r(t,1/0));var M=h.length+t.length+_.length,T=M<d?new Array(d-M+1).join(e):"";switch(v&&p&&(t=r(T+t,T.length?d-_.length:1/0),T=""),n){case"<":t=h+t+_+T;break;case"=":t=h+T+t+_;break;case"^":t=T.slice(0,M=T.length>>1)+h+t+_+T.slice(M);break;default:t=T+h+t+_}return s(t)}return g=void 0===g?6:/[gprs]/.test(m)?Math.max(1,Math.min(21,g)):Math.max(0,Math.min(20,g)),_.toString=function(){return t+""},_}return{format:f,formatPrefix:function(t,e){var n=f(((t=Ur(t)).type="f",t)),r=3*Math.max(-8,Math.min(8,Math.floor(Vr(e)/3))),i=Math.pow(10,-r),o=Kr[8+r/3];return function(t){return n(i*t)+o}}}}({thousands:",",grouping:[3],currency:["$",""]}),Xr=Gr.format,$r=Gr.formatPrefix;const ti=Symbol("implicit");function ei(){var t,e=0,n=1,r=1,i=[.5],o=[0,1];function a(e){return e<=e?o[Er(i,e,0,r)]:t}function s(){var t=-1;for(i=new Array(r);++t<r;)i[t]=((t+1)*n-(t-r)*e)/(r+1);return a}return a.domain=function(t){return arguments.length?([e,n]=t,e=+e,n=+n,s()):[e,n]},a.range=function(t){return arguments.length?(r=(o=Array.from(t)).length-1,s()):o.slice()},a.invertExtent=function(t){var a=o.indexOf(t);return a<0?[NaN,NaN]:a<1?[e,i[0]]:a>=r?[i[r-1],n]:[i[a-1],i[a]]},a.unknown=function(e){return arguments.length?(t=e,a):a},a.thresholds=function(){return i.slice()},a.copy=function(){return ei().domain([e,n]).range(o).unknown(t)},zr.apply(Jr(a),arguments)}const ni=function(t){for(var e=t.length/6|0,n=new Array(e),r=0;r<e;)n[r]="#"+t.slice(6*r,6*++r);return n}("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf");function ri(t){return"string"==typeof t?new vt([[document.querySelector(t)]],[document.documentElement]):new vt([[t]],dt)}const ii=Math.PI,oi=2*ii,ai=1e-6,si=oi-ai;function ui(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function ci(){return new ui}ui.prototype=ci.prototype={constructor:ui,moveTo:function(t,e){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+e)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(t,e){this._+="L"+(this._x1=+t)+","+(this._y1=+e)},quadraticCurveTo:function(t,e,n,r){this._+="Q"+ +t+","+ +e+","+(this._x1=+n)+","+(this._y1=+r)},bezierCurveTo:function(t,e,n,r,i,o){this._+="C"+ +t+","+ +e+","+ +n+","+ +r+","+(this._x1=+i)+","+(this._y1=+o)},arcTo:function(t,e,n,r,i){t=+t,e=+e,n=+n,r=+r,i=+i;var o=this._x1,a=this._y1,s=n-t,u=r-e,c=o-t,l=a-e,f=c*c+l*l;if(i<0)throw new Error("negative radius: "+i);if(null===this._x1)this._+="M"+(this._x1=t)+","+(this._y1=e);else if(f>ai)if(Math.abs(l*s-u*c)>ai&&i){var h=n-o,p=r-a,d=s*s+u*u,v=h*h+p*p,g=Math.sqrt(d),y=Math.sqrt(f),m=i*Math.tan((ii-Math.acos((d+f-v)/(2*g*y)))/2),b=m/y,x=m/g;Math.abs(b-1)>ai&&(this._+="L"+(t+b*c)+","+(e+b*l)),this._+="A"+i+","+i+",0,0,"+ +(l*h>c*p)+","+(this._x1=t+x*s)+","+(this._y1=e+x*u)}else this._+="L"+(this._x1=t)+","+(this._y1=e)},arc:function(t,e,n,r,i,o){t=+t,e=+e,o=!!o;var a=(n=+n)*Math.cos(r),s=n*Math.sin(r),u=t+a,c=e+s,l=1^o,f=o?r-i:i-r;if(n<0)throw new Error("negative radius: "+n);null===this._x1?this._+="M"+u+","+c:(Math.abs(this._x1-u)>ai||Math.abs(this._y1-c)>ai)&&(this._+="L"+u+","+c),n&&(f<0&&(f=f%oi+oi),f>si?this._+="A"+n+","+n+",0,1,"+l+","+(t-a)+","+(e-s)+"A"+n+","+n+",0,1,"+l+","+(this._x1=u)+","+(this._y1=c):f>ai&&(this._+="A"+n+","+n+",0,"+ +(f>=ii)+","+l+","+(this._x1=t+n*Math.cos(i))+","+(this._y1=e+n*Math.sin(i))))},rect:function(t,e,n,r){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+e)+"h"+ +n+"v"+ +r+"h"+-n+"Z"},toString:function(){return this._}};const li=ci;function fi(t){return function(){return t}}var hi=Math.abs,pi=Math.atan2,di=Math.cos,vi=Math.max,gi=Math.min,yi=Math.sin,mi=Math.sqrt,bi=1e-12,xi=Math.PI,wi=xi/2,Si=2*xi;function _i(t){return t>1?0:t<-1?xi:Math.acos(t)}function Ai(t){return t>=1?wi:t<=-1?-wi:Math.asin(t)}function Mi(t){return t.innerRadius}function Ti(t){return t.outerRadius}function Ei(t){return t.startAngle}function ki(t){return t.endAngle}function Oi(t){return t&&t.padAngle}function Pi(t,e,n,r,i,o,a,s){var u=n-t,c=r-e,l=a-i,f=s-o,h=f*u-l*c;if(!(h*h<bi))return[t+(h=(l*(e-o)-f*(t-i))/h)*u,e+h*c]}function Ci(t,e,n,r,i,o,a){var s=t-n,u=e-r,c=(a?o:-o)/mi(s*s+u*u),l=c*u,f=-c*s,h=t+l,p=e+f,d=n+l,v=r+f,g=(h+d)/2,y=(p+v)/2,m=d-h,b=v-p,x=m*m+b*b,w=i-o,S=h*v-d*p,_=(b<0?-1:1)*mi(vi(0,w*w*x-S*S)),A=(S*b-m*_)/x,M=(-S*m-b*_)/x,T=(S*b+m*_)/x,E=(-S*m+b*_)/x,k=A-g,O=M-y,P=T-g,C=E-y;return k*k+O*O>P*P+C*C&&(A=T,M=E),{cx:A,cy:M,x01:-l,y01:-f,x11:A*(i/w-1),y11:M*(i/w-1)}}function Ri(){var t=Mi,e=Ti,n=fi(0),r=null,i=Ei,o=ki,a=Oi,s=null;function u(){var u,c,l=+t.apply(this,arguments),f=+e.apply(this,arguments),h=i.apply(this,arguments)-wi,p=o.apply(this,arguments)-wi,d=hi(p-h),v=p>h;if(s||(s=u=li()),f<l&&(c=f,f=l,l=c),f>bi)if(d>Si-bi)s.moveTo(f*di(h),f*yi(h)),s.arc(0,0,f,h,p,!v),l>bi&&(s.moveTo(l*di(p),l*yi(p)),s.arc(0,0,l,p,h,v));else{var g,y,m=h,b=p,x=h,w=p,S=d,_=d,A=a.apply(this,arguments)/2,M=A>bi&&(r?+r.apply(this,arguments):mi(l*l+f*f)),T=gi(hi(f-l)/2,+n.apply(this,arguments)),E=T,k=T;if(M>bi){var O=Ai(M/l*yi(A)),P=Ai(M/f*yi(A));(S-=2*O)>bi?(x+=O*=v?1:-1,w-=O):(S=0,x=w=(h+p)/2),(_-=2*P)>bi?(m+=P*=v?1:-1,b-=P):(_=0,m=b=(h+p)/2)}var C=f*di(m),R=f*yi(m),I=l*di(w),j=l*yi(w);if(T>bi){var N,L=f*di(b),z=f*yi(b),D=l*di(x),F=l*yi(x);if(d<xi&&(N=Pi(C,R,D,F,L,z,I,j))){var U=C-N[0],B=R-N[1],q=L-N[0],V=z-N[1],W=1/yi(_i((U*q+B*V)/(mi(U*U+B*B)*mi(q*q+V*V)))/2),H=mi(N[0]*N[0]+N[1]*N[1]);E=gi(T,(l-H)/(W-1)),k=gi(T,(f-H)/(W+1))}}_>bi?k>bi?(g=Ci(D,F,C,R,f,k,v),y=Ci(L,z,I,j,f,k,v),s.moveTo(g.cx+g.x01,g.cy+g.y01),k<T?s.arc(g.cx,g.cy,k,pi(g.y01,g.x01),pi(y.y01,y.x01),!v):(s.arc(g.cx,g.cy,k,pi(g.y01,g.x01),pi(g.y11,g.x11),!v),s.arc(0,0,f,pi(g.cy+g.y11,g.cx+g.x11),pi(y.cy+y.y11,y.cx+y.x11),!v),s.arc(y.cx,y.cy,k,pi(y.y11,y.x11),pi(y.y01,y.x01),!v))):(s.moveTo(C,R),s.arc(0,0,f,m,b,!v)):s.moveTo(C,R),l>bi&&S>bi?E>bi?(g=Ci(I,j,L,z,l,-E,v),y=Ci(C,R,D,F,l,-E,v),s.lineTo(g.cx+g.x01,g.cy+g.y01),E<T?s.arc(g.cx,g.cy,E,pi(g.y01,g.x01),pi(y.y01,y.x01),!v):(s.arc(g.cx,g.cy,E,pi(g.y01,g.x01),pi(g.y11,g.x11),!v),s.arc(0,0,l,pi(g.cy+g.y11,g.cx+g.x11),pi(y.cy+y.y11,y.cx+y.x11),v),s.arc(y.cx,y.cy,E,pi(y.y11,y.x11),pi(y.y01,y.x01),!v))):s.arc(0,0,l,w,x,v):s.lineTo(I,j)}else s.moveTo(0,0);if(s.closePath(),u)return s=null,u+""||null}return u.centroid=function(){var n=(+t.apply(this,arguments)+ +e.apply(this,arguments))/2,r=(+i.apply(this,arguments)+ +o.apply(this,arguments))/2-xi/2;return[di(r)*n,yi(r)*n]},u.innerRadius=function(e){return arguments.length?(t="function"==typeof e?e:fi(+e),u):t},u.outerRadius=function(t){return arguments.length?(e="function"==typeof t?t:fi(+t),u):e},u.cornerRadius=function(t){return arguments.length?(n="function"==typeof t?t:fi(+t),u):n},u.padRadius=function(t){return arguments.length?(r=null==t?null:"function"==typeof t?t:fi(+t),u):r},u.startAngle=function(t){return arguments.length?(i="function"==typeof t?t:fi(+t),u):i},u.endAngle=function(t){return arguments.length?(o="function"==typeof t?t:fi(+t),u):o},u.padAngle=function(t){return arguments.length?(a="function"==typeof t?t:fi(+t),u):a},u.context=function(t){return arguments.length?(s=null==t?null:t,u):s},u}var Ii=Array.prototype.slice;function ji(t){return t[0]}function Ni(t){return t[1]}function Li(t){return t.source}function zi(t){return t.target}function Di(t,e,n,r,i){t.moveTo(e,n),t.bezierCurveTo(e=(e+r)/2,n,e,i,r,i)}function Fi(t){t.preventDefault(),t.stopImmediatePropagation()}function Ui(t){var e=t.document.documentElement,n=ri(t).on("dragstart.drag",Fi,!0);"onselectstart"in e?n.on("selectstart.drag",Fi,!0):(e.__noselect=e.style.MozUserSelect,e.style.MozUserSelect="none")}function Bi(t,e){var n=t.document.documentElement,r=ri(t).on("dragstart.drag",null);e&&(r.on("click.drag",Fi,!0),setTimeout((function(){r.on("click.drag",null)}),0)),"onselectstart"in n?r.on("selectstart.drag",null):(n.style.MozUserSelect=n.__noselect,delete n.__noselect)}function qi(t){return((t=Math.exp(t))+1/t)/2}const Vi=function t(e,n,r){function i(t,i){var o,a,s=t[0],u=t[1],c=t[2],l=i[0],f=i[1],h=i[2],p=l-s,d=f-u,v=p*p+d*d;if(v<1e-12)a=Math.log(h/c)/e,o=function(t){return[s+t*p,u+t*d,c*Math.exp(e*t*a)]};else{var g=Math.sqrt(v),y=(h*h-c*c+r*v)/(2*c*n*g),m=(h*h-c*c-r*v)/(2*h*n*g),b=Math.log(Math.sqrt(y*y+1)-y),x=Math.log(Math.sqrt(m*m+1)-m);a=(x-b)/e,o=function(t){var r,i=t*a,o=qi(b),l=c/(n*g)*(o*(r=e*i+b,((r=Math.exp(2*r))-1)/(r+1))-function(t){return((t=Math.exp(t))-1/t)/2}(b));return[s+l*p,u+l*d,c*o/qi(e*i+b)]}}return o.duration=1e3*a*e/Math.SQRT2,o}return i.rho=function(e){var n=Math.max(.001,+e),r=n*n;return t(n,r,r*r)},i}(Math.SQRT2,2,4);function Wi(t,e){if(t=function(t){let e;for(;e=t.sourceEvent;)t=e;return t}(t),void 0===e&&(e=t.currentTarget),e){var n=e.ownerSVGElement||e;if(n.createSVGPoint){var r=n.createSVGPoint();return r.x=t.clientX,r.y=t.clientY,[(r=r.matrixTransform(e.getScreenCTM().inverse())).x,r.y]}if(e.getBoundingClientRect){var i=e.getBoundingClientRect();return[t.clientX-i.left-e.clientLeft,t.clientY-i.top-e.clientTop]}}return[t.pageX,t.pageY]}const Hi=t=>()=>t;function Yi(t,{sourceEvent:e,target:n,transform:r,dispatch:i}){Object.defineProperties(this,{type:{value:t,enumerable:!0,configurable:!0},sourceEvent:{value:e,enumerable:!0,configurable:!0},target:{value:n,enumerable:!0,configurable:!0},transform:{value:r,enumerable:!0,configurable:!0},_:{value:i}})}function Gi(t,e,n){this.k=t,this.x=e,this.y=n}Gi.prototype={constructor:Gi,scale:function(t){return 1===t?this:new Gi(this.k*t,this.x,this.y)},translate:function(t,e){return 0===t&0===e?this:new Gi(this.k,this.x+this.k*t,this.y+this.k*e)},apply:function(t){return[t[0]*this.k+this.x,t[1]*this.k+this.y]},applyX:function(t){return t*this.k+this.x},applyY:function(t){return t*this.k+this.y},invert:function(t){return[(t[0]-this.x)/this.k,(t[1]-this.y)/this.k]},invertX:function(t){return(t-this.x)/this.k},invertY:function(t){return(t-this.y)/this.k},rescaleX:function(t){return t.copy().domain(t.range().map(this.invertX,this).map(t.invert,t))},rescaleY:function(t){return t.copy().domain(t.range().map(this.invertY,this).map(t.invert,t))},toString:function(){return"translate("+this.x+","+this.y+") scale("+this.k+")"}};var Xi=new Gi(1,0,0);function $i(t){t.stopImmediatePropagation()}function Zi(t){t.preventDefault(),t.stopImmediatePropagation()}function Ki(t){return!(t.ctrlKey&&"wheel"!==t.type||t.button)}function Ji(){var t=this;return t instanceof SVGElement?(t=t.ownerSVGElement||t).hasAttribute("viewBox")?[[(t=t.viewBox.baseVal).x,t.y],[t.x+t.width,t.y+t.height]]:[[0,0],[t.width.baseVal.value,t.height.baseVal.value]]:[[0,0],[t.clientWidth,t.clientHeight]]}function Qi(){return this.__zoom||Xi}function to(t){return-t.deltaY*(1===t.deltaMode?.05:t.deltaMode?1:.002)*(t.ctrlKey?10:1)}function eo(){return navigator.maxTouchPoints||"ontouchstart"in this}function no(t,e,n){var r=t.invertX(e[0][0])-n[0][0],i=t.invertX(e[1][0])-n[1][0],o=t.invertY(e[0][1])-n[0][1],a=t.invertY(e[1][1])-n[1][1];return t.translate(i>r?(r+i)/2:Math.min(0,r)||Math.max(0,i),a>o?(o+a)/2:Math.min(0,o)||Math.max(0,a))}function ro(){var t,e,n,r=Ki,i=Ji,o=no,a=to,s=eo,u=[0,1/0],c=[[-1/0,-1/0],[1/0,1/0]],l=250,f=Vi,h=At("start","zoom","end"),p=500,d=0,v=10;function g(t){t.property("__zoom",Qi).on("wheel.zoom",_).on("mousedown.zoom",A).on("dblclick.zoom",M).filter(s).on("touchstart.zoom",T).on("touchmove.zoom",E).on("touchend.zoom touchcancel.zoom",k).style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function y(t,e){return(e=Math.max(u[0],Math.min(u[1],e)))===t.k?t:new Gi(e,t.x,t.y)}function m(t,e,n){var r=e[0]-n[0]*t.k,i=e[1]-n[1]*t.k;return r===t.x&&i===t.y?t:new Gi(t.k,r,i)}function b(t){return[(+t[0][0]+ +t[1][0])/2,(+t[0][1]+ +t[1][1])/2]}function x(t,e,n,r){t.on("start.zoom",(function(){w(this,arguments).event(r).start()})).on("interrupt.zoom end.zoom",(function(){w(this,arguments).event(r).end()})).tween("zoom",(function(){var t=this,o=arguments,a=w(t,o).event(r),s=i.apply(t,o),u=null==n?b(s):"function"==typeof n?n.apply(t,o):n,c=Math.max(s[1][0]-s[0][0],s[1][1]-s[0][1]),l=t.__zoom,h="function"==typeof e?e.apply(t,o):e,p=f(l.invert(u).concat(c/l.k),h.invert(u).concat(c/h.k));return function(t){if(1===t)t=h;else{var e=p(t),n=c/e[2];t=new Gi(n,u[0]-e[0]*n,u[1]-e[1]*n)}a.zoom(null,t)}}))}function w(t,e,n){return!n&&t.__zooming||new S(t,e)}function S(t,e){this.that=t,this.args=e,this.active=0,this.sourceEvent=null,this.extent=i.apply(t,e),this.taps=0}function _(t,...e){if(r.apply(this,arguments)){var n=w(this,e).event(t),i=this.__zoom,s=Math.max(u[0],Math.min(u[1],i.k*Math.pow(2,a.apply(this,arguments)))),l=Wi(t);if(n.wheel)n.mouse[0][0]===l[0]&&n.mouse[0][1]===l[1]||(n.mouse[1]=i.invert(n.mouse[0]=l)),clearTimeout(n.wheel);else{if(i.k===s)return;n.mouse=[l,i.invert(l)],$t(this),n.start()}Zi(t),n.wheel=setTimeout(f,150),n.zoom("mouse",o(m(y(i,s),n.mouse[0],n.mouse[1]),n.extent,c))}function f(){n.wheel=null,n.end()}}function A(t,...e){if(!n&&r.apply(this,arguments)){var i=w(this,e,!0).event(t),a=ri(t.view).on("mousemove.zoom",h,!0).on("mouseup.zoom",p,!0),s=Wi(t,u),u=t.currentTarget,l=t.clientX,f=t.clientY;Ui(t.view),$i(t),i.mouse=[s,this.__zoom.invert(s)],$t(this),i.start()}function h(t){if(Zi(t),!i.moved){var e=t.clientX-l,n=t.clientY-f;i.moved=e*e+n*n>d}i.event(t).zoom("mouse",o(m(i.that.__zoom,i.mouse[0]=Wi(t,u),i.mouse[1]),i.extent,c))}function p(t){a.on("mousemove.zoom mouseup.zoom",null),Bi(t.view,i.moved),Zi(t),i.event(t).end()}}function M(t,...e){if(r.apply(this,arguments)){var n=this.__zoom,a=Wi(t.changedTouches?t.changedTouches[0]:t,this),s=n.invert(a),u=n.k*(t.shiftKey?.5:2),f=o(m(y(n,u),a,s),i.apply(this,e),c);Zi(t),l>0?ri(this).transition().duration(l).call(x,f,a,t):ri(this).call(g.transform,f,a,t)}}function T(n,...i){if(r.apply(this,arguments)){var o,a,s,u,c=n.touches,l=c.length,f=w(this,i,n.changedTouches.length===l).event(n);for($i(n),a=0;a<l;++a)u=[u=Wi(s=c[a],this),this.__zoom.invert(u),s.identifier],f.touch0?f.touch1||f.touch0[2]===u[2]||(f.touch1=u,f.taps=0):(f.touch0=u,o=!0,f.taps=1+!!t);t&&(t=clearTimeout(t)),o&&(f.taps<2&&(e=u[0],t=setTimeout((function(){t=null}),p)),$t(this),f.start())}}function E(t,...e){if(this.__zooming){var n,r,i,a,s=w(this,e).event(t),u=t.changedTouches,l=u.length;for(Zi(t),n=0;n<l;++n)i=Wi(r=u[n],this),s.touch0&&s.touch0[2]===r.identifier?s.touch0[0]=i:s.touch1&&s.touch1[2]===r.identifier&&(s.touch1[0]=i);if(r=s.that.__zoom,s.touch1){var f=s.touch0[0],h=s.touch0[1],p=s.touch1[0],d=s.touch1[1],v=(v=p[0]-f[0])*v+(v=p[1]-f[1])*v,g=(g=d[0]-h[0])*g+(g=d[1]-h[1])*g;r=y(r,Math.sqrt(v/g)),i=[(f[0]+p[0])/2,(f[1]+p[1])/2],a=[(h[0]+d[0])/2,(h[1]+d[1])/2]}else{if(!s.touch0)return;i=s.touch0[0],a=s.touch0[1]}s.zoom("touch",o(m(r,i,a),s.extent,c))}}function k(t,...r){if(this.__zooming){var i,o,a=w(this,r).event(t),s=t.changedTouches,u=s.length;for($i(t),n&&clearTimeout(n),n=setTimeout((function(){n=null}),p),i=0;i<u;++i)o=s[i],a.touch0&&a.touch0[2]===o.identifier?delete a.touch0:a.touch1&&a.touch1[2]===o.identifier&&delete a.touch1;if(a.touch1&&!a.touch0&&(a.touch0=a.touch1,delete a.touch1),a.touch0)a.touch0[1]=this.__zoom.invert(a.touch0[0]);else if(a.end(),2===a.taps&&(o=Wi(o,this),Math.hypot(e[0]-o[0],e[1]-o[1])<v)){var c=ri(this).on("dblclick.zoom");c&&c.apply(this,arguments)}}}return g.transform=function(t,e,n,r){var i=t.selection?t.selection():t;i.property("__zoom",Qi),t!==i?x(t,e,n,r):i.interrupt().each((function(){w(this,arguments).event(r).start().zoom(null,"function"==typeof e?e.apply(this,arguments):e).end()}))},g.scaleBy=function(t,e,n,r){g.scaleTo(t,(function(){var t=this.__zoom.k,n="function"==typeof e?e.apply(this,arguments):e;return t*n}),n,r)},g.scaleTo=function(t,e,n,r){g.transform(t,(function(){var t=i.apply(this,arguments),r=this.__zoom,a=null==n?b(t):"function"==typeof n?n.apply(this,arguments):n,s=r.invert(a),u="function"==typeof e?e.apply(this,arguments):e;return o(m(y(r,u),a,s),t,c)}),n,r)},g.translateBy=function(t,e,n,r){g.transform(t,(function(){return o(this.__zoom.translate("function"==typeof e?e.apply(this,arguments):e,"function"==typeof n?n.apply(this,arguments):n),i.apply(this,arguments),c)}),null,r)},g.translateTo=function(t,e,n,r,a){g.transform(t,(function(){var t=i.apply(this,arguments),a=this.__zoom,s=null==r?b(t):"function"==typeof r?r.apply(this,arguments):r;return o(Xi.translate(s[0],s[1]).scale(a.k).translate("function"==typeof e?-e.apply(this,arguments):-e,"function"==typeof n?-n.apply(this,arguments):-n),t,c)}),r,a)},S.prototype={event:function(t){return t&&(this.sourceEvent=t),this},start:function(){return 1==++this.active&&(this.that.__zooming=this,this.emit("start")),this},zoom:function(t,e){return this.mouse&&"mouse"!==t&&(this.mouse[1]=e.invert(this.mouse[0])),this.touch0&&"touch"!==t&&(this.touch0[1]=e.invert(this.touch0[0])),this.touch1&&"touch"!==t&&(this.touch1[1]=e.invert(this.touch1[0])),this.that.__zoom=e,this.emit("zoom"),this},end:function(){return 0==--this.active&&(delete this.that.__zooming,this.emit("end")),this},emit:function(t){var e=ri(this.that).datum();h.call(t,this.that,new Yi(t,{sourceEvent:this.sourceEvent,target:g,type:t,transform:this.that.__zoom,dispatch:h}),e)}},g.wheelDelta=function(t){return arguments.length?(a="function"==typeof t?t:Hi(+t),g):a},g.filter=function(t){return arguments.length?(r="function"==typeof t?t:Hi(!!t),g):r},g.touchable=function(t){return arguments.length?(s="function"==typeof t?t:Hi(!!t),g):s},g.extent=function(t){return arguments.length?(i="function"==typeof t?t:Hi([[+t[0][0],+t[0][1]],[+t[1][0],+t[1][1]]]),g):i},g.scaleExtent=function(t){return arguments.length?(u[0]=+t[0],u[1]=+t[1],g):[u[0],u[1]]},g.translateExtent=function(t){return arguments.length?(c[0][0]=+t[0][0],c[1][0]=+t[1][0],c[0][1]=+t[0][1],c[1][1]=+t[1][1],g):[[c[0][0],c[0][1]],[c[1][0],c[1][1]]]},g.constrain=function(t){return arguments.length?(o=t,g):o},g.duration=function(t){return arguments.length?(l=+t,g):l},g.interpolate=function(t){return arguments.length?(f=t,g):f},g.on=function(){var t=h.on.apply(h,arguments);return t===h?g:t},g.clickDistance=function(t){return arguments.length?(d=(t=+t)*t,g):Math.sqrt(d)},g.tapDistance=function(t){return arguments.length?(v=+t,g):v},g}Gi.prototype;var io,oo,ao=function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.width=800,this.height=800,this.enableTooltips=!0};function so(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}(oo=io||(io={})).easeInEaseOutCubic=function(t){return t<.5?4*t*t*t:1-Math.pow(-2*t+2,3)/2},oo.easeInCubic=function(t){return t*t*t},oo.easeOutCubic=function(t){return 1-Math.pow(1-t,3)},oo.easeInEaseOutElastic=function(t){var e=2*Math.PI/4.5;return 0===t?0:1===t?1:t<.5?-Math.pow(2,20*t-10)*Math.sin((20*t-11.125)*e)/2:Math.pow(2,-20*t+10)*Math.sin((20*t-11.125)*e)/2+1},oo.easeInElastic=function(t){var e=2*Math.PI/3;return 0===t?0:1===t?1:-Math.pow(2,10*t-10)*Math.sin((10*t-10.75)*e)},oo.easeOutElastic=function(t){var e=2*Math.PI/3;return 0===t?0:1===t?1:Math.pow(2,-10*t)*Math.sin((10*t-.75)*e)+1};var uo=function(){function t(e,n,r,i,o){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._parent=e,this._leftChild=n,this._rightChild=r,this.values=i,this.height=o,this.id=t.currentID,t.currentID++}var e,n;return e=t,(n=[{key:"parent",get:function(){return this._parent},set:function(t){this._parent=t}},{key:"leftChild",get:function(){return this._leftChild},set:function(t){this._leftChild=t}},{key:"rightChild",get:function(){return this._rightChild},set:function(t){this._rightChild=t}},{key:"toNewick",value:function(t){var e="";return this.leftChild||this.rightChild?(e+="(",this.leftChild&&(e+=this.leftChild.toNewick(t)+","),this.rightChild&&(e+=this.rightChild.toNewick(t)),e+=")"+this.id+":"+this.height):t(this.values[0].id)+":"+this.height}},{key:"toGraphViz",value:function(t){for(var e=this,n="digraph dendrogram {\n",r="",i="",o=[e];o.length>0&&(e=o.shift());)e.leftChild||e.rightChild?r+="    ".concat(e.id,' [label="').concat(e.id,'"];\n'):r+="    ".concat(e.id,' [label="').concat(t(e.values[0].id),'"];\n'),e.leftChild&&(i+="    ".concat(e.id," -> ").concat(e.leftChild.id,";\n"),o.push(e.leftChild)),e.rightChild&&(i+="    ".concat(e.id," -> ").concat(e.rightChild.id,";\n"),o.push(e.rightChild));return n+(r+i+"}")}}])&&so(e.prototype,n),t}();function co(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function lo(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}uo.currentID=0;var fo=function(){function t(e,n,r){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.elements=e,this.index=n,this.treeNode=r}var e,n;return e=t,(n=[{key:"merge",value:function(t,e){var n,r;(n=this.elements).push.apply(n,function(t){if(Array.isArray(t))return co(t)}(r=t.elements)||function(t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t))return Array.from(t)}(r)||function(t,e){if(t){if("string"==typeof t)return co(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?co(t,e):void 0}}(r)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}());var i=new uo(null,this.treeNode,t.treeNode,this.elements.slice(),e);this.treeNode.parent=i,t.treeNode.parent=i,this.treeNode=i}}])&&lo(e.prototype,n),t}();function ho(t,e){var n;if("undefined"==typeof Symbol||null==t[Symbol.iterator]){if(Array.isArray(t)||(n=function(t,e){if(t){if("string"==typeof t)return po(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?po(t,e):void 0}}(t))||e&&t&&"number"==typeof t.length){n&&(t=n);var r=0,i=function(){};return{s:i,n:function(){return r>=t.length?{done:!0}:{done:!1,value:t[r++]}},e:function(t){throw t},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,a=!0,s=!1;return{s:function(){n=t[Symbol.iterator]()},n:function(){var t=n.next();return a=t.done,t},e:function(t){s=!0,o=t},f:function(){try{a||null==n.return||n.return()}finally{if(s)throw o}}}}function po(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function vo(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var go=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.metric=e}var e,n;return e=t,(n=[{key:"cluster",value:function(t){if(uo.currentID=0,t.length<1)return new uo(null,null,null,[],0);for(var e=new Map,n=[],r=0;r<t.length;r++){var i=t[r].values;e.set(r,new fo([t[r]],r,new uo(null,null,null,[t[r]],0))),n.push(i)}for(var o=this.metric.getDistance(n),a=0;a!=o.length-1;){var s,u=1/0,c=-1,l=-1,f=ho(e.keys());try{for(f.s();!(s=f.n()).done;){var h,p=s.value,d=ho(e.keys());try{for(d.s();!(h=d.n()).done;){var v=h.value;p>v&&o[p][v]<u&&(u=o[p][v],c=p,l=v)}}catch(t){d.e(t)}finally{d.f()}}}catch(t){f.e(t)}finally{f.f()}var g=e.get(c),y=e.get(l),m=u/2;if(!g||!y)throw"At least one cluster is invalid!";var b,x=this.copyDistanceMatrix(o),w=ho(e.keys());try{for(w.s();!(b=w.n()).done;){var S=b.value;if(S!=c&&S!=l){var _;_=S>c?o[S][c]:o[c][S];var A;A=S>l?o[S][l]:o[l][S];var M=(g.elements.length*_+y.elements.length*A)/(g.elements.length+y.elements.length);S>c?x[S][c]=M:x[c][S]=M}}}catch(t){w.e(t)}finally{w.f()}o=x,g.merge(y,m),e.delete(l),++a}return e.values().next().value.treeNode}},{key:"copyDistanceMatrix",value:function(t){for(var e=[],n=0;n<t.length;n++){for(var r=[],i=t[n],o=0;o<i.length;o++)r.push(i[o]);e.push(r)}return e}}])&&vo(e.prototype,n),t}();function yo(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var mo=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t)}var e,n;return e=t,(n=[{key:"getDistance",value:function(t){for(var e=[],n=0;n<t.length;n++){for(var r=[],i=0;i<=n;i++)r.push(this.calculateEuclideanDistance(t[n],t[i]));e.push(r)}return e}},{key:"calculateEuclideanDistance",value:function(t,e){if(t.length!=e.length)throw"Euclidean distance can only be calculated for 2 equally sized input arrays!";for(var n=0,r=0;r<t.length;r++)n+=Math.pow(e[r]-t[r],2);return Math.sqrt(n)}}])&&yo(e.prototype,n),t}();function bo(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var xo=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.nodeMinMap=new Map}var e,n;return e=t,(n=[{key:"reorder",value:function(t){return this.nodeMinMap.clear(),this.sortMinimum(t)}},{key:"sortMinimum",value:function(t){if(!t.leftChild||!t.rightChild)return t;var e=t.leftChild,n=t.rightChild,r=!e.leftChild&&!e.rightChild,i=!n.leftChild&&!n.rightChild;if(r&&i)this.nodeMinMap.set(t,t.height);else if(!r&&i){var o=this.sortMinimum(e);t.leftChild=o;var a=this.nodeMinMap.get(o);if(void 0===a)throw"The recursive call to sort the left subtree did not yield a minimum value.";this.nodeMinMap.set(t,Math.min(t.height,a))}else if(r&&!i){var s=this.sortMinimum(n);t.leftChild=s,t.rightChild=e;var u=this.nodeMinMap.get(s);if(void 0===u)throw"The recursive call to sort the right subtree did not yield a minimum value.";this.nodeMinMap.set(t,Math.min(t.height,u))}else{var c=this.sortMinimum(e),l=this.sortMinimum(n),f=this.nodeMinMap.get(c),h=this.nodeMinMap.get(l);if(void 0===f||void 0===h)throw"One of the recursive calls to sort a subtree did not yield a minimum value.";f<=h?(t.leftChild=c,t.rightChild=l):(t.leftChild=l,t.rightChild=c),this.nodeMinMap.set(t,Math.min(t.height,f,h))}return t}}])&&bo(e.prototype,n),t}();function wo(t){return(wo="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function So(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _o(t,e){return(_o=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function Ao(t,e){return!e||"object"!==wo(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function Mo(t){return(Mo=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var To=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_o(t,e)}(i,t);var e,n,r=(e=i,n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,r=Mo(e);if(n){var i=Mo(this).constructor;t=Reflect.construct(r,arguments,i)}else t=r.apply(this,arguments);return Ao(this,t)});function i(){var t;return So(this,i),(t=r.apply(this,arguments)).initialTextWidth=100,t.initialTextHeight=100,t.squarePadding=2,t.visualizationTextPadding=4,t.fontSize=14,t.labelColor="#404040",t.highlightSelection=!0,t.highlightFontSize=16,t.highlightFontColor="black",t.className="heatmap",t.animationsEnabled=!0,t.animationDuration=2e3,t.transition=io.easeInEaseOutCubic,t.minColor="#EEEEEE",t.maxColor="#1565C0",t.colorBuckets=50,t.dendrogramEnabled=!1,t.dendrogramWidth=100,t.dendrogramLineWidth=1,t.dendrogramColor="#404040",t.clusteringAlgorithm=new go(new mo),t.reorderer=new xo,t.getTooltip=function(e,n,r){return"\n            <style>\n                .unipept-tooltip {\n                    padding: 10px;\n                    border-radius: 5px; \n                    background: rgba(0, 0, 0, 0.8); \n                    color: #fff;\n                }\n                \n                .unipept-tooltip div, .unipept-tooltip a {\n                    font-family: Roboto, 'Helvetica Neue', Helvetica, Arial, sans-serif;\n                }\n                \n                .unipept-tooltip div {\n                    font-weight: bold;\n                }\n            </style>\n            <div class=\"unipept-tooltip\">\n                <div>\n                    ".concat(t.getTooltipTitle(e,n,r),"\n                </div>\n                <a>\n                    ").concat(t.getTooltipText(e),"\n                </a>\n            </div>\n        ")},t.getTooltipTitle=function(t,e,n){return"".concat(n.name?n.name:"").concat(n.name?" and ":"").concat(e.name?e.name:"")},t.getTooltipText=function(t){return"Similarity: ".concat((100*t.value).toFixed(2),"%")},t}return i}(ao),Eo=function t(e,n){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.values=e,this.id=n};function ko(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t)){var n=[],r=!0,i=!1,o=void 0;try{for(var a,s=t[Symbol.iterator]();!(r=(a=s.next()).done)&&(n.push(a.value),!e||n.length!==e);r=!0);}catch(t){i=!0,o=t}finally{try{r||null==s.return||s.return()}finally{if(i)throw o}}return n}}(t,e)||function(t,e){if(t){if("string"==typeof t)return Oo(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Oo(t,e):void 0}}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Oo(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function Po(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var Co=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t)}var e,n;return e=t,(n=[{key:"preprocessFeatures",value:function(t){return Object.entries(t).map((function(t){var e=ko(t,2),n=e[0];return{name:e[1],idx:Number.parseInt(n)}}))}},{key:"preprocessValues",value:function(t,e,n,r){var i=mr(Nn(e),Nn(n)),o=Qr().domain([0,1]).range([0,1]).ticks(r),a=ei().domain([0,1]).range(o);return Object.entries(t).map((function(t){var e=ko(t,2),n=e[0],r=e[1];return Object.entries(r).map((function(t){var e=ko(t,2),r=e[0],o=e[1];if("number"==typeof o){var s=a(o);if(void 0===s)throw new Error("Invalid heatmap value given: "+o);return{value:o,rowId:Number.parseInt(n),columnId:Number.parseInt(r),color:i(s)}}return o}))}))}},{key:"orderPerColor",value:function(t){for(var e,n=new Map,r=0;r<t.length;r++)for(var i=0;i<t[r].length;i++){var o=t[r][i].color;n.has(o)||n.set(o,[]),null===(e=n.get(o))||void 0===e||e.push([r,i])}return n}}])&&Po(e.prototype,n),t}();function Ro(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}n(8594),n(5666);var Io=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.context=e}var e,n;return e=t,(n=[{key:"renderLine",value:function(t,e,n,r,i,o){this.context.lineWidth=i,this.context.moveTo(t,e),this.context.lineTo(n,r),this.context.strokeStyle=o,this.context.stroke()}}])&&Ro(e.prototype,n),t}();function jo(t,e){var n;if("undefined"==typeof Symbol||null==t[Symbol.iterator]){if(Array.isArray(t)||(n=Lo(t))||e&&t&&"number"==typeof t.length){n&&(t=n);var r=0,i=function(){};return{s:i,n:function(){return r>=t.length?{done:!0}:{done:!1,value:t[r++]}},e:function(t){throw t},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,a=!0,s=!1;return{s:function(){n=t[Symbol.iterator]()},n:function(){var t=n.next();return a=t.done,t},e:function(t){s=!0,o=t},f:function(){try{a||null==n.return||n.return()}finally{if(s)throw o}}}}function No(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t)){var n=[],r=!0,i=!1,o=void 0;try{for(var a,s=t[Symbol.iterator]();!(r=(a=s.next()).done)&&(n.push(a.value),!e||n.length!==e);r=!0);}catch(t){i=!0,o=t}finally{try{r||null==s.return||s.return()}finally{if(i)throw o}}return n}}(t,e)||Lo(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Lo(t,e){if(t){if("string"==typeof t)return zo(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?zo(t,e):void 0}}function zo(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function Do(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function Fo(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var Uo=function(t,e,n,r){return new(n||(n=Promise))((function(i,o){function a(t){try{u(r.next(t))}catch(t){o(t)}}function s(t){try{u(r.throw(t))}catch(t){o(t)}}function u(t){t.done?i(t.value):function(t){return t instanceof n?t:new n((function(e){e(t)}))}(t.value).then(a,s)}u((r=r.apply(t,e||[])).next())}))},Bo=function(){function t(e,n,r,i){var o=this,a=arguments.length>4&&void 0!==arguments[4]?arguments[4]:new To;Do(this,t),this.tooltip=null,this.highlightedRow=-1,this.highlightedColumn=-1,this.animatingRows=!1,this.animatingCols=!1,this.clusteredHorizontal=!1,this.clusteredVertical=!1,this.lastZoomStatus={k:1,x:0,y:0},this.settings=this.fillOptions(a),this.element=e;var s=new Co;this.rows=s.preprocessFeatures(r),this.columns=s.preprocessFeatures(i),this.values=s.preprocessValues(n,this.settings.minColor,this.settings.maxColor,this.settings.colorBuckets),this.valuesPerColor=s.orderPerColor(this.values),this.settings.enableTooltips&&(this.tooltip=this.initTooltip()),this.pixelRatio=window.devicePixelRatio||1,this.originalViewPort={xTop:0,yTop:0,xBottom:this.settings.width,yBottom:this.settings.height},this.currentViewPort=this.originalViewPort,this.textWidth=this.settings.initialTextWidth,this.textHeight=this.settings.initialTextHeight,this.element.innerHTML="",this.visElement=ri(this.element).append("canvas").attr("width",this.pixelRatio*this.settings.width).attr("height",this.pixelRatio*this.settings.height).attr("style","width: ".concat(this.settings.width,"px; height: ").concat(this.settings.height,"px")).on("mouseover",(function(t){return o.tooltipMove(t)})).on("mousemove",(function(t){return o.tooltipMove(t)})).on("mouseout",(function(t){return o.tooltipMove(t)})).on("click",(function(t){return o.click(t)})),this.context=this.visElement.node().getContext("2d"),this.context.scale(this.pixelRatio,this.pixelRatio);var u=ro().extent([[0,0],[this.settings.width,this.settings.height]]).scaleExtent([.25,12]).on("zoom",(function(t){o.zoomed(t.transform)}));this.visElement.call(u),this.computeClusterRoots(),this.redraw()}var e,n;return e=t,(n=[{key:"fillOptions",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:void 0,e=new To;return Object.assign(e,t)}},{key:"reset",value:function(){this.redraw()}},{key:"cluster",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"all";return Uo(this,void 0,void 0,regeneratorRuntime.mark((function e(){var n,r,i,o,a,s,u,c,l,f,h,p,d,v,g,y,m,b,x,w,S,_,A,M,T,E,k,O,P,C,R,I,j,N,L,z,D,F,U,B=this;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(n=this.settings.animationsEnabled?this.settings.animationDuration/2:0,r=function(t,e){return new Promise((function(r){var i;requestAnimationFrame((function o(a){void 0===i&&(i=a);var s=a-i,u=B.settings.transition(s/n);B.redraw(t,e,u),s<n?requestAnimationFrame(o):r()}))}))},i=new Co,o=Array.from(Array(this.rows.length).keys()),a=new Array(o.length),"all"!==t&&"rows"!==t||this.clusteredVertical){e.next=23;break}for(this.clusteredVertical=!0,o=this.determineOrder(this.rowClusterRoot),s=0,u=Object.entries(o);s<u.length;s++)c=No(u[s],2),l=c[0],f=c[1],a[f]=Number.parseInt(l);return h=Array.from(Array(this.columns.length).keys()),this.animatingRows=!0,e.next=13,r(a,h);case 13:this.animatingRows=!1,p=[],d=jo(o);try{for(d.s();!(v=d.n()).done;)g=v.value,p.push(this.values[g])}catch(t){d.e(t)}finally{d.f()}y=[],m=jo(o);try{for(m.s();!(b=m.n()).done;)x=b.value,y.push(this.rows[x])}catch(t){m.e(t)}finally{m.f()}this.rows=y,this.values=p,this.valuesPerColor=i.orderPerColor(this.values);case 23:if(w=Array.from(Array(this.columns.length).keys()),S=new Array(w.length),"all"!==t&&"columns"!==t||this.clusteredHorizontal){e.next=42;break}for(this.clusteredHorizontal=!0,w=this.determineOrder(this.colClusterRoot),_=0,A=Object.entries(w);_<A.length;_++)M=No(A[_],2),T=M[0],E=M[1],S[E]=Number.parseInt(T);return k=Array.from(Array(this.rows.length).keys()),this.animatingCols=!0,e.next=33,r(k,S);case 33:for(this.animatingCols=!1,O=[],P=0,C=k;P<C.length;P++){R=C[P],I=[],j=jo(w);try{for(j.s();!(N=j.n()).done;)L=N.value,I.push(this.values[R][L])}catch(t){j.e(t)}finally{j.f()}O.push(I)}z=[],D=jo(w);try{for(D.s();!(F=D.n()).done;)U=F.value,z.push(this.columns[U])}catch(t){D.e(t)}finally{D.f()}this.columns=z,this.values=O,this.valuesPerColor=i.orderPerColor(this.values);case 42:this.redraw();case 43:case"end":return e.stop()}}),e,this)})))}},{key:"computeClusterRoots",value:function(){var t=this,e=this.settings.clusteringAlgorithm,n=this.settings.reorderer,r=this.rows.map((function(e,n){return new Eo(t.values[n].filter((function(t){return t.rowId==e.idx})).map((function(t){return t.value})),e.idx)}));this.rowClusterRoot=n.reorder(e.cluster(r)),this.verticalNodesPerDepth=this.bfsNodesPerDepth(this.rowClusterRoot);var i=this.columns.map((function(e,n){return new Eo(t.values.map((function(t){return t[n].value})),e.idx)}));this.colClusterRoot=n.reorder(e.cluster(i)),this.horizontalNodesPerDepth=this.bfsNodesPerDepth(this.colClusterRoot)}},{key:"resize",value:function(t,e){this.settings.width=t,this.settings.height=e,this.visElement.attr("height",this.pixelRatio*e),this.visElement.attr("width",this.pixelRatio*t),this.visElement.attr("style","width: ".concat(this.settings.width,"px; height: ").concat(this.settings.height,"px")),this.context.scale(this.pixelRatio,this.pixelRatio),this.originalViewPort={xTop:0,yTop:0,xBottom:t,yBottom:e},this.zoomed(this.lastZoomStatus)}},{key:"toSVG",value:function(){var t,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:14,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:20,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:2,i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:4,o=n,a="",s=jo(this.valuesPerColor);try{for(s.s();!(t=s.n()).done;){var u,c=No(t.value,2),l=c[0],f=c[1],h=jo(f);try{for(h.s();!(u=h.n()).done;){var p=No(u.value,2),d=p[0],v=p[1],g=v*(o+r),y=d*(o+r);a+='\n                    <rect width="'.concat(o,'" height="').concat(o,'" fill="').concat(l,'" x="').concat(g,'" y="').concat(y,'"></rect>\n                ')}}catch(t){h.e(t)}finally{h.f()}}}catch(t){s.e(t)}finally{s.f()}var m=new OffscreenCanvas(1,1),b=m.getContext("2d");b.font="".concat(e,"px 'Helvetica Neue', Helvetica, Arial, sans-serif");for(var x=o*this.columns.length+r*(this.columns.length-1)+i,w=Math.max((o-e)/2,0),S=x,_=0;_<this.rows.length;_++){var A=(o+r)*_+w;a+='\n                <text \n                    x="'.concat(x,'" \n                    y="').concat(A,'" \n                    font-size="').concat(e,'" \n                    dominant-baseline="hanging" \n                    fill="black"\n                    font-family="\'Helvetica Neue\', Helvetica, Arial, sans-serif"\n                >\n                    ').concat(this.rows[_].name,"\n                </text>\n            ");var M=b.measureText(this.rows[_].name).width+x;M>S&&(S=M)}for(var T=o*this.rows.length+r*(this.rows.length-1)+i,E=T,k=0;k<this.columns.length;k++){var O=(o+r)*k+w;a+='\n                <text \n                    x="'.concat(O,'" \n                    y="').concat(T,'" \n                    font-size="').concat(e,'" \n                    text-anchor="start" \n                    fill="black"\n                    transform="rotate(90, ').concat(O,", ").concat(T,')"\n                    font-family="\'Helvetica Neue\', Helvetica, Arial, sans-serif"\n                >\n                    ').concat(this.columns[k].name,"\n                </text>\n            ");var P=b.measureText(this.columns[k].name).width+T;P>E&&(E=P)}return'\n            <svg xmlns="http://www.w3.org/2000/svg" width="'.concat(Math.ceil(S),'" height="').concat(Math.ceil(E),'">\n                ').concat(a,"\n            </svg>\n        ")}},{key:"determineOrder",value:function(t){return t.values.map((function(t){return t.id}))}},{key:"determineSquareWidth",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.currentViewPort,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.textWidth,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:this.textHeight,r=this.determineDendrogramWidth(),i=t.xBottom-t.xTop-r-this.columns.length*this.settings.squarePadding-e,o=t.yBottom-t.yTop-r-this.rows.length*this.settings.squarePadding-n,a=Math.max(1,i/this.columns.length),s=Math.max(1,o/this.rows.length);return Math.min(a,s)}},{key:"determineDendrogramWidth",value:function(){return this.settings.dendrogramEnabled?this.settings.dendrogramWidth*this.lastZoomStatus.k:0}},{key:"computeTextStartX",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.currentViewPort,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.textWidth,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:this.textHeight;return t.xTop+this.determineDendrogramWidth()+this.determineSquareWidth(t,e,n)*this.columns.length+this.settings.squarePadding*(this.columns.length-1)+this.settings.visualizationTextPadding}},{key:"computeTextStartY",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.currentViewPort,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.textWidth,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:this.textHeight;return t.yTop+this.determineDendrogramWidth()+this.determineSquareWidth(t,e,n)*this.rows.length+this.settings.squarePadding*(this.rows.length-1)+this.settings.visualizationTextPadding}},{key:"zoomed",value:function(t){var e=t.k,n=t.x,r=t.y;this.lastZoomStatus={k:e,x:n,y:r};var i=n+this.computeTextStartX(this.originalViewPort,this.settings.initialTextWidth,this.settings.initialTextHeight)*e,o=r+this.computeTextStartY(this.originalViewPort,this.settings.initialTextWidth,this.settings.initialTextHeight)*e,a=function(t,n){return t>n?n:e>=1?Math.min(t,n):Math.max(t,n)};this.currentViewPort={xTop:n+this.originalViewPort.xTop*e,yTop:r+this.originalViewPort.yTop*e,xBottom:a(n+this.originalViewPort.xBottom*e,this.originalViewPort.xBottom),yBottom:a(r+this.originalViewPort.yBottom*e,this.originalViewPort.yBottom)},this.textWidth=this.currentViewPort.xBottom-i,this.textHeight=this.currentViewPort.yBottom-o,this.redraw()}},{key:"redraw",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:Array.from(Array(this.rows.length).keys()),e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:Array.from(Array(this.columns.length).keys()),n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:-1;this.redrawGrid(t,e,n),this.redrawRowTitles(t,n),this.redrawColumnTitles(e,n),this.redrawDendrogram(n)}},{key:"redrawGrid",value:function(t,e,n){-1===n&&(n=0);var r=this.determineSquareWidth(),i=this.determineDendrogramWidth();this.context.clearRect(0,0,this.settings.width,this.settings.height);var o,a=jo(this.valuesPerColor);try{for(a.s();!(o=a.n()).done;){var s=No(o.value,2),u=s[0],c=s[1];this.context.beginPath(),this.context.fillStyle=u;var l,f=jo(c);try{for(f.s();!(l=f.n()).done;){var h=No(l.value,2),p=h[0],d=h[1],v=this.currentViewPort.xTop+i+d*(r+this.settings.squarePadding),g=this.currentViewPort.yTop+i+p*(r+this.settings.squarePadding),y=this.currentViewPort.xTop+i+e[d]*(r+this.settings.squarePadding),m=this.currentViewPort.yTop+i+t[p]*(r+this.settings.squarePadding),b=v+(y-v)*n,x=g+(m-g)*n,w=b+(r+this.settings.squarePadding),S=x+(r+this.settings.squarePadding);w<0||b>this.settings.width||S<0||x>this.settings.height||(this.settings.highlightSelection&&p==this.highlightedRow&&d==this.highlightedColumn&&(this.context.save(),this.context.fillStyle=this.settings.maxColor,this.context.fillRect(b-this.settings.squarePadding,x-this.settings.squarePadding,r+2*this.settings.squarePadding,r+2*this.settings.squarePadding),this.context.restore()),this.context.fillRect(b,x,r,r))}}catch(t){f.e(t)}finally{f.f()}this.context.closePath()}}catch(t){a.e(t)}finally{a.f()}}},{key:"ellipsizeString",value:function(t,e){if(this.context.measureText(t).width>e){for(var n=t.length,r=t.substr(0,n)+"...";this.context.measureText(r).width>e&&n>0;)n--,r=t.substr(0,n)+"...";return 0===n?"":r}return t}},{key:"redrawRowTitles",value:function(t,e){-1===e&&(e=0);var n=this.determineSquareWidth(),r=this.determineDendrogramWidth(),i=Math.max(Math.floor((this.settings.fontSize+12)/(n+this.settings.squarePadding)),1),o=this.computeTextStartX(),a=Math.max((n-this.settings.fontSize)/2,0);this.context.save(),this.context.fillStyle=this.settings.labelColor,this.context.textBaseline="top",this.context.textAlign="start",this.context.font="".concat(this.settings.fontSize,"px Arial, sans-serif");for(var s=0;s<this.rows.length;s+=i){var u=this.rows[s];this.settings.highlightSelection&&s==this.highlightedRow&&(this.context.save(),this.context.fillStyle=this.settings.highlightFontColor,this.context.font="".concat(this.settings.highlightFontSize,"px 'Helvetica Neue', Helvetica, Arial, sans-serif"),a=Math.max((n-this.settings.highlightFontSize)/2,0));var c=this.currentViewPort.yTop+r+(n+this.settings.squarePadding)*s+a,l=c+(this.currentViewPort.yTop+r+(n+this.settings.squarePadding)*t[s]+a-c)*e;this.context.fillText(this.ellipsizeString(u.name,this.textWidth),o,l),this.settings.highlightSelection&&s==this.highlightedRow&&this.context.restore()}this.context.restore()}},{key:"redrawColumnTitles",value:function(t,e){-1===e&&(e=0);var n=this.determineSquareWidth(),r=this.determineDendrogramWidth(),i=Math.max(Math.floor((this.settings.fontSize+12)/(n+this.settings.squarePadding)),1),o=this.computeTextStartY(),a=Math.max((n-this.settings.fontSize)/2,0);this.context.save(),this.context.rotate(90*Math.PI/180),this.context.fillStyle=this.settings.labelColor,this.context.textBaseline="bottom",this.context.textAlign="start",this.context.font="".concat(this.settings.fontSize,"px Arial, sans-serif");for(var s=0;s<this.columns.length;s+=i){var u=this.columns[s];this.settings.highlightSelection&&s==this.highlightedColumn&&(this.context.save(),this.context.fillStyle=this.settings.highlightFontColor,this.context.font="".concat(this.settings.highlightFontSize,"px 'Helvetica Neue', Helvetica, Arial, sans-serif"),a=Math.max((n-this.settings.highlightFontSize)/2,0));var c=-(this.currentViewPort.xTop+r+(n+this.settings.squarePadding)*s+a),l=c+(-(this.currentViewPort.xTop+r+(n+this.settings.squarePadding)*t[s]+a)-c)*e;this.context.fillText(this.ellipsizeString(u.name,this.textHeight),o,l),this.settings.highlightSelection&&s==this.highlightedColumn&&this.context.restore()}this.context.restore()}},{key:"bfsNodesPerDepth",value:function(t){var e=[],n=[];for(n.push([t,0]);n.length>0;){var r=No(n.shift(),2),i=r[0],o=r[1];e.length<=o&&e.push([]),e[o].push(i),i.leftChild&&n.push([i.leftChild,o+1]),i.rightChild&&n.push([i.rightChild,o+1])}return e}},{key:"redrawDendrogram",value:function(t){this.settings.dendrogramEnabled&&(this.redrawHorizontalDendrogram(t),this.redrawVerticalDendrogram(t))}},{key:"computeDendrogramColor",value:function(t,e,n){return-1!==n&&e?mr(Nn("#d3d3d3"),Nn(this.settings.dendrogramColor))(n):t?this.settings.dendrogramColor:"#d3d3d3"}},{key:"redrawVerticalDendrogram",value:function(t){this.context.save();for(var e=this.computeDendrogramColor(this.clusteredVertical,this.animatingRows,t),n=this.determineSquareWidth(),r=this.settings.dendrogramWidth*this.lastZoomStatus.k,i=new Io(this.context),o=this.currentViewPort.yTop+r+n/2,a=new Map,s=this.determineOrder(this.rowClusterRoot),u=0;u<s.length;u++)a.set(s[u],[this.currentViewPort.xTop+r,u*(n+this.settings.squarePadding)+o]);for(var c=r/this.rows.length,l=this.currentViewPort.xTop+r-c,f=this.verticalNodesPerDepth.length-1;f>0;f--)for(var h=0;h<this.verticalNodesPerDepth[f].length;h+=2){var p=this.verticalNodesPerDepth[f][h],d=this.verticalNodesPerDepth[f][h+1],v=p.parent,g=No(a.get(p.id),2),y=g[0],m=g[1],b=No(a.get(d.id),2),x=b[0],w=b[1];if(this.context.beginPath(),i.renderLine(y,m,l,m,this.settings.dendrogramLineWidth,e),i.renderLine(x,w,l,w,this.settings.dendrogramLineWidth,e),i.renderLine(l,m,l,w,this.settings.dendrogramLineWidth,e),this.context.closePath(),v){var S=Math.min(m,w)+Math.abs(m-w)/2;a.set(v.id,[l,S])}l-=c}if(!this.clusteredVertical){this.context.rotate(-90*Math.PI/180),this.context.fillStyle=this.settings.labelColor;var _=24*this.lastZoomStatus.k;this.context.font="".concat(_,"px 'Helvetica Neue', Helvetica, Arial, sans-serif");var A=this.context.measureText("Click to cluster").width;this.context.fillText("Click to cluster",-(this.currentViewPort.yTop+r+this.rows.length*(n+this.settings.squarePadding)/2)-A/2,this.currentViewPort.xTop+r/2+_/2)}this.context.restore()}},{key:"redrawHorizontalDendrogram",value:function(t){this.context.save();for(var e=this.computeDendrogramColor(this.clusteredHorizontal,this.animatingCols,t),n=this.determineSquareWidth(),r=this.settings.dendrogramWidth*this.lastZoomStatus.k,i=new Io(this.context),o=this.currentViewPort.xTop+n/2+r,a=new Map,s=this.determineOrder(this.colClusterRoot),u=0;u<s.length;u++)a.set(s[u],[u*(n+this.settings.squarePadding)+o,this.currentViewPort.yTop+r]);for(var c=r/this.columns.length,l=this.currentViewPort.yTop+r-c,f=this.horizontalNodesPerDepth.length-1;f>0;f--)for(var h=0;h<this.horizontalNodesPerDepth[f].length;h+=2){var p=this.horizontalNodesPerDepth[f][h],d=this.horizontalNodesPerDepth[f][h+1],v=p.parent,g=No(a.get(p.id),2),y=g[0],m=g[1],b=No(a.get(d.id),2),x=b[0],w=b[1];if(this.context.beginPath(),i.renderLine(y,m,y,l,this.settings.dendrogramLineWidth,e),i.renderLine(x,w,x,l,this.settings.dendrogramLineWidth,e),i.renderLine(y,l,x,l,this.settings.dendrogramLineWidth,e),this.context.closePath(),v){var S=Math.min(y,x)+Math.abs(y-x)/2;a.set(v.id,[S,l])}l-=c}if(!this.clusteredHorizontal){this.context.fillStyle=this.settings.labelColor;var _=24*this.lastZoomStatus.k;this.context.font="".concat(_,"px 'Helvetica Neue', Helvetica, Arial, sans-serif");var A=this.context.measureText("Click to cluster").width;this.context.fillText("Click to cluster",this.currentViewPort.xTop+r+this.columns.length*(n+this.settings.squarePadding)/2-A/2,this.currentViewPort.yTop+r/2+_/2)}this.context.restore()}},{key:"initTooltip",value:function(){return ri("body").append("div").attr("class","tip").style("position","absolute").style("z-index","10").style("visibility","hidden")}},{key:"findRowAndColForPosition",value:function(t,e){var n=this.determineDendrogramWidth(),r=t-this.currentViewPort.xTop-n,i=e-this.currentViewPort.yTop-n,o=this.determineSquareWidth();return[Math.floor(i/(o+this.settings.squarePadding)),Math.floor(r/(o+this.settings.squarePadding))]}},{key:"tooltipMove",value:function(t){var e=t.target.getBoundingClientRect(),n=No(this.findRowAndColForPosition(t.clientX-e.left,t.clientY-e.top),2),r=n[0],i=n[1];if(r<0||r>=this.rows.length||i<0||i>=this.columns.length)return this.settings.enableTooltips&&this.tooltip&&this.tooltip.style("visibility","hidden"),this.highlightedRow=-1,this.highlightedColumn=-1,void(this.settings.highlightSelection&&this.redraw());this.highlightedRow=r,this.highlightedColumn=i,this.settings.highlightSelection&&this.redraw(),this.settings.enableTooltips&&this.tooltip&&this.tooltip.html(this.settings.getTooltip(this.values[r][i],this.rows[r],this.columns[i])).style("top",t.pageY+10+"px").style("left",t.pageX+10+"px").style("visibility","visible")}},{key:"click",value:function(t){if(this.settings.dendrogramEnabled){var e=this.determineDendrogramWidth(),n=this.determineSquareWidth(),r=t.target.getBoundingClientRect(),i=t.clientX-r.left,o=t.clientY-r.top;i>=this.currentViewPort.xTop&&i<=this.currentViewPort.xTop+e&&o>=this.currentViewPort.yTop+e&&o<=this.currentViewPort.yTop+e+this.rows.length*(n+this.settings.squarePadding)?this.cluster("rows"):i>=this.currentViewPort.xTop+e&&i<=this.currentViewPort.xTop+e+this.columns.length*(n+this.settings.squarePadding)&&o>=this.currentViewPort.yTop&&o<=this.currentViewPort.yTop+e&&this.cluster("columns")}}}])&&Fo(e.prototype,n),t}();function qo(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var Vo=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t)}var e,n;return e=t,(n=[{key:"getDistance",value:function(t){for(var e=[],n=0;n<t.length;n++){for(var r=[],i=0;i<=n;i++)r.push(this.getPearsonCorrelationBetween2Samples(t[n],t[i]));e.push(r)}return e}},{key:"getPearsonCorrelationBetween2Samples",value:function(t,e){for(var n=function(t,e){return t+e},r=t.reduce(n,0)/t.length,i=e.reduce(n,0)/e.length,o=0,a=0,s=0;s<t.length;s++)o+=(t[s]-r)*(e[s]-i),a+=Math.sqrt(Math.pow(t[s]-r,2))*Math.sqrt(Math.pow(e[s]-i,2));return 1-o/a}}])&&qo(e.prototype,n),t}(),Wo=function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t)};function Ho(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}Wo.DEFAULT_COLORS=["#f9f0ab","#e8e596","#f0e2a3","#ede487","#efd580","#f1cb82","#f1c298","#e8b598","#d5dda1","#c9d2b5","#aec1ad","#a7b8a8","#b49a3d","#b28647","#a97d32","#b68334","#d6a680","#dfad70","#a2765d","#9f6652","#b9763f","#bf6e5d","#af643c","#9b4c3f","#72659d","#8a6e9e","#8f5c85","#934b8b","#9d4e87","#92538c","#8b6397","#716084","#2e6093","#3a5988","#4a5072","#393e64","#aaa1cc","#e0b5c9","#e098b0","#ee82a2","#ef91ac","#eda994","#eeb798","#ecc099","#f6d5aa","#f0d48a","#efd95f","#eee469","#dbdc7f","#dfd961","#ebe378","#f5e351"],Wo.FIXED_COLORS=["#1f77b4","#aec7e8","#ff7f0e","#ffbb78","#2ca02c","#98df8a","#d62728","#ff9896","#9467bd","#c5b0d5","#8c564b","#c49c94","#e377c2","#f7b6d2","#7f7f7f","#c7c7c7","#bcbd22","#dbdb8d","#17becf","#9edae5","#393b79","#5254a3","#6b6ecf","#9c9ede","#637939","#8ca252","#b5cf6b","#cedb9c","#8c6d31","#bd9e39","#e7ba52","#e7cb94","#843c39","#ad494a","#d6616b","#e7969c","#7b4173","#a55194","#ce6dbd","#de9ed6","#3182bd","#6baed6","#9ecae1","#c6dbef","#e6550d","#fd8d3c","#fdae6b","#fdd0a2","#31a354","#74c476","#a1d99b","#c7e9c0","#756bb1","#9e9ac8","#bcbddc","#dadaeb","#636363","#969696","#bdbdbd","#d9d9d9"],Wo.MATERIAL_DESIGN_COLORS=["#ef5350","#ec407a","#ab47bc","#7e57c2","#5c6bc0","#42a5f5","#29b6f6","#26c6da","#26a69a","#66bb6a","#9ccc65","#d4e157","#ffee58","#ffca28","#ffa726","#ff7043","#8d6e63"];var Yo=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t)}var e,n;return e=t,n=[{key:"stringHash",value:function(t){return t.split("").reduce((function(t,e){var n=(t<<5)-t+e.charCodeAt(0);return n&n}),0)}}],null&&Ho(e.prototype,null),n&&Ho(e,n),t}();function Go(t){return(Go="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Xo(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function $o(t,e){return($o=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function Zo(t,e){return!e||"object"!==Go(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function Ko(t){return(Ko=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var Jo=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&$o(t,e)}(i,t);var e,n,r=(e=i,n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,r=Ko(e);if(n){var i=Ko(this).constructor;t=Reflect.construct(r,arguments,i)}else t=r.apply(this,arguments);return Zo(this,t)});function i(){var t;return Xo(this,i),(t=r.apply(this,arguments)).radius=300,t.breadcrumbWidth=200,t.className="sunburst",t.useFixedColors=!1,t.colorPalette=Wo.DEFAULT_COLORS,t.fixedColorPalette=Wo.FIXED_COLORS,t.enableBreadcrumbs=!0,t.levels=4,t.animationDuration=1e3,t.rerootCallback=function(){},t.fixedColorHash=function(t){return Yo.stringHash(t.name)},t.getTooltip=function(e){return"\n            <style>\n                .unipept-tooltip {\n                    padding: 10px;\n                    border-radius: 5px; \n                    background: rgba(0, 0, 0, 0.8); \n                    color: #fff;\n                }\n                \n                .unipept-tooltip div, .unipept-tooltip a {\n                    font-family: Roboto, 'Helvetica Neue', Helvetica, Arial, sans-serif;\n                }\n                \n                .unipept-tooltip div {\n                    font-weight: bold;\n                }\n            </style>\n            <div class=\"unipept-tooltip\">\n                <div>\n                    ".concat(t.getTooltipTitle(e),"\n                </div>\n                <a>\n                    ").concat(t.getTooltipText(e),"\n                </a>\n            </div>\n        ")},t.getTooltipTitle=function(t){return t.name},t.getTooltipText=function(t){return"".concat(t.count," hits")},t.getLabel=function(t){return"empty"===t.name?"":t.name},t.getTitleText=t.getLabel,t}return i}(ao);function Qo(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function ta(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var ea=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t)}var n,r;return n=t,(r=[{key:"preprocessData",value:function(n){var r=[];if(n.children){var i,o=function(t,e){var n;if("undefined"==typeof Symbol||null==t[Symbol.iterator]){if(Array.isArray(t)||(n=function(t,e){if(t){if("string"==typeof t)return Qo(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Qo(t,e):void 0}}(t))||e&&t&&"number"==typeof t.length){n&&(t=n);var r=0,i=function(){};return{s:i,n:function(){return r>=t.length?{done:!0}:{done:!1,value:t[r++]}},e:function(t){throw t},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,a=!0,s=!1;return{s:function(){n=t[Symbol.iterator]()},n:function(){var t=n.next();return a=t.done,t},e:function(t){s=!0,o=t},f:function(){try{a||null==n.return||n.return()}finally{if(s)throw o}}}}(n.children);try{for(o.s();!(i=o.n()).done;){var a=i.value;r.push(this.preprocessData(a))}}catch(t){o.e(t)}finally{o.f()}}return r.length>0&&0!==n.count&&r.push(new e(-1,"empty",[],n.count,n.selfCount)),new e(n.id||++t.idCounter,n.name||"",r,n.count,n.selfCount,n.extra)}}])&&ta(n.prototype,r),t}();function na(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}ea.idCounter=0;var ra=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t)}var e,n;return e=t,n=[{key:"initTooltip",value:function(){return ri("body").append("div").attr("class","tip").style("position","absolute").style("z-index","10").style("visibility","hidden")}}],null&&na(e.prototype,null),n&&na(e,n),t}();function ia(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var oa=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t)}var e,n;return e=t,n=[{key:"isParentOf",value:function(e,n,r){return!(n.depth>=r)&&(e===n||!!e.children&&e.children.some((function(e){return t.isParentOf(e,n,r)})))}}],null&&ia(e.prototype,null),n&&ia(e,n),t}();function aa(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var sa=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t)}var e,n;return e=t,n=[{key:"getReadableColorFor",value:function(e){var n="#000";try{n=t.brightness(Oe(e))<125?"#eee":"#000"}catch(t){}return n}},{key:"brightness",value:function(t){return.299*t.r+.587*t.g+.114*t.b}}],null&&aa(e.prototype,null),n&&aa(e,n),t}();function ua(t){return function(t){if(Array.isArray(t))return ca(t)}(t)||function(t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t))return Array.from(t)}(t)||function(t,e){if(t){if("string"==typeof t)return ca(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?ca(t,e):void 0}}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ca(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function la(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function fa(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var ha=function(t,e,n,r){return new(n||(n=Promise))((function(i,o){function a(t){try{u(r.next(t))}catch(t){o(t)}}function s(t){try{u(r.throw(t))}catch(t){o(t)}}function u(t){t.done?i(t.value):function(t){return t instanceof n?t:new n((function(e){e(t)}))}(t.value).then(a,s)}u((r=r.apply(t,e||[])).next())}))},pa=function(){function t(e,n){var r=this,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:new Jo;la(this,t),this.element=e,this.colorCounter=-1,this.currentMaxLevel=4,this.arcData=[],this.textData=[],this.previousRoot=null,this.previousMaxLevel=this.currentMaxLevel,this.settings=this.fillOptions(i);var o=new ea,a=o.preprocessData(n);this.settings.enableTooltips&&(this.tooltip=ra.initTooltip()),this.currentMaxLevel=this.settings.levels,this.xScale=Qr().range([0,2*Math.PI]),this.yScale=Qr().domain([0,1]).range([0,this.settings.radius]);var s=Hn(a);s.sum((function(t){return t.children.length>0?0:t.selfCount}));var u=Qn();this.data=u(s).descendants(),this.arc=Ri().startAngle((function(t){return Math.max(0,Math.min(2*Math.PI,r.xScale(t.x0)))})).endAngle((function(t){return Math.max(0,Math.min(2*Math.PI,r.xScale(t.x1)))})).innerRadius((function(t){return Math.max(0,t.y0?r.yScale(t.y0):t.y0)})).outerRadius((function(t){return Math.max(0,r.yScale(t.y1)+1)})),this.initCss(),this.element.innerHTML="",this.breadCrumbs=ri(this.element).append("div").attr("id",Math.floor(Math.random()*Math.pow(2,16))+"-breadcrumbs").attr("class","sunburst-breadcrumbs").append("ul");var c=ri(this.element).append("svg").attr("version","1.1").attr("xmlns","http://www.w3.org/2000/svg").attr("viewBox","0 0 ".concat(this.settings.width," ").concat(this.settings.height)).attr("width",this.settings.width).attr("height",this.settings.height).attr("overflow","hidden").style("font-family","'Helvetica Neue', Helvetica, Arial, sans-serif");c.append("style").attr("type","text/css").html(".hidden{ visibility: hidden;}"),this.visGElement=c.append("g").attr("transform","translate("+this.settings.radius+","+this.settings.radius+")"),this.reset()}var e,n;return e=t,(n=[{key:"reset",value:function(){this.click(this.data[0])}},{key:"reroot",value:function(t){var e=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],n=this.data.find((function(e){return e.data.id===t}));n&&this.click(n,e)}},{key:"fillOptions",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:void 0,e=new Jo;return Object.assign(e,t)}},{key:"maxY",value:function(t){var e=this;return t.children?Math.max.apply(Math,ua(t.children.map((function(t){return e.maxY(t)})))):t.y1}},{key:"color",value:function(t){var e=this;if("empty"===t.name)return"white";if(this.settings.useFixedColors)return this.settings.fixedColorPalette[Math.abs(this.settings.fixedColorHash(t))%this.settings.fixedColorPalette.length];if(t.children.length>0){var n=t.children.map((function(t){return e.color(t)})),r=Le(n[0]),i=Le(n[1]);return 1===t.children.length||"empty"===t.children[1].name?Le(r.h,r.s,.98*r.l):Le((r.h+i.h)/2,(r.s+i.s)/2,(r.l+i.l)/2)}return t.extra.color||(t.extra.color=this.getColor()),t.extra.color}},{key:"getColor",value:function(){return this.colorCounter=(this.colorCounter+1)%this.settings.colorPalette.length,this.settings.colorPalette[this.colorCounter]}},{key:"initCss",value:function(){var t=this.settings.className;this.element.className+=" "+t;var e=this.element.ownerDocument.createElement("style");e.appendChild(this.element.ownerDocument.createTextNode("\n.".concat(t," {\n    font-family: Roboto,'Helvetica Neue',Helvetica,Arial,sans-serif;\n    width: ").concat(this.settings.width+this.settings.breadcrumbWidth,"px;\n}\n.").concat(t," .sunburst-breadcrumbs {\n    width: 176px;\n    float: right;\n    margin-right: 15px;\n    margin-top: 10px;\n    padding-left: 5px;\n}\n.").concat(t," .sunburst-breadcrumbs ul {\n    padding-left: 0;\n    list-style: none;\n}\n.").concat(t," .sunburst-breadcrumbs .crumb {\n    margin-bottom: 5px;\n    cursor: pointer;\n}\n.").concat(t," .sunburst-breadcrumbs .crumb svg {\n    float: left;\n    margin-right: 3px;\n}\n.").concat(t," .sunburst-breadcrumbs .crumb p {\n    white-space: nowrap;\n    text-overflow: ellipsis;\n    overflow: hidden;\n    margin: 0;\n    font-size: 14px;\n}\n.").concat(t," .sunburst-breadcrumbs .crumb .percentage {\n    font-size: 11px;\n}"))),this.element.ownerDocument.head.appendChild(e)}},{key:"arcTween",value:function(t,e){var n=Math.min(this.maxY(t),t.y0+e.settings.levels*(t.y1-t.y0)),r=yr(e.xScale.domain(),[t.x0,t.x1]),i=yr(e.yScale.domain(),[t.y0,n]),o=yr(e.yScale.range(),[t.y0?20:0,e.settings.radius]);return function(t){return function(n){return e.xScale.domain(r(n)),e.yScale.domain(i(n)).range(o(n)),e.arc(t)}}}},{key:"tooltipIn",value:function(t,e){this.settings.enableTooltips&&this.tooltip&&e.depth<this.currentMaxLevel&&"empty"!==e.data.name&&this.tooltip.html(this.settings.getTooltip(e.data)).style("top",t.pageY+10+"px").style("left",t.pageX+10+"px").style("visibility","visible")}},{key:"tooltipMove",value:function(t,e){this.settings.enableTooltips&&this.tooltip&&this.tooltip.style("top",t.pageY+10+"px").style("left",t.pageX+10+"px")}},{key:"tooltipOut",value:function(t,e){this.settings.enableTooltips&&this.tooltip&&this.tooltip.style("visibility","hidden")}},{key:"computeAvailableSpace",value:function(t){return 2*Math.max(0,this.yScale(t.y1)+1)*Math.PI*(Math.max(0,Math.min(2*Math.PI,this.xScale(t.x1))-Math.max(0,Math.min(2*Math.PI,this.xScale(t.x0))))/(2*Math.PI))}},{key:"click",value:function(t){var e=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];"empty"===t.data.name||this.previousRoot&&this.previousRoot.data.id===t.data.id||(this.previousRoot=t,this.settings.enableBreadcrumbs&&this.setBreadcrumbs(t),this.settings.rerootCallback&&e&&this.settings.rerootCallback(t.data),this.currentMaxLevel=t.depth+this.settings.levels,this.renderArcs(t),this.renderText(t))}},{key:"renderArcs",value:function(t){return ha(this,void 0,void 0,regeneratorRuntime.mark((function e(){var n,r,i,o,a=this;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r=this.data.filter((function(e){return oa.isParentOf(t,e,a.currentMaxLevel+2)})),t.parent&&r.push(t.parent),i=r.filter((function(t){return!a.arcData.includes(t)})),o=(n=this.arcData).concat.apply(n,ua(i)),this.visGElement.selectAll("path").data([]).exit().remove(),this.path=this.visGElement.selectAll("path").data(o).enter().insert("path").attr("class","arc").attr("id",(function(t,e){return"path-"+e})).attr("d",this.arc).attr("fill-rule","evenodd").style("fill",(function(t){return a.color(t.data)})).attr("fill-opacity",(function(t){return t.depth>=a.previousMaxLevel?.2:1})).on("click",(function(t,e){e.depth<a.currentMaxLevel&&a.click(e)})).on("mouseover",(function(t,e){return a.tooltipIn(t,e)})).on("mousemove",(function(t,e){return a.tooltipMove(t,e)})).on("mouseout",(function(t,e){return a.tooltipOut(t,e)})),e.next=8,new Promise((function(e){a.path.transition().duration(a.settings.animationDuration).attrTween("d",a.arcTween(t,a)).attr("class",(function(t){return t.depth>=a.currentMaxLevel?"arc toHide":"arc"})).attr("fill-opacity",(function(t){return t.depth>=a.currentMaxLevel?.2:1})).on("end",(function(){e()}))}));case 8:this.previousMaxLevel=this.currentMaxLevel,this.arcData=r;case 10:case"end":return e.stop()}}),e,this)})))}},{key:"renderText",value:function(t){return ha(this,void 0,void 0,regeneratorRuntime.mark((function e(){var n,r,i,o,a,s,u,c,l=this;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r=this.data.filter((function(e){return oa.isParentOf(t,e,l.currentMaxLevel)})),i=r.filter((function(t){return!l.textData.includes(t)})),o=(n=this.textData).concat.apply(n,ua(i)),t.parent&&o.splice(o.indexOf(t.parent),1),a=this,(s="undefined"!=typeof OffscreenCanvas)&&(c=new OffscreenCanvas(1,1),(u=c.getContext("2d")).font=u.font="16px 'Helvetica Neue', Helvetica, Arial, sans-serif"),this.visGElement.selectAll("text").data([]).exit().remove(),this.text=this.visGElement.selectAll("text").data(o).enter().append("text").style("fill",(function(t){return sa.getReadableColorFor(l.color(t.data))})).style("fill-opacity",0).style("font-family","font-family: Helvetica, 'Super Sans', sans-serif").style("pointer-events","none").attr("dy",".2em").text((function(t){return l.settings.getLabel(t.data)})).style("font-size",(function(t){var e=s?u.measureText(this.textContent).width:this.getComputedTextLength();return Math.floor(Math.min(a.settings.radius/a.settings.levels/e*10+1,12))+"px"})),e.next=11,new Promise((function(e){l.text.transition().duration(l.settings.animationDuration).attrTween("text-anchor",(function(t){return function(e){return l.xScale(t.x0+(t.x1-t.x0)/2)>Math.PI?"end":"start"}})).attrTween("dx",(function(t){return function(e){return l.xScale(t.x0+(t.x1-t.x0)/2)>Math.PI?"-4px":"4px"}})).attrTween("transform",(function(t){return function(e){var n=180*l.xScale(t.x0+(t.x1-t.x0)/2)/Math.PI-90;return"rotate(".concat(n,")translate(").concat(l.yScale(t.y0),")rotate(").concat(n>90?-180:0,")")}})).styleTween("fill-opacity",(function(t){var e=Number.parseInt(ri(this).style("font-size").replace("px",""));return function(n){return a.computeAvailableSpace(t)>e?n.toString():"0"}})).on("end",(function(n){var r=a.computeAvailableSpace(n),i=ri(this);i.style("visibility",r>Number.parseInt(i.style("font-size").replace("px",""))&&oa.isParentOf(t,n,a.currentMaxLevel)?"visible":"hidden"),e()}))}));case 11:this.textData=r;case 12:case"end":return e.stop()}}),e,this)})))}},{key:"setBreadcrumbs",value:function(t){for(var e=this,n=[],r=t;r;)n.push(r),r=r.parent;n.reverse().shift();var i=Ri().innerRadius(0).outerRadius(15).startAngle(0).endAngle((function(t){return 2*Math.PI*t.data.count/t.parent.data.count}));this.breadCrumbs.selectAll(".crumb").data(n).enter().append("li").on("click",(function(t,n){e.click(n.parent)})).attr("class","crumb").style("opacity","0").attr("title",(function(t){return e.settings.getTitleText(t.data)})).html((function(t){var e;return"\n<p class='name'>".concat(t.data.name,"</p>\n<p class='percentage'>").concat(Math.round(100*t.data.count/t.parent.data.count),"% of ").concat(null===(e=t.parent)||void 0===e?void 0:e.data.name,"</p>")})).insert("svg",":first-child").attr("width",30).attr("height",30).append("path").attr("d",i).attr("transform","translate(15, 15)").attr("fill",(function(t){return e.color(t.data)})),this.breadCrumbs.selectAll(".crumb").transition().duration(this.settings.animationDuration).style("opacity","1"),this.breadCrumbs.selectAll(".crumb").data(n).exit().transition().duration(this.settings.animationDuration).style("opacity","0").remove()}}])&&fa(e.prototype,n),t}();function da(t){return(da="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function va(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function ga(t,e){return(ga=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function ya(t,e){return!e||"object"!==da(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function ma(t){return(ma=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var ba=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&ga(t,e)}(i,t);var e,n,r=(e=i,n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,r=ma(e);if(n){var i=ma(this).constructor;t=Reflect.construct(r,arguments,i)}else t=r.apply(this,arguments);return ya(this,t)});function i(){var t;return va(this,i),(t=r.apply(this,arguments)).className="treemap",t.levels=void 0,t.labelHeight=10,t.colorRoot="#104B7D",t.colorLeaf="#fdffcc",t.colorBreadcrumbs="#FF8F00",t.rerootCallback=function(){},t.getBreadcrumbTooltip=function(t){return t.name},t.getTooltip=function(e){return"\n            <style>\n                .unipept-tooltip {\n                    padding: 10px;\n                    border-radius: 5px; \n                    background: rgba(0, 0, 0, 0.8); \n                    color: #fff;\n                }\n                \n                .unipept-tooltip div, .unipept-tooltip a {\n                    font-family: Roboto, 'Helvetica Neue', Helvetica, Arial, sans-serif;\n                }\n                \n                .unipept-tooltip div {\n                    font-weight: bold;\n                }\n            </style>\n            <div class=\"unipept-tooltip\">\n                <div>\n                    ".concat(t.getTooltipTitle(e),"\n                </div>\n                <a>\n                    ").concat(t.getTooltipText(e),"\n                </a>\n            </div>\n        ")},t.getTooltipTitle=function(t){return t.name},t.getTooltipText=function(t){return"".concat(t.count," hits")},t.getLabel=function(t){return t.name},t.getLevel=function(t){return t.depth},t}return i}(ao);function xa(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function wa(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var Sa=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t)}var n,r;return n=t,(r=[{key:"preprocessData",value:function(n){var r=[];if(n.children){var i,o=function(t,e){var n;if("undefined"==typeof Symbol||null==t[Symbol.iterator]){if(Array.isArray(t)||(n=function(t,e){if(t){if("string"==typeof t)return xa(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?xa(t,e):void 0}}(t))||e&&t&&"number"==typeof t.length){n&&(t=n);var r=0,i=function(){};return{s:i,n:function(){return r>=t.length?{done:!0}:{done:!1,value:t[r++]}},e:function(t){throw t},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,a=!0,s=!1;return{s:function(){n=t[Symbol.iterator]()},n:function(){var t=n.next();return a=t.done,t},e:function(t){s=!0,o=t},f:function(){try{a||null==n.return||n.return()}finally{if(s)throw o}}}}(n.children);try{for(o.s();!(i=o.n()).done;){var a=i.value;r.push(this.preprocessData(a))}}catch(t){o.e(t)}finally{o.f()}}return new e(n.id||++t.idCounter,n.name||"",r,n.count,n.selfCount,n.extra)}}])&&wa(n.prototype,r),t}();function _a(t,e){var n;if("undefined"==typeof Symbol||null==t[Symbol.iterator]){if(Array.isArray(t)||(n=function(t,e){if(t){if("string"==typeof t)return Aa(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Aa(t,e):void 0}}(t))||e&&t&&"number"==typeof t.length){n&&(t=n);var r=0,i=function(){};return{s:i,n:function(){return r>=t.length?{done:!0}:{done:!1,value:t[r++]}},e:function(t){throw t},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,a=!0,s=!1;return{s:function(){n=t[Symbol.iterator]()},n:function(){var t=n.next();return a=t.done,t},e:function(t){s=!0,o=t},f:function(){try{a||null==n.return||n.return()}finally{if(s)throw o}}}}function Aa(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function Ma(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function Ta(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}Sa.idCounter=0;var Ea=function(){function t(e,n){var r,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:new ba;Ma(this,t),this.element=e,this.childParentRelations=new Map,this.nodeId=0,this.settings=this.fillOptions(i),this.settings.enableTooltips&&(this.tooltip=ra.initTooltip()),this.initCss();var o=new Sa,a=Hn(o.preprocessData(n));a.sum((function(t){return t.children.length>0?0:t.count})),a.sort((function(t,e){return e.value-t.value})),this.partition=hr(),this.partition.size([this.settings.width+1,this.settings.height+1]).paddingTop(this.settings.labelHeight),this.data=this.partition(a).descendants(),this.settings.levels||(this.settings.levels=this.data[0].height);var s,u=_a(this.data);try{for(u.s();!(s=u.n()).done;){var c=s.value;this.childParentRelations.set(c.data,null===(r=c.parent)||void 0===r?void 0:r.data)}}catch(t){u.e(t)}finally{u.f()}this.currentRoot=this.data[0],this.colorScale=Qr().domain([0,this.settings.levels]).range([this.settings.colorRoot,this.settings.colorLeaf]).interpolate(mr),this.breadCrumbs=ri(this.element).append("div").attr("class","breadcrumbs").style("position","relative").style("width",this.settings.width+"px").style("height","20px").style("background-color",this.settings.colorBreadcrumbs),this.treemap=ri(this.element).append("div").style("position","relative").style("width",this.settings.width+"px").style("height",this.settings.height+"px"),this.render(this.currentRoot)}var e,n;return e=t,(n=[{key:"resize",value:function(t,e){this.settings.width=t,this.settings.height=e,this.partition.size([t+1,e+1]),this.breadCrumbs.style("width",this.settings.width+"px"),this.treemap.style("width",this.settings.width+"px"),this.treemap.style("height",this.settings.height+"px"),this.render(this.currentRoot,!1)}},{key:"reroot",value:function(t){var e=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],n=this.data.find((function(e){return e.data.id===t}));n&&this.render(n,e)}},{key:"fillOptions",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:void 0,e=new ba;return Object.assign(e,t)}},{key:"initCss",value:function(){var t=this.settings.className;this.element.className+=" "+t;var e=this.element.ownerDocument.createElement("style");e.appendChild(this.element.ownerDocument.createTextNode("\n            .".concat(t," {\n                font-family: Arial,sans-serif;\n            }\n            .").concat(t," .node {\n                font-size: 9px;\n                line-height: 10px;\n                overflow: hidden;\n                position: absolute;\n                text-indent: 2px;\n                text-align: center;\n                text-overflow: ellipsis;\n                cursor: pointer;\n            }\n            .").concat(t," .node:hover {\n                outline: 1px solid white;\n            }\n            .").concat(t," .breadcrumbs {\n                font-size: 11px;\n                line-height: 20px;\n                padding-left: 5px;\n                font-weight: bold;\n                color: white;\n                box-sizing: border-box;\n            }\n            .full-screen .").concat(t," .breadcrumbs {\n                width: 100% !important;\n            }\n            .").concat(t," .crumb {\n                cursor: pointer;\n            }\n            .").concat(t," .crumb .link:hover {\n                text-decoration: underline;\n            }\n            .").concat(t,' .breadcrumbs .crumb + .crumb::before {\n                content: " > ";\n                cursor: default;\n            }\n        '))),this.element.ownerDocument.head.append(e)}},{key:"render",value:function(t){var e=this,n=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];this.currentRoot=t,this.setBreadcrumbs();var r=Hn(t.data);r.sum((function(t){return t.children.length>0?0:t.count})),r.sort((function(t,e){return e.value-t.value}));var i=this.treemap.selectAll(".node").data(this.partition(r).descendants(),(function(t){return t.data.id||(t.data.id=++e.nodeId)})),o=i.enter().append("div").attr("class","node").style("background",(function(t){return e.colorScale(e.settings.getLevel(t))})).style("color",(function(t){return sa.getReadableColorFor(e.colorScale(e.settings.getLevel(t)).toString())})).style("left","0px").style("top","0px").style("width","0px").style("height","0px").text((function(t){return e.settings.getLabel(t.data)})).on("click",(function(t,n){return e.render(n)})).on("contextmenu",(function(t,n){t.preventDefault(),e.currentRoot.parent&&e.render(e.currentRoot.parent)})).on("mouseover",(function(t,n){return e.tooltipIn(t,n)})).on("mousemove",(function(t,n){return e.tooltipMove(t,n)})).on("mouseout",(function(t,n){return e.tooltipOut(t,n)}));o.merge(i).order().transition().call((function(t){t.style("left",(function(t){return t.x0+"px"})),t.style("top",(function(t){return t.y0+"px"})),t.style("width",(function(t){return Math.max(0,t.x1-t.x0-1)+"px"})),t.style("height",(function(t){return Math.max(0,t.y1-t.y0-1)+"px"}))})),i.exit().remove(),n&&this.settings.rerootCallback(this.currentRoot.data)}},{key:"setBreadcrumbs",value:function(){for(var t=this,e=[],n=this.currentRoot.data;n;)e.push(n),n=this.childParentRelations.get(n);e.reverse(),this.breadCrumbs.html(""),this.breadCrumbs.selectAll(".crumb").data(e).enter().append("span").attr("class","crumb").attr("title",(function(e){return t.settings.getBreadcrumbTooltip(e)})).html((function(t){return"<span class='link'>".concat(t.name,"</span>")})).on("click",(function(e,n){t.render(t.data.filter((function(t){return t.data.id===n.id}))[0])}))}},{key:"tooltipIn",value:function(t,e){this.settings.enableTooltips&&this.tooltip&&this.tooltip.html(this.settings.getTooltip(e.data)).style("top",t.pageY+10+"px").style("left",t.pageX+10+"px").style("visibility","visible")}},{key:"tooltipMove",value:function(t,e){this.settings.enableTooltips&&this.tooltip&&this.tooltip.style("top",t.pageY+10+"px").style("left",t.pageX+10+"px")}},{key:"tooltipOut",value:function(t,e){this.settings.enableTooltips&&this.tooltip&&this.tooltip.style("visibility","hidden")}}])&&Ta(e.prototype,n),t}();function ka(t){return(ka="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Oa(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function Pa(t,e){return(Pa=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function Ca(t,e){return!e||"object"!==ka(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function Ra(t){return(Ra=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var Ia=function t(){var e=new Map,n=[],r=[],i=ti;function o(t){var o=t+"",a=e.get(o);if(!a){if(i!==ti)return i;e.set(o,a=n.push(t))}return r[(a-1)%r.length]}return o.domain=function(t){if(!arguments.length)return n.slice();n=[],e=new Map;for(const r of t){const t=r+"";e.has(t)||e.set(t,n.push(r))}return o},o.range=function(t){return arguments.length?(r=Array.from(t),o):r.slice()},o.unknown=function(t){return arguments.length?(i=t,o):i},o.copy=function(){return t(n,r).unknown(i)},zr.apply(o,arguments),o}(ni),ja=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&Pa(t,e)}(i,t);var e,n,r=(e=i,n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,r=Ra(e);if(n){var i=Ra(this).constructor;t=Reflect.construct(r,arguments,i)}else t=r.apply(this,arguments);return Ca(this,t)});function i(){var t;return Oa(this,i),(t=r.apply(this,arguments)).minNodeSize=2,t.maxNodeSize=105,t.enableExpandOnClick=!0,t.enableAutoExpand=!1,t.autoExpandValue=.8,t.levelsToExpand=2,t.enableRightClick=!0,t.enableInnerArcs=!0,t.enableLabels=!0,t.nodeDistance=180,t.animationDuration=500,t.nodeFillColor=function(t){return t.isSelected()?t.children.length>0?t.getColor()||"#aaa":"#fff":"#aaa"},t.nodeStrokeColor=function(t){return t.isSelected()&&t.getColor()||"#aaa"},t.linkStrokeColor=function(t){return t.source.data.isSelected()?t.target.data.getColor():"#aaa"},t.colorProvider=function(t){return Ia(t.name)},t.getLabel=function(t){return t.name},t.getTooltip=function(e){return"\n            <style>\n                .unipept-tooltip {\n                    padding: 10px;\n                    border-radius: 5px; \n                    background: rgba(0, 0, 0, 0.8); \n                    color: #fff;\n                }\n                \n                .unipept-tooltip div, .unipept-tooltip a {\n                    font-family: Roboto, 'Helvetica Neue', Helvetica, Arial, sans-serif;\n                }\n                \n                .unipept-tooltip div {\n                    font-weight: bold;\n                }\n            </style>\n            <div class=\"unipept-tooltip\">\n                <div>\n                    ".concat(t.getTooltipTitle(e),"\n                </div>\n                <a>\n                    ").concat(t.getTooltipText(e),"\n                </a>\n            </div>\n        ")},t.getTooltipTitle=function(t){return t.name},t.getTooltipText=function(t){return"".concat(t.count," hits")},t}return i}(ao);function Na(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function La(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var za=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],n=arguments.length>1?arguments[1]:void 0;Na(this,t),this.data=e,this.comparator=n,this.heapify()}var e,n;return e=t,(n=[{key:"add",value:function(t){this.data.push(t),this.bubbleUp(this.data.length-1)}},{key:"peek",value:function(){return this.data[0]}},{key:"remove",value:function(){var t=this.data[0];return this.data.length>1?(this.data[0]=this.data.pop(),this.sink(0)):this.data.pop(),t}},{key:"clear",value:function(){this.data.splice(0,this.data.length)}},{key:"size",value:function(){return this.data.length}},{key:"heapify",value:function(){for(var t=Math.floor((this.data.length-2)/2);t>=0;t--)this.sink(t)}},{key:"bubbleUp",value:function(t){for(var e=this.data[t];t>0;){var n=Math.floor((t-1)/2),r=this.data[n];if(!(this.comparator(e,r)<0))break;this.data[t]=r,t=n}return this.data[t]=e,t}},{key:"sink",value:function(t){for(var e=this.data[t],n=this.data.length;2*t+1<n;){var r=2*t+1;if(r<n-1&&this.comparator(this.data[r+1],this.data[r])<0&&r++,this.comparator(e,this.data[r])<=0)break;this.data[t]=this.data[r],t=r}return this.data[t]=e,t}}])&&La(e.prototype,n),t}();function Da(t){return(Da="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Fa(t,e){var n;if("undefined"==typeof Symbol||null==t[Symbol.iterator]){if(Array.isArray(t)||(n=function(t,e){if(t){if("string"==typeof t)return Ua(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Ua(t,e):void 0}}(t))||e&&t&&"number"==typeof t.length){n&&(t=n);var r=0,i=function(){};return{s:i,n:function(){return r>=t.length?{done:!0}:{done:!1,value:t[r++]}},e:function(t){throw t},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,a=!0,s=!1;return{s:function(){n=t[Symbol.iterator]()},n:function(){var t=n.next();return a=t.done,t},e:function(t){s=!0,o=t},f:function(){try{a||null==n.return||n.return()}finally{if(s)throw o}}}}function Ua(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function Ba(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function qa(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function Va(t,e){return(Va=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function Wa(t,e){return!e||"object"!==Da(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function Ha(t){return(Ha=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var Ya=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&Va(t,e)}(a,t);var e,n,r,i,o=(r=a,i=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=Ha(r);if(i){var n=Ha(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return Wa(this,t)});function a(){var t;return Ba(this,a),(t=o.apply(this,arguments)).previousPosition={x:0,y:0},t.selected=!1,t.collapsed=!1,t.color="",t}return e=a,(n=[{key:"isCollapsed",value:function(){return this.collapsed}},{key:"setCollapsed",value:function(t){this.collapsed=t}},{key:"isSelected",value:function(){return this.selected}},{key:"getColor",value:function(){return this.color}},{key:"setSelected",value:function(t){this.selected=t;var e,n=Fa(this.children);try{for(n.s();!(e=n.n()).done;)e.value.setSelected(t)}catch(t){n.e(t)}finally{n.f()}}},{key:"collapseAll",value:function(){var t,e=Fa(this.children);try{for(e.s();!(t=e.n()).done;){var n=t.value;n.setCollapsed(!0),n.collapseAll()}}catch(t){e.e(t)}finally{e.f()}}},{key:"collapse",value:function(){var t,e=Fa(this.children);try{for(e.s();!(t=e.n()).done;)t.value.setCollapsed(!0)}catch(t){e.e(t)}finally{e.f()}}},{key:"expandAll",value:function(){this.expand(100)}},{key:"expand",value:function(t){if(t>0&&this.children.length>0){var e,n=Fa(this.children);try{for(n.s();!(e=n.n()).done;){var r=e.value;r.setCollapsed(!1),r.expand(t-1)}}catch(t){n.e(t)}finally{n.f()}}}},{key:"setColor",value:function(t){this.color=t;var e,n=Fa(this.children);try{for(n.s();!(e=n.n()).done;)e.value.setColor(t)}catch(t){n.e(t)}finally{n.f()}}}])&&qa(e.prototype,n),a}(e);function Ga(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function Xa(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var $a=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t)}var e,n;return e=t,(n=[{key:"preprocessData",value:function(e){var n=[];if(e.children){var r,i=function(t,e){var n;if("undefined"==typeof Symbol||null==t[Symbol.iterator]){if(Array.isArray(t)||(n=function(t,e){if(t){if("string"==typeof t)return Ga(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Ga(t,e):void 0}}(t))||e&&t&&"number"==typeof t.length){n&&(t=n);var r=0,i=function(){};return{s:i,n:function(){return r>=t.length?{done:!0}:{done:!1,value:t[r++]}},e:function(t){throw t},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,a=!0,s=!1;return{s:function(){n=t[Symbol.iterator]()},n:function(){var t=n.next();return a=t.done,t},e:function(t){s=!0,o=t},f:function(){try{a||null==n.return||n.return()}finally{if(s)throw o}}}}(e.children);try{for(i.s();!(r=i.n()).done;){var o=r.value;n.push(this.preprocessData(o))}}catch(t){i.e(t)}finally{i.f()}}return new Ya(e.id||++t.idCounter,e.name||"",n,e.count,e.selfCount,e.extra)}}])&&Xa(e.prototype,n),t}();function Za(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function Ka(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function Ja(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}$a.idCounter=0;var Qa=function(){function t(e,n){var r=this,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:new ja;Ka(this,t),this.element=e,this.nodeId=0,this.zoomScale=1,this.settings=this.fillOptions(i),this.settings.enableTooltips&&(this.tooltip=ra.initTooltip());var o=new $a,a=o.preprocessData(n),s=Hn(a);s.sum((function(t){return t.children.length>0?0:t.count})),this.widthScale=Qr().range([this.settings.minNodeSize,this.settings.maxNodeSize]),this.treeLayout=ar().nodeSize([2,10]).separation((function(t,e){if(t.data.isCollapsed()||e.data.isCollapsed())return 0;var n=(r.computeNodeSize(t)+r.computeNodeSize(e))/2+4;return t.parent===e.parent?n:n+4})),this.data=this.treeLayout(s).descendants(),this.root=this.data[0],this.element.innerHTML="",this.svg=ri(this.element).append("svg").attr("version","1.1").attr("xmlns","http://www.w3.org/2000/svg").attr("viewBox","0 0 ".concat(this.settings.width," ").concat(this.settings.height)).attr("width",this.settings.width).attr("height",this.settings.height).style("font-family","'Helvetica Neue', Helvetica, Arial, sans-serif"),this.zoomListener=ro().extent([[0,0],[this.settings.width,this.settings.height]]).scaleExtent([.1,3]).on("zoom",(function(t){r.zoomScale=t.transform.k,r.visElement.attr("transform",t.transform.toString())})),this.visElement=this.svg.call(this.zoomListener).append("g"),this.render(this.root)}var e,n;return e=t,(n=[{key:"fillOptions",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:void 0,e=new ja;return Object.assign(e,t)}},{key:"render",value:function(t){var e,n=this;this.widthScale.domain([0,t.data.count]),this.root=t,this.root.x=this.settings.height/2,this.root.y=0,this.root.data.setSelected(!0),null===(e=this.root.children)||void 0===e||e.forEach((function(t,e){t.data.setColor(n.settings.colorProvider(t.data))})),this.settings.enableExpandOnClick?(this.root.data.collapseAll(),this.initialExpand(this.root)):this.root.data.expandAll(),this.update(t),this.centerRoot(t)}},{key:"centerRoot",value:function(t){var e=this,n=[-t.y,-t.x],r=n[0],i=n[1];r=r*this.zoomScale+this.settings.width/4,i=i*this.zoomScale+this.settings.height/2,this.visElement.transition().duration(this.settings.animationDuration).attr("transform","translate(".concat(r,",").concat(i,")scale(").concat(this.zoomScale,")")).on("end",(function(){return e.zoomListener.transform(e.svg,Xi.translate(r,i).scale(e.zoomScale))}))}},{key:"initialExpand",value:function(t){var e,n;if(this.settings.enableAutoExpand){t.data.expand(1);for(var r=t.data.count*(this.settings.enableAutoExpand?this.settings.autoExpandValue:.8),i=new za(function(t){if(Array.isArray(t))return Za(t)}(n=t.children||[])||function(t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t))return Array.from(t)}(n)||function(t,e){if(t){if("string"==typeof t)return Za(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Za(t,e):void 0}}(n)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}(),(function(t,e){return e.data.count-t.data.count}));r>0&&i.size()>0;){var o=i.remove();r-=o.data.count,o.data.expand(1),null===(e=o.children)||void 0===e||e.forEach((function(t,e){i.add(t)}))}}else t.data.expand(this.settings.levelsToExpand)}},{key:"update",value:function(t){var e=this,n=this.treeLayout(this.root),r=n.descendants().reverse().filter((function(t){return!t.data.isCollapsed()})),i=n.links().filter((function(t){return!t.target.data.isCollapsed()&&!t.source.data.isCollapsed()}));r.forEach((function(t){return t.y=t.depth*e.settings.nodeDistance}));var o=this.visElement.selectAll("g.node").data(r,(function(t){return t.data.id||(t.data.id=++e.nodeId)})),a=o.enter().append("g").attr("class","node").style("cursor","pointer").attr("transform","translate(".concat(t.y||0,",").concat(t.data.previousPosition.x||0,")")).on("click",(function(t,n){return e.click(t,n)})).on("mouseover",(function(t,n){return e.tooltipIn(t,n)})).on("mouseout",(function(t,n){return e.tooltipOut(t,n)})).on("contextmenu",(function(t,n){return e.rightClick(t,n)})).merge(o);a.append("circle").attr("r",1e-6).style("stroke-width","1.5px").style("stroke",(function(t){return e.settings.nodeStrokeColor(t.data)})).style("fill",(function(t){return e.settings.nodeFillColor(t.data)}));var s=Qr().range([0,2*Math.PI]),u=Ri().innerRadius(0).outerRadius((function(t){return e.computeNodeSize(t)})).startAngle(0).endAngle((function(t){return s(t.data.selfCount/t.data.count)||0}));this.settings.enableInnerArcs&&a.append("path").attr("class","innerArc").attr("d",u).style("fill",(function(t){return e.settings.nodeStrokeColor(t.data)})).style("fill-opacity",0),this.settings.enableLabels&&a.append("text").attr("x",(function(t){return t.children?-10:10})).attr("dy",".35em").attr("text-anchor",(function(t){return t.children?"end":"start"})).text((function(t){return e.settings.getLabel(t.data)})).style("font","10px sans-serif").style("fill-opacity",1e-6);var c=a.transition().duration(this.settings.animationDuration).attr("transform",(function(t){return"translate(".concat(t.y,", ").concat(t.x,")")}));c.select("circle").attr("r",(function(t){return e.computeNodeSize(t)})).style("fill-opacity",(function(t){return t.children&&t.children[0].data.isCollapsed()?1:0})).style("stroke",(function(t){return e.settings.nodeStrokeColor(t.data)})).style("fill",(function(t){return e.settings.nodeFillColor(t.data)})),this.settings.enableInnerArcs&&c.select(".innerArc").style("fill-opacity",1),this.settings.enableLabels&&c.select("text").style("fill-opacity",1);var l=o.exit().transition().duration(this.settings.animationDuration).attr("transform",(function(e){return"translate(".concat(t.y,",").concat(t.x,")")})).remove();l.select("circle").attr("r",1e-6),l.select("path").style("fill-opacity",1e-6),l.select("text").style("fill-opacity",1e-6);var f=this.visElement.selectAll("path.link").data(i,(function(t){return t.target.data.id})),h=function(t){var e=Li,n=zi,r=ji,i=Ni,o=null;function a(){var a,s=Ii.call(arguments),u=e.apply(this,s),c=n.apply(this,s);if(o||(o=a=li()),t(o,+r.apply(this,(s[0]=u,s)),+i.apply(this,s),+r.apply(this,(s[0]=c,s)),+i.apply(this,s)),a)return o=null,a+""||null}return a.source=function(t){return arguments.length?(e=t,a):e},a.target=function(t){return arguments.length?(n=t,a):n},a.x=function(t){return arguments.length?(r="function"==typeof t?t:fi(+t),a):r},a.y=function(t){return arguments.length?(i="function"==typeof t?t:fi(+t),a):i},a.context=function(t){return arguments.length?(o=null==t?null:t,a):o},a}(Di).x((function(t){return t.y})).y((function(t){return t.x}));f.enter().insert("path","g").attr("class","link").style("fill","none").style("stroke-opacity","0.5").style("stroke-linecap","round").style("stroke",(function(t){return e.settings.linkStrokeColor(t)})).style("stroke-width",1e-6).attr("d",(function(e){var n={x:t.data.previousPosition.x,y:t.data.previousPosition.y};return h({source:n,target:n})})).merge(f).transition().duration(this.settings.animationDuration).attr("d",h).style("stroke",this.settings.linkStrokeColor).style("stroke-width",(function(t){return t.source.data.isSelected()?e.widthScale(t.target.data.count)+"px":"4px"})),f.exit().transition().duration(this.settings.animationDuration).style("stroke-width",1e-6).attr("d",(function(e){var n={x:t.x,y:t.y};return h({source:n,target:n})})).remove(),r.forEach((function(t){t.data.previousPosition={x:t.x,y:t.y}}))}},{key:"computeNodeSize",value:function(t){return t.data.isSelected()?this.widthScale(t.data.count)/2:2}},{key:"click",value:function(t,e){this.settings.enableExpandOnClick&&(t.defaultPrevented||(t.shiftKey?e.data.expandAll():e.children&&e.children.some((function(t){return!t.data.isCollapsed()}))?e.data.collapseAll():e.data.expand(this.settings.levelsToExpand),this.update(e),this.centerRoot(e)))}},{key:"tooltipIn",value:function(t,e){var n=this;this.settings.enableTooltips&&this.tooltip&&(this.tooltip.html(this.settings.getTooltip(e.data)).style("top",t.pageY+10+"px").style("left",t.pageX+10+"px"),this.tooltipTimer=window.setTimeout((function(){return n.tooltip.style("visibility","visible")}),1e3))}},{key:"tooltipOut",value:function(t,e){this.settings.enableTooltips&&this.tooltip&&(clearTimeout(this.tooltipTimer),this.tooltip.style("visibility","hidden"))}},{key:"rightClick",value:function(t,e){this.settings.enableRightClick&&this.render(e)}}])&&Ja(e.prototype,n),t}()})(),r})()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,