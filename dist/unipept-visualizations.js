!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.UnipeptVisualizations=e():t.UnipeptVisualizations=e()}(this,(function(){return(()=>{var t={1926:(t,e,n)=>{n(2526),n(2443),n(1817),n(2401),n(8722),n(2165),n(9007),n(6066),n(3510),n(1840),n(6982),n(2159),n(6649),n(9341),n(543),n(9170),n(1038),n(9753),n(6572),n(2222),n(545),n(6541),n(3290),n(7327),n(9826),n(4553),n(4944),n(6535),n(9554),n(6699),n(2772),n(9600),n(4986),n(1249),n(5827),n(6644),n(5069),n(7042),n(5212),n(2707),n(561),n(8706),n(3792),n(9244),n(6992),n(4812),n(8309),n(4855),n(5837),n(9601),n(8011),n(9070),n(3321),n(9720),n(3371),n(8559),n(5003),n(9337),n(6210),n(489),n(3304),n(1825),n(8410),n(2200),n(7941),n(7227),n(514),n(8304),n(6833),n(1539),n(9595),n(5500),n(4869),n(3952),n(4953),n(8992),n(9841),n(7852),n(2023),n(4723),n(6373),n(6528),n(3112),n(2481),n(5306),n(4765),n(3123),n(6755),n(3210),n(5674),n(8702),n(8783),n(5218),n(4475),n(7929),n(915),n(9253),n(2125),n(8830),n(8734),n(9254),n(7268),n(7397),n(86),n(623),n(8757),n(4603),n(4916),n(2087),n(8386),n(7601),n(9714),n(1058),n(4678),n(9653),n(3299),n(5192),n(3161),n(4048),n(8285),n(4363),n(5994),n(1874),n(9494),n(6977),n(5147),n(9752),n(2376),n(3181),n(3484),n(2388),n(8621),n(403),n(4755),n(5438),n(332),n(658),n(197),n(4914),n(2420),n(160),n(970),n(2703),n(3689),n(3843),n(5735),n(8733),n(3710),n(6078),n(8862),n(3706),n(8674),n(7922),n(4668),n(7727),n(1532),n(189),n(4129),n(8478),n(8264),n(6938),n(9575),n(6716),n(7145),n(2472),n(9743),n(5109),n(8255),n(5125),n(9135),n(4197),n(6495),n(8145),n(5206),n(2990),n(8927),n(3105),n(5035),n(4345),n(7174),n(2846),n(4731),n(7209),n(6319),n(8867),n(7789),n(3739),n(9368),n(4483),n(2056),n(3462),n(678),n(7462),n(3824),n(5021),n(2974),n(5016),n(224),n(2419),n(9596),n(2586),n(4819),n(5683),n(9361),n(1037),n(5898),n(7556),n(4361),n(3593),n(9532),n(1299);var r=n(857);t.exports=r},3099:t=>{t.exports=function(t){if("function"!=typeof t)throw TypeError(String(t)+" is not a function");return t}},6077:(t,e,n)=>{var r=n(111);t.exports=function(t){if(!r(t)&&null!==t)throw TypeError("Can't set "+String(t)+" as a prototype");return t}},1223:(t,e,n)=>{var r=n(5112),i=n(30),o=n(3070),a=r("unscopables"),s=Array.prototype;null==s[a]&&o.f(s,a,{configurable:!0,value:i(null)}),t.exports=function(t){s[a][t]=!0}},1530:(t,e,n)=>{"use strict";var r=n(8710).charAt;t.exports=function(t,e,n){return e+(n?r(t,e).length:1)}},5787:t=>{t.exports=function(t,e,n){if(!(t instanceof e))throw TypeError("Incorrect "+(n?n+" ":"")+"invocation");return t}},9670:(t,e,n)=>{var r=n(111);t.exports=function(t){if(!r(t))throw TypeError(String(t)+" is not an object");return t}},4019:t=>{t.exports="undefined"!=typeof ArrayBuffer&&"undefined"!=typeof DataView},260:(t,e,n)=>{"use strict";var r,i=n(4019),o=n(9781),a=n(7854),s=n(111),u=n(6656),c=n(648),l=n(8880),f=n(1320),h=n(3070).f,p=n(9518),d=n(7674),v=n(5112),g=n(9711),y=a.Int8Array,m=y&&y.prototype,b=a.Uint8ClampedArray,x=b&&b.prototype,w=y&&p(y),S=m&&p(m),_=Object.prototype,A=_.isPrototypeOf,M=v("toStringTag"),T=g("TYPED_ARRAY_TAG"),E=i&&!!d&&"Opera"!==c(a.opera),k=!1,O={Int8Array:1,Uint8Array:1,Uint8ClampedArray:1,Int16Array:2,Uint16Array:2,Int32Array:4,Uint32Array:4,Float32Array:4,Float64Array:8},P={BigInt64Array:8,BigUint64Array:8},C=function(t){if(!s(t))return!1;var e=c(t);return u(O,e)||u(P,e)};for(r in O)a[r]||(E=!1);if((!E||"function"!=typeof w||w===Function.prototype)&&(w=function(){throw TypeError("Incorrect invocation")},E))for(r in O)a[r]&&d(a[r],w);if((!E||!S||S===_)&&(S=w.prototype,E))for(r in O)a[r]&&d(a[r].prototype,S);if(E&&p(x)!==S&&d(x,S),o&&!u(S,M))for(r in k=!0,h(S,M,{get:function(){return s(this)?this[T]:void 0}}),O)a[r]&&l(a[r],T,r);t.exports={NATIVE_ARRAY_BUFFER_VIEWS:E,TYPED_ARRAY_TAG:k&&T,aTypedArray:function(t){if(C(t))return t;throw TypeError("Target is not a typed array")},aTypedArrayConstructor:function(t){if(d){if(A.call(w,t))return t}else for(var e in O)if(u(O,r)){var n=a[e];if(n&&(t===n||A.call(n,t)))return t}throw TypeError("Target is not a typed array constructor")},exportTypedArrayMethod:function(t,e,n){if(o){if(n)for(var r in O){var i=a[r];i&&u(i.prototype,t)&&delete i.prototype[t]}S[t]&&!n||f(S,t,n?e:E&&m[t]||e)}},exportTypedArrayStaticMethod:function(t,e,n){var r,i;if(o){if(d){if(n)for(r in O)(i=a[r])&&u(i,t)&&delete i[t];if(w[t]&&!n)return;try{return f(w,t,n?e:E&&y[t]||e)}catch(t){}}for(r in O)!(i=a[r])||i[t]&&!n||f(i,t,e)}},isView:function(t){if(!s(t))return!1;var e=c(t);return"DataView"===e||u(O,e)||u(P,e)},isTypedArray:C,TypedArray:w,TypedArrayPrototype:S}},3331:(t,e,n)=>{"use strict";var r=n(7854),i=n(9781),o=n(4019),a=n(8880),s=n(2248),u=n(7293),c=n(5787),l=n(9958),f=n(7466),h=n(7067),p=n(1179),d=n(9518),v=n(7674),g=n(8006).f,y=n(3070).f,m=n(1285),b=n(8003),x=n(9909),w=x.get,S=x.set,_="ArrayBuffer",A="DataView",M="Wrong index",T=r.ArrayBuffer,E=T,k=r.DataView,O=k&&k.prototype,P=Object.prototype,C=r.RangeError,R=p.pack,I=p.unpack,j=function(t){return[255&t]},N=function(t){return[255&t,t>>8&255]},L=function(t){return[255&t,t>>8&255,t>>16&255,t>>24&255]},z=function(t){return t[3]<<24|t[2]<<16|t[1]<<8|t[0]},D=function(t){return R(t,23,4)},F=function(t){return R(t,52,8)},U=function(t,e){y(t.prototype,e,{get:function(){return w(this)[e]}})},B=function(t,e,n,r){var i=h(n),o=w(t);if(i+e>o.byteLength)throw C(M);var a=w(o.buffer).bytes,s=i+o.byteOffset,u=a.slice(s,s+e);return r?u:u.reverse()},q=function(t,e,n,r,i,o){var a=h(n),s=w(t);if(a+e>s.byteLength)throw C(M);for(var u=w(s.buffer).bytes,c=a+s.byteOffset,l=r(+i),f=0;f<e;f++)u[c+f]=l[o?f:e-f-1]};if(o){if(!u((function(){T(1)}))||!u((function(){new T(-1)}))||u((function(){return new T,new T(1.5),new T(NaN),T.name!=_}))){for(var V,W=(E=function(t){return c(this,E),new T(h(t))}).prototype=T.prototype,H=g(T),Y=0;H.length>Y;)(V=H[Y++])in E||a(E,V,T[V]);W.constructor=E}v&&d(O)!==P&&v(O,P);var G=new k(new E(2)),X=O.setInt8;G.setInt8(0,2147483648),G.setInt8(1,2147483649),!G.getInt8(0)&&G.getInt8(1)||s(O,{setInt8:function(t,e){X.call(this,t,e<<24>>24)},setUint8:function(t,e){X.call(this,t,e<<24>>24)}},{unsafe:!0})}else E=function(t){c(this,E,_);var e=h(t);S(this,{bytes:m.call(new Array(e),0),byteLength:e}),i||(this.byteLength=e)},k=function(t,e,n){c(this,k,A),c(t,E,A);var r=w(t).byteLength,o=l(e);if(o<0||o>r)throw C("Wrong offset");if(o+(n=void 0===n?r-o:f(n))>r)throw C("Wrong length");S(this,{buffer:t,byteLength:n,byteOffset:o}),i||(this.buffer=t,this.byteLength=n,this.byteOffset=o)},i&&(U(E,"byteLength"),U(k,"buffer"),U(k,"byteLength"),U(k,"byteOffset")),s(k.prototype,{getInt8:function(t){return B(this,1,t)[0]<<24>>24},getUint8:function(t){return B(this,1,t)[0]},getInt16:function(t){var e=B(this,2,t,arguments.length>1?arguments[1]:void 0);return(e[1]<<8|e[0])<<16>>16},getUint16:function(t){var e=B(this,2,t,arguments.length>1?arguments[1]:void 0);return e[1]<<8|e[0]},getInt32:function(t){return z(B(this,4,t,arguments.length>1?arguments[1]:void 0))},getUint32:function(t){return z(B(this,4,t,arguments.length>1?arguments[1]:void 0))>>>0},getFloat32:function(t){return I(B(this,4,t,arguments.length>1?arguments[1]:void 0),23)},getFloat64:function(t){return I(B(this,8,t,arguments.length>1?arguments[1]:void 0),52)},setInt8:function(t,e){q(this,1,t,j,e)},setUint8:function(t,e){q(this,1,t,j,e)},setInt16:function(t,e){q(this,2,t,N,e,arguments.length>2?arguments[2]:void 0)},setUint16:function(t,e){q(this,2,t,N,e,arguments.length>2?arguments[2]:void 0)},setInt32:function(t,e){q(this,4,t,L,e,arguments.length>2?arguments[2]:void 0)},setUint32:function(t,e){q(this,4,t,L,e,arguments.length>2?arguments[2]:void 0)},setFloat32:function(t,e){q(this,4,t,D,e,arguments.length>2?arguments[2]:void 0)},setFloat64:function(t,e){q(this,8,t,F,e,arguments.length>2?arguments[2]:void 0)}});b(E,_),b(k,A),t.exports={ArrayBuffer:E,DataView:k}},1048:(t,e,n)=>{"use strict";var r=n(7908),i=n(1400),o=n(7466),a=Math.min;t.exports=[].copyWithin||function(t,e){var n=r(this),s=o(n.length),u=i(t,s),c=i(e,s),l=arguments.length>2?arguments[2]:void 0,f=a((void 0===l?s:i(l,s))-c,s-u),h=1;for(c<u&&u<c+f&&(h=-1,c+=f-1,u+=f-1);f-- >0;)c in n?n[u]=n[c]:delete n[u],u+=h,c+=h;return n}},1285:(t,e,n)=>{"use strict";var r=n(7908),i=n(1400),o=n(7466);t.exports=function(t){for(var e=r(this),n=o(e.length),a=arguments.length,s=i(a>1?arguments[1]:void 0,n),u=a>2?arguments[2]:void 0,c=void 0===u?n:i(u,n);c>s;)e[s++]=t;return e}},8533:(t,e,n)=>{"use strict";var r=n(2092).forEach,i=n(2133)("forEach");t.exports=i?[].forEach:function(t){return r(this,t,arguments.length>1?arguments[1]:void 0)}},8457:(t,e,n)=>{"use strict";var r=n(9974),i=n(7908),o=n(3411),a=n(7659),s=n(7466),u=n(6135),c=n(1246);t.exports=function(t){var e,n,l,f,h,p,d=i(t),v="function"==typeof this?this:Array,g=arguments.length,y=g>1?arguments[1]:void 0,m=void 0!==y,b=c(d),x=0;if(m&&(y=r(y,g>2?arguments[2]:void 0,2)),null==b||v==Array&&a(b))for(n=new v(e=s(d.length));e>x;x++)p=m?y(d[x],x):d[x],u(n,x,p);else for(h=(f=b.call(d)).next,n=new v;!(l=h.call(f)).done;x++)p=m?o(f,y,[l.value,x],!0):l.value,u(n,x,p);return n.length=x,n}},1318:(t,e,n)=>{var r=n(5656),i=n(7466),o=n(1400),a=function(t){return function(e,n,a){var s,u=r(e),c=i(u.length),l=o(a,c);if(t&&n!=n){for(;c>l;)if((s=u[l++])!=s)return!0}else for(;c>l;l++)if((t||l in u)&&u[l]===n)return t||l||0;return!t&&-1}};t.exports={includes:a(!0),indexOf:a(!1)}},2092:(t,e,n)=>{var r=n(9974),i=n(8361),o=n(7908),a=n(7466),s=n(5417),u=[].push,c=function(t){var e=1==t,n=2==t,c=3==t,l=4==t,f=6==t,h=7==t,p=5==t||f;return function(d,v,g,y){for(var m,b,x=o(d),w=i(x),S=r(v,g,3),_=a(w.length),A=0,M=y||s,T=e?M(d,_):n||h?M(d,0):void 0;_>A;A++)if((p||A in w)&&(b=S(m=w[A],A,x),t))if(e)T[A]=b;else if(b)switch(t){case 3:return!0;case 5:return m;case 6:return A;case 2:u.call(T,m)}else switch(t){case 4:return!1;case 7:u.call(T,m)}return f?-1:c||l?l:T}};t.exports={forEach:c(0),map:c(1),filter:c(2),some:c(3),every:c(4),find:c(5),findIndex:c(6),filterOut:c(7)}},6583:(t,e,n)=>{"use strict";var r=n(5656),i=n(9958),o=n(7466),a=n(2133),s=Math.min,u=[].lastIndexOf,c=!!u&&1/[1].lastIndexOf(1,-0)<0,l=a("lastIndexOf"),f=c||!l;t.exports=f?function(t){if(c)return u.apply(this,arguments)||0;var e=r(this),n=o(e.length),a=n-1;for(arguments.length>1&&(a=s(a,i(arguments[1]))),a<0&&(a=n+a);a>=0;a--)if(a in e&&e[a]===t)return a||0;return-1}:u},1194:(t,e,n)=>{var r=n(7293),i=n(5112),o=n(7392),a=i("species");t.exports=function(t){return o>=51||!r((function(){var e=[];return(e.constructor={})[a]=function(){return{foo:1}},1!==e[t](Boolean).foo}))}},2133:(t,e,n)=>{"use strict";var r=n(7293);t.exports=function(t,e){var n=[][t];return!!n&&r((function(){n.call(null,e||function(){throw 1},1)}))}},3671:(t,e,n)=>{var r=n(3099),i=n(7908),o=n(8361),a=n(7466),s=function(t){return function(e,n,s,u){r(n);var c=i(e),l=o(c),f=a(c.length),h=t?f-1:0,p=t?-1:1;if(s<2)for(;;){if(h in l){u=l[h],h+=p;break}if(h+=p,t?h<0:f<=h)throw TypeError("Reduce of empty array with no initial value")}for(;t?h>=0:f>h;h+=p)h in l&&(u=n(u,l[h],h,c));return u}};t.exports={left:s(!1),right:s(!0)}},5417:(t,e,n)=>{var r=n(111),i=n(3157),o=n(5112)("species");t.exports=function(t,e){var n;return i(t)&&("function"!=typeof(n=t.constructor)||n!==Array&&!i(n.prototype)?r(n)&&null===(n=n[o])&&(n=void 0):n=void 0),new(void 0===n?Array:n)(0===e?0:e)}},3411:(t,e,n)=>{var r=n(9670),i=n(9212);t.exports=function(t,e,n,o){try{return o?e(r(n)[0],n[1]):e(n)}catch(e){throw i(t),e}}},7072:(t,e,n)=>{var r=n(5112)("iterator"),i=!1;try{var o=0,a={next:function(){return{done:!!o++}},return:function(){i=!0}};a[r]=function(){return this},Array.from(a,(function(){throw 2}))}catch(t){}t.exports=function(t,e){if(!e&&!i)return!1;var n=!1;try{var o={};o[r]=function(){return{next:function(){return{done:n=!0}}}},t(o)}catch(t){}return n}},4326:t=>{var e={}.toString;t.exports=function(t){return e.call(t).slice(8,-1)}},648:(t,e,n)=>{var r=n(1694),i=n(4326),o=n(5112)("toStringTag"),a="Arguments"==i(function(){return arguments}());t.exports=r?i:function(t){var e,n,r;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(n=function(t,e){try{return t[e]}catch(t){}}(e=Object(t),o))?n:a?i(e):"Object"==(r=i(e))&&"function"==typeof e.callee?"Arguments":r}},5631:(t,e,n)=>{"use strict";var r=n(3070).f,i=n(30),o=n(2248),a=n(9974),s=n(5787),u=n(408),c=n(654),l=n(6340),f=n(9781),h=n(2423).fastKey,p=n(9909),d=p.set,v=p.getterFor;t.exports={getConstructor:function(t,e,n,c){var l=t((function(t,r){s(t,l,e),d(t,{type:e,index:i(null),first:void 0,last:void 0,size:0}),f||(t.size=0),null!=r&&u(r,t[c],{that:t,AS_ENTRIES:n})})),p=v(e),g=function(t,e,n){var r,i,o=p(t),a=y(t,e);return a?a.value=n:(o.last=a={index:i=h(e,!0),key:e,value:n,previous:r=o.last,next:void 0,removed:!1},o.first||(o.first=a),r&&(r.next=a),f?o.size++:t.size++,"F"!==i&&(o.index[i]=a)),t},y=function(t,e){var n,r=p(t),i=h(e);if("F"!==i)return r.index[i];for(n=r.first;n;n=n.next)if(n.key==e)return n};return o(l.prototype,{clear:function(){for(var t=p(this),e=t.index,n=t.first;n;)n.removed=!0,n.previous&&(n.previous=n.previous.next=void 0),delete e[n.index],n=n.next;t.first=t.last=void 0,f?t.size=0:this.size=0},delete:function(t){var e=this,n=p(e),r=y(e,t);if(r){var i=r.next,o=r.previous;delete n.index[r.index],r.removed=!0,o&&(o.next=i),i&&(i.previous=o),n.first==r&&(n.first=i),n.last==r&&(n.last=o),f?n.size--:e.size--}return!!r},forEach:function(t){for(var e,n=p(this),r=a(t,arguments.length>1?arguments[1]:void 0,3);e=e?e.next:n.first;)for(r(e.value,e.key,this);e&&e.removed;)e=e.previous},has:function(t){return!!y(this,t)}}),o(l.prototype,n?{get:function(t){var e=y(this,t);return e&&e.value},set:function(t,e){return g(this,0===t?0:t,e)}}:{add:function(t){return g(this,t=0===t?0:t,t)}}),f&&r(l.prototype,"size",{get:function(){return p(this).size}}),l},setStrong:function(t,e,n){var r=e+" Iterator",i=v(e),o=v(r);c(t,e,(function(t,e){d(this,{type:r,target:t,state:i(t),kind:e,last:void 0})}),(function(){for(var t=o(this),e=t.kind,n=t.last;n&&n.removed;)n=n.previous;return t.target&&(t.last=n=n?n.next:t.state.first)?"keys"==e?{value:n.key,done:!1}:"values"==e?{value:n.value,done:!1}:{value:[n.key,n.value],done:!1}:(t.target=void 0,{value:void 0,done:!0})}),n?"entries":"values",!n,!0),l(e)}}},9320:(t,e,n)=>{"use strict";var r=n(2248),i=n(2423).getWeakData,o=n(9670),a=n(111),s=n(5787),u=n(408),c=n(2092),l=n(6656),f=n(9909),h=f.set,p=f.getterFor,d=c.find,v=c.findIndex,g=0,y=function(t){return t.frozen||(t.frozen=new m)},m=function(){this.entries=[]},b=function(t,e){return d(t.entries,(function(t){return t[0]===e}))};m.prototype={get:function(t){var e=b(this,t);if(e)return e[1]},has:function(t){return!!b(this,t)},set:function(t,e){var n=b(this,t);n?n[1]=e:this.entries.push([t,e])},delete:function(t){var e=v(this.entries,(function(e){return e[0]===t}));return~e&&this.entries.splice(e,1),!!~e}},t.exports={getConstructor:function(t,e,n,c){var f=t((function(t,r){s(t,f,e),h(t,{type:e,id:g++,frozen:void 0}),null!=r&&u(r,t[c],{that:t,AS_ENTRIES:n})})),d=p(e),v=function(t,e,n){var r=d(t),a=i(o(e),!0);return!0===a?y(r).set(e,n):a[r.id]=n,t};return r(f.prototype,{delete:function(t){var e=d(this);if(!a(t))return!1;var n=i(t);return!0===n?y(e).delete(t):n&&l(n,e.id)&&delete n[e.id]},has:function(t){var e=d(this);if(!a(t))return!1;var n=i(t);return!0===n?y(e).has(t):n&&l(n,e.id)}}),r(f.prototype,n?{get:function(t){var e=d(this);if(a(t)){var n=i(t);return!0===n?y(e).get(t):n?n[e.id]:void 0}},set:function(t,e){return v(this,t,e)}}:{add:function(t){return v(this,t,!0)}}),f}}},7710:(t,e,n)=>{"use strict";var r=n(2109),i=n(7854),o=n(4705),a=n(1320),s=n(2423),u=n(408),c=n(5787),l=n(111),f=n(7293),h=n(7072),p=n(8003),d=n(9587);t.exports=function(t,e,n){var v=-1!==t.indexOf("Map"),g=-1!==t.indexOf("Weak"),y=v?"set":"add",m=i[t],b=m&&m.prototype,x=m,w={},S=function(t){var e=b[t];a(b,t,"add"==t?function(t){return e.call(this,0===t?0:t),this}:"delete"==t?function(t){return!(g&&!l(t))&&e.call(this,0===t?0:t)}:"get"==t?function(t){return g&&!l(t)?void 0:e.call(this,0===t?0:t)}:"has"==t?function(t){return!(g&&!l(t))&&e.call(this,0===t?0:t)}:function(t,n){return e.call(this,0===t?0:t,n),this})};if(o(t,"function"!=typeof m||!(g||b.forEach&&!f((function(){(new m).entries().next()})))))x=n.getConstructor(e,t,v,y),s.REQUIRED=!0;else if(o(t,!0)){var _=new x,A=_[y](g?{}:-0,1)!=_,M=f((function(){_.has(1)})),T=h((function(t){new m(t)})),E=!g&&f((function(){for(var t=new m,e=5;e--;)t[y](e,e);return!t.has(-0)}));T||((x=e((function(e,n){c(e,x,t);var r=d(new m,e,x);return null!=n&&u(n,r[y],{that:r,AS_ENTRIES:v}),r}))).prototype=b,b.constructor=x),(M||E)&&(S("delete"),S("has"),v&&S("get")),(E||A)&&S(y),g&&b.clear&&delete b.clear}return w[t]=x,r({global:!0,forced:x!=m},w),p(x,t),g||n.setStrong(x,t,v),x}},9920:(t,e,n)=>{var r=n(6656),i=n(3887),o=n(1236),a=n(3070);t.exports=function(t,e){for(var n=i(e),s=a.f,u=o.f,c=0;c<n.length;c++){var l=n[c];r(t,l)||s(t,l,u(e,l))}}},4964:(t,e,n)=>{var r=n(5112)("match");t.exports=function(t){var e=/./;try{"/./"[t](e)}catch(n){try{return e[r]=!1,"/./"[t](e)}catch(t){}}return!1}},8544:(t,e,n)=>{var r=n(7293);t.exports=!r((function(){function t(){}return t.prototype.constructor=null,Object.getPrototypeOf(new t)!==t.prototype}))},4230:(t,e,n)=>{var r=n(4488),i=/"/g;t.exports=function(t,e,n,o){var a=String(r(t)),s="<"+e;return""!==n&&(s+=" "+n+'="'+String(o).replace(i,"&quot;")+'"'),s+">"+a+"</"+e+">"}},4994:(t,e,n)=>{"use strict";var r=n(3383).IteratorPrototype,i=n(30),o=n(9114),a=n(8003),s=n(7497),u=function(){return this};t.exports=function(t,e,n){var c=e+" Iterator";return t.prototype=i(r,{next:o(1,n)}),a(t,c,!1,!0),s[c]=u,t}},8880:(t,e,n)=>{var r=n(9781),i=n(3070),o=n(9114);t.exports=r?function(t,e,n){return i.f(t,e,o(1,n))}:function(t,e,n){return t[e]=n,t}},9114:t=>{t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},6135:(t,e,n)=>{"use strict";var r=n(7593),i=n(3070),o=n(9114);t.exports=function(t,e,n){var a=r(e);a in t?i.f(t,a,o(0,n)):t[a]=n}},5573:(t,e,n)=>{"use strict";var r=n(7293),i=n(6650).start,o=Math.abs,a=Date.prototype,s=a.getTime,u=a.toISOString;t.exports=r((function(){return"0385-07-25T07:06:39.999Z"!=u.call(new Date(-50000000000001))}))||!r((function(){u.call(new Date(NaN))}))?function(){if(!isFinite(s.call(this)))throw RangeError("Invalid time value");var t=this,e=t.getUTCFullYear(),n=t.getUTCMilliseconds(),r=e<0?"-":e>9999?"+":"";return r+i(o(e),r?6:4,0)+"-"+i(t.getUTCMonth()+1,2,0)+"-"+i(t.getUTCDate(),2,0)+"T"+i(t.getUTCHours(),2,0)+":"+i(t.getUTCMinutes(),2,0)+":"+i(t.getUTCSeconds(),2,0)+"."+i(n,3,0)+"Z"}:u},8709:(t,e,n)=>{"use strict";var r=n(9670),i=n(7593);t.exports=function(t){if("string"!==t&&"number"!==t&&"default"!==t)throw TypeError("Incorrect hint");return i(r(this),"number"!==t)}},654:(t,e,n)=>{"use strict";var r=n(2109),i=n(4994),o=n(9518),a=n(7674),s=n(8003),u=n(8880),c=n(1320),l=n(5112),f=n(1913),h=n(7497),p=n(3383),d=p.IteratorPrototype,v=p.BUGGY_SAFARI_ITERATORS,g=l("iterator"),y="keys",m="values",b="entries",x=function(){return this};t.exports=function(t,e,n,l,p,w,S){i(n,e,l);var _,A,M,T=function(t){if(t===p&&C)return C;if(!v&&t in O)return O[t];switch(t){case y:case m:case b:return function(){return new n(this,t)}}return function(){return new n(this)}},E=e+" Iterator",k=!1,O=t.prototype,P=O[g]||O["@@iterator"]||p&&O[p],C=!v&&P||T(p),R="Array"==e&&O.entries||P;if(R&&(_=o(R.call(new t)),d!==Object.prototype&&_.next&&(f||o(_)===d||(a?a(_,d):"function"!=typeof _[g]&&u(_,g,x)),s(_,E,!0,!0),f&&(h[E]=x))),p==m&&P&&P.name!==m&&(k=!0,C=function(){return P.call(this)}),f&&!S||O[g]===C||u(O,g,C),h[e]=C,p)if(A={values:T(m),keys:w?C:T(y),entries:T(b)},S)for(M in A)(v||k||!(M in O))&&c(O,M,A[M]);else r({target:e,proto:!0,forced:v||k},A);return A}},7235:(t,e,n)=>{var r=n(857),i=n(6656),o=n(6061),a=n(3070).f;t.exports=function(t){var e=r.Symbol||(r.Symbol={});i(e,t)||a(e,t,{value:o.f(t)})}},9781:(t,e,n)=>{var r=n(7293);t.exports=!r((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]}))},317:(t,e,n)=>{var r=n(7854),i=n(111),o=r.document,a=i(o)&&i(o.createElement);t.exports=function(t){return a?o.createElement(t):{}}},8324:t=>{t.exports={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0}},8334:(t,e,n)=>{var r=n(8113);t.exports=/(iphone|ipod|ipad).*applewebkit/i.test(r)},5268:(t,e,n)=>{var r=n(4326),i=n(7854);t.exports="process"==r(i.process)},1036:(t,e,n)=>{var r=n(8113);t.exports=/web0s(?!.*chrome)/i.test(r)},8113:(t,e,n)=>{var r=n(5005);t.exports=r("navigator","userAgent")||""},7392:(t,e,n)=>{var r,i,o=n(7854),a=n(8113),s=o.process,u=s&&s.versions,c=u&&u.v8;c?i=(r=c.split("."))[0]+r[1]:a&&(!(r=a.match(/Edge\/(\d+)/))||r[1]>=74)&&(r=a.match(/Chrome\/(\d+)/))&&(i=r[1]),t.exports=i&&+i},748:t=>{t.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},2109:(t,e,n)=>{var r=n(7854),i=n(1236).f,o=n(8880),a=n(1320),s=n(3505),u=n(9920),c=n(4705);t.exports=function(t,e){var n,l,f,h,p,d=t.target,v=t.global,g=t.stat;if(n=v?r:g?r[d]||s(d,{}):(r[d]||{}).prototype)for(l in e){if(h=e[l],f=t.noTargetGet?(p=i(n,l))&&p.value:n[l],!c(v?l:d+(g?".":"#")+l,t.forced)&&void 0!==f){if(typeof h==typeof f)continue;u(h,f)}(t.sham||f&&f.sham)&&o(h,"sham",!0),a(n,l,h,t)}}},7293:t=>{t.exports=function(t){try{return!!t()}catch(t){return!0}}},7007:(t,e,n)=>{"use strict";n(4916);var r=n(1320),i=n(7293),o=n(5112),a=n(2261),s=n(8880),u=o("species"),c=!i((function(){var t=/./;return t.exec=function(){var t=[];return t.groups={a:"7"},t},"7"!=="".replace(t,"$<a>")})),l="$0"==="a".replace(/./,"$0"),f=o("replace"),h=!!/./[f]&&""===/./[f]("a","$0"),p=!i((function(){var t=/(?:)/,e=t.exec;t.exec=function(){return e.apply(this,arguments)};var n="ab".split(t);return 2!==n.length||"a"!==n[0]||"b"!==n[1]}));t.exports=function(t,e,n,f){var d=o(t),v=!i((function(){var e={};return e[d]=function(){return 7},7!=""[t](e)})),g=v&&!i((function(){var e=!1,n=/a/;return"split"===t&&((n={}).constructor={},n.constructor[u]=function(){return n},n.flags="",n[d]=/./[d]),n.exec=function(){return e=!0,null},n[d](""),!e}));if(!v||!g||"replace"===t&&(!c||!l||h)||"split"===t&&!p){var y=/./[d],m=n(d,""[t],(function(t,e,n,r,i){return e.exec===a?v&&!i?{done:!0,value:y.call(e,n,r)}:{done:!0,value:t.call(n,e,r)}:{done:!1}}),{REPLACE_KEEPS_$0:l,REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE:h}),b=m[0],x=m[1];r(String.prototype,t,b),r(RegExp.prototype,d,2==e?function(t,e){return x.call(t,this,e)}:function(t){return x.call(t,this)})}f&&s(RegExp.prototype[d],"sham",!0)}},6790:(t,e,n)=>{"use strict";var r=n(3157),i=n(7466),o=n(9974),a=function(t,e,n,s,u,c,l,f){for(var h,p=u,d=0,v=!!l&&o(l,f,3);d<s;){if(d in n){if(h=v?v(n[d],d,e):n[d],c>0&&r(h))p=a(t,e,h,i(h.length),p,c-1)-1;else{if(p>=9007199254740991)throw TypeError("Exceed the acceptable array length");t[p]=h}p++}d++}return p};t.exports=a},6677:(t,e,n)=>{var r=n(7293);t.exports=!r((function(){return Object.isExtensible(Object.preventExtensions({}))}))},9974:(t,e,n)=>{var r=n(3099);t.exports=function(t,e,n){if(r(t),void 0===e)return t;switch(n){case 0:return function(){return t.call(e)};case 1:return function(n){return t.call(e,n)};case 2:return function(n,r){return t.call(e,n,r)};case 3:return function(n,r,i){return t.call(e,n,r,i)}}return function(){return t.apply(e,arguments)}}},7065:(t,e,n)=>{"use strict";var r=n(3099),i=n(111),o=[].slice,a={},s=function(t,e,n){if(!(e in a)){for(var r=[],i=0;i<e;i++)r[i]="a["+i+"]";a[e]=Function("C,a","return new C("+r.join(",")+")")}return a[e](t,n)};t.exports=Function.bind||function(t){var e=r(this),n=o.call(arguments,1),a=function(){var r=n.concat(o.call(arguments));return this instanceof a?s(e,r.length,r):e.apply(t,r)};return i(e.prototype)&&(a.prototype=e.prototype),a}},5005:(t,e,n)=>{var r=n(857),i=n(7854),o=function(t){return"function"==typeof t?t:void 0};t.exports=function(t,e){return arguments.length<2?o(r[t])||o(i[t]):r[t]&&r[t][e]||i[t]&&i[t][e]}},1246:(t,e,n)=>{var r=n(648),i=n(7497),o=n(5112)("iterator");t.exports=function(t){if(null!=t)return t[o]||t["@@iterator"]||i[r(t)]}},8554:(t,e,n)=>{var r=n(9670),i=n(1246);t.exports=function(t){var e=i(t);if("function"!=typeof e)throw TypeError(String(t)+" is not iterable");return r(e.call(t))}},647:(t,e,n)=>{var r=n(7908),i=Math.floor,o="".replace,a=/\$([$&'`]|\d{1,2}|<[^>]*>)/g,s=/\$([$&'`]|\d{1,2})/g;t.exports=function(t,e,n,u,c,l){var f=n+t.length,h=u.length,p=s;return void 0!==c&&(c=r(c),p=a),o.call(l,p,(function(r,o){var a;switch(o.charAt(0)){case"$":return"$";case"&":return t;case"`":return e.slice(0,n);case"'":return e.slice(f);case"<":a=c[o.slice(1,-1)];break;default:var s=+o;if(0===s)return r;if(s>h){var l=i(s/10);return 0===l?r:l<=h?void 0===u[l-1]?o.charAt(1):u[l-1]+o.charAt(1):r}a=u[s-1]}return void 0===a?"":a}))}},7854:(t,e,n)=>{var r=function(t){return t&&t.Math==Math&&t};t.exports=r("object"==typeof globalThis&&globalThis)||r("object"==typeof window&&window)||r("object"==typeof self&&self)||r("object"==typeof n.g&&n.g)||function(){return this}()||Function("return this")()},6656:t=>{var e={}.hasOwnProperty;t.exports=function(t,n){return e.call(t,n)}},3501:t=>{t.exports={}},842:(t,e,n)=>{var r=n(7854);t.exports=function(t,e){var n=r.console;n&&n.error&&(1===arguments.length?n.error(t):n.error(t,e))}},490:(t,e,n)=>{var r=n(5005);t.exports=r("document","documentElement")},4664:(t,e,n)=>{var r=n(9781),i=n(7293),o=n(317);t.exports=!r&&!i((function(){return 7!=Object.defineProperty(o("div"),"a",{get:function(){return 7}}).a}))},1179:t=>{var e=Math.abs,n=Math.pow,r=Math.floor,i=Math.log,o=Math.LN2;t.exports={pack:function(t,a,s){var u,c,l,f=new Array(s),h=8*s-a-1,p=(1<<h)-1,d=p>>1,v=23===a?n(2,-24)-n(2,-77):0,g=t<0||0===t&&1/t<0?1:0,y=0;for((t=e(t))!=t||t===1/0?(c=t!=t?1:0,u=p):(u=r(i(t)/o),t*(l=n(2,-u))<1&&(u--,l*=2),(t+=u+d>=1?v/l:v*n(2,1-d))*l>=2&&(u++,l/=2),u+d>=p?(c=0,u=p):u+d>=1?(c=(t*l-1)*n(2,a),u+=d):(c=t*n(2,d-1)*n(2,a),u=0));a>=8;f[y++]=255&c,c/=256,a-=8);for(u=u<<a|c,h+=a;h>0;f[y++]=255&u,u/=256,h-=8);return f[--y]|=128*g,f},unpack:function(t,e){var r,i=t.length,o=8*i-e-1,a=(1<<o)-1,s=a>>1,u=o-7,c=i-1,l=t[c--],f=127&l;for(l>>=7;u>0;f=256*f+t[c],c--,u-=8);for(r=f&(1<<-u)-1,f>>=-u,u+=e;u>0;r=256*r+t[c],c--,u-=8);if(0===f)f=1-s;else{if(f===a)return r?NaN:l?-1/0:1/0;r+=n(2,e),f-=s}return(l?-1:1)*r*n(2,f-e)}}},8361:(t,e,n)=>{var r=n(7293),i=n(4326),o="".split;t.exports=r((function(){return!Object("z").propertyIsEnumerable(0)}))?function(t){return"String"==i(t)?o.call(t,""):Object(t)}:Object},9587:(t,e,n)=>{var r=n(111),i=n(7674);t.exports=function(t,e,n){var o,a;return i&&"function"==typeof(o=e.constructor)&&o!==n&&r(a=o.prototype)&&a!==n.prototype&&i(t,a),t}},2788:(t,e,n)=>{var r=n(5465),i=Function.toString;"function"!=typeof r.inspectSource&&(r.inspectSource=function(t){return i.call(t)}),t.exports=r.inspectSource},2423:(t,e,n)=>{var r=n(3501),i=n(111),o=n(6656),a=n(3070).f,s=n(9711),u=n(6677),c=s("meta"),l=0,f=Object.isExtensible||function(){return!0},h=function(t){a(t,c,{value:{objectID:"O"+ ++l,weakData:{}}})},p=t.exports={REQUIRED:!1,fastKey:function(t,e){if(!i(t))return"symbol"==typeof t?t:("string"==typeof t?"S":"P")+t;if(!o(t,c)){if(!f(t))return"F";if(!e)return"E";h(t)}return t[c].objectID},getWeakData:function(t,e){if(!o(t,c)){if(!f(t))return!0;if(!e)return!1;h(t)}return t[c].weakData},onFreeze:function(t){return u&&p.REQUIRED&&f(t)&&!o(t,c)&&h(t),t}};r[c]=!0},9909:(t,e,n)=>{var r,i,o,a=n(8536),s=n(7854),u=n(111),c=n(8880),l=n(6656),f=n(5465),h=n(6200),p=n(3501),d=s.WeakMap;if(a){var v=f.state||(f.state=new d),g=v.get,y=v.has,m=v.set;r=function(t,e){return e.facade=t,m.call(v,t,e),e},i=function(t){return g.call(v,t)||{}},o=function(t){return y.call(v,t)}}else{var b=h("state");p[b]=!0,r=function(t,e){return e.facade=t,c(t,b,e),e},i=function(t){return l(t,b)?t[b]:{}},o=function(t){return l(t,b)}}t.exports={set:r,get:i,has:o,enforce:function(t){return o(t)?i(t):r(t,{})},getterFor:function(t){return function(e){var n;if(!u(e)||(n=i(e)).type!==t)throw TypeError("Incompatible receiver, "+t+" required");return n}}}},7659:(t,e,n)=>{var r=n(5112),i=n(7497),o=r("iterator"),a=Array.prototype;t.exports=function(t){return void 0!==t&&(i.Array===t||a[o]===t)}},3157:(t,e,n)=>{var r=n(4326);t.exports=Array.isArray||function(t){return"Array"==r(t)}},4705:(t,e,n)=>{var r=n(7293),i=/#|\.prototype\./,o=function(t,e){var n=s[a(t)];return n==c||n!=u&&("function"==typeof e?r(e):!!e)},a=o.normalize=function(t){return String(t).replace(i,".").toLowerCase()},s=o.data={},u=o.NATIVE="N",c=o.POLYFILL="P";t.exports=o},8730:(t,e,n)=>{var r=n(111),i=Math.floor;t.exports=function(t){return!r(t)&&isFinite(t)&&i(t)===t}},111:t=>{t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},1913:t=>{t.exports=!1},7850:(t,e,n)=>{var r=n(111),i=n(4326),o=n(5112)("match");t.exports=function(t){var e;return r(t)&&(void 0!==(e=t[o])?!!e:"RegExp"==i(t))}},408:(t,e,n)=>{var r=n(9670),i=n(7659),o=n(7466),a=n(9974),s=n(1246),u=n(9212),c=function(t,e){this.stopped=t,this.result=e};t.exports=function(t,e,n){var l,f,h,p,d,v,g,y=n&&n.that,m=!(!n||!n.AS_ENTRIES),b=!(!n||!n.IS_ITERATOR),x=!(!n||!n.INTERRUPTED),w=a(e,y,1+m+x),S=function(t){return l&&u(l),new c(!0,t)},_=function(t){return m?(r(t),x?w(t[0],t[1],S):w(t[0],t[1])):x?w(t,S):w(t)};if(b)l=t;else{if("function"!=typeof(f=s(t)))throw TypeError("Target is not iterable");if(i(f)){for(h=0,p=o(t.length);p>h;h++)if((d=_(t[h]))&&d instanceof c)return d;return new c(!1)}l=f.call(t)}for(v=l.next;!(g=v.call(l)).done;){try{d=_(g.value)}catch(t){throw u(l),t}if("object"==typeof d&&d&&d instanceof c)return d}return new c(!1)}},9212:(t,e,n)=>{var r=n(9670);t.exports=function(t){var e=t.return;if(void 0!==e)return r(e.call(t)).value}},3383:(t,e,n)=>{"use strict";var r,i,o,a=n(7293),s=n(9518),u=n(8880),c=n(6656),l=n(5112),f=n(1913),h=l("iterator"),p=!1;[].keys&&("next"in(o=[].keys())?(i=s(s(o)))!==Object.prototype&&(r=i):p=!0);var d=null==r||a((function(){var t={};return r[h].call(t)!==t}));d&&(r={}),f&&!d||c(r,h)||u(r,h,(function(){return this})),t.exports={IteratorPrototype:r,BUGGY_SAFARI_ITERATORS:p}},7497:t=>{t.exports={}},6736:t=>{var e=Math.expm1,n=Math.exp;t.exports=!e||e(10)>22025.465794806718||e(10)<22025.465794806718||-2e-17!=e(-2e-17)?function(t){return 0==(t=+t)?t:t>-1e-6&&t<1e-6?t+t*t/2:n(t)-1}:e},6130:(t,e,n)=>{var r=n(4310),i=Math.abs,o=Math.pow,a=o(2,-52),s=o(2,-23),u=o(2,127)*(2-s),c=o(2,-126);t.exports=Math.fround||function(t){var e,n,o=i(t),l=r(t);return o<c?l*(o/c/s+1/a-1/a)*c*s:(n=(e=(1+s/a)*o)-(e-o))>u||n!=n?l*(1/0):l*n}},6513:t=>{var e=Math.log;t.exports=Math.log1p||function(t){return(t=+t)>-1e-8&&t<1e-8?t-t*t/2:e(1+t)}},4310:t=>{t.exports=Math.sign||function(t){return 0==(t=+t)||t!=t?t:t<0?-1:1}},5948:(t,e,n)=>{var r,i,o,a,s,u,c,l,f=n(7854),h=n(1236).f,p=n(261).set,d=n(8334),v=n(1036),g=n(5268),y=f.MutationObserver||f.WebKitMutationObserver,m=f.document,b=f.process,x=f.Promise,w=h(f,"queueMicrotask"),S=w&&w.value;S||(r=function(){var t,e;for(g&&(t=b.domain)&&t.exit();i;){e=i.fn,i=i.next;try{e()}catch(t){throw i?a():o=void 0,t}}o=void 0,t&&t.enter()},d||g||v||!y||!m?x&&x.resolve?(c=x.resolve(void 0),l=c.then,a=function(){l.call(c,r)}):a=g?function(){b.nextTick(r)}:function(){p.call(f,r)}:(s=!0,u=m.createTextNode(""),new y(r).observe(u,{characterData:!0}),a=function(){u.data=s=!s})),t.exports=S||function(t){var e={fn:t,next:void 0};o&&(o.next=e),i||(i=e,a()),o=e}},3366:(t,e,n)=>{var r=n(7854);t.exports=r.Promise},133:(t,e,n)=>{var r=n(5268),i=n(7392),o=n(7293);t.exports=!!Object.getOwnPropertySymbols&&!o((function(){return!Symbol.sham&&(r?38===i:i>37&&i<41)}))},590:(t,e,n)=>{var r=n(7293),i=n(5112),o=n(1913),a=i("iterator");t.exports=!r((function(){var t=new URL("b?a=1&b=2&c=3","http://a"),e=t.searchParams,n="";return t.pathname="c%20d",e.forEach((function(t,r){e.delete("b"),n+=r+t})),o&&!t.toJSON||!e.sort||"http://a/c%20d?a=1&c=3"!==t.href||"3"!==e.get("c")||"a=1"!==String(new URLSearchParams("?a=1"))||!e[a]||"a"!==new URL("https://a@b").username||"b"!==new URLSearchParams(new URLSearchParams("a=b")).get("a")||"xn--e1aybc"!==new URL("http://тест").host||"#%D0%B1"!==new URL("http://a#б").hash||"a1c3"!==n||"x"!==new URL("http://x",void 0).host}))},8536:(t,e,n)=>{var r=n(7854),i=n(2788),o=r.WeakMap;t.exports="function"==typeof o&&/native code/.test(i(o))},8523:(t,e,n)=>{"use strict";var r=n(3099),i=function(t){var e,n;this.promise=new t((function(t,r){if(void 0!==e||void 0!==n)throw TypeError("Bad Promise constructor");e=t,n=r})),this.resolve=r(e),this.reject=r(n)};t.exports.f=function(t){return new i(t)}},3929:(t,e,n)=>{var r=n(7850);t.exports=function(t){if(r(t))throw TypeError("The method doesn't accept regular expressions");return t}},7023:(t,e,n)=>{var r=n(7854).isFinite;t.exports=Number.isFinite||function(t){return"number"==typeof t&&r(t)}},2814:(t,e,n)=>{var r=n(7854),i=n(3111).trim,o=n(1361),a=r.parseFloat,s=1/a(o+"-0")!=-1/0;t.exports=s?function(t){var e=i(String(t)),n=a(e);return 0===n&&"-"==e.charAt(0)?-0:n}:a},3009:(t,e,n)=>{var r=n(7854),i=n(3111).trim,o=n(1361),a=r.parseInt,s=/^[+-]?0[Xx]/,u=8!==a(o+"08")||22!==a(o+"0x16");t.exports=u?function(t,e){var n=i(String(t));return a(n,e>>>0||(s.test(n)?16:10))}:a},1574:(t,e,n)=>{"use strict";var r=n(9781),i=n(7293),o=n(1956),a=n(5181),s=n(5296),u=n(7908),c=n(8361),l=Object.assign,f=Object.defineProperty;t.exports=!l||i((function(){if(r&&1!==l({b:1},l(f({},"a",{enumerable:!0,get:function(){f(this,"b",{value:3,enumerable:!1})}}),{b:2})).b)return!0;var t={},e={},n=Symbol(),i="abcdefghijklmnopqrst";return t[n]=7,i.split("").forEach((function(t){e[t]=t})),7!=l({},t)[n]||o(l({},e)).join("")!=i}))?function(t,e){for(var n=u(t),i=arguments.length,l=1,f=a.f,h=s.f;i>l;)for(var p,d=c(arguments[l++]),v=f?o(d).concat(f(d)):o(d),g=v.length,y=0;g>y;)p=v[y++],r&&!h.call(d,p)||(n[p]=d[p]);return n}:l},30:(t,e,n)=>{var r,i=n(9670),o=n(6048),a=n(748),s=n(3501),u=n(490),c=n(317),l=n(6200)("IE_PROTO"),f=function(){},h=function(t){return"<script>"+t+"<\/script>"},p=function(){try{r=document.domain&&new ActiveXObject("htmlfile")}catch(t){}var t,e;p=r?function(t){t.write(h("")),t.close();var e=t.parentWindow.Object;return t=null,e}(r):((e=c("iframe")).style.display="none",u.appendChild(e),e.src=String("javascript:"),(t=e.contentWindow.document).open(),t.write(h("document.F=Object")),t.close(),t.F);for(var n=a.length;n--;)delete p.prototype[a[n]];return p()};s[l]=!0,t.exports=Object.create||function(t,e){var n;return null!==t?(f.prototype=i(t),n=new f,f.prototype=null,n[l]=t):n=p(),void 0===e?n:o(n,e)}},6048:(t,e,n)=>{var r=n(9781),i=n(3070),o=n(9670),a=n(1956);t.exports=r?Object.defineProperties:function(t,e){o(t);for(var n,r=a(e),s=r.length,u=0;s>u;)i.f(t,n=r[u++],e[n]);return t}},3070:(t,e,n)=>{var r=n(9781),i=n(4664),o=n(9670),a=n(7593),s=Object.defineProperty;e.f=r?s:function(t,e,n){if(o(t),e=a(e,!0),o(n),i)try{return s(t,e,n)}catch(t){}if("get"in n||"set"in n)throw TypeError("Accessors not supported");return"value"in n&&(t[e]=n.value),t}},1236:(t,e,n)=>{var r=n(9781),i=n(5296),o=n(9114),a=n(5656),s=n(7593),u=n(6656),c=n(4664),l=Object.getOwnPropertyDescriptor;e.f=r?l:function(t,e){if(t=a(t),e=s(e,!0),c)try{return l(t,e)}catch(t){}if(u(t,e))return o(!i.f.call(t,e),t[e])}},1156:(t,e,n)=>{var r=n(5656),i=n(8006).f,o={}.toString,a="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];t.exports.f=function(t){return a&&"[object Window]"==o.call(t)?function(t){try{return i(t)}catch(t){return a.slice()}}(t):i(r(t))}},8006:(t,e,n)=>{var r=n(6324),i=n(748).concat("length","prototype");e.f=Object.getOwnPropertyNames||function(t){return r(t,i)}},5181:(t,e)=>{e.f=Object.getOwnPropertySymbols},9518:(t,e,n)=>{var r=n(6656),i=n(7908),o=n(6200),a=n(8544),s=o("IE_PROTO"),u=Object.prototype;t.exports=a?Object.getPrototypeOf:function(t){return t=i(t),r(t,s)?t[s]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?u:null}},6324:(t,e,n)=>{var r=n(6656),i=n(5656),o=n(1318).indexOf,a=n(3501);t.exports=function(t,e){var n,s=i(t),u=0,c=[];for(n in s)!r(a,n)&&r(s,n)&&c.push(n);for(;e.length>u;)r(s,n=e[u++])&&(~o(c,n)||c.push(n));return c}},1956:(t,e,n)=>{var r=n(6324),i=n(748);t.exports=Object.keys||function(t){return r(t,i)}},5296:(t,e)=>{"use strict";var n={}.propertyIsEnumerable,r=Object.getOwnPropertyDescriptor,i=r&&!n.call({1:2},1);e.f=i?function(t){var e=r(this,t);return!!e&&e.enumerable}:n},9026:(t,e,n)=>{"use strict";var r=n(1913),i=n(7854),o=n(7293);t.exports=r||!o((function(){var t=Math.random();__defineSetter__.call(null,t,(function(){})),delete i[t]}))},7674:(t,e,n)=>{var r=n(9670),i=n(6077);t.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var t,e=!1,n={};try{(t=Object.getOwnPropertyDescriptor(Object.prototype,"__proto__").set).call(n,[]),e=n instanceof Array}catch(t){}return function(n,o){return r(n),i(o),e?t.call(n,o):n.__proto__=o,n}}():void 0)},4699:(t,e,n)=>{var r=n(9781),i=n(1956),o=n(5656),a=n(5296).f,s=function(t){return function(e){for(var n,s=o(e),u=i(s),c=u.length,l=0,f=[];c>l;)n=u[l++],r&&!a.call(s,n)||f.push(t?[n,s[n]]:s[n]);return f}};t.exports={entries:s(!0),values:s(!1)}},288:(t,e,n)=>{"use strict";var r=n(1694),i=n(648);t.exports=r?{}.toString:function(){return"[object "+i(this)+"]"}},3887:(t,e,n)=>{var r=n(5005),i=n(8006),o=n(5181),a=n(9670);t.exports=r("Reflect","ownKeys")||function(t){var e=i.f(a(t)),n=o.f;return n?e.concat(n(t)):e}},857:(t,e,n)=>{var r=n(7854);t.exports=r},2534:t=>{t.exports=function(t){try{return{error:!1,value:t()}}catch(t){return{error:!0,value:t}}}},9478:(t,e,n)=>{var r=n(9670),i=n(111),o=n(8523);t.exports=function(t,e){if(r(t),i(e)&&e.constructor===t)return e;var n=o.f(t);return(0,n.resolve)(e),n.promise}},2248:(t,e,n)=>{var r=n(1320);t.exports=function(t,e,n){for(var i in e)r(t,i,e[i],n);return t}},1320:(t,e,n)=>{var r=n(7854),i=n(8880),o=n(6656),a=n(3505),s=n(2788),u=n(9909),c=u.get,l=u.enforce,f=String(String).split("String");(t.exports=function(t,e,n,s){var u,c=!!s&&!!s.unsafe,h=!!s&&!!s.enumerable,p=!!s&&!!s.noTargetGet;"function"==typeof n&&("string"!=typeof e||o(n,"name")||i(n,"name",e),(u=l(n)).source||(u.source=f.join("string"==typeof e?e:""))),t!==r?(c?!p&&t[e]&&(h=!0):delete t[e],h?t[e]=n:i(t,e,n)):h?t[e]=n:a(e,n)})(Function.prototype,"toString",(function(){return"function"==typeof this&&c(this).source||s(this)}))},7651:(t,e,n)=>{var r=n(4326),i=n(2261);t.exports=function(t,e){var n=t.exec;if("function"==typeof n){var o=n.call(t,e);if("object"!=typeof o)throw TypeError("RegExp exec method returned something other than an Object or null");return o}if("RegExp"!==r(t))throw TypeError("RegExp#exec called on incompatible receiver");return i.call(t,e)}},2261:(t,e,n)=>{"use strict";var r,i,o=n(7066),a=n(2999),s=RegExp.prototype.exec,u=String.prototype.replace,c=s,l=(r=/a/,i=/b*/g,s.call(r,"a"),s.call(i,"a"),0!==r.lastIndex||0!==i.lastIndex),f=a.UNSUPPORTED_Y||a.BROKEN_CARET,h=void 0!==/()??/.exec("")[1];(l||h||f)&&(c=function(t){var e,n,r,i,a=this,c=f&&a.sticky,p=o.call(a),d=a.source,v=0,g=t;return c&&(-1===(p=p.replace("y","")).indexOf("g")&&(p+="g"),g=String(t).slice(a.lastIndex),a.lastIndex>0&&(!a.multiline||a.multiline&&"\n"!==t[a.lastIndex-1])&&(d="(?: "+d+")",g=" "+g,v++),n=new RegExp("^(?:"+d+")",p)),h&&(n=new RegExp("^"+d+"$(?!\\s)",p)),l&&(e=a.lastIndex),r=s.call(c?n:a,g),c?r?(r.input=r.input.slice(v),r[0]=r[0].slice(v),r.index=a.lastIndex,a.lastIndex+=r[0].length):a.lastIndex=0:l&&r&&(a.lastIndex=a.global?r.index+r[0].length:e),h&&r&&r.length>1&&u.call(r[0],n,(function(){for(i=1;i<arguments.length-2;i++)void 0===arguments[i]&&(r[i]=void 0)})),r}),t.exports=c},7066:(t,e,n)=>{"use strict";var r=n(9670);t.exports=function(){var t=r(this),e="";return t.global&&(e+="g"),t.ignoreCase&&(e+="i"),t.multiline&&(e+="m"),t.dotAll&&(e+="s"),t.unicode&&(e+="u"),t.sticky&&(e+="y"),e}},2999:(t,e,n)=>{"use strict";var r=n(7293);function i(t,e){return RegExp(t,e)}e.UNSUPPORTED_Y=r((function(){var t=i("a","y");return t.lastIndex=2,null!=t.exec("abcd")})),e.BROKEN_CARET=r((function(){var t=i("^r","gy");return t.lastIndex=2,null!=t.exec("str")}))},4488:t=>{t.exports=function(t){if(null==t)throw TypeError("Can't call method on "+t);return t}},1150:t=>{t.exports=Object.is||function(t,e){return t===e?0!==t||1/t==1/e:t!=t&&e!=e}},3505:(t,e,n)=>{var r=n(7854),i=n(8880);t.exports=function(t,e){try{i(r,t,e)}catch(n){r[t]=e}return e}},6340:(t,e,n)=>{"use strict";var r=n(5005),i=n(3070),o=n(5112),a=n(9781),s=o("species");t.exports=function(t){var e=r(t),n=i.f;a&&e&&!e[s]&&n(e,s,{configurable:!0,get:function(){return this}})}},8003:(t,e,n)=>{var r=n(3070).f,i=n(6656),o=n(5112)("toStringTag");t.exports=function(t,e,n){t&&!i(t=n?t:t.prototype,o)&&r(t,o,{configurable:!0,value:e})}},6200:(t,e,n)=>{var r=n(2309),i=n(9711),o=r("keys");t.exports=function(t){return o[t]||(o[t]=i(t))}},5465:(t,e,n)=>{var r=n(7854),i=n(3505),o="__core-js_shared__",a=r[o]||i(o,{});t.exports=a},2309:(t,e,n)=>{var r=n(1913),i=n(5465);(t.exports=function(t,e){return i[t]||(i[t]=void 0!==e?e:{})})("versions",[]).push({version:"3.9.1",mode:r?"pure":"global",copyright:"© 2021 Denis Pushkarev (zloirock.ru)"})},6707:(t,e,n)=>{var r=n(9670),i=n(3099),o=n(5112)("species");t.exports=function(t,e){var n,a=r(t).constructor;return void 0===a||null==(n=r(a)[o])?e:i(n)}},3429:(t,e,n)=>{var r=n(7293);t.exports=function(t){return r((function(){var e=""[t]('"');return e!==e.toLowerCase()||e.split('"').length>3}))}},8710:(t,e,n)=>{var r=n(9958),i=n(4488),o=function(t){return function(e,n){var o,a,s=String(i(e)),u=r(n),c=s.length;return u<0||u>=c?t?"":void 0:(o=s.charCodeAt(u))<55296||o>56319||u+1===c||(a=s.charCodeAt(u+1))<56320||a>57343?t?s.charAt(u):o:t?s.slice(u,u+2):a-56320+(o-55296<<10)+65536}};t.exports={codeAt:o(!1),charAt:o(!0)}},7061:(t,e,n)=>{var r=n(8113);t.exports=/Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(r)},6650:(t,e,n)=>{var r=n(7466),i=n(8415),o=n(4488),a=Math.ceil,s=function(t){return function(e,n,s){var u,c,l=String(o(e)),f=l.length,h=void 0===s?" ":String(s),p=r(n);return p<=f||""==h?l:(u=p-f,(c=i.call(h,a(u/h.length))).length>u&&(c=c.slice(0,u)),t?l+c:c+l)}};t.exports={start:s(!1),end:s(!0)}},3197:t=>{"use strict";var e=2147483647,n=/[^\0-\u007E]/,r=/[.\u3002\uFF0E\uFF61]/g,i="Overflow: input needs wider integers to process",o=Math.floor,a=String.fromCharCode,s=function(t){return t+22+75*(t<26)},u=function(t,e,n){var r=0;for(t=n?o(t/700):t>>1,t+=o(t/e);t>455;r+=36)t=o(t/35);return o(r+36*t/(t+38))},c=function(t){var n,r,c=[],l=(t=function(t){for(var e=[],n=0,r=t.length;n<r;){var i=t.charCodeAt(n++);if(i>=55296&&i<=56319&&n<r){var o=t.charCodeAt(n++);56320==(64512&o)?e.push(((1023&i)<<10)+(1023&o)+65536):(e.push(i),n--)}else e.push(i)}return e}(t)).length,f=128,h=0,p=72;for(n=0;n<t.length;n++)(r=t[n])<128&&c.push(a(r));var d=c.length,v=d;for(d&&c.push("-");v<l;){var g=e;for(n=0;n<t.length;n++)(r=t[n])>=f&&r<g&&(g=r);var y=v+1;if(g-f>o((e-h)/y))throw RangeError(i);for(h+=(g-f)*y,f=g,n=0;n<t.length;n++){if((r=t[n])<f&&++h>e)throw RangeError(i);if(r==f){for(var m=h,b=36;;b+=36){var x=b<=p?1:b>=p+26?26:b-p;if(m<x)break;var w=m-x,S=36-x;c.push(a(s(x+w%S))),m=o(w/S)}c.push(a(s(m))),p=u(h,y,v==d),h=0,++v}}++h,++f}return c.join("")};t.exports=function(t){var e,i,o=[],a=t.toLowerCase().replace(r,".").split(".");for(e=0;e<a.length;e++)i=a[e],o.push(n.test(i)?"xn--"+c(i):i);return o.join(".")}},8415:(t,e,n)=>{"use strict";var r=n(9958),i=n(4488);t.exports="".repeat||function(t){var e=String(i(this)),n="",o=r(t);if(o<0||o==1/0)throw RangeError("Wrong number of repetitions");for(;o>0;(o>>>=1)&&(e+=e))1&o&&(n+=e);return n}},6091:(t,e,n)=>{var r=n(7293),i=n(1361);t.exports=function(t){return r((function(){return!!i[t]()||"​᠎"!="​᠎"[t]()||i[t].name!==t}))}},3111:(t,e,n)=>{var r=n(4488),i="["+n(1361)+"]",o=RegExp("^"+i+i+"*"),a=RegExp(i+i+"*$"),s=function(t){return function(e){var n=String(r(e));return 1&t&&(n=n.replace(o,"")),2&t&&(n=n.replace(a,"")),n}};t.exports={start:s(1),end:s(2),trim:s(3)}},261:(t,e,n)=>{var r,i,o,a=n(7854),s=n(7293),u=n(9974),c=n(490),l=n(317),f=n(8334),h=n(5268),p=a.location,d=a.setImmediate,v=a.clearImmediate,g=a.process,y=a.MessageChannel,m=a.Dispatch,b=0,x={},w=function(t){if(x.hasOwnProperty(t)){var e=x[t];delete x[t],e()}},S=function(t){return function(){w(t)}},_=function(t){w(t.data)},A=function(t){a.postMessage(t+"",p.protocol+"//"+p.host)};d&&v||(d=function(t){for(var e=[],n=1;arguments.length>n;)e.push(arguments[n++]);return x[++b]=function(){("function"==typeof t?t:Function(t)).apply(void 0,e)},r(b),b},v=function(t){delete x[t]},h?r=function(t){g.nextTick(S(t))}:m&&m.now?r=function(t){m.now(S(t))}:y&&!f?(o=(i=new y).port2,i.port1.onmessage=_,r=u(o.postMessage,o,1)):a.addEventListener&&"function"==typeof postMessage&&!a.importScripts&&p&&"file:"!==p.protocol&&!s(A)?(r=A,a.addEventListener("message",_,!1)):r="onreadystatechange"in l("script")?function(t){c.appendChild(l("script")).onreadystatechange=function(){c.removeChild(this),w(t)}}:function(t){setTimeout(S(t),0)}),t.exports={set:d,clear:v}},863:(t,e,n)=>{var r=n(4326);t.exports=function(t){if("number"!=typeof t&&"Number"!=r(t))throw TypeError("Incorrect invocation");return+t}},1400:(t,e,n)=>{var r=n(9958),i=Math.max,o=Math.min;t.exports=function(t,e){var n=r(t);return n<0?i(n+e,0):o(n,e)}},7067:(t,e,n)=>{var r=n(9958),i=n(7466);t.exports=function(t){if(void 0===t)return 0;var e=r(t),n=i(e);if(e!==n)throw RangeError("Wrong length or index");return n}},5656:(t,e,n)=>{var r=n(8361),i=n(4488);t.exports=function(t){return r(i(t))}},9958:t=>{var e=Math.ceil,n=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?n:e)(t)}},7466:(t,e,n)=>{var r=n(9958),i=Math.min;t.exports=function(t){return t>0?i(r(t),9007199254740991):0}},7908:(t,e,n)=>{var r=n(4488);t.exports=function(t){return Object(r(t))}},4590:(t,e,n)=>{var r=n(3002);t.exports=function(t,e){var n=r(t);if(n%e)throw RangeError("Wrong offset");return n}},3002:(t,e,n)=>{var r=n(9958);t.exports=function(t){var e=r(t);if(e<0)throw RangeError("The argument can't be less than 0");return e}},7593:(t,e,n)=>{var r=n(111);t.exports=function(t,e){if(!r(t))return t;var n,i;if(e&&"function"==typeof(n=t.toString)&&!r(i=n.call(t)))return i;if("function"==typeof(n=t.valueOf)&&!r(i=n.call(t)))return i;if(!e&&"function"==typeof(n=t.toString)&&!r(i=n.call(t)))return i;throw TypeError("Can't convert object to primitive value")}},1694:(t,e,n)=>{var r={};r[n(5112)("toStringTag")]="z",t.exports="[object z]"===String(r)},9843:(t,e,n)=>{"use strict";var r=n(2109),i=n(7854),o=n(9781),a=n(3832),s=n(260),u=n(3331),c=n(5787),l=n(9114),f=n(8880),h=n(7466),p=n(7067),d=n(4590),v=n(7593),g=n(6656),y=n(648),m=n(111),b=n(30),x=n(7674),w=n(8006).f,S=n(7321),_=n(2092).forEach,A=n(6340),M=n(3070),T=n(1236),E=n(9909),k=n(9587),O=E.get,P=E.set,C=M.f,R=T.f,I=Math.round,j=i.RangeError,N=u.ArrayBuffer,L=u.DataView,z=s.NATIVE_ARRAY_BUFFER_VIEWS,D=s.TYPED_ARRAY_TAG,F=s.TypedArray,U=s.TypedArrayPrototype,B=s.aTypedArrayConstructor,q=s.isTypedArray,V="BYTES_PER_ELEMENT",W="Wrong length",H=function(t,e){for(var n=0,r=e.length,i=new(B(t))(r);r>n;)i[n]=e[n++];return i},Y=function(t,e){C(t,e,{get:function(){return O(this)[e]}})},G=function(t){var e;return t instanceof N||"ArrayBuffer"==(e=y(t))||"SharedArrayBuffer"==e},X=function(t,e){return q(t)&&"symbol"!=typeof e&&e in t&&String(+e)==String(e)},$=function(t,e){return X(t,e=v(e,!0))?l(2,t[e]):R(t,e)},Z=function(t,e,n){return!(X(t,e=v(e,!0))&&m(n)&&g(n,"value"))||g(n,"get")||g(n,"set")||n.configurable||g(n,"writable")&&!n.writable||g(n,"enumerable")&&!n.enumerable?C(t,e,n):(t[e]=n.value,t)};o?(z||(T.f=$,M.f=Z,Y(U,"buffer"),Y(U,"byteOffset"),Y(U,"byteLength"),Y(U,"length")),r({target:"Object",stat:!0,forced:!z},{getOwnPropertyDescriptor:$,defineProperty:Z}),t.exports=function(t,e,n){var o=t.match(/\d+$/)[0]/8,s=t+(n?"Clamped":"")+"Array",u="get"+t,l="set"+t,v=i[s],g=v,y=g&&g.prototype,M={},T=function(t,e){C(t,e,{get:function(){return function(t,e){var n=O(t);return n.view[u](e*o+n.byteOffset,!0)}(this,e)},set:function(t){return function(t,e,r){var i=O(t);n&&(r=(r=I(r))<0?0:r>255?255:255&r),i.view[l](e*o+i.byteOffset,r,!0)}(this,e,t)},enumerable:!0})};z?a&&(g=e((function(t,e,n,r){return c(t,g,s),k(m(e)?G(e)?void 0!==r?new v(e,d(n,o),r):void 0!==n?new v(e,d(n,o)):new v(e):q(e)?H(g,e):S.call(g,e):new v(p(e)),t,g)})),x&&x(g,F),_(w(v),(function(t){t in g||f(g,t,v[t])})),g.prototype=y):(g=e((function(t,e,n,r){c(t,g,s);var i,a,u,l=0,f=0;if(m(e)){if(!G(e))return q(e)?H(g,e):S.call(g,e);i=e,f=d(n,o);var v=e.byteLength;if(void 0===r){if(v%o)throw j(W);if((a=v-f)<0)throw j(W)}else if((a=h(r)*o)+f>v)throw j(W);u=a/o}else u=p(e),i=new N(a=u*o);for(P(t,{buffer:i,byteOffset:f,byteLength:a,length:u,view:new L(i)});l<u;)T(t,l++)})),x&&x(g,F),y=g.prototype=b(U)),y.constructor!==g&&f(y,"constructor",g),D&&f(y,D,s),M[s]=g,r({global:!0,forced:g!=v,sham:!z},M),V in g||f(g,V,o),V in y||f(y,V,o),A(s)}):t.exports=function(){}},3832:(t,e,n)=>{var r=n(7854),i=n(7293),o=n(7072),a=n(260).NATIVE_ARRAY_BUFFER_VIEWS,s=r.ArrayBuffer,u=r.Int8Array;t.exports=!a||!i((function(){u(1)}))||!i((function(){new u(-1)}))||!o((function(t){new u,new u(null),new u(1.5),new u(t)}),!0)||i((function(){return 1!==new u(new s(2),1,void 0).length}))},3074:(t,e,n)=>{var r=n(260).aTypedArrayConstructor,i=n(6707);t.exports=function(t,e){for(var n=i(t,t.constructor),o=0,a=e.length,s=new(r(n))(a);a>o;)s[o]=e[o++];return s}},7321:(t,e,n)=>{var r=n(7908),i=n(7466),o=n(1246),a=n(7659),s=n(9974),u=n(260).aTypedArrayConstructor;t.exports=function(t){var e,n,c,l,f,h,p=r(t),d=arguments.length,v=d>1?arguments[1]:void 0,g=void 0!==v,y=o(p);if(null!=y&&!a(y))for(h=(f=y.call(p)).next,p=[];!(l=h.call(f)).done;)p.push(l.value);for(g&&d>2&&(v=s(v,arguments[2],2)),n=i(p.length),c=new(u(this))(n),e=0;n>e;e++)c[e]=g?v(p[e],e):p[e];return c}},9711:t=>{var e=0,n=Math.random();t.exports=function(t){return"Symbol("+String(void 0===t?"":t)+")_"+(++e+n).toString(36)}},3307:(t,e,n)=>{var r=n(133);t.exports=r&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},6061:(t,e,n)=>{var r=n(5112);e.f=r},5112:(t,e,n)=>{var r=n(7854),i=n(2309),o=n(6656),a=n(9711),s=n(133),u=n(3307),c=i("wks"),l=r.Symbol,f=u?l:l&&l.withoutSetter||a;t.exports=function(t){return o(c,t)&&(s||"string"==typeof c[t])||(s&&o(l,t)?c[t]=l[t]:c[t]=f("Symbol."+t)),c[t]}},1361:t=>{t.exports="\t\n\v\f\r                　\u2028\u2029\ufeff"},9170:(t,e,n)=>{"use strict";var r=n(2109),i=n(9518),o=n(7674),a=n(30),s=n(8880),u=n(9114),c=n(408),l=function(t,e){var n=this;if(!(n instanceof l))return new l(t,e);o&&(n=o(new Error(void 0),i(n))),void 0!==e&&s(n,"message",String(e));var r=[];return c(t,r.push,{that:r}),s(n,"errors",r),n};l.prototype=a(Error.prototype,{constructor:u(5,l),message:u(5,""),name:u(5,"AggregateError")}),r({global:!0},{AggregateError:l})},8264:(t,e,n)=>{"use strict";var r=n(2109),i=n(7854),o=n(3331),a=n(6340),s=o.ArrayBuffer;r({global:!0,forced:i.ArrayBuffer!==s},{ArrayBuffer:s}),a("ArrayBuffer")},6938:(t,e,n)=>{var r=n(2109),i=n(260);r({target:"ArrayBuffer",stat:!0,forced:!i.NATIVE_ARRAY_BUFFER_VIEWS},{isView:i.isView})},9575:(t,e,n)=>{"use strict";var r=n(2109),i=n(7293),o=n(3331),a=n(9670),s=n(1400),u=n(7466),c=n(6707),l=o.ArrayBuffer,f=o.DataView,h=l.prototype.slice;r({target:"ArrayBuffer",proto:!0,unsafe:!0,forced:i((function(){return!new l(2).slice(1,void 0).byteLength}))},{slice:function(t,e){if(void 0!==h&&void 0===e)return h.call(a(this),t);for(var n=a(this).byteLength,r=s(t,n),i=s(void 0===e?n:e,n),o=new(c(this,l))(u(i-r)),p=new f(this),d=new f(o),v=0;r<i;)d.setUint8(v++,p.getUint8(r++));return o}})},2222:(t,e,n)=>{"use strict";var r=n(2109),i=n(7293),o=n(3157),a=n(111),s=n(7908),u=n(7466),c=n(6135),l=n(5417),f=n(1194),h=n(5112),p=n(7392),d=h("isConcatSpreadable"),v=9007199254740991,g="Maximum allowed index exceeded",y=p>=51||!i((function(){var t=[];return t[d]=!1,t.concat()[0]!==t})),m=f("concat"),b=function(t){if(!a(t))return!1;var e=t[d];return void 0!==e?!!e:o(t)};r({target:"Array",proto:!0,forced:!y||!m},{concat:function(t){var e,n,r,i,o,a=s(this),f=l(a,0),h=0;for(e=-1,r=arguments.length;e<r;e++)if(b(o=-1===e?a:arguments[e])){if(h+(i=u(o.length))>v)throw TypeError(g);for(n=0;n<i;n++,h++)n in o&&c(f,h,o[n])}else{if(h>=v)throw TypeError(g);c(f,h++,o)}return f.length=h,f}})},545:(t,e,n)=>{var r=n(2109),i=n(1048),o=n(1223);r({target:"Array",proto:!0},{copyWithin:i}),o("copyWithin")},6541:(t,e,n)=>{"use strict";var r=n(2109),i=n(2092).every;r({target:"Array",proto:!0,forced:!n(2133)("every")},{every:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}})},3290:(t,e,n)=>{var r=n(2109),i=n(1285),o=n(1223);r({target:"Array",proto:!0},{fill:i}),o("fill")},7327:(t,e,n)=>{"use strict";var r=n(2109),i=n(2092).filter;r({target:"Array",proto:!0,forced:!n(1194)("filter")},{filter:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}})},4553:(t,e,n)=>{"use strict";var r=n(2109),i=n(2092).findIndex,o=n(1223),a="findIndex",s=!0;a in[]&&Array(1).findIndex((function(){s=!1})),r({target:"Array",proto:!0,forced:s},{findIndex:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}}),o(a)},9826:(t,e,n)=>{"use strict";var r=n(2109),i=n(2092).find,o=n(1223),a="find",s=!0;a in[]&&Array(1).find((function(){s=!1})),r({target:"Array",proto:!0,forced:s},{find:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}}),o(a)},6535:(t,e,n)=>{"use strict";var r=n(2109),i=n(6790),o=n(7908),a=n(7466),s=n(3099),u=n(5417);r({target:"Array",proto:!0},{flatMap:function(t){var e,n=o(this),r=a(n.length);return s(t),(e=u(n,0)).length=i(e,n,n,r,0,1,t,arguments.length>1?arguments[1]:void 0),e}})},4944:(t,e,n)=>{"use strict";var r=n(2109),i=n(6790),o=n(7908),a=n(7466),s=n(9958),u=n(5417);r({target:"Array",proto:!0},{flat:function(){var t=arguments.length?arguments[0]:void 0,e=o(this),n=a(e.length),r=u(e,0);return r.length=i(r,e,e,n,0,void 0===t?1:s(t)),r}})},9554:(t,e,n)=>{"use strict";var r=n(2109),i=n(8533);r({target:"Array",proto:!0,forced:[].forEach!=i},{forEach:i})},1038:(t,e,n)=>{var r=n(2109),i=n(8457);r({target:"Array",stat:!0,forced:!n(7072)((function(t){Array.from(t)}))},{from:i})},6699:(t,e,n)=>{"use strict";var r=n(2109),i=n(1318).includes,o=n(1223);r({target:"Array",proto:!0},{includes:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}}),o("includes")},2772:(t,e,n)=>{"use strict";var r=n(2109),i=n(1318).indexOf,o=n(2133),a=[].indexOf,s=!!a&&1/[1].indexOf(1,-0)<0,u=o("indexOf");r({target:"Array",proto:!0,forced:s||!u},{indexOf:function(t){return s?a.apply(this,arguments)||0:i(this,t,arguments.length>1?arguments[1]:void 0)}})},9753:(t,e,n)=>{n(2109)({target:"Array",stat:!0},{isArray:n(3157)})},6992:(t,e,n)=>{"use strict";var r=n(5656),i=n(1223),o=n(7497),a=n(9909),s=n(654),u="Array Iterator",c=a.set,l=a.getterFor(u);t.exports=s(Array,"Array",(function(t,e){c(this,{type:u,target:r(t),index:0,kind:e})}),(function(){var t=l(this),e=t.target,n=t.kind,r=t.index++;return!e||r>=e.length?(t.target=void 0,{value:void 0,done:!0}):"keys"==n?{value:r,done:!1}:"values"==n?{value:e[r],done:!1}:{value:[r,e[r]],done:!1}}),"values"),o.Arguments=o.Array,i("keys"),i("values"),i("entries")},9600:(t,e,n)=>{"use strict";var r=n(2109),i=n(8361),o=n(5656),a=n(2133),s=[].join,u=i!=Object,c=a("join",",");r({target:"Array",proto:!0,forced:u||!c},{join:function(t){return s.call(o(this),void 0===t?",":t)}})},4986:(t,e,n)=>{var r=n(2109),i=n(6583);r({target:"Array",proto:!0,forced:i!==[].lastIndexOf},{lastIndexOf:i})},1249:(t,e,n)=>{"use strict";var r=n(2109),i=n(2092).map;r({target:"Array",proto:!0,forced:!n(1194)("map")},{map:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}})},6572:(t,e,n)=>{"use strict";var r=n(2109),i=n(7293),o=n(6135);r({target:"Array",stat:!0,forced:i((function(){function t(){}return!(Array.of.call(t)instanceof t)}))},{of:function(){for(var t=0,e=arguments.length,n=new("function"==typeof this?this:Array)(e);e>t;)o(n,t,arguments[t++]);return n.length=e,n}})},6644:(t,e,n)=>{"use strict";var r=n(2109),i=n(3671).right,o=n(2133),a=n(7392),s=n(5268);r({target:"Array",proto:!0,forced:!o("reduceRight")||!s&&a>79&&a<83},{reduceRight:function(t){return i(this,t,arguments.length,arguments.length>1?arguments[1]:void 0)}})},5827:(t,e,n)=>{"use strict";var r=n(2109),i=n(3671).left,o=n(2133),a=n(7392),s=n(5268);r({target:"Array",proto:!0,forced:!o("reduce")||!s&&a>79&&a<83},{reduce:function(t){return i(this,t,arguments.length,arguments.length>1?arguments[1]:void 0)}})},5069:(t,e,n)=>{"use strict";var r=n(2109),i=n(3157),o=[].reverse,a=[1,2];r({target:"Array",proto:!0,forced:String(a)===String(a.reverse())},{reverse:function(){return i(this)&&(this.length=this.length),o.call(this)}})},7042:(t,e,n)=>{"use strict";var r=n(2109),i=n(111),o=n(3157),a=n(1400),s=n(7466),u=n(5656),c=n(6135),l=n(5112),f=n(1194)("slice"),h=l("species"),p=[].slice,d=Math.max;r({target:"Array",proto:!0,forced:!f},{slice:function(t,e){var n,r,l,f=u(this),v=s(f.length),g=a(t,v),y=a(void 0===e?v:e,v);if(o(f)&&("function"!=typeof(n=f.constructor)||n!==Array&&!o(n.prototype)?i(n)&&null===(n=n[h])&&(n=void 0):n=void 0,n===Array||void 0===n))return p.call(f,g,y);for(r=new(void 0===n?Array:n)(d(y-g,0)),l=0;g<y;g++,l++)g in f&&c(r,l,f[g]);return r.length=l,r}})},5212:(t,e,n)=>{"use strict";var r=n(2109),i=n(2092).some;r({target:"Array",proto:!0,forced:!n(2133)("some")},{some:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}})},2707:(t,e,n)=>{"use strict";var r=n(2109),i=n(3099),o=n(7908),a=n(7293),s=n(2133),u=[],c=u.sort,l=a((function(){u.sort(void 0)})),f=a((function(){u.sort(null)})),h=s("sort");r({target:"Array",proto:!0,forced:l||!f||!h},{sort:function(t){return void 0===t?c.call(o(this)):c.call(o(this),i(t))}})},8706:(t,e,n)=>{n(6340)("Array")},561:(t,e,n)=>{"use strict";var r=n(2109),i=n(1400),o=n(9958),a=n(7466),s=n(7908),u=n(5417),c=n(6135),l=n(1194)("splice"),f=Math.max,h=Math.min,p=9007199254740991,d="Maximum allowed length exceeded";r({target:"Array",proto:!0,forced:!l},{splice:function(t,e){var n,r,l,v,g,y,m=s(this),b=a(m.length),x=i(t,b),w=arguments.length;if(0===w?n=r=0:1===w?(n=0,r=b-x):(n=w-2,r=h(f(o(e),0),b-x)),b+n-r>p)throw TypeError(d);for(l=u(m,r),v=0;v<r;v++)(g=x+v)in m&&c(l,v,m[g]);if(l.length=r,n<r){for(v=x;v<b-r;v++)y=v+n,(g=v+r)in m?m[y]=m[g]:delete m[y];for(v=b;v>b-r+n;v--)delete m[v-1]}else if(n>r)for(v=b-r;v>x;v--)y=v+n-1,(g=v+r-1)in m?m[y]=m[g]:delete m[y];for(v=0;v<n;v++)m[v+x]=arguments[v+2];return m.length=b-r+n,l}})},9244:(t,e,n)=>{n(1223)("flatMap")},3792:(t,e,n)=>{n(1223)("flat")},6716:(t,e,n)=>{var r=n(2109),i=n(3331);r({global:!0,forced:!n(4019)},{DataView:i.DataView})},3843:(t,e,n)=>{n(2109)({target:"Date",stat:!0},{now:function(){return(new Date).getTime()}})},8733:(t,e,n)=>{var r=n(2109),i=n(5573);r({target:"Date",proto:!0,forced:Date.prototype.toISOString!==i},{toISOString:i})},5735:(t,e,n)=>{"use strict";var r=n(2109),i=n(7293),o=n(7908),a=n(7593);r({target:"Date",proto:!0,forced:i((function(){return null!==new Date(NaN).toJSON()||1!==Date.prototype.toJSON.call({toISOString:function(){return 1}})}))},{toJSON:function(t){var e=o(this),n=a(e);return"number"!=typeof n||isFinite(n)?e.toISOString():null}})},6078:(t,e,n)=>{var r=n(8880),i=n(8709),o=n(5112)("toPrimitive"),a=Date.prototype;o in a||r(a,o,i)},3710:(t,e,n)=>{var r=n(1320),i=Date.prototype,o="Invalid Date",a=i.toString,s=i.getTime;new Date(NaN)+""!=o&&r(i,"toString",(function(){var t=s.call(this);return t==t?a.call(this):o}))},4812:(t,e,n)=>{n(2109)({target:"Function",proto:!0},{bind:n(7065)})},4855:(t,e,n)=>{"use strict";var r=n(111),i=n(3070),o=n(9518),a=n(5112)("hasInstance"),s=Function.prototype;a in s||i.f(s,a,{value:function(t){if("function"!=typeof this||!r(t))return!1;if(!r(this.prototype))return t instanceof this;for(;t=o(t);)if(this.prototype===t)return!0;return!1}})},8309:(t,e,n)=>{var r=n(9781),i=n(3070).f,o=Function.prototype,a=o.toString,s=/^\s*function ([^ (]*)/,u="name";r&&!(u in o)&&i(o,u,{configurable:!0,get:function(){try{return a.call(this).match(s)[1]}catch(t){return""}}})},5837:(t,e,n)=>{n(2109)({global:!0},{globalThis:n(7854)})},8862:(t,e,n)=>{var r=n(2109),i=n(5005),o=n(7293),a=i("JSON","stringify"),s=/[\uD800-\uDFFF]/g,u=/^[\uD800-\uDBFF]$/,c=/^[\uDC00-\uDFFF]$/,l=function(t,e,n){var r=n.charAt(e-1),i=n.charAt(e+1);return u.test(t)&&!c.test(i)||c.test(t)&&!u.test(r)?"\\u"+t.charCodeAt(0).toString(16):t},f=o((function(){return'"\\udf06\\ud834"'!==a("\udf06\ud834")||'"\\udead"'!==a("\udead")}));a&&r({target:"JSON",stat:!0,forced:f},{stringify:function(t,e,n){var r=a.apply(null,arguments);return"string"==typeof r?r.replace(s,l):r}})},3706:(t,e,n)=>{var r=n(7854);n(8003)(r.JSON,"JSON",!0)},1532:(t,e,n)=>{"use strict";var r=n(7710),i=n(5631);t.exports=r("Map",(function(t){return function(){return t(this,arguments.length?arguments[0]:void 0)}}),i)},9752:(t,e,n)=>{var r=n(2109),i=n(6513),o=Math.acosh,a=Math.log,s=Math.sqrt,u=Math.LN2;r({target:"Math",stat:!0,forced:!o||710!=Math.floor(o(Number.MAX_VALUE))||o(1/0)!=1/0},{acosh:function(t){return(t=+t)<1?NaN:t>94906265.62425156?a(t)+u:i(t-1+s(t-1)*s(t+1))}})},2376:(t,e,n)=>{var r=n(2109),i=Math.asinh,o=Math.log,a=Math.sqrt;r({target:"Math",stat:!0,forced:!(i&&1/i(0)>0)},{asinh:function t(e){return isFinite(e=+e)&&0!=e?e<0?-t(-e):o(e+a(e*e+1)):e}})},3181:(t,e,n)=>{var r=n(2109),i=Math.atanh,o=Math.log;r({target:"Math",stat:!0,forced:!(i&&1/i(-0)<0)},{atanh:function(t){return 0==(t=+t)?t:o((1+t)/(1-t))/2}})},3484:(t,e,n)=>{var r=n(2109),i=n(4310),o=Math.abs,a=Math.pow;r({target:"Math",stat:!0},{cbrt:function(t){return i(t=+t)*a(o(t),1/3)}})},2388:(t,e,n)=>{var r=n(2109),i=Math.floor,o=Math.log,a=Math.LOG2E;r({target:"Math",stat:!0},{clz32:function(t){return(t>>>=0)?31-i(o(t+.5)*a):32}})},8621:(t,e,n)=>{var r=n(2109),i=n(6736),o=Math.cosh,a=Math.abs,s=Math.E;r({target:"Math",stat:!0,forced:!o||o(710)===1/0},{cosh:function(t){var e=i(a(t)-1)+1;return(e+1/(e*s*s))*(s/2)}})},403:(t,e,n)=>{var r=n(2109),i=n(6736);r({target:"Math",stat:!0,forced:i!=Math.expm1},{expm1:i})},4755:(t,e,n)=>{n(2109)({target:"Math",stat:!0},{fround:n(6130)})},5438:(t,e,n)=>{var r=n(2109),i=Math.hypot,o=Math.abs,a=Math.sqrt;r({target:"Math",stat:!0,forced:!!i&&i(1/0,NaN)!==1/0},{hypot:function(t,e){for(var n,r,i=0,s=0,u=arguments.length,c=0;s<u;)c<(n=o(arguments[s++]))?(i=i*(r=c/n)*r+1,c=n):i+=n>0?(r=n/c)*r:n;return c===1/0?1/0:c*a(i)}})},332:(t,e,n)=>{var r=n(2109),i=n(7293),o=Math.imul;r({target:"Math",stat:!0,forced:i((function(){return-5!=o(4294967295,5)||2!=o.length}))},{imul:function(t,e){var n=65535,r=+t,i=+e,o=n&r,a=n&i;return 0|o*a+((n&r>>>16)*a+o*(n&i>>>16)<<16>>>0)}})},658:(t,e,n)=>{var r=n(2109),i=Math.log,o=Math.LOG10E;r({target:"Math",stat:!0},{log10:function(t){return i(t)*o}})},197:(t,e,n)=>{n(2109)({target:"Math",stat:!0},{log1p:n(6513)})},4914:(t,e,n)=>{var r=n(2109),i=Math.log,o=Math.LN2;r({target:"Math",stat:!0},{log2:function(t){return i(t)/o}})},2420:(t,e,n)=>{n(2109)({target:"Math",stat:!0},{sign:n(4310)})},160:(t,e,n)=>{var r=n(2109),i=n(7293),o=n(6736),a=Math.abs,s=Math.exp,u=Math.E;r({target:"Math",stat:!0,forced:i((function(){return-2e-17!=Math.sinh(-2e-17)}))},{sinh:function(t){return a(t=+t)<1?(o(t)-o(-t))/2:(s(t-1)-s(-t-1))*(u/2)}})},970:(t,e,n)=>{var r=n(2109),i=n(6736),o=Math.exp;r({target:"Math",stat:!0},{tanh:function(t){var e=i(t=+t),n=i(-t);return e==1/0?1:n==1/0?-1:(e-n)/(o(t)+o(-t))}})},2703:(t,e,n)=>{n(8003)(Math,"Math",!0)},3689:(t,e,n)=>{var r=n(2109),i=Math.ceil,o=Math.floor;r({target:"Math",stat:!0},{trunc:function(t){return(t>0?o:i)(t)}})},9653:(t,e,n)=>{"use strict";var r=n(9781),i=n(7854),o=n(4705),a=n(1320),s=n(6656),u=n(4326),c=n(9587),l=n(7593),f=n(7293),h=n(30),p=n(8006).f,d=n(1236).f,v=n(3070).f,g=n(3111).trim,y="Number",m=i.Number,b=m.prototype,x=u(h(b))==y,w=function(t){var e,n,r,i,o,a,s,u,c=l(t,!1);if("string"==typeof c&&c.length>2)if(43===(e=(c=g(c)).charCodeAt(0))||45===e){if(88===(n=c.charCodeAt(2))||120===n)return NaN}else if(48===e){switch(c.charCodeAt(1)){case 66:case 98:r=2,i=49;break;case 79:case 111:r=8,i=55;break;default:return+c}for(a=(o=c.slice(2)).length,s=0;s<a;s++)if((u=o.charCodeAt(s))<48||u>i)return NaN;return parseInt(o,r)}return+c};if(o(y,!m(" 0o1")||!m("0b1")||m("+0x1"))){for(var S,_=function(t){var e=arguments.length<1?0:t,n=this;return n instanceof _&&(x?f((function(){b.valueOf.call(n)})):u(n)!=y)?c(new m(w(e)),n,_):w(e)},A=r?p(m):"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger,fromString,range".split(","),M=0;A.length>M;M++)s(m,S=A[M])&&!s(_,S)&&v(_,S,d(m,S));_.prototype=b,b.constructor=_,a(i,y,_)}},3299:(t,e,n)=>{n(2109)({target:"Number",stat:!0},{EPSILON:Math.pow(2,-52)})},5192:(t,e,n)=>{n(2109)({target:"Number",stat:!0},{isFinite:n(7023)})},3161:(t,e,n)=>{n(2109)({target:"Number",stat:!0},{isInteger:n(8730)})},4048:(t,e,n)=>{n(2109)({target:"Number",stat:!0},{isNaN:function(t){return t!=t}})},8285:(t,e,n)=>{var r=n(2109),i=n(8730),o=Math.abs;r({target:"Number",stat:!0},{isSafeInteger:function(t){return i(t)&&o(t)<=9007199254740991}})},4363:(t,e,n)=>{n(2109)({target:"Number",stat:!0},{MAX_SAFE_INTEGER:9007199254740991})},5994:(t,e,n)=>{n(2109)({target:"Number",stat:!0},{MIN_SAFE_INTEGER:-9007199254740991})},1874:(t,e,n)=>{var r=n(2109),i=n(2814);r({target:"Number",stat:!0,forced:Number.parseFloat!=i},{parseFloat:i})},9494:(t,e,n)=>{var r=n(2109),i=n(3009);r({target:"Number",stat:!0,forced:Number.parseInt!=i},{parseInt:i})},6977:(t,e,n)=>{"use strict";var r=n(2109),i=n(9958),o=n(863),a=n(8415),s=n(7293),u=1..toFixed,c=Math.floor,l=function(t,e,n){return 0===e?n:e%2==1?l(t,e-1,n*t):l(t*t,e/2,n)},f=function(t,e,n){for(var r=-1,i=n;++r<6;)i+=e*t[r],t[r]=i%1e7,i=c(i/1e7)},h=function(t,e){for(var n=6,r=0;--n>=0;)r+=t[n],t[n]=c(r/e),r=r%e*1e7},p=function(t){for(var e=6,n="";--e>=0;)if(""!==n||0===e||0!==t[e]){var r=String(t[e]);n=""===n?r:n+a.call("0",7-r.length)+r}return n};r({target:"Number",proto:!0,forced:u&&("0.000"!==8e-5.toFixed(3)||"1"!==.9.toFixed(0)||"1.25"!==1.255.toFixed(2)||"1000000000000000128"!==(0xde0b6b3a7640080).toFixed(0))||!s((function(){u.call({})}))},{toFixed:function(t){var e,n,r,s,u=o(this),c=i(t),d=[0,0,0,0,0,0],v="",g="0";if(c<0||c>20)throw RangeError("Incorrect fraction digits");if(u!=u)return"NaN";if(u<=-1e21||u>=1e21)return String(u);if(u<0&&(v="-",u=-u),u>1e-21)if(n=(e=function(t){for(var e=0,n=t;n>=4096;)e+=12,n/=4096;for(;n>=2;)e+=1,n/=2;return e}(u*l(2,69,1))-69)<0?u*l(2,-e,1):u/l(2,e,1),n*=4503599627370496,(e=52-e)>0){for(f(d,0,n),r=c;r>=7;)f(d,1e7,0),r-=7;for(f(d,l(10,r,1),0),r=e-1;r>=23;)h(d,1<<23),r-=23;h(d,1<<r),f(d,1,1),h(d,2),g=p(d)}else f(d,0,n),f(d,1<<-e,0),g=p(d)+a.call("0",c);return c>0?v+((s=g.length)<=c?"0."+a.call("0",c-s)+g:g.slice(0,s-c)+"."+g.slice(s-c)):v+g}})},5147:(t,e,n)=>{"use strict";var r=n(2109),i=n(7293),o=n(863),a=1..toPrecision;r({target:"Number",proto:!0,forced:i((function(){return"1"!==a.call(1,void 0)}))||!i((function(){a.call({})}))},{toPrecision:function(t){return void 0===t?a.call(o(this)):a.call(o(this),t)}})},9601:(t,e,n)=>{var r=n(2109),i=n(1574);r({target:"Object",stat:!0,forced:Object.assign!==i},{assign:i})},8011:(t,e,n)=>{n(2109)({target:"Object",stat:!0,sham:!n(9781)},{create:n(30)})},9595:(t,e,n)=>{"use strict";var r=n(2109),i=n(9781),o=n(9026),a=n(7908),s=n(3099),u=n(3070);i&&r({target:"Object",proto:!0,forced:o},{__defineGetter__:function(t,e){u.f(a(this),t,{get:s(e),enumerable:!0,configurable:!0})}})},3321:(t,e,n)=>{var r=n(2109),i=n(9781);r({target:"Object",stat:!0,forced:!i,sham:!i},{defineProperties:n(6048)})},9070:(t,e,n)=>{var r=n(2109),i=n(9781);r({target:"Object",stat:!0,forced:!i,sham:!i},{defineProperty:n(3070).f})},5500:(t,e,n)=>{"use strict";var r=n(2109),i=n(9781),o=n(9026),a=n(7908),s=n(3099),u=n(3070);i&&r({target:"Object",proto:!0,forced:o},{__defineSetter__:function(t,e){u.f(a(this),t,{set:s(e),enumerable:!0,configurable:!0})}})},9720:(t,e,n)=>{var r=n(2109),i=n(4699).entries;r({target:"Object",stat:!0},{entries:function(t){return i(t)}})},3371:(t,e,n)=>{var r=n(2109),i=n(6677),o=n(7293),a=n(111),s=n(2423).onFreeze,u=Object.freeze;r({target:"Object",stat:!0,forced:o((function(){u(1)})),sham:!i},{freeze:function(t){return u&&a(t)?u(s(t)):t}})},8559:(t,e,n)=>{var r=n(2109),i=n(408),o=n(6135);r({target:"Object",stat:!0},{fromEntries:function(t){var e={};return i(t,(function(t,n){o(e,t,n)}),{AS_ENTRIES:!0}),e}})},5003:(t,e,n)=>{var r=n(2109),i=n(7293),o=n(5656),a=n(1236).f,s=n(9781),u=i((function(){a(1)}));r({target:"Object",stat:!0,forced:!s||u,sham:!s},{getOwnPropertyDescriptor:function(t,e){return a(o(t),e)}})},9337:(t,e,n)=>{var r=n(2109),i=n(9781),o=n(3887),a=n(5656),s=n(1236),u=n(6135);r({target:"Object",stat:!0,sham:!i},{getOwnPropertyDescriptors:function(t){for(var e,n,r=a(t),i=s.f,c=o(r),l={},f=0;c.length>f;)void 0!==(n=i(r,e=c[f++]))&&u(l,e,n);return l}})},6210:(t,e,n)=>{var r=n(2109),i=n(7293),o=n(1156).f;r({target:"Object",stat:!0,forced:i((function(){return!Object.getOwnPropertyNames(1)}))},{getOwnPropertyNames:o})},489:(t,e,n)=>{var r=n(2109),i=n(7293),o=n(7908),a=n(9518),s=n(8544);r({target:"Object",stat:!0,forced:i((function(){a(1)})),sham:!s},{getPrototypeOf:function(t){return a(o(t))}})},1825:(t,e,n)=>{var r=n(2109),i=n(7293),o=n(111),a=Object.isExtensible;r({target:"Object",stat:!0,forced:i((function(){a(1)}))},{isExtensible:function(t){return!!o(t)&&(!a||a(t))}})},8410:(t,e,n)=>{var r=n(2109),i=n(7293),o=n(111),a=Object.isFrozen;r({target:"Object",stat:!0,forced:i((function(){a(1)}))},{isFrozen:function(t){return!o(t)||!!a&&a(t)}})},2200:(t,e,n)=>{var r=n(2109),i=n(7293),o=n(111),a=Object.isSealed;r({target:"Object",stat:!0,forced:i((function(){a(1)}))},{isSealed:function(t){return!o(t)||!!a&&a(t)}})},3304:(t,e,n)=>{n(2109)({target:"Object",stat:!0},{is:n(1150)})},7941:(t,e,n)=>{var r=n(2109),i=n(7908),o=n(1956);r({target:"Object",stat:!0,forced:n(7293)((function(){o(1)}))},{keys:function(t){return o(i(t))}})},4869:(t,e,n)=>{"use strict";var r=n(2109),i=n(9781),o=n(9026),a=n(7908),s=n(7593),u=n(9518),c=n(1236).f;i&&r({target:"Object",proto:!0,forced:o},{__lookupGetter__:function(t){var e,n=a(this),r=s(t,!0);do{if(e=c(n,r))return e.get}while(n=u(n))}})},3952:(t,e,n)=>{"use strict";var r=n(2109),i=n(9781),o=n(9026),a=n(7908),s=n(7593),u=n(9518),c=n(1236).f;i&&r({target:"Object",proto:!0,forced:o},{__lookupSetter__:function(t){var e,n=a(this),r=s(t,!0);do{if(e=c(n,r))return e.set}while(n=u(n))}})},7227:(t,e,n)=>{var r=n(2109),i=n(111),o=n(2423).onFreeze,a=n(6677),s=n(7293),u=Object.preventExtensions;r({target:"Object",stat:!0,forced:s((function(){u(1)})),sham:!a},{preventExtensions:function(t){return u&&i(t)?u(o(t)):t}})},514:(t,e,n)=>{var r=n(2109),i=n(111),o=n(2423).onFreeze,a=n(6677),s=n(7293),u=Object.seal;r({target:"Object",stat:!0,forced:s((function(){u(1)})),sham:!a},{seal:function(t){return u&&i(t)?u(o(t)):t}})},8304:(t,e,n)=>{n(2109)({target:"Object",stat:!0},{setPrototypeOf:n(7674)})},1539:(t,e,n)=>{var r=n(1694),i=n(1320),o=n(288);r||i(Object.prototype,"toString",o,{unsafe:!0})},6833:(t,e,n)=>{var r=n(2109),i=n(4699).values;r({target:"Object",stat:!0},{values:function(t){return i(t)}})},4678:(t,e,n)=>{var r=n(2109),i=n(2814);r({global:!0,forced:parseFloat!=i},{parseFloat:i})},1058:(t,e,n)=>{var r=n(2109),i=n(3009);r({global:!0,forced:parseInt!=i},{parseInt:i})},7922:(t,e,n)=>{"use strict";var r=n(2109),i=n(3099),o=n(8523),a=n(2534),s=n(408);r({target:"Promise",stat:!0},{allSettled:function(t){var e=this,n=o.f(e),r=n.resolve,u=n.reject,c=a((function(){var n=i(e.resolve),o=[],a=0,u=1;s(t,(function(t){var i=a++,s=!1;o.push(void 0),u++,n.call(e,t).then((function(t){s||(s=!0,o[i]={status:"fulfilled",value:t},--u||r(o))}),(function(t){s||(s=!0,o[i]={status:"rejected",reason:t},--u||r(o))}))})),--u||r(o)}));return c.error&&u(c.value),n.promise}})},4668:(t,e,n)=>{"use strict";var r=n(2109),i=n(3099),o=n(5005),a=n(8523),s=n(2534),u=n(408),c="No one promise resolved";r({target:"Promise",stat:!0},{any:function(t){var e=this,n=a.f(e),r=n.resolve,l=n.reject,f=s((function(){var n=i(e.resolve),a=[],s=0,f=1,h=!1;u(t,(function(t){var i=s++,u=!1;a.push(void 0),f++,n.call(e,t).then((function(t){u||h||(h=!0,r(t))}),(function(t){u||h||(u=!0,a[i]=t,--f||l(new(o("AggregateError"))(a,c)))}))})),--f||l(new(o("AggregateError"))(a,c))}));return f.error&&l(f.value),n.promise}})},7727:(t,e,n)=>{"use strict";var r=n(2109),i=n(1913),o=n(3366),a=n(7293),s=n(5005),u=n(6707),c=n(9478),l=n(1320);r({target:"Promise",proto:!0,real:!0,forced:!!o&&a((function(){o.prototype.finally.call({then:function(){}},(function(){}))}))},{finally:function(t){var e=u(this,s("Promise")),n="function"==typeof t;return this.then(n?function(n){return c(e,t()).then((function(){return n}))}:t,n?function(n){return c(e,t()).then((function(){throw n}))}:t)}}),i||"function"!=typeof o||o.prototype.finally||l(o.prototype,"finally",s("Promise").prototype.finally)},8674:(t,e,n)=>{"use strict";var r,i,o,a,s=n(2109),u=n(1913),c=n(7854),l=n(5005),f=n(3366),h=n(1320),p=n(2248),d=n(8003),v=n(6340),g=n(111),y=n(3099),m=n(5787),b=n(2788),x=n(408),w=n(7072),S=n(6707),_=n(261).set,A=n(5948),M=n(9478),T=n(842),E=n(8523),k=n(2534),O=n(9909),P=n(4705),C=n(5112),R=n(5268),I=n(7392),j=C("species"),N="Promise",L=O.get,z=O.set,D=O.getterFor(N),F=f,U=c.TypeError,B=c.document,q=c.process,V=l("fetch"),W=E.f,H=W,Y=!!(B&&B.createEvent&&c.dispatchEvent),G="function"==typeof PromiseRejectionEvent,X="unhandledrejection",$=P(N,(function(){if(b(F)===String(F)){if(66===I)return!0;if(!R&&!G)return!0}if(u&&!F.prototype.finally)return!0;if(I>=51&&/native code/.test(F))return!1;var t=F.resolve(1),e=function(t){t((function(){}),(function(){}))};return(t.constructor={})[j]=e,!(t.then((function(){}))instanceof e)})),Z=$||!w((function(t){F.all(t).catch((function(){}))})),K=function(t){var e;return!(!g(t)||"function"!=typeof(e=t.then))&&e},J=function(t,e){if(!t.notified){t.notified=!0;var n=t.reactions;A((function(){for(var r=t.value,i=1==t.state,o=0;n.length>o;){var a,s,u,c=n[o++],l=i?c.ok:c.fail,f=c.resolve,h=c.reject,p=c.domain;try{l?(i||(2===t.rejection&&nt(t),t.rejection=1),!0===l?a=r:(p&&p.enter(),a=l(r),p&&(p.exit(),u=!0)),a===c.promise?h(U("Promise-chain cycle")):(s=K(a))?s.call(a,f,h):f(a)):h(r)}catch(t){p&&!u&&p.exit(),h(t)}}t.reactions=[],t.notified=!1,e&&!t.rejection&&tt(t)}))}},Q=function(t,e,n){var r,i;Y?((r=B.createEvent("Event")).promise=e,r.reason=n,r.initEvent(t,!1,!0),c.dispatchEvent(r)):r={promise:e,reason:n},!G&&(i=c["on"+t])?i(r):t===X&&T("Unhandled promise rejection",n)},tt=function(t){_.call(c,(function(){var e,n=t.facade,r=t.value;if(et(t)&&(e=k((function(){R?q.emit("unhandledRejection",r,n):Q(X,n,r)})),t.rejection=R||et(t)?2:1,e.error))throw e.value}))},et=function(t){return 1!==t.rejection&&!t.parent},nt=function(t){_.call(c,(function(){var e=t.facade;R?q.emit("rejectionHandled",e):Q("rejectionhandled",e,t.value)}))},rt=function(t,e,n){return function(r){t(e,r,n)}},it=function(t,e,n){t.done||(t.done=!0,n&&(t=n),t.value=e,t.state=2,J(t,!0))},ot=function(t,e,n){if(!t.done){t.done=!0,n&&(t=n);try{if(t.facade===e)throw U("Promise can't be resolved itself");var r=K(e);r?A((function(){var n={done:!1};try{r.call(e,rt(ot,n,t),rt(it,n,t))}catch(e){it(n,e,t)}})):(t.value=e,t.state=1,J(t,!1))}catch(e){it({done:!1},e,t)}}};$&&(F=function(t){m(this,F,N),y(t),r.call(this);var e=L(this);try{t(rt(ot,e),rt(it,e))}catch(t){it(e,t)}},(r=function(t){z(this,{type:N,done:!1,notified:!1,parent:!1,reactions:[],rejection:!1,state:0,value:void 0})}).prototype=p(F.prototype,{then:function(t,e){var n=D(this),r=W(S(this,F));return r.ok="function"!=typeof t||t,r.fail="function"==typeof e&&e,r.domain=R?q.domain:void 0,n.parent=!0,n.reactions.push(r),0!=n.state&&J(n,!1),r.promise},catch:function(t){return this.then(void 0,t)}}),i=function(){var t=new r,e=L(t);this.promise=t,this.resolve=rt(ot,e),this.reject=rt(it,e)},E.f=W=function(t){return t===F||t===o?new i(t):H(t)},u||"function"!=typeof f||(a=f.prototype.then,h(f.prototype,"then",(function(t,e){var n=this;return new F((function(t,e){a.call(n,t,e)})).then(t,e)}),{unsafe:!0}),"function"==typeof V&&s({global:!0,enumerable:!0,forced:!0},{fetch:function(t){return M(F,V.apply(c,arguments))}}))),s({global:!0,wrap:!0,forced:$},{Promise:F}),d(F,N,!1,!0),v(N),o=l(N),s({target:N,stat:!0,forced:$},{reject:function(t){var e=W(this);return e.reject.call(void 0,t),e.promise}}),s({target:N,stat:!0,forced:u||$},{resolve:function(t){return M(u&&this===o?F:this,t)}}),s({target:N,stat:!0,forced:Z},{all:function(t){var e=this,n=W(e),r=n.resolve,i=n.reject,o=k((function(){var n=y(e.resolve),o=[],a=0,s=1;x(t,(function(t){var u=a++,c=!1;o.push(void 0),s++,n.call(e,t).then((function(t){c||(c=!0,o[u]=t,--s||r(o))}),i)})),--s||r(o)}));return o.error&&i(o.value),n.promise},race:function(t){var e=this,n=W(e),r=n.reject,i=k((function(){var i=y(e.resolve);x(t,(function(t){i.call(e,t).then(n.resolve,r)}))}));return i.error&&r(i.value),n.promise}})},224:(t,e,n)=>{var r=n(2109),i=n(5005),o=n(3099),a=n(9670),s=n(7293),u=i("Reflect","apply"),c=Function.apply;r({target:"Reflect",stat:!0,forced:!s((function(){u((function(){}))}))},{apply:function(t,e,n){return o(t),a(n),u?u(t,e,n):c.call(t,e,n)}})},2419:(t,e,n)=>{var r=n(2109),i=n(5005),o=n(3099),a=n(9670),s=n(111),u=n(30),c=n(7065),l=n(7293),f=i("Reflect","construct"),h=l((function(){function t(){}return!(f((function(){}),[],t)instanceof t)})),p=!l((function(){f((function(){}))})),d=h||p;r({target:"Reflect",stat:!0,forced:d,sham:d},{construct:function(t,e){o(t),a(e);var n=arguments.length<3?t:o(arguments[2]);if(p&&!h)return f(t,e,n);if(t==n){switch(e.length){case 0:return new t;case 1:return new t(e[0]);case 2:return new t(e[0],e[1]);case 3:return new t(e[0],e[1],e[2]);case 4:return new t(e[0],e[1],e[2],e[3])}var r=[null];return r.push.apply(r,e),new(c.apply(t,r))}var i=n.prototype,l=u(s(i)?i:Object.prototype),d=Function.apply.call(t,l,e);return s(d)?d:l}})},9596:(t,e,n)=>{var r=n(2109),i=n(9781),o=n(9670),a=n(7593),s=n(3070);r({target:"Reflect",stat:!0,forced:n(7293)((function(){Reflect.defineProperty(s.f({},1,{value:1}),1,{value:2})})),sham:!i},{defineProperty:function(t,e,n){o(t);var r=a(e,!0);o(n);try{return s.f(t,r,n),!0}catch(t){return!1}}})},2586:(t,e,n)=>{var r=n(2109),i=n(9670),o=n(1236).f;r({target:"Reflect",stat:!0},{deleteProperty:function(t,e){var n=o(i(t),e);return!(n&&!n.configurable)&&delete t[e]}})},5683:(t,e,n)=>{var r=n(2109),i=n(9781),o=n(9670),a=n(1236);r({target:"Reflect",stat:!0,sham:!i},{getOwnPropertyDescriptor:function(t,e){return a.f(o(t),e)}})},9361:(t,e,n)=>{var r=n(2109),i=n(9670),o=n(9518);r({target:"Reflect",stat:!0,sham:!n(8544)},{getPrototypeOf:function(t){return o(i(t))}})},4819:(t,e,n)=>{var r=n(2109),i=n(111),o=n(9670),a=n(6656),s=n(1236),u=n(9518);r({target:"Reflect",stat:!0},{get:function t(e,n){var r,c,l=arguments.length<3?e:arguments[2];return o(e)===l?e[n]:(r=s.f(e,n))?a(r,"value")?r.value:void 0===r.get?void 0:r.get.call(l):i(c=u(e))?t(c,n,l):void 0}})},1037:(t,e,n)=>{n(2109)({target:"Reflect",stat:!0},{has:function(t,e){return e in t}})},5898:(t,e,n)=>{var r=n(2109),i=n(9670),o=Object.isExtensible;r({target:"Reflect",stat:!0},{isExtensible:function(t){return i(t),!o||o(t)}})},7556:(t,e,n)=>{n(2109)({target:"Reflect",stat:!0},{ownKeys:n(3887)})},4361:(t,e,n)=>{var r=n(2109),i=n(5005),o=n(9670);r({target:"Reflect",stat:!0,sham:!n(6677)},{preventExtensions:function(t){o(t);try{var e=i("Object","preventExtensions");return e&&e(t),!0}catch(t){return!1}}})},9532:(t,e,n)=>{var r=n(2109),i=n(9670),o=n(6077),a=n(7674);a&&r({target:"Reflect",stat:!0},{setPrototypeOf:function(t,e){i(t),o(e);try{return a(t,e),!0}catch(t){return!1}}})},3593:(t,e,n)=>{var r=n(2109),i=n(9670),o=n(111),a=n(6656),s=n(7293),u=n(3070),c=n(1236),l=n(9518),f=n(9114);r({target:"Reflect",stat:!0,forced:s((function(){var t=function(){},e=u.f(new t,"a",{configurable:!0});return!1!==Reflect.set(t.prototype,"a",1,e)}))},{set:function t(e,n,r){var s,h,p=arguments.length<4?e:arguments[3],d=c.f(i(e),n);if(!d){if(o(h=l(e)))return t(h,n,r,p);d=f(0)}if(a(d,"value")){if(!1===d.writable||!o(p))return!1;if(s=c.f(p,n)){if(s.get||s.set||!1===s.writable)return!1;s.value=r,u.f(p,n,s)}else u.f(p,n,f(0,r));return!0}return void 0!==d.set&&(d.set.call(p,r),!0)}})},1299:(t,e,n)=>{var r=n(2109),i=n(7854),o=n(8003);r({global:!0},{Reflect:{}}),o(i.Reflect,"Reflect",!0)},4603:(t,e,n)=>{var r=n(9781),i=n(7854),o=n(4705),a=n(9587),s=n(3070).f,u=n(8006).f,c=n(7850),l=n(7066),f=n(2999),h=n(1320),p=n(7293),d=n(9909).set,v=n(6340),g=n(5112)("match"),y=i.RegExp,m=y.prototype,b=/a/g,x=/a/g,w=new y(b)!==b,S=f.UNSUPPORTED_Y;if(r&&o("RegExp",!w||S||p((function(){return x[g]=!1,y(b)!=b||y(x)==x||"/a/i"!=y(b,"i")})))){for(var _=function(t,e){var n,r=this instanceof _,i=c(t),o=void 0===e;if(!r&&i&&t.constructor===_&&o)return t;w?i&&!o&&(t=t.source):t instanceof _&&(o&&(e=l.call(t)),t=t.source),S&&(n=!!e&&e.indexOf("y")>-1)&&(e=e.replace(/y/g,""));var s=a(w?new y(t,e):y(t,e),r?this:m,_);return S&&n&&d(s,{sticky:n}),s},A=function(t){t in _||s(_,t,{configurable:!0,get:function(){return y[t]},set:function(e){y[t]=e}})},M=u(y),T=0;M.length>T;)A(M[T++]);m.constructor=_,_.prototype=m,h(i,"RegExp",_)}v("RegExp")},4916:(t,e,n)=>{"use strict";var r=n(2109),i=n(2261);r({target:"RegExp",proto:!0,forced:/./.exec!==i},{exec:i})},2087:(t,e,n)=>{var r=n(9781),i=n(3070),o=n(7066),a=n(2999).UNSUPPORTED_Y;r&&("g"!=/./g.flags||a)&&i.f(RegExp.prototype,"flags",{configurable:!0,get:o})},8386:(t,e,n)=>{var r=n(9781),i=n(2999).UNSUPPORTED_Y,o=n(3070).f,a=n(9909).get,s=RegExp.prototype;r&&i&&o(RegExp.prototype,"sticky",{configurable:!0,get:function(){if(this!==s){if(this instanceof RegExp)return!!a(this).sticky;throw TypeError("Incompatible receiver, RegExp required")}}})},7601:(t,e,n)=>{"use strict";n(4916);var r,i,o=n(2109),a=n(111),s=(r=!1,(i=/[ac]/).exec=function(){return r=!0,/./.exec.apply(this,arguments)},!0===i.test("abc")&&r),u=/./.test;o({target:"RegExp",proto:!0,forced:!s},{test:function(t){if("function"!=typeof this.exec)return u.call(this,t);var e=this.exec(t);if(null!==e&&!a(e))throw new Error("RegExp exec method returned something other than an Object or null");return!!e}})},9714:(t,e,n)=>{"use strict";var r=n(1320),i=n(9670),o=n(7293),a=n(7066),s="toString",u=RegExp.prototype,c=u.toString,l=o((function(){return"/a/b"!=c.call({source:"a",flags:"b"})})),f=c.name!=s;(l||f)&&r(RegExp.prototype,s,(function(){var t=i(this),e=String(t.source),n=t.flags;return"/"+e+"/"+String(void 0===n&&t instanceof RegExp&&!("flags"in u)?a.call(t):n)}),{unsafe:!0})},189:(t,e,n)=>{"use strict";var r=n(7710),i=n(5631);t.exports=r("Set",(function(t){return function(){return t(this,arguments.length?arguments[0]:void 0)}}),i)},5218:(t,e,n)=>{"use strict";var r=n(2109),i=n(4230);r({target:"String",proto:!0,forced:n(3429)("anchor")},{anchor:function(t){return i(this,"a","name",t)}})},4475:(t,e,n)=>{"use strict";var r=n(2109),i=n(4230);r({target:"String",proto:!0,forced:n(3429)("big")},{big:function(){return i(this,"big","","")}})},7929:(t,e,n)=>{"use strict";var r=n(2109),i=n(4230);r({target:"String",proto:!0,forced:n(3429)("blink")},{blink:function(){return i(this,"blink","","")}})},915:(t,e,n)=>{"use strict";var r=n(2109),i=n(4230);r({target:"String",proto:!0,forced:n(3429)("bold")},{bold:function(){return i(this,"b","","")}})},9841:(t,e,n)=>{"use strict";var r=n(2109),i=n(8710).codeAt;r({target:"String",proto:!0},{codePointAt:function(t){return i(this,t)}})},7852:(t,e,n)=>{"use strict";var r,i=n(2109),o=n(1236).f,a=n(7466),s=n(3929),u=n(4488),c=n(4964),l=n(1913),f="".endsWith,h=Math.min,p=c("endsWith");i({target:"String",proto:!0,forced:!(!l&&!p&&(r=o(String.prototype,"endsWith"),r&&!r.writable)||p)},{endsWith:function(t){var e=String(u(this));s(t);var n=arguments.length>1?arguments[1]:void 0,r=a(e.length),i=void 0===n?r:h(a(n),r),o=String(t);return f?f.call(e,o,i):e.slice(i-o.length,i)===o}})},9253:(t,e,n)=>{"use strict";var r=n(2109),i=n(4230);r({target:"String",proto:!0,forced:n(3429)("fixed")},{fixed:function(){return i(this,"tt","","")}})},2125:(t,e,n)=>{"use strict";var r=n(2109),i=n(4230);r({target:"String",proto:!0,forced:n(3429)("fontcolor")},{fontcolor:function(t){return i(this,"font","color",t)}})},8830:(t,e,n)=>{"use strict";var r=n(2109),i=n(4230);r({target:"String",proto:!0,forced:n(3429)("fontsize")},{fontsize:function(t){return i(this,"font","size",t)}})},4953:(t,e,n)=>{var r=n(2109),i=n(1400),o=String.fromCharCode,a=String.fromCodePoint;r({target:"String",stat:!0,forced:!!a&&1!=a.length},{fromCodePoint:function(t){for(var e,n=[],r=arguments.length,a=0;r>a;){if(e=+arguments[a++],i(e,1114111)!==e)throw RangeError(e+" is not a valid code point");n.push(e<65536?o(e):o(55296+((e-=65536)>>10),e%1024+56320))}return n.join("")}})},2023:(t,e,n)=>{"use strict";var r=n(2109),i=n(3929),o=n(4488);r({target:"String",proto:!0,forced:!n(4964)("includes")},{includes:function(t){return!!~String(o(this)).indexOf(i(t),arguments.length>1?arguments[1]:void 0)}})},8734:(t,e,n)=>{"use strict";var r=n(2109),i=n(4230);r({target:"String",proto:!0,forced:n(3429)("italics")},{italics:function(){return i(this,"i","","")}})},8783:(t,e,n)=>{"use strict";var r=n(8710).charAt,i=n(9909),o=n(654),a="String Iterator",s=i.set,u=i.getterFor(a);o(String,"String",(function(t){s(this,{type:a,string:String(t),index:0})}),(function(){var t,e=u(this),n=e.string,i=e.index;return i>=n.length?{value:void 0,done:!0}:(t=r(n,i),e.index+=t.length,{value:t,done:!1})}))},9254:(t,e,n)=>{"use strict";var r=n(2109),i=n(4230);r({target:"String",proto:!0,forced:n(3429)("link")},{link:function(t){return i(this,"a","href",t)}})},6373:(t,e,n)=>{"use strict";var r=n(2109),i=n(4994),o=n(4488),a=n(7466),s=n(3099),u=n(9670),c=n(4326),l=n(7850),f=n(7066),h=n(8880),p=n(7293),d=n(5112),v=n(6707),g=n(1530),y=n(9909),m=n(1913),b=d("matchAll"),x="RegExp String Iterator",w=y.set,S=y.getterFor(x),_=RegExp.prototype,A=_.exec,M="".matchAll,T=!!M&&!p((function(){"a".matchAll(/./)})),E=i((function(t,e,n,r){w(this,{type:x,regexp:t,string:e,global:n,unicode:r,done:!1})}),"RegExp String",(function(){var t=S(this);if(t.done)return{value:void 0,done:!0};var e=t.regexp,n=t.string,r=function(t,e){var n,r=t.exec;if("function"==typeof r){if("object"!=typeof(n=r.call(t,e)))throw TypeError("Incorrect exec result");return n}return A.call(t,e)}(e,n);return null===r?{value:void 0,done:t.done=!0}:t.global?(""==String(r[0])&&(e.lastIndex=g(n,a(e.lastIndex),t.unicode)),{value:r,done:!1}):(t.done=!0,{value:r,done:!1})})),k=function(t){var e,n,r,i,o,s,c=u(this),l=String(t);return e=v(c,RegExp),void 0===(n=c.flags)&&c instanceof RegExp&&!("flags"in _)&&(n=f.call(c)),r=void 0===n?"":String(n),i=new e(e===RegExp?c.source:c,r),o=!!~r.indexOf("g"),s=!!~r.indexOf("u"),i.lastIndex=a(c.lastIndex),new E(i,l,o,s)};r({target:"String",proto:!0,forced:T},{matchAll:function(t){var e,n,r,i=o(this);if(null!=t){if(l(t)&&!~String(o("flags"in _?t.flags:f.call(t))).indexOf("g"))throw TypeError("`.matchAll` does not allow non-global regexes");if(T)return M.apply(i,arguments);if(void 0===(n=t[b])&&m&&"RegExp"==c(t)&&(n=k),null!=n)return s(n).call(t,i)}else if(T)return M.apply(i,arguments);return e=String(i),r=new RegExp(t,"g"),m?k.call(r,e):r[b](e)}}),m||b in _||h(_,b,k)},4723:(t,e,n)=>{"use strict";var r=n(7007),i=n(9670),o=n(7466),a=n(4488),s=n(1530),u=n(7651);r("match",1,(function(t,e,n){return[function(e){var n=a(this),r=null==e?void 0:e[t];return void 0!==r?r.call(e,n):new RegExp(e)[t](String(n))},function(t){var r=n(e,t,this);if(r.done)return r.value;var a=i(t),c=String(this);if(!a.global)return u(a,c);var l=a.unicode;a.lastIndex=0;for(var f,h=[],p=0;null!==(f=u(a,c));){var d=String(f[0]);h[p]=d,""===d&&(a.lastIndex=s(c,o(a.lastIndex),l)),p++}return 0===p?null:h}]}))},6528:(t,e,n)=>{"use strict";var r=n(2109),i=n(6650).end;r({target:"String",proto:!0,forced:n(7061)},{padEnd:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}})},3112:(t,e,n)=>{"use strict";var r=n(2109),i=n(6650).start;r({target:"String",proto:!0,forced:n(7061)},{padStart:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}})},8992:(t,e,n)=>{var r=n(2109),i=n(5656),o=n(7466);r({target:"String",stat:!0},{raw:function(t){for(var e=i(t.raw),n=o(e.length),r=arguments.length,a=[],s=0;n>s;)a.push(String(e[s++])),s<r&&a.push(String(arguments[s]));return a.join("")}})},2481:(t,e,n)=>{n(2109)({target:"String",proto:!0},{repeat:n(8415)})},8757:(t,e,n)=>{"use strict";var r=n(2109),i=n(4488),o=n(7850),a=n(7066),s=n(647),u=n(5112),c=n(1913),l=u("replace"),f=RegExp.prototype,h=Math.max,p=function(t,e,n){return n>t.length?-1:""===e?n:t.indexOf(e,n)};r({target:"String",proto:!0},{replaceAll:function(t,e){var n,r,u,d,v,g,y,m,b=i(this),x=0,w=0,S="";if(null!=t){if((n=o(t))&&!~String(i("flags"in f?t.flags:a.call(t))).indexOf("g"))throw TypeError("`.replaceAll` does not allow non-global regexes");if(void 0!==(r=t[l]))return r.call(t,b,e);if(c&&n)return String(b).replace(t,e)}for(u=String(b),d=String(t),(v="function"==typeof e)||(e=String(e)),g=d.length,y=h(1,g),x=p(u,d,0);-1!==x;)m=v?String(e(d,x,u)):s(d,u,x,[],void 0,e),S+=u.slice(w,x)+m,w=x+g,x=p(u,d,x+y);return w<u.length&&(S+=u.slice(w)),S}})},5306:(t,e,n)=>{"use strict";var r=n(7007),i=n(9670),o=n(7466),a=n(9958),s=n(4488),u=n(1530),c=n(647),l=n(7651),f=Math.max,h=Math.min;r("replace",2,(function(t,e,n,r){var p=r.REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE,d=r.REPLACE_KEEPS_$0,v=p?"$":"$0";return[function(n,r){var i=s(this),o=null==n?void 0:n[t];return void 0!==o?o.call(n,i,r):e.call(String(i),n,r)},function(t,r){if(!p&&d||"string"==typeof r&&-1===r.indexOf(v)){var s=n(e,t,this,r);if(s.done)return s.value}var g=i(t),y=String(this),m="function"==typeof r;m||(r=String(r));var b=g.global;if(b){var x=g.unicode;g.lastIndex=0}for(var w=[];;){var S=l(g,y);if(null===S)break;if(w.push(S),!b)break;""===String(S[0])&&(g.lastIndex=u(y,o(g.lastIndex),x))}for(var _,A="",M=0,T=0;T<w.length;T++){S=w[T];for(var E=String(S[0]),k=f(h(a(S.index),y.length),0),O=[],P=1;P<S.length;P++)O.push(void 0===(_=S[P])?_:String(_));var C=S.groups;if(m){var R=[E].concat(O,k,y);void 0!==C&&R.push(C);var I=String(r.apply(void 0,R))}else I=c(E,y,k,O,C,r);k>=M&&(A+=y.slice(M,k)+I,M=k+E.length)}return A+y.slice(M)}]}))},4765:(t,e,n)=>{"use strict";var r=n(7007),i=n(9670),o=n(4488),a=n(1150),s=n(7651);r("search",1,(function(t,e,n){return[function(e){var n=o(this),r=null==e?void 0:e[t];return void 0!==r?r.call(e,n):new RegExp(e)[t](String(n))},function(t){var r=n(e,t,this);if(r.done)return r.value;var o=i(t),u=String(this),c=o.lastIndex;a(c,0)||(o.lastIndex=0);var l=s(o,u);return a(o.lastIndex,c)||(o.lastIndex=c),null===l?-1:l.index}]}))},7268:(t,e,n)=>{"use strict";var r=n(2109),i=n(4230);r({target:"String",proto:!0,forced:n(3429)("small")},{small:function(){return i(this,"small","","")}})},3123:(t,e,n)=>{"use strict";var r=n(7007),i=n(7850),o=n(9670),a=n(4488),s=n(6707),u=n(1530),c=n(7466),l=n(7651),f=n(2261),h=n(7293),p=[].push,d=Math.min,v=4294967295,g=!h((function(){return!RegExp(v,"y")}));r("split",2,(function(t,e,n){var r;return r="c"=="abbc".split(/(b)*/)[1]||4!="test".split(/(?:)/,-1).length||2!="ab".split(/(?:ab)*/).length||4!=".".split(/(.?)(.?)/).length||".".split(/()()/).length>1||"".split(/.?/).length?function(t,n){var r=String(a(this)),o=void 0===n?v:n>>>0;if(0===o)return[];if(void 0===t)return[r];if(!i(t))return e.call(r,t,o);for(var s,u,c,l=[],h=(t.ignoreCase?"i":"")+(t.multiline?"m":"")+(t.unicode?"u":"")+(t.sticky?"y":""),d=0,g=new RegExp(t.source,h+"g");(s=f.call(g,r))&&!((u=g.lastIndex)>d&&(l.push(r.slice(d,s.index)),s.length>1&&s.index<r.length&&p.apply(l,s.slice(1)),c=s[0].length,d=u,l.length>=o));)g.lastIndex===s.index&&g.lastIndex++;return d===r.length?!c&&g.test("")||l.push(""):l.push(r.slice(d)),l.length>o?l.slice(0,o):l}:"0".split(void 0,0).length?function(t,n){return void 0===t&&0===n?[]:e.call(this,t,n)}:e,[function(e,n){var i=a(this),o=null==e?void 0:e[t];return void 0!==o?o.call(e,i,n):r.call(String(i),e,n)},function(t,i){var a=n(r,t,this,i,r!==e);if(a.done)return a.value;var f=o(t),h=String(this),p=s(f,RegExp),y=f.unicode,m=(f.ignoreCase?"i":"")+(f.multiline?"m":"")+(f.unicode?"u":"")+(g?"y":"g"),b=new p(g?f:"^(?:"+f.source+")",m),x=void 0===i?v:i>>>0;if(0===x)return[];if(0===h.length)return null===l(b,h)?[h]:[];for(var w=0,S=0,_=[];S<h.length;){b.lastIndex=g?S:0;var A,M=l(b,g?h:h.slice(S));if(null===M||(A=d(c(b.lastIndex+(g?0:S)),h.length))===w)S=u(h,S,y);else{if(_.push(h.slice(w,S)),_.length===x)return _;for(var T=1;T<=M.length-1;T++)if(_.push(M[T]),_.length===x)return _;S=w=A}}return _.push(h.slice(w)),_}]}),!g)},6755:(t,e,n)=>{"use strict";var r,i=n(2109),o=n(1236).f,a=n(7466),s=n(3929),u=n(4488),c=n(4964),l=n(1913),f="".startsWith,h=Math.min,p=c("startsWith");i({target:"String",proto:!0,forced:!(!l&&!p&&(r=o(String.prototype,"startsWith"),r&&!r.writable)||p)},{startsWith:function(t){var e=String(u(this));s(t);var n=a(h(arguments.length>1?arguments[1]:void 0,e.length)),r=String(t);return f?f.call(e,r,n):e.slice(n,n+r.length)===r}})},7397:(t,e,n)=>{"use strict";var r=n(2109),i=n(4230);r({target:"String",proto:!0,forced:n(3429)("strike")},{strike:function(){return i(this,"strike","","")}})},86:(t,e,n)=>{"use strict";var r=n(2109),i=n(4230);r({target:"String",proto:!0,forced:n(3429)("sub")},{sub:function(){return i(this,"sub","","")}})},623:(t,e,n)=>{"use strict";var r=n(2109),i=n(4230);r({target:"String",proto:!0,forced:n(3429)("sup")},{sup:function(){return i(this,"sup","","")}})},8702:(t,e,n)=>{"use strict";var r=n(2109),i=n(3111).end,o=n(6091)("trimEnd"),a=o?function(){return i(this)}:"".trimEnd;r({target:"String",proto:!0,forced:o},{trimEnd:a,trimRight:a})},5674:(t,e,n)=>{"use strict";var r=n(2109),i=n(3111).start,o=n(6091)("trimStart"),a=o?function(){return i(this)}:"".trimStart;r({target:"String",proto:!0,forced:o},{trimStart:a,trimLeft:a})},3210:(t,e,n)=>{"use strict";var r=n(2109),i=n(3111).trim;r({target:"String",proto:!0,forced:n(6091)("trim")},{trim:function(){return i(this)}})},2443:(t,e,n)=>{n(7235)("asyncIterator")},1817:(t,e,n)=>{"use strict";var r=n(2109),i=n(9781),o=n(7854),a=n(6656),s=n(111),u=n(3070).f,c=n(9920),l=o.Symbol;if(i&&"function"==typeof l&&(!("description"in l.prototype)||void 0!==l().description)){var f={},h=function(){var t=arguments.length<1||void 0===arguments[0]?void 0:String(arguments[0]),e=this instanceof h?new l(t):void 0===t?l():l(t);return""===t&&(f[e]=!0),e};c(h,l);var p=h.prototype=l.prototype;p.constructor=h;var d=p.toString,v="Symbol(test)"==String(l("test")),g=/^Symbol\((.*)\)[^)]+$/;u(p,"description",{configurable:!0,get:function(){var t=s(this)?this.valueOf():this,e=d.call(t);if(a(f,t))return"";var n=v?e.slice(7,-1):e.replace(g,"$1");return""===n?void 0:n}}),r({global:!0,forced:!0},{Symbol:h})}},2401:(t,e,n)=>{n(7235)("hasInstance")},8722:(t,e,n)=>{n(7235)("isConcatSpreadable")},2165:(t,e,n)=>{n(7235)("iterator")},2526:(t,e,n)=>{"use strict";var r=n(2109),i=n(7854),o=n(5005),a=n(1913),s=n(9781),u=n(133),c=n(3307),l=n(7293),f=n(6656),h=n(3157),p=n(111),d=n(9670),v=n(7908),g=n(5656),y=n(7593),m=n(9114),b=n(30),x=n(1956),w=n(8006),S=n(1156),_=n(5181),A=n(1236),M=n(3070),T=n(5296),E=n(8880),k=n(1320),O=n(2309),P=n(6200),C=n(3501),R=n(9711),I=n(5112),j=n(6061),N=n(7235),L=n(8003),z=n(9909),D=n(2092).forEach,F=P("hidden"),U="Symbol",B=I("toPrimitive"),q=z.set,V=z.getterFor(U),W=Object.prototype,H=i.Symbol,Y=o("JSON","stringify"),G=A.f,X=M.f,$=S.f,Z=T.f,K=O("symbols"),J=O("op-symbols"),Q=O("string-to-symbol-registry"),tt=O("symbol-to-string-registry"),et=O("wks"),nt=i.QObject,rt=!nt||!nt.prototype||!nt.prototype.findChild,it=s&&l((function(){return 7!=b(X({},"a",{get:function(){return X(this,"a",{value:7}).a}})).a}))?function(t,e,n){var r=G(W,e);r&&delete W[e],X(t,e,n),r&&t!==W&&X(W,e,r)}:X,ot=function(t,e){var n=K[t]=b(H.prototype);return q(n,{type:U,tag:t,description:e}),s||(n.description=e),n},at=c?function(t){return"symbol"==typeof t}:function(t){return Object(t)instanceof H},st=function(t,e,n){t===W&&st(J,e,n),d(t);var r=y(e,!0);return d(n),f(K,r)?(n.enumerable?(f(t,F)&&t[F][r]&&(t[F][r]=!1),n=b(n,{enumerable:m(0,!1)})):(f(t,F)||X(t,F,m(1,{})),t[F][r]=!0),it(t,r,n)):X(t,r,n)},ut=function(t,e){d(t);var n=g(e),r=x(n).concat(ht(n));return D(r,(function(e){s&&!ct.call(n,e)||st(t,e,n[e])})),t},ct=function(t){var e=y(t,!0),n=Z.call(this,e);return!(this===W&&f(K,e)&&!f(J,e))&&(!(n||!f(this,e)||!f(K,e)||f(this,F)&&this[F][e])||n)},lt=function(t,e){var n=g(t),r=y(e,!0);if(n!==W||!f(K,r)||f(J,r)){var i=G(n,r);return!i||!f(K,r)||f(n,F)&&n[F][r]||(i.enumerable=!0),i}},ft=function(t){var e=$(g(t)),n=[];return D(e,(function(t){f(K,t)||f(C,t)||n.push(t)})),n},ht=function(t){var e=t===W,n=$(e?J:g(t)),r=[];return D(n,(function(t){!f(K,t)||e&&!f(W,t)||r.push(K[t])})),r};u||(k((H=function(){if(this instanceof H)throw TypeError("Symbol is not a constructor");var t=arguments.length&&void 0!==arguments[0]?String(arguments[0]):void 0,e=R(t),n=function(t){this===W&&n.call(J,t),f(this,F)&&f(this[F],e)&&(this[F][e]=!1),it(this,e,m(1,t))};return s&&rt&&it(W,e,{configurable:!0,set:n}),ot(e,t)}).prototype,"toString",(function(){return V(this).tag})),k(H,"withoutSetter",(function(t){return ot(R(t),t)})),T.f=ct,M.f=st,A.f=lt,w.f=S.f=ft,_.f=ht,j.f=function(t){return ot(I(t),t)},s&&(X(H.prototype,"description",{configurable:!0,get:function(){return V(this).description}}),a||k(W,"propertyIsEnumerable",ct,{unsafe:!0}))),r({global:!0,wrap:!0,forced:!u,sham:!u},{Symbol:H}),D(x(et),(function(t){N(t)})),r({target:U,stat:!0,forced:!u},{for:function(t){var e=String(t);if(f(Q,e))return Q[e];var n=H(e);return Q[e]=n,tt[n]=e,n},keyFor:function(t){if(!at(t))throw TypeError(t+" is not a symbol");if(f(tt,t))return tt[t]},useSetter:function(){rt=!0},useSimple:function(){rt=!1}}),r({target:"Object",stat:!0,forced:!u,sham:!s},{create:function(t,e){return void 0===e?b(t):ut(b(t),e)},defineProperty:st,defineProperties:ut,getOwnPropertyDescriptor:lt}),r({target:"Object",stat:!0,forced:!u},{getOwnPropertyNames:ft,getOwnPropertySymbols:ht}),r({target:"Object",stat:!0,forced:l((function(){_.f(1)}))},{getOwnPropertySymbols:function(t){return _.f(v(t))}}),Y&&r({target:"JSON",stat:!0,forced:!u||l((function(){var t=H();return"[null]"!=Y([t])||"{}"!=Y({a:t})||"{}"!=Y(Object(t))}))},{stringify:function(t,e,n){for(var r,i=[t],o=1;arguments.length>o;)i.push(arguments[o++]);if(r=e,(p(e)||void 0!==t)&&!at(t))return h(e)||(e=function(t,e){if("function"==typeof r&&(e=r.call(this,t,e)),!at(e))return e}),i[1]=e,Y.apply(null,i)}}),H.prototype[B]||E(H.prototype,B,H.prototype.valueOf),L(H,U),C[F]=!0},6066:(t,e,n)=>{n(7235)("matchAll")},9007:(t,e,n)=>{n(7235)("match")},3510:(t,e,n)=>{n(7235)("replace")},1840:(t,e,n)=>{n(7235)("search")},6982:(t,e,n)=>{n(7235)("species")},2159:(t,e,n)=>{n(7235)("split")},6649:(t,e,n)=>{n(7235)("toPrimitive")},9341:(t,e,n)=>{n(7235)("toStringTag")},543:(t,e,n)=>{n(7235)("unscopables")},2990:(t,e,n)=>{"use strict";var r=n(260),i=n(1048),o=r.aTypedArray;(0,r.exportTypedArrayMethod)("copyWithin",(function(t,e){return i.call(o(this),t,e,arguments.length>2?arguments[2]:void 0)}))},8927:(t,e,n)=>{"use strict";var r=n(260),i=n(2092).every,o=r.aTypedArray;(0,r.exportTypedArrayMethod)("every",(function(t){return i(o(this),t,arguments.length>1?arguments[1]:void 0)}))},3105:(t,e,n)=>{"use strict";var r=n(260),i=n(1285),o=r.aTypedArray;(0,r.exportTypedArrayMethod)("fill",(function(t){return i.apply(o(this),arguments)}))},5035:(t,e,n)=>{"use strict";var r=n(260),i=n(2092).filter,o=n(3074),a=r.aTypedArray;(0,r.exportTypedArrayMethod)("filter",(function(t){var e=i(a(this),t,arguments.length>1?arguments[1]:void 0);return o(this,e)}))},7174:(t,e,n)=>{"use strict";var r=n(260),i=n(2092).findIndex,o=r.aTypedArray;(0,r.exportTypedArrayMethod)("findIndex",(function(t){return i(o(this),t,arguments.length>1?arguments[1]:void 0)}))},4345:(t,e,n)=>{"use strict";var r=n(260),i=n(2092).find,o=r.aTypedArray;(0,r.exportTypedArrayMethod)("find",(function(t){return i(o(this),t,arguments.length>1?arguments[1]:void 0)}))},4197:(t,e,n)=>{n(9843)("Float32",(function(t){return function(e,n,r){return t(this,e,n,r)}}))},6495:(t,e,n)=>{n(9843)("Float64",(function(t){return function(e,n,r){return t(this,e,n,r)}}))},2846:(t,e,n)=>{"use strict";var r=n(260),i=n(2092).forEach,o=r.aTypedArray;(0,r.exportTypedArrayMethod)("forEach",(function(t){i(o(this),t,arguments.length>1?arguments[1]:void 0)}))},8145:(t,e,n)=>{"use strict";var r=n(3832);(0,n(260).exportTypedArrayStaticMethod)("from",n(7321),r)},4731:(t,e,n)=>{"use strict";var r=n(260),i=n(1318).includes,o=r.aTypedArray;(0,r.exportTypedArrayMethod)("includes",(function(t){return i(o(this),t,arguments.length>1?arguments[1]:void 0)}))},7209:(t,e,n)=>{"use strict";var r=n(260),i=n(1318).indexOf,o=r.aTypedArray;(0,r.exportTypedArrayMethod)("indexOf",(function(t){return i(o(this),t,arguments.length>1?arguments[1]:void 0)}))},5109:(t,e,n)=>{n(9843)("Int16",(function(t){return function(e,n,r){return t(this,e,n,r)}}))},5125:(t,e,n)=>{n(9843)("Int32",(function(t){return function(e,n,r){return t(this,e,n,r)}}))},7145:(t,e,n)=>{n(9843)("Int8",(function(t){return function(e,n,r){return t(this,e,n,r)}}))},6319:(t,e,n)=>{"use strict";var r=n(7854),i=n(260),o=n(6992),a=n(5112)("iterator"),s=r.Uint8Array,u=o.values,c=o.keys,l=o.entries,f=i.aTypedArray,h=i.exportTypedArrayMethod,p=s&&s.prototype[a],d=!!p&&("values"==p.name||null==p.name),v=function(){return u.call(f(this))};h("entries",(function(){return l.call(f(this))})),h("keys",(function(){return c.call(f(this))})),h("values",v,!d),h(a,v,!d)},8867:(t,e,n)=>{"use strict";var r=n(260),i=r.aTypedArray,o=r.exportTypedArrayMethod,a=[].join;o("join",(function(t){return a.apply(i(this),arguments)}))},7789:(t,e,n)=>{"use strict";var r=n(260),i=n(6583),o=r.aTypedArray;(0,r.exportTypedArrayMethod)("lastIndexOf",(function(t){return i.apply(o(this),arguments)}))},3739:(t,e,n)=>{"use strict";var r=n(260),i=n(2092).map,o=n(6707),a=r.aTypedArray,s=r.aTypedArrayConstructor;(0,r.exportTypedArrayMethod)("map",(function(t){return i(a(this),t,arguments.length>1?arguments[1]:void 0,(function(t,e){return new(s(o(t,t.constructor)))(e)}))}))},5206:(t,e,n)=>{"use strict";var r=n(260),i=n(3832),o=r.aTypedArrayConstructor;(0,r.exportTypedArrayStaticMethod)("of",(function(){for(var t=0,e=arguments.length,n=new(o(this))(e);e>t;)n[t]=arguments[t++];return n}),i)},4483:(t,e,n)=>{"use strict";var r=n(260),i=n(3671).right,o=r.aTypedArray;(0,r.exportTypedArrayMethod)("reduceRight",(function(t){return i(o(this),t,arguments.length,arguments.length>1?arguments[1]:void 0)}))},9368:(t,e,n)=>{"use strict";var r=n(260),i=n(3671).left,o=r.aTypedArray;(0,r.exportTypedArrayMethod)("reduce",(function(t){return i(o(this),t,arguments.length,arguments.length>1?arguments[1]:void 0)}))},2056:(t,e,n)=>{"use strict";var r=n(260),i=r.aTypedArray,o=r.exportTypedArrayMethod,a=Math.floor;o("reverse",(function(){for(var t,e=this,n=i(e).length,r=a(n/2),o=0;o<r;)t=e[o],e[o++]=e[--n],e[n]=t;return e}))},3462:(t,e,n)=>{"use strict";var r=n(260),i=n(7466),o=n(4590),a=n(7908),s=n(7293),u=r.aTypedArray;(0,r.exportTypedArrayMethod)("set",(function(t){u(this);var e=o(arguments.length>1?arguments[1]:void 0,1),n=this.length,r=a(t),s=i(r.length),c=0;if(s+e>n)throw RangeError("Wrong length");for(;c<s;)this[e+c]=r[c++]}),s((function(){new Int8Array(1).set({})})))},678:(t,e,n)=>{"use strict";var r=n(260),i=n(6707),o=n(7293),a=r.aTypedArray,s=r.aTypedArrayConstructor,u=r.exportTypedArrayMethod,c=[].slice;u("slice",(function(t,e){for(var n=c.call(a(this),t,e),r=i(this,this.constructor),o=0,u=n.length,l=new(s(r))(u);u>o;)l[o]=n[o++];return l}),o((function(){new Int8Array(1).slice()})))},7462:(t,e,n)=>{"use strict";var r=n(260),i=n(2092).some,o=r.aTypedArray;(0,r.exportTypedArrayMethod)("some",(function(t){return i(o(this),t,arguments.length>1?arguments[1]:void 0)}))},3824:(t,e,n)=>{"use strict";var r=n(260),i=r.aTypedArray,o=r.exportTypedArrayMethod,a=[].sort;o("sort",(function(t){return a.call(i(this),t)}))},5021:(t,e,n)=>{"use strict";var r=n(260),i=n(7466),o=n(1400),a=n(6707),s=r.aTypedArray;(0,r.exportTypedArrayMethod)("subarray",(function(t,e){var n=s(this),r=n.length,u=o(t,r);return new(a(n,n.constructor))(n.buffer,n.byteOffset+u*n.BYTES_PER_ELEMENT,i((void 0===e?r:o(e,r))-u))}))},2974:(t,e,n)=>{"use strict";var r=n(7854),i=n(260),o=n(7293),a=r.Int8Array,s=i.aTypedArray,u=i.exportTypedArrayMethod,c=[].toLocaleString,l=[].slice,f=!!a&&o((function(){c.call(new a(1))}));u("toLocaleString",(function(){return c.apply(f?l.call(s(this)):s(this),arguments)}),o((function(){return[1,2].toLocaleString()!=new a([1,2]).toLocaleString()}))||!o((function(){a.prototype.toLocaleString.call([1,2])})))},5016:(t,e,n)=>{"use strict";var r=n(260).exportTypedArrayMethod,i=n(7293),o=n(7854).Uint8Array,a=o&&o.prototype||{},s=[].toString,u=[].join;i((function(){s.call({})}))&&(s=function(){return u.call(this)});var c=a.toString!=s;r("toString",s,c)},8255:(t,e,n)=>{n(9843)("Uint16",(function(t){return function(e,n,r){return t(this,e,n,r)}}))},9135:(t,e,n)=>{n(9843)("Uint32",(function(t){return function(e,n,r){return t(this,e,n,r)}}))},2472:(t,e,n)=>{n(9843)("Uint8",(function(t){return function(e,n,r){return t(this,e,n,r)}}))},9743:(t,e,n)=>{n(9843)("Uint8",(function(t){return function(e,n,r){return t(this,e,n,r)}}),!0)},4129:(t,e,n)=>{"use strict";var r,i=n(7854),o=n(2248),a=n(2423),s=n(7710),u=n(9320),c=n(111),l=n(9909).enforce,f=n(8536),h=!i.ActiveXObject&&"ActiveXObject"in i,p=Object.isExtensible,d=function(t){return function(){return t(this,arguments.length?arguments[0]:void 0)}},v=t.exports=s("WeakMap",d,u);if(f&&h){r=u.getConstructor(d,"WeakMap",!0),a.REQUIRED=!0;var g=v.prototype,y=g.delete,m=g.has,b=g.get,x=g.set;o(g,{delete:function(t){if(c(t)&&!p(t)){var e=l(this);return e.frozen||(e.frozen=new r),y.call(this,t)||e.frozen.delete(t)}return y.call(this,t)},has:function(t){if(c(t)&&!p(t)){var e=l(this);return e.frozen||(e.frozen=new r),m.call(this,t)||e.frozen.has(t)}return m.call(this,t)},get:function(t){if(c(t)&&!p(t)){var e=l(this);return e.frozen||(e.frozen=new r),m.call(this,t)?b.call(this,t):e.frozen.get(t)}return b.call(this,t)},set:function(t,e){if(c(t)&&!p(t)){var n=l(this);n.frozen||(n.frozen=new r),m.call(this,t)?x.call(this,t,e):n.frozen.set(t,e)}else x.call(this,t,e);return this}})}},8478:(t,e,n)=>{"use strict";n(7710)("WeakSet",(function(t){return function(){return t(this,arguments.length?arguments[0]:void 0)}}),n(9320))},4747:(t,e,n)=>{var r=n(7854),i=n(8324),o=n(8533),a=n(8880);for(var s in i){var u=r[s],c=u&&u.prototype;if(c&&c.forEach!==o)try{a(c,"forEach",o)}catch(t){c.forEach=o}}},3948:(t,e,n)=>{var r=n(7854),i=n(8324),o=n(6992),a=n(8880),s=n(5112),u=s("iterator"),c=s("toStringTag"),l=o.values;for(var f in i){var h=r[f],p=h&&h.prototype;if(p){if(p[u]!==l)try{a(p,u,l)}catch(t){p[u]=l}if(p[c]||a(p,c,f),i[f])for(var d in o)if(p[d]!==o[d])try{a(p,d,o[d])}catch(t){p[d]=o[d]}}}},4633:(t,e,n)=>{var r=n(2109),i=n(7854),o=n(261);r({global:!0,bind:!0,enumerable:!0,forced:!i.setImmediate||!i.clearImmediate},{setImmediate:o.set,clearImmediate:o.clear})},5844:(t,e,n)=>{var r=n(2109),i=n(7854),o=n(5948),a=n(5268),s=i.process;r({global:!0,enumerable:!0,noTargetGet:!0},{queueMicrotask:function(t){var e=a&&s.domain;o(e?e.bind(t):t)}})},2564:(t,e,n)=>{var r=n(2109),i=n(7854),o=n(8113),a=[].slice,s=function(t){return function(e,n){var r=arguments.length>2,i=r?a.call(arguments,2):void 0;return t(r?function(){("function"==typeof e?e:Function(e)).apply(this,i)}:e,n)}};r({global:!0,bind:!0,forced:/MSIE .\./.test(o)},{setTimeout:s(i.setTimeout),setInterval:s(i.setInterval)})},1637:(t,e,n)=>{"use strict";n(6992);var r=n(2109),i=n(5005),o=n(590),a=n(1320),s=n(2248),u=n(8003),c=n(4994),l=n(9909),f=n(5787),h=n(6656),p=n(9974),d=n(648),v=n(9670),g=n(111),y=n(30),m=n(9114),b=n(8554),x=n(1246),w=n(5112),S=i("fetch"),_=i("Headers"),A=w("iterator"),M="URLSearchParams",T="URLSearchParamsIterator",E=l.set,k=l.getterFor(M),O=l.getterFor(T),P=/\+/g,C=Array(4),R=function(t){return C[t-1]||(C[t-1]=RegExp("((?:%[\\da-f]{2}){"+t+"})","gi"))},I=function(t){try{return decodeURIComponent(t)}catch(e){return t}},j=function(t){var e=t.replace(P," "),n=4;try{return decodeURIComponent(e)}catch(t){for(;n;)e=e.replace(R(n--),I);return e}},N=/[!'()~]|%20/g,L={"!":"%21","'":"%27","(":"%28",")":"%29","~":"%7E","%20":"+"},z=function(t){return L[t]},D=function(t){return encodeURIComponent(t).replace(N,z)},F=function(t,e){if(e)for(var n,r,i=e.split("&"),o=0;o<i.length;)(n=i[o++]).length&&(r=n.split("="),t.push({key:j(r.shift()),value:j(r.join("="))}))},U=function(t){this.entries.length=0,F(this.entries,t)},B=function(t,e){if(t<e)throw TypeError("Not enough arguments")},q=c((function(t,e){E(this,{type:T,iterator:b(k(t).entries),kind:e})}),"Iterator",(function(){var t=O(this),e=t.kind,n=t.iterator.next(),r=n.value;return n.done||(n.value="keys"===e?r.key:"values"===e?r.value:[r.key,r.value]),n})),V=function(){f(this,V,M);var t,e,n,r,i,o,a,s,u,c=arguments.length>0?arguments[0]:void 0,l=this,p=[];if(E(l,{type:M,entries:p,updateURL:function(){},updateSearchParams:U}),void 0!==c)if(g(c))if("function"==typeof(t=x(c)))for(n=(e=t.call(c)).next;!(r=n.call(e)).done;){if((a=(o=(i=b(v(r.value))).next).call(i)).done||(s=o.call(i)).done||!o.call(i).done)throw TypeError("Expected sequence with length 2");p.push({key:a.value+"",value:s.value+""})}else for(u in c)h(c,u)&&p.push({key:u,value:c[u]+""});else F(p,"string"==typeof c?"?"===c.charAt(0)?c.slice(1):c:c+"")},W=V.prototype;s(W,{append:function(t,e){B(arguments.length,2);var n=k(this);n.entries.push({key:t+"",value:e+""}),n.updateURL()},delete:function(t){B(arguments.length,1);for(var e=k(this),n=e.entries,r=t+"",i=0;i<n.length;)n[i].key===r?n.splice(i,1):i++;e.updateURL()},get:function(t){B(arguments.length,1);for(var e=k(this).entries,n=t+"",r=0;r<e.length;r++)if(e[r].key===n)return e[r].value;return null},getAll:function(t){B(arguments.length,1);for(var e=k(this).entries,n=t+"",r=[],i=0;i<e.length;i++)e[i].key===n&&r.push(e[i].value);return r},has:function(t){B(arguments.length,1);for(var e=k(this).entries,n=t+"",r=0;r<e.length;)if(e[r++].key===n)return!0;return!1},set:function(t,e){B(arguments.length,1);for(var n,r=k(this),i=r.entries,o=!1,a=t+"",s=e+"",u=0;u<i.length;u++)(n=i[u]).key===a&&(o?i.splice(u--,1):(o=!0,n.value=s));o||i.push({key:a,value:s}),r.updateURL()},sort:function(){var t,e,n,r=k(this),i=r.entries,o=i.slice();for(i.length=0,n=0;n<o.length;n++){for(t=o[n],e=0;e<n;e++)if(i[e].key>t.key){i.splice(e,0,t);break}e===n&&i.push(t)}r.updateURL()},forEach:function(t){for(var e,n=k(this).entries,r=p(t,arguments.length>1?arguments[1]:void 0,3),i=0;i<n.length;)r((e=n[i++]).value,e.key,this)},keys:function(){return new q(this,"keys")},values:function(){return new q(this,"values")},entries:function(){return new q(this,"entries")}},{enumerable:!0}),a(W,A,W.entries),a(W,"toString",(function(){for(var t,e=k(this).entries,n=[],r=0;r<e.length;)t=e[r++],n.push(D(t.key)+"="+D(t.value));return n.join("&")}),{enumerable:!0}),u(V,M),r({global:!0,forced:!o},{URLSearchParams:V}),o||"function"!=typeof S||"function"!=typeof _||r({global:!0,enumerable:!0,forced:!0},{fetch:function(t){var e,n,r,i=[t];return arguments.length>1&&(g(e=arguments[1])&&(n=e.body,d(n)===M&&((r=e.headers?new _(e.headers):new _).has("content-type")||r.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"),e=y(e,{body:m(0,String(n)),headers:m(0,r)}))),i.push(e)),S.apply(this,i)}}),t.exports={URLSearchParams:V,getState:k}},285:(t,e,n)=>{"use strict";n(8783);var r,i=n(2109),o=n(9781),a=n(590),s=n(7854),u=n(6048),c=n(1320),l=n(5787),f=n(6656),h=n(1574),p=n(8457),d=n(8710).codeAt,v=n(3197),g=n(8003),y=n(1637),m=n(9909),b=s.URL,x=y.URLSearchParams,w=y.getState,S=m.set,_=m.getterFor("URL"),A=Math.floor,M=Math.pow,T="Invalid scheme",E="Invalid host",k="Invalid port",O=/[A-Za-z]/,P=/[\d+-.A-Za-z]/,C=/\d/,R=/^(0x|0X)/,I=/^[0-7]+$/,j=/^\d+$/,N=/^[\dA-Fa-f]+$/,L=/[\u0000\t\u000A\u000D #%/:?@[\\]]/,z=/[\u0000\t\u000A\u000D #/:?@[\\]]/,D=/^[\u0000-\u001F ]+|[\u0000-\u001F ]+$/g,F=/[\t\u000A\u000D]/g,U=function(t,e){var n,r,i;if("["==e.charAt(0)){if("]"!=e.charAt(e.length-1))return E;if(!(n=q(e.slice(1,-1))))return E;t.host=n}else if(Z(t)){if(e=v(e),L.test(e))return E;if(null===(n=B(e)))return E;t.host=n}else{if(z.test(e))return E;for(n="",r=p(e),i=0;i<r.length;i++)n+=X(r[i],W);t.host=n}},B=function(t){var e,n,r,i,o,a,s,u=t.split(".");if(u.length&&""==u[u.length-1]&&u.pop(),(e=u.length)>4)return t;for(n=[],r=0;r<e;r++){if(""==(i=u[r]))return t;if(o=10,i.length>1&&"0"==i.charAt(0)&&(o=R.test(i)?16:8,i=i.slice(8==o?1:2)),""===i)a=0;else{if(!(10==o?j:8==o?I:N).test(i))return t;a=parseInt(i,o)}n.push(a)}for(r=0;r<e;r++)if(a=n[r],r==e-1){if(a>=M(256,5-e))return null}else if(a>255)return null;for(s=n.pop(),r=0;r<n.length;r++)s+=n[r]*M(256,3-r);return s},q=function(t){var e,n,r,i,o,a,s,u=[0,0,0,0,0,0,0,0],c=0,l=null,f=0,h=function(){return t.charAt(f)};if(":"==h()){if(":"!=t.charAt(1))return;f+=2,l=++c}for(;h();){if(8==c)return;if(":"!=h()){for(e=n=0;n<4&&N.test(h());)e=16*e+parseInt(h(),16),f++,n++;if("."==h()){if(0==n)return;if(f-=n,c>6)return;for(r=0;h();){if(i=null,r>0){if(!("."==h()&&r<4))return;f++}if(!C.test(h()))return;for(;C.test(h());){if(o=parseInt(h(),10),null===i)i=o;else{if(0==i)return;i=10*i+o}if(i>255)return;f++}u[c]=256*u[c]+i,2!=++r&&4!=r||c++}if(4!=r)return;break}if(":"==h()){if(f++,!h())return}else if(h())return;u[c++]=e}else{if(null!==l)return;f++,l=++c}}if(null!==l)for(a=c-l,c=7;0!=c&&a>0;)s=u[c],u[c--]=u[l+a-1],u[l+--a]=s;else if(8!=c)return;return u},V=function(t){var e,n,r,i;if("number"==typeof t){for(e=[],n=0;n<4;n++)e.unshift(t%256),t=A(t/256);return e.join(".")}if("object"==typeof t){for(e="",r=function(t){for(var e=null,n=1,r=null,i=0,o=0;o<8;o++)0!==t[o]?(i>n&&(e=r,n=i),r=null,i=0):(null===r&&(r=o),++i);return i>n&&(e=r,n=i),e}(t),n=0;n<8;n++)i&&0===t[n]||(i&&(i=!1),r===n?(e+=n?":":"::",i=!0):(e+=t[n].toString(16),n<7&&(e+=":")));return"["+e+"]"}return t},W={},H=h({},W,{" ":1,'"':1,"<":1,">":1,"`":1}),Y=h({},H,{"#":1,"?":1,"{":1,"}":1}),G=h({},Y,{"/":1,":":1,";":1,"=":1,"@":1,"[":1,"\\":1,"]":1,"^":1,"|":1}),X=function(t,e){var n=d(t,0);return n>32&&n<127&&!f(e,t)?t:encodeURIComponent(t)},$={ftp:21,file:null,http:80,https:443,ws:80,wss:443},Z=function(t){return f($,t.scheme)},K=function(t){return""!=t.username||""!=t.password},J=function(t){return!t.host||t.cannotBeABaseURL||"file"==t.scheme},Q=function(t,e){var n;return 2==t.length&&O.test(t.charAt(0))&&(":"==(n=t.charAt(1))||!e&&"|"==n)},tt=function(t){var e;return t.length>1&&Q(t.slice(0,2))&&(2==t.length||"/"===(e=t.charAt(2))||"\\"===e||"?"===e||"#"===e)},et=function(t){var e=t.path,n=e.length;!n||"file"==t.scheme&&1==n&&Q(e[0],!0)||e.pop()},nt=function(t){return"."===t||"%2e"===t.toLowerCase()},rt={},it={},ot={},at={},st={},ut={},ct={},lt={},ft={},ht={},pt={},dt={},vt={},gt={},yt={},mt={},bt={},xt={},wt={},St={},_t={},At=function(t,e,n,i){var o,a,s,u,c,l=n||rt,h=0,d="",v=!1,g=!1,y=!1;for(n||(t.scheme="",t.username="",t.password="",t.host=null,t.port=null,t.path=[],t.query=null,t.fragment=null,t.cannotBeABaseURL=!1,e=e.replace(D,"")),e=e.replace(F,""),o=p(e);h<=o.length;){switch(a=o[h],l){case rt:if(!a||!O.test(a)){if(n)return T;l=ot;continue}d+=a.toLowerCase(),l=it;break;case it:if(a&&(P.test(a)||"+"==a||"-"==a||"."==a))d+=a.toLowerCase();else{if(":"!=a){if(n)return T;d="",l=ot,h=0;continue}if(n&&(Z(t)!=f($,d)||"file"==d&&(K(t)||null!==t.port)||"file"==t.scheme&&!t.host))return;if(t.scheme=d,n)return void(Z(t)&&$[t.scheme]==t.port&&(t.port=null));d="","file"==t.scheme?l=gt:Z(t)&&i&&i.scheme==t.scheme?l=at:Z(t)?l=lt:"/"==o[h+1]?(l=st,h++):(t.cannotBeABaseURL=!0,t.path.push(""),l=wt)}break;case ot:if(!i||i.cannotBeABaseURL&&"#"!=a)return T;if(i.cannotBeABaseURL&&"#"==a){t.scheme=i.scheme,t.path=i.path.slice(),t.query=i.query,t.fragment="",t.cannotBeABaseURL=!0,l=_t;break}l="file"==i.scheme?gt:ut;continue;case at:if("/"!=a||"/"!=o[h+1]){l=ut;continue}l=ft,h++;break;case st:if("/"==a){l=ht;break}l=xt;continue;case ut:if(t.scheme=i.scheme,a==r)t.username=i.username,t.password=i.password,t.host=i.host,t.port=i.port,t.path=i.path.slice(),t.query=i.query;else if("/"==a||"\\"==a&&Z(t))l=ct;else if("?"==a)t.username=i.username,t.password=i.password,t.host=i.host,t.port=i.port,t.path=i.path.slice(),t.query="",l=St;else{if("#"!=a){t.username=i.username,t.password=i.password,t.host=i.host,t.port=i.port,t.path=i.path.slice(),t.path.pop(),l=xt;continue}t.username=i.username,t.password=i.password,t.host=i.host,t.port=i.port,t.path=i.path.slice(),t.query=i.query,t.fragment="",l=_t}break;case ct:if(!Z(t)||"/"!=a&&"\\"!=a){if("/"!=a){t.username=i.username,t.password=i.password,t.host=i.host,t.port=i.port,l=xt;continue}l=ht}else l=ft;break;case lt:if(l=ft,"/"!=a||"/"!=d.charAt(h+1))continue;h++;break;case ft:if("/"!=a&&"\\"!=a){l=ht;continue}break;case ht:if("@"==a){v&&(d="%40"+d),v=!0,s=p(d);for(var m=0;m<s.length;m++){var b=s[m];if(":"!=b||y){var x=X(b,G);y?t.password+=x:t.username+=x}else y=!0}d=""}else if(a==r||"/"==a||"?"==a||"#"==a||"\\"==a&&Z(t)){if(v&&""==d)return"Invalid authority";h-=p(d).length+1,d="",l=pt}else d+=a;break;case pt:case dt:if(n&&"file"==t.scheme){l=mt;continue}if(":"!=a||g){if(a==r||"/"==a||"?"==a||"#"==a||"\\"==a&&Z(t)){if(Z(t)&&""==d)return E;if(n&&""==d&&(K(t)||null!==t.port))return;if(u=U(t,d))return u;if(d="",l=bt,n)return;continue}"["==a?g=!0:"]"==a&&(g=!1),d+=a}else{if(""==d)return E;if(u=U(t,d))return u;if(d="",l=vt,n==dt)return}break;case vt:if(!C.test(a)){if(a==r||"/"==a||"?"==a||"#"==a||"\\"==a&&Z(t)||n){if(""!=d){var w=parseInt(d,10);if(w>65535)return k;t.port=Z(t)&&w===$[t.scheme]?null:w,d=""}if(n)return;l=bt;continue}return k}d+=a;break;case gt:if(t.scheme="file","/"==a||"\\"==a)l=yt;else{if(!i||"file"!=i.scheme){l=xt;continue}if(a==r)t.host=i.host,t.path=i.path.slice(),t.query=i.query;else if("?"==a)t.host=i.host,t.path=i.path.slice(),t.query="",l=St;else{if("#"!=a){tt(o.slice(h).join(""))||(t.host=i.host,t.path=i.path.slice(),et(t)),l=xt;continue}t.host=i.host,t.path=i.path.slice(),t.query=i.query,t.fragment="",l=_t}}break;case yt:if("/"==a||"\\"==a){l=mt;break}i&&"file"==i.scheme&&!tt(o.slice(h).join(""))&&(Q(i.path[0],!0)?t.path.push(i.path[0]):t.host=i.host),l=xt;continue;case mt:if(a==r||"/"==a||"\\"==a||"?"==a||"#"==a){if(!n&&Q(d))l=xt;else if(""==d){if(t.host="",n)return;l=bt}else{if(u=U(t,d))return u;if("localhost"==t.host&&(t.host=""),n)return;d="",l=bt}continue}d+=a;break;case bt:if(Z(t)){if(l=xt,"/"!=a&&"\\"!=a)continue}else if(n||"?"!=a)if(n||"#"!=a){if(a!=r&&(l=xt,"/"!=a))continue}else t.fragment="",l=_t;else t.query="",l=St;break;case xt:if(a==r||"/"==a||"\\"==a&&Z(t)||!n&&("?"==a||"#"==a)){if(".."===(c=(c=d).toLowerCase())||"%2e."===c||".%2e"===c||"%2e%2e"===c?(et(t),"/"==a||"\\"==a&&Z(t)||t.path.push("")):nt(d)?"/"==a||"\\"==a&&Z(t)||t.path.push(""):("file"==t.scheme&&!t.path.length&&Q(d)&&(t.host&&(t.host=""),d=d.charAt(0)+":"),t.path.push(d)),d="","file"==t.scheme&&(a==r||"?"==a||"#"==a))for(;t.path.length>1&&""===t.path[0];)t.path.shift();"?"==a?(t.query="",l=St):"#"==a&&(t.fragment="",l=_t)}else d+=X(a,Y);break;case wt:"?"==a?(t.query="",l=St):"#"==a?(t.fragment="",l=_t):a!=r&&(t.path[0]+=X(a,W));break;case St:n||"#"!=a?a!=r&&("'"==a&&Z(t)?t.query+="%27":t.query+="#"==a?"%23":X(a,W)):(t.fragment="",l=_t);break;case _t:a!=r&&(t.fragment+=X(a,H))}h++}},Mt=function(t){var e,n,r=l(this,Mt,"URL"),i=arguments.length>1?arguments[1]:void 0,a=String(t),s=S(r,{type:"URL"});if(void 0!==i)if(i instanceof Mt)e=_(i);else if(n=At(e={},String(i)))throw TypeError(n);if(n=At(s,a,null,e))throw TypeError(n);var u=s.searchParams=new x,c=w(u);c.updateSearchParams(s.query),c.updateURL=function(){s.query=String(u)||null},o||(r.href=Et.call(r),r.origin=kt.call(r),r.protocol=Ot.call(r),r.username=Pt.call(r),r.password=Ct.call(r),r.host=Rt.call(r),r.hostname=It.call(r),r.port=jt.call(r),r.pathname=Nt.call(r),r.search=Lt.call(r),r.searchParams=zt.call(r),r.hash=Dt.call(r))},Tt=Mt.prototype,Et=function(){var t=_(this),e=t.scheme,n=t.username,r=t.password,i=t.host,o=t.port,a=t.path,s=t.query,u=t.fragment,c=e+":";return null!==i?(c+="//",K(t)&&(c+=n+(r?":"+r:"")+"@"),c+=V(i),null!==o&&(c+=":"+o)):"file"==e&&(c+="//"),c+=t.cannotBeABaseURL?a[0]:a.length?"/"+a.join("/"):"",null!==s&&(c+="?"+s),null!==u&&(c+="#"+u),c},kt=function(){var t=_(this),e=t.scheme,n=t.port;if("blob"==e)try{return new URL(e.path[0]).origin}catch(t){return"null"}return"file"!=e&&Z(t)?e+"://"+V(t.host)+(null!==n?":"+n:""):"null"},Ot=function(){return _(this).scheme+":"},Pt=function(){return _(this).username},Ct=function(){return _(this).password},Rt=function(){var t=_(this),e=t.host,n=t.port;return null===e?"":null===n?V(e):V(e)+":"+n},It=function(){var t=_(this).host;return null===t?"":V(t)},jt=function(){var t=_(this).port;return null===t?"":String(t)},Nt=function(){var t=_(this),e=t.path;return t.cannotBeABaseURL?e[0]:e.length?"/"+e.join("/"):""},Lt=function(){var t=_(this).query;return t?"?"+t:""},zt=function(){return _(this).searchParams},Dt=function(){var t=_(this).fragment;return t?"#"+t:""},Ft=function(t,e){return{get:t,set:e,configurable:!0,enumerable:!0}};if(o&&u(Tt,{href:Ft(Et,(function(t){var e=_(this),n=String(t),r=At(e,n);if(r)throw TypeError(r);w(e.searchParams).updateSearchParams(e.query)})),origin:Ft(kt),protocol:Ft(Ot,(function(t){var e=_(this);At(e,String(t)+":",rt)})),username:Ft(Pt,(function(t){var e=_(this),n=p(String(t));if(!J(e)){e.username="";for(var r=0;r<n.length;r++)e.username+=X(n[r],G)}})),password:Ft(Ct,(function(t){var e=_(this),n=p(String(t));if(!J(e)){e.password="";for(var r=0;r<n.length;r++)e.password+=X(n[r],G)}})),host:Ft(Rt,(function(t){var e=_(this);e.cannotBeABaseURL||At(e,String(t),pt)})),hostname:Ft(It,(function(t){var e=_(this);e.cannotBeABaseURL||At(e,String(t),dt)})),port:Ft(jt,(function(t){var e=_(this);J(e)||(""==(t=String(t))?e.port=null:At(e,t,vt))})),pathname:Ft(Nt,(function(t){var e=_(this);e.cannotBeABaseURL||(e.path=[],At(e,t+"",bt))})),search:Ft(Lt,(function(t){var e=_(this);""==(t=String(t))?e.query=null:("?"==t.charAt(0)&&(t=t.slice(1)),e.query="",At(e,t,St)),w(e.searchParams).updateSearchParams(e.query)})),searchParams:Ft(zt),hash:Ft(Dt,(function(t){var e=_(this);""!=(t=String(t))?("#"==t.charAt(0)&&(t=t.slice(1)),e.fragment="",At(e,t,_t)):e.fragment=null}))}),c(Tt,"toJSON",(function(){return Et.call(this)}),{enumerable:!0}),c(Tt,"toString",(function(){return Et.call(this)}),{enumerable:!0}),b){var Ut=b.createObjectURL,Bt=b.revokeObjectURL;Ut&&c(Mt,"createObjectURL",(function(t){return Ut.apply(b,arguments)})),Bt&&c(Mt,"revokeObjectURL",(function(t){return Bt.apply(b,arguments)}))}g(Mt,"URL"),i({global:!0,forced:!a,sham:!o},{URL:Mt})},3753:(t,e,n)=>{"use strict";n(2109)({target:"URL",proto:!0,enumerable:!0},{toJSON:function(){return URL.prototype.toString.call(this)}})},8594:(t,e,n)=>{n(1926),n(6337);var r=n(857);t.exports=r},6337:(t,e,n)=>{n(4747),n(3948),n(4633),n(5844),n(2564),n(285),n(3753),n(1637);var r=n(857);t.exports=r},5666:t=>{var e=function(t){"use strict";var e,n=Object.prototype,r=n.hasOwnProperty,i="function"==typeof Symbol?Symbol:{},o=i.iterator||"@@iterator",a=i.asyncIterator||"@@asyncIterator",s=i.toStringTag||"@@toStringTag";function u(t,e,n){return Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{u({},"")}catch(t){u=function(t,e,n){return t[e]=n}}function c(t,e,n,r){var i=e&&e.prototype instanceof g?e:g,o=Object.create(i.prototype),a=new k(r||[]);return o._invoke=function(t,e,n){var r=f;return function(i,o){if(r===p)throw new Error("Generator is already running");if(r===d){if("throw"===i)throw o;return P()}for(n.method=i,n.arg=o;;){var a=n.delegate;if(a){var s=M(a,n);if(s){if(s===v)continue;return s}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(r===f)throw r=d,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r=p;var u=l(t,e,n);if("normal"===u.type){if(r=n.done?d:h,u.arg===v)continue;return{value:u.arg,done:n.done}}"throw"===u.type&&(r=d,n.method="throw",n.arg=u.arg)}}}(t,n,a),o}function l(t,e,n){try{return{type:"normal",arg:t.call(e,n)}}catch(t){return{type:"throw",arg:t}}}t.wrap=c;var f="suspendedStart",h="suspendedYield",p="executing",d="completed",v={};function g(){}function y(){}function m(){}var b={};b[o]=function(){return this};var x=Object.getPrototypeOf,w=x&&x(x(O([])));w&&w!==n&&r.call(w,o)&&(b=w);var S=m.prototype=g.prototype=Object.create(b);function _(t){["next","throw","return"].forEach((function(e){u(t,e,(function(t){return this._invoke(e,t)}))}))}function A(t,e){function n(i,o,a,s){var u=l(t[i],t,o);if("throw"!==u.type){var c=u.arg,f=c.value;return f&&"object"==typeof f&&r.call(f,"__await")?e.resolve(f.__await).then((function(t){n("next",t,a,s)}),(function(t){n("throw",t,a,s)})):e.resolve(f).then((function(t){c.value=t,a(c)}),(function(t){return n("throw",t,a,s)}))}s(u.arg)}var i;this._invoke=function(t,r){function o(){return new e((function(e,i){n(t,r,e,i)}))}return i=i?i.then(o,o):o()}}function M(t,n){var r=t.iterator[n.method];if(r===e){if(n.delegate=null,"throw"===n.method){if(t.iterator.return&&(n.method="return",n.arg=e,M(t,n),"throw"===n.method))return v;n.method="throw",n.arg=new TypeError("The iterator does not provide a 'throw' method")}return v}var i=l(r,t.iterator,n.arg);if("throw"===i.type)return n.method="throw",n.arg=i.arg,n.delegate=null,v;var o=i.arg;return o?o.done?(n[t.resultName]=o.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,v):o:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,v)}function T(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function E(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function k(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(T,this),this.reset(!0)}function O(t){if(t){var n=t[o];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var i=-1,a=function n(){for(;++i<t.length;)if(r.call(t,i))return n.value=t[i],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}return{next:P}}function P(){return{value:e,done:!0}}return y.prototype=S.constructor=m,m.constructor=y,y.displayName=u(m,s,"GeneratorFunction"),t.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===y||"GeneratorFunction"===(e.displayName||e.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,m):(t.__proto__=m,u(t,s,"GeneratorFunction")),t.prototype=Object.create(S),t},t.awrap=function(t){return{__await:t}},_(A.prototype),A.prototype[a]=function(){return this},t.AsyncIterator=A,t.async=function(e,n,r,i,o){void 0===o&&(o=Promise);var a=new A(c(e,n,r,i),o);return t.isGeneratorFunction(n)?a:a.next().then((function(t){return t.done?t.value:a.next()}))},_(S),u(S,s,"Generator"),S[o]=function(){return this},S.toString=function(){return"[object Generator]"},t.keys=function(t){var e=[];for(var n in t)e.push(n);return e.reverse(),function n(){for(;e.length;){var r=e.pop();if(r in t)return n.value=r,n.done=!1,n}return n.done=!0,n}},t.values=O,k.prototype={constructor:k,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(E),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function i(r,i){return s.type="throw",s.arg=t,n.next=r,i&&(n.method="next",n.arg=e),!!i}for(var o=this.tryEntries.length-1;o>=0;--o){var a=this.tryEntries[o],s=a.completion;if("root"===a.tryLoc)return i("end");if(a.tryLoc<=this.prev){var u=r.call(a,"catchLoc"),c=r.call(a,"finallyLoc");if(u&&c){if(this.prev<a.catchLoc)return i(a.catchLoc,!0);if(this.prev<a.finallyLoc)return i(a.finallyLoc)}else if(u){if(this.prev<a.catchLoc)return i(a.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return i(a.finallyLoc)}}}},abrupt:function(t,e){for(var n=this.tryEntries.length-1;n>=0;--n){var i=this.tryEntries[n];if(i.tryLoc<=this.prev&&r.call(i,"finallyLoc")&&this.prev<i.finallyLoc){var o=i;break}}o&&("break"===t||"continue"===t)&&o.tryLoc<=e&&e<=o.finallyLoc&&(o=null);var a=o?o.completion:{};return a.type=t,a.arg=e,o?(this.method="next",this.next=o.finallyLoc,v):this.complete(a)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),v},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.finallyLoc===t)return this.complete(n.completion,n.afterLoc),E(n),v}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.tryLoc===t){var r=n.completion;if("throw"===r.type){var i=r.arg;E(n)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:O(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),v}},t}(t.exports);try{regeneratorRuntime=e}catch(t){Function("r","regeneratorRuntime = r")(e)}}},e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={exports:{}};return t[r](i,i.exports,n),i.exports}n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})};var r={};return(()=>{"use strict";function t(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}n.r(r),n.d(r,{ColorPalette:()=>Wo,ColorUtils:()=>sa,DataNode:()=>e,EuclidianDistanceMetric:()=>mo,Heatmap:()=>Bo,HeatmapSettings:()=>To,MoloReorderer:()=>xo,PearsonCorrelationMetric:()=>Vo,StringUtils:()=>Yo,Sunburst:()=>pa,SunburstSettings:()=>Jo,Transition:()=>io,TreeNode:()=>uo,Treemap:()=>Ea,TreemapSettings:()=>ba,Treeview:()=>Qa,TreeviewSettings:()=>ja,UPGMAClusterer:()=>go});var e=function e(n,r){var i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:[],o=arguments.length>3?arguments[3]:void 0,a=arguments.length>4?arguments[4]:void 0,s=arguments.length>5&&void 0!==arguments[5]?arguments[5]:{};t(this,e),this.id=n,this.name=r,this.children=i,this.count=o,this.selfCount=a,this.extra=s};function i(){}function o(t){return null==t?i:function(){return this.querySelector(t)}}function a(t){return"object"==typeof t&&"length"in t?t:Array.from(t)}function s(){return[]}function u(t){return null==t?s:function(){return this.querySelectorAll(t)}}function c(t){return function(){return this.matches(t)}}function l(t){return function(e){return e.matches(t)}}var f=Array.prototype.find;function h(){return this.firstElementChild}var p=Array.prototype.filter;function d(){return this.children}function v(t){return new Array(t.length)}function g(t,e){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=e}function y(t){return function(){return t}}function m(t,e,n,r,i,o){for(var a,s=0,u=e.length,c=o.length;s<c;++s)(a=e[s])?(a.__data__=o[s],r[s]=a):n[s]=new g(t,o[s]);for(;s<u;++s)(a=e[s])&&(i[s]=a)}function b(t,e,n,r,i,o,a){var s,u,c,l=new Map,f=e.length,h=o.length,p=new Array(f);for(s=0;s<f;++s)(u=e[s])&&(p[s]=c=a.call(u,u.__data__,s,e)+"",l.has(c)?i[s]=u:l.set(c,u));for(s=0;s<h;++s)c=a.call(t,o[s],s,o)+"",(u=l.get(c))?(r[s]=u,u.__data__=o[s],l.delete(c)):n[s]=new g(t,o[s]);for(s=0;s<f;++s)(u=e[s])&&l.get(p[s])===u&&(i[s]=u)}function x(t){return t.__data__}function w(t,e){return t<e?-1:t>e?1:t>=e?0:NaN}g.prototype={constructor:g,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,e){return this._parent.insertBefore(t,e)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};var S="http://www.w3.org/1999/xhtml";const _={svg:"http://www.w3.org/2000/svg",xhtml:S,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"};function A(t){var e=t+="",n=e.indexOf(":");return n>=0&&"xmlns"!==(e=t.slice(0,n))&&(t=t.slice(n+1)),_.hasOwnProperty(e)?{space:_[e],local:t}:t}function M(t){return function(){this.removeAttribute(t)}}function T(t){return function(){this.removeAttributeNS(t.space,t.local)}}function E(t,e){return function(){this.setAttribute(t,e)}}function k(t,e){return function(){this.setAttributeNS(t.space,t.local,e)}}function O(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttribute(t):this.setAttribute(t,n)}}function P(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,n)}}function C(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView}function R(t){return function(){this.style.removeProperty(t)}}function I(t,e,n){return function(){this.style.setProperty(t,e,n)}}function j(t,e,n){return function(){var r=e.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,n)}}function N(t,e){return t.style.getPropertyValue(e)||C(t).getComputedStyle(t,null).getPropertyValue(e)}function L(t){return function(){delete this[t]}}function z(t,e){return function(){this[t]=e}}function D(t,e){return function(){var n=e.apply(this,arguments);null==n?delete this[t]:this[t]=n}}function F(t){return t.trim().split(/^|\s+/)}function U(t){return t.classList||new B(t)}function B(t){this._node=t,this._names=F(t.getAttribute("class")||"")}function q(t,e){for(var n=U(t),r=-1,i=e.length;++r<i;)n.add(e[r])}function V(t,e){for(var n=U(t),r=-1,i=e.length;++r<i;)n.remove(e[r])}function W(t){return function(){q(this,t)}}function H(t){return function(){V(this,t)}}function Y(t,e){return function(){(e.apply(this,arguments)?q:V)(this,t)}}function G(){this.textContent=""}function X(t){return function(){this.textContent=t}}function $(t){return function(){var e=t.apply(this,arguments);this.textContent=null==e?"":e}}function Z(){this.innerHTML=""}function K(t){return function(){this.innerHTML=t}}function J(t){return function(){var e=t.apply(this,arguments);this.innerHTML=null==e?"":e}}function Q(){this.nextSibling&&this.parentNode.appendChild(this)}function tt(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function et(t){return function(){var e=this.ownerDocument,n=this.namespaceURI;return n===S&&e.documentElement.namespaceURI===S?e.createElement(t):e.createElementNS(n,t)}}function nt(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}function rt(t){var e=A(t);return(e.local?nt:et)(e)}function it(){return null}function ot(){var t=this.parentNode;t&&t.removeChild(this)}function at(){var t=this.cloneNode(!1),e=this.parentNode;return e?e.insertBefore(t,this.nextSibling):t}function st(){var t=this.cloneNode(!0),e=this.parentNode;return e?e.insertBefore(t,this.nextSibling):t}function ut(t){return t.trim().split(/^|\s+/).map((function(t){var e="",n=t.indexOf(".");return n>=0&&(e=t.slice(n+1),t=t.slice(0,n)),{type:t,name:e}}))}function ct(t){return function(){var e=this.__on;if(e){for(var n,r=0,i=-1,o=e.length;r<o;++r)n=e[r],t.type&&n.type!==t.type||n.name!==t.name?e[++i]=n:this.removeEventListener(n.type,n.listener,n.options);++i?e.length=i:delete this.__on}}}function lt(t,e,n){return function(){var r,i=this.__on,o=function(t){return function(e){t.call(this,e,this.__data__)}}(e);if(i)for(var a=0,s=i.length;a<s;++a)if((r=i[a]).type===t.type&&r.name===t.name)return this.removeEventListener(r.type,r.listener,r.options),this.addEventListener(r.type,r.listener=o,r.options=n),void(r.value=e);this.addEventListener(t.type,o,n),r={type:t.type,name:t.name,value:e,listener:o,options:n},i?i.push(r):this.__on=[r]}}function ft(t,e,n){var r=C(t),i=r.CustomEvent;"function"==typeof i?i=new i(e,n):(i=r.document.createEvent("Event"),n?(i.initEvent(e,n.bubbles,n.cancelable),i.detail=n.detail):i.initEvent(e,!1,!1)),t.dispatchEvent(i)}function ht(t,e){return function(){return ft(this,t,e)}}function pt(t,e){return function(){return ft(this,t,e.apply(this,arguments))}}B.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var e=this._names.indexOf(t);e>=0&&(this._names.splice(e,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};var dt=[null];function vt(t,e){this._groups=t,this._parents=e}function gt(){return new vt([[document.documentElement]],dt)}vt.prototype=gt.prototype={constructor:vt,select:function(t){"function"!=typeof t&&(t=o(t));for(var e=this._groups,n=e.length,r=new Array(n),i=0;i<n;++i)for(var a,s,u=e[i],c=u.length,l=r[i]=new Array(c),f=0;f<c;++f)(a=u[f])&&(s=t.call(a,a.__data__,f,u))&&("__data__"in a&&(s.__data__=a.__data__),l[f]=s);return new vt(r,this._parents)},selectAll:function(t){t="function"==typeof t?function(t){return function(){var e=t.apply(this,arguments);return null==e?[]:a(e)}}(t):u(t);for(var e=this._groups,n=e.length,r=[],i=[],o=0;o<n;++o)for(var s,c=e[o],l=c.length,f=0;f<l;++f)(s=c[f])&&(r.push(t.call(s,s.__data__,f,c)),i.push(s));return new vt(r,i)},selectChild:function(t){return this.select(null==t?h:function(t){return function(){return f.call(this.children,t)}}("function"==typeof t?t:l(t)))},selectChildren:function(t){return this.selectAll(null==t?d:function(t){return function(){return p.call(this.children,t)}}("function"==typeof t?t:l(t)))},filter:function(t){"function"!=typeof t&&(t=c(t));for(var e=this._groups,n=e.length,r=new Array(n),i=0;i<n;++i)for(var o,a=e[i],s=a.length,u=r[i]=[],l=0;l<s;++l)(o=a[l])&&t.call(o,o.__data__,l,a)&&u.push(o);return new vt(r,this._parents)},data:function(t,e){if(!arguments.length)return Array.from(this,x);var n=e?b:m,r=this._parents,i=this._groups;"function"!=typeof t&&(t=y(t));for(var o=i.length,s=new Array(o),u=new Array(o),c=new Array(o),l=0;l<o;++l){var f=r[l],h=i[l],p=h.length,d=a(t.call(f,f&&f.__data__,l,r)),v=d.length,g=u[l]=new Array(v),w=s[l]=new Array(v),S=c[l]=new Array(p);n(f,h,g,w,S,d,e);for(var _,A,M=0,T=0;M<v;++M)if(_=g[M]){for(M>=T&&(T=M+1);!(A=w[T])&&++T<v;);_._next=A||null}}return(s=new vt(s,r))._enter=u,s._exit=c,s},enter:function(){return new vt(this._enter||this._groups.map(v),this._parents)},exit:function(){return new vt(this._exit||this._groups.map(v),this._parents)},join:function(t,e,n){var r=this.enter(),i=this,o=this.exit();return r="function"==typeof t?t(r):r.append(t+""),null!=e&&(i=e(i)),null==n?o.remove():n(o),r&&i?r.merge(i).order():i},merge:function(t){if(!(t instanceof vt))throw new Error("invalid merge");for(var e=this._groups,n=t._groups,r=e.length,i=n.length,o=Math.min(r,i),a=new Array(r),s=0;s<o;++s)for(var u,c=e[s],l=n[s],f=c.length,h=a[s]=new Array(f),p=0;p<f;++p)(u=c[p]||l[p])&&(h[p]=u);for(;s<r;++s)a[s]=e[s];return new vt(a,this._parents)},selection:function(){return this},order:function(){for(var t=this._groups,e=-1,n=t.length;++e<n;)for(var r,i=t[e],o=i.length-1,a=i[o];--o>=0;)(r=i[o])&&(a&&4^r.compareDocumentPosition(a)&&a.parentNode.insertBefore(r,a),a=r);return this},sort:function(t){function e(e,n){return e&&n?t(e.__data__,n.__data__):!e-!n}t||(t=w);for(var n=this._groups,r=n.length,i=new Array(r),o=0;o<r;++o){for(var a,s=n[o],u=s.length,c=i[o]=new Array(u),l=0;l<u;++l)(a=s[l])&&(c[l]=a);c.sort(e)}return new vt(i,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){return Array.from(this)},node:function(){for(var t=this._groups,e=0,n=t.length;e<n;++e)for(var r=t[e],i=0,o=r.length;i<o;++i){var a=r[i];if(a)return a}return null},size:function(){let t=0;for(const e of this)++t;return t},empty:function(){return!this.node()},each:function(t){for(var e=this._groups,n=0,r=e.length;n<r;++n)for(var i,o=e[n],a=0,s=o.length;a<s;++a)(i=o[a])&&t.call(i,i.__data__,a,o);return this},attr:function(t,e){var n=A(t);if(arguments.length<2){var r=this.node();return n.local?r.getAttributeNS(n.space,n.local):r.getAttribute(n)}return this.each((null==e?n.local?T:M:"function"==typeof e?n.local?P:O:n.local?k:E)(n,e))},style:function(t,e,n){return arguments.length>1?this.each((null==e?R:"function"==typeof e?j:I)(t,e,null==n?"":n)):N(this.node(),t)},property:function(t,e){return arguments.length>1?this.each((null==e?L:"function"==typeof e?D:z)(t,e)):this.node()[t]},classed:function(t,e){var n=F(t+"");if(arguments.length<2){for(var r=U(this.node()),i=-1,o=n.length;++i<o;)if(!r.contains(n[i]))return!1;return!0}return this.each(("function"==typeof e?Y:e?W:H)(n,e))},text:function(t){return arguments.length?this.each(null==t?G:("function"==typeof t?$:X)(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?Z:("function"==typeof t?J:K)(t)):this.node().innerHTML},raise:function(){return this.each(Q)},lower:function(){return this.each(tt)},append:function(t){var e="function"==typeof t?t:rt(t);return this.select((function(){return this.appendChild(e.apply(this,arguments))}))},insert:function(t,e){var n="function"==typeof t?t:rt(t),r=null==e?it:"function"==typeof e?e:o(e);return this.select((function(){return this.insertBefore(n.apply(this,arguments),r.apply(this,arguments)||null)}))},remove:function(){return this.each(ot)},clone:function(t){return this.select(t?st:at)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,e,n){var r,i,o=ut(t+""),a=o.length;if(!(arguments.length<2)){for(s=e?lt:ct,r=0;r<a;++r)this.each(s(o[r],e,n));return this}var s=this.node().__on;if(s)for(var u,c=0,l=s.length;c<l;++c)for(r=0,u=s[c];r<a;++r)if((i=o[r]).type===u.type&&i.name===u.name)return u.value},dispatch:function(t,e){return this.each(("function"==typeof e?pt:ht)(t,e))},[Symbol.iterator]:function*(){for(var t=this._groups,e=0,n=t.length;e<n;++e)for(var r,i=t[e],o=0,a=i.length;o<a;++o)(r=i[o])&&(yield r)}};const yt=gt;var mt={value:()=>{}};function bt(){for(var t,e=0,n=arguments.length,r={};e<n;++e){if(!(t=arguments[e]+"")||t in r||/[\s.]/.test(t))throw new Error("illegal type: "+t);r[t]=[]}return new xt(r)}function xt(t){this._=t}function wt(t,e){return t.trim().split(/^|\s+/).map((function(t){var n="",r=t.indexOf(".");if(r>=0&&(n=t.slice(r+1),t=t.slice(0,r)),t&&!e.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:n}}))}function St(t,e){for(var n,r=0,i=t.length;r<i;++r)if((n=t[r]).name===e)return n.value}function _t(t,e,n){for(var r=0,i=t.length;r<i;++r)if(t[r].name===e){t[r]=mt,t=t.slice(0,r).concat(t.slice(r+1));break}return null!=n&&t.push({name:e,value:n}),t}xt.prototype=bt.prototype={constructor:xt,on:function(t,e){var n,r=this._,i=wt(t+"",r),o=-1,a=i.length;if(!(arguments.length<2)){if(null!=e&&"function"!=typeof e)throw new Error("invalid callback: "+e);for(;++o<a;)if(n=(t=i[o]).type)r[n]=_t(r[n],t.name,e);else if(null==e)for(n in r)r[n]=_t(r[n],t.name,null);return this}for(;++o<a;)if((n=(t=i[o]).type)&&(n=St(r[n],t.name)))return n},copy:function(){var t={},e=this._;for(var n in e)t[n]=e[n].slice();return new xt(t)},call:function(t,e){if((n=arguments.length-2)>0)for(var n,r,i=new Array(n),o=0;o<n;++o)i[o]=arguments[o+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(o=0,n=(r=this._[t]).length;o<n;++o)r[o].value.apply(e,i)},apply:function(t,e,n){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var r=this._[t],i=0,o=r.length;i<o;++i)r[i].value.apply(e,n)}};const At=bt;var Mt,Tt,Et=0,kt=0,Ot=0,Pt=0,Ct=0,Rt=0,It="object"==typeof performance&&performance.now?performance:Date,jt="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function Nt(){return Ct||(jt(Lt),Ct=It.now()+Rt)}function Lt(){Ct=0}function zt(){this._call=this._time=this._next=null}function Dt(t,e,n){var r=new zt;return r.restart(t,e,n),r}function Ft(){Ct=(Pt=It.now())+Rt,Et=kt=0;try{!function(){Nt(),++Et;for(var t,e=Mt;e;)(t=Ct-e._time)>=0&&e._call.call(null,t),e=e._next;--Et}()}finally{Et=0,function(){for(var t,e,n=Mt,r=1/0;n;)n._call?(r>n._time&&(r=n._time),t=n,n=n._next):(e=n._next,n._next=null,n=t?t._next=e:Mt=e);Tt=t,Bt(r)}(),Ct=0}}function Ut(){var t=It.now(),e=t-Pt;e>1e3&&(Rt-=e,Pt=t)}function Bt(t){Et||(kt&&(kt=clearTimeout(kt)),t-Ct>24?(t<1/0&&(kt=setTimeout(Ft,t-It.now()-Rt)),Ot&&(Ot=clearInterval(Ot))):(Ot||(Pt=It.now(),Ot=setInterval(Ut,1e3)),Et=1,jt(Ft)))}function qt(t,e,n){var r=new zt;return e=null==e?0:+e,r.restart((n=>{r.stop(),t(n+e)}),e,n),r}zt.prototype=Dt.prototype={constructor:zt,restart:function(t,e,n){if("function"!=typeof t)throw new TypeError("callback is not a function");n=(null==n?Nt():+n)+(null==e?0:+e),this._next||Tt===this||(Tt?Tt._next=this:Mt=this,Tt=this),this._call=t,this._time=n,Bt()},stop:function(){this._call&&(this._call=null,this._time=1/0,Bt())}};var Vt=At("start","end","cancel","interrupt"),Wt=[];function Ht(t,e,n,r,i,o){var a=t.__transition;if(a){if(n in a)return}else t.__transition={};!function(t,e,n){var r,i=t.__transition;function o(u){var c,l,f,h;if(1!==n.state)return s();for(c in i)if((h=i[c]).name===n.name){if(3===h.state)return qt(o);4===h.state?(h.state=6,h.timer.stop(),h.on.call("interrupt",t,t.__data__,h.index,h.group),delete i[c]):+c<e&&(h.state=6,h.timer.stop(),h.on.call("cancel",t,t.__data__,h.index,h.group),delete i[c])}if(qt((function(){3===n.state&&(n.state=4,n.timer.restart(a,n.delay,n.time),a(u))})),n.state=2,n.on.call("start",t,t.__data__,n.index,n.group),2===n.state){for(n.state=3,r=new Array(f=n.tween.length),c=0,l=-1;c<f;++c)(h=n.tween[c].value.call(t,t.__data__,n.index,n.group))&&(r[++l]=h);r.length=l+1}}function a(e){for(var i=e<n.duration?n.ease.call(null,e/n.duration):(n.timer.restart(s),n.state=5,1),o=-1,a=r.length;++o<a;)r[o].call(t,i);5===n.state&&(n.on.call("end",t,t.__data__,n.index,n.group),s())}function s(){for(var r in n.state=6,n.timer.stop(),delete i[e],i)return;delete t.__transition}i[e]=n,n.timer=Dt((function(t){n.state=1,n.timer.restart(o,n.delay,n.time),n.delay<=t&&o(t-n.delay)}),0,n.time)}(t,n,{name:e,index:r,group:i,on:Vt,tween:Wt,time:o.time,delay:o.delay,duration:o.duration,ease:o.ease,timer:null,state:0})}function Yt(t,e){var n=Xt(t,e);if(n.state>0)throw new Error("too late; already scheduled");return n}function Gt(t,e){var n=Xt(t,e);if(n.state>3)throw new Error("too late; already running");return n}function Xt(t,e){var n=t.__transition;if(!n||!(n=n[e]))throw new Error("transition not found");return n}function $t(t,e){var n,r,i,o=t.__transition,a=!0;if(o){for(i in e=null==e?null:e+"",o)(n=o[i]).name===e?(r=n.state>2&&n.state<5,n.state=6,n.timer.stop(),n.on.call(r?"interrupt":"cancel",t,t.__data__,n.index,n.group),delete o[i]):a=!1;a&&delete t.__transition}}function Zt(t,e){return t=+t,e=+e,function(n){return t*(1-n)+e*n}}var Kt,Jt=180/Math.PI,Qt={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1};function te(t,e,n,r,i,o){var a,s,u;return(a=Math.sqrt(t*t+e*e))&&(t/=a,e/=a),(u=t*n+e*r)&&(n-=t*u,r-=e*u),(s=Math.sqrt(n*n+r*r))&&(n/=s,r/=s,u/=s),t*r<e*n&&(t=-t,e=-e,u=-u,a=-a),{translateX:i,translateY:o,rotate:Math.atan2(e,t)*Jt,skewX:Math.atan(u)*Jt,scaleX:a,scaleY:s}}function ee(t,e,n,r){function i(t){return t.length?t.pop()+" ":""}return function(o,a){var s=[],u=[];return o=t(o),a=t(a),function(t,r,i,o,a,s){if(t!==i||r!==o){var u=a.push("translate(",null,e,null,n);s.push({i:u-4,x:Zt(t,i)},{i:u-2,x:Zt(r,o)})}else(i||o)&&a.push("translate("+i+e+o+n)}(o.translateX,o.translateY,a.translateX,a.translateY,s,u),function(t,e,n,o){t!==e?(t-e>180?e+=360:e-t>180&&(t+=360),o.push({i:n.push(i(n)+"rotate(",null,r)-2,x:Zt(t,e)})):e&&n.push(i(n)+"rotate("+e+r)}(o.rotate,a.rotate,s,u),function(t,e,n,o){t!==e?o.push({i:n.push(i(n)+"skewX(",null,r)-2,x:Zt(t,e)}):e&&n.push(i(n)+"skewX("+e+r)}(o.skewX,a.skewX,s,u),function(t,e,n,r,o,a){if(t!==n||e!==r){var s=o.push(i(o)+"scale(",null,",",null,")");a.push({i:s-4,x:Zt(t,n)},{i:s-2,x:Zt(e,r)})}else 1===n&&1===r||o.push(i(o)+"scale("+n+","+r+")")}(o.scaleX,o.scaleY,a.scaleX,a.scaleY,s,u),o=a=null,function(t){for(var e,n=-1,r=u.length;++n<r;)s[(e=u[n]).i]=e.x(t);return s.join("")}}}var ne=ee((function(t){const e=new("function"==typeof DOMMatrix?DOMMatrix:WebKitCSSMatrix)(t+"");return e.isIdentity?Qt:te(e.a,e.b,e.c,e.d,e.e,e.f)}),"px, ","px)","deg)"),re=ee((function(t){return null==t?Qt:(Kt||(Kt=document.createElementNS("http://www.w3.org/2000/svg","g")),Kt.setAttribute("transform",t),(t=Kt.transform.baseVal.consolidate())?te((t=t.matrix).a,t.b,t.c,t.d,t.e,t.f):Qt)}),", ",")",")");function ie(t,e){var n,r;return function(){var i=Gt(this,t),o=i.tween;if(o!==n)for(var a=0,s=(r=n=o).length;a<s;++a)if(r[a].name===e){(r=r.slice()).splice(a,1);break}i.tween=r}}function oe(t,e,n){var r,i;if("function"!=typeof n)throw new Error;return function(){var o=Gt(this,t),a=o.tween;if(a!==r){i=(r=a).slice();for(var s={name:e,value:n},u=0,c=i.length;u<c;++u)if(i[u].name===e){i[u]=s;break}u===c&&i.push(s)}o.tween=i}}function ae(t,e,n){var r=t._id;return t.each((function(){var t=Gt(this,r);(t.value||(t.value={}))[e]=n.apply(this,arguments)})),function(t){return Xt(t,r).value[e]}}function se(t,e,n){t.prototype=e.prototype=n,n.constructor=t}function ue(t,e){var n=Object.create(t.prototype);for(var r in e)n[r]=e[r];return n}function ce(){}var le=.7,fe=1/le,he="\\s*([+-]?\\d+)\\s*",pe="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",de="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",ve=/^#([0-9a-f]{3,8})$/,ge=new RegExp("^rgb\\("+[he,he,he]+"\\)$"),ye=new RegExp("^rgb\\("+[de,de,de]+"\\)$"),me=new RegExp("^rgba\\("+[he,he,he,pe]+"\\)$"),be=new RegExp("^rgba\\("+[de,de,de,pe]+"\\)$"),xe=new RegExp("^hsl\\("+[pe,de,de]+"\\)$"),we=new RegExp("^hsla\\("+[pe,de,de,pe]+"\\)$"),Se={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function _e(){return this.rgb().formatHex()}function Ae(){return this.rgb().formatRgb()}function Me(t){var e,n;return t=(t+"").trim().toLowerCase(),(e=ve.exec(t))?(n=e[1].length,e=parseInt(e[1],16),6===n?Te(e):3===n?new Pe(e>>8&15|e>>4&240,e>>4&15|240&e,(15&e)<<4|15&e,1):8===n?Ee(e>>24&255,e>>16&255,e>>8&255,(255&e)/255):4===n?Ee(e>>12&15|e>>8&240,e>>8&15|e>>4&240,e>>4&15|240&e,((15&e)<<4|15&e)/255):null):(e=ge.exec(t))?new Pe(e[1],e[2],e[3],1):(e=ye.exec(t))?new Pe(255*e[1]/100,255*e[2]/100,255*e[3]/100,1):(e=me.exec(t))?Ee(e[1],e[2],e[3],e[4]):(e=be.exec(t))?Ee(255*e[1]/100,255*e[2]/100,255*e[3]/100,e[4]):(e=xe.exec(t))?je(e[1],e[2]/100,e[3]/100,1):(e=we.exec(t))?je(e[1],e[2]/100,e[3]/100,e[4]):Se.hasOwnProperty(t)?Te(Se[t]):"transparent"===t?new Pe(NaN,NaN,NaN,0):null}function Te(t){return new Pe(t>>16&255,t>>8&255,255&t,1)}function Ee(t,e,n,r){return r<=0&&(t=e=n=NaN),new Pe(t,e,n,r)}function ke(t){return t instanceof ce||(t=Me(t)),t?new Pe((t=t.rgb()).r,t.g,t.b,t.opacity):new Pe}function Oe(t,e,n,r){return 1===arguments.length?ke(t):new Pe(t,e,n,null==r?1:r)}function Pe(t,e,n,r){this.r=+t,this.g=+e,this.b=+n,this.opacity=+r}function Ce(){return"#"+Ie(this.r)+Ie(this.g)+Ie(this.b)}function Re(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}function Ie(t){return((t=Math.max(0,Math.min(255,Math.round(t)||0)))<16?"0":"")+t.toString(16)}function je(t,e,n,r){return r<=0?t=e=n=NaN:n<=0||n>=1?t=e=NaN:e<=0&&(t=NaN),new ze(t,e,n,r)}function Ne(t){if(t instanceof ze)return new ze(t.h,t.s,t.l,t.opacity);if(t instanceof ce||(t=Me(t)),!t)return new ze;if(t instanceof ze)return t;var e=(t=t.rgb()).r/255,n=t.g/255,r=t.b/255,i=Math.min(e,n,r),o=Math.max(e,n,r),a=NaN,s=o-i,u=(o+i)/2;return s?(a=e===o?(n-r)/s+6*(n<r):n===o?(r-e)/s+2:(e-n)/s+4,s/=u<.5?o+i:2-o-i,a*=60):s=u>0&&u<1?0:a,new ze(a,s,u,t.opacity)}function Le(t,e,n,r){return 1===arguments.length?Ne(t):new ze(t,e,n,null==r?1:r)}function ze(t,e,n,r){this.h=+t,this.s=+e,this.l=+n,this.opacity=+r}function De(t,e,n){return 255*(t<60?e+(n-e)*t/60:t<180?n:t<240?e+(n-e)*(240-t)/60:e)}function Fe(t,e,n,r,i){var o=t*t,a=o*t;return((1-3*t+3*o-a)*e+(4-6*o+3*a)*n+(1+3*t+3*o-3*a)*r+a*i)/6}se(ce,Me,{copy:function(t){return Object.assign(new this.constructor,this,t)},displayable:function(){return this.rgb().displayable()},hex:_e,formatHex:_e,formatHsl:function(){return Ne(this).formatHsl()},formatRgb:Ae,toString:Ae}),se(Pe,Oe,ue(ce,{brighter:function(t){return t=null==t?fe:Math.pow(fe,t),new Pe(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?le:Math.pow(le,t),new Pe(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return-.5<=this.r&&this.r<255.5&&-.5<=this.g&&this.g<255.5&&-.5<=this.b&&this.b<255.5&&0<=this.opacity&&this.opacity<=1},hex:Ce,formatHex:Ce,formatRgb:Re,toString:Re})),se(ze,Le,ue(ce,{brighter:function(t){return t=null==t?fe:Math.pow(fe,t),new ze(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?le:Math.pow(le,t),new ze(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),e=isNaN(t)||isNaN(this.s)?0:this.s,n=this.l,r=n+(n<.5?n:1-n)*e,i=2*n-r;return new Pe(De(t>=240?t-240:t+120,i,r),De(t,i,r),De(t<120?t+240:t-120,i,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1},formatHsl:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"hsl(":"hsla(")+(this.h||0)+", "+100*(this.s||0)+"%, "+100*(this.l||0)+"%"+(1===t?")":", "+t+")")}}));const Ue=t=>()=>t;function Be(t,e){var n=e-t;return n?function(t,e){return function(n){return t+n*e}}(t,n):Ue(isNaN(t)?e:t)}const qe=function t(e){var n=function(t){return 1==(t=+t)?Be:function(e,n){return n-e?function(t,e,n){return t=Math.pow(t,n),e=Math.pow(e,n)-t,n=1/n,function(r){return Math.pow(t+r*e,n)}}(e,n,t):Ue(isNaN(e)?n:e)}}(e);function r(t,e){var r=n((t=Oe(t)).r,(e=Oe(e)).r),i=n(t.g,e.g),o=n(t.b,e.b),a=Be(t.opacity,e.opacity);return function(e){return t.r=r(e),t.g=i(e),t.b=o(e),t.opacity=a(e),t+""}}return r.gamma=t,r}(1);function Ve(t){return function(e){var n,r,i=e.length,o=new Array(i),a=new Array(i),s=new Array(i);for(n=0;n<i;++n)r=Oe(e[n]),o[n]=r.r||0,a[n]=r.g||0,s[n]=r.b||0;return o=t(o),a=t(a),s=t(s),r.opacity=1,function(t){return r.r=o(t),r.g=a(t),r.b=s(t),r+""}}}Ve((function(t){var e=t.length-1;return function(n){var r=n<=0?n=0:n>=1?(n=1,e-1):Math.floor(n*e),i=t[r],o=t[r+1],a=r>0?t[r-1]:2*i-o,s=r<e-1?t[r+2]:2*o-i;return Fe((n-r/e)*e,a,i,o,s)}})),Ve((function(t){var e=t.length;return function(n){var r=Math.floor(((n%=1)<0?++n:n)*e),i=t[(r+e-1)%e],o=t[r%e],a=t[(r+1)%e],s=t[(r+2)%e];return Fe((n-r/e)*e,i,o,a,s)}}));var We=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,He=new RegExp(We.source,"g");function Ye(t,e){var n,r,i,o=We.lastIndex=He.lastIndex=0,a=-1,s=[],u=[];for(t+="",e+="";(n=We.exec(t))&&(r=He.exec(e));)(i=r.index)>o&&(i=e.slice(o,i),s[a]?s[a]+=i:s[++a]=i),(n=n[0])===(r=r[0])?s[a]?s[a]+=r:s[++a]=r:(s[++a]=null,u.push({i:a,x:Zt(n,r)})),o=He.lastIndex;return o<e.length&&(i=e.slice(o),s[a]?s[a]+=i:s[++a]=i),s.length<2?u[0]?function(t){return function(e){return t(e)+""}}(u[0].x):function(t){return function(){return t}}(e):(e=u.length,function(t){for(var n,r=0;r<e;++r)s[(n=u[r]).i]=n.x(t);return s.join("")})}function Ge(t,e){var n;return("number"==typeof e?Zt:e instanceof Me?qe:(n=Me(e))?(e=n,qe):Ye)(t,e)}function Xe(t){return function(){this.removeAttribute(t)}}function $e(t){return function(){this.removeAttributeNS(t.space,t.local)}}function Ze(t,e,n){var r,i,o=n+"";return function(){var a=this.getAttribute(t);return a===o?null:a===r?i:i=e(r=a,n)}}function Ke(t,e,n){var r,i,o=n+"";return function(){var a=this.getAttributeNS(t.space,t.local);return a===o?null:a===r?i:i=e(r=a,n)}}function Je(t,e,n){var r,i,o;return function(){var a,s,u=n(this);if(null!=u)return(a=this.getAttribute(t))===(s=u+"")?null:a===r&&s===i?o:(i=s,o=e(r=a,u));this.removeAttribute(t)}}function Qe(t,e,n){var r,i,o;return function(){var a,s,u=n(this);if(null!=u)return(a=this.getAttributeNS(t.space,t.local))===(s=u+"")?null:a===r&&s===i?o:(i=s,o=e(r=a,u));this.removeAttributeNS(t.space,t.local)}}function tn(t,e){return function(n){this.setAttribute(t,e.call(this,n))}}function en(t,e){return function(n){this.setAttributeNS(t.space,t.local,e.call(this,n))}}function nn(t,e){var n,r;function i(){var i=e.apply(this,arguments);return i!==r&&(n=(r=i)&&en(t,i)),n}return i._value=e,i}function rn(t,e){var n,r;function i(){var i=e.apply(this,arguments);return i!==r&&(n=(r=i)&&tn(t,i)),n}return i._value=e,i}function on(t,e){return function(){Yt(this,t).delay=+e.apply(this,arguments)}}function an(t,e){return e=+e,function(){Yt(this,t).delay=e}}function sn(t,e){return function(){Gt(this,t).duration=+e.apply(this,arguments)}}function un(t,e){return e=+e,function(){Gt(this,t).duration=e}}function cn(t,e){if("function"!=typeof e)throw new Error;return function(){Gt(this,t).ease=e}}function ln(t,e,n){var r,i,o=function(t){return(t+"").trim().split(/^|\s+/).every((function(t){var e=t.indexOf(".");return e>=0&&(t=t.slice(0,e)),!t||"start"===t}))}(e)?Yt:Gt;return function(){var a=o(this,t),s=a.on;s!==r&&(i=(r=s).copy()).on(e,n),a.on=i}}var fn=yt.prototype.constructor;function hn(t){return function(){this.style.removeProperty(t)}}function pn(t,e,n){return function(r){this.style.setProperty(t,e.call(this,r),n)}}function dn(t,e,n){var r,i;function o(){var o=e.apply(this,arguments);return o!==i&&(r=(i=o)&&pn(t,o,n)),r}return o._value=e,o}function vn(t){return function(e){this.textContent=t.call(this,e)}}function gn(t){var e,n;function r(){var r=t.apply(this,arguments);return r!==n&&(e=(n=r)&&vn(r)),e}return r._value=t,r}var yn=0;function mn(t,e,n,r){this._groups=t,this._parents=e,this._name=n,this._id=r}function bn(){return++yn}var xn=yt.prototype;mn.prototype=function(t){return yt().transition(t)}.prototype={constructor:mn,select:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=o(t));for(var r=this._groups,i=r.length,a=new Array(i),s=0;s<i;++s)for(var u,c,l=r[s],f=l.length,h=a[s]=new Array(f),p=0;p<f;++p)(u=l[p])&&(c=t.call(u,u.__data__,p,l))&&("__data__"in u&&(c.__data__=u.__data__),h[p]=c,Ht(h[p],e,n,p,h,Xt(u,n)));return new mn(a,this._parents,e,n)},selectAll:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=u(t));for(var r=this._groups,i=r.length,o=[],a=[],s=0;s<i;++s)for(var c,l=r[s],f=l.length,h=0;h<f;++h)if(c=l[h]){for(var p,d=t.call(c,c.__data__,h,l),v=Xt(c,n),g=0,y=d.length;g<y;++g)(p=d[g])&&Ht(p,e,n,g,d,v);o.push(d),a.push(c)}return new mn(o,a,e,n)},filter:function(t){"function"!=typeof t&&(t=c(t));for(var e=this._groups,n=e.length,r=new Array(n),i=0;i<n;++i)for(var o,a=e[i],s=a.length,u=r[i]=[],l=0;l<s;++l)(o=a[l])&&t.call(o,o.__data__,l,a)&&u.push(o);return new mn(r,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var e=this._groups,n=t._groups,r=e.length,i=n.length,o=Math.min(r,i),a=new Array(r),s=0;s<o;++s)for(var u,c=e[s],l=n[s],f=c.length,h=a[s]=new Array(f),p=0;p<f;++p)(u=c[p]||l[p])&&(h[p]=u);for(;s<r;++s)a[s]=e[s];return new mn(a,this._parents,this._name,this._id)},selection:function(){return new fn(this._groups,this._parents)},transition:function(){for(var t=this._name,e=this._id,n=bn(),r=this._groups,i=r.length,o=0;o<i;++o)for(var a,s=r[o],u=s.length,c=0;c<u;++c)if(a=s[c]){var l=Xt(a,e);Ht(a,t,n,c,s,{time:l.time+l.delay+l.duration,delay:0,duration:l.duration,ease:l.ease})}return new mn(r,this._parents,t,n)},call:xn.call,nodes:xn.nodes,node:xn.node,size:xn.size,empty:xn.empty,each:xn.each,on:function(t,e){var n=this._id;return arguments.length<2?Xt(this.node(),n).on.on(t):this.each(ln(n,t,e))},attr:function(t,e){var n=A(t),r="transform"===n?re:Ge;return this.attrTween(t,"function"==typeof e?(n.local?Qe:Je)(n,r,ae(this,"attr."+t,e)):null==e?(n.local?$e:Xe)(n):(n.local?Ke:Ze)(n,r,e))},attrTween:function(t,e){var n="attr."+t;if(arguments.length<2)return(n=this.tween(n))&&n._value;if(null==e)return this.tween(n,null);if("function"!=typeof e)throw new Error;var r=A(t);return this.tween(n,(r.local?nn:rn)(r,e))},style:function(t,e,n){var r="transform"==(t+="")?ne:Ge;return null==e?this.styleTween(t,function(t,e){var n,r,i;return function(){var o=N(this,t),a=(this.style.removeProperty(t),N(this,t));return o===a?null:o===n&&a===r?i:i=e(n=o,r=a)}}(t,r)).on("end.style."+t,hn(t)):"function"==typeof e?this.styleTween(t,function(t,e,n){var r,i,o;return function(){var a=N(this,t),s=n(this),u=s+"";return null==s&&(this.style.removeProperty(t),u=s=N(this,t)),a===u?null:a===r&&u===i?o:(i=u,o=e(r=a,s))}}(t,r,ae(this,"style."+t,e))).each(function(t,e){var n,r,i,o,a="style."+e,s="end."+a;return function(){var u=Gt(this,t),c=u.on,l=null==u.value[a]?o||(o=hn(e)):void 0;c===n&&i===l||(r=(n=c).copy()).on(s,i=l),u.on=r}}(this._id,t)):this.styleTween(t,function(t,e,n){var r,i,o=n+"";return function(){var a=N(this,t);return a===o?null:a===r?i:i=e(r=a,n)}}(t,r,e),n).on("end.style."+t,null)},styleTween:function(t,e,n){var r="style."+(t+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==e)return this.tween(r,null);if("function"!=typeof e)throw new Error;return this.tween(r,dn(t,e,null==n?"":n))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var e=t(this);this.textContent=null==e?"":e}}(ae(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},textTween:function(t){var e="text";if(arguments.length<1)return(e=this.tween(e))&&e._value;if(null==t)return this.tween(e,null);if("function"!=typeof t)throw new Error;return this.tween(e,gn(t))},remove:function(){return this.on("end.remove",function(t){return function(){var e=this.parentNode;for(var n in this.__transition)if(+n!==t)return;e&&e.removeChild(this)}}(this._id))},tween:function(t,e){var n=this._id;if(t+="",arguments.length<2){for(var r,i=Xt(this.node(),n).tween,o=0,a=i.length;o<a;++o)if((r=i[o]).name===t)return r.value;return null}return this.each((null==e?ie:oe)(n,t,e))},delay:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?on:an)(e,t)):Xt(this.node(),e).delay},duration:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?sn:un)(e,t)):Xt(this.node(),e).duration},ease:function(t){var e=this._id;return arguments.length?this.each(cn(e,t)):Xt(this.node(),e).ease},easeVarying:function(t){if("function"!=typeof t)throw new Error;return this.each(function(t,e){return function(){var n=e.apply(this,arguments);if("function"!=typeof n)throw new Error;Gt(this,t).ease=n}}(this._id,t))},end:function(){var t,e,n=this,r=n._id,i=n.size();return new Promise((function(o,a){var s={value:a},u={value:function(){0==--i&&o()}};n.each((function(){var n=Gt(this,r),i=n.on;i!==t&&((e=(t=i).copy())._.cancel.push(s),e._.interrupt.push(s),e._.end.push(u)),n.on=e})),0===i&&o()}))},[Symbol.iterator]:xn[Symbol.iterator]};var wn={time:null,delay:0,duration:250,ease:function(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}};function Sn(t,e){for(var n;!(n=t.__transition)||!(n=n[e]);)if(!(t=t.parentNode))throw new Error(`transition ${e} not found`);return n}yt.prototype.interrupt=function(t){return this.each((function(){$t(this,t)}))},yt.prototype.transition=function(t){var e,n;t instanceof mn?(e=t._id,t=t._name):(e=bn(),(n=wn).time=Nt(),t=null==t?null:t+"");for(var r=this._groups,i=r.length,o=0;o<i;++o)for(var a,s=r[o],u=s.length,c=0;c<u;++c)(a=s[c])&&Ht(a,t,e,c,s,n||Sn(a,e));return new mn(r,this._parents,t,e)};const{abs:_n,max:An,min:Mn}=Math;function Tn(t){return{type:t}}["w","e"].map(Tn),["n","s"].map(Tn),["n","w","e","s","nw","ne","sw","se"].map(Tn);const En=Math.PI/180,kn=180/Math.PI,On=.96422,Pn=.82521,Cn=4/29,Rn=6/29,In=3*Rn*Rn;function jn(t){if(t instanceof Ln)return new Ln(t.l,t.a,t.b,t.opacity);if(t instanceof qn)return Vn(t);t instanceof Pe||(t=ke(t));var e,n,r=Un(t.r),i=Un(t.g),o=Un(t.b),a=zn((.2225045*r+.7168786*i+.0606169*o)/1);return r===i&&i===o?e=n=a:(e=zn((.4360747*r+.3850649*i+.1430804*o)/On),n=zn((.0139322*r+.0971045*i+.7141733*o)/Pn)),new Ln(116*a-16,500*(e-a),200*(a-n),t.opacity)}function Nn(t,e,n,r){return 1===arguments.length?jn(t):new Ln(t,e,n,null==r?1:r)}function Ln(t,e,n,r){this.l=+t,this.a=+e,this.b=+n,this.opacity=+r}function zn(t){return t>.008856451679035631?Math.pow(t,1/3):t/In+Cn}function Dn(t){return t>Rn?t*t*t:In*(t-Cn)}function Fn(t){return 255*(t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055)}function Un(t){return(t/=255)<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4)}function Bn(t){if(t instanceof qn)return new qn(t.h,t.c,t.l,t.opacity);if(t instanceof Ln||(t=jn(t)),0===t.a&&0===t.b)return new qn(NaN,0<t.l&&t.l<100?0:NaN,t.l,t.opacity);var e=Math.atan2(t.b,t.a)*kn;return new qn(e<0?e+360:e,Math.sqrt(t.a*t.a+t.b*t.b),t.l,t.opacity)}function qn(t,e,n,r){this.h=+t,this.c=+e,this.l=+n,this.opacity=+r}function Vn(t){if(isNaN(t.h))return new Ln(t.l,0,0,t.opacity);var e=t.h*En;return new Ln(t.l,Math.cos(e)*t.c,Math.sin(e)*t.c,t.opacity)}function Wn(t){var e=0,n=t.children,r=n&&n.length;if(r)for(;--r>=0;)e+=n[r].value;else e=1;t.value=e}function Hn(t,e){t instanceof Map?(t=[void 0,t],void 0===e&&(e=Gn)):void 0===e&&(e=Yn);for(var n,r,i,o,a,s=new Zn(t),u=[s];n=u.pop();)if((i=e(n.data))&&(a=(i=Array.from(i)).length))for(n.children=i,o=a-1;o>=0;--o)u.push(r=i[o]=new Zn(i[o])),r.parent=n,r.depth=n.depth+1;return s.eachBefore($n)}function Yn(t){return t.children}function Gn(t){return Array.isArray(t)?t[1]:null}function Xn(t){void 0!==t.data.value&&(t.value=t.data.value),t.data=t.data.data}function $n(t){var e=0;do{t.height=e}while((t=t.parent)&&t.height<++e)}function Zn(t){this.data=t,this.depth=this.height=0,this.parent=null}function Kn(t){t.x0=Math.round(t.x0),t.y0=Math.round(t.y0),t.x1=Math.round(t.x1),t.y1=Math.round(t.y1)}function Jn(t,e,n,r,i){for(var o,a=t.children,s=-1,u=a.length,c=t.value&&(r-e)/t.value;++s<u;)(o=a[s]).y0=n,o.y1=i,o.x0=e,o.x1=e+=o.value*c}function Qn(){var t=1,e=1,n=0,r=!1;function i(i){var o=i.height+1;return i.x0=i.y0=n,i.x1=t,i.y1=e/o,i.eachBefore(function(t,e){return function(r){r.children&&Jn(r,r.x0,t*(r.depth+1)/e,r.x1,t*(r.depth+2)/e);var i=r.x0,o=r.y0,a=r.x1-n,s=r.y1-n;a<i&&(i=a=(i+a)/2),s<o&&(o=s=(o+s)/2),r.x0=i,r.y0=o,r.x1=a,r.y1=s}}(e,o)),r&&i.eachBefore(Kn),i}return i.round=function(t){return arguments.length?(r=!!t,i):r},i.size=function(n){return arguments.length?(t=+n[0],e=+n[1],i):[t,e]},i.padding=function(t){return arguments.length?(n=+t,i):n},i}function tr(t,e){return t.parent===e.parent?1:2}function er(t){var e=t.children;return e?e[0]:t.t}function nr(t){var e=t.children;return e?e[e.length-1]:t.t}function rr(t,e,n){var r=n/(e.i-t.i);e.c-=r,e.s+=n,t.c+=r,e.z+=n,e.m+=n}function ir(t,e,n){return t.a.parent===e.parent?t.a:n}function or(t,e){this._=t,this.parent=null,this.children=null,this.A=null,this.a=this,this.z=0,this.m=0,this.c=0,this.s=0,this.t=null,this.i=e}function ar(){var t=tr,e=1,n=1,r=null;function i(i){var u=function(t){for(var e,n,r,i,o,a=new or(t,0),s=[a];e=s.pop();)if(r=e._.children)for(e.children=new Array(o=r.length),i=o-1;i>=0;--i)s.push(n=e.children[i]=new or(r[i],i)),n.parent=e;return(a.parent=new or(null,0)).children=[a],a}(i);if(u.eachAfter(o),u.parent.m=-u.z,u.eachBefore(a),r)i.eachBefore(s);else{var c=i,l=i,f=i;i.eachBefore((function(t){t.x<c.x&&(c=t),t.x>l.x&&(l=t),t.depth>f.depth&&(f=t)}));var h=c===l?1:t(c,l)/2,p=h-c.x,d=e/(l.x+h+p),v=n/(f.depth||1);i.eachBefore((function(t){t.x=(t.x+p)*d,t.y=t.depth*v}))}return i}function o(e){var n=e.children,r=e.parent.children,i=e.i?r[e.i-1]:null;if(n){!function(t){for(var e,n=0,r=0,i=t.children,o=i.length;--o>=0;)(e=i[o]).z+=n,e.m+=n,n+=e.s+(r+=e.c)}(e);var o=(n[0].z+n[n.length-1].z)/2;i?(e.z=i.z+t(e._,i._),e.m=e.z-o):e.z=o}else i&&(e.z=i.z+t(e._,i._));e.parent.A=function(e,n,r){if(n){for(var i,o=e,a=e,s=n,u=o.parent.children[0],c=o.m,l=a.m,f=s.m,h=u.m;s=nr(s),o=er(o),s&&o;)u=er(u),(a=nr(a)).a=e,(i=s.z+f-o.z-c+t(s._,o._))>0&&(rr(ir(s,e,r),e,i),c+=i,l+=i),f+=s.m,c+=o.m,h+=u.m,l+=a.m;s&&!nr(a)&&(a.t=s,a.m+=f-l),o&&!er(u)&&(u.t=o,u.m+=c-h,r=e)}return r}(e,i,e.parent.A||r[0])}function a(t){t._.x=t.z+t.parent.m,t.m+=t.parent.m}function s(t){t.x*=e,t.y=t.depth*n}return i.separation=function(e){return arguments.length?(t=e,i):t},i.size=function(t){return arguments.length?(r=!1,e=+t[0],n=+t[1],i):r?null:[e,n]},i.nodeSize=function(t){return arguments.length?(r=!0,e=+t[0],n=+t[1],i):r?[e,n]:null},i}function sr(t,e,n,r,i){for(var o,a=t.children,s=-1,u=a.length,c=t.value&&(i-n)/t.value;++s<u;)(o=a[s]).x0=e,o.x1=r,o.y0=n,o.y1=n+=o.value*c}se(Ln,Nn,ue(ce,{brighter:function(t){return new Ln(this.l+18*(null==t?1:t),this.a,this.b,this.opacity)},darker:function(t){return new Ln(this.l-18*(null==t?1:t),this.a,this.b,this.opacity)},rgb:function(){var t=(this.l+16)/116,e=isNaN(this.a)?t:t+this.a/500,n=isNaN(this.b)?t:t-this.b/200;return new Pe(Fn(3.1338561*(e=On*Dn(e))-1.6168667*(t=1*Dn(t))-.4906146*(n=Pn*Dn(n))),Fn(-.9787684*e+1.9161415*t+.033454*n),Fn(.0719453*e-.2289914*t+1.4052427*n),this.opacity)}})),se(qn,(function(t,e,n,r){return 1===arguments.length?Bn(t):new qn(t,e,n,null==r?1:r)}),ue(ce,{brighter:function(t){return new qn(this.h,this.c,this.l+18*(null==t?1:t),this.opacity)},darker:function(t){return new qn(this.h,this.c,this.l-18*(null==t?1:t),this.opacity)},rgb:function(){return Vn(this).rgb()}})),Zn.prototype=Hn.prototype={constructor:Zn,count:function(){return this.eachAfter(Wn)},each:function(t,e){let n=-1;for(const r of this)t.call(e,r,++n,this);return this},eachAfter:function(t,e){for(var n,r,i,o=this,a=[o],s=[],u=-1;o=a.pop();)if(s.push(o),n=o.children)for(r=0,i=n.length;r<i;++r)a.push(n[r]);for(;o=s.pop();)t.call(e,o,++u,this);return this},eachBefore:function(t,e){for(var n,r,i=this,o=[i],a=-1;i=o.pop();)if(t.call(e,i,++a,this),n=i.children)for(r=n.length-1;r>=0;--r)o.push(n[r]);return this},find:function(t,e){let n=-1;for(const r of this)if(t.call(e,r,++n,this))return r},sum:function(t){return this.eachAfter((function(e){for(var n=+t(e.data)||0,r=e.children,i=r&&r.length;--i>=0;)n+=r[i].value;e.value=n}))},sort:function(t){return this.eachBefore((function(e){e.children&&e.children.sort(t)}))},path:function(t){for(var e=this,n=function(t,e){if(t===e)return t;var n=t.ancestors(),r=e.ancestors(),i=null;for(t=n.pop(),e=r.pop();t===e;)i=t,t=n.pop(),e=r.pop();return i}(e,t),r=[e];e!==n;)e=e.parent,r.push(e);for(var i=r.length;t!==n;)r.splice(i,0,t),t=t.parent;return r},ancestors:function(){for(var t=this,e=[t];t=t.parent;)e.push(t);return e},descendants:function(){return Array.from(this)},leaves:function(){var t=[];return this.eachBefore((function(e){e.children||t.push(e)})),t},links:function(){var t=this,e=[];return t.each((function(n){n!==t&&e.push({source:n.parent,target:n})})),e},copy:function(){return Hn(this).eachBefore(Xn)},[Symbol.iterator]:function*(){var t,e,n,r,i=this,o=[i];do{for(t=o.reverse(),o=[];i=t.pop();)if(yield i,e=i.children)for(n=0,r=e.length;n<r;++n)o.push(e[n])}while(o.length)}},or.prototype=Object.create(Zn.prototype);const ur=function t(e){function n(t,n,r,i,o){!function(t,e,n,r,i,o){for(var a,s,u,c,l,f,h,p,d,v,g,y=[],m=e.children,b=0,x=0,w=m.length,S=e.value;b<w;){u=i-n,c=o-r;do{l=m[x++].value}while(!l&&x<w);for(f=h=l,g=l*l*(v=Math.max(c/u,u/c)/(S*t)),d=Math.max(h/g,g/f);x<w;++x){if(l+=s=m[x].value,s<f&&(f=s),s>h&&(h=s),g=l*l*v,(p=Math.max(h/g,g/f))>d){l-=s;break}d=p}y.push(a={value:l,dice:u<c,children:m.slice(b,x)}),a.dice?Jn(a,n,r,i,S?r+=c*l/S:o):sr(a,n,r,S?n+=u*l/S:i,o),S-=l,b=x}}(e,t,n,r,i,o)}return n.ratio=function(e){return t((e=+e)>1?e:1)},n}((1+Math.sqrt(5))/2);function cr(t){if("function"!=typeof t)throw new Error;return t}function lr(){return 0}function fr(t){return function(){return t}}function hr(){var t=ur,e=!1,n=1,r=1,i=[0],o=lr,a=lr,s=lr,u=lr,c=lr;function l(t){return t.x0=t.y0=0,t.x1=n,t.y1=r,t.eachBefore(f),i=[0],e&&t.eachBefore(Kn),t}function f(e){var n=i[e.depth],r=e.x0+n,l=e.y0+n,f=e.x1-n,h=e.y1-n;f<r&&(r=f=(r+f)/2),h<l&&(l=h=(l+h)/2),e.x0=r,e.y0=l,e.x1=f,e.y1=h,e.children&&(n=i[e.depth+1]=o(e)/2,r+=c(e)-n,l+=a(e)-n,(f-=s(e)-n)<r&&(r=f=(r+f)/2),(h-=u(e)-n)<l&&(l=h=(l+h)/2),t(e,r,l,f,h))}return l.round=function(t){return arguments.length?(e=!!t,l):e},l.size=function(t){return arguments.length?(n=+t[0],r=+t[1],l):[n,r]},l.tile=function(e){return arguments.length?(t=cr(e),l):t},l.padding=function(t){return arguments.length?l.paddingInner(t).paddingOuter(t):l.paddingInner()},l.paddingInner=function(t){return arguments.length?(o="function"==typeof t?t:fr(+t),l):o},l.paddingOuter=function(t){return arguments.length?l.paddingTop(t).paddingRight(t).paddingBottom(t).paddingLeft(t):l.paddingTop()},l.paddingTop=function(t){return arguments.length?(a="function"==typeof t?t:fr(+t),l):a},l.paddingRight=function(t){return arguments.length?(s="function"==typeof t?t:fr(+t),l):s},l.paddingBottom=function(t){return arguments.length?(u="function"==typeof t?t:fr(+t),l):u},l.paddingLeft=function(t){return arguments.length?(c="function"==typeof t?t:fr(+t),l):c},l}function pr(t,e){var n,r=e?e.length:0,i=t?Math.min(r,t.length):0,o=new Array(i),a=new Array(r);for(n=0;n<i;++n)o[n]=yr(t[n],e[n]);for(;n<r;++n)a[n]=e[n];return function(t){for(n=0;n<i;++n)a[n]=o[n](t);return a}}function dr(t,e){var n=new Date;return t=+t,e=+e,function(r){return n.setTime(t*(1-r)+e*r),n}}function vr(t,e){var n,r={},i={};for(n in null!==t&&"object"==typeof t||(t={}),null!==e&&"object"==typeof e||(e={}),e)n in t?r[n]=yr(t[n],e[n]):i[n]=e[n];return function(t){for(n in r)i[n]=r[n](t);return i}}function gr(t,e){e||(e=[]);var n,r=t?Math.min(e.length,t.length):0,i=e.slice();return function(o){for(n=0;n<r;++n)i[n]=t[n]*(1-o)+e[n]*o;return i}}function yr(t,e){var n,r,i=typeof e;return null==e||"boolean"===i?Ue(e):("number"===i?Zt:"string"===i?(n=Me(e))?(e=n,qe):Ye:e instanceof Me?qe:e instanceof Date?dr:(r=e,!ArrayBuffer.isView(r)||r instanceof DataView?Array.isArray(e)?pr:"function"!=typeof e.valueOf&&"function"!=typeof e.toString||isNaN(e)?vr:Zt:gr))(t,e)}function mr(t,e){var n=Be((t=Nn(t)).l,(e=Nn(e)).l),r=Be(t.a,e.a),i=Be(t.b,e.b),o=Be(t.opacity,e.opacity);return function(e){return t.l=n(e),t.a=r(e),t.b=i(e),t.opacity=o(e),t+""}}var br=Math.sqrt(50),xr=Math.sqrt(10),wr=Math.sqrt(2);function Sr(t,e,n){var r=(e-t)/Math.max(0,n),i=Math.floor(Math.log(r)/Math.LN10),o=r/Math.pow(10,i);return i>=0?(o>=br?10:o>=xr?5:o>=wr?2:1)*Math.pow(10,i):-Math.pow(10,-i)/(o>=br?10:o>=xr?5:o>=wr?2:1)}function _r(t,e){return t<e?-1:t>e?1:t>=e?0:NaN}function Ar(t){let e=t,n=t;function r(t,e,r,i){for(null==r&&(r=0),null==i&&(i=t.length);r<i;){const o=r+i>>>1;n(t[o],e)<0?r=o+1:i=o}return r}return 1===t.length&&(e=(e,n)=>t(e)-n,n=function(t){return(e,n)=>_r(t(e),n)}(t)),{left:r,center:function(t,n,i,o){null==i&&(i=0),null==o&&(o=t.length);const a=r(t,n,i,o-1);return a>i&&e(t[a-1],n)>-e(t[a],n)?a-1:a},right:function(t,e,r,i){for(null==r&&(r=0),null==i&&(i=t.length);r<i;){const o=r+i>>>1;n(t[o],e)>0?i=o:r=o+1}return r}}}const Mr=Ar(_r),Tr=Mr.right,Er=(Mr.left,Ar((function(t){return null===t?NaN:+t})).center,Tr);function kr(t,e){return t=+t,e=+e,function(n){return Math.round(t*(1-n)+e*n)}}function Or(t){return+t}var Pr=[0,1];function Cr(t){return t}function Rr(t,e){return(e-=t=+t)?function(n){return(n-t)/e}:(n=isNaN(e)?NaN:.5,function(){return n});var n}function Ir(t,e,n){var r=t[0],i=t[1],o=e[0],a=e[1];return i<r?(r=Rr(i,r),o=n(a,o)):(r=Rr(r,i),o=n(o,a)),function(t){return o(r(t))}}function jr(t,e,n){var r=Math.min(t.length,e.length)-1,i=new Array(r),o=new Array(r),a=-1;for(t[r]<t[0]&&(t=t.slice().reverse(),e=e.slice().reverse());++a<r;)i[a]=Rr(t[a],t[a+1]),o[a]=n(e[a],e[a+1]);return function(e){var n=Er(t,e,1,r)-1;return o[n](i[n](e))}}function Nr(t,e){return e.domain(t.domain()).range(t.range()).interpolate(t.interpolate()).clamp(t.clamp()).unknown(t.unknown())}function Lr(){return function(){var t,e,n,r,i,o,a=Pr,s=Pr,u=yr,c=Cr;function l(){var t,e,n,u=Math.min(a.length,s.length);return c!==Cr&&(t=a[0],e=a[u-1],t>e&&(n=t,t=e,e=n),c=function(n){return Math.max(t,Math.min(e,n))}),r=u>2?jr:Ir,i=o=null,f}function f(e){return isNaN(e=+e)?n:(i||(i=r(a.map(t),s,u)))(t(c(e)))}return f.invert=function(n){return c(e((o||(o=r(s,a.map(t),Zt)))(n)))},f.domain=function(t){return arguments.length?(a=Array.from(t,Or),l()):a.slice()},f.range=function(t){return arguments.length?(s=Array.from(t),l()):s.slice()},f.rangeRound=function(t){return s=Array.from(t),u=kr,l()},f.clamp=function(t){return arguments.length?(c=!!t||Cr,l()):c!==Cr},f.interpolate=function(t){return arguments.length?(u=t,l()):u},f.unknown=function(t){return arguments.length?(n=t,f):n},function(n,r){return t=n,e=r,l()}}()(Cr,Cr)}function zr(t,e){switch(arguments.length){case 0:break;case 1:this.range(t);break;default:this.range(e).domain(t)}return this}var Dr,Fr=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function Ur(t){if(!(e=Fr.exec(t)))throw new Error("invalid format: "+t);var e;return new Br({fill:e[1],align:e[2],sign:e[3],symbol:e[4],zero:e[5],width:e[6],comma:e[7],precision:e[8]&&e[8].slice(1),trim:e[9],type:e[10]})}function Br(t){this.fill=void 0===t.fill?" ":t.fill+"",this.align=void 0===t.align?">":t.align+"",this.sign=void 0===t.sign?"-":t.sign+"",this.symbol=void 0===t.symbol?"":t.symbol+"",this.zero=!!t.zero,this.width=void 0===t.width?void 0:+t.width,this.comma=!!t.comma,this.precision=void 0===t.precision?void 0:+t.precision,this.trim=!!t.trim,this.type=void 0===t.type?"":t.type+""}function qr(t,e){if((n=(t=e?t.toExponential(e-1):t.toExponential()).indexOf("e"))<0)return null;var n,r=t.slice(0,n);return[r.length>1?r[0]+r.slice(2):r,+t.slice(n+1)]}function Vr(t){return(t=qr(Math.abs(t)))?t[1]:NaN}function Wr(t,e){var n=qr(t,e);if(!n)return t+"";var r=n[0],i=n[1];return i<0?"0."+new Array(-i).join("0")+r:r.length>i+1?r.slice(0,i+1)+"."+r.slice(i+1):r+new Array(i-r.length+2).join("0")}Ur.prototype=Br.prototype,Br.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(void 0===this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(void 0===this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};const Hr={"%":(t,e)=>(100*t).toFixed(e),b:t=>Math.round(t).toString(2),c:t=>t+"",d:function(t){return Math.abs(t=Math.round(t))>=1e21?t.toLocaleString("en").replace(/,/g,""):t.toString(10)},e:(t,e)=>t.toExponential(e),f:(t,e)=>t.toFixed(e),g:(t,e)=>t.toPrecision(e),o:t=>Math.round(t).toString(8),p:(t,e)=>Wr(100*t,e),r:Wr,s:function(t,e){var n=qr(t,e);if(!n)return t+"";var r=n[0],i=n[1],o=i-(Dr=3*Math.max(-8,Math.min(8,Math.floor(i/3))))+1,a=r.length;return o===a?r:o>a?r+new Array(o-a+1).join("0"):o>0?r.slice(0,o)+"."+r.slice(o):"0."+new Array(1-o).join("0")+qr(t,Math.max(0,e+o-1))[0]},X:t=>Math.round(t).toString(16).toUpperCase(),x:t=>Math.round(t).toString(16)};function Yr(t){return t}var Gr,Xr,$r,Zr=Array.prototype.map,Kr=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];function Jr(t){var e=t.domain;return t.ticks=function(t){var n=e();return function(t,e,n){var r,i,o,a,s=-1;if(n=+n,(t=+t)==(e=+e)&&n>0)return[t];if((r=e<t)&&(i=t,t=e,e=i),0===(a=Sr(t,e,n))||!isFinite(a))return[];if(a>0)for(t=Math.ceil(t/a),e=Math.floor(e/a),o=new Array(i=Math.ceil(e-t+1));++s<i;)o[s]=(t+s)*a;else for(a=-a,t=Math.ceil(t*a),e=Math.floor(e*a),o=new Array(i=Math.ceil(e-t+1));++s<i;)o[s]=(t+s)/a;return r&&o.reverse(),o}(n[0],n[n.length-1],null==t?10:t)},t.tickFormat=function(t,n){var r=e();return function(t,e,n,r){var i,o=function(t,e,n){var r=Math.abs(e-t)/Math.max(0,n),i=Math.pow(10,Math.floor(Math.log(r)/Math.LN10)),o=r/i;return o>=br?i*=10:o>=xr?i*=5:o>=wr&&(i*=2),e<t?-i:i}(t,e,n);switch((r=Ur(null==r?",f":r)).type){case"s":var a=Math.max(Math.abs(t),Math.abs(e));return null!=r.precision||isNaN(i=function(t,e){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(Vr(e)/3)))-Vr(Math.abs(t)))}(o,a))||(r.precision=i),$r(r,a);case"":case"e":case"g":case"p":case"r":null!=r.precision||isNaN(i=function(t,e){return t=Math.abs(t),e=Math.abs(e)-t,Math.max(0,Vr(e)-Vr(t))+1}(o,Math.max(Math.abs(t),Math.abs(e))))||(r.precision=i-("e"===r.type));break;case"f":case"%":null!=r.precision||isNaN(i=function(t){return Math.max(0,-Vr(Math.abs(t)))}(o))||(r.precision=i-2*("%"===r.type))}return Xr(r)}(r[0],r[r.length-1],null==t?10:t,n)},t.nice=function(n){null==n&&(n=10);var r,i,o=e(),a=0,s=o.length-1,u=o[a],c=o[s],l=10;for(c<u&&(i=u,u=c,c=i,i=a,a=s,s=i);l-- >0;){if((i=Sr(u,c,n))===r)return o[a]=u,o[s]=c,e(o);if(i>0)u=Math.floor(u/i)*i,c=Math.ceil(c/i)*i;else{if(!(i<0))break;u=Math.ceil(u*i)/i,c=Math.floor(c*i)/i}r=i}return t},t}function Qr(){var t=Lr();return t.copy=function(){return Nr(t,Qr())},zr.apply(t,arguments),Jr(t)}Gr=function(t){var e,n,r=void 0===t.grouping||void 0===t.thousands?Yr:(e=Zr.call(t.grouping,Number),n=t.thousands+"",function(t,r){for(var i=t.length,o=[],a=0,s=e[0],u=0;i>0&&s>0&&(u+s+1>r&&(s=Math.max(1,r-u)),o.push(t.substring(i-=s,i+s)),!((u+=s+1)>r));)s=e[a=(a+1)%e.length];return o.reverse().join(n)}),i=void 0===t.currency?"":t.currency[0]+"",o=void 0===t.currency?"":t.currency[1]+"",a=void 0===t.decimal?".":t.decimal+"",s=void 0===t.numerals?Yr:function(t){return function(e){return e.replace(/[0-9]/g,(function(e){return t[+e]}))}}(Zr.call(t.numerals,String)),u=void 0===t.percent?"%":t.percent+"",c=void 0===t.minus?"−":t.minus+"",l=void 0===t.nan?"NaN":t.nan+"";function f(t){var e=(t=Ur(t)).fill,n=t.align,f=t.sign,h=t.symbol,p=t.zero,d=t.width,v=t.comma,g=t.precision,y=t.trim,m=t.type;"n"===m?(v=!0,m="g"):Hr[m]||(void 0===g&&(g=12),y=!0,m="g"),(p||"0"===e&&"="===n)&&(p=!0,e="0",n="=");var b="$"===h?i:"#"===h&&/[boxX]/.test(m)?"0"+m.toLowerCase():"",x="$"===h?o:/[%p]/.test(m)?u:"",w=Hr[m],S=/[defgprs%]/.test(m);function _(t){var i,o,u,h=b,_=x;if("c"===m)_=w(t)+_,t="";else{var A=(t=+t)<0||1/t<0;if(t=isNaN(t)?l:w(Math.abs(t),g),y&&(t=function(t){t:for(var e,n=t.length,r=1,i=-1;r<n;++r)switch(t[r]){case".":i=e=r;break;case"0":0===i&&(i=r),e=r;break;default:if(!+t[r])break t;i>0&&(i=0)}return i>0?t.slice(0,i)+t.slice(e+1):t}(t)),A&&0==+t&&"+"!==f&&(A=!1),h=(A?"("===f?f:c:"-"===f||"("===f?"":f)+h,_=("s"===m?Kr[8+Dr/3]:"")+_+(A&&"("===f?")":""),S)for(i=-1,o=t.length;++i<o;)if(48>(u=t.charCodeAt(i))||u>57){_=(46===u?a+t.slice(i+1):t.slice(i))+_,t=t.slice(0,i);break}}v&&!p&&(t=r(t,1/0));var M=h.length+t.length+_.length,T=M<d?new Array(d-M+1).join(e):"";switch(v&&p&&(t=r(T+t,T.length?d-_.length:1/0),T=""),n){case"<":t=h+t+_+T;break;case"=":t=h+T+t+_;break;case"^":t=T.slice(0,M=T.length>>1)+h+t+_+T.slice(M);break;default:t=T+h+t+_}return s(t)}return g=void 0===g?6:/[gprs]/.test(m)?Math.max(1,Math.min(21,g)):Math.max(0,Math.min(20,g)),_.toString=function(){return t+""},_}return{format:f,formatPrefix:function(t,e){var n=f(((t=Ur(t)).type="f",t)),r=3*Math.max(-8,Math.min(8,Math.floor(Vr(e)/3))),i=Math.pow(10,-r),o=Kr[8+r/3];return function(t){return n(i*t)+o}}}}({thousands:",",grouping:[3],currency:["$",""]}),Xr=Gr.format,$r=Gr.formatPrefix;const ti=Symbol("implicit");function ei(){var t,e=0,n=1,r=1,i=[.5],o=[0,1];function a(e){return e<=e?o[Er(i,e,0,r)]:t}function s(){var t=-1;for(i=new Array(r);++t<r;)i[t]=((t+1)*n-(t-r)*e)/(r+1);return a}return a.domain=function(t){return arguments.length?([e,n]=t,e=+e,n=+n,s()):[e,n]},a.range=function(t){return arguments.length?(r=(o=Array.from(t)).length-1,s()):o.slice()},a.invertExtent=function(t){var a=o.indexOf(t);return a<0?[NaN,NaN]:a<1?[e,i[0]]:a>=r?[i[r-1],n]:[i[a-1],i[a]]},a.unknown=function(e){return arguments.length?(t=e,a):a},a.thresholds=function(){return i.slice()},a.copy=function(){return ei().domain([e,n]).range(o).unknown(t)},zr.apply(Jr(a),arguments)}const ni=function(t){for(var e=t.length/6|0,n=new Array(e),r=0;r<e;)n[r]="#"+t.slice(6*r,6*++r);return n}("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf");function ri(t){return"string"==typeof t?new vt([[document.querySelector(t)]],[document.documentElement]):new vt([[t]],dt)}const ii=Math.PI,oi=2*ii,ai=1e-6,si=oi-ai;function ui(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function ci(){return new ui}ui.prototype=ci.prototype={constructor:ui,moveTo:function(t,e){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+e)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(t,e){this._+="L"+(this._x1=+t)+","+(this._y1=+e)},quadraticCurveTo:function(t,e,n,r){this._+="Q"+ +t+","+ +e+","+(this._x1=+n)+","+(this._y1=+r)},bezierCurveTo:function(t,e,n,r,i,o){this._+="C"+ +t+","+ +e+","+ +n+","+ +r+","+(this._x1=+i)+","+(this._y1=+o)},arcTo:function(t,e,n,r,i){t=+t,e=+e,n=+n,r=+r,i=+i;var o=this._x1,a=this._y1,s=n-t,u=r-e,c=o-t,l=a-e,f=c*c+l*l;if(i<0)throw new Error("negative radius: "+i);if(null===this._x1)this._+="M"+(this._x1=t)+","+(this._y1=e);else if(f>ai)if(Math.abs(l*s-u*c)>ai&&i){var h=n-o,p=r-a,d=s*s+u*u,v=h*h+p*p,g=Math.sqrt(d),y=Math.sqrt(f),m=i*Math.tan((ii-Math.acos((d+f-v)/(2*g*y)))/2),b=m/y,x=m/g;Math.abs(b-1)>ai&&(this._+="L"+(t+b*c)+","+(e+b*l)),this._+="A"+i+","+i+",0,0,"+ +(l*h>c*p)+","+(this._x1=t+x*s)+","+(this._y1=e+x*u)}else this._+="L"+(this._x1=t)+","+(this._y1=e)},arc:function(t,e,n,r,i,o){t=+t,e=+e,o=!!o;var a=(n=+n)*Math.cos(r),s=n*Math.sin(r),u=t+a,c=e+s,l=1^o,f=o?r-i:i-r;if(n<0)throw new Error("negative radius: "+n);null===this._x1?this._+="M"+u+","+c:(Math.abs(this._x1-u)>ai||Math.abs(this._y1-c)>ai)&&(this._+="L"+u+","+c),n&&(f<0&&(f=f%oi+oi),f>si?this._+="A"+n+","+n+",0,1,"+l+","+(t-a)+","+(e-s)+"A"+n+","+n+",0,1,"+l+","+(this._x1=u)+","+(this._y1=c):f>ai&&(this._+="A"+n+","+n+",0,"+ +(f>=ii)+","+l+","+(this._x1=t+n*Math.cos(i))+","+(this._y1=e+n*Math.sin(i))))},rect:function(t,e,n,r){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+e)+"h"+ +n+"v"+ +r+"h"+-n+"Z"},toString:function(){return this._}};const li=ci;function fi(t){return function(){return t}}var hi=Math.abs,pi=Math.atan2,di=Math.cos,vi=Math.max,gi=Math.min,yi=Math.sin,mi=Math.sqrt,bi=1e-12,xi=Math.PI,wi=xi/2,Si=2*xi;function _i(t){return t>1?0:t<-1?xi:Math.acos(t)}function Ai(t){return t>=1?wi:t<=-1?-wi:Math.asin(t)}function Mi(t){return t.innerRadius}function Ti(t){return t.outerRadius}function Ei(t){return t.startAngle}function ki(t){return t.endAngle}function Oi(t){return t&&t.padAngle}function Pi(t,e,n,r,i,o,a,s){var u=n-t,c=r-e,l=a-i,f=s-o,h=f*u-l*c;if(!(h*h<bi))return[t+(h=(l*(e-o)-f*(t-i))/h)*u,e+h*c]}function Ci(t,e,n,r,i,o,a){var s=t-n,u=e-r,c=(a?o:-o)/mi(s*s+u*u),l=c*u,f=-c*s,h=t+l,p=e+f,d=n+l,v=r+f,g=(h+d)/2,y=(p+v)/2,m=d-h,b=v-p,x=m*m+b*b,w=i-o,S=h*v-d*p,_=(b<0?-1:1)*mi(vi(0,w*w*x-S*S)),A=(S*b-m*_)/x,M=(-S*m-b*_)/x,T=(S*b+m*_)/x,E=(-S*m+b*_)/x,k=A-g,O=M-y,P=T-g,C=E-y;return k*k+O*O>P*P+C*C&&(A=T,M=E),{cx:A,cy:M,x01:-l,y01:-f,x11:A*(i/w-1),y11:M*(i/w-1)}}function Ri(){var t=Mi,e=Ti,n=fi(0),r=null,i=Ei,o=ki,a=Oi,s=null;function u(){var u,c,l=+t.apply(this,arguments),f=+e.apply(this,arguments),h=i.apply(this,arguments)-wi,p=o.apply(this,arguments)-wi,d=hi(p-h),v=p>h;if(s||(s=u=li()),f<l&&(c=f,f=l,l=c),f>bi)if(d>Si-bi)s.moveTo(f*di(h),f*yi(h)),s.arc(0,0,f,h,p,!v),l>bi&&(s.moveTo(l*di(p),l*yi(p)),s.arc(0,0,l,p,h,v));else{var g,y,m=h,b=p,x=h,w=p,S=d,_=d,A=a.apply(this,arguments)/2,M=A>bi&&(r?+r.apply(this,arguments):mi(l*l+f*f)),T=gi(hi(f-l)/2,+n.apply(this,arguments)),E=T,k=T;if(M>bi){var O=Ai(M/l*yi(A)),P=Ai(M/f*yi(A));(S-=2*O)>bi?(x+=O*=v?1:-1,w-=O):(S=0,x=w=(h+p)/2),(_-=2*P)>bi?(m+=P*=v?1:-1,b-=P):(_=0,m=b=(h+p)/2)}var C=f*di(m),R=f*yi(m),I=l*di(w),j=l*yi(w);if(T>bi){var N,L=f*di(b),z=f*yi(b),D=l*di(x),F=l*yi(x);if(d<xi&&(N=Pi(C,R,D,F,L,z,I,j))){var U=C-N[0],B=R-N[1],q=L-N[0],V=z-N[1],W=1/yi(_i((U*q+B*V)/(mi(U*U+B*B)*mi(q*q+V*V)))/2),H=mi(N[0]*N[0]+N[1]*N[1]);E=gi(T,(l-H)/(W-1)),k=gi(T,(f-H)/(W+1))}}_>bi?k>bi?(g=Ci(D,F,C,R,f,k,v),y=Ci(L,z,I,j,f,k,v),s.moveTo(g.cx+g.x01,g.cy+g.y01),k<T?s.arc(g.cx,g.cy,k,pi(g.y01,g.x01),pi(y.y01,y.x01),!v):(s.arc(g.cx,g.cy,k,pi(g.y01,g.x01),pi(g.y11,g.x11),!v),s.arc(0,0,f,pi(g.cy+g.y11,g.cx+g.x11),pi(y.cy+y.y11,y.cx+y.x11),!v),s.arc(y.cx,y.cy,k,pi(y.y11,y.x11),pi(y.y01,y.x01),!v))):(s.moveTo(C,R),s.arc(0,0,f,m,b,!v)):s.moveTo(C,R),l>bi&&S>bi?E>bi?(g=Ci(I,j,L,z,l,-E,v),y=Ci(C,R,D,F,l,-E,v),s.lineTo(g.cx+g.x01,g.cy+g.y01),E<T?s.arc(g.cx,g.cy,E,pi(g.y01,g.x01),pi(y.y01,y.x01),!v):(s.arc(g.cx,g.cy,E,pi(g.y01,g.x01),pi(g.y11,g.x11),!v),s.arc(0,0,l,pi(g.cy+g.y11,g.cx+g.x11),pi(y.cy+y.y11,y.cx+y.x11),v),s.arc(y.cx,y.cy,E,pi(y.y11,y.x11),pi(y.y01,y.x01),!v))):s.arc(0,0,l,w,x,v):s.lineTo(I,j)}else s.moveTo(0,0);if(s.closePath(),u)return s=null,u+""||null}return u.centroid=function(){var n=(+t.apply(this,arguments)+ +e.apply(this,arguments))/2,r=(+i.apply(this,arguments)+ +o.apply(this,arguments))/2-xi/2;return[di(r)*n,yi(r)*n]},u.innerRadius=function(e){return arguments.length?(t="function"==typeof e?e:fi(+e),u):t},u.outerRadius=function(t){return arguments.length?(e="function"==typeof t?t:fi(+t),u):e},u.cornerRadius=function(t){return arguments.length?(n="function"==typeof t?t:fi(+t),u):n},u.padRadius=function(t){return arguments.length?(r=null==t?null:"function"==typeof t?t:fi(+t),u):r},u.startAngle=function(t){return arguments.length?(i="function"==typeof t?t:fi(+t),u):i},u.endAngle=function(t){return arguments.length?(o="function"==typeof t?t:fi(+t),u):o},u.padAngle=function(t){return arguments.length?(a="function"==typeof t?t:fi(+t),u):a},u.context=function(t){return arguments.length?(s=null==t?null:t,u):s},u}var Ii=Array.prototype.slice;function ji(t){return t[0]}function Ni(t){return t[1]}function Li(t){return t.source}function zi(t){return t.target}function Di(t,e,n,r,i){t.moveTo(e,n),t.bezierCurveTo(e=(e+r)/2,n,e,i,r,i)}function Fi(t){t.preventDefault(),t.stopImmediatePropagation()}function Ui(t){var e=t.document.documentElement,n=ri(t).on("dragstart.drag",Fi,!0);"onselectstart"in e?n.on("selectstart.drag",Fi,!0):(e.__noselect=e.style.MozUserSelect,e.style.MozUserSelect="none")}function Bi(t,e){var n=t.document.documentElement,r=ri(t).on("dragstart.drag",null);e&&(r.on("click.drag",Fi,!0),setTimeout((function(){r.on("click.drag",null)}),0)),"onselectstart"in n?r.on("selectstart.drag",null):(n.style.MozUserSelect=n.__noselect,delete n.__noselect)}function qi(t){return((t=Math.exp(t))+1/t)/2}const Vi=function t(e,n,r){function i(t,i){var o,a,s=t[0],u=t[1],c=t[2],l=i[0],f=i[1],h=i[2],p=l-s,d=f-u,v=p*p+d*d;if(v<1e-12)a=Math.log(h/c)/e,o=function(t){return[s+t*p,u+t*d,c*Math.exp(e*t*a)]};else{var g=Math.sqrt(v),y=(h*h-c*c+r*v)/(2*c*n*g),m=(h*h-c*c-r*v)/(2*h*n*g),b=Math.log(Math.sqrt(y*y+1)-y),x=Math.log(Math.sqrt(m*m+1)-m);a=(x-b)/e,o=function(t){var r,i=t*a,o=qi(b),l=c/(n*g)*(o*(r=e*i+b,((r=Math.exp(2*r))-1)/(r+1))-function(t){return((t=Math.exp(t))-1/t)/2}(b));return[s+l*p,u+l*d,c*o/qi(e*i+b)]}}return o.duration=1e3*a*e/Math.SQRT2,o}return i.rho=function(e){var n=Math.max(.001,+e),r=n*n;return t(n,r,r*r)},i}(Math.SQRT2,2,4);function Wi(t,e){if(t=function(t){let e;for(;e=t.sourceEvent;)t=e;return t}(t),void 0===e&&(e=t.currentTarget),e){var n=e.ownerSVGElement||e;if(n.createSVGPoint){var r=n.createSVGPoint();return r.x=t.clientX,r.y=t.clientY,[(r=r.matrixTransform(e.getScreenCTM().inverse())).x,r.y]}if(e.getBoundingClientRect){var i=e.getBoundingClientRect();return[t.clientX-i.left-e.clientLeft,t.clientY-i.top-e.clientTop]}}return[t.pageX,t.pageY]}const Hi=t=>()=>t;function Yi(t,{sourceEvent:e,target:n,transform:r,dispatch:i}){Object.defineProperties(this,{type:{value:t,enumerable:!0,configurable:!0},sourceEvent:{value:e,enumerable:!0,configurable:!0},target:{value:n,enumerable:!0,configurable:!0},transform:{value:r,enumerable:!0,configurable:!0},_:{value:i}})}function Gi(t,e,n){this.k=t,this.x=e,this.y=n}Gi.prototype={constructor:Gi,scale:function(t){return 1===t?this:new Gi(this.k*t,this.x,this.y)},translate:function(t,e){return 0===t&0===e?this:new Gi(this.k,this.x+this.k*t,this.y+this.k*e)},apply:function(t){return[t[0]*this.k+this.x,t[1]*this.k+this.y]},applyX:function(t){return t*this.k+this.x},applyY:function(t){return t*this.k+this.y},invert:function(t){return[(t[0]-this.x)/this.k,(t[1]-this.y)/this.k]},invertX:function(t){return(t-this.x)/this.k},invertY:function(t){return(t-this.y)/this.k},rescaleX:function(t){return t.copy().domain(t.range().map(this.invertX,this).map(t.invert,t))},rescaleY:function(t){return t.copy().domain(t.range().map(this.invertY,this).map(t.invert,t))},toString:function(){return"translate("+this.x+","+this.y+") scale("+this.k+")"}};var Xi=new Gi(1,0,0);function $i(t){t.stopImmediatePropagation()}function Zi(t){t.preventDefault(),t.stopImmediatePropagation()}function Ki(t){return!(t.ctrlKey&&"wheel"!==t.type||t.button)}function Ji(){var t=this;return t instanceof SVGElement?(t=t.ownerSVGElement||t).hasAttribute("viewBox")?[[(t=t.viewBox.baseVal).x,t.y],[t.x+t.width,t.y+t.height]]:[[0,0],[t.width.baseVal.value,t.height.baseVal.value]]:[[0,0],[t.clientWidth,t.clientHeight]]}function Qi(){return this.__zoom||Xi}function to(t){return-t.deltaY*(1===t.deltaMode?.05:t.deltaMode?1:.002)*(t.ctrlKey?10:1)}function eo(){return navigator.maxTouchPoints||"ontouchstart"in this}function no(t,e,n){var r=t.invertX(e[0][0])-n[0][0],i=t.invertX(e[1][0])-n[1][0],o=t.invertY(e[0][1])-n[0][1],a=t.invertY(e[1][1])-n[1][1];return t.translate(i>r?(r+i)/2:Math.min(0,r)||Math.max(0,i),a>o?(o+a)/2:Math.min(0,o)||Math.max(0,a))}function ro(){var t,e,n,r=Ki,i=Ji,o=no,a=to,s=eo,u=[0,1/0],c=[[-1/0,-1/0],[1/0,1/0]],l=250,f=Vi,h=At("start","zoom","end"),p=500,d=0,v=10;function g(t){t.property("__zoom",Qi).on("wheel.zoom",_).on("mousedown.zoom",A).on("dblclick.zoom",M).filter(s).on("touchstart.zoom",T).on("touchmove.zoom",E).on("touchend.zoom touchcancel.zoom",k).style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function y(t,e){return(e=Math.max(u[0],Math.min(u[1],e)))===t.k?t:new Gi(e,t.x,t.y)}function m(t,e,n){var r=e[0]-n[0]*t.k,i=e[1]-n[1]*t.k;return r===t.x&&i===t.y?t:new Gi(t.k,r,i)}function b(t){return[(+t[0][0]+ +t[1][0])/2,(+t[0][1]+ +t[1][1])/2]}function x(t,e,n,r){t.on("start.zoom",(function(){w(this,arguments).event(r).start()})).on("interrupt.zoom end.zoom",(function(){w(this,arguments).event(r).end()})).tween("zoom",(function(){var t=this,o=arguments,a=w(t,o).event(r),s=i.apply(t,o),u=null==n?b(s):"function"==typeof n?n.apply(t,o):n,c=Math.max(s[1][0]-s[0][0],s[1][1]-s[0][1]),l=t.__zoom,h="function"==typeof e?e.apply(t,o):e,p=f(l.invert(u).concat(c/l.k),h.invert(u).concat(c/h.k));return function(t){if(1===t)t=h;else{var e=p(t),n=c/e[2];t=new Gi(n,u[0]-e[0]*n,u[1]-e[1]*n)}a.zoom(null,t)}}))}function w(t,e,n){return!n&&t.__zooming||new S(t,e)}function S(t,e){this.that=t,this.args=e,this.active=0,this.sourceEvent=null,this.extent=i.apply(t,e),this.taps=0}function _(t,...e){if(r.apply(this,arguments)){var n=w(this,e).event(t),i=this.__zoom,s=Math.max(u[0],Math.min(u[1],i.k*Math.pow(2,a.apply(this,arguments)))),l=Wi(t);if(n.wheel)n.mouse[0][0]===l[0]&&n.mouse[0][1]===l[1]||(n.mouse[1]=i.invert(n.mouse[0]=l)),clearTimeout(n.wheel);else{if(i.k===s)return;n.mouse=[l,i.invert(l)],$t(this),n.start()}Zi(t),n.wheel=setTimeout(f,150),n.zoom("mouse",o(m(y(i,s),n.mouse[0],n.mouse[1]),n.extent,c))}function f(){n.wheel=null,n.end()}}function A(t,...e){if(!n&&r.apply(this,arguments)){var i=w(this,e,!0).event(t),a=ri(t.view).on("mousemove.zoom",h,!0).on("mouseup.zoom",p,!0),s=Wi(t,u),u=t.currentTarget,l=t.clientX,f=t.clientY;Ui(t.view),$i(t),i.mouse=[s,this.__zoom.invert(s)],$t(this),i.start()}function h(t){if(Zi(t),!i.moved){var e=t.clientX-l,n=t.clientY-f;i.moved=e*e+n*n>d}i.event(t).zoom("mouse",o(m(i.that.__zoom,i.mouse[0]=Wi(t,u),i.mouse[1]),i.extent,c))}function p(t){a.on("mousemove.zoom mouseup.zoom",null),Bi(t.view,i.moved),Zi(t),i.event(t).end()}}function M(t,...e){if(r.apply(this,arguments)){var n=this.__zoom,a=Wi(t.changedTouches?t.changedTouches[0]:t,this),s=n.invert(a),u=n.k*(t.shiftKey?.5:2),f=o(m(y(n,u),a,s),i.apply(this,e),c);Zi(t),l>0?ri(this).transition().duration(l).call(x,f,a,t):ri(this).call(g.transform,f,a,t)}}function T(n,...i){if(r.apply(this,arguments)){var o,a,s,u,c=n.touches,l=c.length,f=w(this,i,n.changedTouches.length===l).event(n);for($i(n),a=0;a<l;++a)u=[u=Wi(s=c[a],this),this.__zoom.invert(u),s.identifier],f.touch0?f.touch1||f.touch0[2]===u[2]||(f.touch1=u,f.taps=0):(f.touch0=u,o=!0,f.taps=1+!!t);t&&(t=clearTimeout(t)),o&&(f.taps<2&&(e=u[0],t=setTimeout((function(){t=null}),p)),$t(this),f.start())}}function E(t,...e){if(this.__zooming){var n,r,i,a,s=w(this,e).event(t),u=t.changedTouches,l=u.length;for(Zi(t),n=0;n<l;++n)i=Wi(r=u[n],this),s.touch0&&s.touch0[2]===r.identifier?s.touch0[0]=i:s.touch1&&s.touch1[2]===r.identifier&&(s.touch1[0]=i);if(r=s.that.__zoom,s.touch1){var f=s.touch0[0],h=s.touch0[1],p=s.touch1[0],d=s.touch1[1],v=(v=p[0]-f[0])*v+(v=p[1]-f[1])*v,g=(g=d[0]-h[0])*g+(g=d[1]-h[1])*g;r=y(r,Math.sqrt(v/g)),i=[(f[0]+p[0])/2,(f[1]+p[1])/2],a=[(h[0]+d[0])/2,(h[1]+d[1])/2]}else{if(!s.touch0)return;i=s.touch0[0],a=s.touch0[1]}s.zoom("touch",o(m(r,i,a),s.extent,c))}}function k(t,...r){if(this.__zooming){var i,o,a=w(this,r).event(t),s=t.changedTouches,u=s.length;for($i(t),n&&clearTimeout(n),n=setTimeout((function(){n=null}),p),i=0;i<u;++i)o=s[i],a.touch0&&a.touch0[2]===o.identifier?delete a.touch0:a.touch1&&a.touch1[2]===o.identifier&&delete a.touch1;if(a.touch1&&!a.touch0&&(a.touch0=a.touch1,delete a.touch1),a.touch0)a.touch0[1]=this.__zoom.invert(a.touch0[0]);else if(a.end(),2===a.taps&&(o=Wi(o,this),Math.hypot(e[0]-o[0],e[1]-o[1])<v)){var c=ri(this).on("dblclick.zoom");c&&c.apply(this,arguments)}}}return g.transform=function(t,e,n,r){var i=t.selection?t.selection():t;i.property("__zoom",Qi),t!==i?x(t,e,n,r):i.interrupt().each((function(){w(this,arguments).event(r).start().zoom(null,"function"==typeof e?e.apply(this,arguments):e).end()}))},g.scaleBy=function(t,e,n,r){g.scaleTo(t,(function(){var t=this.__zoom.k,n="function"==typeof e?e.apply(this,arguments):e;return t*n}),n,r)},g.scaleTo=function(t,e,n,r){g.transform(t,(function(){var t=i.apply(this,arguments),r=this.__zoom,a=null==n?b(t):"function"==typeof n?n.apply(this,arguments):n,s=r.invert(a),u="function"==typeof e?e.apply(this,arguments):e;return o(m(y(r,u),a,s),t,c)}),n,r)},g.translateBy=function(t,e,n,r){g.transform(t,(function(){return o(this.__zoom.translate("function"==typeof e?e.apply(this,arguments):e,"function"==typeof n?n.apply(this,arguments):n),i.apply(this,arguments),c)}),null,r)},g.translateTo=function(t,e,n,r,a){g.transform(t,(function(){var t=i.apply(this,arguments),a=this.__zoom,s=null==r?b(t):"function"==typeof r?r.apply(this,arguments):r;return o(Xi.translate(s[0],s[1]).scale(a.k).translate("function"==typeof e?-e.apply(this,arguments):-e,"function"==typeof n?-n.apply(this,arguments):-n),t,c)}),r,a)},S.prototype={event:function(t){return t&&(this.sourceEvent=t),this},start:function(){return 1==++this.active&&(this.that.__zooming=this,this.emit("start")),this},zoom:function(t,e){return this.mouse&&"mouse"!==t&&(this.mouse[1]=e.invert(this.mouse[0])),this.touch0&&"touch"!==t&&(this.touch0[1]=e.invert(this.touch0[0])),this.touch1&&"touch"!==t&&(this.touch1[1]=e.invert(this.touch1[0])),this.that.__zoom=e,this.emit("zoom"),this},end:function(){return 0==--this.active&&(delete this.that.__zooming,this.emit("end")),this},emit:function(t){var e=ri(this.that).datum();h.call(t,this.that,new Yi(t,{sourceEvent:this.sourceEvent,target:g,type:t,transform:this.that.__zoom,dispatch:h}),e)}},g.wheelDelta=function(t){return arguments.length?(a="function"==typeof t?t:Hi(+t),g):a},g.filter=function(t){return arguments.length?(r="function"==typeof t?t:Hi(!!t),g):r},g.touchable=function(t){return arguments.length?(s="function"==typeof t?t:Hi(!!t),g):s},g.extent=function(t){return arguments.length?(i="function"==typeof t?t:Hi([[+t[0][0],+t[0][1]],[+t[1][0],+t[1][1]]]),g):i},g.scaleExtent=function(t){return arguments.length?(u[0]=+t[0],u[1]=+t[1],g):[u[0],u[1]]},g.translateExtent=function(t){return arguments.length?(c[0][0]=+t[0][0],c[1][0]=+t[1][0],c[0][1]=+t[0][1],c[1][1]=+t[1][1],g):[[c[0][0],c[0][1]],[c[1][0],c[1][1]]]},g.constrain=function(t){return arguments.length?(o=t,g):o},g.duration=function(t){return arguments.length?(l=+t,g):l},g.interpolate=function(t){return arguments.length?(f=t,g):f},g.on=function(){var t=h.on.apply(h,arguments);return t===h?g:t},g.clickDistance=function(t){return arguments.length?(d=(t=+t)*t,g):Math.sqrt(d)},g.tapDistance=function(t){return arguments.length?(v=+t,g):v},g}Gi.prototype;var io,oo,ao=function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.width=800,this.height=800,this.enableTooltips=!0};function so(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}(oo=io||(io={})).easeInEaseOutCubic=function(t){return t<.5?4*t*t*t:1-Math.pow(-2*t+2,3)/2},oo.easeInCubic=function(t){return t*t*t},oo.easeOutCubic=function(t){return 1-Math.pow(1-t,3)},oo.easeInEaseOutElastic=function(t){var e=2*Math.PI/4.5;return 0===t?0:1===t?1:t<.5?-Math.pow(2,20*t-10)*Math.sin((20*t-11.125)*e)/2:Math.pow(2,-20*t+10)*Math.sin((20*t-11.125)*e)/2+1},oo.easeInElastic=function(t){var e=2*Math.PI/3;return 0===t?0:1===t?1:-Math.pow(2,10*t-10)*Math.sin((10*t-10.75)*e)},oo.easeOutElastic=function(t){var e=2*Math.PI/3;return 0===t?0:1===t?1:Math.pow(2,-10*t)*Math.sin((10*t-.75)*e)+1};var uo=function(){function t(e,n,r,i,o){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._parent=e,this._leftChild=n,this._rightChild=r,this.values=i,this.height=o,this.id=t.currentID,t.currentID++}var e,n;return e=t,(n=[{key:"parent",get:function(){return this._parent},set:function(t){this._parent=t}},{key:"leftChild",get:function(){return this._leftChild},set:function(t){this._leftChild=t}},{key:"rightChild",get:function(){return this._rightChild},set:function(t){this._rightChild=t}},{key:"toNewick",value:function(t){var e="";return this.leftChild||this.rightChild?(e+="(",this.leftChild&&(e+=this.leftChild.toNewick(t)+","),this.rightChild&&(e+=this.rightChild.toNewick(t)),e+=")"+this.id+":"+this.height):t(this.values[0].id)+":"+this.height}},{key:"toGraphViz",value:function(t){for(var e=this,n="digraph dendrogram {\n",r="",i="",o=[e];o.length>0&&(e=o.shift());)e.leftChild||e.rightChild?r+="    ".concat(e.id,' [label="').concat(e.id,'"];\n'):r+="    ".concat(e.id,' [label="').concat(t(e.values[0].id),'"];\n'),e.leftChild&&(i+="    ".concat(e.id," -> ").concat(e.leftChild.id,";\n"),o.push(e.leftChild)),e.rightChild&&(i+="    ".concat(e.id," -> ").concat(e.rightChild.id,";\n"),o.push(e.rightChild));return n+(r+i+"}")}}])&&so(e.prototype,n),t}();function co(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function lo(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}uo.currentID=0;var fo=function(){function t(e,n,r){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.elements=e,this.index=n,this.treeNode=r}var e,n;return e=t,(n=[{key:"merge",value:function(t,e){var n,r;(n=this.elements).push.apply(n,function(t){if(Array.isArray(t))return co(t)}(r=t.elements)||function(t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t))return Array.from(t)}(r)||function(t,e){if(t){if("string"==typeof t)return co(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?co(t,e):void 0}}(r)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}());var i=new uo(null,this.treeNode,t.treeNode,this.elements.slice(),e);this.treeNode.parent=i,t.treeNode.parent=i,this.treeNode=i}}])&&lo(e.prototype,n),t}();function ho(t,e){var n;if("undefined"==typeof Symbol||null==t[Symbol.iterator]){if(Array.isArray(t)||(n=function(t,e){if(t){if("string"==typeof t)return po(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?po(t,e):void 0}}(t))||e&&t&&"number"==typeof t.length){n&&(t=n);var r=0,i=function(){};return{s:i,n:function(){return r>=t.length?{done:!0}:{done:!1,value:t[r++]}},e:function(t){throw t},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,a=!0,s=!1;return{s:function(){n=t[Symbol.iterator]()},n:function(){var t=n.next();return a=t.done,t},e:function(t){s=!0,o=t},f:function(){try{a||null==n.return||n.return()}finally{if(s)throw o}}}}function po(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function vo(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var go=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.metric=e}var e,n;return e=t,(n=[{key:"cluster",value:function(t){if(uo.currentID=0,t.length<1)return new uo(null,null,null,[],0);for(var e=new Map,n=[],r=0;r<t.length;r++){var i=t[r].values;e.set(r,new fo([t[r]],r,new uo(null,null,null,[t[r]],0))),n.push(i)}for(var o=this.metric.getDistance(n),a=0;a!=o.length-1;){var s,u=1/0,c=-1,l=-1,f=ho(e.keys());try{for(f.s();!(s=f.n()).done;){var h,p=s.value,d=ho(e.keys());try{for(d.s();!(h=d.n()).done;){var v=h.value;p>v&&o[p][v]<u&&(u=o[p][v],c=p,l=v)}}catch(t){d.e(t)}finally{d.f()}}}catch(t){f.e(t)}finally{f.f()}var g=e.get(c),y=e.get(l),m=u/2;if(!g||!y)throw"At least one cluster is invalid!";var b,x=this.copyDistanceMatrix(o),w=ho(e.keys());try{for(w.s();!(b=w.n()).done;){var S=b.value;if(S!=c&&S!=l){var _;_=S>c?o[S][c]:o[c][S];var A;A=S>l?o[S][l]:o[l][S];var M=(g.elements.length*_+y.elements.length*A)/(g.elements.length+y.elements.length);S>c?x[S][c]=M:x[c][S]=M}}}catch(t){w.e(t)}finally{w.f()}o=x,g.merge(y,m),e.delete(l),++a}return e.values().next().value.treeNode}},{key:"copyDistanceMatrix",value:function(t){for(var e=[],n=0;n<t.length;n++){for(var r=[],i=t[n],o=0;o<i.length;o++)r.push(i[o]);e.push(r)}return e}}])&&vo(e.prototype,n),t}();function yo(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var mo=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t)}var e,n;return e=t,(n=[{key:"getDistance",value:function(t){for(var e=[],n=0;n<t.length;n++){for(var r=[],i=0;i<=n;i++)r.push(this.calculateEuclideanDistance(t[n],t[i]));e.push(r)}return e}},{key:"calculateEuclideanDistance",value:function(t,e){if(t.length!=e.length)throw"Euclidean distance can only be calculated for 2 equally sized input arrays!";for(var n=0,r=0;r<t.length;r++)n+=Math.pow(e[r]-t[r],2);return Math.sqrt(n)}}])&&yo(e.prototype,n),t}();function bo(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var xo=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.nodeMinMap=new Map}var e,n;return e=t,(n=[{key:"reorder",value:function(t){return this.nodeMinMap.clear(),this.sortMinimum(t)}},{key:"sortMinimum",value:function(t){if(!t.leftChild||!t.rightChild)return t;var e=t.leftChild,n=t.rightChild,r=!e.leftChild&&!e.rightChild,i=!n.leftChild&&!n.rightChild;if(r&&i)this.nodeMinMap.set(t,t.height);else if(!r&&i){var o=this.sortMinimum(e);t.leftChild=o;var a=this.nodeMinMap.get(o);if(void 0===a)throw"The recursive call to sort the left subtree did not yield a minimum value.";this.nodeMinMap.set(t,Math.min(t.height,a))}else if(r&&!i){var s=this.sortMinimum(n);t.leftChild=s,t.rightChild=e;var u=this.nodeMinMap.get(s);if(void 0===u)throw"The recursive call to sort the right subtree did not yield a minimum value.";this.nodeMinMap.set(t,Math.min(t.height,u))}else{var c=this.sortMinimum(e),l=this.sortMinimum(n),f=this.nodeMinMap.get(c),h=this.nodeMinMap.get(l);if(void 0===f||void 0===h)throw"One of the recursive calls to sort a subtree did not yield a minimum value.";f<=h?(t.leftChild=c,t.rightChild=l):(t.leftChild=l,t.rightChild=c),this.nodeMinMap.set(t,Math.min(t.height,f,h))}return t}}])&&bo(e.prototype,n),t}();function wo(t){return(wo="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function So(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _o(t,e){return(_o=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function Ao(t,e){return!e||"object"!==wo(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function Mo(t){return(Mo=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var To=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_o(t,e)}(i,t);var e,n,r=(e=i,n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,r=Mo(e);if(n){var i=Mo(this).constructor;t=Reflect.construct(r,arguments,i)}else t=r.apply(this,arguments);return Ao(this,t)});function i(){var t;return So(this,i),(t=r.apply(this,arguments)).initialTextWidth=100,t.initialTextHeight=100,t.squarePadding=2,t.visualizationTextPadding=4,t.fontSize=14,t.labelColor="#404040",t.highlightSelection=!0,t.highlightFontSize=16,t.highlightFontColor="black",t.className="heatmap",t.animationsEnabled=!0,t.animationDuration=2e3,t.transition=io.easeInEaseOutCubic,t.minColor="#EEEEEE",t.maxColor="#1565C0",t.colorBuckets=50,t.dendrogramEnabled=!1,t.dendrogramWidth=100,t.dendrogramLineWidth=1,t.dendrogramColor="#404040",t.clusteringAlgorithm=new go(new mo),t.reorderer=new xo,t.getTooltip=function(e,n,r){return"\n            <style>\n                .unipept-tooltip {\n                    padding: 10px;\n                    border-radius: 5px; \n                    background: rgba(0, 0, 0, 0.8); \n                    color: #fff;\n                }\n                \n                .unipept-tooltip div, .unipept-tooltip a {\n                    font-family: Roboto, 'Helvetica Neue', Helvetica, Arial, sans-serif;\n                }\n                \n                .unipept-tooltip div {\n                    font-weight: bold;\n                }\n            </style>\n            <div class=\"unipept-tooltip\">\n                <div>\n                    ".concat(t.getTooltipTitle(e,n,r),"\n                </div>\n                <a>\n                    ").concat(t.getTooltipText(e),"\n                </a>\n            </div>\n        ")},t.getTooltipTitle=function(t,e,n){return"".concat(n.name?n.name:"").concat(n.name?" and ":"").concat(e.name?e.name:"")},t.getTooltipText=function(t){return"Similarity: ".concat((100*t.value).toFixed(2),"%")},t}return i}(ao),Eo=function t(e,n){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.values=e,this.id=n};function ko(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t)){var n=[],r=!0,i=!1,o=void 0;try{for(var a,s=t[Symbol.iterator]();!(r=(a=s.next()).done)&&(n.push(a.value),!e||n.length!==e);r=!0);}catch(t){i=!0,o=t}finally{try{r||null==s.return||s.return()}finally{if(i)throw o}}return n}}(t,e)||function(t,e){if(t){if("string"==typeof t)return Oo(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Oo(t,e):void 0}}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Oo(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function Po(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var Co=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t)}var e,n;return e=t,(n=[{key:"preprocessFeatures",value:function(t){return Object.entries(t).map((function(t){var e=ko(t,2),n=e[0];return{name:e[1],idx:Number.parseInt(n)}}))}},{key:"preprocessValues",value:function(t,e,n,r){var i=mr(Nn(e),Nn(n)),o=Qr().domain([0,1]).range([0,1]).ticks(r),a=ei().domain([0,1]).range(o);return Object.entries(t).map((function(t){var e=ko(t,2),n=e[0],r=e[1];return Object.entries(r).map((function(t){var e=ko(t,2),r=e[0],o=e[1];if("number"==typeof o){var s=a(o);if(void 0===s)throw new Error("Invalid heatmap value given: "+o);return{value:o,rowId:Number.parseInt(n),columnId:Number.parseInt(r),color:i(s)}}return o}))}))}},{key:"orderPerColor",value:function(t){for(var e,n=new Map,r=0;r<t.length;r++)for(var i=0;i<t[r].length;i++){var o=t[r][i].color;n.has(o)||n.set(o,[]),null===(e=n.get(o))||void 0===e||e.push([r,i])}return n}}])&&Po(e.prototype,n),t}();function Ro(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}n(8594),n(5666);var Io=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.context=e}var e,n;return e=t,(n=[{key:"renderLine",value:function(t,e,n,r,i,o){this.context.lineWidth=i,this.context.moveTo(t,e),this.context.lineTo(n,r),this.context.strokeStyle=o,this.context.stroke()}}])&&Ro(e.prototype,n),t}();function jo(t,e){var n;if("undefined"==typeof Symbol||null==t[Symbol.iterator]){if(Array.isArray(t)||(n=Lo(t))||e&&t&&"number"==typeof t.length){n&&(t=n);var r=0,i=function(){};return{s:i,n:function(){return r>=t.length?{done:!0}:{done:!1,value:t[r++]}},e:function(t){throw t},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,a=!0,s=!1;return{s:function(){n=t[Symbol.iterator]()},n:function(){var t=n.next();return a=t.done,t},e:function(t){s=!0,o=t},f:function(){try{a||null==n.return||n.return()}finally{if(s)throw o}}}}function No(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t)){var n=[],r=!0,i=!1,o=void 0;try{for(var a,s=t[Symbol.iterator]();!(r=(a=s.next()).done)&&(n.push(a.value),!e||n.length!==e);r=!0);}catch(t){i=!0,o=t}finally{try{r||null==s.return||s.return()}finally{if(i)throw o}}return n}}(t,e)||Lo(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Lo(t,e){if(t){if("string"==typeof t)return zo(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?zo(t,e):void 0}}function zo(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function Do(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function Fo(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var Uo=function(t,e,n,r){return new(n||(n=Promise))((function(i,o){function a(t){try{u(r.next(t))}catch(t){o(t)}}function s(t){try{u(r.throw(t))}catch(t){o(t)}}function u(t){t.done?i(t.value):function(t){return t instanceof n?t:new n((function(e){e(t)}))}(t.value).then(a,s)}u((r=r.apply(t,e||[])).next())}))},Bo=function(){function t(e,n,r,i){var o=this,a=arguments.length>4&&void 0!==arguments[4]?arguments[4]:new To;Do(this,t),this.tooltip=null,this.highlightedRow=-1,this.highlightedColumn=-1,this.animatingRows=!1,this.animatingCols=!1,this.clusteredHorizontal=!1,this.clusteredVertical=!1,this.lastZoomStatus={k:1,x:0,y:0},this.settings=this.fillOptions(a),this.element=e;var s=new Co;this.rows=s.preprocessFeatures(r),this.columns=s.preprocessFeatures(i),this.values=s.preprocessValues(n,this.settings.minColor,this.settings.maxColor,this.settings.colorBuckets),this.valuesPerColor=s.orderPerColor(this.values),this.settings.enableTooltips&&(this.tooltip=this.initTooltip()),this.pixelRatio=window.devicePixelRatio||1,this.originalViewPort={xTop:0,yTop:0,xBottom:this.settings.width,yBottom:this.settings.height},this.currentViewPort=this.originalViewPort,this.textWidth=this.settings.initialTextWidth,this.textHeight=this.settings.initialTextHeight,this.element.innerHTML="",this.visElement=ri(this.element).append("canvas").attr("width",this.pixelRatio*this.settings.width).attr("height",this.pixelRatio*this.settings.height).attr("style","width: ".concat(this.settings.width,"px; height: ").concat(this.settings.height,"px")).on("mouseover",(function(t){return o.tooltipMove(t)})).on("mousemove",(function(t){return o.tooltipMove(t)})).on("mouseout",(function(t){return o.tooltipMove(t)})).on("click",(function(t){return o.click(t)})),this.context=this.visElement.node().getContext("2d"),this.context.scale(this.pixelRatio,this.pixelRatio);var u=ro().extent([[0,0],[this.settings.width,this.settings.height]]).scaleExtent([.25,12]).on("zoom",(function(t){o.zoomed(t.transform)}));this.visElement.call(u),this.computeClusterRoots(),this.redraw()}var e,n;return e=t,(n=[{key:"fillOptions",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:void 0,e=new To;return Object.assign(e,t)}},{key:"reset",value:function(){this.redraw()}},{key:"cluster",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"all";return Uo(this,void 0,void 0,regeneratorRuntime.mark((function e(){var n,r,i,o,a,s,u,c,l,f,h,p,d,v,g,y,m,b,x,w,S,_,A,M,T,E,k,O,P,C,R,I,j,N,L,z,D,F,U,B=this;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(n=this.settings.animationsEnabled?this.settings.animationDuration/2:0,r=function(t,e){return new Promise((function(r){var i;requestAnimationFrame((function o(a){void 0===i&&(i=a);var s=a-i,u=B.settings.transition(s/n);B.redraw(t,e,u),s<n?requestAnimationFrame(o):r()}))}))},i=new Co,o=Array.from(Array(this.rows.length).keys()),a=new Array(o.length),"all"!==t&&"rows"!==t||this.clusteredVertical){e.next=23;break}for(this.clusteredVertical=!0,o=this.determineOrder(this.rowClusterRoot),s=0,u=Object.entries(o);s<u.length;s++)c=No(u[s],2),l=c[0],f=c[1],a[f]=Number.parseInt(l);return h=Array.from(Array(this.columns.length).keys()),this.animatingRows=!0,e.next=13,r(a,h);case 13:this.animatingRows=!1,p=[],d=jo(o);try{for(d.s();!(v=d.n()).done;)g=v.value,p.push(this.values[g])}catch(t){d.e(t)}finally{d.f()}y=[],m=jo(o);try{for(m.s();!(b=m.n()).done;)x=b.value,y.push(this.rows[x])}catch(t){m.e(t)}finally{m.f()}this.rows=y,this.values=p,this.valuesPerColor=i.orderPerColor(this.values);case 23:if(w=Array.from(Array(this.columns.length).keys()),S=new Array(w.length),"all"!==t&&"columns"!==t||this.clusteredHorizontal){e.next=42;break}for(this.clusteredHorizontal=!0,w=this.determineOrder(this.colClusterRoot),_=0,A=Object.entries(w);_<A.length;_++)M=No(A[_],2),T=M[0],E=M[1],S[E]=Number.parseInt(T);return k=Array.from(Array(this.rows.length).keys()),this.animatingCols=!0,e.next=33,r(k,S);case 33:for(this.animatingCols=!1,O=[],P=0,C=k;P<C.length;P++){R=C[P],I=[],j=jo(w);try{for(j.s();!(N=j.n()).done;)L=N.value,I.push(this.values[R][L])}catch(t){j.e(t)}finally{j.f()}O.push(I)}z=[],D=jo(w);try{for(D.s();!(F=D.n()).done;)U=F.value,z.push(this.columns[U])}catch(t){D.e(t)}finally{D.f()}this.columns=z,this.values=O,this.valuesPerColor=i.orderPerColor(this.values);case 42:this.redraw();case 43:case"end":return e.stop()}}),e,this)})))}},{key:"computeClusterRoots",value:function(){var t=this,e=this.settings.clusteringAlgorithm,n=this.settings.reorderer,r=this.rows.map((function(e,n){return new Eo(t.values[n].filter((function(t){return t.rowId==e.idx})).map((function(t){return t.value})),e.idx)}));this.rowClusterRoot=n.reorder(e.cluster(r)),this.verticalNodesPerDepth=this.bfsNodesPerDepth(this.rowClusterRoot);var i=this.columns.map((function(e,n){return new Eo(t.values.map((function(t){return t[n].value})),e.idx)}));this.colClusterRoot=n.reorder(e.cluster(i)),this.horizontalNodesPerDepth=this.bfsNodesPerDepth(this.colClusterRoot)}},{key:"resize",value:function(t,e){this.settings.width=t,this.settings.height=e,this.visElement.attr("height",this.pixelRatio*e),this.visElement.attr("width",this.pixelRatio*t),this.visElement.attr("style","width: ".concat(this.settings.width,"px; height: ").concat(this.settings.height,"px")),this.context.scale(this.pixelRatio,this.pixelRatio),this.originalViewPort={xTop:0,yTop:0,xBottom:t,yBottom:e},this.zoomed(this.lastZoomStatus)}},{key:"toSVG",value:function(){var t,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:14,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:20,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:2,i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:4,o=n,a="",s=jo(this.valuesPerColor);try{for(s.s();!(t=s.n()).done;){var u,c=No(t.value,2),l=c[0],f=c[1],h=jo(f);try{for(h.s();!(u=h.n()).done;){var p=No(u.value,2),d=p[0],v=p[1],g=v*(o+r),y=d*(o+r);a+='\n                    <rect width="'.concat(o,'" height="').concat(o,'" fill="').concat(l,'" x="').concat(g,'" y="').concat(y,'"></rect>\n                ')}}catch(t){h.e(t)}finally{h.f()}}}catch(t){s.e(t)}finally{s.f()}var m=new OffscreenCanvas(1,1),b=m.getContext("2d");b.font="".concat(e,"px 'Helvetica Neue', Helvetica, Arial, sans-serif");for(var x=o*this.columns.length+r*(this.columns.length-1)+i,w=Math.max((o-e)/2,0),S=x,_=0;_<this.rows.length;_++){var A=(o+r)*_+w;a+='\n                <text \n                    x="'.concat(x,'" \n                    y="').concat(A,'" \n                    font-size="').concat(e,'" \n                    dominant-baseline="hanging" \n                    fill="black"\n                    font-family="\'Helvetica Neue\', Helvetica, Arial, sans-serif"\n                >\n                    ').concat(this.rows[_].name,"\n                </text>\n            ");var M=b.measureText(this.rows[_].name).width+x;M>S&&(S=M)}for(var T=o*this.rows.length+r*(this.rows.length-1)+i,E=T,k=0;k<this.columns.length;k++){var O=(o+r)*k+w;a+='\n                <text \n                    x="'.concat(O,'" \n                    y="').concat(T,'" \n                    font-size="').concat(e,'" \n                    text-anchor="start" \n                    fill="black"\n                    transform="rotate(90, ').concat(O,", ").concat(T,')"\n                    font-family="\'Helvetica Neue\', Helvetica, Arial, sans-serif"\n                >\n                    ').concat(this.columns[k].name,"\n                </text>\n            ");var P=b.measureText(this.columns[k].name).width+T;P>E&&(E=P)}return'\n            <svg xmlns="http://www.w3.org/2000/svg" width="'.concat(Math.ceil(S),'" height="').concat(Math.ceil(E),'">\n                ').concat(a,"\n            </svg>\n        ")}},{key:"determineOrder",value:function(t){return t.values.map((function(t){return t.id}))}},{key:"determineSquareWidth",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.currentViewPort,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.textWidth,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:this.textHeight,r=this.determineDendrogramWidth(),i=t.xBottom-t.xTop-r-this.columns.length*this.settings.squarePadding-e,o=t.yBottom-t.yTop-r-this.rows.length*this.settings.squarePadding-n,a=Math.max(1,i/this.columns.length),s=Math.max(1,o/this.rows.length);return Math.min(a,s)}},{key:"determineDendrogramWidth",value:function(){return this.settings.dendrogramEnabled?this.settings.dendrogramWidth*this.lastZoomStatus.k:0}},{key:"computeTextStartX",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.currentViewPort,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.textWidth,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:this.textHeight;return t.xTop+this.determineDendrogramWidth()+this.determineSquareWidth(t,e,n)*this.columns.length+this.settings.squarePadding*(this.columns.length-1)+this.settings.visualizationTextPadding}},{key:"computeTextStartY",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.currentViewPort,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.textWidth,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:this.textHeight;return t.yTop+this.determineDendrogramWidth()+this.determineSquareWidth(t,e,n)*this.rows.length+this.settings.squarePadding*(this.rows.length-1)+this.settings.visualizationTextPadding}},{key:"zoomed",value:function(t){var e=t.k,n=t.x,r=t.y;this.lastZoomStatus={k:e,x:n,y:r};var i=n+this.computeTextStartX(this.originalViewPort,this.settings.initialTextWidth,this.settings.initialTextHeight)*e,o=r+this.computeTextStartY(this.originalViewPort,this.settings.initialTextWidth,this.settings.initialTextHeight)*e,a=function(t,n){return t>n?n:e>=1?Math.min(t,n):Math.max(t,n)};this.currentViewPort={xTop:n+this.originalViewPort.xTop*e,yTop:r+this.originalViewPort.yTop*e,xBottom:a(n+this.originalViewPort.xBottom*e,this.originalViewPort.xBottom),yBottom:a(r+this.originalViewPort.yBottom*e,this.originalViewPort.yBottom)},this.textWidth=this.currentViewPort.xBottom-i,this.textHeight=this.currentViewPort.yBottom-o,this.redraw()}},{key:"redraw",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:Array.from(Array(this.rows.length).keys()),e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:Array.from(Array(this.columns.length).keys()),n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:-1;this.redrawGrid(t,e,n),this.redrawRowTitles(t,n),this.redrawColumnTitles(e,n),this.redrawDendrogram(n)}},{key:"redrawGrid",value:function(t,e,n){-1===n&&(n=0);var r=this.determineSquareWidth(),i=this.determineDendrogramWidth();this.context.clearRect(0,0,this.settings.width,this.settings.height);var o,a=jo(this.valuesPerColor);try{for(a.s();!(o=a.n()).done;){var s=No(o.value,2),u=s[0],c=s[1];this.context.beginPath(),this.context.fillStyle=u;var l,f=jo(c);try{for(f.s();!(l=f.n()).done;){var h=No(l.value,2),p=h[0],d=h[1],v=this.currentViewPort.xTop+i+d*(r+this.settings.squarePadding),g=this.currentViewPort.yTop+i+p*(r+this.settings.squarePadding),y=this.currentViewPort.xTop+i+e[d]*(r+this.settings.squarePadding),m=this.currentViewPort.yTop+i+t[p]*(r+this.settings.squarePadding),b=v+(y-v)*n,x=g+(m-g)*n,w=b+(r+this.settings.squarePadding),S=x+(r+this.settings.squarePadding);w<0||b>this.settings.width||S<0||x>this.settings.height||(this.settings.highlightSelection&&p==this.highlightedRow&&d==this.highlightedColumn&&(this.context.save(),this.context.fillStyle=this.settings.maxColor,this.context.fillRect(b-this.settings.squarePadding,x-this.settings.squarePadding,r+2*this.settings.squarePadding,r+2*this.settings.squarePadding),this.context.restore()),this.context.fillRect(b,x,r,r))}}catch(t){f.e(t)}finally{f.f()}this.context.closePath()}}catch(t){a.e(t)}finally{a.f()}}},{key:"ellipsizeString",value:function(t,e){if(this.context.measureText(t).width>e){for(var n=t.length,r=t.substr(0,n)+"...";this.context.measureText(r).width>e&&n>0;)n--,r=t.substr(0,n)+"...";return 0===n?"":r}return t}},{key:"redrawRowTitles",value:function(t,e){-1===e&&(e=0);var n=this.determineSquareWidth(),r=this.determineDendrogramWidth(),i=Math.max(Math.floor((this.settings.fontSize+12)/(n+this.settings.squarePadding)),1),o=this.computeTextStartX(),a=Math.max((n-this.settings.fontSize)/2,0);this.context.save(),this.context.fillStyle=this.settings.labelColor,this.context.textBaseline="top",this.context.textAlign="start",this.context.font="".concat(this.settings.fontSize,"px Arial, sans-serif");for(var s=0;s<this.rows.length;s+=i){var u=this.rows[s];this.settings.highlightSelection&&s==this.highlightedRow&&(this.context.save(),this.context.fillStyle=this.settings.highlightFontColor,this.context.font="".concat(this.settings.highlightFontSize,"px 'Helvetica Neue', Helvetica, Arial, sans-serif"),a=Math.max((n-this.settings.highlightFontSize)/2,0));var c=this.currentViewPort.yTop+r+(n+this.settings.squarePadding)*s+a,l=c+(this.currentViewPort.yTop+r+(n+this.settings.squarePadding)*t[s]+a-c)*e;this.context.fillText(this.ellipsizeString(u.name,this.textWidth),o,l),this.settings.highlightSelection&&s==this.highlightedRow&&this.context.restore()}this.context.restore()}},{key:"redrawColumnTitles",value:function(t,e){-1===e&&(e=0);var n=this.determineSquareWidth(),r=this.determineDendrogramWidth(),i=Math.max(Math.floor((this.settings.fontSize+12)/(n+this.settings.squarePadding)),1),o=this.computeTextStartY(),a=Math.max((n-this.settings.fontSize)/2,0);this.context.save(),this.context.rotate(90*Math.PI/180),this.context.fillStyle=this.settings.labelColor,this.context.textBaseline="bottom",this.context.textAlign="start",this.context.font="".concat(this.settings.fontSize,"px Arial, sans-serif");for(var s=0;s<this.columns.length;s+=i){var u=this.columns[s];this.settings.highlightSelection&&s==this.highlightedColumn&&(this.context.save(),this.context.fillStyle=this.settings.highlightFontColor,this.context.font="".concat(this.settings.highlightFontSize,"px 'Helvetica Neue', Helvetica, Arial, sans-serif"),a=Math.max((n-this.settings.highlightFontSize)/2,0));var c=-(this.currentViewPort.xTop+r+(n+this.settings.squarePadding)*s+a),l=c+(-(this.currentViewPort.xTop+r+(n+this.settings.squarePadding)*t[s]+a)-c)*e;this.context.fillText(this.ellipsizeString(u.name,this.textHeight),o,l),this.settings.highlightSelection&&s==this.highlightedColumn&&this.context.restore()}this.context.restore()}},{key:"bfsNodesPerDepth",value:function(t){var e=[],n=[];for(n.push([t,0]);n.length>0;){var r=No(n.shift(),2),i=r[0],o=r[1];e.length<=o&&e.push([]),e[o].push(i),i.leftChild&&n.push([i.leftChild,o+1]),i.rightChild&&n.push([i.rightChild,o+1])}return e}},{key:"redrawDendrogram",value:function(t){this.settings.dendrogramEnabled&&(this.redrawHorizontalDendrogram(t),this.redrawVerticalDendrogram(t))}},{key:"computeDendrogramColor",value:function(t,e,n){return-1!==n&&e?mr(Nn("#d3d3d3"),Nn(this.settings.dendrogramColor))(n):t?this.settings.dendrogramColor:"#d3d3d3"}},{key:"redrawVerticalDendrogram",value:function(t){this.context.save();for(var e=this.computeDendrogramColor(this.clusteredVertical,this.animatingRows,t),n=this.determineSquareWidth(),r=this.settings.dendrogramWidth*this.lastZoomStatus.k,i=new Io(this.context),o=this.currentViewPort.yTop+r+n/2,a=new Map,s=this.determineOrder(this.rowClusterRoot),u=0;u<s.length;u++)a.set(s[u],[this.currentViewPort.xTop+r,u*(n+this.settings.squarePadding)+o]);for(var c=r/this.rows.length,l=this.currentViewPort.xTop+r-c,f=this.verticalNodesPerDepth.length-1;f>0;f--)for(var h=0;h<this.verticalNodesPerDepth[f].length;h+=2){var p=this.verticalNodesPerDepth[f][h],d=this.verticalNodesPerDepth[f][h+1],v=p.parent,g=No(a.get(p.id),2),y=g[0],m=g[1],b=No(a.get(d.id),2),x=b[0],w=b[1];if(this.context.beginPath(),i.renderLine(y,m,l,m,this.settings.dendrogramLineWidth,e),i.renderLine(x,w,l,w,this.settings.dendrogramLineWidth,e),i.renderLine(l,m,l,w,this.settings.dendrogramLineWidth,e),this.context.closePath(),v){var S=Math.min(m,w)+Math.abs(m-w)/2;a.set(v.id,[l,S])}l-=c}if(!this.clusteredVertical){this.context.rotate(-90*Math.PI/180),this.context.fillStyle=this.settings.labelColor;var _=24*this.lastZoomStatus.k;this.context.font="".concat(_,"px 'Helvetica Neue', Helvetica, Arial, sans-serif");var A=this.context.measureText("Click to cluster").width;this.context.fillText("Click to cluster",-(this.currentViewPort.yTop+r+this.rows.length*(n+this.settings.squarePadding)/2)-A/2,this.currentViewPort.xTop+r/2+_/2)}this.context.restore()}},{key:"redrawHorizontalDendrogram",value:function(t){this.context.save();for(var e=this.computeDendrogramColor(this.clusteredHorizontal,this.animatingCols,t),n=this.determineSquareWidth(),r=this.settings.dendrogramWidth*this.lastZoomStatus.k,i=new Io(this.context),o=this.currentViewPort.xTop+n/2+r,a=new Map,s=this.determineOrder(this.colClusterRoot),u=0;u<s.length;u++)a.set(s[u],[u*(n+this.settings.squarePadding)+o,this.currentViewPort.yTop+r]);for(var c=r/this.columns.length,l=this.currentViewPort.yTop+r-c,f=this.horizontalNodesPerDepth.length-1;f>0;f--)for(var h=0;h<this.horizontalNodesPerDepth[f].length;h+=2){var p=this.horizontalNodesPerDepth[f][h],d=this.horizontalNodesPerDepth[f][h+1],v=p.parent,g=No(a.get(p.id),2),y=g[0],m=g[1],b=No(a.get(d.id),2),x=b[0],w=b[1];if(this.context.beginPath(),i.renderLine(y,m,y,l,this.settings.dendrogramLineWidth,e),i.renderLine(x,w,x,l,this.settings.dendrogramLineWidth,e),i.renderLine(y,l,x,l,this.settings.dendrogramLineWidth,e),this.context.closePath(),v){var S=Math.min(y,x)+Math.abs(y-x)/2;a.set(v.id,[S,l])}l-=c}if(!this.clusteredHorizontal){this.context.fillStyle=this.settings.labelColor;var _=24*this.lastZoomStatus.k;this.context.font="".concat(_,"px 'Helvetica Neue', Helvetica, Arial, sans-serif");var A=this.context.measureText("Click to cluster").width;this.context.fillText("Click to cluster",this.currentViewPort.xTop+r+this.columns.length*(n+this.settings.squarePadding)/2-A/2,this.currentViewPort.yTop+r/2+_/2)}this.context.restore()}},{key:"initTooltip",value:function(){return ri("body").append("div").attr("class","tip").style("position","absolute").style("z-index","10").style("visibility","hidden")}},{key:"findRowAndColForPosition",value:function(t,e){var n=this.determineDendrogramWidth(),r=t-this.currentViewPort.xTop-n,i=e-this.currentViewPort.yTop-n,o=this.determineSquareWidth();return[Math.floor(i/(o+this.settings.squarePadding)),Math.floor(r/(o+this.settings.squarePadding))]}},{key:"tooltipMove",value:function(t){var e=t.target.getBoundingClientRect(),n=No(this.findRowAndColForPosition(t.clientX-e.left,t.clientY-e.top),2),r=n[0],i=n[1];if(r<0||r>=this.rows.length||i<0||i>=this.columns.length)return this.settings.enableTooltips&&this.tooltip&&this.tooltip.style("visibility","hidden"),this.highlightedRow=-1,this.highlightedColumn=-1,void(this.settings.highlightSelection&&this.redraw());this.highlightedRow=r,this.highlightedColumn=i,this.settings.highlightSelection&&this.redraw(),this.settings.enableTooltips&&this.tooltip&&this.tooltip.html(this.settings.getTooltip(this.values[r][i],this.rows[r],this.columns[i])).style("top",t.pageY+10+"px").style("left",t.pageX+10+"px").style("visibility","visible")}},{key:"click",value:function(t){if(this.settings.dendrogramEnabled){var e=this.determineDendrogramWidth(),n=this.determineSquareWidth(),r=t.target.getBoundingClientRect(),i=t.clientX-r.left,o=t.clientY-r.top;i>=this.currentViewPort.xTop&&i<=this.currentViewPort.xTop+e&&o>=this.currentViewPort.yTop+e&&o<=this.currentViewPort.yTop+e+this.rows.length*(n+this.settings.squarePadding)?this.cluster("rows"):i>=this.currentViewPort.xTop+e&&i<=this.currentViewPort.xTop+e+this.columns.length*(n+this.settings.squarePadding)&&o>=this.currentViewPort.yTop&&o<=this.currentViewPort.yTop+e&&this.cluster("columns")}}}])&&Fo(e.prototype,n),t}();function qo(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var Vo=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t)}var e,n;return e=t,(n=[{key:"getDistance",value:function(t){for(var e=[],n=0;n<t.length;n++){for(var r=[],i=0;i<=n;i++)r.push(this.getPearsonCorrelationBetween2Samples(t[n],t[i]));e.push(r)}return e}},{key:"getPearsonCorrelationBetween2Samples",value:function(t,e){for(var n=function(t,e){return t+e},r=t.reduce(n,0)/t.length,i=e.reduce(n,0)/e.length,o=0,a=0,s=0;s<t.length;s++)o+=(t[s]-r)*(e[s]-i),a+=Math.sqrt(Math.pow(t[s]-r,2))*Math.sqrt(Math.pow(e[s]-i,2));return 1-o/a}}])&&qo(e.prototype,n),t}(),Wo=function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t)};function Ho(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}Wo.DEFAULT_COLORS=["#f9f0ab","#e8e596","#f0e2a3","#ede487","#efd580","#f1cb82","#f1c298","#e8b598","#d5dda1","#c9d2b5","#aec1ad","#a7b8a8","#b49a3d","#b28647","#a97d32","#b68334","#d6a680","#dfad70","#a2765d","#9f6652","#b9763f","#bf6e5d","#af643c","#9b4c3f","#72659d","#8a6e9e","#8f5c85","#934b8b","#9d4e87","#92538c","#8b6397","#716084","#2e6093","#3a5988","#4a5072","#393e64","#aaa1cc","#e0b5c9","#e098b0","#ee82a2","#ef91ac","#eda994","#eeb798","#ecc099","#f6d5aa","#f0d48a","#efd95f","#eee469","#dbdc7f","#dfd961","#ebe378","#f5e351"],Wo.FIXED_COLORS=["#1f77b4","#aec7e8","#ff7f0e","#ffbb78","#2ca02c","#98df8a","#d62728","#ff9896","#9467bd","#c5b0d5","#8c564b","#c49c94","#e377c2","#f7b6d2","#7f7f7f","#c7c7c7","#bcbd22","#dbdb8d","#17becf","#9edae5","#393b79","#5254a3","#6b6ecf","#9c9ede","#637939","#8ca252","#b5cf6b","#cedb9c","#8c6d31","#bd9e39","#e7ba52","#e7cb94","#843c39","#ad494a","#d6616b","#e7969c","#7b4173","#a55194","#ce6dbd","#de9ed6","#3182bd","#6baed6","#9ecae1","#c6dbef","#e6550d","#fd8d3c","#fdae6b","#fdd0a2","#31a354","#74c476","#a1d99b","#c7e9c0","#756bb1","#9e9ac8","#bcbddc","#dadaeb","#636363","#969696","#bdbdbd","#d9d9d9"],Wo.MATERIAL_DESIGN_COLORS=["#ef5350","#ec407a","#ab47bc","#7e57c2","#5c6bc0","#42a5f5","#29b6f6","#26c6da","#26a69a","#66bb6a","#9ccc65","#d4e157","#ffee58","#ffca28","#ffa726","#ff7043","#8d6e63"];var Yo=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t)}var e,n;return e=t,n=[{key:"stringHash",value:function(t){return t.split("").reduce((function(t,e){var n=(t<<5)-t+e.charCodeAt(0);return n&n}),0)}}],null&&Ho(e.prototype,null),n&&Ho(e,n),t}();function Go(t){return(Go="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Xo(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function $o(t,e){return($o=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function Zo(t,e){return!e||"object"!==Go(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function Ko(t){return(Ko=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var Jo=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&$o(t,e)}(i,t);var e,n,r=(e=i,n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,r=Ko(e);if(n){var i=Ko(this).constructor;t=Reflect.construct(r,arguments,i)}else t=r.apply(this,arguments);return Zo(this,t)});function i(){var t;return Xo(this,i),(t=r.apply(this,arguments)).radius=300,t.breadcrumbWidth=200,t.className="sunburst",t.useFixedColors=!1,t.colorPalette=Wo.DEFAULT_COLORS,t.fixedColorPalette=Wo.FIXED_COLORS,t.enableBreadcrumbs=!0,t.levels=4,t.animationDuration=1e3,t.rerootCallback=function(){},t.fixedColorHash=function(t){return Yo.stringHash(t.name)},t.getTooltip=function(e){return"\n            <style>\n                .unipept-tooltip {\n                    padding: 10px;\n                    border-radius: 5px; \n                    background: rgba(0, 0, 0, 0.8); \n                    color: #fff;\n                }\n                \n                .unipept-tooltip div, .unipept-tooltip a {\n                    font-family: Roboto, 'Helvetica Neue', Helvetica, Arial, sans-serif;\n                }\n                \n                .unipept-tooltip div {\n                    font-weight: bold;\n                }\n            </style>\n            <div class=\"unipept-tooltip\">\n                <div>\n                    ".concat(t.getTooltipTitle(e),"\n                </div>\n                <a>\n                    ").concat(t.getTooltipText(e),"\n                </a>\n            </div>\n        ")},t.getTooltipTitle=function(t){return t.name},t.getTooltipText=function(t){return"".concat(t.count," hits")},t.getLabel=function(t){return"empty"===t.name?"":t.name},t.getTitleText=t.getLabel,t}return i}(ao);function Qo(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function ta(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var ea=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t)}var n,r;return n=t,(r=[{key:"preprocessData",value:function(n){var r=[];if(n.children){var i,o=function(t,e){var n;if("undefined"==typeof Symbol||null==t[Symbol.iterator]){if(Array.isArray(t)||(n=function(t,e){if(t){if("string"==typeof t)return Qo(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Qo(t,e):void 0}}(t))||e&&t&&"number"==typeof t.length){n&&(t=n);var r=0,i=function(){};return{s:i,n:function(){return r>=t.length?{done:!0}:{done:!1,value:t[r++]}},e:function(t){throw t},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,a=!0,s=!1;return{s:function(){n=t[Symbol.iterator]()},n:function(){var t=n.next();return a=t.done,t},e:function(t){s=!0,o=t},f:function(){try{a||null==n.return||n.return()}finally{if(s)throw o}}}}(n.children);try{for(o.s();!(i=o.n()).done;){var a=i.value;r.push(this.preprocessData(a))}}catch(t){o.e(t)}finally{o.f()}}return r.length>0&&0!==n.count&&r.push(new e(-1,"empty",[],n.count,n.selfCount)),new e(n.id||++t.idCounter,n.name||"",r,n.count,n.selfCount,n.extra)}}])&&ta(n.prototype,r),t}();function na(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}ea.idCounter=0;var ra=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t)}var e,n;return e=t,n=[{key:"initTooltip",value:function(){return ri("body").append("div").attr("class","tip").style("position","absolute").style("z-index","10").style("visibility","hidden")}}],null&&na(e.prototype,null),n&&na(e,n),t}();function ia(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var oa=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t)}var e,n;return e=t,n=[{key:"isParentOf",value:function(e,n,r){return!(n.depth>=r)&&(e===n||!!e.children&&e.children.some((function(e){return t.isParentOf(e,n,r)})))}}],null&&ia(e.prototype,null),n&&ia(e,n),t}();function aa(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var sa=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t)}var e,n;return e=t,n=[{key:"getReadableColorFor",value:function(e){var n="#000";try{n=t.brightness(Oe(e))<125?"#eee":"#000"}catch(t){}return n}},{key:"brightness",value:function(t){return.299*t.r+.587*t.g+.114*t.b}}],null&&aa(e.prototype,null),n&&aa(e,n),t}();function ua(t){return function(t){if(Array.isArray(t))return ca(t)}(t)||function(t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t))return Array.from(t)}(t)||function(t,e){if(t){if("string"==typeof t)return ca(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?ca(t,e):void 0}}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ca(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function la(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function fa(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var ha=function(t,e,n,r){return new(n||(n=Promise))((function(i,o){function a(t){try{u(r.next(t))}catch(t){o(t)}}function s(t){try{u(r.throw(t))}catch(t){o(t)}}function u(t){t.done?i(t.value):function(t){return t instanceof n?t:new n((function(e){e(t)}))}(t.value).then(a,s)}u((r=r.apply(t,e||[])).next())}))},pa=function(){function t(e,n){var r=this,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:new Jo;la(this,t),this.element=e,this.colorCounter=-1,this.currentMaxLevel=4,this.arcData=[],this.textData=[],this.previousRoot=null,this.previousMaxLevel=this.currentMaxLevel,this.settings=this.fillOptions(i);var o=new ea,a=o.preprocessData(n);this.settings.enableTooltips&&(this.tooltip=ra.initTooltip()),this.currentMaxLevel=this.settings.levels,this.xScale=Qr().range([0,2*Math.PI]),this.yScale=Qr().domain([0,1]).range([0,this.settings.radius]);var s=Hn(a);s.sum((function(t){return t.children.length>0?0:t.selfCount}));var u=Qn();this.data=u(s).descendants(),this.arc=Ri().startAngle((function(t){return Math.max(0,Math.min(2*Math.PI,r.xScale(t.x0)))})).endAngle((function(t){return Math.max(0,Math.min(2*Math.PI,r.xScale(t.x1)))})).innerRadius((function(t){return Math.max(0,t.y0?r.yScale(t.y0):t.y0)})).outerRadius((function(t){return Math.max(0,r.yScale(t.y1)+1)})),this.initCss(),this.element.innerHTML="",this.breadCrumbs=ri(this.element).append("div").attr("id",Math.floor(Math.random()*Math.pow(2,16))+"-breadcrumbs").attr("class","sunburst-breadcrumbs").append("ul");var c=ri(this.element).append("svg").attr("version","1.1").attr("xmlns","http://www.w3.org/2000/svg").attr("viewBox","0 0 ".concat(this.settings.width," ").concat(this.settings.height)).attr("width",this.settings.width).attr("height",this.settings.height).attr("overflow","hidden").style("font-family","'Helvetica Neue', Helvetica, Arial, sans-serif");c.append("style").attr("type","text/css").html(".hidden{ visibility: hidden;}"),this.visGElement=c.append("g").attr("transform","translate("+this.settings.radius+","+this.settings.radius+")"),this.reset()}var e,n;return e=t,(n=[{key:"reset",value:function(){this.click(this.data[0])}},{key:"fillOptions",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:void 0,e=new Jo;return Object.assign(e,t)}},{key:"maxY",value:function(t){var e=this;return t.children?Math.max.apply(Math,ua(t.children.map((function(t){return e.maxY(t)})))):t.y1}},{key:"color",value:function(t){var e=this;if("empty"===t.name)return"white";if(this.settings.useFixedColors)return this.settings.fixedColorPalette[Math.abs(this.settings.fixedColorHash(t))%this.settings.fixedColorPalette.length];if(t.children.length>0){var n=t.children.map((function(t){return e.color(t)})),r=Le(n[0]),i=Le(n[1]);return 1===t.children.length||"empty"===t.children[1].name?Le(r.h,r.s,.98*r.l):Le((r.h+i.h)/2,(r.s+i.s)/2,(r.l+i.l)/2)}return t.extra.color||(t.extra.color=this.getColor()),t.extra.color}},{key:"getColor",value:function(){return this.colorCounter=(this.colorCounter+1)%this.settings.colorPalette.length,this.settings.colorPalette[this.colorCounter]}},{key:"initCss",value:function(){var t=this.settings.className;this.element.className+=" "+t;var e=this.element.ownerDocument.createElement("style");e.appendChild(this.element.ownerDocument.createTextNode("\n.".concat(t," {\n    font-family: Roboto,'Helvetica Neue',Helvetica,Arial,sans-serif;\n    width: ").concat(this.settings.width+this.settings.breadcrumbWidth,"px;\n}\n.").concat(t," .sunburst-breadcrumbs {\n    width: 176px;\n    float: right;\n    margin-right: 15px;\n    margin-top: 10px;\n    padding-left: 5px;\n}\n.").concat(t," .sunburst-breadcrumbs ul {\n    padding-left: 0;\n    list-style: none;\n}\n.").concat(t," .sunburst-breadcrumbs .crumb {\n    margin-bottom: 5px;\n    cursor: pointer;\n}\n.").concat(t," .sunburst-breadcrumbs .crumb svg {\n    float: left;\n    margin-right: 3px;\n}\n.").concat(t," .sunburst-breadcrumbs .crumb p {\n    white-space: nowrap;\n    text-overflow: ellipsis;\n    overflow: hidden;\n    margin: 0;\n    font-size: 14px;\n}\n.").concat(t," .sunburst-breadcrumbs .crumb .percentage {\n    font-size: 11px;\n}"))),this.element.ownerDocument.head.appendChild(e)}},{key:"arcTween",value:function(t,e){var n=Math.min(this.maxY(t),t.y0+e.settings.levels*(t.y1-t.y0)),r=yr(e.xScale.domain(),[t.x0,t.x1]),i=yr(e.yScale.domain(),[t.y0,n]),o=yr(e.yScale.range(),[t.y0?20:0,e.settings.radius]);return function(t){return function(n){return e.xScale.domain(r(n)),e.yScale.domain(i(n)).range(o(n)),e.arc(t)}}}},{key:"tooltipIn",value:function(t,e){this.settings.enableTooltips&&this.tooltip&&e.depth<this.currentMaxLevel&&"empty"!==e.data.name&&this.tooltip.html(this.settings.getTooltip(e.data)).style("top",t.pageY+10+"px").style("left",t.pageX+10+"px").style("visibility","visible")}},{key:"tooltipMove",value:function(t,e){this.settings.enableTooltips&&this.tooltip&&this.tooltip.style("top",t.pageY+10+"px").style("left",t.pageX+10+"px")}},{key:"tooltipOut",value:function(t,e){this.settings.enableTooltips&&this.tooltip&&this.tooltip.style("visibility","hidden")}},{key:"computeAvailableSpace",value:function(t){return 2*Math.max(0,this.yScale(t.y1)+1)*Math.PI*(Math.max(0,Math.min(2*Math.PI,this.xScale(t.x1))-Math.max(0,Math.min(2*Math.PI,this.xScale(t.x0))))/(2*Math.PI))}},{key:"click",value:function(t){"empty"===t.data.name||this.previousRoot&&this.previousRoot.data.id===t.data.id||(this.previousRoot=t,this.settings.enableBreadcrumbs&&this.setBreadcrumbs(t),this.settings.rerootCallback&&this.settings.rerootCallback(t.data),this.currentMaxLevel=t.depth+this.settings.levels,this.renderArcs(t),this.renderText(t))}},{key:"renderArcs",value:function(t){return ha(this,void 0,void 0,regeneratorRuntime.mark((function e(){var n,r,i,o,a=this;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r=this.data.filter((function(e){return oa.isParentOf(t,e,a.currentMaxLevel+2)})),t.parent&&r.push(t.parent),i=r.filter((function(t){return!a.arcData.includes(t)})),o=(n=this.arcData).concat.apply(n,ua(i)),this.visGElement.selectAll("path").data([]).exit().remove(),this.path=this.visGElement.selectAll("path").data(o).enter().insert("path").attr("class","arc").attr("id",(function(t,e){return"path-"+e})).attr("d",this.arc).attr("fill-rule","evenodd").style("fill",(function(t){return a.color(t.data)})).attr("fill-opacity",(function(t){return t.depth>=a.previousMaxLevel?.2:1})).on("click",(function(t,e){e.depth<a.currentMaxLevel&&a.click(e)})).on("mouseover",(function(t,e){return a.tooltipIn(t,e)})).on("mousemove",(function(t,e){return a.tooltipMove(t,e)})).on("mouseout",(function(t,e){return a.tooltipOut(t,e)})),e.next=8,new Promise((function(e){a.path.transition().duration(a.settings.animationDuration).attrTween("d",a.arcTween(t,a)).attr("class",(function(t){return t.depth>=a.currentMaxLevel?"arc toHide":"arc"})).attr("fill-opacity",(function(t){return t.depth>=a.currentMaxLevel?.2:1})).on("end",(function(){e()}))}));case 8:this.previousMaxLevel=this.currentMaxLevel,this.arcData=r;case 10:case"end":return e.stop()}}),e,this)})))}},{key:"renderText",value:function(t){return ha(this,void 0,void 0,regeneratorRuntime.mark((function e(){var n,r,i,o,a,s,u,c,l=this;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r=this.data.filter((function(e){return oa.isParentOf(t,e,l.currentMaxLevel)})),i=r.filter((function(t){return!l.textData.includes(t)})),o=(n=this.textData).concat.apply(n,ua(i)),t.parent&&o.splice(o.indexOf(t.parent),1),a=this,(s="undefined"!=typeof OffscreenCanvas)&&(c=new OffscreenCanvas(1,1),(u=c.getContext("2d")).font=u.font="16px 'Helvetica Neue', Helvetica, Arial, sans-serif"),this.visGElement.selectAll("text").data([]).exit().remove(),this.text=this.visGElement.selectAll("text").data(o).enter().append("text").style("fill",(function(t){return sa.getReadableColorFor(l.color(t.data))})).style("fill-opacity",0).style("font-family","font-family: Helvetica, 'Super Sans', sans-serif").style("pointer-events","none").attr("dy",".2em").text((function(t){return l.settings.getLabel(t.data)})).style("font-size",(function(t){var e=s?u.measureText(this.textContent).width:this.getComputedTextLength();return Math.floor(Math.min(a.settings.radius/a.settings.levels/e*10+1,12))+"px"})),e.next=11,new Promise((function(e){l.text.transition().duration(l.settings.animationDuration).attrTween("text-anchor",(function(t){return function(e){return l.xScale(t.x0+(t.x1-t.x0)/2)>Math.PI?"end":"start"}})).attrTween("dx",(function(t){return function(e){return l.xScale(t.x0+(t.x1-t.x0)/2)>Math.PI?"-4px":"4px"}})).attrTween("transform",(function(t){return function(e){var n=180*l.xScale(t.x0+(t.x1-t.x0)/2)/Math.PI-90;return"rotate(".concat(n,")translate(").concat(l.yScale(t.y0),")rotate(").concat(n>90?-180:0,")")}})).styleTween("fill-opacity",(function(t){var e=Number.parseInt(ri(this).style("font-size").replace("px",""));return function(n){return a.computeAvailableSpace(t)>e?n.toString():"0"}})).on("end",(function(n){var r=a.computeAvailableSpace(n),i=ri(this);i.style("visibility",r>Number.parseInt(i.style("font-size").replace("px",""))&&oa.isParentOf(t,n,a.currentMaxLevel)?"visible":"hidden"),e()}))}));case 11:this.textData=r;case 12:case"end":return e.stop()}}),e,this)})))}},{key:"setBreadcrumbs",value:function(t){for(var e=this,n=[],r=t;r;)n.push(r),r=r.parent;n.reverse().shift();var i=Ri().innerRadius(0).outerRadius(15).startAngle(0).endAngle((function(t){return 2*Math.PI*t.data.count/t.parent.data.count}));this.breadCrumbs.selectAll(".crumb").data(n).enter().append("li").on("click",(function(t,n){e.click(n.parent)})).attr("class","crumb").style("opacity","0").attr("title",(function(t){return e.settings.getTitleText(t.data)})).html((function(t){var e;return"\n<p class='name'>".concat(t.data.name,"</p>\n<p class='percentage'>").concat(Math.round(100*t.data.count/t.parent.data.count),"% of ").concat(null===(e=t.parent)||void 0===e?void 0:e.data.name,"</p>")})).insert("svg",":first-child").attr("width",30).attr("height",30).append("path").attr("d",i).attr("transform","translate(15, 15)").attr("fill",(function(t){return e.color(t.data)})),this.breadCrumbs.selectAll(".crumb").transition().duration(this.settings.animationDuration).style("opacity","1"),this.breadCrumbs.selectAll(".crumb").data(n).exit().transition().duration(this.settings.animationDuration).style("opacity","0").remove()}}])&&fa(e.prototype,n),t}();function da(t){return(da="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function va(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function ga(t,e){return(ga=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function ya(t,e){return!e||"object"!==da(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function ma(t){return(ma=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var ba=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&ga(t,e)}(i,t);var e,n,r=(e=i,n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,r=ma(e);if(n){var i=ma(this).constructor;t=Reflect.construct(r,arguments,i)}else t=r.apply(this,arguments);return ya(this,t)});function i(){var t;return va(this,i),(t=r.apply(this,arguments)).className="treemap",t.levels=void 0,t.labelHeight=10,t.colorRoot="#104B7D",t.colorLeaf="#fdffcc",t.colorBreadcrumbs="#FF8F00",t.rerootCallback=function(){},t.getBreadcrumbTooltip=function(t){return t.name},t.getTooltip=function(e){return"\n            <style>\n                .unipept-tooltip {\n                    padding: 10px;\n                    border-radius: 5px; \n                    background: rgba(0, 0, 0, 0.8); \n                    color: #fff;\n                }\n                \n                .unipept-tooltip div, .unipept-tooltip a {\n                    font-family: Roboto, 'Helvetica Neue', Helvetica, Arial, sans-serif;\n                }\n                \n                .unipept-tooltip div {\n                    font-weight: bold;\n                }\n            </style>\n            <div class=\"unipept-tooltip\">\n                <div>\n                    ".concat(t.getTooltipTitle(e),"\n                </div>\n                <a>\n                    ").concat(t.getTooltipText(e),"\n                </a>\n            </div>\n        ")},t.getTooltipTitle=function(t){return t.name},t.getTooltipText=function(t){return"".concat(t.count," hits")},t.getLabel=function(t){return t.name},t.getLevel=function(t){return t.depth},t}return i}(ao);function xa(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function wa(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var Sa=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t)}var n,r;return n=t,(r=[{key:"preprocessData",value:function(n){var r=[];if(n.children){var i,o=function(t,e){var n;if("undefined"==typeof Symbol||null==t[Symbol.iterator]){if(Array.isArray(t)||(n=function(t,e){if(t){if("string"==typeof t)return xa(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?xa(t,e):void 0}}(t))||e&&t&&"number"==typeof t.length){n&&(t=n);var r=0,i=function(){};return{s:i,n:function(){return r>=t.length?{done:!0}:{done:!1,value:t[r++]}},e:function(t){throw t},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,a=!0,s=!1;return{s:function(){n=t[Symbol.iterator]()},n:function(){var t=n.next();return a=t.done,t},e:function(t){s=!0,o=t},f:function(){try{a||null==n.return||n.return()}finally{if(s)throw o}}}}(n.children);try{for(o.s();!(i=o.n()).done;){var a=i.value;r.push(this.preprocessData(a))}}catch(t){o.e(t)}finally{o.f()}}return new e(n.id||++t.idCounter,n.name||"",r,n.count,n.selfCount,n.extra)}}])&&wa(n.prototype,r),t}();function _a(t,e){var n;if("undefined"==typeof Symbol||null==t[Symbol.iterator]){if(Array.isArray(t)||(n=function(t,e){if(t){if("string"==typeof t)return Aa(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Aa(t,e):void 0}}(t))||e&&t&&"number"==typeof t.length){n&&(t=n);var r=0,i=function(){};return{s:i,n:function(){return r>=t.length?{done:!0}:{done:!1,value:t[r++]}},e:function(t){throw t},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,a=!0,s=!1;return{s:function(){n=t[Symbol.iterator]()},n:function(){var t=n.next();return a=t.done,t},e:function(t){s=!0,o=t},f:function(){try{a||null==n.return||n.return()}finally{if(s)throw o}}}}function Aa(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function Ma(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function Ta(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}Sa.idCounter=0;var Ea=function(){function t(e,n){var r,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:new ba;Ma(this,t),this.element=e,this.childParentRelations=new Map,this.nodeId=0,this.settings=this.fillOptions(i),this.settings.enableTooltips&&(this.tooltip=ra.initTooltip()),this.initCss();var o=new Sa,a=Hn(o.preprocessData(n));a.sum((function(t){return t.children.length>0?0:t.count})),a.sort((function(t,e){return e.value-t.value})),this.partition=hr(),this.partition.size([this.settings.width+1,this.settings.height+1]).paddingTop(this.settings.labelHeight),this.data=this.partition(a).descendants(),this.settings.levels||(this.settings.levels=this.data[0].height);var s,u=_a(this.data);try{for(u.s();!(s=u.n()).done;){var c=s.value;this.childParentRelations.set(c.data,null===(r=c.parent)||void 0===r?void 0:r.data)}}catch(t){u.e(t)}finally{u.f()}this.currentRoot=this.data[0],this.colorScale=Qr().domain([0,this.settings.levels]).range([this.settings.colorRoot,this.settings.colorLeaf]).interpolate(mr),this.breadCrumbs=ri(this.element).append("div").attr("class","breadcrumbs").style("position","relative").style("width",this.settings.width+"px").style("height","20px").style("background-color",this.settings.colorBreadcrumbs),this.treemap=ri(this.element).append("div").style("position","relative").style("width",this.settings.width+"px").style("height",this.settings.height+"px"),this.render(this.currentRoot)}var e,n;return e=t,(n=[{key:"resize",value:function(t,e){this.settings.width=t,this.settings.height=e,this.partition.size([t+1,e+1]),this.breadCrumbs.style("width",this.settings.width+"px"),this.treemap.style("width",this.settings.width+"px"),this.treemap.style("height",this.settings.height+"px"),this.render(this.currentRoot,!1)}},{key:"fillOptions",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:void 0,e=new ba;return Object.assign(e,t)}},{key:"initCss",value:function(){var t=this.settings.className;this.element.className+=" "+t;var e=this.element.ownerDocument.createElement("style");e.appendChild(this.element.ownerDocument.createTextNode("\n            .".concat(t," {\n                font-family: Arial,sans-serif;\n            }\n            .").concat(t," .node {\n                font-size: 9px;\n                line-height: 10px;\n                overflow: hidden;\n                position: absolute;\n                text-indent: 2px;\n                text-align: center;\n                text-overflow: ellipsis;\n                cursor: pointer;\n            }\n            .").concat(t," .node:hover {\n                outline: 1px solid white;\n            }\n            .").concat(t," .breadcrumbs {\n                font-size: 11px;\n                line-height: 20px;\n                padding-left: 5px;\n                font-weight: bold;\n                color: white;\n                box-sizing: border-box;\n            }\n            .full-screen .").concat(t," .breadcrumbs {\n                width: 100% !important;\n            }\n            .").concat(t," .crumb {\n                cursor: pointer;\n            }\n            .").concat(t," .crumb .link:hover {\n                text-decoration: underline;\n            }\n            .").concat(t,' .breadcrumbs .crumb + .crumb::before {\n                content: " > ";\n                cursor: default;\n            }\n        '))),this.element.ownerDocument.head.append(e)}},{key:"render",value:function(t){var e=this,n=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];this.currentRoot=t,this.setBreadcrumbs();var r=Hn(t.data);r.sum((function(t){return t.children.length>0?0:t.count})),r.sort((function(t,e){return e.value-t.value}));var i=this.treemap.selectAll(".node").data(this.partition(r).descendants(),(function(t){return t.data.id||(t.data.id=++e.nodeId)})),o=i.enter().append("div").attr("class","node").style("background",(function(t){return e.colorScale(e.settings.getLevel(t))})).style("color",(function(t){return sa.getReadableColorFor(e.colorScale(e.settings.getLevel(t)).toString())})).style("left","0px").style("top","0px").style("width","0px").style("height","0px").text((function(t){return e.settings.getLabel(t.data)})).on("click",(function(t,n){return e.render(n)})).on("contextmenu",(function(t,n){t.preventDefault(),e.currentRoot.parent&&e.render(e.currentRoot.parent)})).on("mouseover",(function(t,n){return e.tooltipIn(t,n)})).on("mousemove",(function(t,n){return e.tooltipMove(t,n)})).on("mouseout",(function(t,n){return e.tooltipOut(t,n)}));o.merge(i).order().transition().call((function(t){t.style("left",(function(t){return t.x0+"px"})),t.style("top",(function(t){return t.y0+"px"})),t.style("width",(function(t){return Math.max(0,t.x1-t.x0-1)+"px"})),t.style("height",(function(t){return Math.max(0,t.y1-t.y0-1)+"px"}))})),i.exit().remove(),n&&this.settings.rerootCallback(this.currentRoot.data)}},{key:"setBreadcrumbs",value:function(){for(var t=this,e=[],n=this.currentRoot.data;n;)e.push(n),n=this.childParentRelations.get(n);e.reverse(),this.breadCrumbs.html(""),this.breadCrumbs.selectAll(".crumb").data(e).enter().append("span").attr("class","crumb").attr("title",(function(e){return t.settings.getBreadcrumbTooltip(e)})).html((function(t){return"<span class='link'>".concat(t.name,"</span>")})).on("click",(function(e,n){t.render(t.data.filter((function(t){return t.data.id===n.id}))[0])}))}},{key:"tooltipIn",value:function(t,e){this.settings.enableTooltips&&this.tooltip&&this.tooltip.html(this.settings.getTooltip(e.data)).style("top",t.pageY+10+"px").style("left",t.pageX+10+"px").style("visibility","visible")}},{key:"tooltipMove",value:function(t,e){this.settings.enableTooltips&&this.tooltip&&this.tooltip.style("top",t.pageY+10+"px").style("left",t.pageX+10+"px")}},{key:"tooltipOut",value:function(t,e){this.settings.enableTooltips&&this.tooltip&&this.tooltip.style("visibility","hidden")}}])&&Ta(e.prototype,n),t}();function ka(t){return(ka="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Oa(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function Pa(t,e){return(Pa=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function Ca(t,e){return!e||"object"!==ka(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function Ra(t){return(Ra=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var Ia=function t(){var e=new Map,n=[],r=[],i=ti;function o(t){var o=t+"",a=e.get(o);if(!a){if(i!==ti)return i;e.set(o,a=n.push(t))}return r[(a-1)%r.length]}return o.domain=function(t){if(!arguments.length)return n.slice();n=[],e=new Map;for(const r of t){const t=r+"";e.has(t)||e.set(t,n.push(r))}return o},o.range=function(t){return arguments.length?(r=Array.from(t),o):r.slice()},o.unknown=function(t){return arguments.length?(i=t,o):i},o.copy=function(){return t(n,r).unknown(i)},zr.apply(o,arguments),o}(ni),ja=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&Pa(t,e)}(i,t);var e,n,r=(e=i,n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,r=Ra(e);if(n){var i=Ra(this).constructor;t=Reflect.construct(r,arguments,i)}else t=r.apply(this,arguments);return Ca(this,t)});function i(){var t;return Oa(this,i),(t=r.apply(this,arguments)).minNodeSize=2,t.maxNodeSize=105,t.enableExpandOnClick=!0,t.enableAutoExpand=!1,t.autoExpandValue=.8,t.levelsToExpand=2,t.enableRightClick=!0,t.enableInnerArcs=!0,t.enableLabels=!0,t.nodeDistance=180,t.animationDuration=500,t.nodeFillColor=function(t){return t.isSelected()?t.children.length>0?t.getColor()||"#aaa":"#fff":"#aaa"},t.nodeStrokeColor=function(t){return t.isSelected()&&t.getColor()||"#aaa"},t.linkStrokeColor=function(t){return t.source.data.isSelected()?t.target.data.getColor():"#aaa"},t.colorProvider=function(t){return Ia(t.name)},t.getLabel=function(t){return t.name},t.getTooltip=function(e){return"\n            <style>\n                .unipept-tooltip {\n                    padding: 10px;\n                    border-radius: 5px; \n                    background: rgba(0, 0, 0, 0.8); \n                    color: #fff;\n                }\n                \n                .unipept-tooltip div, .unipept-tooltip a {\n                    font-family: Roboto, 'Helvetica Neue', Helvetica, Arial, sans-serif;\n                }\n                \n                .unipept-tooltip div {\n                    font-weight: bold;\n                }\n            </style>\n            <div class=\"unipept-tooltip\">\n                <div>\n                    ".concat(t.getTooltipTitle(e),"\n                </div>\n                <a>\n                    ").concat(t.getTooltipText(e),"\n                </a>\n            </div>\n        ")},t.getTooltipTitle=function(t){return t.name},t.getTooltipText=function(t){return"".concat(t.count," hits")},t}return i}(ao);function Na(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function La(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var za=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],n=arguments.length>1?arguments[1]:void 0;Na(this,t),this.data=e,this.comparator=n,this.heapify()}var e,n;return e=t,(n=[{key:"add",value:function(t){this.data.push(t),this.bubbleUp(this.data.length-1)}},{key:"peek",value:function(){return this.data[0]}},{key:"remove",value:function(){var t=this.data[0];return this.data.length>1?(this.data[0]=this.data.pop(),this.sink(0)):this.data.pop(),t}},{key:"clear",value:function(){this.data.splice(0,this.data.length)}},{key:"size",value:function(){return this.data.length}},{key:"heapify",value:function(){for(var t=Math.floor((this.data.length-2)/2);t>=0;t--)this.sink(t)}},{key:"bubbleUp",value:function(t){for(var e=this.data[t];t>0;){var n=Math.floor((t-1)/2),r=this.data[n];if(!(this.comparator(e,r)<0))break;this.data[t]=r,t=n}return this.data[t]=e,t}},{key:"sink",value:function(t){for(var e=this.data[t],n=this.data.length;2*t+1<n;){var r=2*t+1;if(r<n-1&&this.comparator(this.data[r+1],this.data[r])<0&&r++,this.comparator(e,this.data[r])<=0)break;this.data[t]=this.data[r],t=r}return this.data[t]=e,t}}])&&La(e.prototype,n),t}();function Da(t){return(Da="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Fa(t,e){var n;if("undefined"==typeof Symbol||null==t[Symbol.iterator]){if(Array.isArray(t)||(n=function(t,e){if(t){if("string"==typeof t)return Ua(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Ua(t,e):void 0}}(t))||e&&t&&"number"==typeof t.length){n&&(t=n);var r=0,i=function(){};return{s:i,n:function(){return r>=t.length?{done:!0}:{done:!1,value:t[r++]}},e:function(t){throw t},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,a=!0,s=!1;return{s:function(){n=t[Symbol.iterator]()},n:function(){var t=n.next();return a=t.done,t},e:function(t){s=!0,o=t},f:function(){try{a||null==n.return||n.return()}finally{if(s)throw o}}}}function Ua(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function Ba(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function qa(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function Va(t,e){return(Va=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function Wa(t,e){return!e||"object"!==Da(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function Ha(t){return(Ha=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var Ya=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&Va(t,e)}(a,t);var e,n,r,i,o=(r=a,i=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=Ha(r);if(i){var n=Ha(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return Wa(this,t)});function a(){var t;return Ba(this,a),(t=o.apply(this,arguments)).previousPosition={x:0,y:0},t.selected=!1,t.collapsed=!1,t.color="",t}return e=a,(n=[{key:"isCollapsed",value:function(){return this.collapsed}},{key:"setCollapsed",value:function(t){this.collapsed=t}},{key:"isSelected",value:function(){return this.selected}},{key:"getColor",value:function(){return this.color}},{key:"setSelected",value:function(t){this.selected=t;var e,n=Fa(this.children);try{for(n.s();!(e=n.n()).done;)e.value.setSelected(t)}catch(t){n.e(t)}finally{n.f()}}},{key:"collapseAll",value:function(){var t,e=Fa(this.children);try{for(e.s();!(t=e.n()).done;){var n=t.value;n.setCollapsed(!0),n.collapseAll()}}catch(t){e.e(t)}finally{e.f()}}},{key:"collapse",value:function(){var t,e=Fa(this.children);try{for(e.s();!(t=e.n()).done;)t.value.setCollapsed(!0)}catch(t){e.e(t)}finally{e.f()}}},{key:"expandAll",value:function(){this.expand(100)}},{key:"expand",value:function(t){if(t>0&&this.children.length>0){var e,n=Fa(this.children);try{for(n.s();!(e=n.n()).done;){var r=e.value;r.setCollapsed(!1),r.expand(t-1)}}catch(t){n.e(t)}finally{n.f()}}}},{key:"setColor",value:function(t){this.color=t;var e,n=Fa(this.children);try{for(n.s();!(e=n.n()).done;)e.value.setColor(t)}catch(t){n.e(t)}finally{n.f()}}}])&&qa(e.prototype,n),a}(e);function Ga(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function Xa(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var $a=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t)}var e,n;return e=t,(n=[{key:"preprocessData",value:function(e){var n=[];if(e.children){var r,i=function(t,e){var n;if("undefined"==typeof Symbol||null==t[Symbol.iterator]){if(Array.isArray(t)||(n=function(t,e){if(t){if("string"==typeof t)return Ga(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Ga(t,e):void 0}}(t))||e&&t&&"number"==typeof t.length){n&&(t=n);var r=0,i=function(){};return{s:i,n:function(){return r>=t.length?{done:!0}:{done:!1,value:t[r++]}},e:function(t){throw t},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,a=!0,s=!1;return{s:function(){n=t[Symbol.iterator]()},n:function(){var t=n.next();return a=t.done,t},e:function(t){s=!0,o=t},f:function(){try{a||null==n.return||n.return()}finally{if(s)throw o}}}}(e.children);try{for(i.s();!(r=i.n()).done;){var o=r.value;n.push(this.preprocessData(o))}}catch(t){i.e(t)}finally{i.f()}}return new Ya(e.id||++t.idCounter,e.name||"",n,e.count,e.selfCount,e.extra)}}])&&Xa(e.prototype,n),t}();function Za(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function Ka(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function Ja(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}$a.idCounter=0;var Qa=function(){function t(e,n){var r=this,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:new ja;Ka(this,t),this.element=e,this.nodeId=0,this.zoomScale=1,this.settings=this.fillOptions(i),this.settings.enableTooltips&&(this.tooltip=ra.initTooltip());var o=new $a,a=o.preprocessData(n),s=Hn(a);s.sum((function(t){return t.children.length>0?0:t.count})),this.widthScale=Qr().range([this.settings.minNodeSize,this.settings.maxNodeSize]),this.treeLayout=ar().nodeSize([2,10]).separation((function(t,e){if(t.data.isCollapsed()||e.data.isCollapsed())return 0;var n=(r.computeNodeSize(t)+r.computeNodeSize(e))/2+4;return t.parent===e.parent?n:n+4})),this.data=this.treeLayout(s).descendants(),this.root=this.data[0],this.element.innerHTML="",this.svg=ri(this.element).append("svg").attr("version","1.1").attr("xmlns","http://www.w3.org/2000/svg").attr("viewBox","0 0 ".concat(this.settings.width," ").concat(this.settings.height)).attr("width",this.settings.width).attr("height",this.settings.height).style("font-family","'Helvetica Neue', Helvetica, Arial, sans-serif"),this.zoomListener=ro().extent([[0,0],[this.settings.width,this.settings.height]]).scaleExtent([.1,3]).on("zoom",(function(t){r.zoomScale=t.transform.k,r.visElement.attr("transform",t.transform.toString())})),this.visElement=this.svg.call(this.zoomListener).append("g"),this.render(this.root)}var e,n;return e=t,(n=[{key:"fillOptions",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:void 0,e=new ja;return Object.assign(e,t)}},{key:"render",value:function(t){var e,n=this;this.widthScale.domain([0,t.data.count]),this.root=t,this.root.x=this.settings.height/2,this.root.y=0,this.root.data.setSelected(!0),null===(e=this.root.children)||void 0===e||e.forEach((function(t,e){t.data.setColor(n.settings.colorProvider(t.data))})),this.settings.enableExpandOnClick?(this.root.data.collapseAll(),this.initialExpand(this.root)):this.root.data.expandAll(),this.update(t),this.centerRoot(t)}},{key:"centerRoot",value:function(t){var e=this,n=[-t.y,-t.x],r=n[0],i=n[1];r=r*this.zoomScale+this.settings.width/4,i=i*this.zoomScale+this.settings.height/2,this.visElement.transition().duration(this.settings.animationDuration).attr("transform","translate(".concat(r,",").concat(i,")scale(").concat(this.zoomScale,")")).on("end",(function(){return e.zoomListener.transform(e.svg,Xi.translate(r,i).scale(e.zoomScale))}))}},{key:"initialExpand",value:function(t){var e,n;if(this.settings.enableAutoExpand){t.data.expand(1);for(var r=t.data.count*(this.settings.enableAutoExpand?this.settings.autoExpandValue:.8),i=new za(function(t){if(Array.isArray(t))return Za(t)}(n=t.children||[])||function(t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t))return Array.from(t)}(n)||function(t,e){if(t){if("string"==typeof t)return Za(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Za(t,e):void 0}}(n)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}(),(function(t,e){return e.data.count-t.data.count}));r>0&&i.size()>0;){var o=i.remove();r-=o.data.count,o.data.expand(1),null===(e=o.children)||void 0===e||e.forEach((function(t,e){i.add(t)}))}}else t.data.expand(this.settings.levelsToExpand)}},{key:"update",value:function(t){var e=this,n=this.treeLayout(this.root),r=n.descendants().reverse().filter((function(t){return!t.data.isCollapsed()})),i=n.links().filter((function(t){return!t.target.data.isCollapsed()&&!t.source.data.isCollapsed()}));r.forEach((function(t){return t.y=t.depth*e.settings.nodeDistance}));var o=this.visElement.selectAll("g.node").data(r,(function(t){return t.data.id||(t.data.id=++e.nodeId)})),a=o.enter().append("g").attr("class","node").style("cursor","pointer").attr("transform","translate(".concat(t.y||0,",").concat(t.data.previousPosition.x||0,")")).on("click",(function(t,n){return e.click(t,n)})).on("mouseover",(function(t,n){return e.tooltipIn(t,n)})).on("mouseout",(function(t,n){return e.tooltipOut(t,n)})).on("contextmenu",(function(t,n){return e.rightClick(t,n)})).merge(o);a.append("circle").attr("r",1e-6).style("stroke-width","1.5px").style("stroke",(function(t){return e.settings.nodeStrokeColor(t.data)})).style("fill",(function(t){return e.settings.nodeFillColor(t.data)}));var s=Qr().range([0,2*Math.PI]),u=Ri().innerRadius(0).outerRadius((function(t){return e.computeNodeSize(t)})).startAngle(0).endAngle((function(t){return s(t.data.selfCount/t.data.count)||0}));this.settings.enableInnerArcs&&a.append("path").attr("class","innerArc").attr("d",u).style("fill",(function(t){return e.settings.nodeStrokeColor(t.data)})).style("fill-opacity",0),this.settings.enableLabels&&a.append("text").attr("x",(function(t){return t.children?-10:10})).attr("dy",".35em").attr("text-anchor",(function(t){return t.children?"end":"start"})).text((function(t){return e.settings.getLabel(t.data)})).style("font","10px sans-serif").style("fill-opacity",1e-6);var c=a.transition().duration(this.settings.animationDuration).attr("transform",(function(t){return"translate(".concat(t.y,", ").concat(t.x,")")}));c.select("circle").attr("r",(function(t){return e.computeNodeSize(t)})).style("fill-opacity",(function(t){return t.children&&t.children[0].data.isCollapsed()?1:0})).style("stroke",(function(t){return e.settings.nodeStrokeColor(t.data)})).style("fill",(function(t){return e.settings.nodeFillColor(t.data)})),this.settings.enableInnerArcs&&c.select(".innerArc").style("fill-opacity",1),this.settings.enableLabels&&c.select("text").style("fill-opacity",1);var l=o.exit().transition().duration(this.settings.animationDuration).attr("transform",(function(e){return"translate(".concat(t.y,",").concat(t.x,")")})).remove();l.select("circle").attr("r",1e-6),l.select("path").style("fill-opacity",1e-6),l.select("text").style("fill-opacity",1e-6);var f=this.visElement.selectAll("path.link").data(i,(function(t){return t.target.data.id})),h=function(t){var e=Li,n=zi,r=ji,i=Ni,o=null;function a(){var a,s=Ii.call(arguments),u=e.apply(this,s),c=n.apply(this,s);if(o||(o=a=li()),t(o,+r.apply(this,(s[0]=u,s)),+i.apply(this,s),+r.apply(this,(s[0]=c,s)),+i.apply(this,s)),a)return o=null,a+""||null}return a.source=function(t){return arguments.length?(e=t,a):e},a.target=function(t){return arguments.length?(n=t,a):n},a.x=function(t){return arguments.length?(r="function"==typeof t?t:fi(+t),a):r},a.y=function(t){return arguments.length?(i="function"==typeof t?t:fi(+t),a):i},a.context=function(t){return arguments.length?(o=null==t?null:t,a):o},a}(Di).x((function(t){return t.y})).y((function(t){return t.x}));f.enter().insert("path","g").attr("class","link").style("fill","none").style("stroke-opacity","0.5").style("stroke-linecap","round").style("stroke",(function(t){return e.settings.linkStrokeColor(t)})).style("stroke-width",1e-6).attr("d",(function(e){var n={x:t.data.previousPosition.x,y:t.data.previousPosition.y};return h({source:n,target:n})})).merge(f).transition().duration(this.settings.animationDuration).attr("d",h).style("stroke",this.settings.linkStrokeColor).style("stroke-width",(function(t){return t.source.data.isSelected()?e.widthScale(t.target.data.count)+"px":"4px"})),f.exit().transition().duration(this.settings.animationDuration).style("stroke-width",1e-6).attr("d",(function(e){var n={x:t.x,y:t.y};return h({source:n,target:n})})).remove(),r.forEach((function(t){t.data.previousPosition={x:t.x,y:t.y}}))}},{key:"computeNodeSize",value:function(t){return t.data.isSelected()?this.widthScale(t.data.count)/2:2}},{key:"click",value:function(t,e){this.settings.enableExpandOnClick&&(t.defaultPrevented||(t.shiftKey?e.data.expandAll():e.children&&e.children.some((function(t){return!t.data.isCollapsed()}))?e.data.collapseAll():e.data.expand(this.settings.levelsToExpand),this.update(e),this.centerRoot(e)))}},{key:"tooltipIn",value:function(t,e){var n=this;this.settings.enableTooltips&&this.tooltip&&(this.tooltip.html(this.settings.getTooltip(e.data)).style("top",t.pageY+10+"px").style("left",t.pageX+10+"px"),this.tooltipTimer=window.setTimeout((function(){return n.tooltip.style("visibility","visible")}),1e3))}},{key:"tooltipOut",value:function(t,e){this.settings.enableTooltips&&this.tooltip&&(clearTimeout(this.tooltipTimer),this.tooltip.style("visibility","hidden"))}},{key:"rightClick",value:function(t,e){this.settings.enableRightClick&&this.render(e)}}])&&Ja(e.prototype,n),t}()})(),r})()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2VzL2luZGV4LmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hLWZ1bmN0aW9uLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hLXBvc3NpYmxlLXByb3RvdHlwZS5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYWRkLXRvLXVuc2NvcGFibGVzLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hZHZhbmNlLXN0cmluZy1pbmRleC5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYW4taW5zdGFuY2UuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FuLW9iamVjdC5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLW5hdGl2ZS5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLXZpZXctY29yZS5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1jb3B5LXdpdGhpbi5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktZmlsbC5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktZm9yLWVhY2guanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LWZyb20uanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LWluY2x1ZGVzLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1pdGVyYXRpb24uanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LWxhc3QtaW5kZXgtb2YuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1oYXMtc3BlY2llcy1zdXBwb3J0LmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1tZXRob2QtaXMtc3RyaWN0LmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1yZWR1Y2UuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LXNwZWNpZXMtY3JlYXRlLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jYWxsLXdpdGgtc2FmZS1pdGVyYXRpb24tY2xvc2luZy5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY2hlY2stY29ycmVjdG5lc3Mtb2YtaXRlcmF0aW9uLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jbGFzc29mLXJhdy5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY2xhc3NvZi5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY29sbGVjdGlvbi1zdHJvbmcuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NvbGxlY3Rpb24td2Vhay5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY29sbGVjdGlvbi5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY29weS1jb25zdHJ1Y3Rvci1wcm9wZXJ0aWVzLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jb3JyZWN0LWlzLXJlZ2V4cC1sb2dpYy5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY29ycmVjdC1wcm90b3R5cGUtZ2V0dGVyLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jcmVhdGUtaHRtbC5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY3JlYXRlLWl0ZXJhdG9yLWNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS1kZXNjcmlwdG9yLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2RhdGUtdG8taXNvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZGF0ZS10by1wcmltaXRpdmUuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2RlZmluZS1pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZGVmaW5lLXdlbGwta25vd24tc3ltYm9sLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9kZXNjcmlwdG9ycy5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZG9jdW1lbnQtY3JlYXRlLWVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2RvbS1pdGVyYWJsZXMuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2VuZ2luZS1pcy1pb3MuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2VuZ2luZS1pcy1ub2RlLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9lbmdpbmUtaXMtd2Vib3Mtd2Via2l0LmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9lbmdpbmUtdXNlci1hZ2VudC5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZW5naW5lLXY4LXZlcnNpb24uanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2VudW0tYnVnLWtleXMuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2V4cG9ydC5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZmFpbHMuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2ZpeC1yZWdleHAtd2VsbC1rbm93bi1zeW1ib2wtbG9naWMuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2ZsYXR0ZW4taW50by1hcnJheS5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZnJlZXppbmcuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dC5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZnVuY3Rpb24tYmluZC5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9nZXQtaXRlcmF0b3ItbWV0aG9kLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9nZXQtaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2dldC1zdWJzdGl0dXRpb24uanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaGFzLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9oaWRkZW4ta2V5cy5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaG9zdC1yZXBvcnQtZXJyb3JzLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9odG1sLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pZTgtZG9tLWRlZmluZS5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaWVlZTc1NC5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaW5kZXhlZC1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2luaGVyaXQtaWYtcmVxdWlyZWQuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2luc3BlY3Qtc291cmNlLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pbnRlcm5hbC1tZXRhZGF0YS5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLWFycmF5LWl0ZXJhdG9yLW1ldGhvZC5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLWZvcmNlZC5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtaW50ZWdlci5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtb2JqZWN0LmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1wdXJlLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1yZWdleHAuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2l0ZXJhdGUuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2l0ZXJhdG9yLWNsb3NlLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pdGVyYXRvcnMtY29yZS5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXRlcmF0b3JzLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9tYXRoLWV4cG0xLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9tYXRoLWZyb3VuZC5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvbWF0aC1sb2cxcC5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvbWF0aC1zaWduLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9taWNyb3Rhc2suanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL25hdGl2ZS1wcm9taXNlLWNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9uYXRpdmUtc3ltYm9sLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9uYXRpdmUtdXJsLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9uYXRpdmUtd2Vhay1tYXAuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL25ldy1wcm9taXNlLWNhcGFiaWxpdHkuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL25vdC1hLXJlZ2V4cC5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvbnVtYmVyLWlzLWZpbml0ZS5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvbnVtYmVyLXBhcnNlLWZsb2F0LmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9udW1iZXItcGFyc2UtaW50LmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtYXNzaWduLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtY3JlYXRlLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnRpZXMuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3IuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LW5hbWVzLWV4dGVybmFsLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcy5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktc3ltYm9scy5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWdldC1wcm90b3R5cGUtb2YuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1rZXlzLWludGVybmFsLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3Qta2V5cy5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LXByb3BlcnR5LWlzLWVudW1lcmFibGUuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1wcm90b3R5cGUtYWNjZXNzb3JzLWZvcmNlZC5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LXNldC1wcm90b3R5cGUtb2YuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC10by1hcnJheS5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LXRvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb3duLWtleXMuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3BhdGguanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3BlcmZvcm0uanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3Byb21pc2UtcmVzb2x2ZS5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcmVkZWZpbmUtYWxsLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9yZWRlZmluZS5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcmVnZXhwLWV4ZWMtYWJzdHJhY3QuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3JlZ2V4cC1leGVjLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9yZWdleHAtZmxhZ3MuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3JlZ2V4cC1zdGlja3ktaGVscGVycy5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zYW1lLXZhbHVlLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zZXQtZ2xvYmFsLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zZXQtc3BlY2llcy5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc2V0LXRvLXN0cmluZy10YWcuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NoYXJlZC1rZXkuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NoYXJlZC1zdG9yZS5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc2hhcmVkLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zcGVjaWVzLWNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zdHJpbmctaHRtbC1mb3JjZWQuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3N0cmluZy1tdWx0aWJ5dGUuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3N0cmluZy1wYWQtd2Via2l0LWJ1Zy5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc3RyaW5nLXBhZC5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc3RyaW5nLXB1bnljb2RlLXRvLWFzY2lpLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zdHJpbmctcmVwZWF0LmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zdHJpbmctdHJpbS1mb3JjZWQuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3N0cmluZy10cmltLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90YXNrLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90aGlzLW51bWJlci12YWx1ZS5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8tYWJzb2x1dGUtaW5kZXguanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLWluZGV4LmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdC5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8taW50ZWdlci5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8tbGVuZ3RoLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLW9mZnNldC5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8tcG9zaXRpdmUtaW50ZWdlci5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8tcHJpbWl0aXZlLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1zdHJpbmctdGFnLXN1cHBvcnQuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3R5cGVkLWFycmF5LWNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90eXBlZC1hcnJheS1jb25zdHJ1Y3RvcnMtcmVxdWlyZS13cmFwcGVycy5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdHlwZWQtYXJyYXktZnJvbS1zcGVjaWVzLWFuZC1saXN0LmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90eXBlZC1hcnJheS1mcm9tLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy91aWQuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3VzZS1zeW1ib2wtYXMtdWlkLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbC13cmFwcGVkLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbC5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvd2hpdGVzcGFjZXMuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hZ2dyZWdhdGUtZXJyb3IuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS1idWZmZXIuY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS1idWZmZXIuaXMtdmlldy5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LWJ1ZmZlci5zbGljZS5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmNvbmNhdC5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmNvcHktd2l0aGluLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZXZlcnkuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5maWxsLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmlsdGVyLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmluZC1pbmRleC5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZpbmQuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5mbGF0LW1hcC5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZsYXQuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5mb3ItZWFjaC5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZyb20uanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5pbmNsdWRlcy5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmluZGV4LW9mLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuaXMtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmpvaW4uanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5sYXN0LWluZGV4LW9mLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkubWFwLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkub2YuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5yZWR1Y2UtcmlnaHQuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5yZWR1Y2UuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5yZXZlcnNlLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuc2xpY2UuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5zb21lLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuc29ydC5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnNwZWNpZXMuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5zcGxpY2UuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS51bnNjb3BhYmxlcy5mbGF0LW1hcC5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnVuc2NvcGFibGVzLmZsYXQuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5kYXRhLXZpZXcuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5kYXRlLm5vdy5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmRhdGUudG8taXNvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmRhdGUudG8tanNvbi5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmRhdGUudG8tcHJpbWl0aXZlLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuZGF0ZS50by1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5mdW5jdGlvbi5iaW5kLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuZnVuY3Rpb24uaGFzLWluc3RhbmNlLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuZnVuY3Rpb24ubmFtZS5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmdsb2JhbC10aGlzLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuanNvbi5zdHJpbmdpZnkuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5qc29uLnRvLXN0cmluZy10YWcuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5tYXAuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5tYXRoLmFjb3NoLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMubWF0aC5hc2luaC5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm1hdGguYXRhbmguanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5tYXRoLmNicnQuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5tYXRoLmNsejMyLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMubWF0aC5jb3NoLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMubWF0aC5leHBtMS5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm1hdGguZnJvdW5kLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMubWF0aC5oeXBvdC5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm1hdGguaW11bC5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm1hdGgubG9nMTAuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5tYXRoLmxvZzFwLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMubWF0aC5sb2cyLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMubWF0aC5zaWduLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMubWF0aC5zaW5oLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMubWF0aC50YW5oLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMubWF0aC50by1zdHJpbmctdGFnLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMubWF0aC50cnVuYy5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm51bWJlci5jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm51bWJlci5lcHNpbG9uLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMubnVtYmVyLmlzLWZpbml0ZS5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm51bWJlci5pcy1pbnRlZ2VyLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMubnVtYmVyLmlzLW5hbi5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm51bWJlci5pcy1zYWZlLWludGVnZXIuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5udW1iZXIubWF4LXNhZmUtaW50ZWdlci5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm51bWJlci5taW4tc2FmZS1pbnRlZ2VyLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMubnVtYmVyLnBhcnNlLWZsb2F0LmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMubnVtYmVyLnBhcnNlLWludC5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm51bWJlci50by1maXhlZC5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm51bWJlci50by1wcmVjaXNpb24uanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuYXNzaWduLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmNyZWF0ZS5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5kZWZpbmUtZ2V0dGVyLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmRlZmluZS1wcm9wZXJ0aWVzLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmRlZmluZS1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5kZWZpbmUtc2V0dGVyLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmVudHJpZXMuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuZnJlZXplLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmZyb20tZW50cmllcy5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3IuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9ycy5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5nZXQtb3duLXByb3BlcnR5LW5hbWVzLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmdldC1wcm90b3R5cGUtb2YuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuaXMtZXh0ZW5zaWJsZS5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5pcy1mcm96ZW4uanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuaXMtc2VhbGVkLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmlzLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmtleXMuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QubG9va3VwLWdldHRlci5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5sb29rdXAtc2V0dGVyLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnByZXZlbnQtZXh0ZW5zaW9ucy5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5zZWFsLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnNldC1wcm90b3R5cGUtb2YuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudG8tc3RyaW5nLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnZhbHVlcy5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnBhcnNlLWZsb2F0LmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMucGFyc2UtaW50LmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMucHJvbWlzZS5hbGwtc2V0dGxlZC5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnByb21pc2UuYW55LmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMucHJvbWlzZS5maW5hbGx5LmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMucHJvbWlzZS5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnJlZmxlY3QuYXBwbHkuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5yZWZsZWN0LmNvbnN0cnVjdC5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnJlZmxlY3QuZGVmaW5lLXByb3BlcnR5LmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMucmVmbGVjdC5kZWxldGUtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5yZWZsZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvci5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnJlZmxlY3QuZ2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnJlZmxlY3QuZ2V0LmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMucmVmbGVjdC5oYXMuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5yZWZsZWN0LmlzLWV4dGVuc2libGUuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5yZWZsZWN0Lm93bi1rZXlzLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMucmVmbGVjdC5wcmV2ZW50LWV4dGVuc2lvbnMuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5yZWZsZWN0LnNldC1wcm90b3R5cGUtb2YuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5yZWZsZWN0LnNldC5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnJlZmxlY3QudG8tc3RyaW5nLXRhZy5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnJlZ2V4cC5jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnJlZ2V4cC5leGVjLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMucmVnZXhwLmZsYWdzLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMucmVnZXhwLnN0aWNreS5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnJlZ2V4cC50ZXN0LmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMucmVnZXhwLnRvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnNldC5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5hbmNob3IuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuYmlnLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLmJsaW5rLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLmJvbGQuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuY29kZS1wb2ludC1hdC5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5lbmRzLXdpdGguanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuZml4ZWQuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuZm9udGNvbG9yLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLmZvbnRzaXplLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLmZyb20tY29kZS1wb2ludC5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5pbmNsdWRlcy5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5pdGFsaWNzLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLml0ZXJhdG9yLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLmxpbmsuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcubWF0Y2gtYWxsLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLm1hdGNoLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnBhZC1lbmQuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcucGFkLXN0YXJ0LmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnJhdy5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5yZXBlYXQuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcucmVwbGFjZS1hbGwuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcucmVwbGFjZS5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5zZWFyY2guanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuc21hbGwuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuc3BsaXQuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuc3RhcnRzLXdpdGguanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuc3RyaWtlLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnN1Yi5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5zdXAuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcudHJpbS1lbmQuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcudHJpbS1zdGFydC5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy50cmltLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLmFzeW5jLWl0ZXJhdG9yLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLmRlc2NyaXB0aW9uLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLmhhcy1pbnN0YW5jZS5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC5pcy1jb25jYXQtc3ByZWFkYWJsZS5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC5pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC5tYXRjaC1hbGwuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zeW1ib2wubWF0Y2guanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zeW1ib2wucmVwbGFjZS5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC5zZWFyY2guanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zeW1ib2wuc3BlY2llcy5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC5zcGxpdC5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC50by1wcmltaXRpdmUuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zeW1ib2wudG8tc3RyaW5nLXRhZy5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC51bnNjb3BhYmxlcy5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmNvcHktd2l0aGluLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuZXZlcnkuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5maWxsLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuZmlsdGVyLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuZmluZC1pbmRleC5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmZpbmQuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5mbG9hdDMyLWFycmF5LmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuZmxvYXQ2NC1hcnJheS5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmZvci1lYWNoLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuZnJvbS5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmluY2x1ZGVzLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuaW5kZXgtb2YuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5pbnQxNi1hcnJheS5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmludDMyLWFycmF5LmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuaW50OC1hcnJheS5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5Lml0ZXJhdG9yLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuam9pbi5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5Lmxhc3QtaW5kZXgtb2YuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5tYXAuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5vZi5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LnJlZHVjZS1yaWdodC5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LnJlZHVjZS5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LnJldmVyc2UuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5zZXQuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5zbGljZS5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LnNvbWUuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5zb3J0LmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuc3ViYXJyYXkuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS50by1sb2NhbGUtc3RyaW5nLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkudG8tc3RyaW5nLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkudWludDE2LWFycmF5LmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkudWludDMyLWFycmF5LmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkudWludDgtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS51aW50OC1jbGFtcGVkLWFycmF5LmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMud2Vhay1tYXAuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy53ZWFrLXNldC5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL3dlYi5kb20tY29sbGVjdGlvbnMuZm9yLWVhY2guanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIuZG9tLWNvbGxlY3Rpb25zLml0ZXJhdG9yLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvd2ViLmltbWVkaWF0ZS5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL3dlYi5xdWV1ZS1taWNyb3Rhc2suanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIudGltZXJzLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvd2ViLnVybC1zZWFyY2gtcGFyYW1zLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvd2ViLnVybC5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL3dlYi51cmwudG8tanNvbi5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9zdGFibGUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvd2ViL2luZGV4LmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9yZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zL3dlYnBhY2svcnVudGltZS9nbG9iYWwiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zL3dlYnBhY2svcnVudGltZS9tYWtlIG5hbWVzcGFjZSBvYmplY3QiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vc3JjL0RhdGFOb2RlLnRzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdG9yLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL2FycmF5LmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdG9yQWxsLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL21hdGNoZXIuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL3NlbGVjdENoaWxkLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9zZWxlY3RDaGlsZHJlbi5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vc3BhcnNlLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9lbnRlci5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9jb25zdGFudC5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vZGF0YS5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vc29ydC5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9uYW1lc3BhY2VzLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL25hbWVzcGFjZS5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vYXR0ci5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy93aW5kb3cuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL3N0eWxlLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vY2xhc3NlZC5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vdGV4dC5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vaHRtbC5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vcmFpc2UuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2xvd2VyLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL2NyZWF0b3IuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2luc2VydC5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vcmVtb3ZlLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9jbG9uZS5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vb24uanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2Rpc3BhdGNoLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9pbmRleC5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vc2VsZWN0LmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9zZWxlY3RBbGwuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2ZpbHRlci5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vZXhpdC5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vam9pbi5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vbWVyZ2UuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL29yZGVyLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9jYWxsLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9ub2Rlcy5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vbm9kZS5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vc2l6ZS5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vZW1wdHkuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2VhY2guanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2FwcGVuZC5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vZGF0dW0uanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2l0ZXJhdG9yLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9kMy1kaXNwYXRjaC9zcmMvZGlzcGF0Y2guanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2QzLXRpbWVyL3NyYy90aW1lci5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvZDMtdGltZXIvc3JjL3RpbWVvdXQuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vc2NoZWR1bGUuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL2ludGVycnVwdC5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL251bWJlci5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL3RyYW5zZm9ybS9kZWNvbXBvc2UuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy90cmFuc2Zvcm0vcGFyc2UuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy90cmFuc2Zvcm0vaW5kZXguanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vdHdlZW4uanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2QzLWNvbG9yL3NyYy9kZWZpbmUuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2QzLWNvbG9yL3NyYy9jb2xvci5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL2Jhc2lzLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvY29uc3RhbnQuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9jb2xvci5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL3JnYi5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL2Jhc2lzQ2xvc2VkLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvc3RyaW5nLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL2ludGVycG9sYXRlLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL2F0dHIuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vYXR0clR3ZWVuLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL2RlbGF5LmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL2R1cmF0aW9uLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL2Vhc2UuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vb24uanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vc2VsZWN0aW9uLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3N0eWxlLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3N0eWxlVHdlZW4uanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vdGV4dFR3ZWVuLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL2luZGV4LmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3NlbGVjdC5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9zZWxlY3RBbGwuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vZmlsdGVyLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL21lcmdlLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3RyYW5zaXRpb24uanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vdGV4dC5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9yZW1vdmUuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vZWFzZVZhcnlpbmcuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vZW5kLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy9zZWxlY3Rpb24vdHJhbnNpdGlvbi5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvZDMtZWFzZS9zcmMvY3ViaWMuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3NlbGVjdGlvbi9pbmRleC5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvc2VsZWN0aW9uL2ludGVycnVwdC5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvZDMtYnJ1c2gvc3JjL2JydXNoLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9kMy1jb2xvci9zcmMvbWF0aC5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvZDMtY29sb3Ivc3JjL2xhYi5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvZDMtaGllcmFyY2h5L3NyYy9oaWVyYXJjaHkvY291bnQuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2QzLWhpZXJhcmNoeS9zcmMvaGllcmFyY2h5L2luZGV4LmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9kMy1oaWVyYXJjaHkvc3JjL3RyZWVtYXAvcm91bmQuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2QzLWhpZXJhcmNoeS9zcmMvdHJlZW1hcC9kaWNlLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9kMy1oaWVyYXJjaHkvc3JjL3BhcnRpdGlvbi5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvZDMtaGllcmFyY2h5L3NyYy90cmVlLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9kMy1oaWVyYXJjaHkvc3JjL3RyZWVtYXAvc2xpY2UuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2QzLWhpZXJhcmNoeS9zcmMvaGllcmFyY2h5L2VhY2guanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2QzLWhpZXJhcmNoeS9zcmMvaGllcmFyY2h5L2VhY2hBZnRlci5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvZDMtaGllcmFyY2h5L3NyYy9oaWVyYXJjaHkvZWFjaEJlZm9yZS5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvZDMtaGllcmFyY2h5L3NyYy9oaWVyYXJjaHkvZmluZC5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvZDMtaGllcmFyY2h5L3NyYy9oaWVyYXJjaHkvc3VtLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9kMy1oaWVyYXJjaHkvc3JjL2hpZXJhcmNoeS9zb3J0LmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9kMy1oaWVyYXJjaHkvc3JjL2hpZXJhcmNoeS9wYXRoLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9kMy1oaWVyYXJjaHkvc3JjL2hpZXJhcmNoeS9hbmNlc3RvcnMuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2QzLWhpZXJhcmNoeS9zcmMvaGllcmFyY2h5L2Rlc2NlbmRhbnRzLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9kMy1oaWVyYXJjaHkvc3JjL2hpZXJhcmNoeS9sZWF2ZXMuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2QzLWhpZXJhcmNoeS9zcmMvaGllcmFyY2h5L2xpbmtzLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9kMy1oaWVyYXJjaHkvc3JjL2hpZXJhcmNoeS9pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvZDMtaGllcmFyY2h5L3NyYy90cmVlbWFwL3NxdWFyaWZ5LmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9kMy1oaWVyYXJjaHkvc3JjL2FjY2Vzc29ycy5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvZDMtaGllcmFyY2h5L3NyYy9jb25zdGFudC5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvZDMtaGllcmFyY2h5L3NyYy90cmVlbWFwL2luZGV4LmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvYXJyYXkuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9kYXRlLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvb2JqZWN0LmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvbnVtYmVyQXJyYXkuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy92YWx1ZS5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL2xhYi5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL3RpY2tzLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvYXNjZW5kaW5nLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvYmlzZWN0b3IuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9iaXNlY3QuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9udW1iZXIuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9yb3VuZC5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUvc3JjL251bWJlci5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUvc3JjL2NvbnRpbnVvdXMuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlL3NyYy9jb25zdGFudC5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUvc3JjL2luaXQuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvZm9ybWF0U3BlY2lmaWVyLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2Zvcm1hdFByZWZpeEF1dG8uanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvZm9ybWF0RGVjaW1hbC5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9leHBvbmVudC5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9mb3JtYXRSb3VuZGVkLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2Zvcm1hdFR5cGVzLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2lkZW50aXR5LmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2xvY2FsZS5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9kZWZhdWx0TG9jYWxlLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS9zcmMvbGluZWFyLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS9zcmMvdGlja0Zvcm1hdC5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9wcmVjaXNpb25QcmVmaXguanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvcHJlY2lzaW9uUm91bmQuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvcHJlY2lzaW9uRml4ZWQuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvZm9ybWF0R3JvdXAuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvZm9ybWF0TnVtZXJhbHMuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvZm9ybWF0VHJpbS5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUvc3JjL29yZGluYWwuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlL3NyYy9xdWFudGl6ZS5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9jYXRlZ29yaWNhbC9jYXRlZ29yeTEwLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL2NvbG9ycy5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3QuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2QzLXBhdGgvc3JjL3BhdGguanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9jb25zdGFudC5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL21hdGguanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9hcmMuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9hcnJheS5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL3BvaW50LmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvbGluay9pbmRleC5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvZDMtZHJhZy9zcmMvbm9ldmVudC5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvZDMtZHJhZy9zcmMvbm9kcmFnLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvem9vbS5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9wb2ludGVyLmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NvdXJjZUV2ZW50LmpzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL25vZGVfbW9kdWxlcy9kMy16b29tL3NyYy9jb25zdGFudC5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvZDMtem9vbS9zcmMvZXZlbnQuanMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vbm9kZV9tb2R1bGVzL2QzLXpvb20vc3JjL3RyYW5zZm9ybS5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvZDMtem9vbS9zcmMvbm9ldmVudC5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9ub2RlX21vZHVsZXMvZDMtem9vbS9zcmMvem9vbS5qcyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9zcmMvdHJhbnNpdGlvbi9UcmFuc2l0aW9uLnRzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL3NyYy9TZXR0aW5ncy50cyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9zcmMvdmlzdWFsaXphdGlvbnMvaGVhdG1hcC9jbHVzdGVyL1RyZWVOb2RlLnRzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL3NyYy92aXN1YWxpemF0aW9ucy9oZWF0bWFwL2NsdXN0ZXIvQ2x1c3Rlci50cyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9zcmMvdmlzdWFsaXphdGlvbnMvaGVhdG1hcC9jbHVzdGVyL1VQR01BQ2x1c3RlcmVyLnRzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL3NyYy92aXN1YWxpemF0aW9ucy9oZWF0bWFwL21ldHJpYy9FdWNsaWRpYW5EaXN0YW5jZU1ldHJpYy50cyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9zcmMvdmlzdWFsaXphdGlvbnMvaGVhdG1hcC9yZW9yZGVyL01vbG9SZW9yZGVyZXIudHMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vc3JjL3Zpc3VhbGl6YXRpb25zL2hlYXRtYXAvSGVhdG1hcFNldHRpbmdzLnRzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL3NyYy92aXN1YWxpemF0aW9ucy9oZWF0bWFwL2NsdXN0ZXIvQ2x1c3RlckVsZW1lbnQudHMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vc3JjL3Zpc3VhbGl6YXRpb25zL2hlYXRtYXAvUHJlcHJvY2Vzc29yLnRzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL3NyYy9yZW5kZXIvQ2FudmFzUmVuZGVySGVscGVyLnRzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL3NyYy92aXN1YWxpemF0aW9ucy9oZWF0bWFwL0hlYXRtYXAudHMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vc3JjL3Zpc3VhbGl6YXRpb25zL2hlYXRtYXAvbWV0cmljL1BlYXJzb25Db3JyZWxhdGlvbk1ldHJpYy50cyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9zcmMvY29sb3IvQ29sb3JQYWxldHRlLnRzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL3NyYy91dGlsaXRpZXMvU3RyaW5nVXRpbHMudHMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vc3JjL3Zpc3VhbGl6YXRpb25zL3N1bmJ1cnN0L1N1bmJ1cnN0U2V0dGluZ3MudHMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vc3JjL3Zpc3VhbGl6YXRpb25zL3N1bmJ1cnN0L1N1bmJ1cnN0UHJlcHJvY2Vzc29yLnRzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL3NyYy91dGlsaXRpZXMvVG9vbHRpcFV0aWxpdGllcy50cyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9zcmMvdXRpbGl0aWVzL05vZGVVdGlscy50cyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9zcmMvY29sb3IvQ29sb3JVdGlscy50cyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9zcmMvdmlzdWFsaXphdGlvbnMvc3VuYnVyc3QvU3VuYnVyc3QudHMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vc3JjL3Zpc3VhbGl6YXRpb25zL3RyZWVtYXAvVHJlZW1hcFNldHRpbmdzLnRzIiwid2VicGFjazovL1VuaXBlcHRWaXN1YWxpemF0aW9ucy8uL3NyYy92aXN1YWxpemF0aW9ucy90cmVlbWFwL1RyZWVtYXBQcmVwcm9jZXNzb3IudHMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vc3JjL3Zpc3VhbGl6YXRpb25zL3RyZWVtYXAvVHJlZW1hcC50cyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9zcmMvdmlzdWFsaXphdGlvbnMvdHJlZXZpZXcvVHJlZXZpZXdTZXR0aW5ncy50cyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9zcmMvdmlzdWFsaXphdGlvbnMvdHJlZXZpZXcvaGVhcC9NYXhDb3VudEhlYXAudHMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vc3JjL3Zpc3VhbGl6YXRpb25zL3RyZWV2aWV3L1RyZWV2aWV3Tm9kZS50cyIsIndlYnBhY2s6Ly9VbmlwZXB0VmlzdWFsaXphdGlvbnMvLi9zcmMvdmlzdWFsaXphdGlvbnMvdHJlZXZpZXcvVHJlZXZpZXdQcmVwcm9jZXNzb3IudHMiLCJ3ZWJwYWNrOi8vVW5pcGVwdFZpc3VhbGl6YXRpb25zLy4vc3JjL3Zpc3VhbGl6YXRpb25zL3RyZWV2aWV3L1RyZWV2aWV3LnRzIl0sIm5hbWVzIjpbInJvb3QiLCJmYWN0b3J5IiwiZXhwb3J0cyIsIm1vZHVsZSIsImRlZmluZSIsImFtZCIsInRoaXMiLCJwYXRoIiwiaXQiLCJUeXBlRXJyb3IiLCJTdHJpbmciLCJpc09iamVjdCIsIndlbGxLbm93blN5bWJvbCIsImNyZWF0ZSIsImRlZmluZVByb3BlcnR5TW9kdWxlIiwiVU5TQ09QQUJMRVMiLCJBcnJheVByb3RvdHlwZSIsIkFycmF5IiwicHJvdG90eXBlIiwidW5kZWZpbmVkIiwiZiIsImNvbmZpZ3VyYWJsZSIsInZhbHVlIiwia2V5IiwiY2hhckF0IiwiUyIsImluZGV4IiwidW5pY29kZSIsImxlbmd0aCIsIkNvbnN0cnVjdG9yIiwibmFtZSIsIkFycmF5QnVmZmVyIiwiRGF0YVZpZXciLCJOQU1FIiwiTkFUSVZFX0FSUkFZX0JVRkZFUiIsIkRFU0NSSVBUT1JTIiwiZ2xvYmFsIiwiaGFzIiwiY2xhc3NvZiIsImNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSIsInJlZGVmaW5lIiwiZGVmaW5lUHJvcGVydHkiLCJnZXRQcm90b3R5cGVPZiIsInNldFByb3RvdHlwZU9mIiwidWlkIiwiSW50OEFycmF5IiwiSW50OEFycmF5UHJvdG90eXBlIiwiVWludDhDbGFtcGVkQXJyYXkiLCJVaW50OENsYW1wZWRBcnJheVByb3RvdHlwZSIsIlR5cGVkQXJyYXkiLCJUeXBlZEFycmF5UHJvdG90eXBlIiwiT2JqZWN0UHJvdG90eXBlIiwiT2JqZWN0IiwiaXNQcm90b3R5cGVPZiIsIlRPX1NUUklOR19UQUciLCJUWVBFRF9BUlJBWV9UQUciLCJOQVRJVkVfQVJSQVlfQlVGRkVSX1ZJRVdTIiwib3BlcmEiLCJUWVBFRF9BUlJBWV9UQUdfUkVRSVJFRCIsIlR5cGVkQXJyYXlDb25zdHJ1Y3RvcnNMaXN0IiwiVWludDhBcnJheSIsIkludDE2QXJyYXkiLCJVaW50MTZBcnJheSIsIkludDMyQXJyYXkiLCJVaW50MzJBcnJheSIsIkZsb2F0MzJBcnJheSIsIkZsb2F0NjRBcnJheSIsIkJpZ0ludEFycmF5Q29uc3RydWN0b3JzTGlzdCIsIkJpZ0ludDY0QXJyYXkiLCJCaWdVaW50NjRBcnJheSIsImlzVHlwZWRBcnJheSIsImtsYXNzIiwiRnVuY3Rpb24iLCJnZXQiLCJhVHlwZWRBcnJheSIsImFUeXBlZEFycmF5Q29uc3RydWN0b3IiLCJDIiwiY2FsbCIsIkFSUkFZIiwiVHlwZWRBcnJheUNvbnN0cnVjdG9yIiwiZXhwb3J0VHlwZWRBcnJheU1ldGhvZCIsIktFWSIsInByb3BlcnR5IiwiZm9yY2VkIiwiZXhwb3J0VHlwZWRBcnJheVN0YXRpY01ldGhvZCIsImVycm9yIiwiaXNWaWV3IiwicmVkZWZpbmVBbGwiLCJmYWlscyIsImFuSW5zdGFuY2UiLCJ0b0ludGVnZXIiLCJ0b0xlbmd0aCIsInRvSW5kZXgiLCJJRUVFNzU0IiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsImFycmF5RmlsbCIsInNldFRvU3RyaW5nVGFnIiwiSW50ZXJuYWxTdGF0ZU1vZHVsZSIsImdldEludGVybmFsU3RhdGUiLCJzZXRJbnRlcm5hbFN0YXRlIiwic2V0IiwiQVJSQVlfQlVGRkVSIiwiREFUQV9WSUVXIiwiV1JPTkdfSU5ERVgiLCJOYXRpdmVBcnJheUJ1ZmZlciIsIiRBcnJheUJ1ZmZlciIsIiREYXRhVmlldyIsIiREYXRhVmlld1Byb3RvdHlwZSIsIlJhbmdlRXJyb3IiLCJwYWNrSUVFRTc1NCIsInBhY2siLCJ1bnBhY2tJRUVFNzU0IiwidW5wYWNrIiwicGFja0ludDgiLCJudW1iZXIiLCJwYWNrSW50MTYiLCJwYWNrSW50MzIiLCJ1bnBhY2tJbnQzMiIsImJ1ZmZlciIsInBhY2tGbG9hdDMyIiwicGFja0Zsb2F0NjQiLCJhZGRHZXR0ZXIiLCJ2aWV3IiwiY291bnQiLCJpc0xpdHRsZUVuZGlhbiIsImludEluZGV4Iiwic3RvcmUiLCJieXRlTGVuZ3RoIiwiYnl0ZXMiLCJzdGFydCIsImJ5dGVPZmZzZXQiLCJzbGljZSIsInJldmVyc2UiLCJjb252ZXJzaW9uIiwiaSIsIk5hTiIsIkFycmF5QnVmZmVyUHJvdG90eXBlIiwia2V5cyIsImoiLCJjb25zdHJ1Y3RvciIsInRlc3RWaWV3IiwibmF0aXZlU2V0SW50OCIsInNldEludDgiLCJnZXRJbnQ4Iiwic2V0VWludDgiLCJ1bnNhZmUiLCJidWZmZXJMZW5ndGgiLCJvZmZzZXQiLCJnZXRVaW50OCIsImdldEludDE2IiwiYXJndW1lbnRzIiwiZ2V0VWludDE2IiwiZ2V0SW50MzIiLCJnZXRVaW50MzIiLCJnZXRGbG9hdDMyIiwiZ2V0RmxvYXQ2NCIsInNldEludDE2Iiwic2V0VWludDE2Iiwic2V0SW50MzIiLCJzZXRVaW50MzIiLCJzZXRGbG9hdDMyIiwic2V0RmxvYXQ2NCIsInRvT2JqZWN0IiwidG9BYnNvbHV0ZUluZGV4IiwibWluIiwiTWF0aCIsImNvcHlXaXRoaW4iLCJ0YXJnZXQiLCJPIiwibGVuIiwidG8iLCJmcm9tIiwiZW5kIiwiaW5jIiwiYXJndW1lbnRzTGVuZ3RoIiwiZW5kUG9zIiwiJGZvckVhY2giLCJTVFJJQ1RfTUVUSE9EIiwiYXJyYXlNZXRob2RJc1N0cmljdCIsImZvckVhY2giLCJjYWxsYmFja2ZuIiwiYmluZCIsImNhbGxXaXRoU2FmZUl0ZXJhdGlvbkNsb3NpbmciLCJpc0FycmF5SXRlcmF0b3JNZXRob2QiLCJjcmVhdGVQcm9wZXJ0eSIsImdldEl0ZXJhdG9yTWV0aG9kIiwiYXJyYXlMaWtlIiwicmVzdWx0Iiwic3RlcCIsIml0ZXJhdG9yIiwibmV4dCIsIm1hcGZuIiwibWFwcGluZyIsIml0ZXJhdG9yTWV0aG9kIiwiZG9uZSIsInRvSW5kZXhlZE9iamVjdCIsImNyZWF0ZU1ldGhvZCIsIklTX0lOQ0xVREVTIiwiJHRoaXMiLCJlbCIsImZyb21JbmRleCIsImluY2x1ZGVzIiwiaW5kZXhPZiIsIkluZGV4ZWRPYmplY3QiLCJhcnJheVNwZWNpZXNDcmVhdGUiLCJwdXNoIiwiVFlQRSIsIklTX01BUCIsIklTX0ZJTFRFUiIsIklTX1NPTUUiLCJJU19FVkVSWSIsIklTX0ZJTkRfSU5ERVgiLCJJU19GSUxURVJfT1VUIiwiTk9fSE9MRVMiLCJ0aGF0Iiwic3BlY2lmaWNDcmVhdGUiLCJzZWxmIiwiYm91bmRGdW5jdGlvbiIsIm1hcCIsImZpbHRlciIsInNvbWUiLCJldmVyeSIsImZpbmQiLCJmaW5kSW5kZXgiLCJmaWx0ZXJPdXQiLCJuYXRpdmVMYXN0SW5kZXhPZiIsImxhc3RJbmRleE9mIiwiTkVHQVRJVkVfWkVSTyIsIkZPUkNFRCIsInNlYXJjaEVsZW1lbnQiLCJhcHBseSIsIlY4X1ZFUlNJT04iLCJTUEVDSUVTIiwiTUVUSE9EX05BTUUiLCJhcnJheSIsImZvbyIsIkJvb2xlYW4iLCJhcmd1bWVudCIsIm1ldGhvZCIsImFGdW5jdGlvbiIsIklTX1JJR0hUIiwibWVtbyIsImxlZnQiLCJyaWdodCIsImlzQXJyYXkiLCJvcmlnaW5hbEFycmF5IiwiYW5PYmplY3QiLCJpdGVyYXRvckNsb3NlIiwiZm4iLCJFTlRSSUVTIiwiSVRFUkFUT1IiLCJTQUZFX0NMT1NJTkciLCJjYWxsZWQiLCJpdGVyYXRvcldpdGhSZXR1cm4iLCJleGVjIiwiU0tJUF9DTE9TSU5HIiwiSVRFUkFUSU9OX1NVUFBPUlQiLCJvYmplY3QiLCJ0b1N0cmluZyIsIlRPX1NUUklOR19UQUdfU1VQUE9SVCIsImNsYXNzb2ZSYXciLCJDT1JSRUNUX0FSR1VNRU5UUyIsInRhZyIsInRyeUdldCIsImNhbGxlZSIsIml0ZXJhdGUiLCJkZWZpbmVJdGVyYXRvciIsInNldFNwZWNpZXMiLCJmYXN0S2V5IiwiaW50ZXJuYWxTdGF0ZUdldHRlckZvciIsImdldHRlckZvciIsImdldENvbnN0cnVjdG9yIiwid3JhcHBlciIsIkNPTlNUUlVDVE9SX05BTUUiLCJBRERFUiIsIml0ZXJhYmxlIiwidHlwZSIsImZpcnN0IiwibGFzdCIsInNpemUiLCJBU19FTlRSSUVTIiwicHJldmlvdXMiLCJzdGF0ZSIsImVudHJ5IiwiZ2V0RW50cnkiLCJyZW1vdmVkIiwiY2xlYXIiLCJkYXRhIiwicHJldiIsImFkZCIsInNldFN0cm9uZyIsIklURVJBVE9SX05BTUUiLCJnZXRJbnRlcm5hbENvbGxlY3Rpb25TdGF0ZSIsImdldEludGVybmFsSXRlcmF0b3JTdGF0ZSIsIml0ZXJhdGVkIiwia2luZCIsImdldFdlYWtEYXRhIiwiQXJyYXlJdGVyYXRpb25Nb2R1bGUiLCIkaGFzIiwiaWQiLCJ1bmNhdWdodEZyb3plblN0b3JlIiwiZnJvemVuIiwiVW5jYXVnaHRGcm96ZW5TdG9yZSIsImVudHJpZXMiLCJmaW5kVW5jYXVnaHRGcm96ZW4iLCJzcGxpY2UiLCIkIiwiaXNGb3JjZWQiLCJJbnRlcm5hbE1ldGFkYXRhTW9kdWxlIiwiY2hlY2tDb3JyZWN0bmVzc09mSXRlcmF0aW9uIiwiaW5oZXJpdElmUmVxdWlyZWQiLCJjb21tb24iLCJJU19XRUFLIiwiTmF0aXZlQ29uc3RydWN0b3IiLCJOYXRpdmVQcm90b3R5cGUiLCJleHBvcnRlZCIsImZpeE1ldGhvZCIsIm5hdGl2ZU1ldGhvZCIsIlJFUVVJUkVEIiwiaW5zdGFuY2UiLCJIQVNOVF9DSEFJTklORyIsIlRIUk9XU19PTl9QUklNSVRJVkVTIiwiQUNDRVBUX0lURVJBQkxFUyIsIkJVR0dZX1pFUk8iLCIkaW5zdGFuY2UiLCJkdW1teSIsIm93bktleXMiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUiLCJzb3VyY2UiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJNQVRDSCIsInJlZ2V4cCIsImVycm9yMSIsImVycm9yMiIsIkYiLCJyZXF1aXJlT2JqZWN0Q29lcmNpYmxlIiwicXVvdCIsInN0cmluZyIsImF0dHJpYnV0ZSIsInAxIiwicmVwbGFjZSIsIkl0ZXJhdG9yUHJvdG90eXBlIiwiY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yIiwiSXRlcmF0b3JzIiwicmV0dXJuVGhpcyIsIkl0ZXJhdG9yQ29uc3RydWN0b3IiLCJiaXRtYXAiLCJlbnVtZXJhYmxlIiwid3JpdGFibGUiLCJ0b1ByaW1pdGl2ZSIsInByb3BlcnR5S2V5IiwicGFkU3RhcnQiLCJhYnMiLCJEYXRlUHJvdG90eXBlIiwiRGF0ZSIsImdldFRpbWUiLCJuYXRpdmVEYXRlVG9JU09TdHJpbmciLCJ0b0lTT1N0cmluZyIsImlzRmluaXRlIiwiZGF0ZSIsInllYXIiLCJnZXRVVENGdWxsWWVhciIsIm1pbGxpc2Vjb25kcyIsImdldFVUQ01pbGxpc2Vjb25kcyIsInNpZ24iLCJnZXRVVENNb250aCIsImdldFVUQ0RhdGUiLCJnZXRVVENIb3VycyIsImdldFVUQ01pbnV0ZXMiLCJnZXRVVENTZWNvbmRzIiwiaGludCIsImNyZWF0ZUl0ZXJhdG9yQ29uc3RydWN0b3IiLCJJU19QVVJFIiwiSXRlcmF0b3JzQ29yZSIsIkJVR0dZX1NBRkFSSV9JVEVSQVRPUlMiLCJLRVlTIiwiVkFMVUVTIiwiSXRlcmFibGUiLCJERUZBVUxUIiwiSVNfU0VUIiwiQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlIiwibWV0aG9kcyIsImdldEl0ZXJhdGlvbk1ldGhvZCIsIktJTkQiLCJkZWZhdWx0SXRlcmF0b3IiLCJJdGVyYWJsZVByb3RvdHlwZSIsIklOQ09SUkVDVF9WQUxVRVNfTkFNRSIsIm5hdGl2ZUl0ZXJhdG9yIiwiYW55TmF0aXZlSXRlcmF0b3IiLCJ2YWx1ZXMiLCJwcm90byIsIndyYXBwZWRXZWxsS25vd25TeW1ib2xNb2R1bGUiLCJTeW1ib2wiLCJkb2N1bWVudCIsIkVYSVNUUyIsImNyZWF0ZUVsZW1lbnQiLCJDU1NSdWxlTGlzdCIsIkNTU1N0eWxlRGVjbGFyYXRpb24iLCJDU1NWYWx1ZUxpc3QiLCJDbGllbnRSZWN0TGlzdCIsIkRPTVJlY3RMaXN0IiwiRE9NU3RyaW5nTGlzdCIsIkRPTVRva2VuTGlzdCIsIkRhdGFUcmFuc2Zlckl0ZW1MaXN0IiwiRmlsZUxpc3QiLCJIVE1MQWxsQ29sbGVjdGlvbiIsIkhUTUxDb2xsZWN0aW9uIiwiSFRNTEZvcm1FbGVtZW50IiwiSFRNTFNlbGVjdEVsZW1lbnQiLCJNZWRpYUxpc3QiLCJNaW1lVHlwZUFycmF5IiwiTmFtZWROb2RlTWFwIiwiTm9kZUxpc3QiLCJQYWludFJlcXVlc3RMaXN0IiwiUGx1Z2luIiwiUGx1Z2luQXJyYXkiLCJTVkdMZW5ndGhMaXN0IiwiU1ZHTnVtYmVyTGlzdCIsIlNWR1BhdGhTZWdMaXN0IiwiU1ZHUG9pbnRMaXN0IiwiU1ZHU3RyaW5nTGlzdCIsIlNWR1RyYW5zZm9ybUxpc3QiLCJTb3VyY2VCdWZmZXJMaXN0IiwiU3R5bGVTaGVldExpc3QiLCJUZXh0VHJhY2tDdWVMaXN0IiwiVGV4dFRyYWNrTGlzdCIsIlRvdWNoTGlzdCIsInVzZXJBZ2VudCIsInRlc3QiLCJwcm9jZXNzIiwiZ2V0QnVpbHRJbiIsIm1hdGNoIiwidmVyc2lvbiIsInZlcnNpb25zIiwidjgiLCJzcGxpdCIsInNldEdsb2JhbCIsImNvcHlDb25zdHJ1Y3RvclByb3BlcnRpZXMiLCJvcHRpb25zIiwidGFyZ2V0UHJvcGVydHkiLCJzb3VyY2VQcm9wZXJ0eSIsImRlc2NyaXB0b3IiLCJUQVJHRVQiLCJHTE9CQUwiLCJTVEFUSUMiLCJzdGF0Iiwibm9UYXJnZXRHZXQiLCJzaGFtIiwicmVnZXhwRXhlYyIsIlJFUExBQ0VfU1VQUE9SVFNfTkFNRURfR1JPVVBTIiwicmUiLCJncm91cHMiLCJhIiwiUkVQTEFDRV9LRUVQU18kMCIsIlJFUExBQ0UiLCJSRUdFWFBfUkVQTEFDRV9TVUJTVElUVVRFU19VTkRFRklORURfQ0FQVFVSRSIsIlNQTElUX1dPUktTX1dJVEhfT1ZFUldSSVRURU5fRVhFQyIsIm9yaWdpbmFsRXhlYyIsIlNZTUJPTCIsIkRFTEVHQVRFU19UT19TWU1CT0wiLCJERUxFR0FURVNfVE9fRVhFQyIsImV4ZWNDYWxsZWQiLCJmbGFncyIsIm5hdGl2ZVJlZ0V4cE1ldGhvZCIsInN0ciIsImFyZzIiLCJmb3JjZVN0cmluZ01ldGhvZCIsInN0cmluZ01ldGhvZCIsInJlZ2V4TWV0aG9kIiwiUmVnRXhwIiwiYXJnIiwiZmxhdHRlbkludG9BcnJheSIsIm9yaWdpbmFsIiwic291cmNlTGVuIiwiZGVwdGgiLCJtYXBwZXIiLCJ0aGlzQXJnIiwiZWxlbWVudCIsInRhcmdldEluZGV4Iiwic291cmNlSW5kZXgiLCJtYXBGbiIsImlzRXh0ZW5zaWJsZSIsInByZXZlbnRFeHRlbnNpb25zIiwiYiIsImMiLCJmYWN0b3JpZXMiLCJjb25zdHJ1Y3QiLCJhcmdzTGVuZ3RoIiwiYXJncyIsImxpc3QiLCJqb2luIiwicGFydEFyZ3MiLCJjb25jYXQiLCJ2YXJpYWJsZSIsIm5hbWVzcGFjZSIsImZsb29yIiwiU1VCU1RJVFVUSU9OX1NZTUJPTFMiLCJTVUJTVElUVVRJT05fU1lNQk9MU19OT19OQU1FRCIsIm1hdGNoZWQiLCJwb3NpdGlvbiIsImNhcHR1cmVzIiwibmFtZWRDYXB0dXJlcyIsInJlcGxhY2VtZW50IiwidGFpbFBvcyIsIm0iLCJzeW1ib2xzIiwiY2giLCJjYXB0dXJlIiwibiIsImNoZWNrIiwiZ2xvYmFsVGhpcyIsIndpbmRvdyIsImciLCJoYXNPd25Qcm9wZXJ0eSIsImNvbnNvbGUiLCJwb3ciLCJsb2ciLCJMTjIiLCJtYW50aXNzYUxlbmd0aCIsImV4cG9uZW50IiwibWFudGlzc2EiLCJleHBvbmVudExlbmd0aCIsImVNYXgiLCJlQmlhcyIsInJ0IiwiSW5maW5pdHkiLCJuQml0cyIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwiV3JhcHBlciIsIk5ld1RhcmdldCIsIk5ld1RhcmdldFByb3RvdHlwZSIsImZ1bmN0aW9uVG9TdHJpbmciLCJpbnNwZWN0U291cmNlIiwiaGlkZGVuS2V5cyIsIkZSRUVaSU5HIiwiTUVUQURBVEEiLCJzZXRNZXRhZGF0YSIsIm9iamVjdElEIiwid2Vha0RhdGEiLCJtZXRhIiwib25GcmVlemUiLCJOQVRJVkVfV0VBS19NQVAiLCJvYmplY3RIYXMiLCJzaGFyZWQiLCJzaGFyZWRLZXkiLCJXZWFrTWFwIiwid21nZXQiLCJ3bWhhcyIsIndtc2V0IiwibWV0YWRhdGEiLCJmYWNhZGUiLCJTVEFURSIsImVuZm9yY2UiLCJmZWF0dXJlIiwiZGV0ZWN0aW9uIiwibm9ybWFsaXplIiwiUE9MWUZJTEwiLCJOQVRJVkUiLCJ0b0xvd2VyQ2FzZSIsImlzUmVnRXhwIiwiUmVzdWx0Iiwic3RvcHBlZCIsInVuYm91bmRGdW5jdGlvbiIsIml0ZXJGbiIsIklTX0lURVJBVE9SIiwiSU5URVJSVVBURUQiLCJzdG9wIiwiY29uZGl0aW9uIiwiY2FsbEZuIiwicmV0dXJuTWV0aG9kIiwiUHJvdG90eXBlT2ZBcnJheUl0ZXJhdG9yUHJvdG90eXBlIiwiYXJyYXlJdGVyYXRvciIsIk5FV19JVEVSQVRPUl9QUk9UT1RZUEUiLCJuYXRpdmVFeHBtMSIsImV4cG0xIiwiZXhwIiwieCIsIkVQU0lMT04iLCJFUFNJTE9OMzIiLCJNQVgzMiIsIk1JTjMyIiwiZnJvdW5kIiwiJGFicyIsIiRzaWduIiwibG9nMXAiLCJmbHVzaCIsImhlYWQiLCJub3RpZnkiLCJ0b2dnbGUiLCJub2RlIiwicHJvbWlzZSIsInRoZW4iLCJtYWNyb3Rhc2siLCJJU19JT1MiLCJJU19XRUJPU19XRUJLSVQiLCJJU19OT0RFIiwiTXV0YXRpb25PYnNlcnZlciIsIldlYktpdE11dGF0aW9uT2JzZXJ2ZXIiLCJQcm9taXNlIiwicXVldWVNaWNyb3Rhc2tEZXNjcmlwdG9yIiwicXVldWVNaWNyb3Rhc2siLCJwYXJlbnQiLCJkb21haW4iLCJleGl0IiwiZW50ZXIiLCJyZXNvbHZlIiwibmV4dFRpY2siLCJjcmVhdGVUZXh0Tm9kZSIsIm9ic2VydmUiLCJjaGFyYWN0ZXJEYXRhIiwidGFzayIsImdldE93blByb3BlcnR5U3ltYm9scyIsInVybCIsIlVSTCIsInNlYXJjaFBhcmFtcyIsInBhdGhuYW1lIiwidG9KU09OIiwic29ydCIsImhyZWYiLCJVUkxTZWFyY2hQYXJhbXMiLCJ1c2VybmFtZSIsImhvc3QiLCJoYXNoIiwiUHJvbWlzZUNhcGFiaWxpdHkiLCJyZWplY3QiLCIkJHJlc29sdmUiLCIkJHJlamVjdCIsImdsb2JhbElzRmluaXRlIiwiTnVtYmVyIiwidHJpbSIsIndoaXRlc3BhY2VzIiwiJHBhcnNlRmxvYXQiLCJwYXJzZUZsb2F0IiwidHJpbW1lZFN0cmluZyIsIiRwYXJzZUludCIsInBhcnNlSW50IiwiaGV4IiwicmFkaXgiLCJvYmplY3RLZXlzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlIiwicHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUiLCJuYXRpdmVBc3NpZ24iLCJhc3NpZ24iLCJBIiwiQiIsInN5bWJvbCIsImFscGhhYmV0IiwiY2hyIiwiVCIsImFjdGl2ZVhEb2N1bWVudCIsImRlZmluZVByb3BlcnRpZXMiLCJlbnVtQnVnS2V5cyIsImh0bWwiLCJkb2N1bWVudENyZWF0ZUVsZW1lbnQiLCJJRV9QUk9UTyIsIkVtcHR5Q29uc3RydWN0b3IiLCJzY3JpcHRUYWciLCJjb250ZW50IiwiTFQiLCJOdWxsUHJvdG9PYmplY3QiLCJBY3RpdmVYT2JqZWN0IiwiaWZyYW1lRG9jdW1lbnQiLCJpZnJhbWUiLCJ3cml0ZSIsImNsb3NlIiwidGVtcCIsInBhcmVudFdpbmRvdyIsIk51bGxQcm90b09iamVjdFZpYUFjdGl2ZVgiLCJzdHlsZSIsImRpc3BsYXkiLCJhcHBlbmRDaGlsZCIsInNyYyIsImNvbnRlbnRXaW5kb3ciLCJvcGVuIiwiUHJvcGVydGllcyIsIklFOF9ET01fREVGSU5FIiwibmF0aXZlRGVmaW5lUHJvcGVydHkiLCJQIiwiQXR0cmlidXRlcyIsIm5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIm5hdGl2ZUdldE93blByb3BlcnR5TmFtZXMiLCJ3aW5kb3dOYW1lcyIsImdldFdpbmRvd05hbWVzIiwiaW50ZXJuYWxPYmplY3RLZXlzIiwiQ09SUkVDVF9QUk9UT1RZUEVfR0VUVEVSIiwibmFtZXMiLCJuYXRpdmVQcm9wZXJ0eUlzRW51bWVyYWJsZSIsIk5BU0hPUk5fQlVHIiwiMSIsIlYiLCJyYW5kb20iLCJfX2RlZmluZVNldHRlcl9fIiwiYVBvc3NpYmxlUHJvdG90eXBlIiwic2V0dGVyIiwiQ09SUkVDVF9TRVRURVIiLCJfX3Byb3RvX18iLCJUT19FTlRSSUVTIiwiZ2V0T3duUHJvcGVydHlOYW1lc01vZHVsZSIsIm5ld1Byb21pc2VDYXBhYmlsaXR5IiwicHJvbWlzZUNhcGFiaWxpdHkiLCJlbmZvcmNlSW50ZXJuYWxTdGF0ZSIsIlRFTVBMQVRFIiwic2ltcGxlIiwiUiIsInJlMSIsInJlMiIsInJlZ2V4cEZsYWdzIiwic3RpY2t5SGVscGVycyIsIm5hdGl2ZUV4ZWMiLCJuYXRpdmVSZXBsYWNlIiwicGF0Y2hlZEV4ZWMiLCJVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkciLCJsYXN0SW5kZXgiLCJVTlNVUFBPUlRFRF9ZIiwiQlJPS0VOX0NBUkVUIiwiTlBDR19JTkNMVURFRCIsInJlQ29weSIsInN0aWNreSIsImNoYXJzQWRkZWQiLCJzdHJDb3B5IiwibXVsdGlsaW5lIiwiaW5wdXQiLCJpZ25vcmVDYXNlIiwiZG90QWxsIiwiUkUiLCJzIiwiaXMiLCJ5IiwiVEFHIiwiU0hBUkVEIiwibW9kZSIsImNvcHlyaWdodCIsImRlZmF1bHRDb25zdHJ1Y3RvciIsIkNPTlZFUlRfVE9fU1RSSU5HIiwicG9zIiwic2Vjb25kIiwiY2hhckNvZGVBdCIsImNvZGVBdCIsInJlcGVhdCIsImNlaWwiLCJJU19FTkQiLCJtYXhMZW5ndGgiLCJmaWxsU3RyaW5nIiwiZmlsbExlbiIsInN0cmluZ0ZpbGxlciIsInN0cmluZ0xlbmd0aCIsImZpbGxTdHIiLCJpbnRNYXhMZW5ndGgiLCJtYXhJbnQiLCJyZWdleE5vbkFTQ0lJIiwicmVnZXhTZXBhcmF0b3JzIiwiT1ZFUkZMT1dfRVJST1IiLCJzdHJpbmdGcm9tQ2hhckNvZGUiLCJmcm9tQ2hhckNvZGUiLCJkaWdpdFRvQmFzaWMiLCJkaWdpdCIsImFkYXB0IiwiZGVsdGEiLCJudW1Qb2ludHMiLCJmaXJzdFRpbWUiLCJrIiwiYmFzZU1pbnVzVE1pbiIsImJhc2UiLCJlbmNvZGUiLCJjdXJyZW50VmFsdWUiLCJvdXRwdXQiLCJpbnB1dExlbmd0aCIsImNvdW50ZXIiLCJleHRyYSIsInVjczJkZWNvZGUiLCJiaWFzIiwiYmFzaWNMZW5ndGgiLCJoYW5kbGVkQ1BDb3VudCIsImhhbmRsZWRDUENvdW50UGx1c09uZSIsInEiLCJ0IiwicU1pbnVzVCIsImJhc2VNaW51c1QiLCJsYWJlbCIsImVuY29kZWQiLCJsYWJlbHMiLCJ3aGl0ZXNwYWNlIiwibHRyaW0iLCJydHJpbSIsImRlZmVyIiwiY2hhbm5lbCIsInBvcnQiLCJsb2NhdGlvbiIsInNldEltbWVkaWF0ZSIsImNsZWFySW1tZWRpYXRlIiwiTWVzc2FnZUNoYW5uZWwiLCJEaXNwYXRjaCIsInF1ZXVlIiwicnVuIiwicnVubmVyIiwibGlzdGVuZXIiLCJldmVudCIsInBvc3QiLCJwb3N0TWVzc2FnZSIsInByb3RvY29sIiwibm93IiwicG9ydDIiLCJwb3J0MSIsIm9ubWVzc2FnZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJpbXBvcnRTY3JpcHRzIiwicmVtb3ZlQ2hpbGQiLCJzZXRUaW1lb3V0IiwibWF4IiwiaW50ZWdlciIsImlzTmFOIiwidG9Qb3NpdGl2ZUludGVnZXIiLCJCWVRFUyIsIlBSRUZFUlJFRF9TVFJJTkciLCJ2YWwiLCJ2YWx1ZU9mIiwiVFlQRURfQVJSQVlTX0NPTlNUUlVDVE9SU19SRVFVSVJFU19XUkFQUEVSUyIsIkFycmF5QnVmZmVyVmlld0NvcmUiLCJBcnJheUJ1ZmZlck1vZHVsZSIsInRvT2Zmc2V0IiwidHlwZWRBcnJheUZyb20iLCJyb3VuZCIsIkJZVEVTX1BFUl9FTEVNRU5UIiwiV1JPTkdfTEVOR1RIIiwiZnJvbUxpc3QiLCJpc0FycmF5QnVmZmVyIiwiaXNUeXBlZEFycmF5SW5kZXgiLCJ3cmFwcGVkR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwid3JhcHBlZERlZmluZVByb3BlcnR5IiwiQ0xBTVBFRCIsIkdFVFRFUiIsIlNFVFRFUiIsIk5hdGl2ZVR5cGVkQXJyYXlDb25zdHJ1Y3RvciIsIlR5cGVkQXJyYXlDb25zdHJ1Y3RvclByb3RvdHlwZSIsImFkZEVsZW1lbnQiLCJnZXR0ZXIiLCJ0eXBlZEFycmF5T2Zmc2V0IiwiJGxlbmd0aCIsIiRsZW4iLCJzcGVjaWVzQ29uc3RydWN0b3IiLCJwb3N0Zml4IiwiTkFUSVZFX1NZTUJPTCIsIlVTRV9TWU1CT0xfQVNfVUlEIiwiV2VsbEtub3duU3ltYm9sc1N0b3JlIiwiY3JlYXRlV2VsbEtub3duU3ltYm9sIiwid2l0aG91dFNldHRlciIsIiRBZ2dyZWdhdGVFcnJvciIsImVycm9ycyIsIm1lc3NhZ2UiLCJFcnJvciIsImVycm9yc0FycmF5IiwiQWdncmVnYXRlRXJyb3IiLCJhcnJheUJ1ZmZlck1vZHVsZSIsIm5hdGl2ZUFycmF5QnVmZmVyU2xpY2UiLCJmaW4iLCJ2aWV3U291cmNlIiwidmlld1RhcmdldCIsImFycmF5TWV0aG9kSGFzU3BlY2llc1N1cHBvcnQiLCJJU19DT05DQVRfU1BSRUFEQUJMRSIsIk1BWF9TQUZFX0lOVEVHRVIiLCJNQVhJTVVNX0FMTE9XRURfSU5ERVhfRVhDRUVERUQiLCJJU19DT05DQVRfU1BSRUFEQUJMRV9TVVBQT1JUIiwiU1BFQ0lFU19TVVBQT1JUIiwiaXNDb25jYXRTcHJlYWRhYmxlIiwic3ByZWFkYWJsZSIsIkUiLCJhZGRUb1Vuc2NvcGFibGVzIiwiJGV2ZXJ5IiwiZmlsbCIsIiRmaWx0ZXIiLCIkZmluZEluZGV4IiwiRklORF9JTkRFWCIsIlNLSVBTX0hPTEVTIiwiJGZpbmQiLCJGSU5EIiwiZmxhdE1hcCIsImZsYXQiLCJkZXB0aEFyZyIsIiRpbmNsdWRlcyIsIiRpbmRleE9mIiwibmF0aXZlSW5kZXhPZiIsIkFSUkFZX0lURVJBVE9SIiwiQXJndW1lbnRzIiwibmF0aXZlSm9pbiIsIkVTM19TVFJJTkdTIiwic2VwYXJhdG9yIiwiJG1hcCIsIm9mIiwiJHJlZHVjZVJpZ2h0IiwiQ0hST01FX1ZFUlNJT04iLCJyZWR1Y2VSaWdodCIsIiRyZWR1Y2UiLCJyZWR1Y2UiLCJuYXRpdmVSZXZlcnNlIiwiSEFTX1NQRUNJRVNfU1VQUE9SVCIsIm5hdGl2ZVNsaWNlIiwiJHNvbWUiLCJuYXRpdmVTb3J0IiwiRkFJTFNfT05fVU5ERUZJTkVEIiwiRkFJTFNfT05fTlVMTCIsImNvbXBhcmVmbiIsIk1BWElNVU1fQUxMT1dFRF9MRU5HVEhfRVhDRUVERUQiLCJkZWxldGVDb3VudCIsImluc2VydENvdW50IiwiYWN0dWFsRGVsZXRlQ291bnQiLCJhY3R1YWxTdGFydCIsInB2IiwiZGF0ZVRvUHJpbWl0aXZlIiwiVE9fUFJJTUlUSVZFIiwiSU5WQUxJRF9EQVRFIiwibmF0aXZlRGF0ZVRvU3RyaW5nIiwiSEFTX0lOU1RBTkNFIiwiRnVuY3Rpb25Qcm90b3R5cGUiLCJGdW5jdGlvblByb3RvdHlwZVRvU3RyaW5nIiwibmFtZVJFIiwiJHN0cmluZ2lmeSIsImxvdyIsImhpIiwiZml4Iiwic3RyaW5naWZ5IiwicmVwbGFjZXIiLCJzcGFjZSIsIkpTT04iLCJjb2xsZWN0aW9uIiwiY29sbGVjdGlvblN0cm9uZyIsImluaXQiLCJuYXRpdmVBY29zaCIsImFjb3NoIiwic3FydCIsIk1BWF9WQUxVRSIsIm5hdGl2ZUFzaW5oIiwiYXNpbmgiLCJuYXRpdmVBdGFuaCIsImF0YW5oIiwiY2JydCIsIkxPRzJFIiwiY2x6MzIiLCJuYXRpdmVDb3NoIiwiY29zaCIsIiRoeXBvdCIsImh5cG90IiwidmFsdWUxIiwidmFsdWUyIiwiZGl2Iiwic3VtIiwiYUxlbiIsImxhcmciLCJuYXRpdmVJbXVsIiwiaW11bCIsIlVJTlQxNiIsInhuIiwieW4iLCJ4bCIsInlsIiwiTE9HMTBFIiwibG9nMTAiLCJsb2cyIiwic2luaCIsInRhbmgiLCJ0cnVuYyIsIk5VTUJFUiIsIk5hdGl2ZU51bWJlciIsIk51bWJlclByb3RvdHlwZSIsIkJST0tFTl9DTEFTU09GIiwidG9OdW1iZXIiLCJ0aGlyZCIsIm1heENvZGUiLCJkaWdpdHMiLCJjb2RlIiwiTnVtYmVyV3JhcHBlciIsImlzSW50ZWdlciIsImlzU2FmZUludGVnZXIiLCJNSU5fU0FGRV9JTlRFR0VSIiwidGhpc051bWJlclZhbHVlIiwibmF0aXZlVG9GaXhlZCIsInRvRml4ZWQiLCJhY2MiLCJtdWx0aXBseSIsImMyIiwiZGl2aWRlIiwiZGF0YVRvU3RyaW5nIiwiZnJhY3Rpb25EaWdpdHMiLCJlIiwieiIsImZyYWN0RGlnaXRzIiwieDIiLCJuYXRpdmVUb1ByZWNpc2lvbiIsInRvUHJlY2lzaW9uIiwicHJlY2lzaW9uIiwiX19kZWZpbmVHZXR0ZXJfXyIsIiRlbnRyaWVzIiwibmF0aXZlRnJlZXplIiwiZnJlZXplIiwiZnJvbUVudHJpZXMiLCJvYmoiLCJ2IiwiRkFJTFNfT05fUFJJTUlUSVZFUyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJuYXRpdmVHZXRQcm90b3R5cGVPZiIsIm5hdGl2ZUlzRXh0ZW5zaWJsZSIsIm5hdGl2ZUlzRnJvemVuIiwiaXNGcm96ZW4iLCJuYXRpdmVJc1NlYWxlZCIsImlzU2VhbGVkIiwibmF0aXZlS2V5cyIsIl9fbG9va3VwR2V0dGVyX18iLCJkZXNjIiwiX19sb29rdXBTZXR0ZXJfXyIsIm5hdGl2ZVByZXZlbnRFeHRlbnNpb25zIiwibmF0aXZlU2VhbCIsInNlYWwiLCIkdmFsdWVzIiwicGFyc2VGbG9hdEltcGxlbWVudGF0aW9uIiwicGFyc2VJbnRJbXBsZW1lbnRhdGlvbiIsIm5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlIiwicGVyZm9ybSIsImFsbFNldHRsZWQiLCJjYXBhYmlsaXR5IiwicHJvbWlzZVJlc29sdmUiLCJyZW1haW5pbmciLCJhbHJlYWR5Q2FsbGVkIiwic3RhdHVzIiwicmVhc29uIiwiUFJPTUlTRV9BTllfRVJST1IiLCJhbnkiLCJhbHJlYWR5UmVzb2x2ZWQiLCJhbHJlYWR5UmVqZWN0ZWQiLCJOYXRpdmVQcm9taXNlIiwicmVhbCIsIm9uRmluYWxseSIsImlzRnVuY3Rpb24iLCJJbnRlcm5hbCIsIk93blByb21pc2VDYXBhYmlsaXR5IiwiUHJvbWlzZVdyYXBwZXIiLCJuYXRpdmVUaGVuIiwibWljcm90YXNrIiwiaG9zdFJlcG9ydEVycm9ycyIsIlBST01JU0UiLCJnZXRJbnRlcm5hbFByb21pc2VTdGF0ZSIsIlByb21pc2VDb25zdHJ1Y3RvciIsIiRmZXRjaCIsIm5ld0dlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eSIsIkRJU1BBVENIX0VWRU5UIiwiY3JlYXRlRXZlbnQiLCJkaXNwYXRjaEV2ZW50IiwiTkFUSVZFX1JFSkVDVElPTl9FVkVOVCIsIlByb21pc2VSZWplY3Rpb25FdmVudCIsIlVOSEFORExFRF9SRUpFQ1RJT04iLCJGYWtlUHJvbWlzZSIsIklOQ09SUkVDVF9JVEVSQVRJT04iLCJhbGwiLCJpc1RoZW5hYmxlIiwiaXNSZWplY3QiLCJub3RpZmllZCIsImNoYWluIiwicmVhY3Rpb25zIiwib2siLCJleGl0ZWQiLCJyZWFjdGlvbiIsImhhbmRsZXIiLCJmYWlsIiwicmVqZWN0aW9uIiwib25IYW5kbGVVbmhhbmRsZWQiLCJvblVuaGFuZGxlZCIsImluaXRFdmVudCIsImlzVW5oYW5kbGVkIiwiZW1pdCIsInVud3JhcCIsImludGVybmFsUmVqZWN0IiwiaW50ZXJuYWxSZXNvbHZlIiwiZXhlY3V0b3IiLCJvbkZ1bGZpbGxlZCIsIm9uUmVqZWN0ZWQiLCJmZXRjaCIsIndyYXAiLCJyIiwiJHByb21pc2VSZXNvbHZlIiwicmFjZSIsIm5hdGl2ZUFwcGx5IiwiZnVuY3Rpb25BcHBseSIsInRoaXNBcmd1bWVudCIsImFyZ3VtZW50c0xpc3QiLCJuYXRpdmVDb25zdHJ1Y3QiLCJORVdfVEFSR0VUX0JVRyIsIkFSR1NfQlVHIiwiVGFyZ2V0IiwibmV3VGFyZ2V0IiwiJGFyZ3MiLCJSZWZsZWN0IiwiYXR0cmlidXRlcyIsImRlbGV0ZVByb3BlcnR5Iiwib2JqZWN0R2V0UHJvdG90eXBlT2YiLCJyZWNlaXZlciIsIm9iamVjdElzRXh0ZW5zaWJsZSIsIm9iamVjdFByZXZlbnRFeHRlbnNpb25zIiwib2JqZWN0U2V0UHJvdG90eXBlT2YiLCJleGlzdGluZ0Rlc2NyaXB0b3IiLCJvd25EZXNjcmlwdG9yIiwiZ2V0RmxhZ3MiLCJOYXRpdmVSZWdFeHAiLCJSZWdFeHBQcm90b3R5cGUiLCJDT1JSRUNUX05FVyIsIlJlZ0V4cFdyYXBwZXIiLCJwYXR0ZXJuIiwidGhpc0lzUmVnRXhwIiwicGF0dGVybklzUmVnRXhwIiwiZmxhZ3NBcmVVbmRlZmluZWQiLCJwcm94eSIsIm9iamVjdERlZmluZVByb3BlcnR5TW9kdWxlIiwicmVnRXhwRmxhZ3MiLCJuYXRpdmVUZXN0IiwiVE9fU1RSSU5HIiwibmF0aXZlVG9TdHJpbmciLCJOT1RfR0VORVJJQyIsIklOQ09SUkVDVF9OQU1FIiwicCIsInJmIiwiY3JlYXRlSFRNTCIsImZvcmNlZFN0cmluZ0hUTUxNZXRob2QiLCJhbmNob3IiLCJiaWciLCJibGluayIsImJvbGQiLCJjb2RlUG9pbnRBdCIsIm5vdEFSZWdFeHAiLCJjb3JyZWN0SXNSZWdFeHBMb2dpYyIsIm5hdGl2ZUVuZHNXaXRoIiwiZW5kc1dpdGgiLCJDT1JSRUNUX0lTX1JFR0VYUF9MT0dJQyIsInNlYXJjaFN0cmluZyIsImVuZFBvc2l0aW9uIiwic2VhcmNoIiwiZml4ZWQiLCJmb250Y29sb3IiLCJjb2xvciIsImZvbnRzaXplIiwibmF0aXZlRnJvbUNvZGVQb2ludCIsImZyb21Db2RlUG9pbnQiLCJlbGVtZW50cyIsIml0YWxpY3MiLCJTVFJJTkdfSVRFUkFUT1IiLCJwb2ludCIsImxpbmsiLCJnZXRSZWdFeHBGbGFncyIsImFkdmFuY2VTdHJpbmdJbmRleCIsIk1BVENIX0FMTCIsIlJFR0VYUF9TVFJJTkdfSVRFUkFUT1IiLCJSRUdFWFBfU1RSSU5HIiwicmVnRXhwQnVpbHRpbkV4ZWMiLCJuYXRpdmVNYXRjaEFsbCIsIm1hdGNoQWxsIiwiV09SS1NfV0lUSF9OT05fR0xPQkFMX1JFR0VYIiwiJFJlZ0V4cFN0cmluZ0l0ZXJhdG9yIiwiZnVsbFVuaWNvZGUiLCJyZWdFeHBFeGVjIiwiJG1hdGNoQWxsIiwiZmxhZ3NWYWx1ZSIsIm1hdGNoZXIiLCJyeCIsImZpeFJlZ0V4cFdlbGxLbm93blN5bWJvbExvZ2ljIiwibmF0aXZlTWF0Y2giLCJtYXliZUNhbGxOYXRpdmUiLCJyZXMiLCJtYXRjaFN0ciIsIiRwYWRFbmQiLCJwYWRFbmQiLCIkcGFkU3RhcnQiLCJyYXciLCJ0ZW1wbGF0ZSIsInJhd1RlbXBsYXRlIiwibGl0ZXJhbFNlZ21lbnRzIiwiZ2V0U3Vic3RpdHV0aW9uIiwic3RyaW5nSW5kZXhPZiIsInNlYXJjaFZhbHVlIiwicmVwbGFjZUFsbCIsInJlcGxhY2VWYWx1ZSIsIklTX1JFR19FWFAiLCJmdW5jdGlvbmFsUmVwbGFjZSIsInNlYXJjaExlbmd0aCIsImFkdmFuY2VCeSIsImVuZE9mTGFzdE1hdGNoIiwiVU5TQUZFX1NVQlNUSVRVVEUiLCJyZXN1bHRzIiwiYWNjdW11bGF0ZWRSZXN1bHQiLCJuZXh0U291cmNlUG9zaXRpb24iLCJyZXBsYWNlckFyZ3MiLCJzYW1lVmFsdWUiLCJTRUFSQ0giLCJuYXRpdmVTZWFyY2giLCJzZWFyY2hlciIsInByZXZpb3VzTGFzdEluZGV4Iiwic21hbGwiLCJjYWxsUmVnRXhwRXhlYyIsImFycmF5UHVzaCIsIk1BWF9VSU5UMzIiLCJTVVBQT1JUU19ZIiwiU1BMSVQiLCJuYXRpdmVTcGxpdCIsImludGVybmFsU3BsaXQiLCJsaW1pdCIsImxpbSIsImxhc3RMZW5ndGgiLCJsYXN0TGFzdEluZGV4Iiwic2VwYXJhdG9yQ29weSIsInNwbGl0dGVyIiwidW5pY29kZU1hdGNoaW5nIiwibmF0aXZlU3RhcnRzV2l0aCIsInN0YXJ0c1dpdGgiLCJzdHJpa2UiLCJzdWIiLCJzdXAiLCIkdHJpbUVuZCIsImZvcmNlZFN0cmluZ1RyaW1NZXRob2QiLCJ0cmltRW5kIiwidHJpbVJpZ2h0IiwiJHRyaW1TdGFydCIsInRyaW1TdGFydCIsInRyaW1MZWZ0IiwiJHRyaW0iLCJkZWZpbmVXZWxsS25vd25TeW1ib2wiLCJOYXRpdmVTeW1ib2wiLCJkZXNjcmlwdGlvbiIsIkVtcHR5U3RyaW5nRGVzY3JpcHRpb25TdG9yZSIsIlN5bWJvbFdyYXBwZXIiLCJzeW1ib2xQcm90b3R5cGUiLCJzeW1ib2xUb1N0cmluZyIsIm5hdGl2ZSIsIm5hdGl2ZU9iamVjdENyZWF0ZSIsImdldE93blByb3BlcnR5TmFtZXNFeHRlcm5hbCIsIkhJRERFTiIsIiRTeW1ib2wiLCJBbGxTeW1ib2xzIiwiT2JqZWN0UHJvdG90eXBlU3ltYm9scyIsIlN0cmluZ1RvU3ltYm9sUmVnaXN0cnkiLCJTeW1ib2xUb1N0cmluZ1JlZ2lzdHJ5IiwiUU9iamVjdCIsIlVTRV9TRVRURVIiLCJmaW5kQ2hpbGQiLCJzZXRTeW1ib2xEZXNjcmlwdG9yIiwiT2JqZWN0UHJvdG90eXBlRGVzY3JpcHRvciIsImlzU3ltYm9sIiwiJGRlZmluZVByb3BlcnR5IiwiJGRlZmluZVByb3BlcnRpZXMiLCJwcm9wZXJ0aWVzIiwiJGdldE93blByb3BlcnR5U3ltYm9scyIsIiRwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIiRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCIkZ2V0T3duUHJvcGVydHlOYW1lcyIsIklTX09CSkVDVF9QUk9UT1RZUEUiLCJrZXlGb3IiLCJzeW0iLCJ1c2VTZXR0ZXIiLCJ1c2VTaW1wbGUiLCIkcmVwbGFjZXIiLCIkY29weVdpdGhpbiIsIiRmaWxsIiwiZnJvbVNwZWNpZXNBbmRMaXN0IiwicHJlZGljYXRlIiwiY3JlYXRlVHlwZWRBcnJheUNvbnN0cnVjdG9yIiwiQXJyYXlJdGVyYXRvcnMiLCJhcnJheVZhbHVlcyIsImFycmF5S2V5cyIsImFycmF5RW50cmllcyIsIm5hdGl2ZVR5cGVkQXJyYXlJdGVyYXRvciIsIkNPUlJFQ1RfSVRFUl9OQU1FIiwidHlwZWRBcnJheVZhbHVlcyIsIiRqb2luIiwiJGxhc3RJbmRleE9mIiwibWlkZGxlIiwiJHNsaWNlIiwiJHNvcnQiLCJiZWdpbiIsImJlZ2luSW5kZXgiLCIkdG9Mb2NhbGVTdHJpbmciLCJ0b0xvY2FsZVN0cmluZyIsIlRPX0xPQ0FMRV9TVFJJTkdfQlVHIiwiVWludDhBcnJheVByb3RvdHlwZSIsImFycmF5VG9TdHJpbmciLCJhcnJheUpvaW4iLCJJU19OT1RfQVJSQVlfTUVUSE9EIiwiSW50ZXJuYWxXZWFrTWFwIiwiY29sbGVjdGlvbldlYWsiLCJlbmZvcmNlSXRlcm5hbFN0YXRlIiwiSVNfSUUxMSIsIiRXZWFrTWFwIiwiV2Vha01hcFByb3RvdHlwZSIsIm5hdGl2ZURlbGV0ZSIsIm5hdGl2ZUhhcyIsIm5hdGl2ZUdldCIsIm5hdGl2ZVNldCIsIkRPTUl0ZXJhYmxlcyIsIkNPTExFQ1RJT05fTkFNRSIsIkNvbGxlY3Rpb24iLCJDb2xsZWN0aW9uUHJvdG90eXBlIiwiQXJyYXlJdGVyYXRvck1ldGhvZHMiLCJBcnJheVZhbHVlcyIsInNjaGVkdWxlciIsInRpbWVvdXQiLCJib3VuZEFyZ3MiLCJzZXRJbnRlcnZhbCIsIlVTRV9OQVRJVkVfVVJMIiwiaGFzT3duIiwiZ2V0SXRlcmF0b3IiLCJIZWFkZXJzIiwiVVJMX1NFQVJDSF9QQVJBTVMiLCJVUkxfU0VBUkNIX1BBUkFNU19JVEVSQVRPUiIsImdldEludGVybmFsUGFyYW1zU3RhdGUiLCJwbHVzIiwic2VxdWVuY2VzIiwicGVyY2VudFNlcXVlbmNlIiwicGVyY2VudERlY29kZSIsInNlcXVlbmNlIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwiZGVzZXJpYWxpemUiLCJzZXJpYWxpemUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJwYXJzZVNlYXJjaFBhcmFtcyIsInF1ZXJ5Iiwic2hpZnQiLCJ1cGRhdGVTZWFyY2hQYXJhbXMiLCJ2YWxpZGF0ZUFyZ3VtZW50c0xlbmd0aCIsInBhc3NlZCIsInJlcXVpcmVkIiwiVVJMU2VhcmNoUGFyYW1zSXRlcmF0b3IiLCJwYXJhbXMiLCJVUkxTZWFyY2hQYXJhbXNDb25zdHJ1Y3RvciIsImVudHJ5SXRlcmF0b3IiLCJlbnRyeU5leHQiLCJ1cGRhdGVVUkwiLCJVUkxTZWFyY2hQYXJhbXNQcm90b3R5cGUiLCJhcHBlbmQiLCJnZXRBbGwiLCJmb3VuZCIsImVudHJpZXNJbmRleCIsInNsaWNlSW5kZXgiLCJjYWxsYmFjayIsImJvZHkiLCJoZWFkZXJzIiwiZ2V0U3RhdGUiLCJFT0YiLCJhcnJheUZyb20iLCJ0b0FTQ0lJIiwiVVJMU2VhcmNoUGFyYW1zTW9kdWxlIiwiTmF0aXZlVVJMIiwiZ2V0SW50ZXJuYWxTZWFyY2hQYXJhbXNTdGF0ZSIsImdldEludGVybmFsVVJMU3RhdGUiLCJJTlZBTElEX1NDSEVNRSIsIklOVkFMSURfSE9TVCIsIklOVkFMSURfUE9SVCIsIkFMUEhBIiwiQUxQSEFOVU1FUklDIiwiRElHSVQiLCJIRVhfU1RBUlQiLCJPQ1QiLCJERUMiLCJIRVgiLCJGT1JCSURERU5fSE9TVF9DT0RFX1BPSU5UIiwiRk9SQklEREVOX0hPU1RfQ09ERV9QT0lOVF9FWENMVURJTkdfUEVSQ0VOVCIsIkxFQURJTkdfQU5EX1RSQUlMSU5HX0MwX0NPTlRST0xfT1JfU1BBQ0UiLCJUQUJfQU5EX05FV19MSU5FIiwicGFyc2VIb3N0IiwiY29kZVBvaW50cyIsInBhcnNlSVB2NiIsImlzU3BlY2lhbCIsInBhcnNlSVB2NCIsInBlcmNlbnRFbmNvZGUiLCJDMENvbnRyb2xQZXJjZW50RW5jb2RlU2V0IiwicGFydHNMZW5ndGgiLCJudW1iZXJzIiwicGFydCIsImlwdjQiLCJwYXJ0cyIsInBvcCIsIm51bWJlcnNTZWVuIiwiaXB2NFBpZWNlIiwic3dhcHMiLCJzd2FwIiwiYWRkcmVzcyIsInBpZWNlSW5kZXgiLCJjb21wcmVzcyIsInBvaW50ZXIiLCJjaGFyIiwic2VyaWFsaXplSG9zdCIsImlnbm9yZTAiLCJ1bnNoaWZ0IiwiaXB2NiIsIm1heEluZGV4IiwiY3VyclN0YXJ0IiwiY3Vyckxlbmd0aCIsImZpbmRMb25nZXN0WmVyb1NlcXVlbmNlIiwiZnJhZ21lbnRQZXJjZW50RW5jb2RlU2V0IiwicGF0aFBlcmNlbnRFbmNvZGVTZXQiLCJ1c2VyaW5mb1BlcmNlbnRFbmNvZGVTZXQiLCJzcGVjaWFsU2NoZW1lcyIsImZ0cCIsImZpbGUiLCJodHRwIiwiaHR0cHMiLCJ3cyIsIndzcyIsInNjaGVtZSIsImluY2x1ZGVzQ3JlZGVudGlhbHMiLCJwYXNzd29yZCIsImNhbm5vdEhhdmVVc2VybmFtZVBhc3N3b3JkUG9ydCIsImNhbm5vdEJlQUJhc2VVUkwiLCJpc1dpbmRvd3NEcml2ZUxldHRlciIsIm5vcm1hbGl6ZWQiLCJzdGFydHNXaXRoV2luZG93c0RyaXZlTGV0dGVyIiwic2hvcnRlblVSTHNQYXRoIiwicGF0aFNpemUiLCJpc1NpbmdsZURvdCIsInNlZ21lbnQiLCJTQ0hFTUVfU1RBUlQiLCJTQ0hFTUUiLCJOT19TQ0hFTUUiLCJTUEVDSUFMX1JFTEFUSVZFX09SX0FVVEhPUklUWSIsIlBBVEhfT1JfQVVUSE9SSVRZIiwiUkVMQVRJVkUiLCJSRUxBVElWRV9TTEFTSCIsIlNQRUNJQUxfQVVUSE9SSVRZX1NMQVNIRVMiLCJTUEVDSUFMX0FVVEhPUklUWV9JR05PUkVfU0xBU0hFUyIsIkFVVEhPUklUWSIsIkhPU1QiLCJIT1NUTkFNRSIsIlBPUlQiLCJGSUxFIiwiRklMRV9TTEFTSCIsIkZJTEVfSE9TVCIsIlBBVEhfU1RBUlQiLCJQQVRIIiwiQ0FOTk9UX0JFX0FfQkFTRV9VUkxfUEFUSCIsIlFVRVJZIiwiRlJBR01FTlQiLCJwYXJzZVVSTCIsInN0YXRlT3ZlcnJpZGUiLCJidWZmZXJDb2RlUG9pbnRzIiwiZmFpbHVyZSIsInNlZW5BdCIsInNlZW5CcmFja2V0Iiwic2VlblBhc3N3b3JkVG9rZW4iLCJmcmFnbWVudCIsImNvZGVQb2ludCIsImVuY29kZWRDb2RlUG9pbnRzIiwiVVJMQ29uc3RydWN0b3IiLCJiYXNlU3RhdGUiLCJ1cmxTdHJpbmciLCJzZWFyY2hQYXJhbXNTdGF0ZSIsInNlcmlhbGl6ZVVSTCIsIm9yaWdpbiIsImdldE9yaWdpbiIsImdldFByb3RvY29sIiwiZ2V0VXNlcm5hbWUiLCJnZXRQYXNzd29yZCIsImdldEhvc3QiLCJob3N0bmFtZSIsImdldEhvc3RuYW1lIiwiZ2V0UG9ydCIsImdldFBhdGhuYW1lIiwiZ2V0U2VhcmNoIiwiZ2V0U2VhcmNoUGFyYW1zIiwiZ2V0SGFzaCIsIlVSTFByb3RvdHlwZSIsImFjY2Vzc29yRGVzY3JpcHRvciIsIm5hdGl2ZUNyZWF0ZU9iamVjdFVSTCIsImNyZWF0ZU9iamVjdFVSTCIsIm5hdGl2ZVJldm9rZU9iamVjdFVSTCIsInJldm9rZU9iamVjdFVSTCIsImJsb2IiLCJydW50aW1lIiwiT3AiLCJpdGVyYXRvclN5bWJvbCIsImFzeW5jSXRlcmF0b3JTeW1ib2wiLCJhc3luY0l0ZXJhdG9yIiwidG9TdHJpbmdUYWdTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsImVyciIsImlubmVyRm4iLCJvdXRlckZuIiwidHJ5TG9jc0xpc3QiLCJwcm90b0dlbmVyYXRvciIsIkdlbmVyYXRvciIsImdlbmVyYXRvciIsImNvbnRleHQiLCJDb250ZXh0IiwiX2ludm9rZSIsIkdlblN0YXRlU3VzcGVuZGVkU3RhcnQiLCJHZW5TdGF0ZUV4ZWN1dGluZyIsIkdlblN0YXRlQ29tcGxldGVkIiwiZG9uZVJlc3VsdCIsImRlbGVnYXRlIiwiZGVsZWdhdGVSZXN1bHQiLCJtYXliZUludm9rZURlbGVnYXRlIiwiQ29udGludWVTZW50aW5lbCIsInNlbnQiLCJfc2VudCIsImRpc3BhdGNoRXhjZXB0aW9uIiwiYWJydXB0IiwicmVjb3JkIiwidHJ5Q2F0Y2giLCJHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkIiwibWFrZUludm9rZU1ldGhvZCIsIkdlbmVyYXRvckZ1bmN0aW9uIiwiR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUiLCJnZXRQcm90byIsIk5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlIiwiR3AiLCJkZWZpbmVJdGVyYXRvck1ldGhvZHMiLCJBc3luY0l0ZXJhdG9yIiwiUHJvbWlzZUltcGwiLCJpbnZva2UiLCJfX2F3YWl0IiwidW53cmFwcGVkIiwicHJldmlvdXNQcm9taXNlIiwiY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmciLCJpbmZvIiwicmVzdWx0TmFtZSIsIm5leHRMb2MiLCJwdXNoVHJ5RW50cnkiLCJsb2NzIiwidHJ5TG9jIiwiY2F0Y2hMb2MiLCJmaW5hbGx5TG9jIiwiYWZ0ZXJMb2MiLCJ0cnlFbnRyaWVzIiwicmVzZXRUcnlFbnRyeSIsImNvbXBsZXRpb24iLCJyZXNldCIsImRpc3BsYXlOYW1lIiwiaXNHZW5lcmF0b3JGdW5jdGlvbiIsImdlbkZ1biIsImN0b3IiLCJtYXJrIiwiYXdyYXAiLCJhc3luYyIsIml0ZXIiLCJza2lwVGVtcFJlc2V0Iiwicm9vdFJlY29yZCIsInJ2YWwiLCJleGNlcHRpb24iLCJoYW5kbGUiLCJsb2MiLCJjYXVnaHQiLCJoYXNDYXRjaCIsImhhc0ZpbmFsbHkiLCJmaW5hbGx5RW50cnkiLCJjb21wbGV0ZSIsImZpbmlzaCIsInRocm93biIsImRlbGVnYXRlWWllbGQiLCJyZWdlbmVyYXRvclJ1bnRpbWUiLCJhY2NpZGVudGFsU3RyaWN0TW9kZSIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsIl9fd2VicGFja19tb2R1bGVzX18iLCJkIiwiZGVmaW5pdGlvbiIsIm8iLCJwcm9wIiwiRGF0YU5vZGUiLCJjaGlsZHJlbiIsInNlbGZDb3VudCIsIm5vbmUiLCJzZWxlY3RvciIsInF1ZXJ5U2VsZWN0b3IiLCJlbXB0eSIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJtYXRjaGVzIiwiY2hpbGRNYXRjaGVyIiwiY2hpbGRGaXJzdCIsImZpcnN0RWxlbWVudENoaWxkIiwidXBkYXRlIiwiRW50ZXJOb2RlIiwiZGF0dW0iLCJvd25lckRvY3VtZW50IiwibmFtZXNwYWNlVVJJIiwiX25leHQiLCJfcGFyZW50IiwiX19kYXRhX18iLCJiaW5kSW5kZXgiLCJncm91cCIsImdyb3VwTGVuZ3RoIiwiZGF0YUxlbmd0aCIsImJpbmRLZXkiLCJrZXlWYWx1ZSIsIm5vZGVCeUtleVZhbHVlIiwiTWFwIiwia2V5VmFsdWVzIiwiZGVsZXRlIiwiYXNjZW5kaW5nIiwiY2hpbGQiLCJpbnNlcnRCZWZvcmUiLCJ4aHRtbCIsInN2ZyIsInhsaW5rIiwieG1sIiwieG1sbnMiLCJwcmVmaXgiLCJuYW1lc3BhY2VzIiwibG9jYWwiLCJhdHRyUmVtb3ZlIiwicmVtb3ZlQXR0cmlidXRlIiwiYXR0clJlbW92ZU5TIiwiZnVsbG5hbWUiLCJyZW1vdmVBdHRyaWJ1dGVOUyIsImF0dHJDb25zdGFudCIsInNldEF0dHJpYnV0ZSIsImF0dHJDb25zdGFudE5TIiwic2V0QXR0cmlidXRlTlMiLCJhdHRyRnVuY3Rpb24iLCJhdHRyRnVuY3Rpb25OUyIsImRlZmF1bHRWaWV3Iiwic3R5bGVSZW1vdmUiLCJyZW1vdmVQcm9wZXJ0eSIsInN0eWxlQ29uc3RhbnQiLCJwcmlvcml0eSIsInNldFByb3BlcnR5Iiwic3R5bGVGdW5jdGlvbiIsInN0eWxlVmFsdWUiLCJnZXRQcm9wZXJ0eVZhbHVlIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsInByb3BlcnR5UmVtb3ZlIiwicHJvcGVydHlDb25zdGFudCIsInByb3BlcnR5RnVuY3Rpb24iLCJjbGFzc0FycmF5IiwiY2xhc3NMaXN0IiwiQ2xhc3NMaXN0IiwiX25vZGUiLCJfbmFtZXMiLCJnZXRBdHRyaWJ1dGUiLCJjbGFzc2VkQWRkIiwiY2xhc3NlZFJlbW92ZSIsInJlbW92ZSIsImNsYXNzZWRUcnVlIiwiY2xhc3NlZEZhbHNlIiwiY2xhc3NlZEZ1bmN0aW9uIiwidGV4dFJlbW92ZSIsInRleHRDb250ZW50IiwidGV4dENvbnN0YW50IiwidGV4dEZ1bmN0aW9uIiwiaHRtbFJlbW92ZSIsImlubmVySFRNTCIsImh0bWxDb25zdGFudCIsImh0bWxGdW5jdGlvbiIsInJhaXNlIiwibmV4dFNpYmxpbmciLCJwYXJlbnROb2RlIiwibG93ZXIiLCJwcmV2aW91c1NpYmxpbmciLCJmaXJzdENoaWxkIiwiY3JlYXRvckluaGVyaXQiLCJ1cmkiLCJkb2N1bWVudEVsZW1lbnQiLCJjcmVhdGVFbGVtZW50TlMiLCJjcmVhdG9yRml4ZWQiLCJjb25zdGFudE51bGwiLCJzZWxlY3Rpb25fY2xvbmVTaGFsbG93IiwiY2xvbmUiLCJjbG9uZU5vZGUiLCJzZWxlY3Rpb25fY2xvbmVEZWVwIiwicGFyc2VUeXBlbmFtZXMiLCJ0eXBlbmFtZXMiLCJvblJlbW92ZSIsInR5cGVuYW1lIiwib24iLCJfX29uIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsIm9uQWRkIiwiY29udGV4dExpc3RlbmVyIiwiQ3VzdG9tRXZlbnQiLCJidWJibGVzIiwiY2FuY2VsYWJsZSIsImRldGFpbCIsImRpc3BhdGNoQ29uc3RhbnQiLCJkaXNwYXRjaEZ1bmN0aW9uIiwiY29udGFpbnMiLCJTZWxlY3Rpb24iLCJwYXJlbnRzIiwiX2dyb3VwcyIsIl9wYXJlbnRzIiwic2VsZWN0aW9uIiwic2VsZWN0Iiwic3ViZ3JvdXBzIiwic3Vibm9kZSIsInN1Ymdyb3VwIiwic2VsZWN0QWxsIiwiYXJyYXlBbGwiLCJzZWxlY3RvckFsbCIsInNlbGVjdENoaWxkIiwiY2hpbGRGaW5kIiwic2VsZWN0Q2hpbGRyZW4iLCJjaGlsZHJlbkZpbHRlciIsImVudGVyR3JvdXAiLCJ1cGRhdGVHcm91cCIsImV4aXRHcm91cCIsImkwIiwiaTEiLCJfZW50ZXIiLCJfZXhpdCIsInNwYXJzZSIsIm9uZW50ZXIiLCJvbnVwZGF0ZSIsIm9uZXhpdCIsIm1lcmdlIiwib3JkZXIiLCJncm91cHMwIiwiZ3JvdXBzMSIsIm0wIiwibTEiLCJtZXJnZXMiLCJncm91cDAiLCJncm91cDEiLCJjb21wYXJlRG9jdW1lbnRQb3NpdGlvbiIsImNvbXBhcmUiLCJjb21wYXJlTm9kZSIsInNvcnRncm91cHMiLCJzb3J0Z3JvdXAiLCJub2RlcyIsImVhY2giLCJhdHRyIiwiZ2V0QXR0cmlidXRlTlMiLCJjbGFzc2VkIiwidGV4dCIsImNyZWF0b3IiLCJpbnNlcnQiLCJiZWZvcmUiLCJkZWVwIiwiZGlzcGF0Y2giLCJub29wIiwiXyIsInR5cGVzIiwiY29weSIsInRhc2tIZWFkIiwidGFza1RhaWwiLCJpbnRlcnZhbCIsImNsb2NrTGFzdCIsImNsb2NrTm93IiwiY2xvY2tTa2V3IiwiY2xvY2siLCJwZXJmb3JtYW5jZSIsInNldEZyYW1lIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiY2xlYXJOb3ciLCJUaW1lciIsIl9jYWxsIiwiX3RpbWUiLCJ0aW1lciIsImRlbGF5IiwidGltZSIsInJlc3RhcnQiLCJ3YWtlIiwidGltZXJGbHVzaCIsInQwIiwidDIiLCJ0MSIsInNsZWVwIiwibmFwIiwicG9rZSIsImNsZWFyVGltZW91dCIsImNsZWFySW50ZXJ2YWwiLCJlbGFwc2VkIiwiZW1wdHlPbiIsImVtcHR5VHdlZW4iLCJ0aW1pbmciLCJzY2hlZHVsZXMiLCJfX3RyYW5zaXRpb24iLCJ0d2VlbiIsInRpY2siLCJkdXJhdGlvbiIsImVhc2UiLCJzY2hlZHVsZSIsImFjdGl2ZSIsInN2Z05vZGUiLCJkZWdyZWVzIiwiUEkiLCJpZGVudGl0eSIsInRyYW5zbGF0ZVgiLCJ0cmFuc2xhdGVZIiwicm90YXRlIiwic2tld1giLCJzY2FsZVgiLCJzY2FsZVkiLCJhdGFuMiIsImF0YW4iLCJpbnRlcnBvbGF0ZVRyYW5zZm9ybSIsInBhcnNlIiwicHhDb21tYSIsInB4UGFyZW4iLCJkZWdQYXJlbiIsInhhIiwieWEiLCJ4YiIsInliIiwidHJhbnNsYXRlIiwic2NhbGUiLCJpbnRlcnBvbGF0ZVRyYW5zZm9ybUNzcyIsIkRPTU1hdHJpeCIsIldlYktpdENTU01hdHJpeCIsImlzSWRlbnRpdHkiLCJkZWNvbXBvc2UiLCJpbnRlcnBvbGF0ZVRyYW5zZm9ybVN2ZyIsInRyYW5zZm9ybSIsImJhc2VWYWwiLCJjb25zb2xpZGF0ZSIsIm1hdHJpeCIsInR3ZWVuUmVtb3ZlIiwidHdlZW4wIiwidHdlZW4xIiwidHdlZW5GdW5jdGlvbiIsInR3ZWVuVmFsdWUiLCJ0cmFuc2l0aW9uIiwiX2lkIiwiZXh0ZW5kIiwiQ29sb3IiLCJkYXJrZXIiLCJicmlnaHRlciIsInJlSSIsInJlTiIsInJlUCIsInJlSGV4IiwicmVSZ2JJbnRlZ2VyIiwicmVSZ2JQZXJjZW50IiwicmVSZ2JhSW50ZWdlciIsInJlUmdiYVBlcmNlbnQiLCJyZUhzbFBlcmNlbnQiLCJyZUhzbGFQZXJjZW50IiwibmFtZWQiLCJhbGljZWJsdWUiLCJhbnRpcXVld2hpdGUiLCJhcXVhIiwiYXF1YW1hcmluZSIsImF6dXJlIiwiYmVpZ2UiLCJiaXNxdWUiLCJibGFjayIsImJsYW5jaGVkYWxtb25kIiwiYmx1ZSIsImJsdWV2aW9sZXQiLCJicm93biIsImJ1cmx5d29vZCIsImNhZGV0Ymx1ZSIsImNoYXJ0cmV1c2UiLCJjaG9jb2xhdGUiLCJjb3JhbCIsImNvcm5mbG93ZXJibHVlIiwiY29ybnNpbGsiLCJjcmltc29uIiwiY3lhbiIsImRhcmtibHVlIiwiZGFya2N5YW4iLCJkYXJrZ29sZGVucm9kIiwiZGFya2dyYXkiLCJkYXJrZ3JlZW4iLCJkYXJrZ3JleSIsImRhcmtraGFraSIsImRhcmttYWdlbnRhIiwiZGFya29saXZlZ3JlZW4iLCJkYXJrb3JhbmdlIiwiZGFya29yY2hpZCIsImRhcmtyZWQiLCJkYXJrc2FsbW9uIiwiZGFya3NlYWdyZWVuIiwiZGFya3NsYXRlYmx1ZSIsImRhcmtzbGF0ZWdyYXkiLCJkYXJrc2xhdGVncmV5IiwiZGFya3R1cnF1b2lzZSIsImRhcmt2aW9sZXQiLCJkZWVwcGluayIsImRlZXBza3libHVlIiwiZGltZ3JheSIsImRpbWdyZXkiLCJkb2RnZXJibHVlIiwiZmlyZWJyaWNrIiwiZmxvcmFsd2hpdGUiLCJmb3Jlc3RncmVlbiIsImZ1Y2hzaWEiLCJnYWluc2Jvcm8iLCJnaG9zdHdoaXRlIiwiZ29sZCIsImdvbGRlbnJvZCIsImdyYXkiLCJncmVlbiIsImdyZWVueWVsbG93IiwiZ3JleSIsImhvbmV5ZGV3IiwiaG90cGluayIsImluZGlhbnJlZCIsImluZGlnbyIsIml2b3J5Iiwia2hha2kiLCJsYXZlbmRlciIsImxhdmVuZGVyYmx1c2giLCJsYXduZ3JlZW4iLCJsZW1vbmNoaWZmb24iLCJsaWdodGJsdWUiLCJsaWdodGNvcmFsIiwibGlnaHRjeWFuIiwibGlnaHRnb2xkZW5yb2R5ZWxsb3ciLCJsaWdodGdyYXkiLCJsaWdodGdyZWVuIiwibGlnaHRncmV5IiwibGlnaHRwaW5rIiwibGlnaHRzYWxtb24iLCJsaWdodHNlYWdyZWVuIiwibGlnaHRza3libHVlIiwibGlnaHRzbGF0ZWdyYXkiLCJsaWdodHNsYXRlZ3JleSIsImxpZ2h0c3RlZWxibHVlIiwibGlnaHR5ZWxsb3ciLCJsaW1lIiwibGltZWdyZWVuIiwibGluZW4iLCJtYWdlbnRhIiwibWFyb29uIiwibWVkaXVtYXF1YW1hcmluZSIsIm1lZGl1bWJsdWUiLCJtZWRpdW1vcmNoaWQiLCJtZWRpdW1wdXJwbGUiLCJtZWRpdW1zZWFncmVlbiIsIm1lZGl1bXNsYXRlYmx1ZSIsIm1lZGl1bXNwcmluZ2dyZWVuIiwibWVkaXVtdHVycXVvaXNlIiwibWVkaXVtdmlvbGV0cmVkIiwibWlkbmlnaHRibHVlIiwibWludGNyZWFtIiwibWlzdHlyb3NlIiwibW9jY2FzaW4iLCJuYXZham93aGl0ZSIsIm5hdnkiLCJvbGRsYWNlIiwib2xpdmUiLCJvbGl2ZWRyYWIiLCJvcmFuZ2UiLCJvcmFuZ2VyZWQiLCJvcmNoaWQiLCJwYWxlZ29sZGVucm9kIiwicGFsZWdyZWVuIiwicGFsZXR1cnF1b2lzZSIsInBhbGV2aW9sZXRyZWQiLCJwYXBheWF3aGlwIiwicGVhY2hwdWZmIiwicGVydSIsInBpbmsiLCJwbHVtIiwicG93ZGVyYmx1ZSIsInB1cnBsZSIsInJlYmVjY2FwdXJwbGUiLCJyZWQiLCJyb3N5YnJvd24iLCJyb3lhbGJsdWUiLCJzYWRkbGVicm93biIsInNhbG1vbiIsInNhbmR5YnJvd24iLCJzZWFncmVlbiIsInNlYXNoZWxsIiwic2llbm5hIiwic2lsdmVyIiwic2t5Ymx1ZSIsInNsYXRlYmx1ZSIsInNsYXRlZ3JheSIsInNsYXRlZ3JleSIsInNub3ciLCJzcHJpbmdncmVlbiIsInN0ZWVsYmx1ZSIsInRhbiIsInRlYWwiLCJ0aGlzdGxlIiwidG9tYXRvIiwidHVycXVvaXNlIiwidmlvbGV0Iiwid2hlYXQiLCJ3aGl0ZSIsIndoaXRlc21va2UiLCJ5ZWxsb3ciLCJ5ZWxsb3dncmVlbiIsImNvbG9yX2Zvcm1hdEhleCIsInJnYiIsImZvcm1hdEhleCIsImNvbG9yX2Zvcm1hdFJnYiIsImZvcm1hdFJnYiIsImZvcm1hdCIsImwiLCJyZ2JuIiwiUmdiIiwicmdiYSIsImhzbGEiLCJyZ2JDb252ZXJ0Iiwib3BhY2l0eSIsInJnYl9mb3JtYXRIZXgiLCJyZ2JfZm9ybWF0UmdiIiwiaCIsIkhzbCIsImhzbENvbnZlcnQiLCJoc2wiLCJoc2wycmdiIiwibTIiLCJiYXNpcyIsInYwIiwidjEiLCJ2MiIsInYzIiwidDMiLCJjaGFubmVscyIsImRpc3BsYXlhYmxlIiwiZm9ybWF0SHNsIiwibm9nYW1tYSIsImxpbmVhciIsInJnYkdhbW1hIiwiZXhwb25lbnRpYWwiLCJnYW1tYSIsInJnYlNwbGluZSIsInNwbGluZSIsImNvbG9ycyIsInJlQSIsInJlQiIsImFtIiwiYm0iLCJicyIsImJpIiwib25lIiwiemVybyIsImludGVycG9sYXRlIiwic3RyaW5nMDAiLCJpbnRlcnBvbGF0ZTAiLCJzdHJpbmcxIiwic3RyaW5nMCIsInN0cmluZzEwIiwiYXR0ckludGVycG9sYXRlIiwiYXR0ckludGVycG9sYXRlTlMiLCJhdHRyVHdlZW5OUyIsIl92YWx1ZSIsImF0dHJUd2VlbiIsImRlbGF5RnVuY3Rpb24iLCJkZWxheUNvbnN0YW50IiwiZHVyYXRpb25GdW5jdGlvbiIsImR1cmF0aW9uQ29uc3RhbnQiLCJlYXNlQ29uc3RhbnQiLCJvbkZ1bmN0aW9uIiwib24wIiwib24xIiwic2l0Iiwic3R5bGVJbnRlcnBvbGF0ZSIsInN0eWxlVHdlZW4iLCJ0ZXh0SW50ZXJwb2xhdGUiLCJ0ZXh0VHdlZW4iLCJfbmFtZSIsIm5ld0lkIiwic2VsZWN0aW9uX3Byb3RvdHlwZSIsImluaGVyaXQiLCJpZDAiLCJpZDEiLCJzdHlsZU51bGwiLCJsaXN0ZW5lcjAiLCJzdHlsZU1heWJlUmVtb3ZlIiwicmVtb3ZlRnVuY3Rpb24iLCJlYXNlVmFyeWluZyIsImNhbmNlbCIsImludGVycnVwdCIsImRlZmF1bHRUaW1pbmciLCJyYWRpYW5zIiwiWG4iLCJabiIsImxhYkNvbnZlcnQiLCJMYWIiLCJIY2wiLCJoY2wybGFiIiwicmdiMmxyZ2IiLCJ4eXoybGFiIiwibGFiIiwibGFiMnh5eiIsImxyZ2IycmdiIiwiaGNsQ29udmVydCIsImNvcyIsInNpbiIsImhpZXJhcmNoeSIsIm1hcENoaWxkcmVuIiwib2JqZWN0Q2hpbGRyZW4iLCJjaGlsZHMiLCJOb2RlIiwiZWFjaEJlZm9yZSIsImNvbXB1dGVIZWlnaHQiLCJjb3B5RGF0YSIsImhlaWdodCIsIngwIiwieTAiLCJ4MSIsInkxIiwiZHgiLCJkeSIsInBhZGRpbmciLCJwYXJ0aXRpb24iLCJwb3NpdGlvbk5vZGUiLCJkZWZhdWx0U2VwYXJhdGlvbiIsIm5leHRMZWZ0IiwibmV4dFJpZ2h0IiwibW92ZVN1YnRyZWUiLCJ3bSIsIndwIiwiY2hhbmdlIiwibmV4dEFuY2VzdG9yIiwidmltIiwiYW5jZXN0b3IiLCJUcmVlTm9kZSIsInNlcGFyYXRpb24iLCJub2RlU2l6ZSIsInRyZWUiLCJ0cmVlUm9vdCIsImVhY2hBZnRlciIsImZpcnN0V2FsayIsInNlY29uZFdhbGsiLCJzaXplTm9kZSIsImJvdHRvbSIsInR4Iiwia3giLCJreSIsInNpYmxpbmdzIiwidyIsImV4ZWN1dGVTaGlmdHMiLCJtaWRwb2ludCIsInZpcCIsInZvcCIsInZvbSIsInNpcCIsInNvcCIsInNpbSIsInNvbSIsImFwcG9ydGlvbiIsImFOb2RlcyIsImFuY2VzdG9ycyIsImJOb2RlcyIsImxlYXN0Q29tbW9uQW5jZXN0b3IiLCJkZXNjZW5kYW50cyIsImxlYXZlcyIsImxpbmtzIiwiY3VycmVudCIsImN1c3RvbSIsInJhdGlvIiwic3F1YXJpZnkiLCJyb3ciLCJub2RlVmFsdWUiLCJzdW1WYWx1ZSIsIm1pblZhbHVlIiwibWF4VmFsdWUiLCJuZXdSYXRpbyIsIm1pblJhdGlvIiwiYWxwaGEiLCJiZXRhIiwicm93cyIsImRpY2UiLCJzcXVhcmlmeVJhdGlvIiwiY29uc3RhbnRaZXJvIiwidGlsZSIsInBhZGRpbmdTdGFjayIsInBhZGRpbmdJbm5lciIsInBhZGRpbmdUb3AiLCJwYWRkaW5nUmlnaHQiLCJwYWRkaW5nQm90dG9tIiwicGFkZGluZ0xlZnQiLCJ0cmVlbWFwIiwicGFkZGluZ091dGVyIiwiZ2VuZXJpY0FycmF5IiwibmIiLCJuYSIsInNldFRpbWUiLCJlMTAiLCJlNSIsImUyIiwidGlja0luY3JlbWVudCIsInBvd2VyIiwiTE4xMCIsImxvIiwibWlkIiwiYXNjZW5kaW5nQ29tcGFyYXRvciIsImNlbnRlciIsImFzY2VuZGluZ0Jpc2VjdCIsImJpc2VjdG9yIiwiYmlzZWN0UmlnaHQiLCJ1bml0IiwiYmltYXAiLCJyYW5nZSIsImQwIiwiZDEiLCJyMCIsInIxIiwicG9seW1hcCIsImJpc2VjdCIsImNsYW1wIiwidW5rbm93biIsImNvbnRpbnVvdXMiLCJ1bnRyYW5zZm9ybSIsInBpZWNld2lzZSIsInJlc2NhbGUiLCJpbnZlcnQiLCJyYW5nZVJvdW5kIiwidSIsInRyYW5zZm9ybWVyIiwiaW5pdFJhbmdlIiwicHJlZml4RXhwb25lbnQiLCJmb3JtYXRTcGVjaWZpZXIiLCJzcGVjaWZpZXIiLCJGb3JtYXRTcGVjaWZpZXIiLCJhbGlnbiIsIndpZHRoIiwiY29tbWEiLCJmb3JtYXREZWNpbWFsUGFydHMiLCJ0b0V4cG9uZW50aWFsIiwiY29lZmZpY2llbnQiLCJmb3JtYXRSb3VuZGVkIiwidG9VcHBlckNhc2UiLCJmb3JtYXRQcmVmaXgiLCJwcmVmaXhlcyIsImxpbmVhcmlzaCIsInRpY2tzIiwidGlja0Zvcm1hdCIsInN0ZXAwIiwic3RlcDEiLCJ0aWNrU3RlcCIsInByZWNpc2lvblByZWZpeCIsInByZWNpc2lvblJvdW5kIiwicHJlY2lzaW9uRml4ZWQiLCJuaWNlIiwicHJlc3RlcCIsIm1heEl0ZXIiLCJsb2NhbGUiLCJncm91cGluZyIsInRob3VzYW5kcyIsInN1YnN0cmluZyIsImN1cnJlbmN5UHJlZml4IiwiY3VycmVuY3kiLCJjdXJyZW5jeVN1ZmZpeCIsImRlY2ltYWwiLCJudW1lcmFscyIsImZvcm1hdE51bWVyYWxzIiwicGVyY2VudCIsIm1pbnVzIiwibmFuIiwibmV3Rm9ybWF0IiwiZm9ybWF0VHlwZXMiLCJzdWZmaXgiLCJmb3JtYXRUeXBlIiwibWF5YmVTdWZmaXgiLCJ2YWx1ZVByZWZpeCIsInZhbHVlU3VmZml4IiwidmFsdWVOZWdhdGl2ZSIsIm91dCIsImZvcm1hdFRyaW0iLCJpbXBsaWNpdCIsInF1YW50aXplIiwiaW52ZXJ0RXh0ZW50IiwidGhyZXNob2xkcyIsInBpIiwidGF1IiwiZXBzaWxvbiIsInRhdUVwc2lsb24iLCJQYXRoIiwiX3gwIiwiX3kwIiwiX3gxIiwiX3kxIiwibW92ZVRvIiwiY2xvc2VQYXRoIiwibGluZVRvIiwicXVhZHJhdGljQ3VydmVUbyIsImJlemllckN1cnZlVG8iLCJ5MiIsImFyY1RvIiwieDIxIiwieTIxIiwieDAxIiwieTAxIiwibDAxXzIiLCJ4MjAiLCJ5MjAiLCJsMjFfMiIsImwyMF8yIiwibDIxIiwibDAxIiwiYWNvcyIsInQwMSIsInQyMSIsImFyYyIsImEwIiwiYTEiLCJjY3ciLCJjdyIsImRhIiwicmVjdCIsImhhbGZQaSIsImFzaW4iLCJhcmNJbm5lclJhZGl1cyIsImlubmVyUmFkaXVzIiwiYXJjT3V0ZXJSYWRpdXMiLCJvdXRlclJhZGl1cyIsImFyY1N0YXJ0QW5nbGUiLCJzdGFydEFuZ2xlIiwiYXJjRW5kQW5nbGUiLCJlbmRBbmdsZSIsImFyY1BhZEFuZ2xlIiwicGFkQW5nbGUiLCJpbnRlcnNlY3QiLCJ4MyIsInkzIiwieDEwIiwieTEwIiwieDMyIiwieTMyIiwiY29ybmVyVGFuZ2VudHMiLCJyYyIsIm94Iiwib3kiLCJ4MTEiLCJ5MTEiLCJ4MDAiLCJ5MDAiLCJkMiIsIkQiLCJjeDAiLCJjeTAiLCJjeDEiLCJjeTEiLCJkeDAiLCJkeTAiLCJkeDEiLCJkeTEiLCJjeCIsImN5IiwiY29ybmVyUmFkaXVzIiwicGFkUmFkaXVzIiwiYTAxIiwiYTExIiwiYTAwIiwiYTEwIiwiZGEwIiwiZGExIiwiYXAiLCJycCIsInJjMCIsInJjMSIsInAwIiwib2MiLCJheCIsImF5IiwiYngiLCJieSIsImtjIiwibGMiLCJjZW50cm9pZCIsImxpbmtTb3VyY2UiLCJsaW5rVGFyZ2V0IiwiY3VydmVIb3Jpem9udGFsIiwicHJldmVudERlZmF1bHQiLCJzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24iLCJfX25vc2VsZWN0IiwiTW96VXNlclNlbGVjdCIsInllc2RyYWciLCJub2NsaWNrIiwiem9vbVJobyIsInJobyIsInJobzIiLCJyaG80Iiwiem9vbSIsInV4MCIsInV5MCIsIncwIiwidXgxIiwidXkxIiwidzEiLCJiMCIsImIxIiwiY29zaHIwIiwiU1FSVDIiLCJfMSIsIl8yIiwic291cmNlRXZlbnQiLCJjdXJyZW50VGFyZ2V0Iiwib3duZXJTVkdFbGVtZW50IiwiY3JlYXRlU1ZHUG9pbnQiLCJjbGllbnRYIiwiY2xpZW50WSIsIm1hdHJpeFRyYW5zZm9ybSIsImdldFNjcmVlbkNUTSIsImludmVyc2UiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJjbGllbnRMZWZ0IiwidG9wIiwiY2xpZW50VG9wIiwicGFnZVgiLCJwYWdlWSIsIlpvb21FdmVudCIsIlRyYW5zZm9ybSIsImFwcGx5WCIsImFwcGx5WSIsImludmVydFgiLCJpbnZlcnRZIiwicmVzY2FsZVgiLCJyZXNjYWxlWSIsImN0cmxLZXkiLCJidXR0b24iLCJTVkdFbGVtZW50IiwiaGFzQXR0cmlidXRlIiwidmlld0JveCIsImNsaWVudFdpZHRoIiwiY2xpZW50SGVpZ2h0IiwiZGVmYXVsdFRyYW5zZm9ybSIsIl9fem9vbSIsImRlZmF1bHRXaGVlbERlbHRhIiwiZGVsdGFZIiwiZGVsdGFNb2RlIiwibmF2aWdhdG9yIiwibWF4VG91Y2hQb2ludHMiLCJkZWZhdWx0Q29uc3RyYWluIiwiZXh0ZW50IiwidHJhbnNsYXRlRXh0ZW50IiwidG91Y2hzdGFydGluZyIsInRvdWNoZmlyc3QiLCJ0b3VjaGVuZGluZyIsImNvbnN0cmFpbiIsIndoZWVsRGVsdGEiLCJ0b3VjaGFibGUiLCJzY2FsZUV4dGVudCIsImxpc3RlbmVycyIsInRvdWNoRGVsYXkiLCJjbGlja0Rpc3RhbmNlMiIsInRhcERpc3RhbmNlIiwid2hlZWxlZCIsIm1vdXNlZG93bmVkIiwiZGJsY2xpY2tlZCIsInRvdWNoc3RhcnRlZCIsInRvdWNobW92ZWQiLCJ0b3VjaGVuZGVkIiwiZ2VzdHVyZSIsImNsZWFuIiwiX196b29taW5nIiwiR2VzdHVyZSIsInRhcHMiLCJ3aGVlbCIsIm1vdXNlIiwid2hlZWxpZGxlZCIsIm1vdXNlbW92ZWQiLCJtb3VzZXVwcGVkIiwibW92ZWQiLCJjaGFuZ2VkVG91Y2hlcyIsImsxIiwic2hpZnRLZXkiLCJzdGFydGVkIiwidG91Y2hlcyIsImlkZW50aWZpZXIiLCJ0b3VjaDAiLCJ0b3VjaDEiLCJsMCIsImwxIiwiZHAiLCJkbCIsInNjYWxlQnkiLCJzY2FsZVRvIiwiazAiLCJ0cmFuc2xhdGVCeSIsInRyYW5zbGF0ZVRvIiwiY2xpY2tEaXN0YW5jZSIsIlRyYW5zaXRpb24iLCJTZXR0aW5ncyIsImVuYWJsZVRvb2x0aXBzIiwiZWFzZUluRWFzZU91dEN1YmljIiwiZWFzZUluQ3ViaWMiLCJlYXNlT3V0Q3ViaWMiLCJlYXNlSW5FYXNlT3V0RWxhc3RpYyIsImM1IiwiZWFzZUluRWxhc3RpYyIsImM0IiwiZWFzZU91dEVsYXN0aWMiLCJsZWZ0Q2hpbGQiLCJyaWdodENoaWxkIiwiX2xlZnRDaGlsZCIsIl9yaWdodENoaWxkIiwiY3VycmVudElEIiwibmFtZUV4dHJhY3RvciIsInRvTmV3aWNrIiwiZWRnZXMiLCJ0b0NoZWNrIiwiQ2x1c3RlciIsInRyZWVOb2RlIiwib3RoZXIiLCJuZXdOb2RlIiwiVVBHTUFDbHVzdGVyZXIiLCJtZXRyaWMiLCJjbHVzdGVycyIsInZhbHVlTWF0cml4IiwiZGlzdGFuY2VNYXRyaXgiLCJnZXREaXN0YW5jZSIsInNtYWxsZXN0RGlzdGFuY2UiLCJ4Q2x1c3RlciIsInlDbHVzdGVyIiwibm9kZUhlaWdodCIsInVwZGF0ZWREaXN0YW5jZU1hdHJpeCIsImNvcHlEaXN0YW5jZU1hdHJpeCIsInhEaXN0YW5jZSIsInlEaXN0YW5jZSIsIkV1Y2xpZGlhbkRpc3RhbmNlTWV0cmljIiwiY2FsY3VsYXRlRXVjbGlkZWFuRGlzdGFuY2UiLCJwb3dlcnMiLCJNb2xvUmVvcmRlcmVyIiwibm9kZU1pbk1hcCIsInNvcnRNaW5pbXVtIiwibGVmdFRyZWUiLCJyaWdodFRyZWUiLCJsZWZ0U2luZ2xldG9uIiwicmlnaHRTaW5nbGV0b24iLCJzb3J0ZWQiLCJzb3J0ZWRNaW4iLCJsZWZ0U29ydGVkIiwicmlnaHRTb3J0ZWQiLCJsZWZ0TWluIiwicmlnaHRNaW4iLCJIZWF0bWFwU2V0dGluZ3MiLCJpbml0aWFsVGV4dFdpZHRoIiwiaW5pdGlhbFRleHRIZWlnaHQiLCJzcXVhcmVQYWRkaW5nIiwidmlzdWFsaXphdGlvblRleHRQYWRkaW5nIiwiZm9udFNpemUiLCJsYWJlbENvbG9yIiwiaGlnaGxpZ2h0U2VsZWN0aW9uIiwiaGlnaGxpZ2h0Rm9udFNpemUiLCJoaWdobGlnaHRGb250Q29sb3IiLCJjbGFzc05hbWUiLCJhbmltYXRpb25zRW5hYmxlZCIsImFuaW1hdGlvbkR1cmF0aW9uIiwibWluQ29sb3IiLCJtYXhDb2xvciIsImNvbG9yQnVja2V0cyIsImRlbmRyb2dyYW1FbmFibGVkIiwiZGVuZHJvZ3JhbVdpZHRoIiwiZGVuZHJvZ3JhbUxpbmVXaWR0aCIsImRlbmRyb2dyYW1Db2xvciIsImNsdXN0ZXJpbmdBbGdvcml0aG0iLCJyZW9yZGVyZXIiLCJnZXRUb29sdGlwIiwiY29sdW1uIiwiZ2V0VG9vbHRpcFRpdGxlIiwiZ2V0VG9vbHRpcFRleHQiLCJDbHVzdGVyRWxlbWVudCIsIlByZXByb2Nlc3NvciIsImZlYXR1cmVMYWJlbHMiLCJpZHgiLCJsb3dDb2xvciIsImhpZ2hDb2xvciIsImNvbG9yVmFsdWVzIiwiaW50ZXJwb2xhdG9yIiwicXVhbnRpemVTY2FsZSIsInJvd0lkeCIsImNvbElkeCIsInF1YW50aXplZFZhbHVlIiwicm93SWQiLCJjb2x1bW5JZCIsImNvbG9yU3RyaW5nIiwiQ2FudmFzUmVuZGVySGVscGVyIiwieEZyb20iLCJ5RnJvbSIsInhUbyIsInlUbyIsImxpbmVXaWR0aCIsInN0cm9rZVN0eWxlIiwic3Ryb2tlIiwiSGVhdG1hcCIsImVsZW1lbnRJZGVudGlmaWVyIiwicm93TGFiZWxzIiwiY29sdW1uTGFiZWxzIiwidG9vbHRpcCIsImhpZ2hsaWdodGVkUm93IiwiaGlnaGxpZ2h0ZWRDb2x1bW4iLCJhbmltYXRpbmdSb3dzIiwiYW5pbWF0aW5nQ29scyIsImNsdXN0ZXJlZEhvcml6b250YWwiLCJjbHVzdGVyZWRWZXJ0aWNhbCIsImxhc3Rab29tU3RhdHVzIiwic2V0dGluZ3MiLCJmaWxsT3B0aW9ucyIsInByZXByb2Nlc3NvciIsInByZXByb2Nlc3NGZWF0dXJlcyIsImNvbHVtbnMiLCJwcmVwcm9jZXNzVmFsdWVzIiwidmFsdWVzUGVyQ29sb3IiLCJvcmRlclBlckNvbG9yIiwiaW5pdFRvb2x0aXAiLCJwaXhlbFJhdGlvIiwiZGV2aWNlUGl4ZWxSYXRpbyIsIm9yaWdpbmFsVmlld1BvcnQiLCJ4VG9wIiwieVRvcCIsInhCb3R0b20iLCJ5Qm90dG9tIiwiY3VycmVudFZpZXdQb3J0IiwidGV4dFdpZHRoIiwidGV4dEhlaWdodCIsInZpc0VsZW1lbnQiLCJ0b29sdGlwTW92ZSIsImNsaWNrIiwiZ2V0Q29udGV4dCIsInpvb21lZCIsImNvbXB1dGVDbHVzdGVyUm9vdHMiLCJyZWRyYXciLCJ0b0NsdXN0ZXIiLCJjcmVhdGVBbmltYXRvciIsInJvd09yZGVyIiwiY29sdW1uT3JkZXIiLCJhbmltYXRpb25TdGFydCIsImFuaW1hdGVSb3dzIiwidGltZXN0YW1wIiwiYW5pbWF0aW9uU3RlcCIsImludmVyc2VSb3dPcmRlciIsImRldGVybWluZU9yZGVyIiwicm93Q2x1c3RlclJvb3QiLCJjb2x1bW5JZGVudGl0eSIsIm5ld1ZhbHVlcyIsIm5ld1Jvd1RpdGxlcyIsImludmVyc2VDb2x1bW5PcmRlciIsImNvbENsdXN0ZXJSb290IiwiY29sIiwicm93SWRlbnRpdHkiLCJuZXdSb3ciLCJuZXdDb2x1bW5UaXRsZXMiLCJjbHVzdGVyZXIiLCJtb2xvIiwicm93RWxlbWVudHMiLCJyZW9yZGVyIiwiY2x1c3RlciIsInZlcnRpY2FsTm9kZXNQZXJEZXB0aCIsImJmc05vZGVzUGVyRGVwdGgiLCJjb2x1bW5FbGVtZW50cyIsImhvcml6b250YWxOb2Rlc1BlckRlcHRoIiwibmV3V2lkdGgiLCJuZXdIZWlnaHQiLCJzcXVhcmVEaW1lbnNpb24iLCJkaW1lbnNpb24iLCJzdmdDb250ZW50cyIsIm9mZnNjcmVlbkNhbnZhcyIsIk9mZnNjcmVlbkNhbnZhcyIsImN0eCIsImZvbnQiLCJ0ZXh0Q2VudGVyIiwibWF4aW11bVdpZHRoIiwiY29tcHV0ZWRXaWR0aCIsIm1lYXN1cmVUZXh0IiwibWF4aW11bUhlaWdodCIsIml0ZW0iLCJ2aWV3UG9ydCIsImRldGVybWluZURlbmRyb2dyYW1XaWR0aCIsInZpc3VhbGl6YXRpb25XaWR0aCIsInZpc3VhbGl6YXRpb25IZWlnaHQiLCJzcXVhcmVXaWR0aCIsInNxdWFyZUhlaWdodCIsImRldGVybWluZVNxdWFyZVdpZHRoIiwibmV3VGV4dFN0YXJ0WCIsImNvbXB1dGVUZXh0U3RhcnRYIiwibmV3VGV4dFN0YXJ0WSIsImNvbXB1dGVUZXh0U3RhcnRZIiwiY29tcGFyYXRvciIsIm5ld1Jvd1Bvc2l0aW9ucyIsIm5ld0NvbHVtblBvc2l0aW9ucyIsInJlZHJhd0dyaWQiLCJyZWRyYXdSb3dUaXRsZXMiLCJyZWRyYXdDb2x1bW5UaXRsZXMiLCJyZWRyYXdEZW5kcm9ncmFtIiwiY2xlYXJSZWN0IiwiYmVnaW5QYXRoIiwiZmlsbFN0eWxlIiwieFRvcFN0YXJ0IiwieVRvcFN0YXJ0IiwieFRvcEVuZCIsInlUb3BFbmQiLCJ4VG9wQ3VycmVudCIsInlUb3BDdXJyZW50IiwieEJvdHRvbUN1cnJlbnQiLCJ5Qm90dG9tQ3VycmVudCIsInNhdmUiLCJmaWxsUmVjdCIsInJlc3RvcmUiLCJzdWJzdHIiLCJzdGVwU2l6ZSIsInRleHRTdGFydCIsInRleHRCYXNlbGluZSIsInRleHRBbGlnbiIsIm9yaWdpbmFsWSIsImN1cnJlbnRZIiwiZmlsbFRleHQiLCJlbGxpcHNpemVTdHJpbmciLCJvcmlnaW5hbFgiLCJjdXJyZW50WCIsIm5vZGVzUGVyRGVwdGgiLCJyZWRyYXdIb3Jpem9udGFsRGVuZHJvZ3JhbSIsInJlZHJhd1ZlcnRpY2FsRGVuZHJvZ3JhbSIsImNsdXN0ZXJlZCIsInNob3VsZEFuaW1hdGUiLCJjbHVzdGVyQ29sb3IiLCJjb21wdXRlRGVuZHJvZ3JhbUNvbG9yIiwicmVuZGVySGVscGVyIiwidmVydGljYWxMaW5lT2Zmc2V0Iiwibm9kZVBvc2l0aW9ucyIsInBpeGVsc1Blck1lcmdlIiwiY3VycmVudE1lcmdlU3RlcCIsImN1cnJlbnREZXB0aCIsImxlZnRYIiwibGVmdFkiLCJyaWdodFgiLCJyaWdodFkiLCJyZW5kZXJMaW5lIiwibWVyZ2VQb2ludCIsImhvcml6b250YWxMaW5lT2Zmc2V0IiwibmV3Q29sUG9zaXRpb25zIiwiZmluZFJvd0FuZENvbEZvclBvc2l0aW9uIiwiZGVuZHJvV2lkdGgiLCJQZWFyc29uQ29ycmVsYXRpb25NZXRyaWMiLCJnZXRQZWFyc29uQ29ycmVsYXRpb25CZXR3ZWVuMlNhbXBsZXMiLCJ4TWVhbiIsInlNZWFuIiwibnVtZXJhdG9yIiwiZGVub21pbmF0b3IiLCJDb2xvclBhbGV0dGUiLCJERUZBVUxUX0NPTE9SUyIsIkZJWEVEX0NPTE9SUyIsIk1BVEVSSUFMX0RFU0lHTl9DT0xPUlMiLCJTdHJpbmdVdGlscyIsIlN1bmJ1cnN0U2V0dGluZ3MiLCJyYWRpdXMiLCJicmVhZGNydW1iV2lkdGgiLCJ1c2VGaXhlZENvbG9ycyIsImNvbG9yUGFsZXR0ZSIsImZpeGVkQ29sb3JQYWxldHRlIiwiZW5hYmxlQnJlYWRjcnVtYnMiLCJsZXZlbHMiLCJyZXJvb3RDYWxsYmFjayIsImZpeGVkQ29sb3JIYXNoIiwic3RyaW5nSGFzaCIsImdldExhYmVsIiwiZ2V0VGl0bGVUZXh0IiwiU3VuYnVyc3RQcmVwcm9jZXNzb3IiLCJwcmVwcm9jZXNzRGF0YSIsImlkQ291bnRlciIsIlRvb2x0aXBVdGlsaXRpZXMiLCJOb2RlVXRpbHMiLCJtYXhMZXZlbHMiLCJpc1BhcmVudE9mIiwiQ29sb3JVdGlscyIsInRleHRDb2xvciIsImJyaWdodG5lc3MiLCJTdW5idXJzdCIsImNvbG9yQ291bnRlciIsImN1cnJlbnRNYXhMZXZlbCIsImFyY0RhdGEiLCJ0ZXh0RGF0YSIsInByZXZpb3VzUm9vdCIsInByZXZpb3VzTWF4TGV2ZWwiLCJwcm9jZXNzZWREYXRhIiwieFNjYWxlIiwieVNjYWxlIiwicm9vdE5vZGUiLCJpbml0Q3NzIiwiYnJlYWRDcnVtYnMiLCJ2aXNHRWxlbWVudCIsIm1heFkiLCJjb2xvdXJzIiwiZ2V0Q29sb3IiLCJlbGVtZW50Q2xhc3MiLCJzdHlsZUVsZW1lbnQiLCJteSIsInhkIiwieWQiLCJ5ciIsInNldEJyZWFkY3J1bWJzIiwicmVuZGVyQXJjcyIsInJlbmRlclRleHQiLCJmaWx0ZXJlZERhdGEiLCJuZXdEYXRhIiwidG9vbHRpcEluIiwidG9vbHRpcE91dCIsImFyY1R3ZWVuIiwib2Zmc2NyZWVuQ2FudmFzU3VwcG9ydGVkIiwiZ2V0UmVhZGFibGVDb2xvckZvciIsInR4dExlbmd0aCIsImdldENvbXB1dGVkVGV4dExlbmd0aCIsImFuZ2xlIiwic2VsZWN0ZWRGb250U2l6ZSIsImNvbXB1dGVBdmFpbGFibGVTcGFjZSIsImF2YWlsYWJsZVNwYWNlIiwiY3J1bWJzIiwiYnJlYWRBcmMiLCJUcmVlbWFwU2V0dGluZ3MiLCJsYWJlbEhlaWdodCIsImNvbG9yUm9vdCIsImNvbG9yTGVhZiIsImNvbG9yQnJlYWRjcnVtYnMiLCJnZXRCcmVhZGNydW1iVG9vbHRpcCIsImdldExldmVsIiwiVHJlZW1hcFByZXByb2Nlc3NvciIsIlRyZWVtYXAiLCJjaGlsZFBhcmVudFJlbGF0aW9ucyIsIm5vZGVJZCIsImN1cnJlbnRSb290IiwiY29sb3JTY2FsZSIsInJlbmRlciIsInRyaWdnZXJDYWxsYmFjayIsImRpdk5vZGVzIiwiZGVmYXVsdENvbG9yU2NhbGUiLCJvcmRpbmFsIiwiVHJlZXZpZXdTZXR0aW5ncyIsIm1pbk5vZGVTaXplIiwibWF4Tm9kZVNpemUiLCJlbmFibGVFeHBhbmRPbkNsaWNrIiwiZW5hYmxlQXV0b0V4cGFuZCIsImF1dG9FeHBhbmRWYWx1ZSIsImxldmVsc1RvRXhwYW5kIiwiZW5hYmxlUmlnaHRDbGljayIsImVuYWJsZUlubmVyQXJjcyIsImVuYWJsZUxhYmVscyIsIm5vZGVEaXN0YW5jZSIsIm5vZGVGaWxsQ29sb3IiLCJpc1NlbGVjdGVkIiwibm9kZVN0cm9rZUNvbG9yIiwibGlua1N0cm9rZUNvbG9yIiwiY29sb3JQcm92aWRlciIsIk1heENvdW50SGVhcCIsImhlYXBpZnkiLCJidWJibGVVcCIsInNpbmsiLCJwYXJlbnRJbmRleCIsIlRyZWV2aWV3Tm9kZSIsInByZXZpb3VzUG9zaXRpb24iLCJzZWxlY3RlZCIsImNvbGxhcHNlZCIsInNldFNlbGVjdGVkIiwic2V0Q29sbGFwc2VkIiwiY29sbGFwc2VBbGwiLCJleHBhbmQiLCJzZXRDb2xvciIsIlRyZWV2aWV3UHJlcHJvY2Vzc29yIiwiVHJlZXZpZXciLCJ6b29tU2NhbGUiLCJkYXRhUHJvY2Vzc29yIiwid2lkdGhTY2FsZSIsInRyZWVMYXlvdXQiLCJpc0NvbGxhcHNlZCIsImRpc3RhbmNlIiwiY29tcHV0ZU5vZGVTaXplIiwiem9vbUxpc3RlbmVyIiwiaW5pdGlhbEV4cGFuZCIsImV4cGFuZEFsbCIsImNlbnRlclJvb3QiLCJhbGxvd2VkQ291bnQiLCJwcSIsInRvRXhwYW5kIiwibGF5b3V0Iiwibm9kZUVudGVyIiwicmlnaHRDbGljayIsImFyY1NjYWxlIiwiaW5uZXJBcmMiLCJub2RlVXBkYXRlIiwibm9kZUV4aXQiLCJsaW5rR2VuZXJhdG9yIiwiY3VydmUiLCJhcmd2IiwiZGVmYXVsdFByZXZlbnRlZCIsInRvb2x0aXBUaW1lciJdLCJtYXBwaW5ncyI6IkNBQUEsU0FBMkNBLEVBQU1DLEdBQzFCLGlCQUFaQyxTQUEwQyxpQkFBWEMsT0FDeENBLE9BQU9ELFFBQVVELElBQ1EsbUJBQVhHLFFBQXlCQSxPQUFPQyxJQUM5Q0QsT0FBTyxHQUFJSCxHQUNlLGlCQUFaQyxRQUNkQSxRQUErQixzQkFBSUQsSUFFbkNELEVBQTRCLHNCQUFJQyxJQVJsQyxDQVNHSyxNQUFNLFdBQ1QsTSw0QkNWQSxFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsS0FDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsS0FDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxLQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsS0FDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLEtBQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsS0FDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxJQUNSLEVBQVEsS0FDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLEtBQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLEtBQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsS0FDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsS0FDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsSUFBSUMsRUFBTyxFQUFRLEtBRW5CSixFQUFPRCxRQUFVSyxHLFNDck5qQkosRUFBT0QsUUFBVSxTQUFVTSxHQUN6QixHQUFpQixtQkFBTkEsRUFDVCxNQUFNQyxVQUFVQyxPQUFPRixHQUFNLHNCQUM3QixPQUFPQSxJLGVDSFgsSUFBSUcsRUFBVyxFQUFRLEtBRXZCUixFQUFPRCxRQUFVLFNBQVVNLEdBQ3pCLElBQUtHLEVBQVNILElBQWMsT0FBUEEsRUFDbkIsTUFBTUMsVUFBVSxhQUFlQyxPQUFPRixHQUFNLG1CQUM1QyxPQUFPQSxJLGVDTFgsSUFBSUksRUFBa0IsRUFBUSxNQUMxQkMsRUFBUyxFQUFRLElBQ2pCQyxFQUF1QixFQUFRLE1BRS9CQyxFQUFjSCxFQUFnQixlQUM5QkksRUFBaUJDLE1BQU1DLFVBSVFDLE1BQS9CSCxFQUFlRCxJQUNqQkQsRUFBcUJNLEVBQUVKLEVBQWdCRCxFQUFhLENBQ2xETSxjQUFjLEVBQ2RDLE1BQU9ULEVBQU8sUUFLbEJWLEVBQU9ELFFBQVUsU0FBVXFCLEdBQ3pCUCxFQUFlRCxHQUFhUSxJQUFPLEksNEJDakJyQyxJQUFJQyxFQUFTLGVBSWJyQixFQUFPRCxRQUFVLFNBQVV1QixFQUFHQyxFQUFPQyxHQUNuQyxPQUFPRCxHQUFTQyxFQUFVSCxFQUFPQyxFQUFHQyxHQUFPRSxPQUFTLEssU0NOdER6QixFQUFPRCxRQUFVLFNBQVVNLEVBQUlxQixFQUFhQyxHQUMxQyxLQUFNdEIsYUFBY3FCLEdBQ2xCLE1BQU1wQixVQUFVLGNBQWdCcUIsRUFBT0EsRUFBTyxJQUFNLElBQU0sY0FDMUQsT0FBT3RCLEksZUNIWCxJQUFJRyxFQUFXLEVBQVEsS0FFdkJSLEVBQU9ELFFBQVUsU0FBVU0sR0FDekIsSUFBS0csRUFBU0gsR0FDWixNQUFNQyxVQUFVQyxPQUFPRixHQUFNLHFCQUM3QixPQUFPQSxJLFNDTFhMLEVBQU9ELFFBQWlDLG9CQUFoQjZCLGFBQW1ELG9CQUFiQyxVLDJCQ0M5RCxJQTRCSUMsRUE1QkFDLEVBQXNCLEVBQVEsTUFDOUJDLEVBQWMsRUFBUSxNQUN0QkMsRUFBUyxFQUFRLE1BQ2pCekIsRUFBVyxFQUFRLEtBQ25CMEIsRUFBTSxFQUFRLE1BQ2RDLEVBQVUsRUFBUSxLQUNsQkMsRUFBOEIsRUFBUSxNQUN0Q0MsRUFBVyxFQUFRLE1BQ25CQyxFQUFpQixVQUNqQkMsRUFBaUIsRUFBUSxNQUN6QkMsRUFBaUIsRUFBUSxNQUN6Qi9CLEVBQWtCLEVBQVEsTUFDMUJnQyxFQUFNLEVBQVEsTUFFZEMsRUFBWVQsRUFBT1MsVUFDbkJDLEVBQXFCRCxHQUFhQSxFQUFVM0IsVUFDNUM2QixFQUFvQlgsRUFBT1csa0JBQzNCQyxFQUE2QkQsR0FBcUJBLEVBQWtCN0IsVUFDcEUrQixFQUFhSixHQUFhSCxFQUFlRyxHQUN6Q0ssRUFBc0JKLEdBQXNCSixFQUFlSSxHQUMzREssRUFBa0JDLE9BQU9sQyxVQUN6Qm1DLEVBQWdCRixFQUFnQkUsY0FFaENDLEVBQWdCMUMsRUFBZ0IsZUFDaEMyQyxFQUFrQlgsRUFBSSxtQkFFdEJZLEVBQTRCdEIsS0FBeUJTLEdBQTRDLFVBQTFCTCxFQUFRRixFQUFPcUIsT0FDdEZDLEdBQTBCLEVBRzFCQyxFQUE2QixDQUMvQmQsVUFBVyxFQUNYZSxXQUFZLEVBQ1piLGtCQUFtQixFQUNuQmMsV0FBWSxFQUNaQyxZQUFhLEVBQ2JDLFdBQVksRUFDWkMsWUFBYSxFQUNiQyxhQUFjLEVBQ2RDLGFBQWMsR0FHWkMsRUFBOEIsQ0FDaENDLGNBQWUsRUFDZkMsZUFBZ0IsR0FXZEMsRUFBZSxTQUFVOUQsR0FDM0IsSUFBS0csRUFBU0gsR0FBSyxPQUFPLEVBQzFCLElBQUkrRCxFQUFRakMsRUFBUTlCLEdBQ3BCLE9BQU82QixFQUFJc0IsRUFBNEJZLElBQ2xDbEMsRUFBSThCLEVBQTZCSSxJQTBEeEMsSUFBS3RDLEtBQVEwQixFQUNOdkIsRUFBT0gsS0FBT3VCLEdBQTRCLEdBSWpELEtBQUtBLEdBQWtELG1CQUFkUCxHQUE0QkEsSUFBZXVCLFNBQVN0RCxhQUUzRitCLEVBQWEsV0FDWCxNQUFNeEMsVUFBVSx5QkFFZCtDLEdBQTJCLElBQUt2QixLQUFRMEIsRUFDdEN2QixFQUFPSCxJQUFPVSxFQUFlUCxFQUFPSCxHQUFPZ0IsR0FJbkQsS0FBS08sSUFBOEJOLEdBQXVCQSxJQUF3QkMsS0FDaEZELEVBQXNCRCxFQUFXL0IsVUFDN0JzQyxHQUEyQixJQUFLdkIsS0FBUTBCLEVBQ3RDdkIsRUFBT0gsSUFBT1UsRUFBZVAsRUFBT0gsR0FBTWYsVUFBV2dDLEdBUzdELEdBSklNLEdBQTZCZCxFQUFlTSxLQUFnQ0UsR0FDOUVQLEVBQWVLLEVBQTRCRSxHQUd6Q2YsSUFBZ0JFLEVBQUlhLEVBQXFCSSxHQUszQyxJQUFLckIsS0FKTHlCLEdBQTBCLEVBQzFCakIsRUFBZVMsRUFBcUJJLEVBQWUsQ0FBRW1CLElBQUssV0FDeEQsT0FBTzlELEVBQVNMLE1BQVFBLEtBQUtpRCxRQUFtQnBDLEtBRXJDd0MsRUFBZ0N2QixFQUFPSCxJQUNsRE0sRUFBNEJILEVBQU9ILEdBQU9zQixFQUFpQnRCLEdBSS9EOUIsRUFBT0QsUUFBVSxDQUNmc0QsMEJBQTJCQSxFQUMzQkQsZ0JBQWlCRyxHQUEyQkgsRUFDNUNtQixZQS9GZ0IsU0FBVWxFLEdBQzFCLEdBQUk4RCxFQUFhOUQsR0FBSyxPQUFPQSxFQUM3QixNQUFNQyxVQUFVLGdDQThGaEJrRSx1QkEzRjJCLFNBQVVDLEdBQ3JDLEdBQUlqQyxHQUNGLEdBQUlVLEVBQWN3QixLQUFLNUIsRUFBWTJCLEdBQUksT0FBT0EsT0FDekMsSUFBSyxJQUFJRSxLQUFTbkIsRUFBNEIsR0FBSXRCLEVBQUlzQixFQUE0QjFCLEdBQU8sQ0FDOUYsSUFBSThDLEVBQXdCM0MsRUFBTzBDLEdBQ25DLEdBQUlDLElBQTBCSCxJQUFNRyxHQUF5QjFCLEVBQWN3QixLQUFLRSxFQUF1QkgsSUFDckcsT0FBT0EsRUFFVCxNQUFNbkUsVUFBVSw0Q0FvRmxCdUUsdUJBakYyQixTQUFVQyxFQUFLQyxFQUFVQyxHQUNwRCxHQUFLaEQsRUFBTCxDQUNBLEdBQUlnRCxFQUFRLElBQUssSUFBSUwsS0FBU25CLEVBQTRCLENBQ3hELElBQUlvQixFQUF3QjNDLEVBQU8wQyxHQUMvQkMsR0FBeUIxQyxFQUFJMEMsRUFBc0I3RCxVQUFXK0QsV0FDekRGLEVBQXNCN0QsVUFBVStELEdBR3RDL0IsRUFBb0IrQixLQUFRRSxHQUMvQjNDLEVBQVNVLEVBQXFCK0IsRUFBS0UsRUFBU0QsRUFDeEMxQixHQUE2QlYsRUFBbUJtQyxJQUFRQyxLQXdFOURFLDZCQXBFaUMsU0FBVUgsRUFBS0MsRUFBVUMsR0FDMUQsSUFBSUwsRUFBT0MsRUFDWCxHQUFLNUMsRUFBTCxDQUNBLEdBQUlRLEVBQWdCLENBQ2xCLEdBQUl3QyxFQUFRLElBQUtMLEtBQVNuQixHQUN4Qm9CLEVBQXdCM0MsRUFBTzBDLEtBQ0Z6QyxFQUFJMEMsRUFBdUJFLFdBQy9DRixFQUFzQkUsR0FHakMsR0FBS2hDLEVBQVdnQyxLQUFRRSxFQUtqQixPQUhMLElBQ0UsT0FBTzNDLEVBQVNTLEVBQVlnQyxFQUFLRSxFQUFTRCxFQUFXMUIsR0FBNkJYLEVBQVVvQyxJQUFRQyxHQUNwRyxNQUFPRyxLQUdiLElBQUtQLEtBQVNuQixJQUNab0IsRUFBd0IzQyxFQUFPMEMsS0FDQUMsRUFBc0JFLEtBQVFFLEdBQzNEM0MsRUFBU3VDLEVBQXVCRSxFQUFLQyxLQWlEekNJLE9BbEhXLFNBQWdCOUUsR0FDM0IsSUFBS0csRUFBU0gsR0FBSyxPQUFPLEVBQzFCLElBQUkrRCxFQUFRakMsRUFBUTlCLEdBQ3BCLE1BQWlCLGFBQVYrRCxHQUNGbEMsRUFBSXNCLEVBQTRCWSxJQUNoQ2xDLEVBQUk4QixFQUE2QkksSUE4R3RDRCxhQUFjQSxFQUNkckIsV0FBWUEsRUFDWkMsb0JBQXFCQSxJLDRCQ3BLdkIsSUFBSWQsRUFBUyxFQUFRLE1BQ2pCRCxFQUFjLEVBQVEsTUFDdEJELEVBQXNCLEVBQVEsTUFDOUJLLEVBQThCLEVBQVEsTUFDdENnRCxFQUFjLEVBQVEsTUFDdEJDLEVBQVEsRUFBUSxNQUNoQkMsRUFBYSxFQUFRLE1BQ3JCQyxFQUFZLEVBQVEsTUFDcEJDLEVBQVcsRUFBUSxNQUNuQkMsRUFBVSxFQUFRLE1BQ2xCQyxFQUFVLEVBQVEsTUFDbEJuRCxFQUFpQixFQUFRLE1BQ3pCQyxFQUFpQixFQUFRLE1BQ3pCbUQsRUFBc0IsVUFDdEJyRCxFQUFpQixVQUNqQnNELEVBQVksRUFBUSxNQUNwQkMsRUFBaUIsRUFBUSxNQUN6QkMsRUFBc0IsRUFBUSxNQUU5QkMsRUFBbUJELEVBQW9CeEIsSUFDdkMwQixFQUFtQkYsRUFBb0JHLElBQ3ZDQyxFQUFlLGNBQ2ZDLEVBQVksV0FHWkMsRUFBYyxjQUNkQyxFQUFvQnBFLEVBQW1CLFlBQ3ZDcUUsRUFBZUQsRUFDZkUsRUFBWXRFLEVBQWdCLFNBQzVCdUUsRUFBcUJELEdBQWFBLEVBQW1CLFVBQ3JEdkQsRUFBa0JDLE9BQU9sQyxVQUN6QjBGLEVBQWF4RSxFQUFPd0UsV0FFcEJDLEVBQWNoQixFQUFRaUIsS0FDdEJDLEVBQWdCbEIsRUFBUW1CLE9BRXhCQyxFQUFXLFNBQVVDLEdBQ3ZCLE1BQU8sQ0FBVSxJQUFUQSxJQUdOQyxFQUFZLFNBQVVELEdBQ3hCLE1BQU8sQ0FBVSxJQUFUQSxFQUFlQSxHQUFVLEVBQUksTUFHbkNFLEVBQVksU0FBVUYsR0FDeEIsTUFBTyxDQUFVLElBQVRBLEVBQWVBLEdBQVUsRUFBSSxJQUFNQSxHQUFVLEdBQUssSUFBTUEsR0FBVSxHQUFLLE1BRzdFRyxFQUFjLFNBQVVDLEdBQzFCLE9BQU9BLEVBQU8sSUFBTSxHQUFLQSxFQUFPLElBQU0sR0FBS0EsRUFBTyxJQUFNLEVBQUlBLEVBQU8sSUFHakVDLEVBQWMsU0FBVUwsR0FDMUIsT0FBT0wsRUFBWUssRUFBUSxHQUFJLElBRzdCTSxFQUFjLFNBQVVOLEdBQzFCLE9BQU9MLEVBQVlLLEVBQVEsR0FBSSxJQUc3Qk8sRUFBWSxTQUFVNUYsRUFBYU4sR0FDckNrQixFQUFlWixFQUFxQixVQUFHTixFQUFLLENBQUVrRCxJQUFLLFdBQWMsT0FBT3lCLEVBQWlCNUYsTUFBTWlCLE9BRzdGa0QsRUFBTSxTQUFVaUQsRUFBTUMsRUFBT2pHLEVBQU9rRyxHQUN0QyxJQUFJQyxFQUFXakMsRUFBUWxFLEdBQ25Cb0csRUFBUTVCLEVBQWlCd0IsR0FDN0IsR0FBSUcsRUFBV0YsRUFBUUcsRUFBTUMsV0FBWSxNQUFNbkIsRUFBV0wsR0FDMUQsSUFBSXlCLEVBQVE5QixFQUFpQjRCLEVBQU1SLFFBQVFVLE1BQ3ZDQyxFQUFRSixFQUFXQyxFQUFNSSxXQUN6QnBCLEVBQU9rQixFQUFNRyxNQUFNRixFQUFPQSxFQUFRTixHQUN0QyxPQUFPQyxFQUFpQmQsRUFBT0EsRUFBS3NCLFdBR2xDaEMsRUFBTSxTQUFVc0IsRUFBTUMsRUFBT2pHLEVBQU8yRyxFQUFZL0csRUFBT3NHLEdBQ3pELElBQUlDLEVBQVdqQyxFQUFRbEUsR0FDbkJvRyxFQUFRNUIsRUFBaUJ3QixHQUM3QixHQUFJRyxFQUFXRixFQUFRRyxFQUFNQyxXQUFZLE1BQU1uQixFQUFXTCxHQUkxRCxJQUhBLElBQUl5QixFQUFROUIsRUFBaUI0QixFQUFNUixRQUFRVSxNQUN2Q0MsRUFBUUosRUFBV0MsRUFBTUksV0FDekJwQixFQUFPdUIsR0FBWS9HLEdBQ2RnSCxFQUFJLEVBQUdBLEVBQUlYLEVBQU9XLElBQUtOLEVBQU1DLEVBQVFLLEdBQUt4QixFQUFLYyxFQUFpQlUsRUFBSVgsRUFBUVcsRUFBSSxJQUczRixHQUFLcEcsRUEwRkUsQ0FFTCxJQUFLc0QsR0FBTSxXQUNUZ0IsRUFBa0IsUUFDYmhCLEdBQU0sV0FDWCxJQUFJZ0IsR0FBbUIsT0FDbkJoQixHQUFNLFdBSVYsT0FIQSxJQUFJZ0IsRUFDSixJQUFJQSxFQUFrQixLQUN0QixJQUFJQSxFQUFrQitCLEtBQ2YvQixFQUFrQjFFLE1BQVF1RSxLQUMvQixDQU9GLElBREEsSUFDK0Q5RSxFQUQzRGlILEdBSkovQixFQUFlLFNBQXFCN0UsR0FFbEMsT0FEQTZELEVBQVduRixLQUFNbUcsR0FDVixJQUFJRCxFQUFrQlosRUFBUWhFLE1BRVUsVUFBSTRFLEVBQTJCLFVBQ3ZFaUMsRUFBTzNDLEVBQW9CVSxHQUFvQmtDLEVBQUksRUFBUUQsRUFBSzdHLE9BQVM4RyxJQUN6RW5ILEVBQU1rSCxFQUFLQyxRQUFTakMsR0FDekJsRSxFQUE0QmtFLEVBQWNsRixFQUFLaUYsRUFBa0JqRixJQUdyRWlILEVBQXFCRyxZQUFjbEMsRUFJakM5RCxHQUFrQkQsRUFBZWlFLEtBQXdCeEQsR0FDM0RSLEVBQWVnRSxFQUFvQnhELEdBSXJDLElBQUl5RixFQUFXLElBQUlsQyxFQUFVLElBQUlELEVBQWEsSUFDMUNvQyxFQUFnQmxDLEVBQW1CbUMsUUFDdkNGLEVBQVNFLFFBQVEsRUFBRyxZQUNwQkYsRUFBU0UsUUFBUSxFQUFHLGFBQ2hCRixFQUFTRyxRQUFRLElBQU9ILEVBQVNHLFFBQVEsSUFBSXhELEVBQVlvQixFQUFvQixDQUMvRW1DLFFBQVMsU0FBaUJaLEVBQVk1RyxHQUNwQ3VILEVBQWNoRSxLQUFLdkUsS0FBTTRILEVBQVk1RyxHQUFTLElBQU0sS0FFdEQwSCxTQUFVLFNBQWtCZCxFQUFZNUcsR0FDdEN1SCxFQUFjaEUsS0FBS3ZFLEtBQU00SCxFQUFZNUcsR0FBUyxJQUFNLE1BRXJELENBQUUySCxRQUFRLFNBcElieEMsRUFBZSxTQUFxQjdFLEdBQ2xDNkQsRUFBV25GLEtBQU1tRyxFQUFjSixHQUMvQixJQUFJMEIsRUFBYW5DLEVBQVFoRSxHQUN6QnVFLEVBQWlCN0YsS0FBTSxDQUNyQjBILE1BQU9qQyxFQUFVbEIsS0FBSyxJQUFJNUQsTUFBTThHLEdBQWEsR0FDN0NBLFdBQVlBLElBRVQ1RixJQUFhN0IsS0FBS3lILFdBQWFBLElBR3RDckIsRUFBWSxTQUFrQlksRUFBUVksRUFBWUgsR0FDaER0QyxFQUFXbkYsS0FBTW9HLEVBQVdKLEdBQzVCYixFQUFXNkIsRUFBUWIsRUFBY0gsR0FDakMsSUFBSTRDLEVBQWVoRCxFQUFpQm9CLEdBQVFTLFdBQ3hDb0IsRUFBU3pELEVBQVV3QyxHQUN2QixHQUFJaUIsRUFBUyxHQUFLQSxFQUFTRCxFQUFjLE1BQU10QyxFQUFXLGdCQUUxRCxHQUFJdUMsR0FESnBCLE9BQTRCNUcsSUFBZjRHLEVBQTJCbUIsRUFBZUMsRUFBU3hELEVBQVNvQyxJQUMvQ21CLEVBQWMsTUFBTXRDLEVBOUUvQixnQkErRWZULEVBQWlCN0YsS0FBTSxDQUNyQmdILE9BQVFBLEVBQ1JTLFdBQVlBLEVBQ1pHLFdBQVlpQixJQUVUaEgsSUFDSDdCLEtBQUtnSCxPQUFTQSxFQUNkaEgsS0FBS3lILFdBQWFBLEVBQ2xCekgsS0FBSzRILFdBQWFpQixJQUlsQmhILElBQ0ZzRixFQUFVaEIsRUFBYyxjQUN4QmdCLEVBQVVmLEVBQVcsVUFDckJlLEVBQVVmLEVBQVcsY0FDckJlLEVBQVVmLEVBQVcsZUFHdkJuQixFQUFZbUIsRUFBbUIsVUFBRyxDQUNoQ3FDLFFBQVMsU0FBaUJiLEdBQ3hCLE9BQU96RCxFQUFJbkUsS0FBTSxFQUFHNEgsR0FBWSxJQUFNLElBQU0sSUFFOUNrQixTQUFVLFNBQWtCbEIsR0FDMUIsT0FBT3pELEVBQUluRSxLQUFNLEVBQUc0SCxHQUFZLElBRWxDbUIsU0FBVSxTQUFrQm5CLEdBQzFCLElBQUlGLEVBQVF2RCxFQUFJbkUsS0FBTSxFQUFHNEgsRUFBWW9CLFVBQVUxSCxPQUFTLEVBQUkwSCxVQUFVLFFBQUtuSSxHQUMzRSxPQUFRNkcsRUFBTSxJQUFNLEVBQUlBLEVBQU0sS0FBTyxJQUFNLElBRTdDdUIsVUFBVyxTQUFtQnJCLEdBQzVCLElBQUlGLEVBQVF2RCxFQUFJbkUsS0FBTSxFQUFHNEgsRUFBWW9CLFVBQVUxSCxPQUFTLEVBQUkwSCxVQUFVLFFBQUtuSSxHQUMzRSxPQUFPNkcsRUFBTSxJQUFNLEVBQUlBLEVBQU0sSUFFL0J3QixTQUFVLFNBQWtCdEIsR0FDMUIsT0FBT2IsRUFBWTVDLEVBQUluRSxLQUFNLEVBQUc0SCxFQUFZb0IsVUFBVTFILE9BQVMsRUFBSTBILFVBQVUsUUFBS25JLEtBRXBGc0ksVUFBVyxTQUFtQnZCLEdBQzVCLE9BQU9iLEVBQVk1QyxFQUFJbkUsS0FBTSxFQUFHNEgsRUFBWW9CLFVBQVUxSCxPQUFTLEVBQUkwSCxVQUFVLFFBQUtuSSxNQUFnQixHQUVwR3VJLFdBQVksU0FBb0J4QixHQUM5QixPQUFPbkIsRUFBY3RDLEVBQUluRSxLQUFNLEVBQUc0SCxFQUFZb0IsVUFBVTFILE9BQVMsRUFBSTBILFVBQVUsUUFBS25JLEdBQVksS0FFbEd3SSxXQUFZLFNBQW9CekIsR0FDOUIsT0FBT25CLEVBQWN0QyxFQUFJbkUsS0FBTSxFQUFHNEgsRUFBWW9CLFVBQVUxSCxPQUFTLEVBQUkwSCxVQUFVLFFBQUtuSSxHQUFZLEtBRWxHMkgsUUFBUyxTQUFpQlosRUFBWTVHLEdBQ3BDOEUsRUFBSTlGLEtBQU0sRUFBRzRILEVBQVlqQixFQUFVM0YsSUFFckMwSCxTQUFVLFNBQWtCZCxFQUFZNUcsR0FDdEM4RSxFQUFJOUYsS0FBTSxFQUFHNEgsRUFBWWpCLEVBQVUzRixJQUVyQ3NJLFNBQVUsU0FBa0IxQixFQUFZNUcsR0FDdEM4RSxFQUFJOUYsS0FBTSxFQUFHNEgsRUFBWWYsRUFBVzdGLEVBQU9nSSxVQUFVMUgsT0FBUyxFQUFJMEgsVUFBVSxRQUFLbkksSUFFbkYwSSxVQUFXLFNBQW1CM0IsRUFBWTVHLEdBQ3hDOEUsRUFBSTlGLEtBQU0sRUFBRzRILEVBQVlmLEVBQVc3RixFQUFPZ0ksVUFBVTFILE9BQVMsRUFBSTBILFVBQVUsUUFBS25JLElBRW5GMkksU0FBVSxTQUFrQjVCLEVBQVk1RyxHQUN0QzhFLEVBQUk5RixLQUFNLEVBQUc0SCxFQUFZZCxFQUFXOUYsRUFBT2dJLFVBQVUxSCxPQUFTLEVBQUkwSCxVQUFVLFFBQUtuSSxJQUVuRjRJLFVBQVcsU0FBbUI3QixFQUFZNUcsR0FDeEM4RSxFQUFJOUYsS0FBTSxFQUFHNEgsRUFBWWQsRUFBVzlGLEVBQU9nSSxVQUFVMUgsT0FBUyxFQUFJMEgsVUFBVSxRQUFLbkksSUFFbkY2SSxXQUFZLFNBQW9COUIsRUFBWTVHLEdBQzFDOEUsRUFBSTlGLEtBQU0sRUFBRzRILEVBQVlYLEVBQWFqRyxFQUFPZ0ksVUFBVTFILE9BQVMsRUFBSTBILFVBQVUsUUFBS25JLElBRXJGOEksV0FBWSxTQUFvQi9CLEVBQVk1RyxHQUMxQzhFLEVBQUk5RixLQUFNLEVBQUc0SCxFQUFZVixFQUFhbEcsRUFBT2dJLFVBQVUxSCxPQUFTLEVBQUkwSCxVQUFVLFFBQUtuSSxNQWlEekY2RSxFQUFlUyxFQUFjSixHQUM3QkwsRUFBZVUsRUFBV0osR0FFMUJuRyxFQUFPRCxRQUFVLENBQ2Y2QixZQUFhMEUsRUFDYnpFLFNBQVUwRSxJLDRCQ2pPWixJQUFJd0QsRUFBVyxFQUFRLE1BQ25CQyxFQUFrQixFQUFRLE1BQzFCeEUsRUFBVyxFQUFRLE1BRW5CeUUsRUFBTUMsS0FBS0QsSUFJZmpLLEVBQU9ELFFBQVUsR0FBR29LLFlBQWMsU0FBb0JDLEVBQWtCdEMsR0FDdEUsSUFBSXVDLEVBQUlOLEVBQVM1SixNQUNibUssRUFBTTlFLEVBQVM2RSxFQUFFNUksUUFDakI4SSxFQUFLUCxFQUFnQkksRUFBUUUsR0FDN0JFLEVBQU9SLEVBQWdCbEMsRUFBT3dDLEdBQzlCRyxFQUFNdEIsVUFBVTFILE9BQVMsRUFBSTBILFVBQVUsUUFBS25JLEVBQzVDd0csRUFBUXlDLFFBQWFqSixJQUFSeUosRUFBb0JILEVBQU1OLEVBQWdCUyxFQUFLSCxJQUFRRSxFQUFNRixFQUFNQyxHQUNoRkcsRUFBTSxFQU1WLElBTElGLEVBQU9ELEdBQU1BLEVBQUtDLEVBQU9oRCxJQUMzQmtELEdBQU8sRUFDUEYsR0FBUWhELEVBQVEsRUFDaEIrQyxHQUFNL0MsRUFBUSxHQUVUQSxLQUFVLEdBQ1hnRCxLQUFRSCxFQUFHQSxFQUFFRSxHQUFNRixFQUFFRyxVQUNiSCxFQUFFRSxHQUNkQSxHQUFNRyxFQUNORixHQUFRRSxFQUNSLE9BQU9MLEksNEJDMUJYLElBQUlOLEVBQVcsRUFBUSxNQUNuQkMsRUFBa0IsRUFBUSxNQUMxQnhFLEVBQVcsRUFBUSxNQUl2QnhGLEVBQU9ELFFBQVUsU0FBY29CLEdBTzdCLElBTkEsSUFBSWtKLEVBQUlOLEVBQVM1SixNQUNic0IsRUFBUytELEVBQVM2RSxFQUFFNUksUUFDcEJrSixFQUFrQnhCLFVBQVUxSCxPQUM1QkYsRUFBUXlJLEVBQWdCVyxFQUFrQixFQUFJeEIsVUFBVSxRQUFLbkksRUFBV1MsR0FDeEVnSixFQUFNRSxFQUFrQixFQUFJeEIsVUFBVSxRQUFLbkksRUFDM0M0SixPQUFpQjVKLElBQVJ5SixFQUFvQmhKLEVBQVN1SSxFQUFnQlMsRUFBS2hKLEdBQ3hEbUosRUFBU3JKLEdBQU84SSxFQUFFOUksS0FBV0osRUFDcEMsT0FBT2tKLEksNEJDZFQsSUFBSVEsRUFBVyxnQkFHWEMsRUFGc0IsRUFBUSxLQUVkQyxDQUFvQixXQUl4Qy9LLEVBQU9ELFFBQVcrSyxFQUVkLEdBQUdFLFFBRjJCLFNBQWlCQyxHQUNqRCxPQUFPSixFQUFTMUssS0FBTThLLEVBQVk5QixVQUFVMUgsT0FBUyxFQUFJMEgsVUFBVSxRQUFLbkksSyw0QkNSMUUsSUFBSWtLLEVBQU8sRUFBUSxNQUNmbkIsRUFBVyxFQUFRLE1BQ25Cb0IsRUFBK0IsRUFBUSxNQUN2Q0MsRUFBd0IsRUFBUSxNQUNoQzVGLEVBQVcsRUFBUSxNQUNuQjZGLEVBQWlCLEVBQVEsTUFDekJDLEVBQW9CLEVBQVEsTUFJaEN0TCxFQUFPRCxRQUFVLFNBQWN3TCxHQUM3QixJQU9JOUosRUFBUStKLEVBQVFDLEVBQU1DLEVBQVVDLEVBQU14SyxFQVB0Q2tKLEVBQUlOLEVBQVN3QixHQUNiOUcsRUFBbUIsbUJBQVJ0RSxLQUFxQkEsS0FBT1csTUFDdkM2SixFQUFrQnhCLFVBQVUxSCxPQUM1Qm1LLEVBQVFqQixFQUFrQixFQUFJeEIsVUFBVSxRQUFLbkksRUFDN0M2SyxPQUFvQjdLLElBQVY0SyxFQUNWRSxFQUFpQlIsRUFBa0JqQixHQUNuQzlJLEVBQVEsRUFJWixHQUZJc0ssSUFBU0QsRUFBUVYsRUFBS1UsRUFBT2pCLEVBQWtCLEVBQUl4QixVQUFVLFFBQUtuSSxFQUFXLElBRTNEQSxNQUFsQjhLLEdBQWlDckgsR0FBSzNELE9BQVNzSyxFQUFzQlUsR0FXdkUsSUFEQU4sRUFBUyxJQUFJL0csRUFEYmhELEVBQVMrRCxFQUFTNkUsRUFBRTVJLFNBRWRBLEVBQVNGLEVBQU9BLElBQ3BCSixFQUFRMEssRUFBVUQsRUFBTXZCLEVBQUU5SSxHQUFRQSxHQUFTOEksRUFBRTlJLEdBQzdDOEosRUFBZUcsRUFBUWpLLEVBQU9KLFFBVGhDLElBRkF3SyxHQURBRCxFQUFXSSxFQUFlcEgsS0FBSzJGLElBQ2ZzQixLQUNoQkgsRUFBUyxJQUFJL0csSUFDTGdILEVBQU9FLEVBQUtqSCxLQUFLZ0gsSUFBV0ssS0FBTXhLLElBQ3hDSixFQUFRMEssRUFBVVYsRUFBNkJPLEVBQVVFLEVBQU8sQ0FBQ0gsRUFBS3RLLE1BQU9JLElBQVEsR0FBUWtLLEVBQUt0SyxNQUNsR2tLLEVBQWVHLEVBQVFqSyxFQUFPSixHQVdsQyxPQURBcUssRUFBTy9KLE9BQVNGLEVBQ1RpSyxJLGVDdkNULElBQUlRLEVBQWtCLEVBQVEsTUFDMUJ4RyxFQUFXLEVBQVEsTUFDbkJ3RSxFQUFrQixFQUFRLE1BRzFCaUMsRUFBZSxTQUFVQyxHQUMzQixPQUFPLFNBQVVDLEVBQU9DLEVBQUlDLEdBQzFCLElBR0lsTCxFQUhBa0osRUFBSTJCLEVBQWdCRyxHQUNwQjFLLEVBQVMrRCxFQUFTNkUsRUFBRTVJLFFBQ3BCRixFQUFReUksRUFBZ0JxQyxFQUFXNUssR0FJdkMsR0FBSXlLLEdBQWVFLEdBQU1BLEdBQUksS0FBTzNLLEVBQVNGLEdBRzNDLElBRkFKLEVBQVFrSixFQUFFOUksT0FFR0osRUFBTyxPQUFPLE9BRXRCLEtBQU1NLEVBQVNGLEVBQU9BLElBQzNCLElBQUsySyxHQUFlM0ssS0FBUzhJLElBQU1BLEVBQUU5SSxLQUFXNkssRUFBSSxPQUFPRixHQUFlM0ssR0FBUyxFQUNuRixPQUFRMkssSUFBZ0IsSUFJOUJsTSxFQUFPRCxRQUFVLENBR2Z1TSxTQUFVTCxHQUFhLEdBR3ZCTSxRQUFTTixHQUFhLEssZUM5QnhCLElBQUlmLEVBQU8sRUFBUSxNQUNmc0IsRUFBZ0IsRUFBUSxNQUN4QnpDLEVBQVcsRUFBUSxNQUNuQnZFLEVBQVcsRUFBUSxNQUNuQmlILEVBQXFCLEVBQVEsTUFFN0JDLEVBQU8sR0FBR0EsS0FHVlQsRUFBZSxTQUFVVSxHQUMzQixJQUFJQyxFQUFpQixHQUFSRCxFQUNURSxFQUFvQixHQUFSRixFQUNaRyxFQUFrQixHQUFSSCxFQUNWSSxFQUFtQixHQUFSSixFQUNYSyxFQUF3QixHQUFSTCxFQUNoQk0sRUFBd0IsR0FBUk4sRUFDaEJPLEVBQW1CLEdBQVJQLEdBQWFLLEVBQzVCLE9BQU8sU0FBVWIsRUFBT2xCLEVBQVlrQyxFQUFNQyxHQVN4QyxJQVJBLElBT0lqTSxFQUFPcUssRUFQUG5CLEVBQUlOLEVBQVNvQyxHQUNia0IsRUFBT2IsRUFBY25DLEdBQ3JCaUQsRUFBZ0JwQyxFQUFLRCxFQUFZa0MsRUFBTSxHQUN2QzFMLEVBQVMrRCxFQUFTNkgsRUFBSzVMLFFBQ3ZCRixFQUFRLEVBQ1JiLEVBQVMwTSxHQUFrQlgsRUFDM0JyQyxFQUFTd0MsRUFBU2xNLEVBQU95TCxFQUFPMUssR0FBVW9MLEdBQWFJLEVBQWdCdk0sRUFBT3lMLEVBQU8sUUFBS25MLEVBRXhGUyxFQUFTRixFQUFPQSxJQUFTLElBQUkyTCxHQUFZM0wsS0FBUzhMLEtBRXREN0IsRUFBUzhCLEVBRFRuTSxFQUFRa00sRUFBSzlMLEdBQ2lCQSxFQUFPOEksR0FDakNzQyxHQUNGLEdBQUlDLEVBQVF4QyxFQUFPN0ksR0FBU2lLLE9BQ3ZCLEdBQUlBLEVBQVEsT0FBUW1CLEdBQ3ZCLEtBQUssRUFBRyxPQUFPLEVBQ2YsS0FBSyxFQUFHLE9BQU94TCxFQUNmLEtBQUssRUFBRyxPQUFPSSxFQUNmLEtBQUssRUFBR21MLEVBQUtoSSxLQUFLMEYsRUFBUWpKLFFBQ3JCLE9BQVF3TCxHQUNiLEtBQUssRUFBRyxPQUFPLEVBQ2YsS0FBSyxFQUFHRCxFQUFLaEksS0FBSzBGLEVBQVFqSixHQUloQyxPQUFPNkwsR0FBaUIsRUFBSUYsR0FBV0MsRUFBV0EsRUFBVzNDLElBSWpFcEssRUFBT0QsUUFBVSxDQUdmaUwsUUFBU2lCLEVBQWEsR0FHdEJzQixJQUFLdEIsRUFBYSxHQUdsQnVCLE9BQVF2QixFQUFhLEdBR3JCd0IsS0FBTXhCLEVBQWEsR0FHbkJ5QixNQUFPekIsRUFBYSxHQUdwQjBCLEtBQU0xQixFQUFhLEdBR25CMkIsVUFBVzNCLEVBQWEsR0FHeEI0QixVQUFXNUIsRUFBYSxLLDRCQ3JFMUIsSUFBSUQsRUFBa0IsRUFBUSxNQUMxQnpHLEVBQVksRUFBUSxNQUNwQkMsRUFBVyxFQUFRLE1BQ25CdUYsRUFBc0IsRUFBUSxNQUU5QmQsRUFBTUMsS0FBS0QsSUFDWDZELEVBQW9CLEdBQUdDLFlBQ3ZCQyxJQUFrQkYsR0FBcUIsRUFBSSxDQUFDLEdBQUdDLFlBQVksR0FBSSxHQUFLLEVBQ3BFakQsRUFBZ0JDLEVBQW9CLGVBQ3BDa0QsRUFBU0QsSUFBa0JsRCxFQUkvQjlLLEVBQU9ELFFBQVVrTyxFQUFTLFNBQXFCQyxHQUU3QyxHQUFJRixFQUFlLE9BQU9GLEVBQWtCSyxNQUFNaE8sS0FBTWdKLFlBQWMsRUFDdEUsSUFBSWtCLEVBQUkyQixFQUFnQjdMLE1BQ3BCc0IsRUFBUytELEVBQVM2RSxFQUFFNUksUUFDcEJGLEVBQVFFLEVBQVMsRUFHckIsSUFGSTBILFVBQVUxSCxPQUFTLElBQUdGLEVBQVEwSSxFQUFJMUksRUFBT2dFLEVBQVU0RCxVQUFVLE1BQzdENUgsRUFBUSxJQUFHQSxFQUFRRSxFQUFTRixHQUMxQkEsR0FBUyxFQUFHQSxJQUFTLEdBQUlBLEtBQVM4SSxHQUFLQSxFQUFFOUksS0FBVzJNLEVBQWUsT0FBTzNNLEdBQVMsRUFDekYsT0FBUSxHQUNOdU0sRyxlQ3hCSixJQUFJekksRUFBUSxFQUFRLE1BQ2hCNUUsRUFBa0IsRUFBUSxNQUMxQjJOLEVBQWEsRUFBUSxNQUVyQkMsRUFBVTVOLEVBQWdCLFdBRTlCVCxFQUFPRCxRQUFVLFNBQVV1TyxHQUl6QixPQUFPRixHQUFjLEtBQU8vSSxHQUFNLFdBQ2hDLElBQUlrSixFQUFRLEdBS1osT0FKa0JBLEVBQU0vRixZQUFjLElBQzFCNkYsR0FBVyxXQUNyQixNQUFPLENBQUVHLElBQUssSUFFMkIsSUFBcENELEVBQU1ELEdBQWFHLFNBQVNELFMsNEJDZnZDLElBQUluSixFQUFRLEVBQVEsTUFFcEJyRixFQUFPRCxRQUFVLFNBQVV1TyxFQUFhSSxHQUN0QyxJQUFJQyxFQUFTLEdBQUdMLEdBQ2hCLFFBQVNLLEdBQVV0SixHQUFNLFdBRXZCc0osRUFBT2pLLEtBQUssS0FBTWdLLEdBQVksV0FBYyxNQUFNLEdBQU0sUSxlQ1A1RCxJQUFJRSxFQUFZLEVBQVEsTUFDcEI3RSxFQUFXLEVBQVEsTUFDbkJ5QyxFQUFnQixFQUFRLE1BQ3hCaEgsRUFBVyxFQUFRLE1BR25CeUcsRUFBZSxTQUFVNEMsR0FDM0IsT0FBTyxTQUFVMUIsRUFBTWxDLEVBQVlOLEVBQWlCbUUsR0FDbERGLEVBQVUzRCxHQUNWLElBQUlaLEVBQUlOLEVBQVNvRCxHQUNiRSxFQUFPYixFQUFjbkMsR0FDckI1SSxFQUFTK0QsRUFBUzZFLEVBQUU1SSxRQUNwQkYsRUFBUXNOLEVBQVdwTixFQUFTLEVBQUksRUFDaEMwRyxFQUFJMEcsR0FBWSxFQUFJLEVBQ3hCLEdBQUlsRSxFQUFrQixFQUFHLE9BQWEsQ0FDcEMsR0FBSXBKLEtBQVM4TCxFQUFNLENBQ2pCeUIsRUFBT3pCLEVBQUs5TCxHQUNaQSxHQUFTNEcsRUFDVCxNQUdGLEdBREE1RyxHQUFTNEcsRUFDTDBHLEVBQVd0TixFQUFRLEVBQUlFLEdBQVVGLEVBQ25DLE1BQU1qQixVQUFVLCtDQUdwQixLQUFNdU8sRUFBV3ROLEdBQVMsRUFBSUUsRUFBU0YsRUFBT0EsR0FBUzRHLEVBQU81RyxLQUFTOEwsSUFDckV5QixFQUFPN0QsRUFBVzZELEVBQU16QixFQUFLOUwsR0FBUUEsRUFBTzhJLElBRTlDLE9BQU95RSxJQUlYOU8sRUFBT0QsUUFBVSxDQUdmZ1AsS0FBTTlDLEdBQWEsR0FHbkIrQyxNQUFPL0MsR0FBYSxLLGVDdEN0QixJQUFJekwsRUFBVyxFQUFRLEtBQ25CeU8sRUFBVSxFQUFRLE1BR2xCWixFQUZrQixFQUFRLEtBRWhCNU4sQ0FBZ0IsV0FJOUJULEVBQU9ELFFBQVUsU0FBVW1QLEVBQWV6TixHQUN4QyxJQUFJZ0QsRUFTRixPQVJFd0ssRUFBUUMsS0FHTSxtQkFGaEJ6SyxFQUFJeUssRUFBYzFHLGNBRWEvRCxJQUFNM0QsUUFBU21PLEVBQVF4SyxFQUFFMUQsV0FDL0NQLEVBQVNpRSxJQUVOLFFBRFZBLEVBQUlBLEVBQUU0SixNQUNVNUosT0FBSXpELEdBSCtDeUQsT0FBSXpELEdBS2xFLFNBQVdBLElBQU55RCxFQUFrQjNELE1BQVEyRCxHQUFjLElBQVhoRCxFQUFlLEVBQUlBLEssZUNsQmhFLElBQUkwTixFQUFXLEVBQVEsTUFDbkJDLEVBQWdCLEVBQVEsTUFHNUJwUCxFQUFPRCxRQUFVLFNBQVUyTCxFQUFVMkQsRUFBSWxPLEVBQU9tTyxHQUM5QyxJQUNFLE9BQU9BLEVBQVVELEVBQUdGLEVBQVNoTyxHQUFPLEdBQUlBLEVBQU0sSUFBTWtPLEVBQUdsTyxHQUV2RCxNQUFPK0QsR0FFUCxNQURBa0ssRUFBYzFELEdBQ1J4RyxLLGVDVlYsSUFFSXFLLEVBRmtCLEVBQVEsS0FFZjlPLENBQWdCLFlBQzNCK08sR0FBZSxFQUVuQixJQUNFLElBQUlDLEVBQVMsRUFDVEMsRUFBcUIsQ0FDdkIvRCxLQUFNLFdBQ0osTUFBTyxDQUFFSSxPQUFRMEQsTUFFbkIsT0FBVSxXQUNSRCxHQUFlLElBR25CRSxFQUFtQkgsR0FBWSxXQUM3QixPQUFPcFAsTUFHVFcsTUFBTTBKLEtBQUtrRixHQUFvQixXQUFjLE1BQU0sS0FDbkQsTUFBT3hLLElBRVRsRixFQUFPRCxRQUFVLFNBQVU0UCxFQUFNQyxHQUMvQixJQUFLQSxJQUFpQkosRUFBYyxPQUFPLEVBQzNDLElBQUlLLEdBQW9CLEVBQ3hCLElBQ0UsSUFBSUMsRUFBUyxHQUNiQSxFQUFPUCxHQUFZLFdBQ2pCLE1BQU8sQ0FDTDVELEtBQU0sV0FDSixNQUFPLENBQUVJLEtBQU04RCxHQUFvQixNQUl6Q0YsRUFBS0csR0FDTCxNQUFPNUssSUFDVCxPQUFPMkssSSxTQ3BDVCxJQUFJRSxFQUFXLEdBQUdBLFNBRWxCL1AsRUFBT0QsUUFBVSxTQUFVTSxHQUN6QixPQUFPMFAsRUFBU3JMLEtBQUtyRSxHQUFJMkgsTUFBTSxHQUFJLEssY0NIckMsSUFBSWdJLEVBQXdCLEVBQVEsTUFDaENDLEVBQWEsRUFBUSxNQUdyQjlNLEVBRmtCLEVBQVEsS0FFVjFDLENBQWdCLGVBRWhDeVAsRUFBdUUsYUFBbkRELEVBQVcsV0FBYyxPQUFPOUcsVUFBckIsSUFVbkNuSixFQUFPRCxRQUFVaVEsRUFBd0JDLEVBQWEsU0FBVTVQLEdBQzlELElBQUlnSyxFQUFHOEYsRUFBSzNFLEVBQ1osWUFBY3hLLElBQVBYLEVBQW1CLFlBQXFCLE9BQVBBLEVBQWMsT0FFTSxpQkFBaEQ4UCxFQVhELFNBQVU5UCxFQUFJZSxHQUN6QixJQUNFLE9BQU9mLEVBQUdlLEdBQ1YsTUFBTzhELEtBUVNrTCxDQUFPL0YsRUFBSXBILE9BQU81QyxHQUFLOEMsSUFBOEJnTixFQUVuRUQsRUFBb0JELEVBQVc1RixHQUVILFdBQTNCbUIsRUFBU3lFLEVBQVc1RixLQUFzQyxtQkFBWkEsRUFBRWdHLE9BQXVCLFlBQWM3RSxJLDRCQ3ZCNUYsSUFBSWxKLEVBQWlCLFVBQ2pCNUIsRUFBUyxFQUFRLElBQ2pCMEUsRUFBYyxFQUFRLE1BQ3RCOEYsRUFBTyxFQUFRLE1BQ2Y1RixFQUFhLEVBQVEsTUFDckJnTCxFQUFVLEVBQVEsS0FDbEJDLEVBQWlCLEVBQVEsS0FDekJDLEVBQWEsRUFBUSxNQUNyQnhPLEVBQWMsRUFBUSxNQUN0QnlPLEVBQVUsZ0JBQ1YzSyxFQUFzQixFQUFRLE1BRTlCRSxFQUFtQkYsRUFBb0JHLElBQ3ZDeUssRUFBeUI1SyxFQUFvQjZLLFVBRWpEM1EsRUFBT0QsUUFBVSxDQUNmNlEsZUFBZ0IsU0FBVUMsRUFBU0MsRUFBa0JsRSxFQUFRbUUsR0FDM0QsSUFBSXRNLEVBQUlvTSxHQUFRLFNBQVUxRCxFQUFNNkQsR0FDOUIxTCxFQUFXNkgsRUFBTTFJLEVBQUdxTSxHQUNwQjlLLEVBQWlCbUgsRUFBTSxDQUNyQjhELEtBQU1ILEVBQ052UCxNQUFPYixFQUFPLE1BQ2R3USxXQUFPbFEsRUFDUG1RLFVBQU1uUSxFQUNOb1EsS0FBTSxJQUVIcFAsSUFBYW1MLEVBQUtpRSxLQUFPLEdBQ2RwUSxNQUFaZ1EsR0FBdUJWLEVBQVFVLEVBQVU3RCxFQUFLNEQsR0FBUSxDQUFFNUQsS0FBTUEsRUFBTWtFLFdBQVl6RSxPQUdsRjdHLEVBQW1CMkssRUFBdUJJLEdBRTFDN1EsRUFBUyxTQUFVa04sRUFBTS9MLEVBQUtELEdBQ2hDLElBRUltUSxFQUFVL1AsRUFGVmdRLEVBQVF4TCxFQUFpQm9ILEdBQ3pCcUUsRUFBUUMsRUFBU3RFLEVBQU0vTCxHQXFCekIsT0FsQkVvUSxFQUNGQSxFQUFNclEsTUFBUUEsR0FHZG9RLEVBQU1KLEtBQU9LLEVBQVEsQ0FDbkJqUSxNQUFPQSxFQUFRa1AsRUFBUXJQLEdBQUssR0FDNUJBLElBQUtBLEVBQ0xELE1BQU9BLEVBQ1BtUSxTQUFVQSxFQUFXQyxFQUFNSixLQUMzQnhGLFVBQU0zSyxFQUNOMFEsU0FBUyxHQUVOSCxFQUFNTCxRQUFPSyxFQUFNTCxNQUFRTSxHQUM1QkYsSUFBVUEsRUFBUzNGLEtBQU82RixHQUMxQnhQLEVBQWF1UCxFQUFNSCxPQUNsQmpFLEVBQUtpRSxPQUVJLE1BQVY3UCxJQUFlZ1EsRUFBTWhRLE1BQU1BLEdBQVNpUSxJQUNqQ3JFLEdBR1BzRSxFQUFXLFNBQVV0RSxFQUFNL0wsR0FDN0IsSUFHSW9RLEVBSEFELEVBQVF4TCxFQUFpQm9ILEdBRXpCNUwsRUFBUWtQLEVBQVFyUCxHQUVwQixHQUFjLE1BQVZHLEVBQWUsT0FBT2dRLEVBQU1oUSxNQUFNQSxHQUV0QyxJQUFLaVEsRUFBUUQsRUFBTUwsTUFBT00sRUFBT0EsRUFBUUEsRUFBTTdGLEtBQzdDLEdBQUk2RixFQUFNcFEsS0FBT0EsRUFBSyxPQUFPb1EsR0FpRmpDLE9BN0VBcE0sRUFBWVgsRUFBRTFELFVBQVcsQ0FHdkI0USxNQUFPLFdBS0wsSUFKQSxJQUNJSixFQUFReEwsRUFERDVGLE1BRVB5UixFQUFPTCxFQUFNaFEsTUFDYmlRLEVBQVFELEVBQU1MLE1BQ1hNLEdBQ0xBLEVBQU1FLFNBQVUsRUFDWkYsRUFBTUYsV0FBVUUsRUFBTUYsU0FBV0UsRUFBTUYsU0FBUzNGLFVBQU8zSyxVQUNwRDRRLEVBQUtKLEVBQU1qUSxPQUNsQmlRLEVBQVFBLEVBQU03RixLQUVoQjRGLEVBQU1MLE1BQVFLLEVBQU1KLFVBQU9uUSxFQUN2QmdCLEVBQWF1UCxFQUFNSCxLQUFPLEVBWG5CalIsS0FZRGlSLEtBQU8sR0FJbkIsT0FBVSxTQUFVaFEsR0FDbEIsSUFBSStMLEVBQU9oTixLQUNQb1IsRUFBUXhMLEVBQWlCb0gsR0FDekJxRSxFQUFRQyxFQUFTdEUsRUFBTS9MLEdBQzNCLEdBQUlvUSxFQUFPLENBQ1QsSUFBSTdGLEVBQU82RixFQUFNN0YsS0FDYmtHLEVBQU9MLEVBQU1GLGdCQUNWQyxFQUFNaFEsTUFBTWlRLEVBQU1qUSxPQUN6QmlRLEVBQU1FLFNBQVUsRUFDWkcsSUFBTUEsRUFBS2xHLEtBQU9BLEdBQ2xCQSxJQUFNQSxFQUFLMkYsU0FBV08sR0FDdEJOLEVBQU1MLE9BQVNNLElBQU9ELEVBQU1MLE1BQVF2RixHQUNwQzRGLEVBQU1KLE1BQVFLLElBQU9ELEVBQU1KLEtBQU9VLEdBQ2xDN1AsRUFBYXVQLEVBQU1ILE9BQ2xCakUsRUFBS2lFLE9BQ1YsUUFBU0ksR0FJYnhHLFFBQVMsU0FBaUJDLEdBSXhCLElBSEEsSUFFSXVHLEVBRkFELEVBQVF4TCxFQUFpQjVGLE1BQ3pCbU4sRUFBZ0JwQyxFQUFLRCxFQUFZOUIsVUFBVTFILE9BQVMsRUFBSTBILFVBQVUsUUFBS25JLEVBQVcsR0FFL0V3USxFQUFRQSxFQUFRQSxFQUFNN0YsS0FBTzRGLEVBQU1MLE9BR3hDLElBRkE1RCxFQUFja0UsRUFBTXJRLE1BQU9xUSxFQUFNcFEsSUFBS2pCLE1BRS9CcVIsR0FBU0EsRUFBTUUsU0FBU0YsRUFBUUEsRUFBTUYsVUFLakRwUCxJQUFLLFNBQWFkLEdBQ2hCLFFBQVNxUSxFQUFTdFIsS0FBTWlCLE1BSTVCZ0UsRUFBWVgsRUFBRTFELFVBQVc2TCxFQUFTLENBRWhDdEksSUFBSyxTQUFhbEQsR0FDaEIsSUFBSW9RLEVBQVFDLEVBQVN0UixLQUFNaUIsR0FDM0IsT0FBT29RLEdBQVNBLEVBQU1yUSxPQUd4QjhFLElBQUssU0FBYTdFLEVBQUtELEdBQ3JCLE9BQU9sQixFQUFPRSxLQUFjLElBQVJpQixFQUFZLEVBQUlBLEVBQUtELEtBRXpDLENBRUYyUSxJQUFLLFNBQWEzUSxHQUNoQixPQUFPbEIsRUFBT0UsS0FBTWdCLEVBQWtCLElBQVZBLEVBQWMsRUFBSUEsRUFBT0EsTUFHckRhLEdBQWFNLEVBQWVtQyxFQUFFMUQsVUFBVyxPQUFRLENBQ25EdUQsSUFBSyxXQUNILE9BQU95QixFQUFpQjVGLE1BQU1pUixRQUczQjNNLEdBRVRzTixVQUFXLFNBQVV0TixFQUFHcU0sRUFBa0JsRSxHQUN4QyxJQUFJb0YsRUFBZ0JsQixFQUFtQixZQUNuQ21CLEVBQTZCdkIsRUFBdUJJLEdBQ3BEb0IsRUFBMkJ4QixFQUF1QnNCLEdBR3REekIsRUFBZTlMLEVBQUdxTSxHQUFrQixTQUFVcUIsRUFBVUMsR0FDdERwTSxFQUFpQjdGLEtBQU0sQ0FDckI4USxLQUFNZSxFQUNONUgsT0FBUStILEVBQ1JaLE1BQU9VLEVBQTJCRSxHQUNsQ0MsS0FBTUEsRUFDTmpCLFVBQU1uUSxPQUVQLFdBS0QsSUFKQSxJQUFJdVEsRUFBUVcsRUFBeUIvUixNQUNqQ2lTLEVBQU9iLEVBQU1hLEtBQ2JaLEVBQVFELEVBQU1KLEtBRVhLLEdBQVNBLEVBQU1FLFNBQVNGLEVBQVFBLEVBQU1GLFNBRTdDLE9BQUtDLEVBQU1uSCxTQUFZbUgsRUFBTUosS0FBT0ssRUFBUUEsRUFBUUEsRUFBTTdGLEtBQU80RixFQUFNQSxNQUFNTCxPQU1qRSxRQUFSa0IsRUFBdUIsQ0FBRWpSLE1BQU9xUSxFQUFNcFEsSUFBSzJLLE1BQU0sR0FDekMsVUFBUnFHLEVBQXlCLENBQUVqUixNQUFPcVEsRUFBTXJRLE1BQU80SyxNQUFNLEdBQ2xELENBQUU1SyxNQUFPLENBQUNxUSxFQUFNcFEsSUFBS29RLEVBQU1yUSxPQUFRNEssTUFBTSxJQU45Q3dGLEVBQU1uSCxZQUFTcEosRUFDUixDQUFFRyxXQUFPSCxFQUFXK0ssTUFBTSxNQU1sQ2EsRUFBUyxVQUFZLFVBQVdBLEdBQVEsR0FHM0M0RCxFQUFXTSxNLDRCQ3RMZixJQUFJMUwsRUFBYyxFQUFRLE1BQ3RCaU4sRUFBYyxvQkFDZGxELEVBQVcsRUFBUSxNQUNuQjNPLEVBQVcsRUFBUSxLQUNuQjhFLEVBQWEsRUFBUSxNQUNyQmdMLEVBQVUsRUFBUSxLQUNsQmdDLEVBQXVCLEVBQVEsTUFDL0JDLEVBQU8sRUFBUSxNQUNmek0sRUFBc0IsRUFBUSxNQUU5QkUsRUFBbUJGLEVBQW9CRyxJQUN2Q3lLLEVBQXlCNUssRUFBb0I2SyxVQUM3Q2hELEVBQU8yRSxFQUFxQjNFLEtBQzVCQyxFQUFZMEUsRUFBcUIxRSxVQUNqQzRFLEVBQUssRUFHTEMsRUFBc0IsU0FBVTlLLEdBQ2xDLE9BQU9BLEVBQU0rSyxTQUFXL0ssRUFBTStLLE9BQVMsSUFBSUMsSUFHekNBLEVBQXNCLFdBQ3hCeFMsS0FBS3lTLFFBQVUsSUFHYkMsRUFBcUIsU0FBVWxMLEVBQU92RyxHQUN4QyxPQUFPdU0sRUFBS2hHLEVBQU1pTCxTQUFTLFNBQVV2UyxHQUNuQyxPQUFPQSxFQUFHLEtBQU9lLE1BSXJCdVIsRUFBb0I1UixVQUFZLENBQzlCdUQsSUFBSyxTQUFVbEQsR0FDYixJQUFJb1EsRUFBUXFCLEVBQW1CMVMsS0FBTWlCLEdBQ3JDLEdBQUlvUSxFQUFPLE9BQU9BLEVBQU0sSUFFMUJ0UCxJQUFLLFNBQVVkLEdBQ2IsUUFBU3lSLEVBQW1CMVMsS0FBTWlCLElBRXBDNkUsSUFBSyxTQUFVN0UsRUFBS0QsR0FDbEIsSUFBSXFRLEVBQVFxQixFQUFtQjFTLEtBQU1pQixHQUNqQ29RLEVBQU9BLEVBQU0sR0FBS3JRLEVBQ2pCaEIsS0FBS3lTLFFBQVFsRyxLQUFLLENBQUN0TCxFQUFLRCxLQUUvQixPQUFVLFNBQVVDLEdBQ2xCLElBQUlHLEVBQVFxTSxFQUFVek4sS0FBS3lTLFNBQVMsU0FBVXZTLEdBQzVDLE9BQU9BLEVBQUcsS0FBT2UsS0FHbkIsT0FES0csR0FBT3BCLEtBQUt5UyxRQUFRRSxPQUFPdlIsRUFBTyxNQUM3QkEsSUFJZHZCLEVBQU9ELFFBQVUsQ0FDZjZRLGVBQWdCLFNBQVVDLEVBQVNDLEVBQWtCbEUsRUFBUW1FLEdBQzNELElBQUl0TSxFQUFJb00sR0FBUSxTQUFVMUQsRUFBTTZELEdBQzlCMUwsRUFBVzZILEVBQU0xSSxFQUFHcU0sR0FDcEI5SyxFQUFpQm1ILEVBQU0sQ0FDckI4RCxLQUFNSCxFQUNOMEIsR0FBSUEsSUFDSkUsWUFBUTFSLElBRU1BLE1BQVpnUSxHQUF1QlYsRUFBUVUsRUFBVTdELEVBQUs0RCxHQUFRLENBQUU1RCxLQUFNQSxFQUFNa0UsV0FBWXpFLE9BR2xGN0csRUFBbUIySyxFQUF1QkksR0FFMUM3USxFQUFTLFNBQVVrTixFQUFNL0wsRUFBS0QsR0FDaEMsSUFBSW9RLEVBQVF4TCxFQUFpQm9ILEdBQ3pCeUUsRUFBT1MsRUFBWWxELEVBQVMvTixJQUFNLEdBR3RDLE9BRmEsSUFBVHdRLEVBQWVhLEVBQW9CbEIsR0FBT3RMLElBQUk3RSxFQUFLRCxHQUNsRHlRLEVBQUtMLEVBQU1pQixJQUFNclIsRUFDZmdNLEdBNkNULE9BMUNBL0gsRUFBWVgsRUFBRTFELFVBQVcsQ0FHdkIsT0FBVSxTQUFVSyxHQUNsQixJQUFJbVEsRUFBUXhMLEVBQWlCNUYsTUFDN0IsSUFBS0ssRUFBU1ksR0FBTSxPQUFPLEVBQzNCLElBQUl3USxFQUFPUyxFQUFZalIsR0FDdkIsT0FBYSxJQUFUd1EsRUFBc0JhLEVBQW9CbEIsR0FBZSxPQUFFblEsR0FDeER3USxHQUFRVyxFQUFLWCxFQUFNTCxFQUFNaUIsWUFBY1osRUFBS0wsRUFBTWlCLEtBSTNEdFEsSUFBSyxTQUFhZCxHQUNoQixJQUFJbVEsRUFBUXhMLEVBQWlCNUYsTUFDN0IsSUFBS0ssRUFBU1ksR0FBTSxPQUFPLEVBQzNCLElBQUl3USxFQUFPUyxFQUFZalIsR0FDdkIsT0FBYSxJQUFUd1EsRUFBc0JhLEVBQW9CbEIsR0FBT3JQLElBQUlkLEdBQ2xEd1EsR0FBUVcsRUFBS1gsRUFBTUwsRUFBTWlCLE9BSXBDcE4sRUFBWVgsRUFBRTFELFVBQVc2TCxFQUFTLENBRWhDdEksSUFBSyxTQUFhbEQsR0FDaEIsSUFBSW1RLEVBQVF4TCxFQUFpQjVGLE1BQzdCLEdBQUlLLEVBQVNZLEdBQU0sQ0FDakIsSUFBSXdRLEVBQU9TLEVBQVlqUixHQUN2QixPQUFhLElBQVR3USxFQUFzQmEsRUFBb0JsQixHQUFPak4sSUFBSWxELEdBQ2xEd1EsRUFBT0EsRUFBS0wsRUFBTWlCLFNBQU14UixJQUluQ2lGLElBQUssU0FBYTdFLEVBQUtELEdBQ3JCLE9BQU9sQixFQUFPRSxLQUFNaUIsRUFBS0QsS0FFekIsQ0FFRjJRLElBQUssU0FBYTNRLEdBQ2hCLE9BQU9sQixFQUFPRSxLQUFNZ0IsR0FBTyxNQUl4QnNELEssNEJDckhYLElBQUlzTyxFQUFJLEVBQVEsTUFDWjlRLEVBQVMsRUFBUSxNQUNqQitRLEVBQVcsRUFBUSxNQUNuQjNRLEVBQVcsRUFBUSxNQUNuQjRRLEVBQXlCLEVBQVEsTUFDakMzQyxFQUFVLEVBQVEsS0FDbEJoTCxFQUFhLEVBQVEsTUFDckI5RSxFQUFXLEVBQVEsS0FDbkI2RSxFQUFRLEVBQVEsTUFDaEI2TixFQUE4QixFQUFRLE1BQ3RDck4sRUFBaUIsRUFBUSxNQUN6QnNOLEVBQW9CLEVBQVEsTUFFaENuVCxFQUFPRCxRQUFVLFNBQVUrUSxFQUFrQkQsRUFBU3VDLEdBQ3BELElBQUl4RyxHQUE4QyxJQUFyQ2tFLEVBQWlCdkUsUUFBUSxPQUNsQzhHLEdBQWdELElBQXRDdkMsRUFBaUJ2RSxRQUFRLFFBQ25Dd0UsRUFBUW5FLEVBQVMsTUFBUSxNQUN6QjBHLEVBQW9CclIsRUFBTzZPLEdBQzNCeUMsRUFBa0JELEdBQXFCQSxFQUFrQnZTLFVBQ3pEVyxFQUFjNFIsRUFDZEUsRUFBVyxHQUVYQyxFQUFZLFNBQVUzTyxHQUN4QixJQUFJNE8sRUFBZUgsRUFBZ0J6TyxHQUNuQ3pDLEVBQVNrUixFQUFpQnpPLEVBQ2pCLE9BQVBBLEVBQWUsU0FBYTNELEdBRTFCLE9BREF1UyxFQUFhaFAsS0FBS3ZFLEtBQWdCLElBQVZnQixFQUFjLEVBQUlBLEdBQ25DaEIsTUFDRSxVQUFQMkUsRUFBa0IsU0FBVTFELEdBQzlCLFFBQU9pUyxJQUFZN1MsRUFBU1ksS0FBZXNTLEVBQWFoUCxLQUFLdkUsS0FBYyxJQUFSaUIsRUFBWSxFQUFJQSxJQUMxRSxPQUFQMEQsRUFBZSxTQUFhMUQsR0FDOUIsT0FBT2lTLElBQVk3UyxFQUFTWSxRQUFPSixFQUFZMFMsRUFBYWhQLEtBQUt2RSxLQUFjLElBQVJpQixFQUFZLEVBQUlBLElBQzlFLE9BQVAwRCxFQUFlLFNBQWExRCxHQUM5QixRQUFPaVMsSUFBWTdTLEVBQVNZLEtBQWVzUyxFQUFhaFAsS0FBS3ZFLEtBQWMsSUFBUmlCLEVBQVksRUFBSUEsSUFDakYsU0FBYUEsRUFBS0QsR0FFcEIsT0FEQXVTLEVBQWFoUCxLQUFLdkUsS0FBYyxJQUFSaUIsRUFBWSxFQUFJQSxFQUFLRCxHQUN0Q2hCLFFBWWIsR0FQYzZTLEVBQ1psQyxFQUM0QixtQkFBckJ3QyxLQUFxQ0QsR0FBV0UsRUFBZ0J2SSxVQUFZM0YsR0FBTSxZQUN2RixJQUFJaU8sR0FBb0JWLFVBQVVqSCxZQU1wQ2pLLEVBQWMwUixFQUFPeEMsZUFBZUMsRUFBU0MsRUFBa0JsRSxFQUFRbUUsR0FDdkVrQyxFQUF1QlUsVUFBVyxPQUM3QixHQUFJWCxFQUFTbEMsR0FBa0IsR0FBTyxDQUMzQyxJQUFJOEMsRUFBVyxJQUFJbFMsRUFFZm1TLEVBQWlCRCxFQUFTN0MsR0FBT3NDLEVBQVUsSUFBTSxFQUFHLElBQU1PLEVBRTFERSxFQUF1QnpPLEdBQU0sV0FBY3VPLEVBQVMxUixJQUFJLE1BR3hENlIsRUFBbUJiLEdBQTRCLFNBQVVsQyxHQUFZLElBQUlzQyxFQUFrQnRDLE1BRTNGZ0QsR0FBY1gsR0FBV2hPLEdBQU0sV0FJakMsSUFGQSxJQUFJNE8sRUFBWSxJQUFJWCxFQUNoQi9SLEVBQVEsRUFDTEEsS0FBUzBTLEVBQVVsRCxHQUFPeFAsRUFBT0EsR0FDeEMsT0FBUTBTLEVBQVUvUixLQUFLLE1BR3BCNlIsS0FDSHJTLEVBQWNtUCxHQUFRLFNBQVVxRCxFQUFPbEQsR0FDckMxTCxFQUFXNE8sRUFBT3hTLEVBQWFvUCxHQUMvQixJQUFJM0QsRUFBT2dHLEVBQWtCLElBQUlHLEVBQXFCWSxFQUFPeFMsR0FFN0QsT0FEZ0JWLE1BQVpnUSxHQUF1QlYsRUFBUVUsRUFBVTdELEVBQUs0RCxHQUFRLENBQUU1RCxLQUFNQSxFQUFNa0UsV0FBWXpFLElBQzdFTyxNQUVHcE0sVUFBWXdTLEVBQ3hCQSxFQUFnQi9LLFlBQWM5RyxJQUc1Qm9TLEdBQXdCRSxLQUMxQlAsRUFBVSxVQUNWQSxFQUFVLE9BQ1Y3RyxHQUFVNkcsRUFBVSxTQUdsQk8sR0FBY0gsSUFBZ0JKLEVBQVUxQyxHQUd4Q3NDLEdBQVdFLEVBQWdCNUIsY0FBYzRCLEVBQWdCNUIsTUFVL0QsT0FQQTZCLEVBQVMxQyxHQUFvQnBQLEVBQzdCcVIsRUFBRSxDQUFFOVEsUUFBUSxFQUFNK0MsT0FBUXRELEdBQWU0UixHQUFxQkUsR0FFOUQzTixFQUFlbkUsRUFBYW9QLEdBRXZCdUMsR0FBU0QsRUFBT3JCLFVBQVVyUSxFQUFhb1AsRUFBa0JsRSxHQUV2RGxMLEksZUNyR1QsSUFBSVEsRUFBTSxFQUFRLE1BQ2RpUyxFQUFVLEVBQVEsTUFDbEJDLEVBQWlDLEVBQVEsTUFDekN6VCxFQUF1QixFQUFRLE1BRW5DWCxFQUFPRCxRQUFVLFNBQVVxSyxFQUFRaUssR0FJakMsSUFIQSxJQUFJL0wsRUFBTzZMLEVBQVFFLEdBQ2YvUixFQUFpQjNCLEVBQXFCTSxFQUN0Q3FULEVBQTJCRixFQUErQm5ULEVBQ3JEa0gsRUFBSSxFQUFHQSxFQUFJRyxFQUFLN0csT0FBUTBHLElBQUssQ0FDcEMsSUFBSS9HLEVBQU1rSCxFQUFLSCxHQUNWakcsRUFBSWtJLEVBQVFoSixJQUFNa0IsRUFBZThILEVBQVFoSixFQUFLa1QsRUFBeUJELEVBQVFqVCxPLGVDWHhGLElBRUltVCxFQUZrQixFQUFRLEtBRWxCOVQsQ0FBZ0IsU0FFNUJULEVBQU9ELFFBQVUsU0FBVXVPLEdBQ3pCLElBQUlrRyxFQUFTLElBQ2IsSUFDRSxNQUFNbEcsR0FBYWtHLEdBQ25CLE1BQU9DLEdBQ1AsSUFFRSxPQURBRCxFQUFPRCxJQUFTLEVBQ1QsTUFBTWpHLEdBQWFrRyxHQUMxQixNQUFPRSxLQUNULE9BQU8sSSxlQ2JYLElBQUlyUCxFQUFRLEVBQVEsTUFFcEJyRixFQUFPRCxTQUFXc0YsR0FBTSxXQUN0QixTQUFTc1AsS0FFVCxPQURBQSxFQUFFNVQsVUFBVXlILFlBQWMsS0FDbkJ2RixPQUFPVixlQUFlLElBQUlvUyxLQUFTQSxFQUFFNVQsYyxlQ0w5QyxJQUFJNlQsRUFBeUIsRUFBUSxNQUVqQ0MsRUFBTyxLQUlYN1UsRUFBT0QsUUFBVSxTQUFVK1UsRUFBUTNFLEVBQUs0RSxFQUFXNVQsR0FDakQsSUFBSUcsRUFBSWYsT0FBT3FVLEVBQXVCRSxJQUNsQ0UsRUFBSyxJQUFNN0UsRUFFZixNQURrQixLQUFkNEUsSUFBa0JDLEdBQU0sSUFBTUQsRUFBWSxLQUFPeFUsT0FBT1ksR0FBTzhULFFBQVFKLEVBQU0sVUFBWSxLQUN0RkcsRUFBSyxJQUFNMVQsRUFBSSxLQUFPNk8sRUFBTSxNLDRCQ1RyQyxJQUFJK0UsRUFBb0IsMEJBQ3BCeFUsRUFBUyxFQUFRLElBQ2pCeVUsRUFBMkIsRUFBUSxNQUNuQ3RQLEVBQWlCLEVBQVEsTUFDekJ1UCxFQUFZLEVBQVEsTUFFcEJDLEVBQWEsV0FBYyxPQUFPbFYsTUFFdENILEVBQU9ELFFBQVUsU0FBVXVWLEVBQXFCeFQsRUFBTTZKLEdBQ3BELElBQUl4SSxFQUFnQnJCLEVBQU8sWUFJM0IsT0FIQXdULEVBQW9CdlUsVUFBWUwsRUFBT3dVLEVBQW1CLENBQUV2SixLQUFNd0osRUFBeUIsRUFBR3hKLEtBQzlGOUYsRUFBZXlQLEVBQXFCblMsR0FBZSxHQUFPLEdBQzFEaVMsRUFBVWpTLEdBQWlCa1MsRUFDcEJDLEksZUNkVCxJQUFJdFQsRUFBYyxFQUFRLE1BQ3RCckIsRUFBdUIsRUFBUSxNQUMvQndVLEVBQTJCLEVBQVEsTUFFdkNuVixFQUFPRCxRQUFVaUMsRUFBYyxTQUFVOE4sRUFBUTFPLEVBQUtELEdBQ3BELE9BQU9SLEVBQXFCTSxFQUFFNk8sRUFBUTFPLEVBQUsrVCxFQUF5QixFQUFHaFUsS0FDckUsU0FBVTJPLEVBQVExTyxFQUFLRCxHQUV6QixPQURBMk8sRUFBTzFPLEdBQU9ELEVBQ1AyTyxJLFNDUlQ5UCxFQUFPRCxRQUFVLFNBQVV3VixFQUFRcFUsR0FDakMsTUFBTyxDQUNMcVUsYUFBdUIsRUFBVEQsR0FDZHJVLGVBQXlCLEVBQVRxVSxHQUNoQkUsV0FBcUIsRUFBVEYsR0FDWnBVLE1BQU9BLEssNEJDSlgsSUFBSXVVLEVBQWMsRUFBUSxNQUN0Qi9VLEVBQXVCLEVBQVEsTUFDL0J3VSxFQUEyQixFQUFRLE1BRXZDblYsRUFBT0QsUUFBVSxTQUFVK1AsRUFBUTFPLEVBQUtELEdBQ3RDLElBQUl3VSxFQUFjRCxFQUFZdFUsR0FDMUJ1VSxLQUFlN0YsRUFBUW5QLEVBQXFCTSxFQUFFNk8sRUFBUTZGLEVBQWFSLEVBQXlCLEVBQUdoVSxJQUM5RjJPLEVBQU82RixHQUFleFUsSSw0QkNQN0IsSUFBSWtFLEVBQVEsRUFBUSxNQUNoQnVRLEVBQVcsY0FFWEMsRUFBTTNMLEtBQUsyTCxJQUNYQyxFQUFnQkMsS0FBS2hWLFVBQ3JCaVYsRUFBVUYsRUFBY0UsUUFDeEJDLEVBQXdCSCxFQUFjSSxZQUsxQ2xXLEVBQU9ELFFBQVdzRixHQUFNLFdBQ3RCLE1BQTBELDRCQUFuRDRRLEVBQXNCdlIsS0FBSyxJQUFJcVIsTUFBSyxzQkFDdEMxUSxHQUFNLFdBQ1g0USxFQUFzQnZSLEtBQUssSUFBSXFSLEtBQUszTixTQUNoQyxXQUNKLElBQUsrTixTQUFTSCxFQUFRdFIsS0FBS3ZFLE9BQVEsTUFBTXNHLFdBQVcsc0JBQ3BELElBQUkyUCxFQUFPalcsS0FDUGtXLEVBQU9ELEVBQUtFLGlCQUNaQyxFQUFlSCxFQUFLSSxxQkFDcEJDLEVBQU9KLEVBQU8sRUFBSSxJQUFNQSxFQUFPLEtBQU8sSUFBTSxHQUNoRCxPQUFPSSxFQUFPYixFQUFTQyxFQUFJUSxHQUFPSSxFQUFPLEVBQUksRUFBRyxHQUM5QyxJQUFNYixFQUFTUSxFQUFLTSxjQUFnQixFQUFHLEVBQUcsR0FDMUMsSUFBTWQsRUFBU1EsRUFBS08sYUFBYyxFQUFHLEdBQ3JDLElBQU1mLEVBQVNRLEVBQUtRLGNBQWUsRUFBRyxHQUN0QyxJQUFNaEIsRUFBU1EsRUFBS1MsZ0JBQWlCLEVBQUcsR0FDeEMsSUFBTWpCLEVBQVNRLEVBQUtVLGdCQUFpQixFQUFHLEdBQ3hDLElBQU1sQixFQUFTVyxFQUFjLEVBQUcsR0FDaEMsS0FDQU4sRyw0QkM3QkosSUFBSTlHLEVBQVcsRUFBUSxNQUNuQnVHLEVBQWMsRUFBUSxNQUUxQjFWLEVBQU9ELFFBQVUsU0FBVWdYLEdBQ3pCLEdBQWEsV0FBVEEsR0FBOEIsV0FBVEEsR0FBOEIsWUFBVEEsRUFDNUMsTUFBTXpXLFVBQVUsa0JBQ2hCLE9BQU9vVixFQUFZdkcsRUFBU2hQLE1BQWdCLFdBQVQ0VyxLLDJCQ052QyxJQUFJaEUsRUFBSSxFQUFRLE1BQ1ppRSxFQUE0QixFQUFRLE1BQ3BDelUsRUFBaUIsRUFBUSxNQUN6QkMsRUFBaUIsRUFBUSxNQUN6QnFELEVBQWlCLEVBQVEsTUFDekJ6RCxFQUE4QixFQUFRLE1BQ3RDQyxFQUFXLEVBQVEsTUFDbkI1QixFQUFrQixFQUFRLE1BQzFCd1csRUFBVSxFQUFRLE1BQ2xCN0IsRUFBWSxFQUFRLE1BQ3BCOEIsRUFBZ0IsRUFBUSxNQUV4QmhDLEVBQW9CZ0MsRUFBY2hDLGtCQUNsQ2lDLEVBQXlCRCxFQUFjQyx1QkFDdkM1SCxFQUFXOU8sRUFBZ0IsWUFDM0IyVyxFQUFPLE9BQ1BDLEVBQVMsU0FDVC9ILEVBQVUsVUFFVitGLEVBQWEsV0FBYyxPQUFPbFYsTUFFdENILEVBQU9ELFFBQVUsU0FBVXVYLEVBQVV4VixFQUFNd1QsRUFBcUIzSixFQUFNNEwsRUFBU0MsRUFBUXZKLEdBQ3JGK0ksRUFBMEIxQixFQUFxQnhULEVBQU02SixHQUVyRCxJQWtCSThMLEVBQTBCQyxFQUFTNVMsRUFsQm5DNlMsRUFBcUIsU0FBVUMsR0FDakMsR0FBSUEsSUFBU0wsR0FBV00sRUFBaUIsT0FBT0EsRUFDaEQsSUFBS1YsR0FBMEJTLEtBQVFFLEVBQW1CLE9BQU9BLEVBQWtCRixHQUNuRixPQUFRQSxHQUNOLEtBQUtSLEVBQ0wsS0FBS0MsRUFDTCxLQUFLL0gsRUFBUyxPQUFPLFdBQXFCLE9BQU8sSUFBSWdHLEVBQW9CblYsS0FBTXlYLElBQy9FLE9BQU8sV0FBYyxPQUFPLElBQUl0QyxFQUFvQm5WLFFBR3BEZ0QsRUFBZ0JyQixFQUFPLFlBQ3ZCaVcsR0FBd0IsRUFDeEJELEVBQW9CUixFQUFTdlcsVUFDN0JpWCxFQUFpQkYsRUFBa0J2SSxJQUNsQ3VJLEVBQWtCLGVBQ2xCUCxHQUFXTyxFQUFrQlAsR0FDOUJNLEdBQW1CVixHQUEwQmEsR0FBa0JMLEVBQW1CSixHQUNsRlUsRUFBNEIsU0FBUm5XLEdBQWtCZ1csRUFBa0JsRixTQUE0Qm9GLEVBaUN4RixHQTdCSUMsSUFDRlIsRUFBMkJsVixFQUFlMFYsRUFBa0J2VCxLQUFLLElBQUk0UyxJQUNqRXBDLElBQXNCalMsT0FBT2xDLFdBQWEwVyxFQUF5QjlMLE9BQ2hFc0wsR0FBVzFVLEVBQWVrVixLQUE4QnZDLElBQ3ZEMVMsRUFDRkEsRUFBZWlWLEVBQTBCdkMsR0FDYSxtQkFBdEN1QyxFQUF5QmxJLElBQ3pDbk4sRUFBNEJxVixFQUEwQmxJLEVBQVU4RixJQUlwRXhQLEVBQWU0UixFQUEwQnRVLEdBQWUsR0FBTSxHQUMxRDhULElBQVM3QixFQUFValMsR0FBaUJrUyxLQUt4Q2tDLEdBQVdGLEdBQVVXLEdBQWtCQSxFQUFlclcsT0FBUzBWLElBQ2pFVSxHQUF3QixFQUN4QkYsRUFBa0IsV0FBb0IsT0FBT0csRUFBZXRULEtBQUt2RSxRQUk3RDhXLElBQVdoSixHQUFXNkosRUFBa0J2SSxLQUFjc0ksR0FDMUR6VixFQUE0QjBWLEVBQW1CdkksRUFBVXNJLEdBRTNEekMsRUFBVXRULEdBQVErVixFQUdkTixFQU1GLEdBTEFHLEVBQVUsQ0FDUlEsT0FBUVAsRUFBbUJOLEdBQzNCL08sS0FBTWtQLEVBQVNLLEVBQWtCRixFQUFtQlAsR0FDcER4RSxRQUFTK0UsRUFBbUJySSxJQUUxQnJCLEVBQVEsSUFBS25KLEtBQU80UyxHQUNsQlAsR0FBMEJZLEtBQTJCalQsS0FBT2dULEtBQzlEelYsRUFBU3lWLEVBQW1CaFQsRUFBSzRTLEVBQVE1UyxTQUV0Q2lPLEVBQUUsQ0FBRTNJLE9BQVF0SSxFQUFNcVcsT0FBTyxFQUFNblQsT0FBUW1TLEdBQTBCWSxHQUF5QkwsR0FHbkcsT0FBT0EsSSxlQ3hGVCxJQUFJdFgsRUFBTyxFQUFRLEtBQ2Y4QixFQUFNLEVBQVEsTUFDZGtXLEVBQStCLEVBQVEsTUFDdkM5VixFQUFpQixVQUVyQnRDLEVBQU9ELFFBQVUsU0FBVStCLEdBQ3pCLElBQUl1VyxFQUFTalksRUFBS2lZLFNBQVdqWSxFQUFLaVksT0FBUyxJQUN0Q25XLEVBQUltVyxFQUFRdlcsSUFBT1EsRUFBZStWLEVBQVF2VyxFQUFNLENBQ25EWCxNQUFPaVgsRUFBNkJuWCxFQUFFYSxPLGVDUjFDLElBQUl1RCxFQUFRLEVBQVEsTUFHcEJyRixFQUFPRCxTQUFXc0YsR0FBTSxXQUN0QixPQUE4RSxHQUF2RXBDLE9BQU9YLGVBQWUsR0FBSSxFQUFHLENBQUVnQyxJQUFLLFdBQWMsT0FBTyxLQUFRLE8sY0NKMUUsSUFBSXJDLEVBQVMsRUFBUSxNQUNqQnpCLEVBQVcsRUFBUSxLQUVuQjhYLEVBQVdyVyxFQUFPcVcsU0FFbEJDLEVBQVMvWCxFQUFTOFgsSUFBYTlYLEVBQVM4WCxFQUFTRSxlQUVyRHhZLEVBQU9ELFFBQVUsU0FBVU0sR0FDekIsT0FBT2tZLEVBQVNELEVBQVNFLGNBQWNuWSxHQUFNLEssU0NOL0NMLEVBQU9ELFFBQVUsQ0FDZjBZLFlBQWEsRUFDYkMsb0JBQXFCLEVBQ3JCQyxhQUFjLEVBQ2RDLGVBQWdCLEVBQ2hCQyxZQUFhLEVBQ2JDLGNBQWUsRUFDZkMsYUFBYyxFQUNkQyxxQkFBc0IsRUFDdEJDLFNBQVUsRUFDVkMsa0JBQW1CLEVBQ25CQyxlQUFnQixFQUNoQkMsZ0JBQWlCLEVBQ2pCQyxrQkFBbUIsRUFDbkJDLFVBQVcsRUFDWEMsY0FBZSxFQUNmQyxhQUFjLEVBQ2RDLFNBQVUsRUFDVkMsaUJBQWtCLEVBQ2xCQyxPQUFRLEVBQ1JDLFlBQWEsRUFDYkMsY0FBZSxFQUNmQyxjQUFlLEVBQ2ZDLGVBQWdCLEVBQ2hCQyxhQUFjLEVBQ2RDLGNBQWUsRUFDZkMsaUJBQWtCLEVBQ2xCQyxpQkFBa0IsRUFDbEJDLGVBQWdCLEVBQ2hCQyxpQkFBa0IsRUFDbEJDLGNBQWUsRUFDZkMsVUFBVyxJLGVDakNiLElBQUlDLEVBQVksRUFBUSxNQUV4QnhhLEVBQU9ELFFBQVUsbUNBQW1DMGEsS0FBS0QsSSxlQ0Z6RCxJQUFJclksRUFBVSxFQUFRLE1BQ2xCRixFQUFTLEVBQVEsTUFFckJqQyxFQUFPRCxRQUFxQyxXQUEzQm9DLEVBQVFGLEVBQU95WSxVLGVDSGhDLElBQUlGLEVBQVksRUFBUSxNQUV4QnhhLEVBQU9ELFFBQVUscUJBQXFCMGEsS0FBS0QsSSxlQ0YzQyxJQUFJRyxFQUFhLEVBQVEsTUFFekIzYSxFQUFPRCxRQUFVNGEsRUFBVyxZQUFhLGNBQWdCLEksZUNGekQsSUFNSUMsRUFBT0MsRUFOUDVZLEVBQVMsRUFBUSxNQUNqQnVZLEVBQVksRUFBUSxNQUVwQkUsRUFBVXpZLEVBQU95WSxRQUNqQkksRUFBV0osR0FBV0EsRUFBUUksU0FDOUJDLEVBQUtELEdBQVlBLEVBQVNDLEdBRzFCQSxFQUVGRixHQURBRCxFQUFRRyxFQUFHQyxNQUFNLE1BQ0QsR0FBS0osRUFBTSxHQUNsQkosTUFDVEksRUFBUUosRUFBVUksTUFBTSxpQkFDVkEsRUFBTSxJQUFNLE1BQ3hCQSxFQUFRSixFQUFVSSxNQUFNLG9CQUNiQyxFQUFVRCxFQUFNLElBSS9CNWEsRUFBT0QsUUFBVThhLElBQVlBLEcsUUNsQjdCN2EsRUFBT0QsUUFBVSxDQUNmLGNBQ0EsaUJBQ0EsZ0JBQ0EsdUJBQ0EsaUJBQ0EsV0FDQSxZLGVDUkYsSUFBSWtDLEVBQVMsRUFBUSxNQUNqQnFTLEVBQTJCLFVBQzNCbFMsRUFBOEIsRUFBUSxNQUN0Q0MsRUFBVyxFQUFRLE1BQ25CNFksRUFBWSxFQUFRLE1BQ3BCQyxFQUE0QixFQUFRLE1BQ3BDbEksRUFBVyxFQUFRLE1BZ0J2QmhULEVBQU9ELFFBQVUsU0FBVW9iLEVBQVM5RyxHQUNsQyxJQUdZakssRUFBUWhKLEVBQUtnYSxFQUFnQkMsRUFBZ0JDLEVBSHJEQyxFQUFTSixFQUFRL1EsT0FDakJvUixFQUFTTCxFQUFRbFosT0FDakJ3WixFQUFTTixFQUFRTyxLQVNyQixHQU5FdFIsRUFERW9SLEVBQ092WixFQUNBd1osRUFDQXhaLEVBQU9zWixJQUFXTixFQUFVTSxFQUFRLEtBRW5DdFosRUFBT3NaLElBQVcsSUFBSXhhLFVBRXRCLElBQUtLLEtBQU9pVCxFQUFRLENBUTlCLEdBUEFnSCxFQUFpQmhILEVBQU9qVCxHQUd0QmdhLEVBRkVELEVBQVFRLGFBQ1ZMLEVBQWFoSCxFQUF5QmxLLEVBQVFoSixLQUNma2EsRUFBV25hLE1BQ3BCaUosRUFBT2hKLElBQ3RCNFIsRUFBU3dJLEVBQVNwYSxFQUFNbWEsR0FBVUUsRUFBUyxJQUFNLEtBQU9yYSxFQUFLK1osRUFBUW5XLGNBRTVDaEUsSUFBbkJvYSxFQUE4QixDQUMzQyxVQUFXQyxVQUEwQkQsRUFBZ0IsU0FDckRGLEVBQTBCRyxFQUFnQkQsSUFHeENELEVBQVFTLE1BQVNSLEdBQWtCQSxFQUFlUSxPQUNwRHhaLEVBQTRCaVosRUFBZ0IsUUFBUSxHQUd0RGhaLEVBQVMrSCxFQUFRaEosRUFBS2lhLEVBQWdCRixNLFNDbkQxQ25iLEVBQU9ELFFBQVUsU0FBVTRQLEdBQ3pCLElBQ0UsUUFBU0EsSUFDVCxNQUFPekssR0FDUCxPQUFPLEssNEJDRlgsRUFBUSxNQUNSLElBQUk3QyxFQUFXLEVBQVEsTUFDbkJnRCxFQUFRLEVBQVEsTUFDaEI1RSxFQUFrQixFQUFRLE1BQzFCb2IsRUFBYSxFQUFRLE1BQ3JCelosRUFBOEIsRUFBUSxNQUV0Q2lNLEVBQVU1TixFQUFnQixXQUUxQnFiLEdBQWlDelcsR0FBTSxXQUl6QyxJQUFJMFcsRUFBSyxJQU1ULE9BTEFBLEVBQUdwTSxLQUFPLFdBQ1IsSUFBSW5FLEVBQVMsR0FFYixPQURBQSxFQUFPd1EsT0FBUyxDQUFFQyxFQUFHLEtBQ2R6USxHQUV5QixNQUEzQixHQUFHeUosUUFBUThHLEVBQUksV0FLcEJHLEVBQ2dDLE9BQTNCLElBQUlqSCxRQUFRLElBQUssTUFHdEJrSCxFQUFVMWIsRUFBZ0IsV0FFMUIyYixJQUNFLElBQUlELElBQzZCLEtBQTVCLElBQUlBLEdBQVMsSUFBSyxNQU96QkUsR0FBcUNoWCxHQUFNLFdBRTdDLElBQUkwVyxFQUFLLE9BQ0xPLEVBQWVQLEVBQUdwTSxLQUN0Qm9NLEVBQUdwTSxLQUFPLFdBQWMsT0FBTzJNLEVBQWFuTyxNQUFNaE8sS0FBTWdKLFlBQ3hELElBQUlxQyxFQUFTLEtBQUt3UCxNQUFNZSxHQUN4QixPQUF5QixJQUFsQnZRLEVBQU8vSixRQUE4QixNQUFkK0osRUFBTyxJQUE0QixNQUFkQSxFQUFPLE1BRzVEeEwsRUFBT0QsUUFBVSxTQUFVK0UsRUFBS3JELEVBQVFrTyxFQUFNaU0sR0FDNUMsSUFBSVcsRUFBUzliLEVBQWdCcUUsR0FFekIwWCxHQUF1Qm5YLEdBQU0sV0FFL0IsSUFBSWdGLEVBQUksR0FFUixPQURBQSxFQUFFa1MsR0FBVSxXQUFjLE9BQU8sR0FDWixHQUFkLEdBQUd6WCxHQUFLdUYsTUFHYm9TLEVBQW9CRCxJQUF3Qm5YLEdBQU0sV0FFcEQsSUFBSXFYLEdBQWEsRUFDYlgsRUFBSyxJQWtCVCxNQWhCWSxVQUFSalgsS0FJRmlYLEVBQUssSUFHRnZULFlBQWMsR0FDakJ1VCxFQUFHdlQsWUFBWTZGLEdBQVcsV0FBYyxPQUFPME4sR0FDL0NBLEVBQUdZLE1BQVEsR0FDWFosRUFBR1EsR0FBVSxJQUFJQSxJQUduQlIsRUFBR3BNLEtBQU8sV0FBaUMsT0FBbkIrTSxHQUFhLEVBQWEsTUFFbERYLEVBQUdRLEdBQVEsS0FDSEcsS0FHVixJQUNHRixJQUNBQyxHQUNRLFlBQVIzWCxLQUNDZ1gsSUFDQUksR0FDQ0UsSUFFTSxVQUFSdFgsSUFBb0J1WCxFQUNyQixDQUNBLElBQUlPLEVBQXFCLElBQUlMLEdBQ3pCN0UsRUFBVS9ILEVBQUs0TSxFQUFRLEdBQUd6WCxJQUFNLFNBQVU0TyxFQUFjYyxFQUFRcUksRUFBS0MsRUFBTUMsR0FDN0UsT0FBSXZJLEVBQU83RSxPQUFTa00sRUFDZFcsSUFBd0JPLEVBSW5CLENBQUVoUixNQUFNLEVBQU01SyxNQUFPeWIsRUFBbUJsWSxLQUFLOFAsRUFBUXFJLEVBQUtDLElBRTVELENBQUUvUSxNQUFNLEVBQU01SyxNQUFPdVMsRUFBYWhQLEtBQUttWSxFQUFLckksRUFBUXNJLElBRXRELENBQUUvUSxNQUFNLEtBQ2QsQ0FDRG1RLGlCQUFrQkEsRUFDbEJFLDZDQUE4Q0EsSUFFNUNZLEVBQWV0RixFQUFRLEdBQ3ZCdUYsRUFBY3ZGLEVBQVEsR0FFMUJyVixFQUFTOUIsT0FBT1EsVUFBVytELEVBQUtrWSxHQUNoQzNhLEVBQVM2YSxPQUFPbmMsVUFBV3diLEVBQWtCLEdBQVY5YSxFQUcvQixTQUFVcVQsRUFBUXFJLEdBQU8sT0FBT0YsRUFBWXZZLEtBQUtvUSxFQUFRM1UsS0FBTWdkLElBRy9ELFNBQVVySSxHQUFVLE9BQU9tSSxFQUFZdlksS0FBS29RLEVBQVEzVSxRQUl0RHliLEdBQU14WixFQUE0QjhhLE9BQU9uYyxVQUFVd2IsR0FBUyxRQUFRLEssNEJDM0gxRSxJQUFJdE4sRUFBVSxFQUFRLE1BQ2xCekosRUFBVyxFQUFRLE1BQ25CMEYsRUFBTyxFQUFRLE1BSWZrUyxFQUFtQixTQUFVaFQsRUFBUWlULEVBQVVoSixFQUFRaUosRUFBV3hWLEVBQU95VixFQUFPQyxFQUFRQyxHQU0xRixJQUxBLElBR0lDLEVBSEFDLEVBQWM3VixFQUNkOFYsRUFBYyxFQUNkQyxJQUFRTCxHQUFTdFMsRUFBS3NTLEVBQVFDLEVBQVMsR0FHcENHLEVBQWNOLEdBQVcsQ0FDOUIsR0FBSU0sS0FBZXZKLEVBQVEsQ0FHekIsR0FGQXFKLEVBQVVHLEVBQVFBLEVBQU14SixFQUFPdUosR0FBY0EsRUFBYVAsR0FBWWhKLEVBQU91SixHQUV6RUwsRUFBUSxHQUFLdE8sRUFBUXlPLEdBQ3ZCQyxFQUFjUCxFQUFpQmhULEVBQVFpVCxFQUFVSyxFQUFTbFksRUFBU2tZLEVBQVFqYyxRQUFTa2MsRUFBYUosRUFBUSxHQUFLLE1BQ3pHLENBQ0wsR0FBSUksR0FBZSxpQkFBa0IsTUFBTXJkLFVBQVUsc0NBQ3JEOEosRUFBT3VULEdBQWVELEVBR3hCQyxJQUVGQyxJQUVGLE9BQU9ELEdBR1QzZCxFQUFPRCxRQUFVcWQsRyxlQy9CakIsSUFBSS9YLEVBQVEsRUFBUSxNQUVwQnJGLEVBQU9ELFNBQVdzRixHQUFNLFdBQ3RCLE9BQU9wQyxPQUFPNmEsYUFBYTdhLE9BQU84YSxrQkFBa0IsUyxlQ0h0RCxJQUFJblAsRUFBWSxFQUFRLE1BR3hCNU8sRUFBT0QsUUFBVSxTQUFVc1AsRUFBSWxDLEVBQU0xTCxHQUVuQyxHQURBbU4sRUFBVVMsUUFDR3JPLElBQVRtTSxFQUFvQixPQUFPa0MsRUFDL0IsT0FBUTVOLEdBQ04sS0FBSyxFQUFHLE9BQU8sV0FDYixPQUFPNE4sRUFBRzNLLEtBQUt5SSxJQUVqQixLQUFLLEVBQUcsT0FBTyxTQUFVOE8sR0FDdkIsT0FBTzVNLEVBQUczSyxLQUFLeUksRUFBTThPLElBRXZCLEtBQUssRUFBRyxPQUFPLFNBQVVBLEVBQUcrQixHQUMxQixPQUFPM08sRUFBRzNLLEtBQUt5SSxFQUFNOE8sRUFBRytCLElBRTFCLEtBQUssRUFBRyxPQUFPLFNBQVUvQixFQUFHK0IsRUFBR0MsR0FDN0IsT0FBTzVPLEVBQUczSyxLQUFLeUksRUFBTThPLEVBQUcrQixFQUFHQyxJQUcvQixPQUFPLFdBQ0wsT0FBTzVPLEVBQUdsQixNQUFNaEIsRUFBTWhFLGMsNEJDcEIxQixJQUFJeUYsRUFBWSxFQUFRLE1BQ3BCcE8sRUFBVyxFQUFRLEtBRW5Cd0gsRUFBUSxHQUFHQSxNQUNYa1csRUFBWSxHQUVaQyxFQUFZLFNBQVUxWixFQUFHMlosRUFBWUMsR0FDdkMsS0FBTUQsS0FBY0YsR0FBWSxDQUM5QixJQUFLLElBQUlJLEVBQU8sR0FBSW5XLEVBQUksRUFBR0EsRUFBSWlXLEVBQVlqVyxJQUFLbVcsRUFBS25XLEdBQUssS0FBT0EsRUFBSSxJQUVyRStWLEVBQVVFLEdBQWMvWixTQUFTLE1BQU8sZ0JBQWtCaWEsRUFBS0MsS0FBSyxLQUFPLEtBQzNFLE9BQU9MLEVBQVVFLEdBQVkzWixFQUFHNFosSUFLcENyZSxFQUFPRCxRQUFVc0UsU0FBUzZHLE1BQVEsU0FBY2lDLEdBQzlDLElBQUlrQyxFQUFLVCxFQUFVek8sTUFDZnFlLEVBQVd4VyxFQUFNdEQsS0FBS3lFLFVBQVcsR0FDakNtRSxFQUFnQixXQUNsQixJQUFJK1EsRUFBT0csRUFBU0MsT0FBT3pXLEVBQU10RCxLQUFLeUUsWUFDdEMsT0FBT2hKLGdCQUFnQm1OLEVBQWdCNlEsRUFBVTlPLEVBQUlnUCxFQUFLNWMsT0FBUTRjLEdBQVFoUCxFQUFHbEIsTUFBTWhCLEVBQU1rUixJQUczRixPQURJN2QsRUFBUzZPLEVBQUd0TyxhQUFZdU0sRUFBY3ZNLFVBQVlzTyxFQUFHdE8sV0FDbER1TSxJLGVDekJULElBQUlsTixFQUFPLEVBQVEsS0FDZjZCLEVBQVMsRUFBUSxNQUVqQjJNLEVBQVksU0FBVThQLEdBQ3hCLE1BQTBCLG1CQUFaQSxFQUF5QkEsT0FBVzFkLEdBR3BEaEIsRUFBT0QsUUFBVSxTQUFVNGUsRUFBV2hRLEdBQ3BDLE9BQU94RixVQUFVMUgsT0FBUyxFQUFJbU4sRUFBVXhPLEVBQUt1ZSxLQUFlL1AsRUFBVTNNLEVBQU8wYyxJQUN6RXZlLEVBQUt1ZSxJQUFjdmUsRUFBS3VlLEdBQVdoUSxJQUFXMU0sRUFBTzBjLElBQWMxYyxFQUFPMGMsR0FBV2hRLEssZUNUM0YsSUFBSXhNLEVBQVUsRUFBUSxLQUNsQmlULEVBQVksRUFBUSxNQUdwQjdGLEVBRmtCLEVBQVEsS0FFZjlPLENBQWdCLFlBRS9CVCxFQUFPRCxRQUFVLFNBQVVNLEdBQ3pCLEdBQVVXLE1BQU5YLEVBQWlCLE9BQU9BLEVBQUdrUCxJQUMxQmxQLEVBQUcsZUFDSCtVLEVBQVVqVCxFQUFROUIsTSxlQ1R6QixJQUFJOE8sRUFBVyxFQUFRLE1BQ25CN0QsRUFBb0IsRUFBUSxNQUVoQ3RMLEVBQU9ELFFBQVUsU0FBVU0sR0FDekIsSUFBSXlMLEVBQWlCUixFQUFrQmpMLEdBQ3ZDLEdBQTZCLG1CQUFsQnlMLEVBQ1QsTUFBTXhMLFVBQVVDLE9BQU9GLEdBQU0sb0JBQzdCLE9BQU84TyxFQUFTckQsRUFBZXBILEtBQUtyRSxNLGNDUHhDLElBQUkwSixFQUFXLEVBQVEsTUFFbkI2VSxFQUFRMVUsS0FBSzBVLE1BQ2IzSixFQUFVLEdBQUdBLFFBQ2I0SixFQUF1Qiw4QkFDdkJDLEVBQWdDLHNCQUdwQzllLEVBQU9ELFFBQVUsU0FBVWdmLEVBQVNsQyxFQUFLbUMsRUFBVUMsRUFBVUMsRUFBZUMsR0FDMUUsSUFBSUMsRUFBVUosRUFBV0QsRUFBUXRkLE9BQzdCNGQsRUFBSUosRUFBU3hkLE9BQ2I2ZCxFQUFVUixFQUtkLFlBSnNCOWQsSUFBbEJrZSxJQUNGQSxFQUFnQm5WLEVBQVNtVixHQUN6QkksRUFBVVQsR0FFTDVKLEVBQVF2USxLQUFLeWEsRUFBYUcsR0FBUyxTQUFVMUUsRUFBTzJFLEdBQ3pELElBQUlDLEVBQ0osT0FBUUQsRUFBR2xlLE9BQU8sSUFDaEIsSUFBSyxJQUFLLE1BQU8sSUFDakIsSUFBSyxJQUFLLE9BQU8wZCxFQUNqQixJQUFLLElBQUssT0FBT2xDLEVBQUk3VSxNQUFNLEVBQUdnWCxHQUM5QixJQUFLLElBQUssT0FBT25DLEVBQUk3VSxNQUFNb1gsR0FDM0IsSUFBSyxJQUNISSxFQUFVTixFQUFjSyxFQUFHdlgsTUFBTSxHQUFJLElBQ3JDLE1BQ0YsUUFDRSxJQUFJeVgsR0FBS0YsRUFDVCxHQUFVLElBQU5FLEVBQVMsT0FBTzdFLEVBQ3BCLEdBQUk2RSxFQUFJSixFQUFHLENBQ1QsSUFBSXBlLEVBQUkyZCxFQUFNYSxFQUFJLElBQ2xCLE9BQVUsSUFBTnhlLEVBQWdCMlosRUFDaEIzWixHQUFLb2UsT0FBOEJyZSxJQUFwQmllLEVBQVNoZSxFQUFJLEdBQW1Cc2UsRUFBR2xlLE9BQU8sR0FBSzRkLEVBQVNoZSxFQUFJLEdBQUtzZSxFQUFHbGUsT0FBTyxHQUN2RnVaLEVBRVQ0RSxFQUFVUCxFQUFTUSxFQUFJLEdBRTNCLFlBQW1CemUsSUFBWndlLEVBQXdCLEdBQUtBLE8sZUNyQ3hDLElBQUlFLEVBQVEsU0FBVXJmLEdBQ3BCLE9BQU9BLEdBQU1BLEVBQUc2SixNQUFRQSxNQUFRN0osR0FJbENMLEVBQU9ELFFBRUwyZixFQUEyQixpQkFBZEMsWUFBMEJBLGFBQ3ZDRCxFQUF1QixpQkFBVkUsUUFBc0JBLFNBQ25DRixFQUFxQixpQkFBUnJTLE1BQW9CQSxPQUNqQ3FTLEVBQXVCLGlCQUFWLEVBQUFHLEdBQXNCLEVBQUFBLElBRW5DLFdBQWUsT0FBTzFmLEtBQXRCLElBQW9Da0UsU0FBUyxjQUFUQSxJLFNDWnRDLElBQUl5YixFQUFpQixHQUFHQSxlQUV4QjlmLEVBQU9ELFFBQVUsU0FBVU0sRUFBSWUsR0FDN0IsT0FBTzBlLEVBQWVwYixLQUFLckUsRUFBSWUsSyxTQ0hqQ3BCLEVBQU9ELFFBQVUsSSxjQ0FqQixJQUFJa0MsRUFBUyxFQUFRLE1BRXJCakMsRUFBT0QsUUFBVSxTQUFVa2MsRUFBRytCLEdBQzVCLElBQUkrQixFQUFVOWQsRUFBTzhkLFFBQ2pCQSxHQUFXQSxFQUFRN2EsUUFDQSxJQUFyQmlFLFVBQVUxSCxPQUFlc2UsRUFBUTdhLE1BQU0rVyxHQUFLOEQsRUFBUTdhLE1BQU0rVyxFQUFHK0IsTSxjQ0xqRSxJQUFJckQsRUFBYSxFQUFRLE1BRXpCM2EsRUFBT0QsUUFBVTRhLEVBQVcsV0FBWSxvQixlQ0Z4QyxJQUFJM1ksRUFBYyxFQUFRLE1BQ3RCcUQsRUFBUSxFQUFRLE1BQ2hCbVQsRUFBZ0IsRUFBUSxLQUc1QnhZLEVBQU9ELFNBQVdpQyxJQUFnQnFELEdBQU0sV0FDdEMsT0FFUSxHQUZEcEMsT0FBT1gsZUFBZWtXLEVBQWMsT0FBUSxJQUFLLENBQ3REbFUsSUFBSyxXQUFjLE9BQU8sS0FDekIyWCxNLFNDUEwsSUFBSXBHLEVBQU0zTCxLQUFLMkwsSUFDWG1LLEVBQU05VixLQUFLOFYsSUFDWHBCLEVBQVExVSxLQUFLMFUsTUFDYnFCLEVBQU0vVixLQUFLK1YsSUFDWEMsRUFBTWhXLEtBQUtnVyxJQTZFZmxnQixFQUFPRCxRQUFVLENBQ2Y0RyxLQTVFUyxTQUFVSSxFQUFRb1osRUFBZ0J0WSxHQUMzQyxJQU9JdVksRUFBVUMsRUFBVXBDLEVBUHBCOVcsRUFBUyxJQUFJckcsTUFBTStHLEdBQ25CeVksRUFBeUIsRUFBUnpZLEVBQVlzWSxFQUFpQixFQUM5Q0ksR0FBUSxHQUFLRCxHQUFrQixFQUMvQkUsRUFBUUQsR0FBUSxFQUNoQkUsRUFBd0IsS0FBbkJOLEVBQXdCSCxFQUFJLEdBQUksSUFBTUEsRUFBSSxHQUFJLElBQU0sRUFDekR2SixFQUFPMVAsRUFBUyxHQUFnQixJQUFYQSxHQUFnQixFQUFJQSxFQUFTLEVBQUksRUFBSSxFQUMxRHhGLEVBQVEsRUFrQ1osS0FoQ0F3RixFQUFTOE8sRUFBSTlPLEtBRUNBLEdBQVVBLElBQVcyWixLQUVqQ0wsRUFBV3RaLEdBQVVBLEVBQVMsRUFBSSxFQUNsQ3FaLEVBQVdHLElBRVhILEVBQVd4QixFQUFNcUIsRUFBSWxaLEdBQVVtWixHQUMzQm5aLEdBQVVrWCxFQUFJK0IsRUFBSSxHQUFJSSxJQUFhLElBQ3JDQSxJQUNBbkMsR0FBSyxJQUdMbFgsR0FERXFaLEVBQVdJLEdBQVMsRUFDWkMsRUFBS3hDLEVBRUx3QyxFQUFLVCxFQUFJLEVBQUcsRUFBSVEsSUFFZnZDLEdBQUssSUFDaEJtQyxJQUNBbkMsR0FBSyxHQUVIbUMsRUFBV0ksR0FBU0QsR0FDdEJGLEVBQVcsRUFDWEQsRUFBV0csR0FDRkgsRUFBV0ksR0FBUyxHQUM3QkgsR0FBWXRaLEVBQVNrWCxFQUFJLEdBQUsrQixFQUFJLEVBQUdHLEdBQ3JDQyxHQUFzQkksSUFFdEJILEVBQVd0WixFQUFTaVosRUFBSSxFQUFHUSxFQUFRLEdBQUtSLEVBQUksRUFBR0csR0FDL0NDLEVBQVcsSUFHUkQsR0FBa0IsRUFBR2haLEVBQU81RixLQUFzQixJQUFYOGUsRUFBZ0JBLEdBQVksSUFBS0YsR0FBa0IsR0FHakcsSUFGQUMsRUFBV0EsR0FBWUQsRUFBaUJFLEVBQ3hDQyxHQUFrQkgsRUFDWEcsRUFBaUIsRUFBR25aLEVBQU81RixLQUFzQixJQUFYNmUsRUFBZ0JBLEdBQVksSUFBS0UsR0FBa0IsR0FFaEcsT0FEQW5aLElBQVM1RixJQUFpQixJQUFQa1YsRUFDWnRQLEdBK0JQTixPQTVCVyxTQUFVTSxFQUFRZ1osR0FDN0IsSUFRSUUsRUFSQXhZLEVBQVFWLEVBQU8xRixPQUNmNmUsRUFBeUIsRUFBUnpZLEVBQVlzWSxFQUFpQixFQUM5Q0ksR0FBUSxHQUFLRCxHQUFrQixFQUMvQkUsRUFBUUQsR0FBUSxFQUNoQkksRUFBUUwsRUFBaUIsRUFDekIvZSxFQUFRc0csRUFBUSxFQUNoQjRPLEVBQU90UCxFQUFPNUYsS0FDZDZlLEVBQWtCLElBQVAzSixFQUdmLElBREFBLElBQVMsRUFDRmtLLEVBQVEsRUFBR1AsRUFBc0IsSUFBWEEsRUFBaUJqWixFQUFPNUYsR0FBUUEsSUFBU29mLEdBQVMsR0FJL0UsSUFIQU4sRUFBV0QsR0FBWSxJQUFNTyxHQUFTLEVBQ3RDUCxLQUFjTyxFQUNkQSxHQUFTUixFQUNGUSxFQUFRLEVBQUdOLEVBQXNCLElBQVhBLEVBQWlCbFosRUFBTzVGLEdBQVFBLElBQVNvZixHQUFTLEdBQy9FLEdBQWlCLElBQWJQLEVBQ0ZBLEVBQVcsRUFBSUksTUFDVixJQUFJSixJQUFhRyxFQUN0QixPQUFPRixFQUFXalksSUFBTXFPLEdBQU8sSUFBWWlLLElBRTNDTCxHQUFzQkwsRUFBSSxFQUFHRyxHQUM3QkMsR0FBc0JJLEVBQ3RCLE9BQVEvSixHQUFRLEVBQUksR0FBSzRKLEVBQVdMLEVBQUksRUFBR0ksRUFBV0QsTSxlQy9FMUQsSUFBSTlhLEVBQVEsRUFBUSxNQUNoQmxELEVBQVUsRUFBUSxNQUVsQjZZLEVBQVEsR0FBR0EsTUFHZmhiLEVBQU9ELFFBQVVzRixHQUFNLFdBR3JCLE9BQVFwQyxPQUFPLEtBQUsyZCxxQkFBcUIsTUFDdEMsU0FBVXZnQixHQUNiLE1BQXNCLFVBQWY4QixFQUFROUIsR0FBa0IyYSxFQUFNdFcsS0FBS3JFLEVBQUksSUFBTTRDLE9BQU81QyxJQUMzRDRDLFEsZUNaSixJQUFJekMsRUFBVyxFQUFRLEtBQ25CZ0MsRUFBaUIsRUFBUSxNQUc3QnhDLEVBQU9ELFFBQVUsU0FBVW9NLEVBQU8rSCxFQUFPMk0sR0FDdkMsSUFBSUMsRUFBV0MsRUFVZixPQVBFdmUsR0FFMEMsbUJBQWxDc2UsRUFBWTVNLEVBQU0xTCxjQUMxQnNZLElBQWNELEdBQ2RyZ0IsRUFBU3VnQixFQUFxQkQsRUFBVS9mLFlBQ3hDZ2dCLElBQXVCRixFQUFROWYsV0FDL0J5QixFQUFlMkosRUFBTzRVLEdBQ2pCNVUsSSxlQ2ZULElBQUl4RSxFQUFRLEVBQVEsTUFFaEJxWixFQUFtQjNjLFNBQVMwTCxTQUdFLG1CQUF2QnBJLEVBQU1zWixnQkFDZnRaLEVBQU1zWixjQUFnQixTQUFVNWdCLEdBQzlCLE9BQU8yZ0IsRUFBaUJ0YyxLQUFLckUsS0FJakNMLEVBQU9ELFFBQVU0SCxFQUFNc1osZSxlQ1h2QixJQUFJQyxFQUFhLEVBQVEsTUFDckIxZ0IsRUFBVyxFQUFRLEtBQ25CMEIsRUFBTSxFQUFRLE1BQ2RJLEVBQWlCLFVBQ2pCRyxFQUFNLEVBQVEsTUFDZDBlLEVBQVcsRUFBUSxNQUVuQkMsRUFBVzNlLEVBQUksUUFDZitQLEVBQUssRUFFTHNMLEVBQWU3YSxPQUFPNmEsY0FBZ0IsV0FDeEMsT0FBTyxHQUdMdUQsRUFBYyxTQUFVaGhCLEdBQzFCaUMsRUFBZWpDLEVBQUkrZ0IsRUFBVSxDQUFFamdCLE1BQU8sQ0FDcENtZ0IsU0FBVSxPQUFROU8sRUFDbEIrTyxTQUFVLE9Bb0NWQyxFQUFPeGhCLEVBQU9ELFFBQVUsQ0FDMUI0VCxVQUFVLEVBQ1ZsRCxRQWxDWSxTQUFVcFEsRUFBSUssR0FFMUIsSUFBS0YsRUFBU0gsR0FBSyxNQUFvQixpQkFBTkEsRUFBaUJBLEdBQW1CLGlCQUFOQSxFQUFpQixJQUFNLEtBQU9BLEVBQzdGLElBQUs2QixFQUFJN0IsRUFBSStnQixHQUFXLENBRXRCLElBQUt0RCxFQUFhemQsR0FBSyxNQUFPLElBRTlCLElBQUtLLEVBQVEsTUFBTyxJQUVwQjJnQixFQUFZaGhCLEdBRVosT0FBT0EsRUFBRytnQixHQUFVRSxVQXdCdEJqUCxZQXJCZ0IsU0FBVWhTLEVBQUlLLEdBQzlCLElBQUt3QixFQUFJN0IsRUFBSStnQixHQUFXLENBRXRCLElBQUt0RCxFQUFhemQsR0FBSyxPQUFPLEVBRTlCLElBQUtLLEVBQVEsT0FBTyxFQUVwQjJnQixFQUFZaGhCLEdBRVosT0FBT0EsRUFBRytnQixHQUFVRyxVQWF0QkUsU0FUYSxTQUFVcGhCLEdBRXZCLE9BREk4Z0IsR0FBWUssRUFBSzdOLFVBQVltSyxFQUFhemQsS0FBUTZCLEVBQUk3QixFQUFJK2dCLElBQVdDLEVBQVloaEIsR0FDOUVBLElBVVQ2Z0IsRUFBV0UsSUFBWSxHLGVDNUR2QixJQVVJbmIsRUFBSzNCLEVBQUtwQyxFQVZWd2YsRUFBa0IsRUFBUSxNQUMxQnpmLEVBQVMsRUFBUSxNQUNqQnpCLEVBQVcsRUFBUSxLQUNuQjRCLEVBQThCLEVBQVEsTUFDdEN1ZixFQUFZLEVBQVEsTUFDcEJDLEVBQVMsRUFBUSxNQUNqQkMsRUFBWSxFQUFRLE1BQ3BCWCxFQUFhLEVBQVEsTUFFckJZLEVBQVU3ZixFQUFPNmYsUUFnQnJCLEdBQUlKLEVBQWlCLENBQ25CLElBQUkvWixFQUFRaWEsRUFBT3JRLFFBQVVxUSxFQUFPclEsTUFBUSxJQUFJdVEsR0FDNUNDLEVBQVFwYSxFQUFNckQsSUFDZDBkLEVBQVFyYSxFQUFNekYsSUFDZCtmLEVBQVF0YSxFQUFNMUIsSUFDbEJBLEVBQU0sU0FBVTVGLEVBQUk2aEIsR0FHbEIsT0FGQUEsRUFBU0MsT0FBUzloQixFQUNsQjRoQixFQUFNdmQsS0FBS2lELEVBQU90SCxFQUFJNmhCLEdBQ2ZBLEdBRVQ1ZCxFQUFNLFNBQVVqRSxHQUNkLE9BQU8waEIsRUFBTXJkLEtBQUtpRCxFQUFPdEgsSUFBTyxJQUVsQzZCLEVBQU0sU0FBVTdCLEdBQ2QsT0FBTzJoQixFQUFNdGQsS0FBS2lELEVBQU90SCxRQUV0QixDQUNMLElBQUkraEIsRUFBUVAsRUFBVSxTQUN0QlgsRUFBV2tCLElBQVMsRUFDcEJuYyxFQUFNLFNBQVU1RixFQUFJNmhCLEdBR2xCLE9BRkFBLEVBQVNDLE9BQVM5aEIsRUFDbEIrQixFQUE0Qi9CLEVBQUkraEIsRUFBT0YsR0FDaENBLEdBRVQ1ZCxFQUFNLFNBQVVqRSxHQUNkLE9BQU9zaEIsRUFBVXRoQixFQUFJK2hCLEdBQVMvaEIsRUFBRytoQixHQUFTLElBRTVDbGdCLEVBQU0sU0FBVTdCLEdBQ2QsT0FBT3NoQixFQUFVdGhCLEVBQUkraEIsSUFJekJwaUIsRUFBT0QsUUFBVSxDQUNma0csSUFBS0EsRUFDTDNCLElBQUtBLEVBQ0xwQyxJQUFLQSxFQUNMbWdCLFFBakRZLFNBQVVoaUIsR0FDdEIsT0FBTzZCLEVBQUk3QixHQUFNaUUsRUFBSWpFLEdBQU00RixFQUFJNUYsRUFBSSxLQWlEbkNzUSxVQTlDYyxTQUFVaEUsR0FDeEIsT0FBTyxTQUFVdE0sR0FDZixJQUFJa1IsRUFDSixJQUFLL1EsRUFBU0gsS0FBUWtSLEVBQVFqTixFQUFJakUsSUFBSzRRLE9BQVN0RSxFQUM5QyxNQUFNck0sVUFBVSwwQkFBNEJxTSxFQUFPLGFBQ25ELE9BQU80RSxNLGVDckJiLElBQUk5USxFQUFrQixFQUFRLE1BQzFCMlUsRUFBWSxFQUFRLE1BRXBCN0YsRUFBVzlPLEVBQWdCLFlBQzNCSSxFQUFpQkMsTUFBTUMsVUFHM0JmLEVBQU9ELFFBQVUsU0FBVU0sR0FDekIsWUFBY1csSUFBUFgsSUFBcUIrVSxFQUFVdFUsUUFBVVQsR0FBTVEsRUFBZTBPLEtBQWNsUCxLLGVDUnJGLElBQUk4QixFQUFVLEVBQVEsTUFJdEJuQyxFQUFPRCxRQUFVZSxNQUFNbU8sU0FBVyxTQUFpQmtPLEdBQ2pELE1BQXVCLFNBQWhCaGIsRUFBUWdiLEssZUNMakIsSUFBSTlYLEVBQVEsRUFBUSxNQUVoQjhaLEVBQWMsa0JBRWRuTSxFQUFXLFNBQVVzUCxFQUFTQyxHQUNoQyxJQUFJcGhCLEVBQVF5USxFQUFLNFEsRUFBVUYsSUFDM0IsT0FBT25oQixHQUFTc2hCLEdBQ1p0aEIsR0FBU3VoQixJQUNXLG1CQUFiSCxFQUEwQmxkLEVBQU1rZCxLQUNyQ0EsSUFHSkMsRUFBWXhQLEVBQVN3UCxVQUFZLFNBQVUxTixHQUM3QyxPQUFPdlUsT0FBT3VVLEdBQVFHLFFBQVFrSyxFQUFhLEtBQUt3RCxlQUc5Qy9RLEVBQU9vQixFQUFTcEIsS0FBTyxHQUN2QjhRLEVBQVMxUCxFQUFTMFAsT0FBUyxJQUMzQkQsRUFBV3pQLEVBQVN5UCxTQUFXLElBRW5DemlCLEVBQU9ELFFBQVVpVCxHLGVDcEJqQixJQUFJeFMsRUFBVyxFQUFRLEtBRW5Cb2UsRUFBUTFVLEtBQUswVSxNQUlqQjVlLEVBQU9ELFFBQVUsU0FBbUJNLEdBQ2xDLE9BQVFHLEVBQVNILElBQU84VixTQUFTOVYsSUFBT3VlLEVBQU12ZSxLQUFRQSxJLFFDUHhETCxFQUFPRCxRQUFVLFNBQVVNLEdBQ3pCLE1BQXFCLGlCQUFQQSxFQUF5QixPQUFQQSxFQUE0QixtQkFBUEEsSSxTQ0R2REwsRUFBT0QsU0FBVSxHLGVDQWpCLElBQUlTLEVBQVcsRUFBUSxLQUNuQjJCLEVBQVUsRUFBUSxNQUdsQm9TLEVBRmtCLEVBQVEsS0FFbEI5VCxDQUFnQixTQUk1QlQsRUFBT0QsUUFBVSxTQUFVTSxHQUN6QixJQUFJdWlCLEVBQ0osT0FBT3BpQixFQUFTSCxVQUFtQ1csS0FBMUI0aEIsRUFBV3ZpQixFQUFHa1UsTUFBMEJxTyxFQUEwQixVQUFmemdCLEVBQVE5QixNLGNDVnRGLElBQUk4TyxFQUFXLEVBQVEsTUFDbkIvRCxFQUF3QixFQUFRLE1BQ2hDNUYsRUFBVyxFQUFRLE1BQ25CMEYsRUFBTyxFQUFRLE1BQ2ZJLEVBQW9CLEVBQVEsTUFDNUI4RCxFQUFnQixFQUFRLE1BRXhCeVQsRUFBUyxTQUFVQyxFQUFTdFgsR0FDOUJyTCxLQUFLMmlCLFFBQVVBLEVBQ2YzaUIsS0FBS3FMLE9BQVNBLEdBR2hCeEwsRUFBT0QsUUFBVSxTQUFVaVIsRUFBVStSLEVBQWlCNUgsR0FDcEQsSUFLSXpQLEVBQVVzWCxFQUFRemhCLEVBQU9FLEVBQVErSixFQUFRRyxFQUFNRixFQUwvQzBCLEVBQU9nTyxHQUFXQSxFQUFRaE8sS0FDMUJrRSxLQUFnQjhKLElBQVdBLEVBQVE5SixZQUNuQzRSLEtBQWlCOUgsSUFBV0EsRUFBUThILGFBQ3BDQyxLQUFpQi9ILElBQVdBLEVBQVErSCxhQUNwQzdULEVBQUtuRSxFQUFLNlgsRUFBaUI1VixFQUFNLEVBQUlrRSxFQUFhNlIsR0FHbERDLEVBQU8sU0FBVUMsR0FFbkIsT0FESTFYLEdBQVUwRCxFQUFjMUQsR0FDckIsSUFBSW1YLEdBQU8sRUFBTU8sSUFHdEJDLEVBQVMsU0FBVWxpQixHQUNyQixPQUFJa1EsR0FDRmxDLEVBQVNoTyxHQUNGK2hCLEVBQWM3VCxFQUFHbE8sRUFBTSxHQUFJQSxFQUFNLEdBQUlnaUIsR0FBUTlULEVBQUdsTyxFQUFNLEdBQUlBLEVBQU0sS0FDaEUraEIsRUFBYzdULEVBQUdsTyxFQUFPZ2lCLEdBQVE5VCxFQUFHbE8sSUFHOUMsR0FBSThoQixFQUNGdlgsRUFBV3NGLE1BQ04sQ0FFTCxHQUFxQixtQkFEckJnUyxFQUFTMVgsRUFBa0IwRixJQUNNLE1BQU0xUSxVQUFVLDBCQUVqRCxHQUFJOEssRUFBc0I0WCxHQUFTLENBQ2pDLElBQUt6aEIsRUFBUSxFQUFHRSxFQUFTK0QsRUFBU3dMLEVBQVN2UCxRQUFTQSxFQUFTRixFQUFPQSxJQUVsRSxJQURBaUssRUFBUzZYLEVBQU9yUyxFQUFTelAsTUFDWGlLLGFBQWtCcVgsRUFBUSxPQUFPclgsRUFDL0MsT0FBTyxJQUFJcVgsR0FBTyxHQUV0Qm5YLEVBQVdzWCxFQUFPdGUsS0FBS3NNLEdBSXpCLElBREFyRixFQUFPRCxFQUFTQyxPQUNQRixFQUFPRSxFQUFLakgsS0FBS2dILElBQVdLLE1BQU0sQ0FDekMsSUFDRVAsRUFBUzZYLEVBQU81WCxFQUFLdEssT0FDckIsTUFBTytELEdBRVAsTUFEQWtLLEVBQWMxRCxHQUNSeEcsRUFFUixHQUFxQixpQkFBVnNHLEdBQXNCQSxHQUFVQSxhQUFrQnFYLEVBQVEsT0FBT3JYLEVBQzVFLE9BQU8sSUFBSXFYLEdBQU8sSyxlQ3hEdEIsSUFBSTFULEVBQVcsRUFBUSxNQUV2Qm5QLEVBQU9ELFFBQVUsU0FBVTJMLEdBQ3pCLElBQUk0WCxFQUFlNVgsRUFBaUIsT0FDcEMsUUFBcUIxSyxJQUFqQnNpQixFQUNGLE9BQU9uVSxFQUFTbVUsRUFBYTVlLEtBQUtnSCxJQUFXdkssUSw0QkNKakQsSUFjSStULEVBQW1CcU8sRUFBbUNDLEVBZHREbmUsRUFBUSxFQUFRLE1BQ2hCOUMsRUFBaUIsRUFBUSxNQUN6QkgsRUFBOEIsRUFBUSxNQUN0Q0YsRUFBTSxFQUFRLE1BQ2R6QixFQUFrQixFQUFRLE1BQzFCd1csRUFBVSxFQUFRLE1BRWxCMUgsRUFBVzlPLEVBQWdCLFlBQzNCMFcsR0FBeUIsRUFRekIsR0FBRzdPLE9BR0MsU0FGTmtiLEVBQWdCLEdBQUdsYixTQUlqQmliLEVBQW9DaGhCLEVBQWVBLEVBQWVpaEIsT0FDeEJ2Z0IsT0FBT2xDLFlBQVdtVSxFQUFvQnFPLEdBSGxEcE0sR0FBeUIsR0FPM0QsSUFBSXNNLEVBQThDemlCLE1BQXJCa1UsR0FBa0M3UCxHQUFNLFdBQ25FLElBQUlvVixFQUFPLEdBRVgsT0FBT3ZGLEVBQWtCM0YsR0FBVTdLLEtBQUsrVixLQUFVQSxLQUdoRGdKLElBQXdCdk8sRUFBb0IsSUFHMUMrQixJQUFXd00sR0FBNEJ2aEIsRUFBSWdULEVBQW1CM0YsSUFDbEVuTixFQUE0QjhTLEVBQW1CM0YsR0ExQmhDLFdBQWMsT0FBT3BQLFFBNkJ0Q0gsRUFBT0QsUUFBVSxDQUNmbVYsa0JBQW1CQSxFQUNuQmlDLHVCQUF3QkEsSSxTQzFDMUJuWCxFQUFPRCxRQUFVLEksU0NBakIsSUFBSTJqQixFQUFjeFosS0FBS3laLE1BQ25CQyxFQUFNMVosS0FBSzBaLElBSWY1akIsRUFBT0QsU0FBWTJqQixHQUVkQSxFQUFZLElBQU0sb0JBQXNCQSxFQUFZLElBQU0scUJBRWxDLE9BQXhCQSxHQUFhLE9BQ2QsU0FBZUcsR0FDakIsT0FBbUIsSUFBWEEsR0FBS0EsR0FBVUEsRUFBSUEsR0FBSyxNQUFRQSxFQUFJLEtBQU9BLEVBQUlBLEVBQUlBLEVBQUksRUFBSUQsRUFBSUMsR0FBSyxHQUMxRUgsRyxlQ1pKLElBQUlqTixFQUFPLEVBQVEsTUFFZlosRUFBTTNMLEtBQUsyTCxJQUNYbUssRUFBTTlWLEtBQUs4VixJQUNYOEQsRUFBVTlELEVBQUksR0FBSSxJQUNsQitELEVBQVkvRCxFQUFJLEdBQUksSUFDcEJnRSxFQUFRaEUsRUFBSSxFQUFHLE1BQVEsRUFBSStELEdBQzNCRSxFQUFRakUsRUFBSSxHQUFJLEtBUXBCaGdCLEVBQU9ELFFBQVVtSyxLQUFLZ2EsUUFBVSxTQUFnQkwsR0FDOUMsSUFFSTVILEVBQUd6USxFQUZIMlksRUFBT3RPLEVBQUlnTyxHQUNYTyxFQUFRM04sRUFBS29OLEdBRWpCLE9BQUlNLEVBQU9GLEVBQWNHLEdBQXdCRCxFQUFPRixFQUFRRixFQVRyRCxFQUFJRCxFQUFVLEVBQUlBLEdBU2dERyxFQUFRRixHQUVyRnZZLEdBREF5USxHQUFLLEVBQUk4SCxFQUFZRCxHQUFXSyxJQUNsQmxJLEVBQUlrSSxJQUVMSCxHQUFTeFksR0FBVUEsRUFBZTRZLEdBQVExRCxLQUNoRDBELEVBQVE1WSxJLFNDeEJqQixJQUFJeVUsRUFBTS9WLEtBQUsrVixJQUlmamdCLEVBQU9ELFFBQVVtSyxLQUFLbWEsT0FBUyxTQUFlUixHQUM1QyxPQUFRQSxHQUFLQSxJQUFNLE1BQVFBLEVBQUksS0FBT0EsRUFBSUEsRUFBSUEsRUFBSSxFQUFJNUQsRUFBSSxFQUFJNEQsSyxTQ0hoRTdqQixFQUFPRCxRQUFVbUssS0FBS3VNLE1BQVEsU0FBY29OLEdBRTFDLE9BQW1CLElBQVhBLEdBQUtBLElBQVdBLEdBQUtBLEVBQUlBLEVBQUlBLEVBQUksR0FBSyxFQUFJLEksZUNKcEQsSUFlSVMsRUFBT0MsRUFBTXBULEVBQU1xVCxFQUFRQyxFQUFRQyxFQUFNQyxFQUFTQyxFQWZsRDNpQixFQUFTLEVBQVEsTUFDakJxUyxFQUEyQixVQUMzQnVRLEVBQVksV0FDWkMsRUFBUyxFQUFRLE1BQ2pCQyxFQUFrQixFQUFRLE1BQzFCQyxFQUFVLEVBQVEsTUFFbEJDLEVBQW1CaGpCLEVBQU9nakIsa0JBQW9CaGpCLEVBQU9pakIsdUJBQ3JENU0sRUFBV3JXLEVBQU9xVyxTQUNsQm9DLEVBQVV6WSxFQUFPeVksUUFDakJ5SyxFQUFVbGpCLEVBQU9rakIsUUFFakJDLEVBQTJCOVEsRUFBeUJyUyxFQUFRLGtCQUM1RG9qQixFQUFpQkQsR0FBNEJBLEVBQXlCamtCLE1BS3JFa2tCLElBQ0hmLEVBQVEsV0FDTixJQUFJZ0IsRUFBUWpXLEVBRVosSUFESTJWLElBQVlNLEVBQVM1SyxFQUFRNkssU0FBU0QsRUFBT0UsT0FDMUNqQixHQUFNLENBQ1hsVixFQUFLa1YsRUFBS2xWLEdBQ1ZrVixFQUFPQSxFQUFLNVksS0FDWixJQUNFMEQsSUFDQSxNQUFPbkssR0FHUCxNQUZJcWYsRUFBTUMsSUFDTHJULE9BQU9uUSxFQUNOa0UsR0FFUmlNLE9BQU9uUSxFQUNMc2tCLEdBQVFBLEVBQU9HLFNBS2hCWCxHQUFXRSxHQUFZRCxJQUFtQkUsSUFBb0IzTSxFQVF4RDZNLEdBQVdBLEVBQVFPLFNBRTVCZixFQUFVUSxFQUFRTyxhQUFRMWtCLEdBQzFCNGpCLEVBQU9ELEVBQVFDLEtBQ2ZKLEVBQVMsV0FDUEksRUFBS2xnQixLQUFLaWdCLEVBQVNMLEtBSXJCRSxFQURTUSxFQUNBLFdBQ1B0SyxFQUFRaUwsU0FBU3JCLElBU1YsV0FFUE8sRUFBVW5nQixLQUFLekMsRUFBUXFpQixLQTVCekJHLEdBQVMsRUFDVEMsRUFBT3BNLEVBQVNzTixlQUFlLElBQy9CLElBQUlYLEVBQWlCWCxHQUFPdUIsUUFBUW5CLEVBQU0sQ0FBRW9CLGVBQWUsSUFDM0R0QixFQUFTLFdBQ1BFLEVBQUs5UyxLQUFPNlMsR0FBVUEsS0E2QjVCemtCLEVBQU9ELFFBQVVzbEIsR0FBa0IsU0FBVWhXLEdBQzNDLElBQUkwVyxFQUFPLENBQUUxVyxHQUFJQSxFQUFJMUQsVUFBTTNLLEdBQ3ZCbVEsSUFBTUEsRUFBS3hGLEtBQU9vYSxHQUNqQnhCLElBQ0hBLEVBQU93QixFQUNQdkIsS0FDQXJULEVBQU80VSxJLGVDOUVYLElBQUk5akIsRUFBUyxFQUFRLE1BRXJCakMsRUFBT0QsUUFBVWtDLEVBQU9rakIsUyxjQ0Z4QixJQUFJSCxFQUFVLEVBQVEsTUFDbEI1VyxFQUFhLEVBQVEsTUFDckIvSSxFQUFRLEVBQVEsTUFFcEJyRixFQUFPRCxVQUFZa0QsT0FBTytpQix3QkFBMEIzZ0IsR0FBTSxXQUV4RCxPQUFRZ1QsT0FBT3VELE9BR1pvSixFQUF5QixLQUFmNVcsRUFBb0JBLEVBQWEsSUFBTUEsRUFBYSxRLGNDVG5FLElBQUkvSSxFQUFRLEVBQVEsTUFDaEI1RSxFQUFrQixFQUFRLE1BQzFCd1csRUFBVSxFQUFRLE1BRWxCMUgsRUFBVzlPLEVBQWdCLFlBRS9CVCxFQUFPRCxTQUFXc0YsR0FBTSxXQUN0QixJQUFJNGdCLEVBQU0sSUFBSUMsSUFBSSxnQkFBaUIsWUFDL0JDLEVBQWVGLEVBQUlFLGFBQ25CM2EsRUFBUyxHQU1iLE9BTEF5YSxFQUFJRyxTQUFXLFFBQ2ZELEVBQWFuYixTQUFRLFNBQVU3SixFQUFPQyxHQUNwQytrQixFQUFxQixPQUFFLEtBQ3ZCM2EsR0FBVXBLLEVBQU1ELEtBRVY4VixJQUFZZ1AsRUFBSUksU0FDbEJGLEVBQWFHLE1BQ0QsMkJBQWJMLEVBQUlNLE1BQ3NCLE1BQTFCSixFQUFhN2hCLElBQUksTUFDdUIsUUFBeEMvRCxPQUFPLElBQUlpbUIsZ0JBQWdCLFdBQzFCTCxFQUFhNVcsSUFFc0IsTUFBcEMsSUFBSTJXLElBQUksZUFBZU8sVUFDc0MsTUFBN0QsSUFBSUQsZ0JBQWdCLElBQUlBLGdCQUFnQixRQUFRbGlCLElBQUksTUFFcEIsZUFBaEMsSUFBSTRoQixJQUFJLGVBQWVRLE1BRVEsWUFBL0IsSUFBSVIsSUFBSSxjQUFjUyxNQUVYLFNBQVhuYixHQUV3QyxNQUF4QyxJQUFJMGEsSUFBSSxnQkFBWWxsQixHQUFXMGxCLFMsZUMvQnRDLElBQUl6a0IsRUFBUyxFQUFRLE1BQ2pCZ2YsRUFBZ0IsRUFBUSxNQUV4QmEsRUFBVTdmLEVBQU82ZixRQUVyQjloQixFQUFPRCxRQUE2QixtQkFBWitoQixHQUEwQixjQUFjckgsS0FBS3dHLEVBQWNhLEssNEJDSm5GLElBQUlsVCxFQUFZLEVBQVEsTUFFcEJnWSxFQUFvQixTQUFVbmlCLEdBQ2hDLElBQUlpaEIsRUFBU21CLEVBQ2IxbUIsS0FBS3drQixRQUFVLElBQUlsZ0IsR0FBRSxTQUFVcWlCLEVBQVdDLEdBQ3hDLFFBQWdCL2xCLElBQVowa0IsUUFBb0Mxa0IsSUFBWDZsQixFQUFzQixNQUFNdm1CLFVBQVUsMkJBQ25Fb2xCLEVBQVVvQixFQUNWRCxFQUFTRSxLQUVYNW1CLEtBQUt1bEIsUUFBVTlXLEVBQVU4VyxHQUN6QnZsQixLQUFLMG1CLE9BQVNqWSxFQUFVaVksSUFJMUI3bUIsRUFBT0QsUUFBUWtCLEVBQUksU0FBVXdELEdBQzNCLE9BQU8sSUFBSW1pQixFQUFrQm5pQixLLGVDaEIvQixJQUFJbWUsRUFBVyxFQUFRLE1BRXZCNWlCLEVBQU9ELFFBQVUsU0FBVU0sR0FDekIsR0FBSXVpQixFQUFTdmlCLEdBQ1gsTUFBTUMsVUFBVSxpREFDaEIsT0FBT0QsSSxlQ0xYLElBRUkybUIsRUFGUyxFQUFRLE1BRU83USxTQUk1Qm5XLEVBQU9ELFFBQVVrbkIsT0FBTzlRLFVBQVksU0FBa0I5VixHQUNwRCxNQUFvQixpQkFBTkEsR0FBa0IybUIsRUFBZTNtQixLLGVDUGpELElBQUk0QixFQUFTLEVBQVEsTUFDakJpbEIsRUFBTyxhQUNQQyxFQUFjLEVBQVEsTUFFdEJDLEVBQWNubEIsRUFBT29sQixXQUNyQnBaLEVBQVMsRUFBSW1aLEVBQVlELEVBQWMsUUFBVSxJQUlyRG5uQixFQUFPRCxRQUFVa08sRUFBUyxTQUFvQjZHLEdBQzVDLElBQUl3UyxFQUFnQkosRUFBSzNtQixPQUFPdVUsSUFDNUJ0SixFQUFTNGIsRUFBWUUsR0FDekIsT0FBa0IsSUFBWDliLEdBQTJDLEtBQTNCOGIsRUFBY2ptQixPQUFPLElBQWEsRUFBSW1LLEdBQzNENGIsRyxlQ2JKLElBQUlubEIsRUFBUyxFQUFRLE1BQ2pCaWxCLEVBQU8sYUFDUEMsRUFBYyxFQUFRLE1BRXRCSSxFQUFZdGxCLEVBQU91bEIsU0FDbkJDLEVBQU0sY0FDTnhaLEVBQTJDLElBQWxDc1osRUFBVUosRUFBYyxPQUFtRCxLQUFwQ0ksRUFBVUosRUFBYyxRQUk1RW5uQixFQUFPRCxRQUFVa08sRUFBUyxTQUFrQjZHLEVBQVE0UyxHQUNsRCxJQUFJcG1CLEVBQUk0bEIsRUFBSzNtQixPQUFPdVUsSUFDcEIsT0FBT3lTLEVBQVVqbUIsRUFBSW9tQixJQUFVLElBQU9ELEVBQUloTixLQUFLblosR0FBSyxHQUFLLE1BQ3ZEaW1CLEcsNEJDWkosSUFBSXZsQixFQUFjLEVBQVEsTUFDdEJxRCxFQUFRLEVBQVEsTUFDaEJzaUIsRUFBYSxFQUFRLE1BQ3JCQyxFQUE4QixFQUFRLE1BQ3RDQyxFQUE2QixFQUFRLE1BQ3JDOWQsRUFBVyxFQUFRLE1BQ25CeUMsRUFBZ0IsRUFBUSxNQUV4QnNiLEVBQWU3a0IsT0FBTzhrQixPQUN0QnpsQixFQUFpQlcsT0FBT1gsZUFJNUJ0QyxFQUFPRCxTQUFXK25CLEdBQWdCemlCLEdBQU0sV0FFdEMsR0FBSXJELEdBUWlCLElBUkY4bEIsRUFBYSxDQUFFOUosRUFBRyxHQUFLOEosRUFBYXhsQixFQUFlLEdBQUksSUFBSyxDQUM3RWtULFlBQVksRUFDWmxSLElBQUssV0FDSGhDLEVBQWVuQyxLQUFNLElBQUssQ0FDeEJnQixNQUFPLEVBQ1BxVSxZQUFZLE9BR2QsQ0FBRXdJLEVBQUcsS0FBTUEsRUFBUyxPQUFPLEVBRS9CLElBQUlnSyxFQUFJLEdBQ0pDLEVBQUksR0FFSkMsRUFBUzdQLFNBQ1Q4UCxFQUFXLHVCQUdmLE9BRkFILEVBQUVFLEdBQVUsRUFDWkMsRUFBU25OLE1BQU0sSUFBSWhRLFNBQVEsU0FBVW9kLEdBQU9ILEVBQUVHLEdBQU9BLEtBQ2YsR0FBL0JOLEVBQWEsR0FBSUUsR0FBR0UsSUFBZ0JQLEVBQVdHLEVBQWEsR0FBSUcsSUFBSTFKLEtBQUssS0FBTzRKLEtBQ3BGLFNBQWdCL2QsRUFBUWlLLEdBTTNCLElBTEEsSUFBSWdVLEVBQUl0ZSxFQUFTSyxHQUNiTyxFQUFrQnhCLFVBQVUxSCxPQUM1QkYsRUFBUSxFQUNSeWtCLEVBQXdCNEIsRUFBNEIzbUIsRUFDcEQyZixFQUF1QmlILEVBQTJCNW1CLEVBQy9DMEosRUFBa0JwSixHQU12QixJQUxBLElBSUlILEVBSkFFLEVBQUlrTCxFQUFjckQsVUFBVTVILE1BQzVCK0csRUFBTzBkLEVBQXdCMkIsRUFBV3JtQixHQUFHbWQsT0FBT3VILEVBQXNCMWtCLElBQU1xbUIsRUFBV3JtQixHQUMzRkcsRUFBUzZHLEVBQUs3RyxPQUNkOEcsRUFBSSxFQUVEOUcsRUFBUzhHLEdBQ2RuSCxFQUFNa0gsRUFBS0MsS0FDTnZHLElBQWU0ZSxFQUFxQmxjLEtBQUtwRCxFQUFHRixLQUFNaW5CLEVBQUVqbkIsR0FBT0UsRUFBRUYsSUFFcEUsT0FBT2luQixHQUNQUCxHLGFDbkRKLElBbURJUSxFQW5EQW5aLEVBQVcsRUFBUSxNQUNuQm9aLEVBQW1CLEVBQVEsTUFDM0JDLEVBQWMsRUFBUSxLQUN0QnRILEVBQWEsRUFBUSxNQUNyQnVILEVBQU8sRUFBUSxLQUNmQyxFQUF3QixFQUFRLEtBT2hDQyxFQU5ZLEVBQVEsS0FNVDlHLENBQVUsWUFFckIrRyxFQUFtQixhQUVuQkMsRUFBWSxTQUFVQyxHQUN4QixNQUFPQyxXQUFtQkQsRUFBbkJDLGNBbUNMQyxFQUFrQixXQUNwQixJQUVFVixFQUFrQmhRLFNBQVNpTixRQUFVLElBQUkwRCxjQUFjLFlBQ3ZELE1BQU8vakIsSUExQm9CLElBSXpCZ2tCLEVBRkFDLEVBeUJKSCxFQUFrQlYsRUFwQ1ksU0FBVUEsR0FDeENBLEVBQWdCYyxNQUFNUCxFQUFVLEtBQ2hDUCxFQUFnQmUsUUFDaEIsSUFBSUMsRUFBT2hCLEVBQWdCaUIsYUFBYXRtQixPQUV4QyxPQURBcWxCLEVBQWtCLEtBQ1hnQixFQStCNkJFLENBQTBCbEIsS0F6QjFEYSxFQUFTVCxFQUFzQixXQUc1QmUsTUFBTUMsUUFBVSxPQUN2QmpCLEVBQUtrQixZQUFZUixHQUVqQkEsRUFBT1MsSUFBTXJwQixPQUxKLGdCQU1UMm9CLEVBQWlCQyxFQUFPVSxjQUFjdlIsVUFDdkJ3UixPQUNmWixFQUFlRSxNQUFNUCxFQUFVLHNCQUMvQkssRUFBZUcsUUFDUkgsRUFBZXZVLEdBZ0J0QixJQURBLElBQUlsVCxFQUFTK21CLEVBQVkvbUIsT0FDbEJBLFlBQWlCdW5CLEVBQXlCLFVBQUVSLEVBQVkvbUIsSUFDL0QsT0FBT3VuQixLQUdUOUgsRUFBV3lILElBQVksRUFJdkIzb0IsRUFBT0QsUUFBVWtELE9BQU92QyxRQUFVLFNBQWdCMkosRUFBRzBmLEdBQ25ELElBQUl2ZSxFQVFKLE9BUFUsT0FBTm5CLEdBQ0Z1ZSxFQUEwQixVQUFJelosRUFBUzlFLEdBQ3ZDbUIsRUFBUyxJQUFJb2QsRUFDYkEsRUFBMEIsVUFBSSxLQUU5QnBkLEVBQU9tZCxHQUFZdGUsR0FDZG1CLEVBQVN3ZCxTQUNNaG9CLElBQWYrb0IsRUFBMkJ2ZSxFQUFTK2MsRUFBaUIvYyxFQUFRdWUsSyxlQzVFdEUsSUFBSS9uQixFQUFjLEVBQVEsTUFDdEJyQixFQUF1QixFQUFRLE1BQy9Cd08sRUFBVyxFQUFRLE1BQ25Cd1ksRUFBYSxFQUFRLE1BSXpCM25CLEVBQU9ELFFBQVVpQyxFQUFjaUIsT0FBT3NsQixpQkFBbUIsU0FBMEJsZSxFQUFHMGYsR0FDcEY1YSxFQUFTOUUsR0FLVCxJQUpBLElBR0lqSixFQUhBa0gsRUFBT3FmLEVBQVdvQyxHQUNsQnRvQixFQUFTNkcsRUFBSzdHLE9BQ2RGLEVBQVEsRUFFTEUsRUFBU0YsR0FBT1osRUFBcUJNLEVBQUVvSixFQUFHakosRUFBTWtILEVBQUsvRyxLQUFVd29CLEVBQVczb0IsSUFDakYsT0FBT2lKLEksZUNkVCxJQUFJckksRUFBYyxFQUFRLE1BQ3RCZ29CLEVBQWlCLEVBQVEsTUFDekI3YSxFQUFXLEVBQVEsTUFDbkJ1RyxFQUFjLEVBQVEsTUFFdEJ1VSxFQUF1QmhuQixPQUFPWCxlQUlsQ3ZDLEVBQVFrQixFQUFJZSxFQUFjaW9CLEVBQXVCLFNBQXdCNWYsRUFBRzZmLEVBQUdDLEdBSTdFLEdBSEFoYixFQUFTOUUsR0FDVDZmLEVBQUl4VSxFQUFZd1UsR0FBRyxHQUNuQi9hLEVBQVNnYixHQUNMSCxFQUFnQixJQUNsQixPQUFPQyxFQUFxQjVmLEVBQUc2ZixFQUFHQyxHQUNsQyxNQUFPamxCLElBQ1QsR0FBSSxRQUFTaWxCLEdBQWMsUUFBU0EsRUFBWSxNQUFNN3BCLFVBQVUsMkJBRWhFLE1BREksVUFBVzZwQixJQUFZOWYsRUFBRTZmLEdBQUtDLEVBQVdocEIsT0FDdENrSixJLGVDbEJULElBQUlySSxFQUFjLEVBQVEsTUFDdEI2bEIsRUFBNkIsRUFBUSxNQUNyQzFTLEVBQTJCLEVBQVEsTUFDbkNuSixFQUFrQixFQUFRLE1BQzFCMEosRUFBYyxFQUFRLE1BQ3RCeFQsRUFBTSxFQUFRLE1BQ2Q4bkIsRUFBaUIsRUFBUSxNQUV6QkksRUFBaUNubkIsT0FBT3FSLHlCQUk1Q3ZVLEVBQVFrQixFQUFJZSxFQUFjb29CLEVBQWlDLFNBQWtDL2YsRUFBRzZmLEdBRzlGLEdBRkE3ZixFQUFJMkIsRUFBZ0IzQixHQUNwQjZmLEVBQUl4VSxFQUFZd1UsR0FBRyxHQUNmRixFQUFnQixJQUNsQixPQUFPSSxFQUErQi9mLEVBQUc2ZixHQUN6QyxNQUFPaGxCLElBQ1QsR0FBSWhELEVBQUltSSxFQUFHNmYsR0FBSSxPQUFPL1UsR0FBMEIwUyxFQUEyQjVtQixFQUFFeUQsS0FBSzJGLEVBQUc2ZixHQUFJN2YsRUFBRTZmLE0sZUNsQjdGLElBQUlsZSxFQUFrQixFQUFRLE1BQzFCcWUsRUFBNEIsVUFFNUJ0YSxFQUFXLEdBQUdBLFNBRWR1YSxFQUErQixpQkFBVjFLLFFBQXNCQSxRQUFVM2MsT0FBTzBDLG9CQUM1RDFDLE9BQU8wQyxvQkFBb0JpYSxRQUFVLEdBV3pDNWYsRUFBT0QsUUFBUWtCLEVBQUksU0FBNkJaLEdBQzlDLE9BQU9pcUIsR0FBb0MsbUJBQXJCdmEsRUFBU3JMLEtBQUtyRSxHQVZqQixTQUFVQSxHQUM3QixJQUNFLE9BQU9ncUIsRUFBMEJocUIsR0FDakMsTUFBTzZFLEdBQ1AsT0FBT29sQixFQUFZdGlCLFNBT2pCdWlCLENBQWVscUIsR0FDZmdxQixFQUEwQnJlLEVBQWdCM0wsTSxlQ3BCaEQsSUFBSW1xQixFQUFxQixFQUFRLE1BRzdCdEosRUFGYyxFQUFRLEtBRUd6QyxPQUFPLFNBQVUsYUFJOUMxZSxFQUFRa0IsRUFBSWdDLE9BQU8wQyxxQkFBdUIsU0FBNkIwRSxHQUNyRSxPQUFPbWdCLEVBQW1CbmdCLEVBQUc2VyxLLGFDUi9CbmhCLEVBQVFrQixFQUFJZ0MsT0FBTytpQix1QixlQ0FuQixJQUFJOWpCLEVBQU0sRUFBUSxNQUNkNkgsRUFBVyxFQUFRLE1BQ25COFgsRUFBWSxFQUFRLE1BQ3BCNEksRUFBMkIsRUFBUSxNQUVuQzlCLEVBQVc5RyxFQUFVLFlBQ3JCN2UsRUFBa0JDLE9BQU9sQyxVQUk3QmYsRUFBT0QsUUFBVTBxQixFQUEyQnhuQixPQUFPVixlQUFpQixTQUFVOEgsR0FFNUUsT0FEQUEsRUFBSU4sRUFBU00sR0FDVG5JLEVBQUltSSxFQUFHc2UsR0FBa0J0ZSxFQUFFc2UsR0FDSCxtQkFBakJ0ZSxFQUFFN0IsYUFBNkI2QixhQUFhQSxFQUFFN0IsWUFDaEQ2QixFQUFFN0IsWUFBWXpILFVBQ2RzSixhQUFhcEgsT0FBU0QsRUFBa0IsTyxlQ2ZuRCxJQUFJZCxFQUFNLEVBQVEsTUFDZDhKLEVBQWtCLEVBQVEsTUFDMUJPLEVBQVUsZ0JBQ1YyVSxFQUFhLEVBQVEsTUFFekJsaEIsRUFBT0QsUUFBVSxTQUFVK1AsRUFBUTRhLEdBQ2pDLElBR0l0cEIsRUFIQWlKLEVBQUkyQixFQUFnQjhELEdBQ3BCM0gsRUFBSSxFQUNKcUQsRUFBUyxHQUViLElBQUtwSyxLQUFPaUosR0FBSW5JLEVBQUlnZixFQUFZOWYsSUFBUWMsRUFBSW1JLEVBQUdqSixJQUFRb0ssRUFBT2tCLEtBQUt0TCxHQUVuRSxLQUFPc3BCLEVBQU1qcEIsT0FBUzBHLEdBQU9qRyxFQUFJbUksRUFBR2pKLEVBQU1zcEIsRUFBTXZpQixTQUM3Q29FLEVBQVFmLEVBQVFwSyxJQUFRb0ssRUFBT2tCLEtBQUt0TCxJQUV2QyxPQUFPb0ssSSxlQ2ZULElBQUlnZixFQUFxQixFQUFRLE1BQzdCaEMsRUFBYyxFQUFRLEtBSTFCeG9CLEVBQU9ELFFBQVVrRCxPQUFPcUYsTUFBUSxTQUFjK0IsR0FDNUMsT0FBT21nQixFQUFtQm5nQixFQUFHbWUsSywwQkNML0IsSUFBSW1DLEVBQTZCLEdBQUcvSixxQkFDaEN0TSxFQUEyQnJSLE9BQU9xUix5QkFHbENzVyxFQUFjdFcsSUFBNkJxVyxFQUEyQmptQixLQUFLLENBQUVtbUIsRUFBRyxHQUFLLEdBSXpGOXFCLEVBQVFrQixFQUFJMnBCLEVBQWMsU0FBOEJFLEdBQ3RELElBQUl4UCxFQUFhaEgsRUFBeUJuVSxLQUFNMnFCLEdBQ2hELFFBQVN4UCxHQUFjQSxFQUFXOUYsWUFDaENtVixHLDRCQ1hKLElBQUkxVCxFQUFVLEVBQVEsTUFDbEJoVixFQUFTLEVBQVEsTUFDakJvRCxFQUFRLEVBQVEsTUFHcEJyRixFQUFPRCxRQUFVa1gsSUFBWTVSLEdBQU0sV0FDakMsSUFBSWpFLEVBQU04SSxLQUFLNmdCLFNBR2ZDLGlCQUFpQnRtQixLQUFLLEtBQU10RCxHQUFLLHNCQUMxQmEsRUFBT2IsTyxlQ1ZoQixJQUFJK04sRUFBVyxFQUFRLE1BQ25COGIsRUFBcUIsRUFBUSxNQUtqQ2pyQixFQUFPRCxRQUFVa0QsT0FBT1QsaUJBQW1CLGFBQWUsR0FBSyxXQUM3RCxJQUVJMG9CLEVBRkFDLEdBQWlCLEVBQ2pCMVEsRUFBTyxHQUVYLEtBQ0V5USxFQUFTam9CLE9BQU9xUix5QkFBeUJyUixPQUFPbEMsVUFBVyxhQUFha0YsS0FDakV2QixLQUFLK1YsRUFBTSxJQUNsQjBRLEVBQWlCMVEsYUFBZ0IzWixNQUNqQyxNQUFPb0UsSUFDVCxPQUFPLFNBQXdCbUYsRUFBRzhOLEdBS2hDLE9BSkFoSixFQUFTOUUsR0FDVDRnQixFQUFtQjlTLEdBQ2ZnVCxFQUFnQkQsRUFBT3htQixLQUFLMkYsRUFBRzhOLEdBQzlCOU4sRUFBRStnQixVQUFZalQsRUFDWjlOLEdBZG9ELFFBZ0J6RHJKLEksZUN2Qk4sSUFBSWdCLEVBQWMsRUFBUSxNQUN0QjJsQixFQUFhLEVBQVEsTUFDckIzYixFQUFrQixFQUFRLE1BQzFCNFUsRUFBdUIsVUFHdkIzVSxFQUFlLFNBQVVvZixHQUMzQixPQUFPLFNBQVVockIsR0FPZixJQU5BLElBS0llLEVBTEFpSixFQUFJMkIsRUFBZ0IzTCxHQUNwQmlJLEVBQU9xZixFQUFXdGQsR0FDbEI1SSxFQUFTNkcsRUFBSzdHLE9BQ2QwRyxFQUFJLEVBQ0pxRCxFQUFTLEdBRU4vSixFQUFTMEcsR0FDZC9HLEVBQU1rSCxFQUFLSCxLQUNObkcsSUFBZTRlLEVBQXFCbGMsS0FBSzJGLEVBQUdqSixJQUMvQ29LLEVBQU9rQixLQUFLMmUsRUFBYSxDQUFDanFCLEVBQUtpSixFQUFFakosSUFBUWlKLEVBQUVqSixJQUcvQyxPQUFPb0ssSUFJWHhMLEVBQU9ELFFBQVUsQ0FHZjZTLFFBQVMzRyxHQUFhLEdBR3RCaU0sT0FBUWpNLEdBQWEsSywyQkM3QnZCLElBQUkrRCxFQUF3QixFQUFRLE1BQ2hDN04sRUFBVSxFQUFRLEtBSXRCbkMsRUFBT0QsUUFBVWlRLEVBQXdCLEdBQUdELFNBQVcsV0FDckQsTUFBTyxXQUFhNU4sRUFBUWhDLE1BQVEsTSxlQ1B0QyxJQUFJd2EsRUFBYSxFQUFRLE1BQ3JCMlEsRUFBNEIsRUFBUSxNQUNwQzFELEVBQThCLEVBQVEsTUFDdEN6WSxFQUFXLEVBQVEsTUFHdkJuUCxFQUFPRCxRQUFVNGEsRUFBVyxVQUFXLFlBQWMsU0FBaUJ0YSxHQUNwRSxJQUFJaUksRUFBT2dqQixFQUEwQnJxQixFQUFFa08sRUFBUzlPLElBQzVDMmxCLEVBQXdCNEIsRUFBNEIzbUIsRUFDeEQsT0FBTytrQixFQUF3QjFkLEVBQUttVyxPQUFPdUgsRUFBc0IzbEIsSUFBT2lJLEksY0NUMUUsSUFBSXJHLEVBQVMsRUFBUSxNQUVyQmpDLEVBQU9ELFFBQVVrQyxHLFNDRmpCakMsRUFBT0QsUUFBVSxTQUFVNFAsR0FDekIsSUFDRSxNQUFPLENBQUV6SyxPQUFPLEVBQU8vRCxNQUFPd08sS0FDOUIsTUFBT3pLLEdBQ1AsTUFBTyxDQUFFQSxPQUFPLEVBQU0vRCxNQUFPK0QsTSxlQ0pqQyxJQUFJaUssRUFBVyxFQUFRLE1BQ25CM08sRUFBVyxFQUFRLEtBQ25CK3FCLEVBQXVCLEVBQVEsTUFFbkN2ckIsRUFBT0QsUUFBVSxTQUFVMEUsRUFBR29mLEdBRTVCLEdBREExVSxFQUFTMUssR0FDTGpFLEVBQVNxakIsSUFBTUEsRUFBRXJiLGNBQWdCL0QsRUFBRyxPQUFPb2YsRUFDL0MsSUFBSTJILEVBQW9CRCxFQUFxQnRxQixFQUFFd0QsR0FHL0MsT0FEQWloQixFQURjOEYsRUFBa0I5RixTQUN4QjdCLEdBQ0QySCxFQUFrQjdHLFUsZUNWM0IsSUFBSXRpQixFQUFXLEVBQVEsTUFFdkJyQyxFQUFPRCxRQUFVLFNBQVVxSyxFQUFRd2YsRUFBS3pPLEdBQ3RDLElBQUssSUFBSS9aLEtBQU93b0IsRUFBS3ZuQixFQUFTK0gsRUFBUWhKLEVBQUt3b0IsRUFBSXhvQixHQUFNK1osR0FDckQsT0FBTy9RLEksZUNKVCxJQUFJbkksRUFBUyxFQUFRLE1BQ2pCRyxFQUE4QixFQUFRLE1BQ3RDRixFQUFNLEVBQVEsTUFDZCtZLEVBQVksRUFBUSxNQUNwQmdHLEVBQWdCLEVBQVEsTUFDeEJuYixFQUFzQixFQUFRLE1BRTlCQyxFQUFtQkQsRUFBb0J4QixJQUN2Q21uQixFQUF1QjNsQixFQUFvQnVjLFFBQzNDcUosRUFBV25yQixPQUFPQSxRQUFReWEsTUFBTSxXQUVuQ2hiLEVBQU9ELFFBQVUsU0FBVXNLLEVBQUdqSixFQUFLRCxFQUFPZ2EsR0FDekMsSUFHSTVKLEVBSEF6SSxJQUFTcVMsS0FBWUEsRUFBUXJTLE9BQzdCNmlCLElBQVN4USxLQUFZQSxFQUFRM0YsV0FDN0JtRyxJQUFjUixLQUFZQSxFQUFRUSxZQUVsQixtQkFBVHhhLElBQ1MsaUJBQVBDLEdBQW9CYyxFQUFJZixFQUFPLFNBQ3hDaUIsRUFBNEJqQixFQUFPLE9BQVFDLElBRTdDbVEsRUFBUWthLEVBQXFCdHFCLElBQ2xCa1QsU0FDVDlDLEVBQU04QyxPQUFTcVgsRUFBU25OLEtBQW1CLGlCQUFQbmQsRUFBa0JBLEVBQU0sTUFHNURpSixJQUFNcEksR0FJRTZHLEdBRUE2UyxHQUFldFIsRUFBRWpKLEtBQzNCdXFCLEdBQVMsVUFGRnRoQixFQUFFakosR0FJUHVxQixFQUFRdGhCLEVBQUVqSixHQUFPRCxFQUNoQmlCLEVBQTRCaUksRUFBR2pKLEVBQUtELElBVG5Dd3FCLEVBQVF0aEIsRUFBRWpKLEdBQU9ELEVBQ2hCOFosRUFBVTdaLEVBQUtELEtBVXJCa0QsU0FBU3RELFVBQVcsWUFBWSxXQUNqQyxNQUFzQixtQkFBUlosTUFBc0I0RixFQUFpQjVGLE1BQU1rVSxRQUFVNE0sRUFBYzlnQixVLGVDdENyRixJQUFJZ0MsRUFBVSxFQUFRLE1BQ2xCMFosRUFBYSxFQUFRLE1BSXpCN2IsRUFBT0QsUUFBVSxTQUFVNnJCLEVBQUd0cUIsR0FDNUIsSUFBSXFPLEVBQU9pYyxFQUFFamMsS0FDYixHQUFvQixtQkFBVEEsRUFBcUIsQ0FDOUIsSUFBSW5FLEVBQVNtRSxFQUFLakwsS0FBS2tuQixFQUFHdHFCLEdBQzFCLEdBQXNCLGlCQUFYa0ssRUFDVCxNQUFNbEwsVUFBVSxzRUFFbEIsT0FBT2tMLEVBR1QsR0FBbUIsV0FBZnJKLEVBQVF5cEIsR0FDVixNQUFNdHJCLFVBQVUsK0NBR2xCLE9BQU91YixFQUFXblgsS0FBS2tuQixFQUFHdHFCLEssNEJDbEI1QixJQVlNdXFCLEVBQ0FDLEVBYkZDLEVBQWMsRUFBUSxNQUN0QkMsRUFBZ0IsRUFBUSxNQUV4QkMsRUFBYS9PLE9BQU9uYyxVQUFVNE8sS0FJOUJ1YyxFQUFnQjNyQixPQUFPUSxVQUFVa1UsUUFFakNrWCxFQUFjRixFQUVkRyxHQUNFUCxFQUFNLElBQ05DLEVBQU0sTUFDVkcsRUFBV3ZuQixLQUFLbW5CLEVBQUssS0FDckJJLEVBQVd2bkIsS0FBS29uQixFQUFLLEtBQ0ksSUFBbEJELEVBQUlRLFdBQXFDLElBQWxCUCxFQUFJTyxXQUdoQ0MsRUFBZ0JOLEVBQWNNLGVBQWlCTixFQUFjTyxhQUk3REMsT0FBdUN4ckIsSUFBdkIsT0FBTzJPLEtBQUssSUFBSSxJQUV4QnljLEdBQTRCSSxHQUFpQkYsS0FHdkRILEVBQWMsU0FBY3RQLEdBQzFCLElBQ0l3UCxFQUFXSSxFQUFRN1IsRUFBT3pTLEVBRDFCNFQsRUFBSzViLEtBRUx1c0IsRUFBU0osR0FBaUJ2USxFQUFHMlEsT0FDN0IvUCxFQUFRb1AsRUFBWXJuQixLQUFLcVgsR0FDekIxSCxFQUFTMEgsRUFBRzFILE9BQ1pzWSxFQUFhLEVBQ2JDLEVBQVUvUCxFQStDZCxPQTdDSTZQLEtBRTBCLEtBRDVCL1AsRUFBUUEsRUFBTTFILFFBQVEsSUFBSyxLQUNqQjFJLFFBQVEsT0FDaEJvUSxHQUFTLEtBR1hpUSxFQUFVcnNCLE9BQU9zYyxHQUFLN1UsTUFBTStULEVBQUdzUSxXQUUzQnRRLEVBQUdzUSxVQUFZLEtBQU90USxFQUFHOFEsV0FBYTlRLEVBQUc4USxXQUF1QyxPQUExQmhRLEVBQUlkLEVBQUdzUSxVQUFZLE1BQzNFaFksRUFBUyxPQUFTQSxFQUFTLElBQzNCdVksRUFBVSxJQUFNQSxFQUNoQkQsS0FJRkYsRUFBUyxJQUFJdlAsT0FBTyxPQUFTN0ksRUFBUyxJQUFLc0ksSUFHekM2UCxJQUNGQyxFQUFTLElBQUl2UCxPQUFPLElBQU03SSxFQUFTLFdBQVlzSSxJQUU3Q3lQLElBQTBCQyxFQUFZdFEsRUFBR3NRLFdBRTdDelIsRUFBUXFSLEVBQVd2bkIsS0FBS2dvQixFQUFTRCxFQUFTMVEsRUFBSTZRLEdBRTFDRixFQUNFOVIsR0FDRkEsRUFBTWtTLE1BQVFsUyxFQUFNa1MsTUFBTTlrQixNQUFNMmtCLEdBQ2hDL1IsRUFBTSxHQUFLQSxFQUFNLEdBQUc1UyxNQUFNMmtCLEdBQzFCL1IsRUFBTXJaLE1BQVF3YSxFQUFHc1EsVUFDakJ0USxFQUFHc1EsV0FBYXpSLEVBQU0sR0FBR25aLFFBQ3BCc2EsRUFBR3NRLFVBQVksRUFDYkQsR0FBNEJ4UixJQUNyQ21CLEVBQUdzUSxVQUFZdFEsRUFBRzlaLE9BQVMyWSxFQUFNclosTUFBUXFaLEVBQU0sR0FBR25aLE9BQVM0cUIsR0FFekRHLEdBQWlCNVIsR0FBU0EsRUFBTW5aLE9BQVMsR0FHM0N5cUIsRUFBY3huQixLQUFLa1csRUFBTSxHQUFJNlIsR0FBUSxXQUNuQyxJQUFLdGtCLEVBQUksRUFBR0EsRUFBSWdCLFVBQVUxSCxPQUFTLEVBQUcwRyxTQUNmbkgsSUFBakJtSSxVQUFVaEIsS0FBa0J5UyxFQUFNelMsUUFBS25ILE1BSzFDNFosSUFJWDVhLEVBQU9ELFFBQVVvc0IsRyw0QkN0RmpCLElBQUloZCxFQUFXLEVBQVEsTUFJdkJuUCxFQUFPRCxRQUFVLFdBQ2YsSUFBSW9OLEVBQU9nQyxFQUFTaFAsTUFDaEJxTCxFQUFTLEdBT2IsT0FOSTJCLEVBQUtsTCxTQUFRdUosR0FBVSxLQUN2QjJCLEVBQUs0ZixhQUFZdmhCLEdBQVUsS0FDM0IyQixFQUFLMGYsWUFBV3JoQixHQUFVLEtBQzFCMkIsRUFBSzZmLFNBQVF4aEIsR0FBVSxLQUN2QjJCLEVBQUszTCxVQUFTZ0ssR0FBVSxLQUN4QjJCLEVBQUt1ZixTQUFRbGhCLEdBQVUsS0FDcEJBLEksNEJDWlQsSUFBSW5HLEVBQVEsRUFBUSxNQUlwQixTQUFTNG5CLEVBQUdDLEVBQUdqc0IsR0FDYixPQUFPaWMsT0FBT2dRLEVBQUdqc0IsR0FHbkJsQixFQUFRdXNCLGNBQWdCam5CLEdBQU0sV0FFNUIsSUFBSTBXLEVBQUtrUixFQUFHLElBQUssS0FFakIsT0FEQWxSLEVBQUdzUSxVQUFZLEVBQ1csTUFBbkJ0USxFQUFHcE0sS0FBSyxXQUdqQjVQLEVBQVF3c0IsYUFBZWxuQixHQUFNLFdBRTNCLElBQUkwVyxFQUFLa1IsRUFBRyxLQUFNLE1BRWxCLE9BREFsUixFQUFHc1EsVUFBWSxFQUNVLE1BQWxCdFEsRUFBR3BNLEtBQUssVyxTQ25CakIzUCxFQUFPRCxRQUFVLFNBQVVNLEdBQ3pCLEdBQVVXLE1BQU5YLEVBQWlCLE1BQU1DLFVBQVUsd0JBQTBCRCxHQUMvRCxPQUFPQSxJLFNDRlRMLEVBQU9ELFFBQVVrRCxPQUFPa3FCLElBQU0sU0FBWXRKLEVBQUd1SixHQUUzQyxPQUFPdkosSUFBTXVKLEVBQVUsSUFBTnZKLEdBQVcsRUFBSUEsR0FBTSxFQUFJdUosRUFBSXZKLEdBQUtBLEdBQUt1SixHQUFLQSxJLGVDSi9ELElBQUluckIsRUFBUyxFQUFRLE1BQ2pCRyxFQUE4QixFQUFRLE1BRTFDcEMsRUFBT0QsUUFBVSxTQUFVcUIsRUFBS0QsR0FDOUIsSUFDRWlCLEVBQTRCSCxFQUFRYixFQUFLRCxHQUN6QyxNQUFPK0QsR0FDUGpELEVBQU9iLEdBQU9ELEVBQ2QsT0FBT0EsSSw0QkNQWCxJQUFJd1osRUFBYSxFQUFRLE1BQ3JCaGEsRUFBdUIsRUFBUSxNQUMvQkYsRUFBa0IsRUFBUSxNQUMxQnVCLEVBQWMsRUFBUSxNQUV0QnFNLEVBQVU1TixFQUFnQixXQUU5QlQsRUFBT0QsUUFBVSxTQUFVK1EsR0FDekIsSUFBSXBQLEVBQWNpWixFQUFXN0osR0FDekJ4TyxFQUFpQjNCLEVBQXFCTSxFQUV0Q2UsR0FBZU4sSUFBZ0JBLEVBQVkyTSxJQUM3Qy9MLEVBQWVaLEVBQWEyTSxFQUFTLENBQ25Dbk4sY0FBYyxFQUNkb0QsSUFBSyxXQUFjLE9BQU9uRSxVLGVDZmhDLElBQUltQyxFQUFpQixVQUNqQkosRUFBTSxFQUFRLE1BR2RpQixFQUZrQixFQUFRLEtBRVYxQyxDQUFnQixlQUVwQ1QsRUFBT0QsUUFBVSxTQUFVTSxFQUFJZ3RCLEVBQUs1UixHQUM5QnBiLElBQU82QixFQUFJN0IsRUFBS29iLEVBQVNwYixFQUFLQSxFQUFHVSxVQUFXb0MsSUFDOUNiLEVBQWVqQyxFQUFJOEMsRUFBZSxDQUFFakMsY0FBYyxFQUFNQyxNQUFPa3NCLE0sZUNSbkUsSUFBSXpMLEVBQVMsRUFBUSxNQUNqQm5mLEVBQU0sRUFBUSxNQUVkNkYsRUFBT3NaLEVBQU8sUUFFbEI1aEIsRUFBT0QsUUFBVSxTQUFVcUIsR0FDekIsT0FBT2tILEVBQUtsSCxLQUFTa0gsRUFBS2xILEdBQU9xQixFQUFJckIsTSxlQ052QyxJQUFJYSxFQUFTLEVBQVEsTUFDakJnWixFQUFZLEVBQVEsTUFFcEJxUyxFQUFTLHFCQUNUM2xCLEVBQVExRixFQUFPcXJCLElBQVdyUyxFQUFVcVMsRUFBUSxJQUVoRHR0QixFQUFPRCxRQUFVNEgsRyxlQ05qQixJQUFJc1AsRUFBVSxFQUFRLE1BQ2xCdFAsRUFBUSxFQUFRLE9BRW5CM0gsRUFBT0QsUUFBVSxTQUFVcUIsRUFBS0QsR0FDL0IsT0FBT3dHLEVBQU12RyxLQUFTdUcsRUFBTXZHLFFBQWlCSixJQUFWRyxFQUFzQkEsRUFBUSxNQUNoRSxXQUFZLElBQUl1TCxLQUFLLENBQ3RCbU8sUUFBUyxRQUNUMFMsS0FBTXRXLEVBQVUsT0FBUyxTQUN6QnVXLFVBQVcsMEMsZUNSYixJQUFJcmUsRUFBVyxFQUFRLE1BQ25CUCxFQUFZLEVBQVEsTUFHcEJQLEVBRmtCLEVBQVEsS0FFaEI1TixDQUFnQixXQUk5QlQsRUFBT0QsUUFBVSxTQUFVc0ssRUFBR29qQixHQUM1QixJQUNJbnNCLEVBREFtRCxFQUFJMEssRUFBUzlFLEdBQUc3QixZQUVwQixZQUFheEgsSUFBTnlELEdBQWlEekQsT0FBN0JNLEVBQUk2TixFQUFTMUssR0FBRzRKLElBQXlCb2YsRUFBcUI3ZSxFQUFVdE4sSyxlQ1hyRyxJQUFJK0QsRUFBUSxFQUFRLE1BSXBCckYsRUFBT0QsUUFBVSxTQUFVdU8sR0FDekIsT0FBT2pKLEdBQU0sV0FDWCxJQUFJb1YsRUFBTyxHQUFHbk0sR0FBYSxLQUMzQixPQUFPbU0sSUFBU0EsRUFBS2tJLGVBQWlCbEksRUFBS08sTUFBTSxLQUFLdlosT0FBUyxPLGVDUG5FLElBQUk4RCxFQUFZLEVBQVEsTUFDcEJxUCxFQUF5QixFQUFRLE1BR2pDM0ksRUFBZSxTQUFVeWhCLEdBQzNCLE9BQU8sU0FBVXZoQixFQUFPd2hCLEdBQ3RCLElBR0l6YyxFQUFPMGMsRUFIUHRzQixFQUFJZixPQUFPcVUsRUFBdUJ6SSxJQUNsQzZTLEVBQVd6WixFQUFVb29CLEdBQ3JCdmMsRUFBTzlQLEVBQUVHLE9BRWIsT0FBSXVkLEVBQVcsR0FBS0EsR0FBWTVOLEVBQWFzYyxFQUFvQixRQUFLMXNCLEdBQ3RFa1EsRUFBUTVQLEVBQUV1c0IsV0FBVzdPLElBQ04sT0FBVTlOLEVBQVEsT0FBVThOLEVBQVcsSUFBTTVOLElBQ3REd2MsRUFBU3RzQixFQUFFdXNCLFdBQVc3TyxFQUFXLElBQU0sT0FBVTRPLEVBQVMsTUFDMURGLEVBQW9CcHNCLEVBQUVELE9BQU8yZCxHQUFZOU4sRUFDekN3YyxFQUFvQnBzQixFQUFFMEcsTUFBTWdYLEVBQVVBLEVBQVcsR0FBK0I0TyxFQUFTLE9BQWxDMWMsRUFBUSxPQUFVLElBQTBCLFFBSTdHbFIsRUFBT0QsUUFBVSxDQUdmK3RCLE9BQVE3aEIsR0FBYSxHQUdyQjVLLE9BQVE0SyxHQUFhLEssZUN4QnZCLElBQUl1TyxFQUFZLEVBQVEsTUFHeEJ4YSxFQUFPRCxRQUFVLG1EQUFtRDBhLEtBQUtELEksZUNIekUsSUFBSWhWLEVBQVcsRUFBUSxNQUNuQnVvQixFQUFTLEVBQVEsTUFDakJuWixFQUF5QixFQUFRLE1BRWpDb1osRUFBTzlqQixLQUFLOGpCLEtBR1ovaEIsRUFBZSxTQUFVZ2lCLEdBQzNCLE9BQU8sU0FBVTloQixFQUFPK2hCLEVBQVdDLEdBQ2pDLElBSUlDLEVBQVNDLEVBSlQvc0IsRUFBSWYsT0FBT3FVLEVBQXVCekksSUFDbENtaUIsRUFBZWh0QixFQUFFRyxPQUNqQjhzQixPQUF5QnZ0QixJQUFmbXRCLEVBQTJCLElBQU01dEIsT0FBTzR0QixHQUNsREssRUFBZWhwQixFQUFTMG9CLEdBRTVCLE9BQUlNLEdBQWdCRixHQUEyQixJQUFYQyxFQUFzQmp0QixHQUMxRDhzQixFQUFVSSxFQUFlRixHQUN6QkQsRUFBZU4sRUFBT3JwQixLQUFLNnBCLEVBQVNQLEVBQUtJLEVBQVVHLEVBQVE5c0IsVUFDMUNBLE9BQVMyc0IsSUFBU0MsRUFBZUEsRUFBYXJtQixNQUFNLEVBQUdvbUIsSUFDakVILEVBQVMzc0IsRUFBSStzQixFQUFlQSxFQUFlL3NCLEtBSXREdEIsRUFBT0QsUUFBVSxDQUdmK0gsTUFBT21FLEdBQWEsR0FHcEJ4QixJQUFLd0IsR0FBYSxLLHNCQzNCcEIsSUFBSXdpQixFQUFTLFdBU1RDLEVBQWdCLGVBQ2hCQyxFQUFrQix5QkFDbEJDLEVBQWlCLGtEQUVqQmhRLEVBQVExVSxLQUFLMFUsTUFDYmlRLEVBQXFCdHVCLE9BQU91dUIsYUFvQzVCQyxFQUFlLFNBQVVDLEdBRzNCLE9BQU9BLEVBQVEsR0FBSyxJQUFNQSxFQUFRLEtBT2hDQyxFQUFRLFNBQVVDLEVBQU9DLEVBQVdDLEdBQ3RDLElBQUlDLEVBQUksRUFHUixJQUZBSCxFQUFRRSxFQUFZeFEsRUFBTXNRLEVBekRqQixLQXlEaUNBLEdBQVMsRUFDbkRBLEdBQVN0USxFQUFNc1EsRUFBUUMsR0FDaEJELEVBQVFJLElBQTJCRCxHQS9EakMsR0FnRVBILEVBQVF0USxFQUFNc1EsRUFyREVLLElBdURsQixPQUFPM1EsRUFBTXlRLEVBQUksR0FBc0JILEdBQVNBLEVBL0R2QyxNQXVFUE0sRUFBUyxTQUFVMUMsR0FDckIsSUFZSTNrQixFQUFHc25CLEVBWkhDLEVBQVMsR0FNVEMsR0FISjdDLEVBeERlLFNBQVVoWSxHQUl6QixJQUhBLElBQUk0YSxFQUFTLEdBQ1RFLEVBQVUsRUFDVm51QixFQUFTcVQsRUFBT3JULE9BQ2JtdUIsRUFBVW51QixHQUFRLENBQ3ZCLElBQUlOLEVBQVEyVCxFQUFPK1ksV0FBVytCLEtBQzlCLEdBQUl6dUIsR0FBUyxPQUFVQSxHQUFTLE9BQVV5dUIsRUFBVW51QixFQUFRLENBRTFELElBQUlvdUIsRUFBUS9hLEVBQU8rWSxXQUFXK0IsS0FDTixRQUFYLE1BQVJDLEdBQ0hILEVBQU9oakIsT0FBZSxLQUFSdkwsSUFBa0IsS0FBZSxLQUFSMHVCLEdBQWlCLFFBSXhESCxFQUFPaGpCLEtBQUt2TCxHQUNaeXVCLFVBR0ZGLEVBQU9oakIsS0FBS3ZMLEdBR2hCLE9BQU91dUIsRUFtQ0NJLENBQVdoRCxJQUdLcnJCLE9BR3BCZ2UsRUE5RVMsSUErRVR5UCxFQUFRLEVBQ1JhLEVBakZZLEdBcUZoQixJQUFLNW5CLEVBQUksRUFBR0EsRUFBSTJrQixFQUFNcnJCLE9BQVEwRyxLQUM1QnNuQixFQUFlM0MsRUFBTTNrQixJQUNGLEtBQ2pCdW5CLEVBQU9oakIsS0FBS21pQixFQUFtQlksSUFJbkMsSUFBSU8sRUFBY04sRUFBT2p1QixPQUNyQnd1QixFQUFpQkQsRUFRckIsSUFMSUEsR0FDRk4sRUFBT2hqQixLQS9GSyxLQW1HUHVqQixFQUFpQk4sR0FBYSxDQUVuQyxJQUFJdFEsRUFBSW9QLEVBQ1IsSUFBS3RtQixFQUFJLEVBQUdBLEVBQUkya0IsRUFBTXJyQixPQUFRMEcsS0FDNUJzbkIsRUFBZTNDLEVBQU0za0IsS0FDRHNYLEdBQUtnUSxFQUFlcFEsSUFDdENBLEVBQUlvUSxHQUtSLElBQUlTLEVBQXdCRCxFQUFpQixFQUM3QyxHQUFJNVEsRUFBSUksRUFBSWIsR0FBTzZQLEVBQVNTLEdBQVNnQixHQUNuQyxNQUFNenBCLFdBQVdtb0IsR0FNbkIsSUFIQU0sSUFBVTdQLEVBQUlJLEdBQUt5USxFQUNuQnpRLEVBQUlKLEVBRUNsWCxFQUFJLEVBQUdBLEVBQUkya0IsRUFBTXJyQixPQUFRMEcsSUFBSyxDQUVqQyxJQURBc25CLEVBQWUzQyxFQUFNM2tCLElBQ0ZzWCxLQUFPeVAsRUFBUVQsRUFDaEMsTUFBTWhvQixXQUFXbW9CLEdBRW5CLEdBQUlhLEdBQWdCaFEsRUFBRyxDQUdyQixJQURBLElBQUkwUSxFQUFJakIsRUFDQ0csRUFySU4sSUFxSW9DQSxHQXJJcEMsR0FxSStDLENBQ2hELElBQUllLEVBQUlmLEdBQUtVLEVBcklaLEVBcUkyQlYsR0FBS1UsRUFwSWhDLE1Bb0lxRFYsRUFBSVUsRUFDMUQsR0FBSUksRUFBSUMsRUFBRyxNQUNYLElBQUlDLEVBQVVGLEVBQUlDLEVBQ2RFLEVBeklILEdBeUl1QkYsRUFDeEJWLEVBQU9oakIsS0FBS21pQixFQUFtQkUsRUFBYXFCLEVBQUlDLEVBQVVDLEtBQzFESCxFQUFJdlIsRUFBTXlSLEVBQVVDLEdBR3RCWixFQUFPaGpCLEtBQUttaUIsRUFBbUJFLEVBQWFvQixLQUM1Q0osRUFBT2QsRUFBTUMsRUFBT2dCLEVBQXVCRCxHQUFrQkQsR0FDN0RkLEVBQVEsSUFDTmUsS0FJSmYsSUFDQXpQLEVBRUosT0FBT2lRLEVBQU9uUixLQUFLLEtBR3JCdmUsRUFBT0QsUUFBVSxTQUFVK3NCLEdBQ3pCLElBRUkza0IsRUFBR29vQixFQUZIQyxFQUFVLEdBQ1ZDLEVBQVMzRCxFQUFNbkssY0FBYzFOLFFBQVEwWixFQUFpQixLQUFVM1QsTUFBTSxLQUUxRSxJQUFLN1MsRUFBSSxFQUFHQSxFQUFJc29CLEVBQU9odkIsT0FBUTBHLElBQzdCb29CLEVBQVFFLEVBQU90b0IsR0FDZnFvQixFQUFROWpCLEtBQUtnaUIsRUFBY2pVLEtBQUs4VixHQUFTLE9BQVNmLEVBQU9lLEdBQVNBLEdBRXBFLE9BQU9DLEVBQVFqUyxLQUFLLE8sNEJDckt0QixJQUFJaFosRUFBWSxFQUFRLE1BQ3BCcVAsRUFBeUIsRUFBUSxNQUlyQzVVLEVBQU9ELFFBQVUsR0FBR2d1QixRQUFVLFNBQWdCdm1CLEdBQzVDLElBQUlxVixFQUFNdGMsT0FBT3FVLEVBQXVCelUsT0FDcENxTCxFQUFTLEdBQ1RpVSxFQUFJbGEsRUFBVWlDLEdBQ2xCLEdBQUlpWSxFQUFJLEdBQUtBLEdBQUtpQixJQUFVLE1BQU1qYSxXQUFXLCtCQUM3QyxLQUFNZ1osRUFBSSxHQUFJQSxLQUFPLEtBQU81QyxHQUFPQSxHQUFjLEVBQUo0QyxJQUFPalUsR0FBVXFSLEdBQzlELE9BQU9yUixJLGVDWlQsSUFBSW5HLEVBQVEsRUFBUSxNQUNoQjhoQixFQUFjLEVBQVEsTUFNMUJubkIsRUFBT0QsUUFBVSxTQUFVdU8sR0FDekIsT0FBT2pKLEdBQU0sV0FDWCxRQUFTOGhCLEVBQVk3WSxNQU5mLGFBTXFDQSxNQUF5QjZZLEVBQVk3WSxHQUFhM00sT0FBUzJNLE8sZUNUMUcsSUFBSXNHLEVBQXlCLEVBQVEsTUFHakM4YixFQUFhLElBRkMsRUFBUSxNQUVXLElBQ2pDQyxFQUFRelQsT0FBTyxJQUFNd1QsRUFBYUEsRUFBYSxLQUMvQ0UsRUFBUTFULE9BQU93VCxFQUFhQSxFQUFhLE1BR3pDemtCLEVBQWUsU0FBVVUsR0FDM0IsT0FBTyxTQUFVUixHQUNmLElBQUkySSxFQUFTdlUsT0FBT3FVLEVBQXVCekksSUFHM0MsT0FGVyxFQUFQUSxJQUFVbUksRUFBU0EsRUFBT0csUUFBUTBiLEVBQU8sS0FDbEMsRUFBUGhrQixJQUFVbUksRUFBU0EsRUFBT0csUUFBUTJiLEVBQU8sS0FDdEM5YixJQUlYOVUsRUFBT0QsUUFBVSxDQUdmK0gsTUFBT21FLEVBQWEsR0FHcEJ4QixJQUFLd0IsRUFBYSxHQUdsQmliLEtBQU1qYixFQUFhLEssY0MxQnJCLElBaUJJNGtCLEVBQU9DLEVBQVNDLEVBakJoQjl1QixFQUFTLEVBQVEsTUFDakJvRCxFQUFRLEVBQVEsTUFDaEI2RixFQUFPLEVBQVEsTUFDZnVkLEVBQU8sRUFBUSxLQUNmalEsRUFBZ0IsRUFBUSxLQUN4QnNNLEVBQVMsRUFBUSxNQUNqQkUsRUFBVSxFQUFRLE1BRWxCZ00sRUFBVy91QixFQUFPK3VCLFNBQ2xCL3FCLEVBQU1oRSxFQUFPZ3ZCLGFBQ2J0ZixFQUFRMVAsRUFBT2l2QixlQUNmeFcsRUFBVXpZLEVBQU95WSxRQUNqQnlXLEVBQWlCbHZCLEVBQU9rdkIsZUFDeEJDLEVBQVdudkIsRUFBT212QixTQUNsQnhCLEVBQVUsRUFDVnlCLEVBQVEsR0FJUkMsRUFBTSxTQUFVOWUsR0FFbEIsR0FBSTZlLEVBQU12UixlQUFldE4sR0FBSyxDQUM1QixJQUFJbkQsRUFBS2dpQixFQUFNN2UsVUFDUjZlLEVBQU03ZSxHQUNibkQsTUFJQWtpQixFQUFTLFNBQVUvZSxHQUNyQixPQUFPLFdBQ0w4ZSxFQUFJOWUsS0FJSmdmLEVBQVcsU0FBVUMsR0FDdkJILEVBQUlHLEVBQU03ZixPQUdSOGYsRUFBTyxTQUFVbGYsR0FFbkJ2USxFQUFPMHZCLFlBQVluZixFQUFLLEdBQUl3ZSxFQUFTWSxTQUFXLEtBQU9aLEVBQVN0SyxPQUk3RHpnQixHQUFRMEwsSUFDWDFMLEVBQU0sU0FBc0JvSixHQUcxQixJQUZBLElBQUlnUCxFQUFPLEdBQ1BsVyxFQUFJLEVBQ0RnQixVQUFVMUgsT0FBUzBHLEdBQUdrVyxFQUFLM1IsS0FBS3ZELFVBQVVoQixNQU1qRCxPQUxBa3BCLElBQVF6QixHQUFXLFlBRUgsbUJBQU52Z0IsRUFBbUJBLEVBQUtoTCxTQUFTZ0wsSUFBS2xCLFdBQU1uTixFQUFXcWQsSUFFakV3UyxFQUFNakIsR0FDQ0EsR0FFVGplLEVBQVEsU0FBd0JhLFVBQ3ZCNmUsRUFBTTdlLElBR1h3UyxFQUNGNkwsRUFBUSxTQUFVcmUsR0FDaEJrSSxFQUFRaUwsU0FBUzRMLEVBQU8vZSxLQUdqQjRlLEdBQVlBLEVBQVNTLElBQzlCaEIsRUFBUSxTQUFVcmUsR0FDaEI0ZSxFQUFTUyxJQUFJTixFQUFPL2UsS0FJYjJlLElBQW1Cck0sR0FFNUJpTSxHQURBRCxFQUFVLElBQUlLLEdBQ0NXLE1BQ2ZoQixFQUFRaUIsTUFBTUMsVUFBWVIsRUFDMUJYLEVBQVEzbEIsRUFBSzZsQixFQUFLWSxZQUFhWixFQUFNLElBSXJDOXVCLEVBQU9nd0Isa0JBQ2UsbUJBQWZOLGNBQ04xdkIsRUFBT2l3QixlQUNSbEIsR0FBa0MsVUFBdEJBLEVBQVNZLFdBQ3BCdnNCLEVBQU1xc0IsSUFFUGIsRUFBUWEsRUFDUnp2QixFQUFPZ3dCLGlCQUFpQixVQUFXVCxHQUFVLElBRzdDWCxFQXpFcUIsdUJBd0VVclksRUFBYyxVQUNyQyxTQUFVaEcsR0FDaEJpVyxFQUFLa0IsWUFBWW5SLEVBQWMsV0FBNkIsbUJBQUksV0FDOURpUSxFQUFLMEosWUFBWWh5QixNQUNqQm14QixFQUFJOWUsS0FLQSxTQUFVQSxHQUNoQjRmLFdBQVdiLEVBQU8vZSxHQUFLLEtBSzdCeFMsRUFBT0QsUUFBVSxDQUNma0csSUFBS0EsRUFDTDBMLE1BQU9BLEksY0N6R1QsSUFBSXhQLEVBQVUsRUFBUSxNQUl0Qm5DLEVBQU9ELFFBQVUsU0FBVW9CLEdBQ3pCLEdBQW9CLGlCQUFUQSxHQUF1QyxVQUFsQmdCLEVBQVFoQixHQUN0QyxNQUFNYixVQUFVLHdCQUVsQixPQUFRYSxJLGVDUlYsSUFBSW9FLEVBQVksRUFBUSxNQUVwQjhzQixFQUFNbm9CLEtBQUttb0IsSUFDWHBvQixFQUFNQyxLQUFLRCxJQUtmakssRUFBT0QsUUFBVSxTQUFVd0IsRUFBT0UsR0FDaEMsSUFBSTZ3QixFQUFVL3NCLEVBQVVoRSxHQUN4QixPQUFPK3dCLEVBQVUsRUFBSUQsRUFBSUMsRUFBVTd3QixFQUFRLEdBQUt3SSxFQUFJcW9CLEVBQVM3d0IsSyxlQ1YvRCxJQUFJOEQsRUFBWSxFQUFRLE1BQ3BCQyxFQUFXLEVBQVEsTUFJdkJ4RixFQUFPRCxRQUFVLFNBQVVNLEdBQ3pCLFFBQVdXLElBQVBYLEVBQWtCLE9BQU8sRUFDN0IsSUFBSTBHLEVBQVN4QixFQUFVbEYsR0FDbkJvQixFQUFTK0QsRUFBU3VCLEdBQ3RCLEdBQUlBLElBQVd0RixFQUFRLE1BQU1nRixXQUFXLHlCQUN4QyxPQUFPaEYsSSxlQ1RULElBQUkrSyxFQUFnQixFQUFRLE1BQ3hCb0ksRUFBeUIsRUFBUSxNQUVyQzVVLEVBQU9ELFFBQVUsU0FBVU0sR0FDekIsT0FBT21NLEVBQWNvSSxFQUF1QnZVLE0sU0NMOUMsSUFBSTJ0QixFQUFPOWpCLEtBQUs4akIsS0FDWnBQLEVBQVExVSxLQUFLMFUsTUFJakI1ZSxFQUFPRCxRQUFVLFNBQVUyTyxHQUN6QixPQUFPNmpCLE1BQU03akIsR0FBWUEsR0FBWSxHQUFLQSxFQUFXLEVBQUlrUSxFQUFRb1AsR0FBTXRmLEssZUNOekUsSUFBSW5KLEVBQVksRUFBUSxNQUVwQjBFLEVBQU1DLEtBQUtELElBSWZqSyxFQUFPRCxRQUFVLFNBQVUyTyxHQUN6QixPQUFPQSxFQUFXLEVBQUl6RSxFQUFJMUUsRUFBVW1KLEdBQVcsa0JBQW9CLEksZUNQckUsSUFBSWtHLEVBQXlCLEVBQVEsTUFJckM1VSxFQUFPRCxRQUFVLFNBQVUyTyxHQUN6QixPQUFPekwsT0FBTzJSLEVBQXVCbEcsTSxlQ0x2QyxJQUFJOGpCLEVBQW9CLEVBQVEsTUFFaEN4eUIsRUFBT0QsUUFBVSxTQUFVTSxFQUFJb3lCLEdBQzdCLElBQUl6cEIsRUFBU3dwQixFQUFrQm55QixHQUMvQixHQUFJMkksRUFBU3lwQixFQUFPLE1BQU1oc0IsV0FBVyxnQkFDckMsT0FBT3VDLEksZUNMVCxJQUFJekQsRUFBWSxFQUFRLE1BRXhCdkYsRUFBT0QsUUFBVSxTQUFVTSxHQUN6QixJQUFJbUwsRUFBU2pHLEVBQVVsRixHQUN2QixHQUFJbUwsRUFBUyxFQUFHLE1BQU0vRSxXQUFXLHFDQUNqQyxPQUFPK0UsSSxlQ0xULElBQUloTCxFQUFXLEVBQVEsS0FNdkJSLEVBQU9ELFFBQVUsU0FBVStzQixFQUFPNEYsR0FDaEMsSUFBS2x5QixFQUFTc3NCLEdBQVEsT0FBT0EsRUFDN0IsSUFBSXpkLEVBQUlzakIsRUFDUixHQUFJRCxHQUFvRCxtQkFBeEJyakIsRUFBS3lkLEVBQU0vYyxZQUE0QnZQLEVBQVNteUIsRUFBTXRqQixFQUFHM0ssS0FBS29vQixJQUFTLE9BQU82RixFQUM5RyxHQUFtQyxtQkFBdkJ0akIsRUFBS3lkLEVBQU04RixXQUEyQnB5QixFQUFTbXlCLEVBQU10akIsRUFBRzNLLEtBQUtvb0IsSUFBUyxPQUFPNkYsRUFDekYsSUFBS0QsR0FBb0QsbUJBQXhCcmpCLEVBQUt5ZCxFQUFNL2MsWUFBNEJ2UCxFQUFTbXlCLEVBQU10akIsRUFBRzNLLEtBQUtvb0IsSUFBUyxPQUFPNkYsRUFDL0csTUFBTXJ5QixVQUFVLDZDLGVDWmxCLElBR0ltYSxFQUFPLEdBRVhBLEVBTHNCLEVBQVEsS0FFVmhhLENBQWdCLGdCQUdkLElBRXRCVCxFQUFPRCxRQUEyQixlQUFqQlEsT0FBT2thLEksNEJDTnhCLElBQUkxSCxFQUFJLEVBQVEsTUFDWjlRLEVBQVMsRUFBUSxNQUNqQkQsRUFBYyxFQUFRLE1BQ3RCNndCLEVBQThDLEVBQVEsTUFDdERDLEVBQXNCLEVBQVEsS0FDOUJDLEVBQW9CLEVBQVEsTUFDNUJ6dEIsRUFBYSxFQUFRLE1BQ3JCNlAsRUFBMkIsRUFBUSxNQUNuQy9TLEVBQThCLEVBQVEsTUFDdENvRCxFQUFXLEVBQVEsTUFDbkJDLEVBQVUsRUFBUSxNQUNsQnV0QixFQUFXLEVBQVEsTUFDbkJ0ZCxFQUFjLEVBQVEsTUFDdEJ4VCxFQUFNLEVBQVEsTUFDZEMsRUFBVSxFQUFRLEtBQ2xCM0IsRUFBVyxFQUFRLEtBQ25CRSxFQUFTLEVBQVEsSUFDakI4QixFQUFpQixFQUFRLE1BQ3pCbUQsRUFBc0IsVUFDdEJzdEIsRUFBaUIsRUFBUSxNQUN6QmpvQixFQUFVLGdCQUNWd0YsRUFBYSxFQUFRLE1BQ3JCN1AsRUFBdUIsRUFBUSxNQUMvQnlULEVBQWlDLEVBQVEsTUFDekN0TyxFQUFzQixFQUFRLE1BQzlCcU4sRUFBb0IsRUFBUSxNQUU1QnBOLEVBQW1CRCxFQUFvQnhCLElBQ3ZDMEIsRUFBbUJGLEVBQW9CRyxJQUN2Q2drQixFQUF1QnRwQixFQUFxQk0sRUFDNUNtcEIsRUFBaUNoVyxFQUErQm5ULEVBQ2hFaXlCLEVBQVFocEIsS0FBS2dwQixNQUNienNCLEVBQWF4RSxFQUFPd0UsV0FDcEI3RSxFQUFjbXhCLEVBQWtCbnhCLFlBQ2hDQyxFQUFXa3hCLEVBQWtCbHhCLFNBQzdCd0IsRUFBNEJ5dkIsRUFBb0J6dkIsMEJBQ2hERCxFQUFrQjB2QixFQUFvQjF2QixnQkFDdENOLEVBQWFnd0IsRUFBb0Jod0IsV0FDakNDLEVBQXNCK3ZCLEVBQW9CL3ZCLG9CQUMxQ3lCLEVBQXlCc3VCLEVBQW9CdHVCLHVCQUM3Q0wsRUFBZTJ1QixFQUFvQjN1QixhQUNuQ2d2QixFQUFvQixvQkFDcEJDLEVBQWUsZUFFZkMsRUFBVyxTQUFVNXVCLEVBQUc2WixHQUkxQixJQUhBLElBQUkvYyxFQUFRLEVBQ1JFLEVBQVM2YyxFQUFLN2MsT0FDZCtKLEVBQVMsSUFBS2hILEVBQXVCQyxHQUE1QixDQUFnQ2hELEdBQ3RDQSxFQUFTRixHQUFPaUssRUFBT2pLLEdBQVMrYyxFQUFLL2MsS0FDNUMsT0FBT2lLLEdBR0xsRSxFQUFZLFNBQVVqSCxFQUFJZSxHQUM1QjZvQixFQUFxQjVwQixFQUFJZSxFQUFLLENBQUVrRCxJQUFLLFdBQ25DLE9BQU95QixFQUFpQjVGLE1BQU1pQixPQUk5Qmt5QixFQUFnQixTQUFVanpCLEdBQzVCLElBQUkrRCxFQUNKLE9BQU8vRCxhQUFjdUIsR0FBd0MsZ0JBQXhCd0MsRUFBUWpDLEVBQVE5QixLQUFrQyxxQkFBVCtELEdBRzVFbXZCLEVBQW9CLFNBQVVucEIsRUFBUWhKLEdBQ3hDLE9BQU8rQyxFQUFhaUcsSUFDRCxpQkFBUGhKLEdBQ1BBLEtBQU9nSixHQUNQN0osUUFBUWEsSUFBUWIsT0FBT2EsSUFHMUJveUIsRUFBa0MsU0FBa0NwcEIsRUFBUWhKLEdBQzlFLE9BQU9teUIsRUFBa0JucEIsRUFBUWhKLEVBQU1zVSxFQUFZdFUsR0FBSyxJQUNwRCtULEVBQXlCLEVBQUcvSyxFQUFPaEosSUFDbkNncEIsRUFBK0JoZ0IsRUFBUWhKLElBR3pDcXlCLEVBQXdCLFNBQXdCcnBCLEVBQVFoSixFQUFLa2EsR0FDL0QsUUFBSWlZLEVBQWtCbnBCLEVBQVFoSixFQUFNc1UsRUFBWXRVLEdBQUssS0FDaERaLEVBQVM4YSxJQUNUcFosRUFBSW9aLEVBQVksV0FDZnBaLEVBQUlvWixFQUFZLFFBQ2hCcFosRUFBSW9aLEVBQVksUUFFaEJBLEVBQVdwYSxjQUNWZ0IsRUFBSW9aLEVBQVksY0FBZUEsRUFBVzdGLFVBQzFDdlQsRUFBSW9aLEVBQVksZ0JBQWlCQSxFQUFXOUYsV0FJMUN5VSxFQUFxQjdmLEVBQVFoSixFQUFLa2EsSUFGekNsUixFQUFPaEosR0FBT2thLEVBQVduYSxNQUNsQmlKLElBSVBwSSxHQUNHcUIsSUFDSCtRLEVBQStCblQsRUFBSXV5QixFQUNuQzd5QixFQUFxQk0sRUFBSXd5QixFQUN6Qm5zQixFQUFVdkUsRUFBcUIsVUFDL0J1RSxFQUFVdkUsRUFBcUIsY0FDL0J1RSxFQUFVdkUsRUFBcUIsY0FDL0J1RSxFQUFVdkUsRUFBcUIsV0FHakNnUSxFQUFFLENBQUUzSSxPQUFRLFNBQVVzUixNQUFNLEVBQU0xVyxRQUFTM0IsR0FBNkIsQ0FDdEVpUix5QkFBMEJrZixFQUMxQmx4QixlQUFnQm14QixJQUdsQnp6QixFQUFPRCxRQUFVLFNBQVU0TSxFQUFNa0UsRUFBUzZpQixHQUN4QyxJQUFJakIsRUFBUTlsQixFQUFLaU8sTUFBTSxRQUFRLEdBQUssRUFDaEM5SixFQUFtQm5FLEdBQVErbUIsRUFBVSxVQUFZLElBQU0sUUFDdkRDLEVBQVMsTUFBUWhuQixFQUNqQmluQixFQUFTLE1BQVFqbkIsRUFDakJrbkIsRUFBOEI1eEIsRUFBTzZPLEdBQ3JDbE0sRUFBd0JpdkIsRUFDeEJDLEVBQWlDbHZCLEdBQXlCQSxFQUFzQjdELFVBQ2hGeVMsRUFBVyxHQWFYdWdCLEVBQWEsU0FBVTVtQixFQUFNNUwsR0FDL0Iwb0IsRUFBcUI5YyxFQUFNNUwsRUFBTyxDQUNoQytDLElBQUssV0FDSCxPQWRPLFNBQVU2SSxFQUFNNUwsR0FDM0IsSUFBSXFRLEVBQU83TCxFQUFpQm9ILEdBQzVCLE9BQU95RSxFQUFLckssS0FBS29zQixHQUFRcHlCLEVBQVFreEIsRUFBUTdnQixFQUFLN0osWUFBWSxHQVkvQ2lzQixDQUFPN3pCLEtBQU1vQixJQUV0QjBFLElBQUssU0FBVTlFLEdBQ2IsT0FaTyxTQUFVZ00sRUFBTTVMLEVBQU9KLEdBQ2xDLElBQUl5USxFQUFPN0wsRUFBaUJvSCxHQUN4QnVtQixJQUFTdnlCLEdBQVNBLEVBQVEreEIsRUFBTS94QixJQUFVLEVBQUksRUFBSUEsRUFBUSxJQUFPLElBQWUsSUFBUkEsR0FDNUV5USxFQUFLckssS0FBS3FzQixHQUFRcnlCLEVBQVFreEIsRUFBUTdnQixFQUFLN0osV0FBWTVHLEdBQU8sR0FTL0MrcEIsQ0FBTy9xQixLQUFNb0IsRUFBT0osSUFFN0JxVSxZQUFZLEtBSVhuUyxFQXdDTXd2QixJQUNUanVCLEVBQXdCaU0sR0FBUSxTQUFVcUQsRUFBT3RDLEVBQU1xaUIsRUFBa0JDLEdBRXZFLE9BREE1dUIsRUFBVzRPLEVBQU90UCxFQUF1QmtNLEdBQ2xDcUMsRUFDQTNTLEVBQVNvUixHQUNWMGhCLEVBQWMxaEIsUUFBMEI1USxJQUFaa3pCLEVBQzVCLElBQUlMLEVBQTRCamlCLEVBQU1vaEIsRUFBU2lCLEVBQWtCeEIsR0FBUXlCLFFBQ3BEbHpCLElBQXJCaXpCLEVBQ0UsSUFBSUosRUFBNEJqaUIsRUFBTW9oQixFQUFTaUIsRUFBa0J4QixJQUNqRSxJQUFJb0IsRUFBNEJqaUIsR0FDbEN6TixFQUFheU4sR0FBY3loQixFQUFTenVCLEVBQXVCZ04sR0FDeERxaEIsRUFBZXZ1QixLQUFLRSxFQUF1QmdOLEdBUHRCLElBQUlpaUIsRUFBNEJwdUIsRUFBUW1NLElBUWpFc0MsRUFBT3RQLE1BR1ZwQyxHQUFnQkEsRUFBZW9DLEVBQXVCOUIsR0FDMURrSSxFQUFRckYsRUFBb0JrdUIsSUFBOEIsU0FBVXp5QixHQUM1REEsS0FBT3dELEdBQ1h4QyxFQUE0QndDLEVBQXVCeEQsRUFBS3l5QixFQUE0Qnp5QixPQUd4RndELEVBQXNCN0QsVUFBWSt5QixJQTVEbENsdkIsRUFBd0JpTSxHQUFRLFNBQVUxRCxFQUFNeUUsRUFBTTVJLEVBQVFrckIsR0FDNUQ1dUIsRUFBVzZILEVBQU12SSxFQUF1QmtNLEdBQ3hDLElBRUkzSixFQUFRUyxFQUFZbkcsRUFGcEJGLEVBQVEsRUFDUndHLEVBQWEsRUFFakIsR0FBS3ZILEVBQVNvUixHQUlQLEtBQUkwaEIsRUFBYzFoQixHQWFsQixPQUFJek4sRUFBYXlOLEdBQ2Z5aEIsRUFBU3p1QixFQUF1QmdOLEdBRWhDcWhCLEVBQWV2dUIsS0FBS0UsRUFBdUJnTixHQWZsRHpLLEVBQVN5SyxFQUNUN0osRUFBYWlyQixFQUFTaHFCLEVBQVF5cEIsR0FDOUIsSUFBSTBCLEVBQU92aUIsRUFBS2hLLFdBQ2hCLFFBQWdCNUcsSUFBWmt6QixFQUF1QixDQUN6QixHQUFJQyxFQUFPMUIsRUFBTyxNQUFNaHNCLEVBQVcyc0IsR0FFbkMsSUFEQXhyQixFQUFhdXNCLEVBQU9wc0IsR0FDSCxFQUFHLE1BQU10QixFQUFXMnNCLFFBR3JDLElBREF4ckIsRUFBYXBDLEVBQVMwdUIsR0FBV3pCLEdBQ2hCMXFCLEVBQWFvc0IsRUFBTSxNQUFNMXRCLEVBQVcyc0IsR0FFdkQzeEIsRUFBU21HLEVBQWE2cUIsT0FmdEJoeEIsRUFBU2dFLEVBQVFtTSxHQUVqQnpLLEVBQVMsSUFBSXZGLEVBRGJnRyxFQUFhbkcsRUFBU2d4QixHQTJCeEIsSUFQQXpzQixFQUFpQm1ILEVBQU0sQ0FDckJoRyxPQUFRQSxFQUNSWSxXQUFZQSxFQUNaSCxXQUFZQSxFQUNabkcsT0FBUUEsRUFDUjhGLEtBQU0sSUFBSTFGLEVBQVNzRixLQUVkNUYsRUFBUUUsR0FBUXN5QixFQUFXNW1CLEVBQU01TCxRQUd0Q2lCLEdBQWdCQSxFQUFlb0MsRUFBdUI5QixHQUMxRGd4QixFQUFpQ2x2QixFQUFzQjdELFVBQVlMLEVBQU9xQyxJQXlCeEUrd0IsRUFBK0J0ckIsY0FBZ0I1RCxHQUNqRHhDLEVBQTRCMHhCLEVBQWdDLGNBQWVsdkIsR0FHekV4QixHQUNGaEIsRUFBNEIweEIsRUFBZ0Mxd0IsRUFBaUIwTixHQUcvRTBDLEVBQVMxQyxHQUFvQmxNLEVBRTdCbU8sRUFBRSxDQUNBOVEsUUFBUSxFQUFNK0MsT0FBUUosR0FBeUJpdkIsRUFBNkJqWSxNQUFPdlksR0FDbEZtUSxHQUVHMmYsS0FBcUJ2dUIsR0FDekJ4QyxFQUE0QndDLEVBQXVCdXVCLEVBQW1CVixHQUdsRVUsS0FBcUJXLEdBQ3pCMXhCLEVBQTRCMHhCLEVBQWdDWCxFQUFtQlYsR0FHakZqaUIsRUFBV00sS0FFUjlRLEVBQU9ELFFBQVUsYyxlQ3BPeEIsSUFBSWtDLEVBQVMsRUFBUSxNQUNqQm9ELEVBQVEsRUFBUSxNQUNoQjZOLEVBQThCLEVBQVEsTUFDdEM3UCxFQUE0QixpQ0FFNUJ6QixFQUFjSyxFQUFPTCxZQUNyQmMsRUFBWVQsRUFBT1MsVUFFdkIxQyxFQUFPRCxTQUFXc0QsSUFBOEJnQyxHQUFNLFdBQ3BEM0MsRUFBVSxRQUNMMkMsR0FBTSxXQUNYLElBQUkzQyxHQUFXLFFBQ1Z3USxHQUE0QixTQUFVbEMsR0FDM0MsSUFBSXRPLEVBQ0osSUFBSUEsRUFBVSxNQUNkLElBQUlBLEVBQVUsS0FDZCxJQUFJQSxFQUFVc08sTUFDYixJQUFTM0wsR0FBTSxXQUVoQixPQUFrRSxJQUEzRCxJQUFJM0MsRUFBVSxJQUFJZCxFQUFZLEdBQUksT0FBR1osR0FBV1MsVyxlQ3BCekQsSUFBSStDLEVBQXlCLDhCQUN6QjR2QixFQUFxQixFQUFRLE1BRWpDcDBCLEVBQU9ELFFBQVUsU0FBVTZULEVBQVUwSyxHQUtuQyxJQUpBLElBQUk3WixFQUFJMnZCLEVBQW1CeGdCLEVBQVVBLEVBQVNwTCxhQUMxQ2pILEVBQVEsRUFDUkUsRUFBUzZjLEVBQUs3YyxPQUNkK0osRUFBUyxJQUFLaEgsRUFBdUJDLEdBQTVCLENBQWdDaEQsR0FDdENBLEVBQVNGLEdBQU9pSyxFQUFPakssR0FBUytjLEVBQUsvYyxLQUM1QyxPQUFPaUssSSxlQ1RULElBQUl6QixFQUFXLEVBQVEsTUFDbkJ2RSxFQUFXLEVBQVEsTUFDbkI4RixFQUFvQixFQUFRLE1BQzVCRixFQUF3QixFQUFRLE1BQ2hDRixFQUFPLEVBQVEsTUFDZjFHLEVBQXlCLDhCQUU3QnhFLEVBQU9ELFFBQVUsU0FBY3NVLEdBQzdCLElBS0lsTSxFQUFHMUcsRUFBUStKLEVBQVFDLEVBQU1DLEVBQVVDLEVBTG5DdEIsRUFBSU4sRUFBU3NLLEdBQ2IxSixFQUFrQnhCLFVBQVUxSCxPQUM1Qm1LLEVBQVFqQixFQUFrQixFQUFJeEIsVUFBVSxRQUFLbkksRUFDN0M2SyxPQUFvQjdLLElBQVY0SyxFQUNWRSxFQUFpQlIsRUFBa0JqQixHQUV2QyxHQUFzQnJKLE1BQWxCOEssSUFBZ0NWLEVBQXNCVSxHQUl4RCxJQUZBSCxHQURBRCxFQUFXSSxFQUFlcEgsS0FBSzJGLElBQ2ZzQixLQUNoQnRCLEVBQUksS0FDS29CLEVBQU9FLEVBQUtqSCxLQUFLZ0gsSUFBV0ssTUFDbkMxQixFQUFFcUMsS0FBS2pCLEVBQUt0SyxPQVFoQixJQUxJMEssR0FBV2xCLEVBQWtCLElBQy9CaUIsRUFBUVYsRUFBS1UsRUFBT3pDLFVBQVUsR0FBSSxJQUVwQzFILEVBQVMrRCxFQUFTNkUsRUFBRTVJLFFBQ3BCK0osRUFBUyxJQUFLaEgsRUFBdUJyRSxNQUE1QixDQUFtQ3NCLEdBQ3ZDMEcsRUFBSSxFQUFHMUcsRUFBUzBHLEVBQUdBLElBQ3RCcUQsRUFBT3JELEdBQUswRCxFQUFVRCxFQUFNdkIsRUFBRWxDLEdBQUlBLEdBQUtrQyxFQUFFbEMsR0FFM0MsT0FBT3FELEksU0M5QlQsSUFBSWdILEVBQUssRUFDTDZoQixFQUFVbnFCLEtBQUs2Z0IsU0FFbkIvcUIsRUFBT0QsUUFBVSxTQUFVcUIsR0FDekIsTUFBTyxVQUFZYixZQUFlUyxJQUFSSSxFQUFvQixHQUFLQSxHQUFPLFFBQVVvUixFQUFLNmhCLEdBQVN0a0IsU0FBUyxNLGVDSjdGLElBQUl1a0IsRUFBZ0IsRUFBUSxLQUU1QnQwQixFQUFPRCxRQUFVdTBCLElBRVhqYyxPQUFPdUQsTUFDa0IsaUJBQW5CdkQsT0FBTzNNLFUsZUNMbkIsSUFBSWpMLEVBQWtCLEVBQVEsTUFFOUJWLEVBQVFrQixFQUFJUixHLGVDRlosSUFBSXdCLEVBQVMsRUFBUSxNQUNqQjJmLEVBQVMsRUFBUSxNQUNqQjFmLEVBQU0sRUFBUSxNQUNkTyxFQUFNLEVBQVEsTUFDZDZ4QixFQUFnQixFQUFRLEtBQ3hCQyxFQUFvQixFQUFRLE1BRTVCQyxFQUF3QjVTLEVBQU8sT0FDL0J2SixFQUFTcFcsRUFBT29XLE9BQ2hCb2MsRUFBd0JGLEVBQW9CbGMsRUFBU0EsR0FBVUEsRUFBT3FjLGVBQWlCanlCLEVBRTNGekMsRUFBT0QsUUFBVSxTQUFVNEIsR0FPdkIsT0FOR08sRUFBSXN5QixFQUF1Qjd5QixLQUFXMnlCLEdBQXVELGlCQUEvQkUsRUFBc0I3eUIsTUFDbkYyeUIsR0FBaUJweUIsRUFBSW1XLEVBQVExVyxHQUMvQjZ5QixFQUFzQjd5QixHQUFRMFcsRUFBTzFXLEdBRXJDNnlCLEVBQXNCN3lCLEdBQVE4eUIsRUFBc0IsVUFBWTl5QixJQUUzRDZ5QixFQUFzQjd5QixLLFNDakJqQzNCLEVBQU9ELFFBQVUsaUQsNEJDQWpCLElBQUlnVCxFQUFJLEVBQVEsTUFDWnhRLEVBQWlCLEVBQVEsTUFDekJDLEVBQWlCLEVBQVEsTUFDekI5QixFQUFTLEVBQVEsSUFDakIwQixFQUE4QixFQUFRLE1BQ3RDK1MsRUFBMkIsRUFBUSxNQUNuQzdFLEVBQVUsRUFBUSxLQUVsQnFrQixFQUFrQixTQUF3QkMsRUFBUUMsR0FDcEQsSUFBSTFuQixFQUFPaE4sS0FDWCxLQUFNZ04sYUFBZ0J3bkIsR0FBa0IsT0FBTyxJQUFJQSxFQUFnQkMsRUFBUUMsR0FDdkVyeUIsSUFFRjJLLEVBQU8zSyxFQUFlLElBQUlzeUIsV0FBTTl6QixHQUFZdUIsRUFBZTRLLFVBRTdDbk0sSUFBWjZ6QixHQUF1Qnp5QixFQUE0QitLLEVBQU0sVUFBVzVNLE9BQU9zMEIsSUFDL0UsSUFBSUUsRUFBYyxHQUdsQixPQUZBemtCLEVBQVFza0IsRUFBUUcsRUFBWXJvQixLQUFNLENBQUVTLEtBQU00bkIsSUFDMUMzeUIsRUFBNEIrSyxFQUFNLFNBQVU0bkIsR0FDckM1bkIsR0FHVHduQixFQUFnQjV6QixVQUFZTCxFQUFPbzBCLE1BQU0vekIsVUFBVyxDQUNsRHlILFlBQWEyTSxFQUF5QixFQUFHd2YsR0FDekNFLFFBQVMxZixFQUF5QixFQUFHLElBQ3JDeFQsS0FBTXdULEVBQXlCLEVBQUcsb0JBS3BDcEMsRUFBRSxDQUFFOVEsUUFBUSxHQUFRLENBQ2xCK3lCLGVBQWdCTCxLLDRCQy9CbEIsSUFBSTVoQixFQUFJLEVBQVEsTUFDWjlRLEVBQVMsRUFBUSxNQUNqQmd6QixFQUFvQixFQUFRLE1BQzVCemtCLEVBQWEsRUFBUSxNQUdyQjVPLEVBQWNxekIsRUFBOEIsWUFLaERsaUIsRUFBRSxDQUFFOVEsUUFBUSxFQUFNK0MsT0FKTS9DLEVBQW1CLGNBSUtMLEdBQWUsQ0FDN0RBLFlBQWFBLElBR2Y0TyxFQVZtQixnQixlQ05uQixJQUFJdUMsRUFBSSxFQUFRLE1BQ1orZixFQUFzQixFQUFRLEtBTWxDL2YsRUFBRSxDQUFFM0ksT0FBUSxjQUFlc1IsTUFBTSxFQUFNMVcsUUFKUDh0QixFQUFvQnp2QiwyQkFJeUIsQ0FDM0U4QixPQUFRMnRCLEVBQW9CM3RCLFUsNEJDUDlCLElBQUk0TixFQUFJLEVBQVEsTUFDWjFOLEVBQVEsRUFBUSxNQUNoQjB0QixFQUFvQixFQUFRLE1BQzVCNWpCLEVBQVcsRUFBUSxNQUNuQm5GLEVBQWtCLEVBQVEsTUFDMUJ4RSxFQUFXLEVBQVEsTUFDbkI0dUIsRUFBcUIsRUFBUSxNQUU3Qnh5QixFQUFjbXhCLEVBQWtCbnhCLFlBQ2hDQyxFQUFXa3hCLEVBQWtCbHhCLFNBQzdCcXpCLEVBQXlCdHpCLEVBQVliLFVBQVVpSCxNQVFuRCtLLEVBQUUsQ0FBRTNJLE9BQVEsY0FBZStOLE9BQU8sRUFBTXJQLFFBQVEsRUFBTTlELE9BTmhDSyxHQUFNLFdBQzFCLE9BQVEsSUFBSXpELEVBQVksR0FBR29HLE1BQU0sT0FBR2hILEdBQVc0RyxlQUtnQyxDQUMvRUksTUFBTyxTQUFlRixFQUFPMkMsR0FDM0IsUUFBK0J6SixJQUEzQmswQixRQUFnRGwwQixJQUFSeUosRUFDMUMsT0FBT3lxQixFQUF1Qnh3QixLQUFLeUssRUFBU2hQLE1BQU8ySCxHQVNyRCxJQVBBLElBQUlyRyxFQUFTME4sRUFBU2hQLE1BQU15SCxXQUN4QnNKLEVBQVFsSCxFQUFnQmxDLEVBQU9yRyxHQUMvQjB6QixFQUFNbnJCLE9BQXdCaEosSUFBUnlKLEVBQW9CaEosRUFBU2dKLEVBQUtoSixHQUN4RCtKLEVBQVMsSUFBSzRvQixFQUFtQmowQixLQUFNeUIsR0FBOUIsQ0FBNEM0RCxFQUFTMnZCLEVBQU1qa0IsSUFDcEVra0IsRUFBYSxJQUFJdnpCLEVBQVMxQixNQUMxQmsxQixFQUFhLElBQUl4ekIsRUFBUzJKLEdBQzFCakssRUFBUSxFQUNMMlAsRUFBUWlrQixHQUNiRSxFQUFXeHNCLFNBQVN0SCxJQUFTNnpCLEVBQVduc0IsU0FBU2lJLE1BQ2pELE9BQU8xRixNLDRCQ2hDYixJQUFJdUgsRUFBSSxFQUFRLE1BQ1oxTixFQUFRLEVBQVEsTUFDaEI0SixFQUFVLEVBQVEsTUFDbEJ6TyxFQUFXLEVBQVEsS0FDbkJ1SixFQUFXLEVBQVEsTUFDbkJ2RSxFQUFXLEVBQVEsTUFDbkI2RixFQUFpQixFQUFRLE1BQ3pCb0IsRUFBcUIsRUFBUSxNQUM3QjZvQixFQUErQixFQUFRLE1BQ3ZDNzBCLEVBQWtCLEVBQVEsTUFDMUIyTixFQUFhLEVBQVEsTUFFckJtbkIsRUFBdUI5MEIsRUFBZ0Isc0JBQ3ZDKzBCLEVBQW1CLGlCQUNuQkMsRUFBaUMsaUNBS2pDQyxFQUErQnRuQixHQUFjLEtBQU8vSSxHQUFNLFdBQzVELElBQUlrSixFQUFRLEdBRVosT0FEQUEsRUFBTWduQixJQUF3QixFQUN2QmhuQixFQUFNa1EsU0FBUyxLQUFPbFEsS0FHM0JvbkIsRUFBa0JMLEVBQTZCLFVBRS9DTSxFQUFxQixTQUFVdnJCLEdBQ2pDLElBQUs3SixFQUFTNkosR0FBSSxPQUFPLEVBQ3pCLElBQUl3ckIsRUFBYXhyQixFQUFFa3JCLEdBQ25CLFlBQXNCdjBCLElBQWY2MEIsSUFBNkJBLEVBQWE1bUIsRUFBUTVFLElBUTNEMEksRUFBRSxDQUFFM0ksT0FBUSxRQUFTK04sT0FBTyxFQUFNblQsUUFMcEIwd0IsSUFBaUNDLEdBS0ssQ0FFbERsWCxPQUFRLFNBQWdCdEIsR0FDdEIsSUFHSWhWLEVBQUdrbkIsRUFBRzV0QixFQUFRNkksRUFBS3dyQixFQUhuQnpyQixFQUFJTixFQUFTNUosTUFDYjZuQixFQUFJdmIsRUFBbUJwQyxFQUFHLEdBQzFCb1YsRUFBSSxFQUVSLElBQUt0WCxHQUFLLEVBQUcxRyxFQUFTMEgsVUFBVTFILE9BQVEwRyxFQUFJMUcsRUFBUTBHLElBRWxELEdBQUl5dEIsRUFESkUsR0FBVyxJQUFQM3RCLEVBQVdrQyxFQUFJbEIsVUFBVWhCLElBQ0YsQ0FFekIsR0FBSXNYLEdBREpuVixFQUFNOUUsRUFBU3N3QixFQUFFcjBCLFNBQ0grekIsRUFBa0IsTUFBTWwxQixVQUFVbTFCLEdBQ2hELElBQUtwRyxFQUFJLEVBQUdBLEVBQUkva0IsRUFBSytrQixJQUFLNVAsSUFBUzRQLEtBQUt5RyxHQUFHenFCLEVBQWUyYyxFQUFHdkksRUFBR3FXLEVBQUV6RyxRQUM3RCxDQUNMLEdBQUk1UCxHQUFLK1YsRUFBa0IsTUFBTWwxQixVQUFVbTFCLEdBQzNDcHFCLEVBQWUyYyxFQUFHdkksSUFBS3FXLEdBSTNCLE9BREE5TixFQUFFdm1CLE9BQVNnZSxFQUNKdUksTSxjQzFEWCxJQUFJalYsRUFBSSxFQUFRLE1BQ1o1SSxFQUFhLEVBQVEsTUFDckI0ckIsRUFBbUIsRUFBUSxNQUkvQmhqQixFQUFFLENBQUUzSSxPQUFRLFFBQVMrTixPQUFPLEdBQVEsQ0FDbENoTyxXQUFZQSxJQUlkNHJCLEVBQWlCLGUsNEJDVmpCLElBQUloakIsRUFBSSxFQUFRLE1BQ1ppakIsRUFBUyxjQU9iampCLEVBQUUsQ0FBRTNJLE9BQVEsUUFBUytOLE9BQU8sRUFBTW5ULFFBTlIsRUFBUSxLQUVkK0YsQ0FBb0IsVUFJb0IsQ0FDMUQyQyxNQUFPLFNBQWV6QyxHQUNwQixPQUFPK3FCLEVBQU83MUIsS0FBTThLLEVBQVk5QixVQUFVMUgsT0FBUyxFQUFJMEgsVUFBVSxRQUFLbkksTyxlQ1gxRSxJQUFJK1IsRUFBSSxFQUFRLE1BQ1prakIsRUFBTyxFQUFRLE1BQ2ZGLEVBQW1CLEVBQVEsTUFJL0JoakIsRUFBRSxDQUFFM0ksT0FBUSxRQUFTK04sT0FBTyxHQUFRLENBQ2xDOGQsS0FBTUEsSUFJUkYsRUFBaUIsUyw0QkNWakIsSUFBSWhqQixFQUFJLEVBQVEsTUFDWm1qQixFQUFVLGVBUWRuakIsRUFBRSxDQUFFM0ksT0FBUSxRQUFTK04sT0FBTyxFQUFNblQsUUFQQyxFQUFRLEtBRWpCc3dCLENBQTZCLFdBS1csQ0FDaEU5bkIsT0FBUSxTQUFnQnZDLEdBQ3RCLE9BQU9pckIsRUFBUS8xQixLQUFNOEssRUFBWTlCLFVBQVUxSCxPQUFTLEVBQUkwSCxVQUFVLFFBQUtuSSxPLDRCQ1gzRSxJQUFJK1IsRUFBSSxFQUFRLE1BQ1pvakIsRUFBYSxrQkFDYkosRUFBbUIsRUFBUSxNQUUzQkssRUFBYSxZQUNiQyxHQUFjLEVBR2RELElBQWMsSUFBSXQxQixNQUFNLEdBQWEsV0FBRSxXQUFjdTFCLEdBQWMsS0FJdkV0akIsRUFBRSxDQUFFM0ksT0FBUSxRQUFTK04sT0FBTyxFQUFNblQsT0FBUXF4QixHQUFlLENBQ3ZEem9CLFVBQVcsU0FBbUIzQyxHQUM1QixPQUFPa3JCLEVBQVdoMkIsS0FBTThLLEVBQVk5QixVQUFVMUgsT0FBUyxFQUFJMEgsVUFBVSxRQUFLbkksTUFLOUUrMEIsRUFBaUJLLEksNEJDbkJqQixJQUFJcmpCLEVBQUksRUFBUSxNQUNadWpCLEVBQVEsYUFDUlAsRUFBbUIsRUFBUSxNQUUzQlEsRUFBTyxPQUNQRixHQUFjLEVBR2RFLElBQVEsSUFBSXoxQixNQUFNLEdBQU8sTUFBRSxXQUFjdTFCLEdBQWMsS0FJM0R0akIsRUFBRSxDQUFFM0ksT0FBUSxRQUFTK04sT0FBTyxFQUFNblQsT0FBUXF4QixHQUFlLENBQ3ZEMW9CLEtBQU0sU0FBYzFDLEdBQ2xCLE9BQU9xckIsRUFBTW4yQixLQUFNOEssRUFBWTlCLFVBQVUxSCxPQUFTLEVBQUkwSCxVQUFVLFFBQUtuSSxNQUt6RSswQixFQUFpQlEsSSw0QkNuQmpCLElBQUl4akIsRUFBSSxFQUFRLE1BQ1pxSyxFQUFtQixFQUFRLE1BQzNCclQsRUFBVyxFQUFRLE1BQ25CdkUsRUFBVyxFQUFRLE1BQ25Cb0osRUFBWSxFQUFRLE1BQ3BCbkMsRUFBcUIsRUFBUSxNQUlqQ3NHLEVBQUUsQ0FBRTNJLE9BQVEsUUFBUytOLE9BQU8sR0FBUSxDQUNsQ3FlLFFBQVMsU0FBaUJ2ckIsR0FDeEIsSUFFSStjLEVBRkEzZCxFQUFJTixFQUFTNUosTUFDYm1kLEVBQVk5WCxFQUFTNkUsRUFBRTVJLFFBSzNCLE9BSEFtTixFQUFVM0QsSUFDVitjLEVBQUl2YixFQUFtQnBDLEVBQUcsSUFDeEI1SSxPQUFTMmIsRUFBaUI0SyxFQUFHM2QsRUFBR0EsRUFBR2lULEVBQVcsRUFBRyxFQUFHclMsRUFBWTlCLFVBQVUxSCxPQUFTLEVBQUkwSCxVQUFVLFFBQUtuSSxHQUNqR2duQixNLDRCQ2pCWCxJQUFJalYsRUFBSSxFQUFRLE1BQ1pxSyxFQUFtQixFQUFRLE1BQzNCclQsRUFBVyxFQUFRLE1BQ25CdkUsRUFBVyxFQUFRLE1BQ25CRCxFQUFZLEVBQVEsTUFDcEJrSCxFQUFxQixFQUFRLE1BSWpDc0csRUFBRSxDQUFFM0ksT0FBUSxRQUFTK04sT0FBTyxHQUFRLENBQ2xDc2UsS0FBTSxXQUNKLElBQUlDLEVBQVd2dEIsVUFBVTFILE9BQVMwSCxVQUFVLFFBQUtuSSxFQUM3Q3FKLEVBQUlOLEVBQVM1SixNQUNibWQsRUFBWTlYLEVBQVM2RSxFQUFFNUksUUFDdkJ1bUIsRUFBSXZiLEVBQW1CcEMsRUFBRyxHQUU5QixPQURBMmQsRUFBRXZtQixPQUFTMmIsRUFBaUI0SyxFQUFHM2QsRUFBR0EsRUFBR2lULEVBQVcsT0FBZ0J0YyxJQUFiMDFCLEVBQXlCLEVBQUlueEIsRUFBVW14QixJQUNuRjFPLE0sNEJDaEJYLElBQUlqVixFQUFJLEVBQVEsTUFDWi9ILEVBQVUsRUFBUSxNQUl0QitILEVBQUUsQ0FBRTNJLE9BQVEsUUFBUytOLE9BQU8sRUFBTW5ULE9BQVEsR0FBR2dHLFNBQVdBLEdBQVcsQ0FDakVBLFFBQVNBLEssZUNQWCxJQUFJK0gsRUFBSSxFQUFRLE1BQ1p2SSxFQUFPLEVBQVEsTUFTbkJ1SSxFQUFFLENBQUUzSSxPQUFRLFFBQVNzUixNQUFNLEVBQU0xVyxRQVJDLEVBQVEsS0FFZmtPLEVBQTRCLFNBQVVsQyxHQUMvRGxRLE1BQU0wSixLQUFLd0csT0FLbUQsQ0FDOUR4RyxLQUFNQSxLLDRCQ1ZSLElBQUl1SSxFQUFJLEVBQVEsTUFDWjRqQixFQUFZLGlCQUNaWixFQUFtQixFQUFRLE1BSS9CaGpCLEVBQUUsQ0FBRTNJLE9BQVEsUUFBUytOLE9BQU8sR0FBUSxDQUNsQzdMLFNBQVUsU0FBa0JGLEdBQzFCLE9BQU91cUIsRUFBVXgyQixLQUFNaU0sRUFBSWpELFVBQVUxSCxPQUFTLEVBQUkwSCxVQUFVLFFBQUtuSSxNQUtyRSswQixFQUFpQixhLDRCQ2JqQixJQUFJaGpCLEVBQUksRUFBUSxNQUNaNmpCLEVBQVcsZ0JBQ1g3ckIsRUFBc0IsRUFBUSxNQUU5QjhyQixFQUFnQixHQUFHdHFCLFFBRW5CeUIsSUFBa0I2b0IsR0FBaUIsRUFBSSxDQUFDLEdBQUd0cUIsUUFBUSxHQUFJLEdBQUssRUFDNUR6QixFQUFnQkMsRUFBb0IsV0FJeENnSSxFQUFFLENBQUUzSSxPQUFRLFFBQVMrTixPQUFPLEVBQU1uVCxPQUFRZ0osSUFBa0JsRCxHQUFpQixDQUMzRXlCLFFBQVMsU0FBaUIyQixHQUN4QixPQUFPRixFQUVINm9CLEVBQWMxb0IsTUFBTWhPLEtBQU1nSixZQUFjLEVBQ3hDeXRCLEVBQVN6MkIsS0FBTStOLEVBQWUvRSxVQUFVMUgsT0FBUyxFQUFJMEgsVUFBVSxRQUFLbkksTyxlQ2pCcEUsRUFBUSxLQUtoQitSLENBQUUsQ0FBRTNJLE9BQVEsUUFBU3NSLE1BQU0sR0FBUSxDQUNqQ3pNLFFBTFksRUFBUSxTLDRCQ0F0QixJQUFJakQsRUFBa0IsRUFBUSxNQUMxQitwQixFQUFtQixFQUFRLE1BQzNCM2dCLEVBQVksRUFBUSxNQUNwQnRQLEVBQXNCLEVBQVEsTUFDOUJ5SyxFQUFpQixFQUFRLEtBRXpCdW1CLEVBQWlCLGlCQUNqQjl3QixFQUFtQkYsRUFBb0JHLElBQ3ZDRixFQUFtQkQsRUFBb0I2SyxVQUFVbW1CLEdBWXJEOTJCLEVBQU9ELFFBQVV3USxFQUFlelAsTUFBTyxTQUFTLFNBQVVxUixFQUFVQyxHQUNsRXBNLEVBQWlCN0YsS0FBTSxDQUNyQjhRLEtBQU02bEIsRUFDTjFzQixPQUFRNEIsRUFBZ0JtRyxHQUN4QjVRLE1BQU8sRUFDUDZRLEtBQU1BLE9BSVAsV0FDRCxJQUFJYixFQUFReEwsRUFBaUI1RixNQUN6QmlLLEVBQVNtSCxFQUFNbkgsT0FDZmdJLEVBQU9iLEVBQU1hLEtBQ2I3USxFQUFRZ1EsRUFBTWhRLFFBQ2xCLE9BQUs2SSxHQUFVN0ksR0FBUzZJLEVBQU8zSSxRQUM3QjhQLEVBQU1uSCxZQUFTcEosRUFDUixDQUFFRyxXQUFPSCxFQUFXK0ssTUFBTSxJQUV2QixRQUFScUcsRUFBdUIsQ0FBRWpSLE1BQU9JLEVBQU93SyxNQUFNLEdBQ3JDLFVBQVJxRyxFQUF5QixDQUFFalIsTUFBT2lKLEVBQU83SSxHQUFRd0ssTUFBTSxHQUNwRCxDQUFFNUssTUFBTyxDQUFDSSxFQUFPNkksRUFBTzdJLElBQVN3SyxNQUFNLEtBQzdDLFVBS0hxSixFQUFVMmhCLFVBQVkzaEIsRUFBVXRVLE1BR2hDaTFCLEVBQWlCLFFBQ2pCQSxFQUFpQixVQUNqQkEsRUFBaUIsWSw0QkNuRGpCLElBQUloakIsRUFBSSxFQUFRLE1BQ1p2RyxFQUFnQixFQUFRLE1BQ3hCUixFQUFrQixFQUFRLE1BQzFCakIsRUFBc0IsRUFBUSxNQUU5QmlzQixFQUFhLEdBQUd6WSxLQUVoQjBZLEVBQWN6cUIsR0FBaUJ2SixPQUMvQjZILEVBQWdCQyxFQUFvQixPQUFRLEtBSWhEZ0ksRUFBRSxDQUFFM0ksT0FBUSxRQUFTK04sT0FBTyxFQUFNblQsT0FBUWl5QixJQUFnQm5zQixHQUFpQixDQUN6RXlULEtBQU0sU0FBYzJZLEdBQ2xCLE9BQU9GLEVBQVd0eUIsS0FBS3NILEVBQWdCN0wsV0FBcUJhLElBQWRrMkIsRUFBMEIsSUFBTUEsTyxlQ2ZsRixJQUFJbmtCLEVBQUksRUFBUSxNQUNaaEYsRUFBYyxFQUFRLE1BSTFCZ0YsRUFBRSxDQUFFM0ksT0FBUSxRQUFTK04sT0FBTyxFQUFNblQsT0FBUStJLElBQWdCLEdBQUdBLGFBQWUsQ0FDMUVBLFlBQWFBLEssNEJDTGYsSUFBSWdGLEVBQUksRUFBUSxNQUNab2tCLEVBQU8sWUFRWHBrQixFQUFFLENBQUUzSSxPQUFRLFFBQVMrTixPQUFPLEVBQU1uVCxRQVBDLEVBQVEsS0FFakJzd0IsQ0FBNkIsUUFLVyxDQUNoRS9uQixJQUFLLFNBQWF0QyxHQUNoQixPQUFPa3NCLEVBQUtoM0IsS0FBTThLLEVBQVk5QixVQUFVMUgsT0FBUyxFQUFJMEgsVUFBVSxRQUFLbkksTyw0QkNYeEUsSUFBSStSLEVBQUksRUFBUSxNQUNaMU4sRUFBUSxFQUFRLE1BQ2hCZ0csRUFBaUIsRUFBUSxNQVU3QjBILEVBQUUsQ0FBRTNJLE9BQVEsUUFBU3NSLE1BQU0sRUFBTTFXLE9BUmRLLEdBQU0sV0FDdkIsU0FBU3NQLEtBQ1QsUUFBUzdULE1BQU1zMkIsR0FBRzF5QixLQUFLaVEsYUFBY0EsT0FNa0IsQ0FDdkR5aUIsR0FBSSxXQUlGLElBSEEsSUFBSTcxQixFQUFRLEVBQ1JvSixFQUFrQnhCLFVBQVUxSCxPQUM1QitKLEVBQVMsSUFBb0IsbUJBQVJyTCxLQUFxQkEsS0FBT1csT0FBTzZKLEdBQ3JEQSxFQUFrQnBKLEdBQU84SixFQUFlRyxFQUFRakssRUFBTzRILFVBQVU1SCxNQUV4RSxPQURBaUssRUFBTy9KLE9BQVNrSixFQUNUYSxNLDRCQ25CWCxJQUFJdUgsRUFBSSxFQUFRLE1BQ1pza0IsRUFBZSxjQUNmdHNCLEVBQXNCLEVBQVEsTUFDOUJ1c0IsRUFBaUIsRUFBUSxNQUN6QnRTLEVBQVUsRUFBUSxNQVN0QmpTLEVBQUUsQ0FBRTNJLE9BQVEsUUFBUytOLE9BQU8sRUFBTW5ULFFBUGQrRixFQUFvQixpQkFHdEJpYSxHQUFXc1MsRUFBaUIsSUFBTUEsRUFBaUIsSUFJSyxDQUN4RUMsWUFBYSxTQUFxQnRzQixHQUNoQyxPQUFPb3NCLEVBQWFsM0IsS0FBTThLLEVBQVk5QixVQUFVMUgsT0FBUTBILFVBQVUxSCxPQUFTLEVBQUkwSCxVQUFVLFFBQUtuSSxPLDRCQ2ZsRyxJQUFJK1IsRUFBSSxFQUFRLE1BQ1p5a0IsRUFBVSxhQUNWenNCLEVBQXNCLEVBQVEsTUFDOUJ1c0IsRUFBaUIsRUFBUSxNQUN6QnRTLEVBQVUsRUFBUSxNQVN0QmpTLEVBQUUsQ0FBRTNJLE9BQVEsUUFBUytOLE9BQU8sRUFBTW5ULFFBUGQrRixFQUFvQixZQUd0QmlhLEdBQVdzUyxFQUFpQixJQUFNQSxFQUFpQixJQUlLLENBQ3hFRyxPQUFRLFNBQWdCeHNCLEdBQ3RCLE9BQU91c0IsRUFBUXIzQixLQUFNOEssRUFBWTlCLFVBQVUxSCxPQUFRMEgsVUFBVTFILE9BQVMsRUFBSTBILFVBQVUsUUFBS25JLE8sNEJDZjdGLElBQUkrUixFQUFJLEVBQVEsTUFDWjlELEVBQVUsRUFBUSxNQUVsQnlvQixFQUFnQixHQUFHenZCLFFBQ25Cd1MsRUFBTyxDQUFDLEVBQUcsR0FNZjFILEVBQUUsQ0FBRTNJLE9BQVEsUUFBUytOLE9BQU8sRUFBTW5ULE9BQVF6RSxPQUFPa2EsS0FBVWxhLE9BQU9rYSxFQUFLeFMsWUFBYyxDQUNuRkEsUUFBUyxXQUdQLE9BRElnSCxFQUFROU8sUUFBT0EsS0FBS3NCLE9BQVN0QixLQUFLc0IsUUFDL0JpMkIsRUFBY2h6QixLQUFLdkUsVSw0QkNkOUIsSUFBSTRTLEVBQUksRUFBUSxNQUNadlMsRUFBVyxFQUFRLEtBQ25CeU8sRUFBVSxFQUFRLE1BQ2xCakYsRUFBa0IsRUFBUSxNQUMxQnhFLEVBQVcsRUFBUSxNQUNuQndHLEVBQWtCLEVBQVEsTUFDMUJYLEVBQWlCLEVBQVEsTUFDekI1SyxFQUFrQixFQUFRLE1BRzFCazNCLEVBRitCLEVBQVEsS0FFakJyQyxDQUE2QixTQUVuRGpuQixFQUFVNU4sRUFBZ0IsV0FDMUJtM0IsRUFBYyxHQUFHNXZCLE1BQ2pCcXFCLEVBQU1ub0IsS0FBS21vQixJQUtmdGYsRUFBRSxDQUFFM0ksT0FBUSxRQUFTK04sT0FBTyxFQUFNblQsUUFBUzJ5QixHQUF1QixDQUNoRTN2QixNQUFPLFNBQWVGLEVBQU8yQyxHQUMzQixJQUtJL0ksRUFBYThKLEVBQVFpVSxFQUxyQnBWLEVBQUkyQixFQUFnQjdMLE1BQ3BCc0IsRUFBUytELEVBQVM2RSxFQUFFNUksUUFDcEI0dEIsRUFBSXJsQixFQUFnQmxDLEVBQU9yRyxHQUMzQjB6QixFQUFNbnJCLE9BQXdCaEosSUFBUnlKLEVBQW9CaEosRUFBU2dKLEVBQUtoSixHQUc1RCxHQUFJd04sRUFBUTVFLEtBR2dCLG1CQUYxQjNJLEVBQWMySSxFQUFFN0IsY0FFeUI5RyxJQUFnQlosUUFBU21PLEVBQVF2TixFQUFZWCxXQUUzRVAsRUFBU2tCLElBRUUsUUFEcEJBLEVBQWNBLEVBQVkyTSxNQUNBM00sT0FBY1YsR0FIeENVLE9BQWNWLEVBS1pVLElBQWdCWixZQUF5QkUsSUFBaEJVLEdBQzNCLE9BQU9rMkIsRUFBWWx6QixLQUFLMkYsRUFBR2dsQixFQUFHOEYsR0FJbEMsSUFEQTNwQixFQUFTLFNBQXFCeEssSUFBaEJVLEVBQTRCWixNQUFRWSxHQUFhMndCLEVBQUk4QyxFQUFNOUYsRUFBRyxJQUN2RTVQLEVBQUksRUFBRzRQLEVBQUk4RixFQUFLOUYsSUFBSzVQLElBQVM0UCxLQUFLaGxCLEdBQUdnQixFQUFlRyxFQUFRaVUsRUFBR3BWLEVBQUVnbEIsSUFFdkUsT0FEQTdqQixFQUFPL0osT0FBU2dlLEVBQ1RqVSxNLDRCQzNDWCxJQUFJdUgsRUFBSSxFQUFRLE1BQ1o4a0IsRUFBUSxhQU9aOWtCLEVBQUUsQ0FBRTNJLE9BQVEsUUFBUytOLE9BQU8sRUFBTW5ULFFBTlIsRUFBUSxLQUVkK0YsQ0FBb0IsU0FJb0IsQ0FDMUQwQyxLQUFNLFNBQWN4QyxHQUNsQixPQUFPNHNCLEVBQU0xM0IsS0FBTThLLEVBQVk5QixVQUFVMUgsT0FBUyxFQUFJMEgsVUFBVSxRQUFLbkksTyw0QkNWekUsSUFBSStSLEVBQUksRUFBUSxNQUNabkUsRUFBWSxFQUFRLE1BQ3BCN0UsRUFBVyxFQUFRLE1BQ25CMUUsRUFBUSxFQUFRLE1BQ2hCMEYsRUFBc0IsRUFBUSxNQUU5QjBQLEVBQU8sR0FDUHFkLEVBQWFyZCxFQUFLNkwsS0FHbEJ5UixFQUFxQjF5QixHQUFNLFdBQzdCb1YsRUFBSzZMLFVBQUt0bEIsTUFHUmczQixFQUFnQjN5QixHQUFNLFdBQ3hCb1YsRUFBSzZMLEtBQUssU0FHUnhiLEVBQWdCQyxFQUFvQixRQU14Q2dJLEVBQUUsQ0FBRTNJLE9BQVEsUUFBUytOLE9BQU8sRUFBTW5ULE9BSnJCK3lCLElBQXVCQyxJQUFrQmx0QixHQUlGLENBQ2xEd2IsS0FBTSxTQUFjMlIsR0FDbEIsWUFBcUJqM0IsSUFBZGkzQixFQUNISCxFQUFXcHpCLEtBQUtxRixFQUFTNUosT0FDekIyM0IsRUFBV3B6QixLQUFLcUYsRUFBUzVKLE1BQU95TyxFQUFVcXBCLFEsZUM3QmpDLEVBQVEsS0FJekJ6bkIsQ0FBVyxVLDJCQ0hYLElBQUl1QyxFQUFJLEVBQVEsTUFDWi9JLEVBQWtCLEVBQVEsTUFDMUJ6RSxFQUFZLEVBQVEsTUFDcEJDLEVBQVcsRUFBUSxNQUNuQnVFLEVBQVcsRUFBUSxNQUNuQjBDLEVBQXFCLEVBQVEsTUFDN0JwQixFQUFpQixFQUFRLE1BR3pCc3NCLEVBRitCLEVBQVEsS0FFakJyQyxDQUE2QixVQUVuRGpELEVBQU1ub0IsS0FBS21vQixJQUNYcG9CLEVBQU1DLEtBQUtELElBQ1h1ckIsRUFBbUIsaUJBQ25CMEMsRUFBa0Msa0NBS3RDbmxCLEVBQUUsQ0FBRTNJLE9BQVEsUUFBUytOLE9BQU8sRUFBTW5ULFFBQVMyeUIsR0FBdUIsQ0FDaEU3a0IsT0FBUSxTQUFnQmhMLEVBQU9xd0IsR0FDN0IsSUFJSUMsRUFBYUMsRUFBbUJyUSxFQUFHcUgsRUFBRzdrQixFQUFNRCxFQUo1Q0YsRUFBSU4sRUFBUzVKLE1BQ2JtSyxFQUFNOUUsRUFBUzZFLEVBQUU1SSxRQUNqQjYyQixFQUFjdHVCLEVBQWdCbEMsRUFBT3dDLEdBQ3JDSyxFQUFrQnhCLFVBQVUxSCxPQVdoQyxHQVR3QixJQUFwQmtKLEVBQ0Z5dEIsRUFBY0MsRUFBb0IsRUFDTCxJQUFwQjF0QixHQUNUeXRCLEVBQWMsRUFDZEMsRUFBb0IvdEIsRUFBTWd1QixJQUUxQkYsRUFBY3p0QixFQUFrQixFQUNoQzB0QixFQUFvQnB1QixFQUFJb29CLEVBQUk5c0IsRUFBVTR5QixHQUFjLEdBQUk3dEIsRUFBTWd1QixJQUU1RGh1QixFQUFNOHRCLEVBQWNDLEVBQW9CN0MsRUFDMUMsTUFBTWwxQixVQUFVNDNCLEdBR2xCLElBREFsUSxFQUFJdmIsRUFBbUJwQyxFQUFHZ3VCLEdBQ3JCaEosRUFBSSxFQUFHQSxFQUFJZ0osRUFBbUJoSixLQUNqQzdrQixFQUFPOHRCLEVBQWNqSixLQUNUaGxCLEdBQUdnQixFQUFlMmMsRUFBR3FILEVBQUdobEIsRUFBRUcsSUFHeEMsR0FEQXdkLEVBQUV2bUIsT0FBUzQyQixFQUNQRCxFQUFjQyxFQUFtQixDQUNuQyxJQUFLaEosRUFBSWlKLEVBQWFqSixFQUFJL2tCLEVBQU0rdEIsRUFBbUJoSixJQUVqRDlrQixFQUFLOGtCLEVBQUkrSSxHQURUNXRCLEVBQU82a0IsRUFBSWdKLEtBRUNodUIsRUFBR0EsRUFBRUUsR0FBTUYsRUFBRUcsVUFDYkgsRUFBRUUsR0FFaEIsSUFBSzhrQixFQUFJL2tCLEVBQUsra0IsRUFBSS9rQixFQUFNK3RCLEVBQW9CRCxFQUFhL0ksV0FBWWhsQixFQUFFZ2xCLEVBQUksUUFDdEUsR0FBSStJLEVBQWNDLEVBQ3ZCLElBQUtoSixFQUFJL2tCLEVBQU0rdEIsRUFBbUJoSixFQUFJaUosRUFBYWpKLElBRWpEOWtCLEVBQUs4a0IsRUFBSStJLEVBQWMsR0FEdkI1dEIsRUFBTzZrQixFQUFJZ0osRUFBb0IsS0FFbkJodUIsRUFBR0EsRUFBRUUsR0FBTUYsRUFBRUcsVUFDYkgsRUFBRUUsR0FHbEIsSUFBSzhrQixFQUFJLEVBQUdBLEVBQUkrSSxFQUFhL0ksSUFDM0JobEIsRUFBRWdsQixFQUFJaUosR0FBZW52QixVQUFVa21CLEVBQUksR0FHckMsT0FEQWhsQixFQUFFNUksT0FBUzZJLEVBQU0rdEIsRUFBb0JELEVBQzlCcFEsTSxlQy9EWSxFQUFRLEtBRy9CK04sQ0FBaUIsWSxlQ0hNLEVBQVEsS0FHL0JBLENBQWlCLFMsZUNMakIsSUFBSWhqQixFQUFJLEVBQVEsTUFDWmdnQixFQUFvQixFQUFRLE1BS2hDaGdCLEVBQUUsQ0FBRTlRLFFBQVEsRUFBTStDLFFBSlEsRUFBUSxPQUlnQixDQUNoRG5ELFNBQVVreEIsRUFBa0JseEIsWSxlQ1B0QixFQUFRLEtBSWhCa1IsQ0FBRSxDQUFFM0ksT0FBUSxPQUFRc1IsTUFBTSxHQUFRLENBQ2hDbVcsSUFBSyxXQUNILE9BQU8sSUFBSTliLE1BQU9DLGMsZUNOdEIsSUFBSWpELEVBQUksRUFBUSxNQUNabUQsRUFBYyxFQUFRLE1BSzFCbkQsRUFBRSxDQUFFM0ksT0FBUSxPQUFRK04sT0FBTyxFQUFNblQsT0FBUStRLEtBQUtoVixVQUFVbVYsY0FBZ0JBLEdBQWUsQ0FDckZBLFlBQWFBLEssNEJDTmYsSUFBSW5ELEVBQUksRUFBUSxNQUNaMU4sRUFBUSxFQUFRLE1BQ2hCMEUsRUFBVyxFQUFRLE1BQ25CMkwsRUFBYyxFQUFRLE1BUzFCM0MsRUFBRSxDQUFFM0ksT0FBUSxPQUFRK04sT0FBTyxFQUFNblQsT0FQcEJLLEdBQU0sV0FDakIsT0FBa0MsT0FBM0IsSUFBSTBRLEtBQUszTixLQUFLaWUsVUFDMkQsSUFBM0V0USxLQUFLaFYsVUFBVXNsQixPQUFPM2hCLEtBQUssQ0FBRXdSLFlBQWEsV0FBYyxPQUFPLFNBS25CLENBRWpEbVEsT0FBUSxTQUFnQmpsQixHQUN0QixJQUFJaUosRUFBSU4sRUFBUzVKLE1BQ2JvNEIsRUFBSzdpQixFQUFZckwsR0FDckIsTUFBb0IsaUJBQU5rdUIsR0FBbUJwaUIsU0FBU29pQixHQUFhbHVCLEVBQUU2TCxjQUFULFMsZUNsQnBELElBQUk5VCxFQUE4QixFQUFRLE1BQ3RDbzJCLEVBQWtCLEVBQVEsTUFHMUJDLEVBRmtCLEVBQVEsS0FFWGg0QixDQUFnQixlQUMvQnFWLEVBQWdCQyxLQUFLaFYsVUFJbkIwM0IsS0FBZ0IzaUIsR0FDcEIxVCxFQUE0QjBULEVBQWUyaUIsRUFBY0QsSSxlQ1YzRCxJQUFJbjJCLEVBQVcsRUFBUSxNQUVuQnlULEVBQWdCQyxLQUFLaFYsVUFDckIyM0IsRUFBZSxlQUVmQyxFQUFxQjdpQixFQUF1QixTQUM1Q0UsRUFBVUYsRUFBY0UsUUFJeEIsSUFBSUQsS0FBSzNOLEtBQU8sSUFBTXN3QixHQUN4QnIyQixFQUFTeVQsRUFQSyxZQU9xQixXQUNqQyxJQUFJM1UsRUFBUTZVLEVBQVF0UixLQUFLdkUsTUFFekIsT0FBT2dCLEdBQVVBLEVBQVF3M0IsRUFBbUJqMEIsS0FBS3ZFLE1BQVF1NEIsTSxlQ2RyRCxFQUFRLEtBS2hCM2xCLENBQUUsQ0FBRTNJLE9BQVEsV0FBWStOLE9BQU8sR0FBUSxDQUNyQ2pOLEtBTFMsRUFBUSxTLDRCQ0FuQixJQUFJMUssRUFBVyxFQUFRLEtBQ25CRyxFQUF1QixFQUFRLE1BQy9CNEIsRUFBaUIsRUFBUSxNQUd6QnEyQixFQUZrQixFQUFRLEtBRVhuNEIsQ0FBZ0IsZUFDL0JvNEIsRUFBb0J4MEIsU0FBU3RELFVBSTNCNjNCLEtBQWdCQyxHQUNwQmw0QixFQUFxQk0sRUFBRTQzQixFQUFtQkQsRUFBYyxDQUFFejNCLE1BQU8sU0FBVWtKLEdBQ3pFLEdBQW1CLG1CQUFSbEssT0FBdUJLLEVBQVM2SixHQUFJLE9BQU8sRUFDdEQsSUFBSzdKLEVBQVNMLEtBQUtZLFdBQVksT0FBT3NKLGFBQWFsSyxLQUVuRCxLQUFPa0ssRUFBSTlILEVBQWU4SCxPQUFRbEssS0FBS1ksWUFBY3NKLEVBQUcsT0FBTyxFQUMvRCxPQUFPLE0sZUNqQlgsSUFBSXJJLEVBQWMsRUFBUSxNQUN0Qk0sRUFBaUIsVUFFakJ1MkIsRUFBb0J4MEIsU0FBU3RELFVBQzdCKzNCLEVBQTRCRCxFQUFrQjlvQixTQUM5Q2dwQixFQUFTLHdCQUNUajNCLEVBQU8sT0FJUEUsS0FBaUJGLEtBQVErMkIsSUFDM0J2MkIsRUFBZXUyQixFQUFtQi8yQixFQUFNLENBQ3RDWixjQUFjLEVBQ2RvRCxJQUFLLFdBQ0gsSUFDRSxPQUFPdzBCLEVBQTBCcDBCLEtBQUt2RSxNQUFNeWEsTUFBTW1lLEdBQVEsR0FDMUQsTUFBTzd6QixHQUNQLE1BQU8sUSxlQ2pCUCxFQUFRLEtBS2hCNk4sQ0FBRSxDQUFFOVEsUUFBUSxHQUFRLENBQ2xCMGQsV0FMVyxFQUFRLFMsZUNEckIsSUFBSTVNLEVBQUksRUFBUSxNQUNaNEgsRUFBYSxFQUFRLE1BQ3JCdFYsRUFBUSxFQUFRLE1BRWhCMnpCLEVBQWFyZSxFQUFXLE9BQVEsYUFDaENvQixFQUFLLG1CQUNMa2QsRUFBTSxvQkFDTkMsRUFBSyxvQkFFTEMsRUFBTSxTQUFVdmUsRUFBTzVSLEVBQVE4TCxHQUNqQyxJQUFJakQsRUFBT2lELEVBQU96VCxPQUFPMkgsRUFBUyxHQUM5QjJDLEVBQU9tSixFQUFPelQsT0FBTzJILEVBQVMsR0FDbEMsT0FBS2l3QixFQUFJeGUsS0FBS0csS0FBV3NlLEVBQUd6ZSxLQUFLOU8sSUFBV3V0QixFQUFHemUsS0FBS0csS0FBV3FlLEVBQUl4ZSxLQUFLNUksR0FDL0QsTUFBUStJLEVBQU1pVCxXQUFXLEdBQUc5ZCxTQUFTLElBQ3JDNkssR0FHUDNNLEVBQVM1SSxHQUFNLFdBQ2pCLE1BQXNDLHFCQUEvQjJ6QixFQUFXLGlCQUNZLGNBQXpCQSxFQUFXLGFBR2RBLEdBSUZqbUIsRUFBRSxDQUFFM0ksT0FBUSxPQUFRc1IsTUFBTSxFQUFNMVcsT0FBUWlKLEdBQVUsQ0FFaERtckIsVUFBVyxTQUFtQi80QixFQUFJZzVCLEVBQVVDLEdBQzFDLElBQUk5dEIsRUFBU3d0QixFQUFXN3FCLE1BQU0sS0FBTWhGLFdBQ3BDLE1BQXdCLGlCQUFWcUMsRUFBcUJBLEVBQU95SixRQUFROEcsRUFBSW9kLEdBQU8zdEIsTSxlQzlCbkUsSUFBSXZKLEVBQVMsRUFBUSxNQUNBLEVBQVEsS0FJN0I0RCxDQUFlNUQsRUFBT3MzQixLQUFNLFFBQVEsSSw0QkNKcEMsSUFBSUMsRUFBYSxFQUFRLE1BQ3JCQyxFQUFtQixFQUFRLE1BSS9CejVCLEVBQU9ELFFBQVV5NUIsRUFBVyxPQUFPLFNBQVVFLEdBQzNDLE9BQU8sV0FBaUIsT0FBT0EsRUFBS3Y1QixLQUFNZ0osVUFBVTFILE9BQVMwSCxVQUFVLFFBQUtuSSxNQUMzRXk0QixJLGVDUkgsSUFBSTFtQixFQUFJLEVBQVEsTUFDWnNSLEVBQVEsRUFBUSxNQUVoQnNWLEVBQWN6dkIsS0FBSzB2QixNQUNuQjNaLEVBQU0vVixLQUFLK1YsSUFDWDRaLEVBQU8zdkIsS0FBSzJ2QixLQUNaM1osRUFBTWhXLEtBQUtnVyxJQVVmbk4sRUFBRSxDQUFFM0ksT0FBUSxPQUFRc1IsTUFBTSxFQUFNMVcsUUFSbEIyMEIsR0FFb0MsS0FBN0N6dkIsS0FBSzBVLE1BQU0rYSxFQUFZMVMsT0FBTzZTLGFBRTlCSCxFQUFZalosTUFBYUEsS0FJb0IsQ0FDaERrWixNQUFPLFNBQWUvVixHQUNwQixPQUFRQSxHQUFLQSxHQUFLLEVBQUl6YixJQUFNeWIsRUFBSSxrQkFDNUI1RCxFQUFJNEQsR0FBSzNELEVBQ1RtRSxFQUFNUixFQUFJLEVBQUlnVyxFQUFLaFcsRUFBSSxHQUFLZ1csRUFBS2hXLEVBQUksUSxlQ3BCN0MsSUFBSTlRLEVBQUksRUFBUSxNQUVaZ25CLEVBQWM3dkIsS0FBSzh2QixNQUNuQi9aLEVBQU0vVixLQUFLK1YsSUFDWDRaLEVBQU8zdkIsS0FBSzJ2QixLQVNoQjltQixFQUFFLENBQUUzSSxPQUFRLE9BQVFzUixNQUFNLEVBQU0xVyxTQUFVKzBCLEdBQWUsRUFBSUEsRUFBWSxHQUFLLElBQU0sQ0FDbEZDLE1BUkYsU0FBU0EsRUFBTW5XLEdBQ2IsT0FBUTFOLFNBQVMwTixHQUFLQSxJQUFXLEdBQUxBLEVBQWFBLEVBQUksR0FBS21XLEdBQU9uVyxHQUFLNUQsRUFBSTRELEVBQUlnVyxFQUFLaFcsRUFBSUEsRUFBSSxJQUE5Q0EsTSxlQ1B2QyxJQUFJOVEsRUFBSSxFQUFRLE1BRVprbkIsRUFBYy92QixLQUFLZ3dCLE1BQ25CamEsRUFBTS9WLEtBQUsrVixJQUtmbE4sRUFBRSxDQUFFM0ksT0FBUSxPQUFRc1IsTUFBTSxFQUFNMVcsU0FBVWkxQixHQUFlLEVBQUlBLEdBQWEsR0FBSyxJQUFNLENBQ25GQyxNQUFPLFNBQWVyVyxHQUNwQixPQUFtQixJQUFYQSxHQUFLQSxHQUFVQSxFQUFJNUQsR0FBSyxFQUFJNEQsSUFBTSxFQUFJQSxJQUFNLE0sZUNWeEQsSUFBSTlRLEVBQUksRUFBUSxNQUNaMEQsRUFBTyxFQUFRLE1BRWZaLEVBQU0zTCxLQUFLMkwsSUFDWG1LLEVBQU05VixLQUFLOFYsSUFJZmpOLEVBQUUsQ0FBRTNJLE9BQVEsT0FBUXNSLE1BQU0sR0FBUSxDQUNoQ3llLEtBQU0sU0FBY3RXLEdBQ2xCLE9BQU9wTixFQUFLb04sR0FBS0EsR0FBSzdELEVBQUluSyxFQUFJZ08sR0FBSSxFQUFJLE8sZUNWMUMsSUFBSTlRLEVBQUksRUFBUSxNQUVaNkwsRUFBUTFVLEtBQUswVSxNQUNicUIsRUFBTS9WLEtBQUsrVixJQUNYbWEsRUFBUWx3QixLQUFLa3dCLE1BSWpCcm5CLEVBQUUsQ0FBRTNJLE9BQVEsT0FBUXNSLE1BQU0sR0FBUSxDQUNoQzJlLE1BQU8sU0FBZXhXLEdBQ3BCLE9BQVFBLEtBQU8sR0FBSyxHQUFLakYsRUFBTXFCLEVBQUk0RCxFQUFJLElBQU91VyxHQUFTLE8sZUNWM0QsSUFBSXJuQixFQUFJLEVBQVEsTUFDWjRRLEVBQVEsRUFBUSxNQUVoQjJXLEVBQWFwd0IsS0FBS3F3QixLQUNsQjFrQixFQUFNM0wsS0FBSzJMLElBQ1hpZ0IsRUFBSTVyQixLQUFLNHJCLEVBSWIvaUIsRUFBRSxDQUFFM0ksT0FBUSxPQUFRc1IsTUFBTSxFQUFNMVcsUUFBU3MxQixHQUFjQSxFQUFXLE9BQVM1WixLQUFZLENBQ3JGNlosS0FBTSxTQUFjMVcsR0FDbEIsSUFBSXVNLEVBQUl6TSxFQUFNOU4sRUFBSWdPLEdBQUssR0FBSyxFQUM1QixPQUFRdU0sRUFBSSxHQUFLQSxFQUFJMEYsRUFBSUEsS0FBT0EsRUFBSSxPLGNDWnhDLElBQUkvaUIsRUFBSSxFQUFRLE1BQ1o0USxFQUFRLEVBQVEsTUFJcEI1USxFQUFFLENBQUUzSSxPQUFRLE9BQVFzUixNQUFNLEVBQU0xVyxPQUFRMmUsR0FBU3paLEtBQUt5WixPQUFTLENBQUVBLE1BQU9BLEssZUNMaEUsRUFBUSxLQUtoQjVRLENBQUUsQ0FBRTNJLE9BQVEsT0FBUXNSLE1BQU0sR0FBUSxDQUFFd0ksT0FKdkIsRUFBUSxTLGVDRHJCLElBQUluUixFQUFJLEVBQVEsTUFFWnluQixFQUFTdHdCLEtBQUt1d0IsTUFDZDVrQixFQUFNM0wsS0FBSzJMLElBQ1hna0IsRUFBTzN2QixLQUFLMnZCLEtBUWhCOW1CLEVBQUUsQ0FBRTNJLE9BQVEsT0FBUXNSLE1BQU0sRUFBTTFXLFNBSmxCdzFCLEdBQVVBLEVBQU85WixJQUFVdFksT0FBU3NZLEtBSUQsQ0FFL0MrWixNQUFPLFNBQWVDLEVBQVFDLEdBTTVCLElBTEEsSUFJSXhkLEVBQUt5ZCxFQUpMQyxFQUFNLEVBQ04xeUIsRUFBSSxFQUNKMnlCLEVBQU8zeEIsVUFBVTFILE9BQ2pCczVCLEVBQU8sRUFFSjV5QixFQUFJMnlCLEdBRUxDLEdBREo1ZCxFQUFNdEgsRUFBSTFNLFVBQVVoQixRQUdsQjB5QixFQUFNQSxHQURORCxFQUFNRyxFQUFPNWQsR0FDS3lkLEVBQU0sRUFDeEJHLEVBQU81ZCxHQUdQMGQsR0FGUzFkLEVBQU0sR0FDZnlkLEVBQU16ZCxFQUFNNGQsR0FDQ0gsRUFDRHpkLEVBRWhCLE9BQU80ZCxJQUFTcmEsSUFBV0EsSUFBV3FhLEVBQU9sQixFQUFLZ0IsTyxjQy9CdEQsSUFBSTluQixFQUFJLEVBQVEsTUFDWjFOLEVBQVEsRUFBUSxNQUVoQjIxQixFQUFhOXdCLEtBQUsrd0IsS0FTdEJsb0IsRUFBRSxDQUFFM0ksT0FBUSxPQUFRc1IsTUFBTSxFQUFNMVcsT0FQbkJLLEdBQU0sV0FDakIsT0FBcUMsR0FBOUIyMUIsRUFBVyxXQUFZLElBQWlDLEdBQXJCQSxFQUFXdjVCLFdBTUwsQ0FDaER3NUIsS0FBTSxTQUFjcFgsRUFBR3VKLEdBQ3JCLElBQUk4TixFQUFTLE1BQ1RDLEdBQU10WCxFQUNOdVgsR0FBTWhPLEVBQ05pTyxFQUFLSCxFQUFTQyxFQUNkRyxFQUFLSixFQUFTRSxFQUNsQixPQUFPLEVBQUlDLEVBQUtDLElBQU9KLEVBQVNDLElBQU8sSUFBTUcsRUFBS0QsR0FBTUgsRUFBU0UsSUFBTyxLQUFPLEtBQU8sTyxjQ25CMUYsSUFBSXJvQixFQUFJLEVBQVEsTUFFWmtOLEVBQU0vVixLQUFLK1YsSUFDWHNiLEVBQVNyeEIsS0FBS3F4QixPQUlsQnhvQixFQUFFLENBQUUzSSxPQUFRLE9BQVFzUixNQUFNLEdBQVEsQ0FDaEM4ZixNQUFPLFNBQWUzWCxHQUNwQixPQUFPNUQsRUFBSTRELEdBQUswWCxNLGNDVFosRUFBUSxLQUtoQnhvQixDQUFFLENBQUUzSSxPQUFRLE9BQVFzUixNQUFNLEdBQVEsQ0FBRTJJLE1BSnhCLEVBQVEsUyxlQ0RwQixJQUFJdFIsRUFBSSxFQUFRLE1BRVprTixFQUFNL1YsS0FBSytWLElBQ1hDLEVBQU1oVyxLQUFLZ1csSUFJZm5OLEVBQUUsQ0FBRTNJLE9BQVEsT0FBUXNSLE1BQU0sR0FBUSxDQUNoQytmLEtBQU0sU0FBYzVYLEdBQ2xCLE9BQU81RCxFQUFJNEQsR0FBSzNELE0sZUNUWixFQUFRLEtBS2hCbk4sQ0FBRSxDQUFFM0ksT0FBUSxPQUFRc1IsTUFBTSxHQUFRLENBQ2hDakYsS0FMUyxFQUFRLFMsY0NEbkIsSUFBSTFELEVBQUksRUFBUSxNQUNaMU4sRUFBUSxFQUFRLE1BQ2hCc2UsRUFBUSxFQUFRLE1BRWhCOU4sRUFBTTNMLEtBQUsyTCxJQUNYK04sRUFBTTFaLEtBQUswWixJQUNYa1MsRUFBSTVyQixLQUFLNHJCLEVBU2IvaUIsRUFBRSxDQUFFM0ksT0FBUSxPQUFRc1IsTUFBTSxFQUFNMVcsT0FQbkJLLEdBQU0sV0FDakIsT0FBNkIsT0FBdEI2RSxLQUFLd3hCLE1BQU0sV0FNOEIsQ0FDaERBLEtBQU0sU0FBYzdYLEdBQ2xCLE9BQU9oTyxFQUFJZ08sR0FBS0EsR0FBSyxHQUFLRixFQUFNRSxHQUFLRixHQUFPRSxJQUFNLEdBQUtELEVBQUlDLEVBQUksR0FBS0QsR0FBS0MsRUFBSSxLQUFPaVMsRUFBSSxPLGNDakI1RixJQUFJL2lCLEVBQUksRUFBUSxNQUNaNFEsRUFBUSxFQUFRLE1BRWhCQyxFQUFNMVosS0FBSzBaLElBSWY3USxFQUFFLENBQUUzSSxPQUFRLE9BQVFzUixNQUFNLEdBQVEsQ0FDaENpZ0IsS0FBTSxTQUFjOVgsR0FDbEIsSUFBSTVILEVBQUkwSCxFQUFNRSxHQUFLQSxHQUNmN0YsRUFBSTJGLEdBQU9FLEdBQ2YsT0FBTzVILEdBQUt5RSxJQUFXLEVBQUkxQyxHQUFLMEMsS0FBWSxHQUFLekUsRUFBSStCLElBQU00RixFQUFJQyxHQUFLRCxHQUFLQyxRLGVDWHhELEVBQVEsS0FJN0JoZSxDQUFlcUUsS0FBTSxRQUFRLEksZUNKN0IsSUFBSTZJLEVBQUksRUFBUSxNQUVaaWIsRUFBTzlqQixLQUFLOGpCLEtBQ1pwUCxFQUFRMVUsS0FBSzBVLE1BSWpCN0wsRUFBRSxDQUFFM0ksT0FBUSxPQUFRc1IsTUFBTSxHQUFRLENBQ2hDa2dCLE1BQU8sU0FBZXY3QixHQUNwQixPQUFRQSxFQUFLLEVBQUl1ZSxFQUFRb1AsR0FBTTN0QixPLDRCQ1JuQyxJQUFJMkIsRUFBYyxFQUFRLE1BQ3RCQyxFQUFTLEVBQVEsTUFDakIrUSxFQUFXLEVBQVEsTUFDbkIzUSxFQUFXLEVBQVEsTUFDbkJILEVBQU0sRUFBUSxNQUNkQyxFQUFVLEVBQVEsTUFDbEJnUixFQUFvQixFQUFRLE1BQzVCdUMsRUFBYyxFQUFRLE1BQ3RCclEsRUFBUSxFQUFRLE1BQ2hCM0UsRUFBUyxFQUFRLElBQ2pCaUYsRUFBc0IsVUFDdEIyTyxFQUEyQixVQUMzQmhTLEVBQWlCLFVBQ2pCNGtCLEVBQU8sYUFFUDJVLEVBQVMsU0FDVEMsRUFBZTc1QixFQUFhLE9BQzVCODVCLEVBQWtCRCxFQUFhLzZCLFVBRy9CaTdCLEVBQWlCNzVCLEVBQVF6QixFQUFPcTdCLEtBQXFCRixFQUlyREksRUFBVyxTQUFVdnRCLEdBQ3ZCLElBQ0l3QyxFQUFPZ3JCLEVBQU94VSxFQUFPeVUsRUFBU0MsRUFBUTM2QixFQUFRRixFQUFPODZCLEVBRHJEaDhCLEVBQUtxVixFQUFZaEgsR0FBVSxHQUUvQixHQUFpQixpQkFBTnJPLEdBQWtCQSxFQUFHb0IsT0FBUyxFQUd2QyxHQUFjLE1BRGR5UCxHQURBN1EsRUFBSzZtQixFQUFLN21CLElBQ0N3dEIsV0FBVyxLQUNRLEtBQVYzYyxHQUVsQixHQUFjLE1BRGRnckIsRUFBUTc3QixFQUFHd3RCLFdBQVcsS0FDUSxNQUFWcU8sRUFBZSxPQUFPOXpCLFNBQ3JDLEdBQWMsS0FBVjhJLEVBQWMsQ0FDdkIsT0FBUTdRLEVBQUd3dEIsV0FBVyxJQUNwQixLQUFLLEdBQUksS0FBSyxHQUFJbkcsRUFBUSxFQUFHeVUsRUFBVSxHQUFJLE1BQzNDLEtBQUssR0FBSSxLQUFLLElBQUt6VSxFQUFRLEVBQUd5VSxFQUFVLEdBQUksTUFDNUMsUUFBUyxPQUFROTdCLEVBSW5CLElBREFvQixHQURBMjZCLEVBQVMvN0IsRUFBRzJILE1BQU0sSUFDRnZHLE9BQ1hGLEVBQVEsRUFBR0EsRUFBUUUsRUFBUUYsSUFJOUIsSUFIQTg2QixFQUFPRCxFQUFPdk8sV0FBV3RzQixJQUdkLElBQU04NkIsRUFBT0YsRUFBUyxPQUFPL3pCLElBQ3hDLE9BQU9vZixTQUFTNFUsRUFBUTFVLEdBRTVCLE9BQVFybkIsR0FLWixHQUFJMlMsRUFBUzZvQixHQUFTQyxFQUFhLFVBQVlBLEVBQWEsUUFBVUEsRUFBYSxTQUFVLENBUzNGLElBUkEsSUFnQnFCMTZCLEVBaEJqQms3QixFQUFnQixTQUFnQm43QixHQUNsQyxJQUFJZCxFQUFLOEksVUFBVTFILE9BQVMsRUFBSSxFQUFJTixFQUNoQytTLEVBQVEvVCxLQUNaLE9BQU8rVCxhQUFpQm9vQixJQUVsQk4sRUFBaUIzMkIsR0FBTSxXQUFjMDJCLEVBQWdCbkosUUFBUWx1QixLQUFLd1AsTUFBYS9SLEVBQVErUixJQUFVMm5CLEdBQ2pHMW9CLEVBQWtCLElBQUkyb0IsRUFBYUcsRUFBUzU3QixJQUFNNlQsRUFBT29vQixHQUFpQkwsRUFBUzU3QixJQUVsRmlJLEVBQU90RyxFQUFjMkQsRUFBb0JtMkIsR0FBZ0IsOExBUWhFOWdCLE1BQU0sS0FBTXpTLEVBQUksRUFBUUQsRUFBSzdHLE9BQVM4RyxFQUFHQSxJQUNyQ3JHLEVBQUk0NUIsRUFBYzE2QixFQUFNa0gsRUFBS0MsTUFBUXJHLEVBQUlvNkIsRUFBZWw3QixJQUMxRGtCLEVBQWVnNkIsRUFBZWw3QixFQUFLa1QsRUFBeUJ3bkIsRUFBYzE2QixJQUc5RWs3QixFQUFjdjdCLFVBQVlnN0IsRUFDMUJBLEVBQWdCdnpCLFlBQWM4ekIsRUFDOUJqNkIsRUFBU0osRUFBUTQ1QixFQUFRUyxLLGVDOUVuQixFQUFRLEtBSWhCdnBCLENBQUUsQ0FBRTNJLE9BQVEsU0FBVXNSLE1BQU0sR0FBUSxDQUNsQ29JLFFBQVM1WixLQUFLOFYsSUFBSSxHQUFJLE8sZUNMaEIsRUFBUSxLQUtoQmpOLENBQUUsQ0FBRTNJLE9BQVEsU0FBVXNSLE1BQU0sR0FBUSxDQUFFdkYsU0FKakIsRUFBUSxTLGVDRHJCLEVBQVEsS0FLaEJwRCxDQUFFLENBQUUzSSxPQUFRLFNBQVVzUixNQUFNLEdBQVEsQ0FDbEM2Z0IsVUFMYyxFQUFRLFMsZUNEaEIsRUFBUSxLQUloQnhwQixDQUFFLENBQUUzSSxPQUFRLFNBQVVzUixNQUFNLEdBQVEsQ0FDbEM2VyxNQUFPLFNBQWV4ckIsR0FFcEIsT0FBT0EsR0FBVUEsTSxlQ1ByQixJQUFJZ00sRUFBSSxFQUFRLE1BQ1p3cEIsRUFBWSxFQUFRLE1BRXBCMW1CLEVBQU0zTCxLQUFLMkwsSUFJZjlDLEVBQUUsQ0FBRTNJLE9BQVEsU0FBVXNSLE1BQU0sR0FBUSxDQUNsQzhnQixjQUFlLFNBQXVCejFCLEdBQ3BDLE9BQU93MUIsRUFBVXgxQixJQUFXOE8sRUFBSTlPLElBQVcscUIsZUNUdkMsRUFBUSxLQUloQmdNLENBQUUsQ0FBRTNJLE9BQVEsU0FBVXNSLE1BQU0sR0FBUSxDQUNsQzhaLGlCQUFrQixvQixlQ0xaLEVBQVEsS0FJaEJ6aUIsQ0FBRSxDQUFFM0ksT0FBUSxTQUFVc1IsTUFBTSxHQUFRLENBQ2xDK2dCLGtCQUFtQixvQixlQ0xyQixJQUFJMXBCLEVBQUksRUFBUSxNQUNac1UsRUFBYSxFQUFRLE1BSXpCdFUsRUFBRSxDQUFFM0ksT0FBUSxTQUFVc1IsTUFBTSxFQUFNMVcsT0FBUWlpQixPQUFPSSxZQUFjQSxHQUFjLENBQzNFQSxXQUFZQSxLLGVDTmQsSUFBSXRVLEVBQUksRUFBUSxNQUNaeVUsRUFBVyxFQUFRLE1BSXZCelUsRUFBRSxDQUFFM0ksT0FBUSxTQUFVc1IsTUFBTSxFQUFNMVcsT0FBUWlpQixPQUFPTyxVQUFZQSxHQUFZLENBQ3ZFQSxTQUFVQSxLLDRCQ0xaLElBQUl6VSxFQUFJLEVBQVEsTUFDWnhOLEVBQVksRUFBUSxNQUNwQm0zQixFQUFrQixFQUFRLEtBQzFCM08sRUFBUyxFQUFRLE1BQ2pCMW9CLEVBQVEsRUFBUSxNQUVoQnMzQixFQUFnQixHQUFJQyxRQUNwQmhlLEVBQVExVSxLQUFLMFUsTUFFYm9CLEVBQU0sU0FBVTZELEVBQUdwRSxFQUFHb2QsR0FDeEIsT0FBYSxJQUFOcGQsRUFBVW9kLEVBQU1wZCxFQUFJLEdBQU0sRUFBSU8sRUFBSTZELEVBQUdwRSxFQUFJLEVBQUdvZCxFQUFNaFosR0FBSzdELEVBQUk2RCxFQUFJQSxFQUFHcEUsRUFBSSxFQUFHb2QsSUFnQjlFQyxFQUFXLFNBQVVsckIsRUFBTTZOLEVBQUd4QixHQUdoQyxJQUZBLElBQUkxYyxHQUFTLEVBQ1R3N0IsRUFBSzllLElBQ0ExYyxFQUFRLEdBQ2Z3N0IsR0FBTXRkLEVBQUk3TixFQUFLclEsR0FDZnFRLEVBQUtyUSxHQUFTdzdCLEVBQUssSUFDbkJBLEVBQUtuZSxFQUFNbWUsRUFBSyxNQUloQkMsRUFBUyxTQUFVcHJCLEVBQU02TixHQUczQixJQUZBLElBQUlsZSxFQUFRLEVBQ1IwYyxFQUFJLElBQ0MxYyxHQUFTLEdBQ2hCMGMsR0FBS3JNLEVBQUtyUSxHQUNWcVEsRUFBS3JRLEdBQVNxZCxFQUFNWCxFQUFJd0IsR0FDeEJ4QixFQUFLQSxFQUFJd0IsRUFBSyxLQUlkd2QsRUFBZSxTQUFVcnJCLEdBRzNCLElBRkEsSUFBSXJRLEVBQVEsRUFDUjJyQixFQUFJLEtBQ0MzckIsR0FBUyxHQUNoQixHQUFVLEtBQU4yckIsR0FBc0IsSUFBVjNyQixHQUErQixJQUFoQnFRLEVBQUtyUSxHQUFjLENBQ2hELElBQUk2dUIsRUFBSTd2QixPQUFPcVIsRUFBS3JRLElBQ3BCMnJCLEVBQVUsS0FBTkEsRUFBV2tELEVBQUlsRCxFQUFJYSxFQUFPcnBCLEtBQUssSUFBSyxFQUFJMHJCLEVBQUUzdUIsUUFBVTJ1QixFQUUxRCxPQUFPbEQsR0FlWG5hLEVBQUUsQ0FBRTNJLE9BQVEsU0FBVStOLE9BQU8sRUFBTW5ULE9BWnRCMjNCLElBQ1ksVUFBdkIsS0FBUUMsUUFBUSxJQUNHLE1BQW5CLEdBQUlBLFFBQVEsSUFDUyxTQUFyQixNQUFNQSxRQUFRLElBQ3VCLHlCQUFyQyxtQkFBc0JBLFFBQVEsTUFDMUJ2M0IsR0FBTSxXQUVWczNCLEVBQWNqNEIsS0FBSyxRQUtnQyxDQUNuRGs0QixRQUFTLFNBQWlCTSxHQUN4QixJQUtJQyxFQUFHQyxFQUFHNzBCLEVBQUc4bUIsRUFMVHRvQixFQUFTMjFCLEVBQWdCdjhCLE1BQ3pCazlCLEVBQWM5M0IsRUFBVTIzQixHQUN4QnRyQixFQUFPLENBQUMsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQ3ZCNkUsRUFBTyxHQUNQakwsRUFBUyxJQUdiLEdBQUk2eEIsRUFBYyxHQUFLQSxFQUFjLEdBQUksTUFBTTUyQixXQUFXLDZCQUUxRCxHQUFJTSxHQUFVQSxFQUFRLE1BQU8sTUFDN0IsR0FBSUEsSUFBVyxNQUFRQSxHQUFVLEtBQU0sT0FBT3hHLE9BQU93RyxHQUtyRCxHQUpJQSxFQUFTLElBQ1gwUCxFQUFPLElBQ1AxUCxHQUFVQSxHQUVSQSxFQUFTLE1BS1gsR0FIQXEyQixHQURBRCxFQTFFSSxTQUFVdFosR0FHbEIsSUFGQSxJQUFJcEUsRUFBSSxFQUNKNmQsRUFBS3paLEVBQ0Z5WixHQUFNLE1BQ1g3ZCxHQUFLLEdBQ0w2ZCxHQUFNLEtBRVIsS0FBT0EsR0FBTSxHQUNYN2QsR0FBSyxFQUNMNmQsR0FBTSxFQUNOLE9BQU83ZCxFQWdFRFEsQ0FBSWxaLEVBQVNpWixFQUFJLEVBQUcsR0FBSSxJQUFNLElBQzFCLEVBQUlqWixFQUFTaVosRUFBSSxHQUFJbWQsRUFBRyxHQUFLcDJCLEVBQVNpWixFQUFJLEVBQUdtZCxFQUFHLEdBQ3hEQyxHQUFLLGtCQUNMRCxFQUFJLEdBQUtBLEdBQ0QsRUFBRyxDQUdULElBRkFMLEVBQVNsckIsRUFBTSxFQUFHd3JCLEdBQ2xCNzBCLEVBQUk4MEIsRUFDRzkwQixHQUFLLEdBQ1Z1MEIsRUFBU2xyQixFQUFNLElBQUssR0FDcEJySixHQUFLLEVBSVAsSUFGQXUwQixFQUFTbHJCLEVBQU1vTyxFQUFJLEdBQUl6WCxFQUFHLEdBQUksR0FDOUJBLEVBQUk0MEIsRUFBSSxFQUNENTBCLEdBQUssSUFDVnkwQixFQUFPcHJCLEVBQU0sR0FBSyxJQUNsQnJKLEdBQUssR0FFUHkwQixFQUFPcHJCLEVBQU0sR0FBS3JKLEdBQ2xCdTBCLEVBQVNsckIsRUFBTSxFQUFHLEdBQ2xCb3JCLEVBQU9wckIsRUFBTSxHQUNicEcsRUFBU3l4QixFQUFhcnJCLFFBRXRCa3JCLEVBQVNsckIsRUFBTSxFQUFHd3JCLEdBQ2xCTixFQUFTbHJCLEVBQU0sSUFBTXVyQixFQUFHLEdBQ3hCM3hCLEVBQVN5eEIsRUFBYXJyQixHQUFRbWMsRUFBT3JwQixLQUFLLElBQUsyNEIsR0FVakQsT0FQRUEsRUFBYyxFQUVQNW1CLElBRFQ0WSxFQUFJN2pCLEVBQU8vSixTQUNXNDdCLEVBQ2xCLEtBQU90UCxFQUFPcnBCLEtBQUssSUFBSzI0QixFQUFjaE8sR0FBSzdqQixFQUMzQ0EsRUFBT3hELE1BQU0sRUFBR3FuQixFQUFJZ08sR0FBZSxJQUFNN3hCLEVBQU94RCxNQUFNcW5CLEVBQUlnTyxJQUVyRDVtQixFQUFPakwsTSw0QkN4SHRCLElBQUl1SCxFQUFJLEVBQVEsTUFDWjFOLEVBQVEsRUFBUSxNQUNoQnEzQixFQUFrQixFQUFRLEtBRTFCYSxFQUFvQixHQUFJQyxZQVk1QnpxQixFQUFFLENBQUUzSSxPQUFRLFNBQVUrTixPQUFPLEVBQU1uVCxPQVZ0QkssR0FBTSxXQUVqQixNQUFnRCxNQUF6Q2s0QixFQUFrQjc0QixLQUFLLE9BQUcxRCxRQUM1QnFFLEdBQU0sV0FFWGs0QixFQUFrQjc0QixLQUFLLFFBSzRCLENBQ25EODRCLFlBQWEsU0FBcUJDLEdBQ2hDLFlBQXFCejhCLElBQWR5OEIsRUFDSEYsRUFBa0I3NEIsS0FBS2c0QixFQUFnQnY4QixPQUN2Q285QixFQUFrQjc0QixLQUFLZzRCLEVBQWdCdjhCLE1BQU9zOUIsTyxlQ3JCdEQsSUFBSTFxQixFQUFJLEVBQVEsTUFDWmdWLEVBQVMsRUFBUSxNQUlyQmhWLEVBQUUsQ0FBRTNJLE9BQVEsU0FBVXNSLE1BQU0sRUFBTTFXLE9BQVEvQixPQUFPOGtCLFNBQVdBLEdBQVUsQ0FDcEVBLE9BQVFBLEssZUNORixFQUFRLEtBTWhCaFYsQ0FBRSxDQUFFM0ksT0FBUSxTQUFVc1IsTUFBTSxFQUFNRSxNQUxoQixFQUFRLE9BSzhCLENBQ3REbGIsT0FMVyxFQUFRLE8sNEJDRHJCLElBQUlxUyxFQUFJLEVBQVEsTUFDWi9RLEVBQWMsRUFBUSxNQUN0QmlNLEVBQVMsRUFBUSxNQUNqQmxFLEVBQVcsRUFBUSxNQUNuQjZFLEVBQVksRUFBUSxNQUNwQmpPLEVBQXVCLEVBQVEsTUFJL0JxQixHQUNGK1EsRUFBRSxDQUFFM0ksT0FBUSxTQUFVK04sT0FBTyxFQUFNblQsT0FBUWlKLEdBQVUsQ0FDbkR5dkIsaUJBQWtCLFNBQTBCeFQsRUFBRzhKLEdBQzdDcnpCLEVBQXFCTSxFQUFFOEksRUFBUzVKLE1BQU8rcEIsRUFBRyxDQUFFNWxCLElBQUtzSyxFQUFVb2xCLEdBQVN4ZSxZQUFZLEVBQU10VSxjQUFjLFEsZUNiMUcsSUFBSTZSLEVBQUksRUFBUSxNQUNaL1EsRUFBYyxFQUFRLE1BSzFCK1EsRUFBRSxDQUFFM0ksT0FBUSxTQUFVc1IsTUFBTSxFQUFNMVcsUUFBU2hELEVBQWE0WixNQUFPNVosR0FBZSxDQUM1RXVtQixpQkFMcUIsRUFBUSxTLGVDRi9CLElBQUl4VixFQUFJLEVBQVEsTUFDWi9RLEVBQWMsRUFBUSxNQUsxQitRLEVBQUUsQ0FBRTNJLE9BQVEsU0FBVXNSLE1BQU0sRUFBTTFXLFFBQVNoRCxFQUFhNFosTUFBTzVaLEdBQWUsQ0FDNUVNLGVBTCtCLEVBQVEsTUFLSXJCLEssNEJDTjdDLElBQUk4UixFQUFJLEVBQVEsTUFDWi9RLEVBQWMsRUFBUSxNQUN0QmlNLEVBQVMsRUFBUSxNQUNqQmxFLEVBQVcsRUFBUSxNQUNuQjZFLEVBQVksRUFBUSxNQUNwQmpPLEVBQXVCLEVBQVEsTUFJL0JxQixHQUNGK1EsRUFBRSxDQUFFM0ksT0FBUSxTQUFVK04sT0FBTyxFQUFNblQsT0FBUWlKLEdBQVUsQ0FDbkQrYyxpQkFBa0IsU0FBMEJkLEVBQUdnQixHQUM3Q3ZxQixFQUFxQk0sRUFBRThJLEVBQVM1SixNQUFPK3BCLEVBQUcsQ0FBRWprQixJQUFLMkksRUFBVXNjLEdBQVMxVixZQUFZLEVBQU10VSxjQUFjLFEsZUNiMUcsSUFBSTZSLEVBQUksRUFBUSxNQUNaNHFCLEVBQVcsZ0JBSWY1cUIsRUFBRSxDQUFFM0ksT0FBUSxTQUFVc1IsTUFBTSxHQUFRLENBQ2xDOUksUUFBUyxTQUFpQnZJLEdBQ3hCLE9BQU9zekIsRUFBU3R6QixPLGVDUHBCLElBQUkwSSxFQUFJLEVBQVEsTUFDWm9PLEVBQVcsRUFBUSxNQUNuQjliLEVBQVEsRUFBUSxNQUNoQjdFLEVBQVcsRUFBUSxLQUNuQmloQixFQUFXLGlCQUVYbWMsRUFBZTM2QixPQUFPNDZCLE9BSzFCOXFCLEVBQUUsQ0FBRTNJLE9BQVEsU0FBVXNSLE1BQU0sRUFBTTFXLE9BSlJLLEdBQU0sV0FBY3U0QixFQUFhLE1BSUloaUIsTUFBT3VGLEdBQVksQ0FDaEYwYyxPQUFRLFNBQWdCeDlCLEdBQ3RCLE9BQU91OUIsR0FBZ0JwOUIsRUFBU0gsR0FBTXU5QixFQUFhbmMsRUFBU3BoQixJQUFPQSxNLGVDYnZFLElBQUkwUyxFQUFJLEVBQVEsTUFDWnpDLEVBQVUsRUFBUSxLQUNsQmpGLEVBQWlCLEVBQVEsTUFJN0IwSCxFQUFFLENBQUUzSSxPQUFRLFNBQVVzUixNQUFNLEdBQVEsQ0FDbENvaUIsWUFBYSxTQUFxQjlzQixHQUNoQyxJQUFJK3NCLEVBQU0sR0FJVixPQUhBenRCLEVBQVFVLEdBQVUsU0FBVXFlLEVBQUcyTyxHQUM3QjN5QixFQUFlMHlCLEVBQUsxTyxFQUFHMk8sS0FDdEIsQ0FBRTNzQixZQUFZLElBQ1Ywc0IsTSxlQ1pYLElBQUlockIsRUFBSSxFQUFRLE1BQ1oxTixFQUFRLEVBQVEsTUFDaEIyRyxFQUFrQixFQUFRLE1BQzFCb2UsRUFBaUMsVUFDakNwb0IsRUFBYyxFQUFRLE1BRXRCaThCLEVBQXNCNTRCLEdBQU0sV0FBYytrQixFQUErQixNQUs3RXJYLEVBQUUsQ0FBRTNJLE9BQVEsU0FBVXNSLE1BQU0sRUFBTTFXLFFBSnBCaEQsR0FBZWk4QixFQUlxQnJpQixNQUFPNVosR0FBZSxDQUN0RXNTLHlCQUEwQixTQUFrQ2pVLEVBQUllLEdBQzlELE9BQU9ncEIsRUFBK0JwZSxFQUFnQjNMLEdBQUtlLE8sZUNiL0QsSUFBSTJSLEVBQUksRUFBUSxNQUNaL1EsRUFBYyxFQUFRLE1BQ3RCbVMsRUFBVSxFQUFRLE1BQ2xCbkksRUFBa0IsRUFBUSxNQUMxQm9JLEVBQWlDLEVBQVEsTUFDekMvSSxFQUFpQixFQUFRLE1BSTdCMEgsRUFBRSxDQUFFM0ksT0FBUSxTQUFVc1IsTUFBTSxFQUFNRSxNQUFPNVosR0FBZSxDQUN0RGs4QiwwQkFBMkIsU0FBbUNwdUIsR0FPNUQsSUFOQSxJQUtJMU8sRUFBS2thLEVBTExqUixFQUFJMkIsRUFBZ0I4RCxHQUNwQndFLEVBQTJCRixFQUErQm5ULEVBQzFEcUgsRUFBTzZMLEVBQVE5SixHQUNmbUIsRUFBUyxHQUNUakssRUFBUSxFQUVMK0csRUFBSzdHLE9BQVNGLFFBRUFQLEtBRG5Cc2EsRUFBYWhILEVBQXlCakssRUFBR2pKLEVBQU1rSCxFQUFLL0csUUFDdEI4SixFQUFlRyxFQUFRcEssRUFBS2thLEdBRTVELE9BQU85UCxNLGVDckJYLElBQUl1SCxFQUFJLEVBQVEsTUFDWjFOLEVBQVEsRUFBUSxNQUNoQmdsQixFQUE0QixVQU1oQ3RYLEVBQUUsQ0FBRTNJLE9BQVEsU0FBVXNSLE1BQU0sRUFBTTFXLE9BSlJLLEdBQU0sV0FBYyxPQUFRcEMsT0FBTzBDLG9CQUFvQixPQUloQixDQUMvREEsb0JBQXFCMGtCLEssY0NUdkIsSUFBSXRYLEVBQUksRUFBUSxNQUNaMU4sRUFBUSxFQUFRLE1BQ2hCMEUsRUFBVyxFQUFRLE1BQ25CbzBCLEVBQXVCLEVBQVEsTUFDL0IxVCxFQUEyQixFQUFRLE1BTXZDMVgsRUFBRSxDQUFFM0ksT0FBUSxTQUFVc1IsTUFBTSxFQUFNMVcsT0FKUkssR0FBTSxXQUFjODRCLEVBQXFCLE1BSUp2aUIsTUFBTzZPLEdBQTRCLENBQ2hHbG9CLGVBQWdCLFNBQXdCbEMsR0FDdEMsT0FBTzg5QixFQUFxQnAwQixFQUFTMUosUSxlQ1p6QyxJQUFJMFMsRUFBSSxFQUFRLE1BQ1oxTixFQUFRLEVBQVEsTUFDaEI3RSxFQUFXLEVBQVEsS0FFbkI0OUIsRUFBcUJuN0IsT0FBTzZhLGFBS2hDL0ssRUFBRSxDQUFFM0ksT0FBUSxTQUFVc1IsTUFBTSxFQUFNMVcsT0FKUkssR0FBTSxXQUFjKzRCLEVBQW1CLE9BSUEsQ0FDL0R0Z0IsYUFBYyxTQUFzQnpkLEdBQ2xDLFFBQU9HLEVBQVNILE1BQU0rOUIsR0FBcUJBLEVBQW1CLzlCLFEsZUNYbEUsSUFBSTBTLEVBQUksRUFBUSxNQUNaMU4sRUFBUSxFQUFRLE1BQ2hCN0UsRUFBVyxFQUFRLEtBRW5CNjlCLEVBQWlCcDdCLE9BQU9xN0IsU0FLNUJ2ckIsRUFBRSxDQUFFM0ksT0FBUSxTQUFVc1IsTUFBTSxFQUFNMVcsT0FKUkssR0FBTSxXQUFjZzVCLEVBQWUsT0FJSSxDQUMvREMsU0FBVSxTQUFrQmorQixHQUMxQixPQUFPRyxFQUFTSCxNQUFNZytCLEdBQWlCQSxFQUFlaCtCLE8sZUNYMUQsSUFBSTBTLEVBQUksRUFBUSxNQUNaMU4sRUFBUSxFQUFRLE1BQ2hCN0UsRUFBVyxFQUFRLEtBRW5CKzlCLEVBQWlCdDdCLE9BQU91N0IsU0FLNUJ6ckIsRUFBRSxDQUFFM0ksT0FBUSxTQUFVc1IsTUFBTSxFQUFNMVcsT0FKUkssR0FBTSxXQUFjazVCLEVBQWUsT0FJSSxDQUMvREMsU0FBVSxTQUFrQm4rQixHQUMxQixPQUFPRyxFQUFTSCxNQUFNaytCLEdBQWlCQSxFQUFlbCtCLE8sZUNYbEQsRUFBUSxLQUtoQjBTLENBQUUsQ0FBRTNJLE9BQVEsU0FBVXNSLE1BQU0sR0FBUSxDQUNsQ3lSLEdBTE8sRUFBUSxTLGVDRGpCLElBQUlwYSxFQUFJLEVBQVEsTUFDWmhKLEVBQVcsRUFBUSxNQUNuQjAwQixFQUFhLEVBQVEsTUFPekIxckIsRUFBRSxDQUFFM0ksT0FBUSxTQUFVc1IsTUFBTSxFQUFNMVcsT0FOdEIsRUFBUSxLQUVNSyxFQUFNLFdBQWNvNUIsRUFBVyxPQUlRLENBQy9EbjJCLEtBQU0sU0FBY2pJLEdBQ2xCLE9BQU9vK0IsRUFBVzEwQixFQUFTMUosUSw0QkNWL0IsSUFBSTBTLEVBQUksRUFBUSxNQUNaL1EsRUFBYyxFQUFRLE1BQ3RCaU0sRUFBUyxFQUFRLE1BQ2pCbEUsRUFBVyxFQUFRLE1BQ25CMkwsRUFBYyxFQUFRLE1BQ3RCblQsRUFBaUIsRUFBUSxNQUN6QitSLEVBQTJCLFVBSTNCdFMsR0FDRitRLEVBQUUsQ0FBRTNJLE9BQVEsU0FBVStOLE9BQU8sRUFBTW5ULE9BQVFpSixHQUFVLENBQ25EeXdCLGlCQUFrQixTQUEwQnhVLEdBQzFDLElBRUl5VSxFQUZBdDBCLEVBQUlOLEVBQVM1SixNQUNiaUIsRUFBTXNVLEVBQVl3VSxHQUFHLEdBRXpCLEdBQ0UsR0FBSXlVLEVBQU9ycUIsRUFBeUJqSyxFQUFHakosR0FBTSxPQUFPdTlCLEVBQUtyNkIsVUFDbEQrRixFQUFJOUgsRUFBZThILFEsNEJDbEJsQyxJQUFJMEksRUFBSSxFQUFRLE1BQ1ovUSxFQUFjLEVBQVEsTUFDdEJpTSxFQUFTLEVBQVEsTUFDakJsRSxFQUFXLEVBQVEsTUFDbkIyTCxFQUFjLEVBQVEsTUFDdEJuVCxFQUFpQixFQUFRLE1BQ3pCK1IsRUFBMkIsVUFJM0J0UyxHQUNGK1EsRUFBRSxDQUFFM0ksT0FBUSxTQUFVK04sT0FBTyxFQUFNblQsT0FBUWlKLEdBQVUsQ0FDbkQyd0IsaUJBQWtCLFNBQTBCMVUsR0FDMUMsSUFFSXlVLEVBRkF0MEIsRUFBSU4sRUFBUzVKLE1BQ2JpQixFQUFNc1UsRUFBWXdVLEdBQUcsR0FFekIsR0FDRSxHQUFJeVUsRUFBT3JxQixFQUF5QmpLLEVBQUdqSixHQUFNLE9BQU91OUIsRUFBSzE0QixVQUNsRG9FLEVBQUk5SCxFQUFlOEgsUSxlQ25CbEMsSUFBSTBJLEVBQUksRUFBUSxNQUNadlMsRUFBVyxFQUFRLEtBQ25CaWhCLEVBQVcsaUJBQ1hOLEVBQVcsRUFBUSxNQUNuQjliLEVBQVEsRUFBUSxNQUVoQnc1QixFQUEwQjU3QixPQUFPOGEsa0JBS3JDaEwsRUFBRSxDQUFFM0ksT0FBUSxTQUFVc1IsTUFBTSxFQUFNMVcsT0FKUkssR0FBTSxXQUFjdzVCLEVBQXdCLE1BSVBqakIsTUFBT3VGLEdBQVksQ0FDaEZwRCxrQkFBbUIsU0FBMkIxZCxHQUM1QyxPQUFPdytCLEdBQTJCcitCLEVBQVNILEdBQU13K0IsRUFBd0JwZCxFQUFTcGhCLElBQU9BLE0sY0NiN0YsSUFBSTBTLEVBQUksRUFBUSxNQUNadlMsRUFBVyxFQUFRLEtBQ25CaWhCLEVBQVcsaUJBQ1hOLEVBQVcsRUFBUSxNQUNuQjliLEVBQVEsRUFBUSxNQUVoQnk1QixFQUFhNzdCLE9BQU84N0IsS0FLeEJoc0IsRUFBRSxDQUFFM0ksT0FBUSxTQUFVc1IsTUFBTSxFQUFNMVcsT0FKUkssR0FBTSxXQUFjeTVCLEVBQVcsTUFJTWxqQixNQUFPdUYsR0FBWSxDQUNoRjRkLEtBQU0sU0FBYzErQixHQUNsQixPQUFPeStCLEdBQWN0K0IsRUFBU0gsR0FBTXkrQixFQUFXcmQsRUFBU3BoQixJQUFPQSxNLGVDYjNELEVBQVEsS0FLaEIwUyxDQUFFLENBQUUzSSxPQUFRLFNBQVVzUixNQUFNLEdBQVEsQ0FDbENsWixlQUxtQixFQUFRLFMsZUNEN0IsSUFBSXdOLEVBQXdCLEVBQVEsTUFDaEMzTixFQUFXLEVBQVEsTUFDbkIwTixFQUFXLEVBQVEsS0FJbEJDLEdBQ0gzTixFQUFTWSxPQUFPbEMsVUFBVyxXQUFZZ1AsRUFBVSxDQUFFakgsUUFBUSxLLGVDUDdELElBQUlpSyxFQUFJLEVBQVEsTUFDWmlzQixFQUFVLGVBSWRqc0IsRUFBRSxDQUFFM0ksT0FBUSxTQUFVc1IsTUFBTSxHQUFRLENBQ2xDeEQsT0FBUSxTQUFnQjdOLEdBQ3RCLE9BQU8yMEIsRUFBUTMwQixPLGVDUG5CLElBQUkwSSxFQUFJLEVBQVEsTUFDWmtzQixFQUEyQixFQUFRLE1BSXZDbHNCLEVBQUUsQ0FBRTlRLFFBQVEsRUFBTStDLE9BQVFxaUIsWUFBYzRYLEdBQTRCLENBQ2xFNVgsV0FBWTRYLEssZUNOZCxJQUFJbHNCLEVBQUksRUFBUSxNQUNabXNCLEVBQXlCLEVBQVEsTUFJckNuc0IsRUFBRSxDQUFFOVEsUUFBUSxFQUFNK0MsT0FBUXdpQixVQUFZMFgsR0FBMEIsQ0FDOUQxWCxTQUFVMFgsSyw0QkNMWixJQUFJbnNCLEVBQUksRUFBUSxNQUNabkUsRUFBWSxFQUFRLE1BQ3BCdXdCLEVBQTZCLEVBQVEsTUFDckNDLEVBQVUsRUFBUSxNQUNsQjl1QixFQUFVLEVBQVEsS0FJdEJ5QyxFQUFFLENBQUUzSSxPQUFRLFVBQVdzUixNQUFNLEdBQVEsQ0FDbkMyakIsV0FBWSxTQUFvQnJ1QixHQUM5QixJQUFJdk0sRUFBSXRFLEtBQ0ptL0IsRUFBYUgsRUFBMkJsK0IsRUFBRXdELEdBQzFDaWhCLEVBQVU0WixFQUFXNVosUUFDckJtQixFQUFTeVksRUFBV3pZLE9BQ3BCcmIsRUFBUzR6QixHQUFRLFdBQ25CLElBQUlHLEVBQWlCM3dCLEVBQVVuSyxFQUFFaWhCLFNBQzdCeE4sRUFBUyxHQUNUMFgsRUFBVSxFQUNWNFAsRUFBWSxFQUNoQmx2QixFQUFRVSxHQUFVLFNBQVUyVCxHQUMxQixJQUFJcGpCLEVBQVFxdUIsSUFDUjZQLEdBQWdCLEVBQ3BCdm5CLEVBQU94TCxVQUFLMUwsR0FDWncrQixJQUNBRCxFQUFlNzZCLEtBQUtELEVBQUdrZ0IsR0FBU0MsTUFBSyxTQUFVempCLEdBQ3pDcytCLElBQ0pBLEdBQWdCLEVBQ2hCdm5CLEVBQU8zVyxHQUFTLENBQUVtK0IsT0FBUSxZQUFhditCLE1BQU9BLEtBQzVDcStCLEdBQWE5WixFQUFReE4sT0FDdEIsU0FBVWhULEdBQ1B1NkIsSUFDSkEsR0FBZ0IsRUFDaEJ2bkIsRUFBTzNXLEdBQVMsQ0FBRW0rQixPQUFRLFdBQVlDLE9BQVF6NkIsS0FDNUNzNkIsR0FBYTlaLEVBQVF4TixZQUd6QnNuQixHQUFhOVosRUFBUXhOLE1BR3pCLE9BREkxTSxFQUFPdEcsT0FBTzJoQixFQUFPcmIsRUFBT3JLLE9BQ3pCbStCLEVBQVczYSxZLDRCQ3ZDdEIsSUFBSTVSLEVBQUksRUFBUSxNQUNabkUsRUFBWSxFQUFRLE1BQ3BCK0wsRUFBYSxFQUFRLE1BQ3JCd2tCLEVBQTZCLEVBQVEsTUFDckNDLEVBQVUsRUFBUSxNQUNsQjl1QixFQUFVLEVBQVEsS0FFbEJzdkIsRUFBb0IsMEJBSXhCN3NCLEVBQUUsQ0FBRTNJLE9BQVEsVUFBV3NSLE1BQU0sR0FBUSxDQUNuQ21rQixJQUFLLFNBQWE3dUIsR0FDaEIsSUFBSXZNLEVBQUl0RSxLQUNKbS9CLEVBQWFILEVBQTJCbCtCLEVBQUV3RCxHQUMxQ2loQixFQUFVNFosRUFBVzVaLFFBQ3JCbUIsRUFBU3lZLEVBQVd6WSxPQUNwQnJiLEVBQVM0ekIsR0FBUSxXQUNuQixJQUFJRyxFQUFpQjN3QixFQUFVbkssRUFBRWloQixTQUM3QmtQLEVBQVMsR0FDVGhGLEVBQVUsRUFDVjRQLEVBQVksRUFDWk0sR0FBa0IsRUFDdEJ4dkIsRUFBUVUsR0FBVSxTQUFVMlQsR0FDMUIsSUFBSXBqQixFQUFRcXVCLElBQ1JtUSxHQUFrQixFQUN0Qm5MLEVBQU9sb0IsVUFBSzFMLEdBQ1p3K0IsSUFDQUQsRUFBZTc2QixLQUFLRCxFQUFHa2dCLEdBQVNDLE1BQUssU0FBVXpqQixHQUN6QzQrQixHQUFtQkQsSUFDdkJBLEdBQWtCLEVBQ2xCcGEsRUFBUXZrQixPQUNQLFNBQVUrRCxHQUNQNjZCLEdBQW1CRCxJQUN2QkMsR0FBa0IsRUFDbEJuTCxFQUFPcnpCLEdBQVMyRCxJQUNkczZCLEdBQWEzWSxFQUFPLElBQUtsTSxFQUFXLGtCQUFoQixDQUFtQ2lhLEVBQVFnTCxhQUduRUosR0FBYTNZLEVBQU8sSUFBS2xNLEVBQVcsa0JBQWhCLENBQW1DaWEsRUFBUWdMLE9BR25FLE9BRElwMEIsRUFBT3RHLE9BQU8yaEIsRUFBT3JiLEVBQU9ySyxPQUN6Qm0rQixFQUFXM2EsWSw0QkMxQ3RCLElBQUk1UixFQUFJLEVBQVEsTUFDWmtFLEVBQVUsRUFBUSxNQUNsQitvQixFQUFnQixFQUFRLE1BQ3hCMzZCLEVBQVEsRUFBUSxNQUNoQnNWLEVBQWEsRUFBUSxNQUNyQnlaLEVBQXFCLEVBQVEsTUFDN0JtTCxFQUFpQixFQUFRLE1BQ3pCbDlCLEVBQVcsRUFBUSxNQVN2QjBRLEVBQUUsQ0FBRTNJLE9BQVEsVUFBVytOLE9BQU8sRUFBTThuQixNQUFNLEVBQU1qN0IsU0FONUJnN0IsR0FBaUIzNkIsR0FBTSxXQUN6QzI2QixFQUFjai9CLFVBQW1CLFFBQUUyRCxLQUFLLENBQUVrZ0IsS0FBTSxlQUErQixtQkFLVixDQUNyRSxRQUFXLFNBQVVzYixHQUNuQixJQUFJejdCLEVBQUkydkIsRUFBbUJqMEIsS0FBTXdhLEVBQVcsWUFDeEN3bEIsRUFBaUMsbUJBQWJELEVBQ3hCLE9BQU8vL0IsS0FBS3lrQixLQUNWdWIsRUFBYSxTQUFVdGMsR0FDckIsT0FBTzBiLEVBQWU5NkIsRUFBR3k3QixLQUFhdGIsTUFBSyxXQUFjLE9BQU9mLE1BQzlEcWMsRUFDSkMsRUFBYSxTQUFVaEQsR0FDckIsT0FBT29DLEVBQWU5NkIsRUFBR3k3QixLQUFhdGIsTUFBSyxXQUFjLE1BQU11WSxNQUM3RCtDLE1BTUxqcEIsR0FBbUMsbUJBQWpCK29CLEdBQWdDQSxFQUFjai9CLFVBQW1CLFNBQ3RGc0IsRUFBUzI5QixFQUFjai9CLFVBQVcsVUFBVzRaLEVBQVcsV0FBVzVaLFVBQW1CLFUsNEJDakN4RixJQWlESXEvQixFQUFVQyxFQUFzQkMsRUFBZ0JDLEVBakRoRHh0QixFQUFJLEVBQVEsTUFDWmtFLEVBQVUsRUFBUSxNQUNsQmhWLEVBQVMsRUFBUSxNQUNqQjBZLEVBQWEsRUFBUSxNQUNyQnFsQixFQUFnQixFQUFRLE1BQ3hCMzlCLEVBQVcsRUFBUSxNQUNuQitDLEVBQWMsRUFBUSxNQUN0QlMsRUFBaUIsRUFBUSxNQUN6QjJLLEVBQWEsRUFBUSxNQUNyQmhRLEVBQVcsRUFBUSxLQUNuQm9PLEVBQVksRUFBUSxNQUNwQnRKLEVBQWEsRUFBUSxNQUNyQjJiLEVBQWdCLEVBQVEsTUFDeEIzUSxFQUFVLEVBQVEsS0FDbEI0QyxFQUE4QixFQUFRLE1BQ3RDa2hCLEVBQXFCLEVBQVEsTUFDN0JyTyxFQUFPLFdBQ1B5YSxFQUFZLEVBQVEsTUFDcEJqQixFQUFpQixFQUFRLE1BQ3pCa0IsRUFBbUIsRUFBUSxLQUMzQnRCLEVBQTZCLEVBQVEsTUFDckNDLEVBQVUsRUFBUSxNQUNsQnQ1QixFQUFzQixFQUFRLE1BQzlCa04sRUFBVyxFQUFRLE1BQ25CdlMsRUFBa0IsRUFBUSxNQUMxQnVrQixFQUFVLEVBQVEsTUFDbEI1VyxFQUFhLEVBQVEsTUFFckJDLEVBQVU1TixFQUFnQixXQUMxQmlnQyxFQUFVLFVBQ1YzNkIsRUFBbUJELEVBQW9CeEIsSUFDdkMwQixFQUFtQkYsRUFBb0JHLElBQ3ZDMDZCLEVBQTBCNzZCLEVBQW9CNkssVUFBVSt2QixHQUN4REUsRUFBcUJaLEVBQ3JCMS9CLEVBQVkyQixFQUFPM0IsVUFDbkJnWSxFQUFXclcsRUFBT3FXLFNBQ2xCb0MsRUFBVXpZLEVBQU95WSxRQUNqQm1tQixFQUFTbG1CLEVBQVcsU0FDcEI0USxFQUF1QjRULEVBQTJCbCtCLEVBQ2xENi9CLEVBQThCdlYsRUFDOUJ3VixLQUFvQnpvQixHQUFZQSxFQUFTMG9CLGFBQWUvK0IsRUFBT2cvQixlQUMvREMsRUFBeUQsbUJBQXpCQyxzQkFDaENDLEVBQXNCLHFCQVN0Qm56QixFQUFTK0UsRUFBUzB0QixHQUFTLFdBRTdCLEdBRDZCemYsRUFBYzJmLEtBQXdCcmdDLE9BQU9xZ0MsR0FDN0MsQ0FJM0IsR0FBbUIsS0FBZnh5QixFQUFtQixPQUFPLEVBRTlCLElBQUs0VyxJQUFZa2MsRUFBd0IsT0FBTyxFQUdsRCxHQUFJanFCLElBQVkycEIsRUFBbUI3L0IsVUFBbUIsUUFBRyxPQUFPLEVBSWhFLEdBQUlxTixHQUFjLElBQU0sY0FBY3FNLEtBQUttbUIsR0FBcUIsT0FBTyxFQUV2RSxJQUFJamMsRUFBVWljLEVBQW1CbGIsUUFBUSxHQUNyQzJiLEVBQWMsU0FBVTF4QixHQUMxQkEsR0FBSyxlQUE2QixnQkFJcEMsT0FGa0JnVixFQUFRbmMsWUFBYyxJQUM1QjZGLEdBQVdnekIsSUFDZDFjLEVBQVFDLE1BQUsseUJBQXdDeWMsTUFHNURDLEVBQXNCcnpCLElBQVdpRixHQUE0QixTQUFVbEMsR0FDekU0dkIsRUFBbUJXLElBQUl2d0IsR0FBaUIsT0FBRSxrQkFJeEN3d0IsRUFBYSxTQUFVbmhDLEdBQ3pCLElBQUl1a0IsRUFDSixTQUFPcGtCLEVBQVNILElBQWtDLG1CQUFuQnVrQixFQUFPdmtCLEVBQUd1a0IsUUFBc0JBLEdBRzdESixFQUFTLFNBQVVqVCxFQUFPa3dCLEdBQzVCLElBQUlsd0IsRUFBTW13QixTQUFWLENBQ0Fud0IsRUFBTW13QixVQUFXLEVBQ2pCLElBQUlDLEVBQVFwd0IsRUFBTXF3QixVQUNsQnBCLEdBQVUsV0FLUixJQUpBLElBQUlyL0IsRUFBUW9RLEVBQU1wUSxNQUNkMGdDLEVBaERRLEdBZ0RIdHdCLEVBQU1BLE1BQ1hoUSxFQUFRLEVBRUxvZ0MsRUFBTWxnQyxPQUFTRixHQUFPLENBQzNCLElBS0lpSyxFQUFRb1osRUFBTWtkLEVBTGRDLEVBQVdKLEVBQU1wZ0MsS0FDakJ5Z0MsRUFBVUgsRUFBS0UsRUFBU0YsR0FBS0UsRUFBU0UsS0FDdEN2YyxFQUFVcWMsRUFBU3JjLFFBQ25CbUIsRUFBU2tiLEVBQVNsYixPQUNsQnRCLEVBQVN3YyxFQUFTeGMsT0FFdEIsSUFDTXljLEdBQ0dILElBekRDLElBMERBdHdCLEVBQU0yd0IsV0FBeUJDLEdBQWtCNXdCLEdBQ3JEQSxFQUFNMndCLFVBNURKLElBOERZLElBQVpGLEVBQWtCeDJCLEVBQVNySyxHQUV6Qm9rQixHQUFRQSxFQUFPRSxRQUNuQmphLEVBQVN3MkIsRUFBUTdnQyxHQUNib2tCLElBQ0ZBLEVBQU9DLE9BQ1BzYyxHQUFTLElBR1R0MkIsSUFBV3UyQixFQUFTcGQsUUFDdEJrQyxFQUFPdm1CLEVBQVUseUJBQ1Jza0IsRUFBTzRjLEVBQVdoMkIsSUFDM0JvWixFQUFLbGdCLEtBQUs4RyxFQUFRa2EsRUFBU21CLEdBQ3RCbkIsRUFBUWxhLElBQ1ZxYixFQUFPMWxCLEdBQ2QsTUFBTytELEdBQ0hxZ0IsSUFBV3VjLEdBQVF2YyxFQUFPQyxPQUM5QnFCLEVBQU8zaEIsSUFHWHFNLEVBQU1xd0IsVUFBWSxHQUNsQnJ3QixFQUFNbXdCLFVBQVcsRUFDYkQsSUFBYWx3QixFQUFNMndCLFdBQVdFLEdBQVk3d0IsUUFJOUMwdkIsRUFBZ0IsU0FBVXQvQixFQUFNZ2pCLEVBQVNnYixHQUMzQyxJQUFJbE8sRUFBT3VRLEVBQ1BqQixJQUNGdFAsRUFBUW5aLEVBQVMwb0IsWUFBWSxVQUN2QnJjLFFBQVVBLEVBQ2hCOE0sRUFBTWtPLE9BQVNBLEVBQ2ZsTyxFQUFNNFEsVUFBVTFnQyxHQUFNLEdBQU8sR0FDN0JNLEVBQU9nL0IsY0FBY3hQLElBQ2hCQSxFQUFRLENBQUU5TSxRQUFTQSxFQUFTZ2IsT0FBUUEsSUFDdEN1QixJQUEyQmMsRUFBVS8vQixFQUFPLEtBQU9OLElBQVFxZ0MsRUFBUXZRLEdBQy9EOXZCLElBQVN5L0IsR0FBcUJYLEVBQWlCLDhCQUErQmQsSUFHckZ5QyxHQUFjLFNBQVU3d0IsR0FDMUJ3VSxFQUFLcmhCLEtBQUt6QyxHQUFRLFdBQ2hCLElBR0l1SixFQUhBbVosRUFBVXBULEVBQU00USxPQUNoQmhoQixFQUFRb1EsRUFBTXBRLE1BR2xCLEdBRm1CbWhDLEdBQVkvd0IsS0FHN0IvRixFQUFTNHpCLEdBQVEsV0FDWHBhLEVBQ0Z0SyxFQUFRNm5CLEtBQUsscUJBQXNCcGhDLEVBQU93akIsR0FDckNzYyxFQUFjRyxFQUFxQnpjLEVBQVN4akIsTUFHckRvUSxFQUFNMndCLFVBQVlsZCxHQUFXc2QsR0FBWS93QixHQWpIL0IsRUFERixFQW1ISi9GLEVBQU90RyxPQUFPLE1BQU1zRyxFQUFPckssVUFLakNtaEMsR0FBYyxTQUFVL3dCLEdBQzFCLE9BekhZLElBeUhMQSxFQUFNMndCLFlBQTBCM3dCLEVBQU0rVCxRQUczQzZjLEdBQW9CLFNBQVU1d0IsR0FDaEN3VSxFQUFLcmhCLEtBQUt6QyxHQUFRLFdBQ2hCLElBQUkwaUIsRUFBVXBULEVBQU00USxPQUNoQjZDLEVBQ0Z0SyxFQUFRNm5CLEtBQUssbUJBQW9CNWQsR0FDNUJzYyxFQXJJYSxtQkFxSW9CdGMsRUFBU3BULEVBQU1wUSxXQUl2RCtKLEdBQU8sU0FBVW1FLEVBQUlrQyxFQUFPaXhCLEdBQzlCLE9BQU8sU0FBVXJoQyxHQUNma08sRUFBR2tDLEVBQU9wUSxFQUFPcWhDLEtBSWpCQyxHQUFpQixTQUFVbHhCLEVBQU9wUSxFQUFPcWhDLEdBQ3ZDanhCLEVBQU14RixPQUNWd0YsRUFBTXhGLE1BQU8sRUFDVHkyQixJQUFRanhCLEVBQVFpeEIsR0FDcEJqeEIsRUFBTXBRLE1BQVFBLEVBQ2RvUSxFQUFNQSxNQWpKTyxFQWtKYmlULEVBQU9qVCxHQUFPLEtBR1pteEIsR0FBa0IsU0FBVW54QixFQUFPcFEsRUFBT3FoQyxHQUM1QyxJQUFJanhCLEVBQU14RixLQUFWLENBQ0F3RixFQUFNeEYsTUFBTyxFQUNUeTJCLElBQVFqeEIsRUFBUWl4QixHQUNwQixJQUNFLEdBQUlqeEIsRUFBTTRRLFNBQVdoaEIsRUFBTyxNQUFNYixFQUFVLG9DQUM1QyxJQUFJc2tCLEVBQU80YyxFQUFXcmdDLEdBQ2xCeWpCLEVBQ0Y0YixHQUFVLFdBQ1IsSUFBSTN2QixFQUFVLENBQUU5RSxNQUFNLEdBQ3RCLElBQ0U2WSxFQUFLbGdCLEtBQUt2RCxFQUNSK0osR0FBS3czQixHQUFpQjd4QixFQUFTVSxHQUMvQnJHLEdBQUt1M0IsR0FBZ0I1eEIsRUFBU1UsSUFFaEMsTUFBT3JNLEdBQ1B1OUIsR0FBZTV4QixFQUFTM0wsRUFBT3FNLFFBSW5DQSxFQUFNcFEsTUFBUUEsRUFDZG9RLEVBQU1BLE1BM0tJLEVBNEtWaVQsRUFBT2pULEdBQU8sSUFFaEIsTUFBT3JNLEdBQ1B1OUIsR0FBZSxDQUFFMTJCLE1BQU0sR0FBUzdHLEVBQU9xTSxNQUt2Q3RELElBRUYyeUIsRUFBcUIsU0FBaUIrQixHQUNwQ3I5QixFQUFXbkYsS0FBTXlnQyxFQUFvQkYsR0FDckM5eEIsRUFBVSt6QixHQUNWdkMsRUFBUzE3QixLQUFLdkUsTUFDZCxJQUFJb1IsRUFBUXhMLEVBQWlCNUYsTUFDN0IsSUFDRXdpQyxFQUFTejNCLEdBQUt3M0IsR0FBaUJueEIsR0FBUXJHLEdBQUt1M0IsR0FBZ0JseEIsSUFDNUQsTUFBT3JNLEdBQ1B1OUIsR0FBZWx4QixFQUFPck0sTUFJMUJrN0IsRUFBVyxTQUFpQnVDLEdBQzFCMzhCLEVBQWlCN0YsS0FBTSxDQUNyQjhRLEtBQU15dkIsRUFDTjMwQixNQUFNLEVBQ04yMUIsVUFBVSxFQUNWcGMsUUFBUSxFQUNSc2MsVUFBVyxHQUNYTSxXQUFXLEVBQ1gzd0IsTUEzTVEsRUE0TVJwUSxXQUFPSCxNQUdGRCxVQUFZcUUsRUFBWXc3QixFQUFtQjcvQixVQUFXLENBRzdENmpCLEtBQU0sU0FBY2dlLEVBQWFDLEdBQy9CLElBQUl0eEIsRUFBUW92QixFQUF3QnhnQyxNQUNoQzRoQyxFQUFXeFcsRUFBcUI2SSxFQUFtQmowQixLQUFNeWdDLElBTzdELE9BTkFtQixFQUFTRixHQUEyQixtQkFBZmUsR0FBNEJBLEVBQ2pEYixFQUFTRSxLQUE0QixtQkFBZFksR0FBNEJBLEVBQ25EZCxFQUFTeGMsT0FBU1AsRUFBVXRLLEVBQVE2SyxZQUFTdmtCLEVBQzdDdVEsRUFBTStULFFBQVMsRUFDZi9ULEVBQU1xd0IsVUFBVWwxQixLQUFLcTFCLEdBek5iLEdBME5KeHdCLEVBQU1BLE9BQWtCaVQsRUFBT2pULEdBQU8sR0FDbkN3d0IsRUFBU3BkLFNBSWxCLE1BQVMsU0FBVWtlLEdBQ2pCLE9BQU8xaUMsS0FBS3lrQixVQUFLNWpCLEVBQVc2aEMsTUFHaEN4QyxFQUF1QixXQUNyQixJQUFJMWIsRUFBVSxJQUFJeWIsRUFDZDd1QixFQUFReEwsRUFBaUI0ZSxHQUM3QnhrQixLQUFLd2tCLFFBQVVBLEVBQ2Z4a0IsS0FBS3VsQixRQUFVeGEsR0FBS3czQixHQUFpQm54QixHQUNyQ3BSLEtBQUswbUIsT0FBUzNiLEdBQUt1M0IsR0FBZ0JseEIsSUFFckM0dEIsRUFBMkJsK0IsRUFBSXNxQixFQUF1QixTQUFVOW1CLEdBQzlELE9BQU9BLElBQU1tOEIsR0FBc0JuOEIsSUFBTTY3QixFQUNyQyxJQUFJRCxFQUFxQjU3QixHQUN6QnE4QixFQUE0QnI4QixJQUc3QndTLEdBQW1DLG1CQUFqQitvQixJQUNyQk8sRUFBYVAsRUFBY2ovQixVQUFVNmpCLEtBR3JDdmlCLEVBQVMyOUIsRUFBY2ovQixVQUFXLFFBQVEsU0FBYzZoQyxFQUFhQyxHQUNuRSxJQUFJMTFCLEVBQU9oTixLQUNYLE9BQU8sSUFBSXlnQyxHQUFtQixTQUFVbGIsRUFBU21CLEdBQy9DMFosRUFBVzc3QixLQUFLeUksRUFBTXVZLEVBQVNtQixNQUM5QmpDLEtBQUtnZSxFQUFhQyxLQUVwQixDQUFFLzVCLFFBQVEsSUFHUSxtQkFBViszQixHQUFzQjl0QixFQUFFLENBQUU5USxRQUFRLEVBQU11VCxZQUFZLEVBQU14USxRQUFRLEdBQVEsQ0FFbkY4OUIsTUFBTyxTQUFlaFcsR0FDcEIsT0FBT3lTLEVBQWVxQixFQUFvQkMsRUFBTzF5QixNQUFNbE0sRUFBUWtILGlCQU12RTRKLEVBQUUsQ0FBRTlRLFFBQVEsRUFBTThnQyxNQUFNLEVBQU0vOUIsT0FBUWlKLEdBQVUsQ0FDOUNrWCxRQUFTeWIsSUFHWC82QixFQUFlKzZCLEVBQW9CRixHQUFTLEdBQU8sR0FDbkRsd0IsRUFBV2t3QixHQUVYSixFQUFpQjNsQixFQUFXK2xCLEdBRzVCM3RCLEVBQUUsQ0FBRTNJLE9BQVFzMkIsRUFBU2hsQixNQUFNLEVBQU0xVyxPQUFRaUosR0FBVSxDQUdqRDRZLE9BQVEsU0FBZ0JtYyxHQUN0QixJQUFJMUQsRUFBYS9ULEVBQXFCcHJCLE1BRXRDLE9BREFtL0IsRUFBV3pZLE9BQU9uaUIsVUFBSzFELEVBQVdnaUMsR0FDM0IxRCxFQUFXM2EsV0FJdEI1UixFQUFFLENBQUUzSSxPQUFRczJCLEVBQVNobEIsTUFBTSxFQUFNMVcsT0FBUWlTLEdBQVdoSixHQUFVLENBRzVEeVgsUUFBUyxTQUFpQjdCLEdBQ3hCLE9BQU8wYixFQUFldG9CLEdBQVc5VyxPQUFTbWdDLEVBQWlCTSxFQUFxQnpnQyxLQUFNMGpCLE1BSTFGOVEsRUFBRSxDQUFFM0ksT0FBUXMyQixFQUFTaGxCLE1BQU0sRUFBTTFXLE9BQVFzOEIsR0FBdUIsQ0FHOURDLElBQUssU0FBYXZ3QixHQUNoQixJQUFJdk0sRUFBSXRFLEtBQ0ptL0IsRUFBYS9ULEVBQXFCOW1CLEdBQ2xDaWhCLEVBQVU0WixFQUFXNVosUUFDckJtQixFQUFTeVksRUFBV3pZLE9BQ3BCcmIsRUFBUzR6QixHQUFRLFdBQ25CLElBQUk2RCxFQUFrQnIwQixFQUFVbkssRUFBRWloQixTQUM5QnhOLEVBQVMsR0FDVDBYLEVBQVUsRUFDVjRQLEVBQVksRUFDaEJsdkIsRUFBUVUsR0FBVSxTQUFVMlQsR0FDMUIsSUFBSXBqQixFQUFRcXVCLElBQ1I2UCxHQUFnQixFQUNwQnZuQixFQUFPeEwsVUFBSzFMLEdBQ1p3K0IsSUFDQXlELEVBQWdCditCLEtBQUtELEVBQUdrZ0IsR0FBU0MsTUFBSyxTQUFVempCLEdBQzFDcytCLElBQ0pBLEdBQWdCLEVBQ2hCdm5CLEVBQU8zVyxHQUFTSixJQUNkcStCLEdBQWE5WixFQUFReE4sTUFDdEIyTyxRQUVIMlksR0FBYTlaLEVBQVF4TixNQUd6QixPQURJMU0sRUFBT3RHLE9BQU8yaEIsRUFBT3JiLEVBQU9ySyxPQUN6Qm0rQixFQUFXM2EsU0FJcEJ1ZSxLQUFNLFNBQWNseUIsR0FDbEIsSUFBSXZNLEVBQUl0RSxLQUNKbS9CLEVBQWEvVCxFQUFxQjltQixHQUNsQ29pQixFQUFTeVksRUFBV3pZLE9BQ3BCcmIsRUFBUzR6QixHQUFRLFdBQ25CLElBQUk2RCxFQUFrQnIwQixFQUFVbkssRUFBRWloQixTQUNsQ3BWLEVBQVFVLEdBQVUsU0FBVTJULEdBQzFCc2UsRUFBZ0J2K0IsS0FBS0QsRUFBR2tnQixHQUFTQyxLQUFLMGEsRUFBVzVaLFFBQVNtQixTQUk5RCxPQURJcmIsRUFBT3RHLE9BQU8yaEIsRUFBT3JiLEVBQU9ySyxPQUN6Qm0rQixFQUFXM2EsWSxjQzFYdEIsSUFBSTVSLEVBQUksRUFBUSxNQUNaNEgsRUFBYSxFQUFRLE1BQ3JCL0wsRUFBWSxFQUFRLE1BQ3BCTyxFQUFXLEVBQVEsTUFDbkI5SixFQUFRLEVBQVEsTUFFaEI4OUIsRUFBY3hvQixFQUFXLFVBQVcsU0FDcEN5b0IsRUFBZ0IvK0IsU0FBUzhKLE1BUzdCNEUsRUFBRSxDQUFFM0ksT0FBUSxVQUFXc1IsTUFBTSxFQUFNMVcsUUFOSkssR0FBTSxXQUNuQzg5QixHQUFZLG1CQUt3RCxDQUNwRWgxQixNQUFPLFNBQWUvRCxFQUFRaTVCLEVBQWNDLEdBRzFDLE9BRkExMEIsRUFBVXhFLEdBQ1YrRSxFQUFTbTBCLEdBQ0ZILEVBQ0hBLEVBQVkvNEIsRUFBUWk1QixFQUFjQyxHQUNsQ0YsRUFBYzErQixLQUFLMEYsRUFBUWk1QixFQUFjQyxPLGVDdEJqRCxJQUFJdndCLEVBQUksRUFBUSxNQUNaNEgsRUFBYSxFQUFRLE1BQ3JCL0wsRUFBWSxFQUFRLE1BQ3BCTyxFQUFXLEVBQVEsTUFDbkIzTyxFQUFXLEVBQVEsS0FDbkJFLEVBQVMsRUFBUSxJQUNqQndLLEVBQU8sRUFBUSxNQUNmN0YsRUFBUSxFQUFRLE1BRWhCaytCLEVBQWtCNW9CLEVBQVcsVUFBVyxhQU14QzZvQixFQUFpQm4rQixHQUFNLFdBQ3pCLFNBQVNzUCxLQUNULFFBQVM0dUIsR0FBZ0IsY0FBNkIsR0FBSTV1QixhQUFjQSxNQUV0RTh1QixHQUFZcCtCLEdBQU0sV0FDcEJrK0IsR0FBZ0Isa0JBRWR0MUIsRUFBU3UxQixHQUFrQkMsRUFFL0Ixd0IsRUFBRSxDQUFFM0ksT0FBUSxVQUFXc1IsTUFBTSxFQUFNMVcsT0FBUWlKLEVBQVEyTixLQUFNM04sR0FBVSxDQUNqRWtRLFVBQVcsU0FBbUJ1bEIsRUFBUXJsQixHQUNwQ3pQLEVBQVU4MEIsR0FDVnYwQixFQUFTa1AsR0FDVCxJQUFJc2xCLEVBQVl4NkIsVUFBVTFILE9BQVMsRUFBSWlpQyxFQUFTOTBCLEVBQVV6RixVQUFVLElBQ3BFLEdBQUlzNkIsSUFBYUQsRUFBZ0IsT0FBT0QsRUFBZ0JHLEVBQVFybEIsRUFBTXNsQixHQUN0RSxHQUFJRCxHQUFVQyxFQUFXLENBRXZCLE9BQVF0bEIsRUFBSzVjLFFBQ1gsS0FBSyxFQUFHLE9BQU8sSUFBSWlpQyxFQUNuQixLQUFLLEVBQUcsT0FBTyxJQUFJQSxFQUFPcmxCLEVBQUssSUFDL0IsS0FBSyxFQUFHLE9BQU8sSUFBSXFsQixFQUFPcmxCLEVBQUssR0FBSUEsRUFBSyxJQUN4QyxLQUFLLEVBQUcsT0FBTyxJQUFJcWxCLEVBQU9ybEIsRUFBSyxHQUFJQSxFQUFLLEdBQUlBLEVBQUssSUFDakQsS0FBSyxFQUFHLE9BQU8sSUFBSXFsQixFQUFPcmxCLEVBQUssR0FBSUEsRUFBSyxHQUFJQSxFQUFLLEdBQUlBLEVBQUssSUFHNUQsSUFBSXVsQixFQUFRLENBQUMsTUFFYixPQURBQSxFQUFNbDNCLEtBQUt5QixNQUFNeTFCLEVBQU92bEIsR0FDakIsSUFBS25ULEVBQUtpRCxNQUFNdTFCLEVBQVFFLElBR2pDLElBQUl6ckIsRUFBUXdyQixFQUFVNWlDLFVBQ2xCNlMsRUFBV2xULEVBQU9GLEVBQVMyWCxHQUFTQSxFQUFRbFYsT0FBT2xDLFdBQ25EeUssRUFBU25ILFNBQVM4SixNQUFNekosS0FBS2cvQixFQUFROXZCLEVBQVV5SyxHQUNuRCxPQUFPN2QsRUFBU2dMLEdBQVVBLEVBQVNvSSxNLGVDaER2QyxJQUFJYixFQUFJLEVBQVEsTUFDWi9RLEVBQWMsRUFBUSxNQUN0Qm1OLEVBQVcsRUFBUSxNQUNuQnVHLEVBQWMsRUFBUSxNQUN0Qi9VLEVBQXVCLEVBQVEsTUFXbkNvUyxFQUFFLENBQUUzSSxPQUFRLFVBQVdzUixNQUFNLEVBQU0xVyxPQVZ2QixFQUFRLEtBR1NLLEVBQU0sV0FFakN3K0IsUUFBUXZoQyxlQUFlM0IsRUFBcUJNLEVBQUUsR0FBSSxFQUFHLENBQUVFLE1BQU8sSUFBTSxFQUFHLENBQUVBLE1BQU8sT0FLZnlhLE1BQU81WixHQUFlLENBQ3ZGTSxlQUFnQixTQUF3QjhILEVBQVF1TCxFQUFhbXVCLEdBQzNEMzBCLEVBQVMvRSxHQUNULElBQUloSixFQUFNc1UsRUFBWUMsR0FBYSxHQUNuQ3hHLEVBQVMyMEIsR0FDVCxJQUVFLE9BREFuakMsRUFBcUJNLEVBQUVtSixFQUFRaEosRUFBSzBpQyxJQUM3QixFQUNQLE1BQU81K0IsR0FDUCxPQUFPLE8sZUN4QmIsSUFBSTZOLEVBQUksRUFBUSxNQUNaNUQsRUFBVyxFQUFRLE1BQ25CbUYsRUFBMkIsVUFJL0J2QixFQUFFLENBQUUzSSxPQUFRLFVBQVdzUixNQUFNLEdBQVEsQ0FDbkNxb0IsZUFBZ0IsU0FBd0IzNUIsRUFBUXVMLEdBQzlDLElBQUkyRixFQUFhaEgsRUFBeUJuRixFQUFTL0UsR0FBU3VMLEdBQzVELFFBQU8yRixJQUFlQSxFQUFXcGEsc0JBQThCa0osRUFBT3VMLE8sZUNUMUUsSUFBSTVDLEVBQUksRUFBUSxNQUNaL1EsRUFBYyxFQUFRLE1BQ3RCbU4sRUFBVyxFQUFRLE1BQ25CaUYsRUFBaUMsRUFBUSxNQUk3Q3JCLEVBQUUsQ0FBRTNJLE9BQVEsVUFBV3NSLE1BQU0sRUFBTUUsTUFBTzVaLEdBQWUsQ0FDdkRzUyx5QkFBMEIsU0FBa0NsSyxFQUFRdUwsR0FDbEUsT0FBT3ZCLEVBQStCblQsRUFBRWtPLEVBQVMvRSxHQUFTdUwsTyxlQ1Q5RCxJQUFJNUMsRUFBSSxFQUFRLE1BQ1o1RCxFQUFXLEVBQVEsTUFDbkI2MEIsRUFBdUIsRUFBUSxNQUtuQ2p4QixFQUFFLENBQUUzSSxPQUFRLFVBQVdzUixNQUFNLEVBQU1FLE1BSkosRUFBUSxPQUkrQixDQUNwRXJaLGVBQWdCLFNBQXdCNkgsR0FDdEMsT0FBTzQ1QixFQUFxQjcwQixFQUFTL0UsUSxlQ1R6QyxJQUFJMkksRUFBSSxFQUFRLE1BQ1p2UyxFQUFXLEVBQVEsS0FDbkIyTyxFQUFXLEVBQVEsTUFDbkJqTixFQUFNLEVBQVEsTUFDZGtTLEVBQWlDLEVBQVEsTUFDekM3UixFQUFpQixFQUFRLE1BZ0I3QndRLEVBQUUsQ0FBRTNJLE9BQVEsVUFBV3NSLE1BQU0sR0FBUSxDQUNuQ3BYLElBYkYsU0FBU0EsRUFBSThGLEVBQVF1TCxHQUNuQixJQUNJMkYsRUFBWXZhLEVBRFprakMsRUFBVzk2QixVQUFVMUgsT0FBUyxFQUFJMkksRUFBU2pCLFVBQVUsR0FFekQsT0FBSWdHLEVBQVMvRSxLQUFZNjVCLEVBQWlCNzVCLEVBQU91TCxJQUM3QzJGLEVBQWFsSCxFQUErQm5ULEVBQUVtSixFQUFRdUwsSUFBcUJ6VCxFQUFJb1osRUFBWSxTQUMzRkEsRUFBV25hLFdBQ1FILElBQW5Cc2EsRUFBV2hYLFNBQ1R0RCxFQUNBc2EsRUFBV2hYLElBQUlJLEtBQUt1L0IsR0FDdEJ6akMsRUFBU08sRUFBWXdCLEVBQWU2SCxJQUFpQjlGLEVBQUl2RCxFQUFXNFUsRUFBYXN1QixRQUFyRixNLGVDbEJNLEVBQVEsS0FJaEJseEIsQ0FBRSxDQUFFM0ksT0FBUSxVQUFXc1IsTUFBTSxHQUFRLENBQ25DeFosSUFBSyxTQUFha0ksRUFBUXVMLEdBQ3hCLE9BQU9BLEtBQWV2TCxNLGVDTjFCLElBQUkySSxFQUFJLEVBQVEsTUFDWjVELEVBQVcsRUFBUSxNQUVuQiswQixFQUFxQmpoQyxPQUFPNmEsYUFJaEMvSyxFQUFFLENBQUUzSSxPQUFRLFVBQVdzUixNQUFNLEdBQVEsQ0FDbkNvQyxhQUFjLFNBQXNCMVQsR0FFbEMsT0FEQStFLEVBQVMvRSxJQUNGODVCLEdBQXFCQSxFQUFtQjk1QixPLGVDVjNDLEVBQVEsS0FLaEIySSxDQUFFLENBQUUzSSxPQUFRLFVBQVdzUixNQUFNLEdBQVEsQ0FDbkN2SCxRQUxZLEVBQVEsUyxlQ0R0QixJQUFJcEIsRUFBSSxFQUFRLE1BQ1o0SCxFQUFhLEVBQVEsTUFDckJ4TCxFQUFXLEVBQVEsTUFLdkI0RCxFQUFFLENBQUUzSSxPQUFRLFVBQVdzUixNQUFNLEVBQU1FLE1BSnBCLEVBQVEsT0FJK0IsQ0FDcERtQyxrQkFBbUIsU0FBMkIzVCxHQUM1QytFLEVBQVMvRSxHQUNULElBQ0UsSUFBSSs1QixFQUEwQnhwQixFQUFXLFNBQVUscUJBRW5ELE9BREl3cEIsR0FBeUJBLEVBQXdCLzVCLElBQzlDLEVBQ1AsTUFBT2xGLEdBQ1AsT0FBTyxPLGVDZmIsSUFBSTZOLEVBQUksRUFBUSxNQUNaNUQsRUFBVyxFQUFRLE1BQ25COGIsRUFBcUIsRUFBUSxNQUM3Qm1aLEVBQXVCLEVBQVEsTUFJL0JBLEdBQXNCcnhCLEVBQUUsQ0FBRTNJLE9BQVEsVUFBV3NSLE1BQU0sR0FBUSxDQUM3RGxaLGVBQWdCLFNBQXdCNEgsRUFBUStOLEdBQzlDaEosRUFBUy9FLEdBQ1Q2Z0IsRUFBbUI5UyxHQUNuQixJQUVFLE9BREFpc0IsRUFBcUJoNkIsRUFBUStOLElBQ3RCLEVBQ1AsTUFBT2pULEdBQ1AsT0FBTyxPLGVDZmIsSUFBSTZOLEVBQUksRUFBUSxNQUNaNUQsRUFBVyxFQUFRLE1BQ25CM08sRUFBVyxFQUFRLEtBQ25CMEIsRUFBTSxFQUFRLE1BQ2RtRCxFQUFRLEVBQVEsTUFDaEIxRSxFQUF1QixFQUFRLE1BQy9CeVQsRUFBaUMsRUFBUSxNQUN6QzdSLEVBQWlCLEVBQVEsTUFDekI0UyxFQUEyQixFQUFRLE1BbUN2Q3BDLEVBQUUsQ0FBRTNJLE9BQVEsVUFBV3NSLE1BQU0sRUFBTTFXLE9BUGpCSyxHQUFNLFdBQ3RCLElBQUkzRCxFQUFjLGFBQ2RvTyxFQUFTblAsRUFBcUJNLEVBQUUsSUFBSVMsRUFBZSxJQUFLLENBQUVSLGNBQWMsSUFFNUUsT0FBOEQsSUFBdkQyaUMsUUFBUTU5QixJQUFJdkUsRUFBWVgsVUFBVyxJQUFLLEVBQUcrTyxPQUdNLENBQ3hEN0osSUFoQ0YsU0FBU0EsRUFBSW1FLEVBQVF1TCxFQUFhbVYsR0FDaEMsSUFFSXVaLEVBQW9CdGpDLEVBRnBCa2pDLEVBQVc5NkIsVUFBVTFILE9BQVMsRUFBSTJJLEVBQVNqQixVQUFVLEdBQ3JEbTdCLEVBQWdCbHdCLEVBQStCblQsRUFBRWtPLEVBQVMvRSxHQUFTdUwsR0FFdkUsSUFBSzJ1QixFQUFlLENBQ2xCLEdBQUk5akMsRUFBU08sRUFBWXdCLEVBQWU2SCxJQUN0QyxPQUFPbkUsRUFBSWxGLEVBQVc0VSxFQUFhbVYsRUFBR21aLEdBRXhDSyxFQUFnQm52QixFQUF5QixHQUUzQyxHQUFJalQsRUFBSW9pQyxFQUFlLFNBQVUsQ0FDL0IsSUFBK0IsSUFBM0JBLEVBQWM3dUIsV0FBdUJqVixFQUFTeWpDLEdBQVcsT0FBTyxFQUNwRSxHQUFJSSxFQUFxQmp3QixFQUErQm5ULEVBQUVnakMsRUFBVXR1QixHQUFjLENBQ2hGLEdBQUkwdUIsRUFBbUIvL0IsS0FBTysvQixFQUFtQnArQixNQUF1QyxJQUFoQ28rQixFQUFtQjV1QixTQUFvQixPQUFPLEVBQ3RHNHVCLEVBQW1CbGpDLE1BQVEycEIsRUFDM0JucUIsRUFBcUJNLEVBQUVnakMsRUFBVXR1QixFQUFhMHVCLFFBQ3pDMWpDLEVBQXFCTSxFQUFFZ2pDLEVBQVV0dUIsRUFBYVIsRUFBeUIsRUFBRzJWLElBQ2pGLE9BQU8sRUFFVCxZQUE2QjlwQixJQUF0QnNqQyxFQUFjcitCLE1BQTZCcStCLEVBQWNyK0IsSUFBSXZCLEtBQUt1L0IsRUFBVW5aLElBQUksTyxlQy9CekYsSUFBSS9YLEVBQUksRUFBUSxNQUNaOVEsRUFBUyxFQUFRLE1BQ2pCNEQsRUFBaUIsRUFBUSxNQUU3QmtOLEVBQUUsQ0FBRTlRLFFBQVEsR0FBUSxDQUFFNGhDLFFBQVMsS0FJL0JoK0IsRUFBZTVELEVBQU80aEMsUUFBUyxXQUFXLEksZUNSMUMsSUFBSTdoQyxFQUFjLEVBQVEsTUFDdEJDLEVBQVMsRUFBUSxNQUNqQitRLEVBQVcsRUFBUSxNQUNuQkcsRUFBb0IsRUFBUSxNQUM1QjdRLEVBQWlCLFVBQ2pCcUQsRUFBc0IsVUFDdEJpZCxFQUFXLEVBQVEsTUFDbkIyaEIsRUFBVyxFQUFRLE1BQ25CdlksRUFBZ0IsRUFBUSxNQUN4QjNwQixFQUFXLEVBQVEsTUFDbkJnRCxFQUFRLEVBQVEsTUFDaEJXLEVBQW1CLFlBQ25Cd0ssRUFBYSxFQUFRLE1BR3JCK0QsRUFGa0IsRUFBUSxLQUVsQjlULENBQWdCLFNBQ3hCK2pDLEVBQWV2aUMsRUFBT2liLE9BQ3RCdW5CLEVBQWtCRCxFQUFhempDLFVBQy9COHFCLEVBQU0sS0FDTkMsRUFBTSxLQUdONFksRUFBYyxJQUFJRixFQUFhM1ksS0FBU0EsRUFFeENTLEVBQWdCTixFQUFjTSxjQVVsQyxHQVJhdHFCLEdBQWVnUixFQUFTLFVBQVkweEIsR0FBZXBZLEdBQWlCam5CLEdBQU0sV0FHckYsT0FGQXltQixFQUFJdlgsSUFBUyxFQUVOaXdCLEVBQWEzWSxJQUFRQSxHQUFPMlksRUFBYTFZLElBQVFBLEdBQWlDLFFBQTFCMFksRUFBYTNZLEVBQUssU0FLdkUsQ0EwQ1YsSUF6Q0EsSUFBSThZLEVBQWdCLFNBQWdCQyxFQUFTam9CLEdBQzNDLElBR0krUCxFQUhBbVksRUFBZTFrQyxnQkFBZ0J3a0MsRUFDL0JHLEVBQWtCbGlCLEVBQVNnaUIsR0FDM0JHLE9BQThCL2pDLElBQVYyYixFQUd4QixJQUFLa29CLEdBQWdCQyxHQUFtQkYsRUFBUXA4QixjQUFnQm04QixHQUFpQkksRUFDL0UsT0FBT0gsRUFHTEYsRUFDRUksSUFBb0JDLElBQW1CSCxFQUFVQSxFQUFRdndCLFFBQ3BEdXdCLGFBQW1CRCxJQUN4QkksSUFBbUJwb0IsRUFBUTRuQixFQUFTNy9CLEtBQUtrZ0MsSUFDN0NBLEVBQVVBLEVBQVF2d0IsUUFHaEJpWSxJQUNGSSxJQUFXL1AsR0FBU0EsRUFBTXBRLFFBQVEsTUFBUSxLQUM5Qm9RLEVBQVFBLEVBQU0xSCxRQUFRLEtBQU0sS0FHMUMsSUFBSXpKLEVBQVMySCxFQUNYdXhCLEVBQWMsSUFBSUYsRUFBYUksRUFBU2pvQixHQUFTNm5CLEVBQWFJLEVBQVNqb0IsR0FDdkVrb0IsRUFBZTFrQyxLQUFPc2tDLEVBQ3RCRSxHQUtGLE9BRklyWSxHQUFpQkksR0FBUTFtQixFQUFpQndGLEVBQVEsQ0FBRWtoQixPQUFRQSxJQUV6RGxoQixHQUVMdzVCLEVBQVEsU0FBVTVqQyxHQUNwQkEsS0FBT3VqQyxHQUFpQnJpQyxFQUFlcWlDLEVBQWV2akMsRUFBSyxDQUN6REYsY0FBYyxFQUNkb0QsSUFBSyxXQUFjLE9BQU9rZ0MsRUFBYXBqQyxJQUN2QzZFLElBQUssU0FBVTVGLEdBQU1ta0MsRUFBYXBqQyxHQUFPZixNQUd6Q2lJLEVBQU8zQyxFQUFvQjYrQixHQUMzQmpqQyxFQUFRLEVBQ0wrRyxFQUFLN0csT0FBU0YsR0FBT3lqQyxFQUFNMThCLEVBQUsvRyxNQUN2Q2tqQyxFQUFnQmo4QixZQUFjbThCLEVBQzlCQSxFQUFjNWpDLFVBQVkwakMsRUFDMUJwaUMsRUFBU0osRUFBUSxTQUFVMGlDLEdBSTdCbjBCLEVBQVcsVyw0QkNsRlgsSUFBSXVDLEVBQUksRUFBUSxNQUNacEQsRUFBTyxFQUFRLE1BSW5Cb0QsRUFBRSxDQUFFM0ksT0FBUSxTQUFVK04sT0FBTyxFQUFNblQsT0FBUSxJQUFJMkssT0FBU0EsR0FBUSxDQUM5REEsS0FBTUEsSyxlQ1BSLElBQUkzTixFQUFjLEVBQVEsTUFDdEJpakMsRUFBNkIsRUFBUSxNQUNyQ0MsRUFBYyxFQUFRLE1BQ3RCNVksRUFBZ0Isc0JBSWhCdHFCLElBQThCLEtBQWQsS0FBSzJhLE9BQWdCMlAsSUFDdkMyWSxFQUEyQmhrQyxFQUFFaWMsT0FBT25jLFVBQVcsUUFBUyxDQUN0REcsY0FBYyxFQUNkb0QsSUFBSzRnQyxLLGVDVlQsSUFBSWxqQyxFQUFjLEVBQVEsTUFDdEJzcUIsRUFBZ0Isc0JBQ2hCaHFCLEVBQWlCLFVBQ2pCeUQsRUFBbUIsWUFDbkIwK0IsRUFBa0J2bkIsT0FBT25jLFVBSXpCaUIsR0FBZXNxQixHQUNqQmhxQixFQUFlNGEsT0FBT25jLFVBQVcsU0FBVSxDQUN6Q0csY0FBYyxFQUNkb0QsSUFBSyxXQUNILEdBQUluRSxPQUFTc2tDLEVBQWIsQ0FHQSxHQUFJdGtDLGdCQUFnQitjLE9BQ2xCLFFBQVNuWCxFQUFpQjVGLE1BQU11c0IsT0FFbEMsTUFBTXBzQixVQUFVLCtDLDRCQ2hCdEIsRUFBUSxNQUNSLElBSU1vYyxFQUNBWCxFQUxGaEosRUFBSSxFQUFRLE1BQ1p2UyxFQUFXLEVBQVEsS0FFbkJpYyxHQUNFQyxHQUFhLEdBQ2JYLEVBQUssUUFDTnBNLEtBQU8sV0FFUixPQURBK00sR0FBYSxFQUNOLElBQUkvTSxLQUFLeEIsTUFBTWhPLEtBQU1nSixhQUVKLElBQW5CNFMsRUFBR3RCLEtBQUssUUFBbUJpQyxHQUdoQ3lvQixFQUFhLElBQUkxcUIsS0FJckIxSCxFQUFFLENBQUUzSSxPQUFRLFNBQVUrTixPQUFPLEVBQU1uVCxRQUFTeVgsR0FBcUIsQ0FDL0RoQyxLQUFNLFNBQVVvQyxHQUNkLEdBQXlCLG1CQUFkMWMsS0FBS3dQLEtBQ2QsT0FBT3cxQixFQUFXemdDLEtBQUt2RSxLQUFNMGMsR0FFL0IsSUFBSXJSLEVBQVNyTCxLQUFLd1AsS0FBS2tOLEdBQ3ZCLEdBQWUsT0FBWHJSLElBQW9CaEwsRUFBU2dMLEdBQy9CLE1BQU0sSUFBSXNwQixNQUFNLHNFQUVsQixRQUFTdHBCLE0sNEJDNUJiLElBQUluSixFQUFXLEVBQVEsTUFDbkI4TSxFQUFXLEVBQVEsTUFDbkI5SixFQUFRLEVBQVEsTUFDaEJzWCxFQUFRLEVBQVEsTUFFaEJ5b0IsRUFBWSxXQUNaWCxFQUFrQnZuQixPQUFPbmMsVUFDekJza0MsRUFBaUJaLEVBQXlCLFNBRTFDYSxFQUFjamdDLEdBQU0sV0FBYyxNQUEyRCxRQUFwRGdnQyxFQUFlM2dDLEtBQUssQ0FBRTJQLE9BQVEsSUFBS3NJLE1BQU8sU0FFbkY0b0IsRUFBaUJGLEVBQWUxakMsTUFBUXlqQyxHQUl4Q0UsR0FBZUMsSUFDakJsakMsRUFBUzZhLE9BQU9uYyxVQUFXcWtDLEdBQVcsV0FDcEMsSUFBSXhaLEVBQUl6YyxFQUFTaFAsTUFDYnFsQyxFQUFJamxDLE9BQU9xckIsRUFBRXZYLFFBQ2JveEIsRUFBSzdaLEVBQUVqUCxNQUVYLE1BQU8sSUFBTTZvQixFQUFJLElBRFRqbEMsWUFBY1MsSUFBUHlrQyxHQUFvQjdaLGFBQWExTyxVQUFZLFVBQVd1bkIsR0FBbUI5bkIsRUFBTWpZLEtBQUtrbkIsR0FBSzZaLEtBRXpHLENBQUUzOEIsUUFBUSxLLDJCQ3RCZixJQUFJMHdCLEVBQWEsRUFBUSxNQUNyQkMsRUFBbUIsRUFBUSxNQUkvQno1QixFQUFPRCxRQUFVeTVCLEVBQVcsT0FBTyxTQUFVRSxHQUMzQyxPQUFPLFdBQWlCLE9BQU9BLEVBQUt2NUIsS0FBTWdKLFVBQVUxSCxPQUFTMEgsVUFBVSxRQUFLbkksTUFDM0V5NEIsSSw0QkNQSCxJQUFJMW1CLEVBQUksRUFBUSxNQUNaMnlCLEVBQWEsRUFBUSxNQUt6QjN5QixFQUFFLENBQUUzSSxPQUFRLFNBQVUrTixPQUFPLEVBQU1uVCxPQUpOLEVBQVEsS0FJTTJnQyxDQUF1QixXQUFhLENBQzdFQyxPQUFRLFNBQWdCamtDLEdBQ3RCLE9BQU8rakMsRUFBV3ZsQyxLQUFNLElBQUssT0FBUXdCLE8sNEJDUnpDLElBQUlvUixFQUFJLEVBQVEsTUFDWjJ5QixFQUFhLEVBQVEsTUFLekIzeUIsRUFBRSxDQUFFM0ksT0FBUSxTQUFVK04sT0FBTyxFQUFNblQsT0FKTixFQUFRLEtBSU0yZ0MsQ0FBdUIsUUFBVSxDQUMxRUUsSUFBSyxXQUNILE9BQU9ILEVBQVd2bEMsS0FBTSxNQUFPLEdBQUksUSw0QkNSdkMsSUFBSTRTLEVBQUksRUFBUSxNQUNaMnlCLEVBQWEsRUFBUSxNQUt6QjN5QixFQUFFLENBQUUzSSxPQUFRLFNBQVUrTixPQUFPLEVBQU1uVCxPQUpOLEVBQVEsS0FJTTJnQyxDQUF1QixVQUFZLENBQzVFRyxNQUFPLFdBQ0wsT0FBT0osRUFBV3ZsQyxLQUFNLFFBQVMsR0FBSSxRLDJCQ1J6QyxJQUFJNFMsRUFBSSxFQUFRLE1BQ1oyeUIsRUFBYSxFQUFRLE1BS3pCM3lCLEVBQUUsQ0FBRTNJLE9BQVEsU0FBVStOLE9BQU8sRUFBTW5ULE9BSk4sRUFBUSxLQUlNMmdDLENBQXVCLFNBQVcsQ0FDM0VJLEtBQU0sV0FDSixPQUFPTCxFQUFXdmxDLEtBQU0sSUFBSyxHQUFJLFEsNEJDUnJDLElBQUk0UyxFQUFJLEVBQVEsTUFDWithLEVBQVMsZUFJYi9hLEVBQUUsQ0FBRTNJLE9BQVEsU0FBVStOLE9BQU8sR0FBUSxDQUNuQzZ0QixZQUFhLFNBQXFCclksR0FDaEMsT0FBT0csRUFBTzN0QixLQUFNd3RCLE8sNEJDUHhCLElBY01yUyxFQWRGdkksRUFBSSxFQUFRLE1BQ1p1QixFQUEyQixVQUMzQjlPLEVBQVcsRUFBUSxNQUNuQnlnQyxFQUFhLEVBQVEsTUFDckJyeEIsRUFBeUIsRUFBUSxNQUNqQ3N4QixFQUF1QixFQUFRLE1BQy9CanZCLEVBQVUsRUFBUSxNQUVsQmt2QixFQUFpQixHQUFHQyxTQUNwQm44QixFQUFNQyxLQUFLRCxJQUVYbzhCLEVBQTBCSCxFQUFxQixZQVNuRG56QixFQUFFLENBQUUzSSxPQUFRLFNBQVUrTixPQUFPLEVBQU1uVCxVQVBYaVMsSUFBWW92QixJQUM5Qi9xQixFQUFhaEgsRUFBeUIvVCxPQUFPUSxVQUFXLFlBQ3JEdWEsSUFBZUEsRUFBVzdGLFdBSzhCNHdCLElBQTJCLENBQzFGRCxTQUFVLFNBQWtCRSxHQUMxQixJQUFJbjVCLEVBQU81TSxPQUFPcVUsRUFBdUJ6VSxPQUN6QzhsQyxFQUFXSyxHQUNYLElBQUlDLEVBQWNwOUIsVUFBVTFILE9BQVMsRUFBSTBILFVBQVUsUUFBS25JLEVBQ3BEc0osRUFBTTlFLEVBQVMySCxFQUFLMUwsUUFDcEJnSixPQUFzQnpKLElBQWhCdWxDLEVBQTRCajhCLEVBQU1MLEVBQUl6RSxFQUFTK2dDLEdBQWNqOEIsR0FDbkVrOEIsRUFBU2ptQyxPQUFPK2xDLEdBQ3BCLE9BQU9ILEVBQ0hBLEVBQWV6aEMsS0FBS3lJLEVBQU1xNUIsRUFBUS83QixHQUNsQzBDLEVBQUtuRixNQUFNeUMsRUFBTSs3QixFQUFPL2tDLE9BQVFnSixLQUFTKzdCLE0sNEJDOUJqRCxJQUFJenpCLEVBQUksRUFBUSxNQUNaMnlCLEVBQWEsRUFBUSxNQUt6QjN5QixFQUFFLENBQUUzSSxPQUFRLFNBQVUrTixPQUFPLEVBQU1uVCxPQUpOLEVBQVEsS0FJTTJnQyxDQUF1QixVQUFZLENBQzVFYyxNQUFPLFdBQ0wsT0FBT2YsRUFBV3ZsQyxLQUFNLEtBQU0sR0FBSSxRLDRCQ1J0QyxJQUFJNFMsRUFBSSxFQUFRLE1BQ1oyeUIsRUFBYSxFQUFRLE1BS3pCM3lCLEVBQUUsQ0FBRTNJLE9BQVEsU0FBVStOLE9BQU8sRUFBTW5ULE9BSk4sRUFBUSxLQUlNMmdDLENBQXVCLGNBQWdCLENBQ2hGZSxVQUFXLFNBQW1CQyxHQUM1QixPQUFPakIsRUFBV3ZsQyxLQUFNLE9BQVEsUUFBU3dtQyxPLDRCQ1I3QyxJQUFJNXpCLEVBQUksRUFBUSxNQUNaMnlCLEVBQWEsRUFBUSxNQUt6QjN5QixFQUFFLENBQUUzSSxPQUFRLFNBQVUrTixPQUFPLEVBQU1uVCxPQUpOLEVBQVEsS0FJTTJnQyxDQUF1QixhQUFlLENBQy9FaUIsU0FBVSxTQUFrQngxQixHQUMxQixPQUFPczBCLEVBQVd2bEMsS0FBTSxPQUFRLE9BQVFpUixPLGVDVDVDLElBQUkyQixFQUFJLEVBQVEsTUFDWi9JLEVBQWtCLEVBQVEsTUFFMUI4a0IsRUFBZXZ1QixPQUFPdXVCLGFBQ3RCK1gsRUFBc0J0bUMsT0FBT3VtQyxjQU9qQy96QixFQUFFLENBQUUzSSxPQUFRLFNBQVVzUixNQUFNLEVBQU0xVyxTQUpUNmhDLEdBQXFELEdBQTlCQSxFQUFvQnBsQyxRQUlOLENBRTVEcWxDLGNBQWUsU0FBdUJqakIsR0FLcEMsSUFKQSxJQUdJd1ksRUFIQTBLLEVBQVcsR0FDWHRsQyxFQUFTMEgsVUFBVTFILE9BQ25CMEcsRUFBSSxFQUVEMUcsRUFBUzBHLEdBQUcsQ0FFakIsR0FEQWswQixHQUFRbHpCLFVBQVVoQixLQUNkNkIsRUFBZ0JxeUIsRUFBTSxXQUFjQSxFQUFNLE1BQU01MUIsV0FBVzQxQixFQUFPLDhCQUN0RTBLLEVBQVNyNkIsS0FBSzJ2QixFQUFPLE1BQ2pCdk4sRUFBYXVOLEdBQ2J2TixFQUF5QyxRQUExQnVOLEdBQVEsUUFBWSxJQUFjQSxFQUFPLEtBQVEsUUFFcEUsT0FBTzBLLEVBQVN4b0IsS0FBSyxRLDRCQ3hCM0IsSUFBSXhMLEVBQUksRUFBUSxNQUNaa3pCLEVBQWEsRUFBUSxNQUNyQnJ4QixFQUF5QixFQUFRLE1BS3JDN0IsRUFBRSxDQUFFM0ksT0FBUSxTQUFVK04sT0FBTyxFQUFNblQsUUFKUixFQUFRLEtBSVNraEMsQ0FBcUIsYUFBZSxDQUM5RTU1QixTQUFVLFNBQWtCZzZCLEdBQzFCLFNBQVUvbEMsT0FBT3FVLEVBQXVCelUsT0FDckNvTSxRQUFRMDVCLEVBQVdLLEdBQWVuOUIsVUFBVTFILE9BQVMsRUFBSTBILFVBQVUsUUFBS25JLE8sNEJDVi9FLElBQUkrUixFQUFJLEVBQVEsTUFDWjJ5QixFQUFhLEVBQVEsTUFLekIzeUIsRUFBRSxDQUFFM0ksT0FBUSxTQUFVK04sT0FBTyxFQUFNblQsT0FKTixFQUFRLEtBSU0yZ0MsQ0FBdUIsWUFBYyxDQUM5RXFCLFFBQVMsV0FDUCxPQUFPdEIsRUFBV3ZsQyxLQUFNLElBQUssR0FBSSxRLDRCQ1JyQyxJQUFJa0IsRUFBUyxlQUNUeUUsRUFBc0IsRUFBUSxNQUM5QnlLLEVBQWlCLEVBQVEsS0FFekIwMkIsRUFBa0Isa0JBQ2xCamhDLEVBQW1CRixFQUFvQkcsSUFDdkNGLEVBQW1CRCxFQUFvQjZLLFVBQVVzMkIsR0FJckQxMkIsRUFBZWhRLE9BQVEsVUFBVSxTQUFVNFIsR0FDekNuTSxFQUFpQjdGLEtBQU0sQ0FDckI4USxLQUFNZzJCLEVBQ05ueUIsT0FBUXZVLE9BQU80UixHQUNmNVEsTUFBTyxPQUlSLFdBQ0QsSUFHSTJsQyxFQUhBMzFCLEVBQVF4TCxFQUFpQjVGLE1BQ3pCMlUsRUFBU3ZELEVBQU11RCxPQUNmdlQsRUFBUWdRLEVBQU1oUSxNQUVsQixPQUFJQSxHQUFTdVQsRUFBT3JULE9BQWUsQ0FBRU4sV0FBT0gsRUFBVytLLE1BQU0sSUFDN0RtN0IsRUFBUTdsQyxFQUFPeVQsRUFBUXZULEdBQ3ZCZ1EsRUFBTWhRLE9BQVMybEMsRUFBTXpsQyxPQUNkLENBQUVOLE1BQU8rbEMsRUFBT243QixNQUFNLFEsNEJDMUIvQixJQUFJZ0gsRUFBSSxFQUFRLE1BQ1oyeUIsRUFBYSxFQUFRLE1BS3pCM3lCLEVBQUUsQ0FBRTNJLE9BQVEsU0FBVStOLE9BQU8sRUFBTW5ULE9BSk4sRUFBUSxLQUlNMmdDLENBQXVCLFNBQVcsQ0FDM0V3QixLQUFNLFNBQWNsaEIsR0FDbEIsT0FBT3lmLEVBQVd2bEMsS0FBTSxJQUFLLE9BQVE4bEIsTyw0QkNSekMsSUFBSWxULEVBQUksRUFBUSxNQUNaaUUsRUFBNEIsRUFBUSxNQUNwQ3BDLEVBQXlCLEVBQVEsTUFDakNwUCxFQUFXLEVBQVEsTUFDbkJvSixFQUFZLEVBQVEsTUFDcEJPLEVBQVcsRUFBUSxNQUNuQmhOLEVBQVUsRUFBUSxNQUNsQnlnQixFQUFXLEVBQVEsTUFDbkJ3a0IsRUFBaUIsRUFBUSxNQUN6QmhsQyxFQUE4QixFQUFRLE1BQ3RDaUQsRUFBUSxFQUFRLE1BQ2hCNUUsRUFBa0IsRUFBUSxNQUMxQjJ6QixFQUFxQixFQUFRLE1BQzdCaVQsRUFBcUIsRUFBUSxNQUM3QnZoQyxFQUFzQixFQUFRLE1BQzlCbVIsRUFBVSxFQUFRLE1BRWxCcXdCLEVBQVk3bUMsRUFBZ0IsWUFFNUI4bUMsRUFBeUJDLHlCQUN6QnhoQyxFQUFtQkYsRUFBb0JHLElBQ3ZDRixFQUFtQkQsRUFBb0I2SyxVQUFVNDJCLEdBQ2pEOUMsRUFBa0J2bkIsT0FBT25jLFVBQ3pCMG1DLEVBQW9CaEQsRUFBZ0I5MEIsS0FDcEMrM0IsRUFBaUIsR0FBR0MsU0FFcEJDLElBQWdDRixJQUFtQnJpQyxHQUFNLFdBQzNELElBQUlzaUMsU0FBUyxRQWNYRSxFQUF3Qjd3QixHQUEwQixTQUE4QnhDLEVBQVFNLEVBQVE3UyxFQUFRNmxDLEdBQzFHOWhDLEVBQWlCN0YsS0FBTSxDQUNyQjhRLEtBQU1zMkIsRUFDTi95QixPQUFRQSxFQUNSTSxPQUFRQSxFQUNSN1MsT0FBUUEsRUFDUlQsUUFBU3NtQyxFQUNULzdCLE1BQU0sTUE5QlUsaUJBZ0NGLFdBQ2hCLElBQUl3RixFQUFReEwsRUFBaUI1RixNQUM3QixHQUFJb1IsRUFBTXhGLEtBQU0sTUFBTyxDQUFFNUssV0FBT0gsRUFBVytLLE1BQU0sR0FDakQsSUFBSTZmLEVBQUlyYSxFQUFNaUQsT0FDVmxULEVBQUlpUSxFQUFNdUQsT0FDVjhGLEVBekJXLFNBQVVnUixFQUFHdHFCLEdBQzVCLElBQ0lrSyxFQURBbUUsRUFBT2ljLEVBQUVqYyxLQUViLEdBQW1CLG1CQUFSQSxFQUFvQixDQUU3QixHQUFxQixpQkFEckJuRSxFQUFTbUUsRUFBS2pMLEtBQUtrbkIsRUFBR3RxQixJQUNTLE1BQU1oQixVQUFVLHlCQUMvQyxPQUFPa0wsRUFDUCxPQUFPaThCLEVBQWtCL2lDLEtBQUtrbkIsRUFBR3RxQixHQWtCdkJ5bUMsQ0FBV25jLEVBQUd0cUIsR0FDMUIsT0FBYyxPQUFWc1osRUFBdUIsQ0FBRXpaLFdBQU9ILEVBQVcrSyxLQUFNd0YsRUFBTXhGLE1BQU8sR0FDOUR3RixFQUFNdFAsUUFDZ0IsSUFBcEIxQixPQUFPcWEsRUFBTSxNQUFXZ1IsRUFBRVMsVUFBWWdiLEVBQW1CL2xDLEVBQUdrRSxFQUFTb21CLEVBQUVTLFdBQVk5YSxFQUFNL1AsVUFDdEYsQ0FBRUwsTUFBT3laLEVBQU83TyxNQUFNLEtBRS9Cd0YsRUFBTXhGLE1BQU8sRUFDTixDQUFFNUssTUFBT3laLEVBQU83TyxNQUFNLE9BRzNCaThCLEVBQVksU0FBVWx6QixHQUN4QixJQUVJclEsRUFBR3dqQyxFQUFZdHJCLEVBQU91ckIsRUFBU2ptQyxFQUFRNmxDLEVBRnZDbGMsRUFBSXpjLEVBQVNoUCxNQUNibUIsRUFBSWYsT0FBT3VVLEdBWWYsT0FWQXJRLEVBQUkydkIsRUFBbUJ4SSxFQUFHMU8sYUFFUGxjLEtBRG5CaW5DLEVBQWFyYyxFQUFFalAsUUFDaUJpUCxhQUFhMU8sVUFBWSxVQUFXdW5CLEtBQ2xFd0QsRUFBYWIsRUFBZTFpQyxLQUFLa25CLElBRW5DalAsT0FBdUIzYixJQUFmaW5DLEVBQTJCLEdBQUsxbkMsT0FBTzBuQyxHQUMvQ0MsRUFBVSxJQUFJempDLEVBQUVBLElBQU15WSxPQUFTME8sRUFBRXZYLE9BQVN1WCxFQUFHalAsR0FDN0MxYSxLQUFZMGEsRUFBTXBRLFFBQVEsS0FDMUJ1N0IsS0FBaUJuckIsRUFBTXBRLFFBQVEsS0FDL0IyN0IsRUFBUTdiLFVBQVk3bUIsRUFBU29tQixFQUFFUyxXQUN4QixJQUFJd2IsRUFBc0JLLEVBQVM1bUMsRUFBR1csRUFBUTZsQyxJQUt2RC8wQixFQUFFLENBQUUzSSxPQUFRLFNBQVUrTixPQUFPLEVBQU1uVCxPQUFRNGlDLEdBQStCLENBQ3hFRCxTQUFVLFNBQWtCbnpCLEdBQzFCLElBQ1dsVCxFQUFHNG1DLEVBQVNDLEVBRG5COTlCLEVBQUl1SyxFQUF1QnpVLE1BRS9CLEdBQWMsTUFBVnFVLEVBQWdCLENBQ2xCLEdBQUlvTyxFQUFTcE8sTUFDSGpVLE9BQU9xVSxFQUF1QixVQUFXNnZCLEVBQzdDandCLEVBQU9tSSxNQUNQeXFCLEVBQWUxaUMsS0FBSzhQLEtBRVpqSSxRQUFRLEtBQU0sTUFBTWpNLFVBQVUsaURBRTVDLEdBQUlzbkMsRUFBNkIsT0FBT0YsRUFBZXY1QixNQUFNOUQsRUFBR2xCLFdBR2hFLFFBRGdCbkksS0FEaEJrbkMsRUFBVTF6QixFQUFPOHlCLEtBQ1lyd0IsR0FBOEIsVUFBbkI5VSxFQUFRcVMsS0FBcUIwekIsRUFBVUYsR0FDaEUsTUFBWEUsRUFBaUIsT0FBT3Q1QixFQUFVczVCLEdBQVN4akMsS0FBSzhQLEVBQVFuSyxRQUN2RCxHQUFJdTlCLEVBQTZCLE9BQU9GLEVBQWV2NUIsTUFBTTlELEVBQUdsQixXQUd2RSxPQUZBN0gsRUFBSWYsT0FBTzhKLEdBQ1g4OUIsRUFBSyxJQUFJanJCLE9BQU8xSSxFQUFRLEtBQ2pCeUMsRUFBVSt3QixFQUFVdGpDLEtBQUt5akMsRUFBSTdtQyxHQUFLNm1DLEVBQUdiLEdBQVdobUMsTUFJM0QyVixHQUFXcXdCLEtBQWE3QyxHQUFtQnJpQyxFQUE0QnFpQyxFQUFpQjZDLEVBQVdVLEksNEJDM0duRyxJQUFJSSxFQUFnQyxFQUFRLE1BQ3hDajVCLEVBQVcsRUFBUSxNQUNuQjNKLEVBQVcsRUFBUSxNQUNuQm9QLEVBQXlCLEVBQVEsTUFDakN5eUIsRUFBcUIsRUFBUSxNQUM3QlUsRUFBYSxFQUFRLE1BR3pCSyxFQUE4QixRQUFTLEdBQUcsU0FBVTd6QixFQUFPOHpCLEVBQWFDLEdBQ3RFLE1BQU8sQ0FHTCxTQUFlOXpCLEdBQ2IsSUFBSW5LLEVBQUl1SyxFQUF1QnpVLE1BQzNCK25DLEVBQW9CbG5DLE1BQVZ3VCxPQUFzQnhULEVBQVl3VCxFQUFPRCxHQUN2RCxZQUFtQnZULElBQVprbkMsRUFBd0JBLEVBQVF4akMsS0FBSzhQLEVBQVFuSyxHQUFLLElBQUk2UyxPQUFPMUksR0FBUUQsR0FBT2hVLE9BQU84SixLQUk1RixTQUFVbUssR0FDUixJQUFJK3pCLEVBQU1ELEVBQWdCRCxFQUFhN3pCLEVBQVFyVSxNQUMvQyxHQUFJb29DLEVBQUl4OEIsS0FBTSxPQUFPdzhCLEVBQUlwbkMsTUFFekIsSUFBSWduQyxFQUFLaDVCLEVBQVNxRixHQUNkbFQsRUFBSWYsT0FBT0osTUFFZixJQUFLZ29DLEVBQUdsbUMsT0FBUSxPQUFPOGxDLEVBQVdJLEVBQUk3bUMsR0FFdEMsSUFBSXdtQyxFQUFjSyxFQUFHM21DLFFBQ3JCMm1DLEVBQUc5YixVQUFZLEVBSWYsSUFIQSxJQUVJN2dCLEVBRkF3YyxFQUFJLEdBQ0p2SSxFQUFJLEVBRWdDLFFBQWhDalUsRUFBU3U4QixFQUFXSSxFQUFJN21DLEtBQWMsQ0FDNUMsSUFBSWtuQyxFQUFXam9DLE9BQU9pTCxFQUFPLElBQzdCd2MsRUFBRXZJLEdBQUsrb0IsRUFDVSxLQUFiQSxJQUFpQkwsRUFBRzliLFVBQVlnYixFQUFtQi9sQyxFQUFHa0UsRUFBUzJpQyxFQUFHOWIsV0FBWXliLElBQ2xGcm9CLElBRUYsT0FBYSxJQUFOQSxFQUFVLEtBQU91SSxRLDRCQ3ZDOUIsSUFBSWpWLEVBQUksRUFBUSxNQUNaMDFCLEVBQVUsWUFLZDExQixFQUFFLENBQUUzSSxPQUFRLFNBQVUrTixPQUFPLEVBQU1uVCxPQUpsQixFQUFRLE9BSWdDLENBQ3ZEMGpDLE9BQVEsU0FBZ0J4YSxHQUN0QixPQUFPdWEsRUFBUXRvQyxLQUFNK3RCLEVBQVcva0IsVUFBVTFILE9BQVMsRUFBSTBILFVBQVUsUUFBS25JLE8sNEJDUjFFLElBQUkrUixFQUFJLEVBQVEsTUFDWjQxQixFQUFZLGNBS2hCNTFCLEVBQUUsQ0FBRTNJLE9BQVEsU0FBVStOLE9BQU8sRUFBTW5ULE9BSmxCLEVBQVEsT0FJZ0MsQ0FDdkQ0USxTQUFVLFNBQWtCc1ksR0FDMUIsT0FBT3lhLEVBQVV4b0MsS0FBTSt0QixFQUFXL2tCLFVBQVUxSCxPQUFTLEVBQUkwSCxVQUFVLFFBQUtuSSxPLGVDVDVFLElBQUkrUixFQUFJLEVBQVEsTUFDWi9HLEVBQWtCLEVBQVEsTUFDMUJ4RyxFQUFXLEVBQVEsTUFJdkJ1TixFQUFFLENBQUUzSSxPQUFRLFNBQVVzUixNQUFNLEdBQVEsQ0FDbENrdEIsSUFBSyxTQUFhQyxHQU1oQixJQUxBLElBQUlDLEVBQWM5OEIsRUFBZ0I2OEIsRUFBU0QsS0FDdkNHLEVBQWtCdmpDLEVBQVNzakMsRUFBWXJuQyxRQUN2Q2tKLEVBQWtCeEIsVUFBVTFILE9BQzVCc2xDLEVBQVcsR0FDWDUrQixFQUFJLEVBQ0Q0Z0MsRUFBa0I1Z0MsR0FDdkI0K0IsRUFBU3I2QixLQUFLbk0sT0FBT3VvQyxFQUFZM2dDLE9BQzdCQSxFQUFJd0MsR0FBaUJvOEIsRUFBU3I2QixLQUFLbk0sT0FBTzRJLFVBQVVoQixLQUN4RCxPQUFPNCtCLEVBQVN4b0IsS0FBSyxRLGVDaEJuQixFQUFRLEtBS2hCeEwsQ0FBRSxDQUFFM0ksT0FBUSxTQUFVK04sT0FBTyxHQUFRLENBQ25DNFYsT0FMVyxFQUFRLFMsNEJDQXJCLElBQUloYixFQUFJLEVBQVEsTUFDWjZCLEVBQXlCLEVBQVEsTUFDakNnTyxFQUFXLEVBQVEsTUFDbkJ3a0IsRUFBaUIsRUFBUSxNQUN6QjRCLEVBQWtCLEVBQVEsS0FDMUJ2b0MsRUFBa0IsRUFBUSxNQUMxQndXLEVBQVUsRUFBUSxNQUVsQmtGLEVBQVUxYixFQUFnQixXQUMxQmdrQyxFQUFrQnZuQixPQUFPbmMsVUFDekJzeEIsRUFBTW5vQixLQUFLbW9CLElBRVg0VyxFQUFnQixTQUFVbjBCLEVBQVFvMEIsRUFBYTc4QixHQUNqRCxPQUFJQSxFQUFZeUksRUFBT3JULFFBQWdCLEVBQ25CLEtBQWhCeW5DLEVBQTJCNzhCLEVBQ3hCeUksRUFBT3ZJLFFBQVEyOEIsRUFBYTc4QixJQUtyQzBHLEVBQUUsQ0FBRTNJLE9BQVEsU0FBVStOLE9BQU8sR0FBUSxDQUNuQ2d4QixXQUFZLFNBQW9CRCxFQUFhRSxHQUMzQyxJQUNJQyxFQUFtQmhRLEVBQVV2a0IsRUFBUXd4QixFQUFjZ0QsRUFBbUJDLEVBQWNDLEVBQVdycUIsRUFEL0Y5VSxFQUFJdUssRUFBdUJ6VSxNQUUzQjZlLEVBQVcsRUFDWHlxQixFQUFpQixFQUNqQmorQixFQUFTLEdBQ2IsR0FBbUIsTUFBZjA5QixFQUFxQixDQUV2QixJQURBRyxFQUFhem1CLEVBQVNzbUIsT0FFWjNvQyxPQUFPcVUsRUFBdUIsVUFBVzZ2QixFQUM3Q3lFLEVBQVl2c0IsTUFDWnlxQixFQUFlMWlDLEtBQUt3a0MsS0FFWjM4QixRQUFRLEtBQU0sTUFBTWpNLFVBQVUsbURBRzVDLFFBQWlCVSxLQURqQnE0QixFQUFXNlAsRUFBWS9zQixJQUVyQixPQUFPa2QsRUFBUzMwQixLQUFLd2tDLEVBQWE3K0IsRUFBRysrQixHQUNoQyxHQUFJbnlCLEdBQVdveUIsRUFDcEIsT0FBTzlvQyxPQUFPOEosR0FBRzRLLFFBQVFpMEIsRUFBYUUsR0FVMUMsSUFQQXQwQixFQUFTdlUsT0FBTzhKLEdBQ2hCaThCLEVBQWUvbEMsT0FBTzJvQyxJQUN0QkksRUFBNEMsbUJBQWpCRixLQUNIQSxFQUFlN29DLE9BQU82b0MsSUFDOUNHLEVBQWVqRCxFQUFhN2tDLE9BQzVCK25DLEVBQVluWCxFQUFJLEVBQUdrWCxHQUNuQnZxQixFQUFXaXFCLEVBQWNuMEIsRUFBUXd4QixFQUFjLElBQzFCLElBQWR0bkIsR0FFSEcsRUFERW1xQixFQUNZL29DLE9BQU82b0MsRUFBYTlDLEVBQWN0bkIsRUFBVWxLLElBRTVDazBCLEVBQWdCMUMsRUFBY3h4QixFQUFRa0ssRUFBVSxRQUFJaGUsRUFBV29vQyxHQUUvRTU5QixHQUFVc0osRUFBTzlNLE1BQU15aEMsRUFBZ0J6cUIsR0FBWUcsRUFDbkRzcUIsRUFBaUJ6cUIsRUFBV3VxQixFQUM1QnZxQixFQUFXaXFCLEVBQWNuMEIsRUFBUXd4QixFQUFjdG5CLEVBQVd3cUIsR0FLNUQsT0FISUMsRUFBaUIzMEIsRUFBT3JULFNBQzFCK0osR0FBVXNKLEVBQU85TSxNQUFNeWhDLElBRWxCaitCLE0sNEJDL0RYLElBQUk0OEIsRUFBZ0MsRUFBUSxNQUN4Q2o1QixFQUFXLEVBQVEsTUFDbkIzSixFQUFXLEVBQVEsTUFDbkJELEVBQVksRUFBUSxNQUNwQnFQLEVBQXlCLEVBQVEsTUFDakN5eUIsRUFBcUIsRUFBUSxNQUM3QjJCLEVBQWtCLEVBQVEsS0FDMUJqQixFQUFhLEVBQVEsTUFFckIxVixFQUFNbm9CLEtBQUttb0IsSUFDWHBvQixFQUFNQyxLQUFLRCxJQU9mbStCLEVBQThCLFVBQVcsR0FBRyxTQUFVanNCLEVBQVMrUCxFQUFlb2MsRUFBaUIzSSxHQUM3RixJQUFJdmpCLEVBQStDdWpCLEVBQU92akIsNkNBQ3RERixFQUFtQnlqQixFQUFPempCLGlCQUMxQnd0QixFQUFvQnR0QixFQUErQyxJQUFNLEtBRTdFLE1BQU8sQ0FHTCxTQUFpQjhzQixFQUFhRSxHQUM1QixJQUFJLytCLEVBQUl1SyxFQUF1QnpVLE1BQzNCazVCLEVBQTBCcjRCLE1BQWZrb0MsT0FBMkJsb0MsRUFBWWtvQyxFQUFZL3NCLEdBQ2xFLFlBQW9CbmIsSUFBYnE0QixFQUNIQSxFQUFTMzBCLEtBQUt3a0MsRUFBYTcrQixFQUFHKytCLEdBQzlCbGQsRUFBY3huQixLQUFLbkUsT0FBTzhKLEdBQUk2K0IsRUFBYUUsSUFJakQsU0FBVTUwQixFQUFRNDBCLEdBQ2hCLElBQ0lodEIsR0FBZ0RGLEdBQ3pCLGlCQUFqQmt0QixJQUEwRSxJQUE3Q0EsRUFBYTc4QixRQUFRbTlCLEdBQzFELENBQ0EsSUFBSW5CLEVBQU1ELEVBQWdCcGMsRUFBZTFYLEVBQVFyVSxLQUFNaXBDLEdBQ3ZELEdBQUliLEVBQUl4OEIsS0FBTSxPQUFPdzhCLEVBQUlwbkMsTUFHM0IsSUFBSWduQyxFQUFLaDVCLEVBQVNxRixHQUNkbFQsRUFBSWYsT0FBT0osTUFFWG1wQyxFQUE0QyxtQkFBakJGLEVBQzFCRSxJQUFtQkYsRUFBZTdvQyxPQUFPNm9DLElBRTlDLElBQUlubkMsRUFBU2ttQyxFQUFHbG1DLE9BQ2hCLEdBQUlBLEVBQVEsQ0FDVixJQUFJNmxDLEVBQWNLLEVBQUczbUMsUUFDckIybUMsRUFBRzliLFVBQVksRUFHakIsSUFEQSxJQUFJc2QsRUFBVSxLQUNELENBQ1gsSUFBSW4rQixFQUFTdThCLEVBQVdJLEVBQUk3bUMsR0FDNUIsR0FBZSxPQUFYa0ssRUFBaUIsTUFHckIsR0FEQW0rQixFQUFRajlCLEtBQUtsQixJQUNSdkosRUFBUSxNQUdJLEtBREYxQixPQUFPaUwsRUFBTyxNQUNSMjhCLEVBQUc5YixVQUFZZ2IsRUFBbUIvbEMsRUFBR2tFLEVBQVMyaUMsRUFBRzliLFdBQVl5YixJQUtwRixJQUZBLElBdER3QnpuQyxFQXNEcEJ1cEMsRUFBb0IsR0FDcEJDLEVBQXFCLEVBQ2hCMWhDLEVBQUksRUFBR0EsRUFBSXdoQyxFQUFRbG9DLE9BQVEwRyxJQUFLLENBQ3ZDcUQsRUFBU20rQixFQUFReGhDLEdBVWpCLElBUkEsSUFBSTRXLEVBQVV4ZSxPQUFPaUwsRUFBTyxJQUN4QndULEVBQVdxVCxFQUFJcG9CLEVBQUkxRSxFQUFVaUcsRUFBT2pLLE9BQVFELEVBQUVHLFFBQVMsR0FDdkR3ZCxFQUFXLEdBTU4xVyxFQUFJLEVBQUdBLEVBQUlpRCxFQUFPL0osT0FBUThHLElBQUswVyxFQUFTdlMsVUFsRXpDMUwsS0FEY1gsRUFtRThDbUwsRUFBT2pELElBbEV2RGxJLEVBQUtFLE9BQU9GLElBbUVoQyxJQUFJNmUsRUFBZ0IxVCxFQUFPd1EsT0FDM0IsR0FBSXN0QixFQUFtQixDQUNyQixJQUFJUSxFQUFlLENBQUMvcUIsR0FBU04sT0FBT1EsRUFBVUQsRUFBVTFkLFFBQ2xDTixJQUFsQmtlLEdBQTZCNHFCLEVBQWFwOUIsS0FBS3dTLEdBQ25ELElBQUlDLEVBQWM1ZSxPQUFPNm9DLEVBQWFqN0IsV0FBTW5OLEVBQVc4b0MsU0FFdkQzcUIsRUFBYzZwQixFQUFnQmpxQixFQUFTemQsRUFBRzBkLEVBQVVDLEVBQVVDLEVBQWVrcUIsR0FFM0VwcUIsR0FBWTZxQixJQUNkRCxHQUFxQnRvQyxFQUFFMEcsTUFBTTZoQyxFQUFvQjdxQixHQUFZRyxFQUM3RDBxQixFQUFxQjdxQixFQUFXRCxFQUFRdGQsUUFHNUMsT0FBT21vQyxFQUFvQnRvQyxFQUFFMEcsTUFBTTZoQyxTLDRCQzdGekMsSUFBSXpCLEVBQWdDLEVBQVEsTUFDeENqNUIsRUFBVyxFQUFRLE1BQ25CeUYsRUFBeUIsRUFBUSxNQUNqQ20xQixFQUFZLEVBQVEsTUFDcEJoQyxFQUFhLEVBQVEsTUFHekJLLEVBQThCLFNBQVUsR0FBRyxTQUFVNEIsRUFBUUMsRUFBYzNCLEdBQ3pFLE1BQU8sQ0FHTCxTQUFnQjl6QixHQUNkLElBQUluSyxFQUFJdUssRUFBdUJ6VSxNQUMzQitwQyxFQUFxQmxwQyxNQUFWd1QsT0FBc0J4VCxFQUFZd1QsRUFBT3cxQixHQUN4RCxZQUFvQmhwQyxJQUFia3BDLEVBQXlCQSxFQUFTeGxDLEtBQUs4UCxFQUFRbkssR0FBSyxJQUFJNlMsT0FBTzFJLEdBQVF3MUIsR0FBUXpwQyxPQUFPOEosS0FJL0YsU0FBVW1LLEdBQ1IsSUFBSSt6QixFQUFNRCxFQUFnQjJCLEVBQWN6MUIsRUFBUXJVLE1BQ2hELEdBQUlvb0MsRUFBSXg4QixLQUFNLE9BQU93OEIsRUFBSXBuQyxNQUV6QixJQUFJZ25DLEVBQUtoNUIsRUFBU3FGLEdBQ2RsVCxFQUFJZixPQUFPSixNQUVYZ3FDLEVBQW9CaEMsRUFBRzliLFVBQ3RCMGQsRUFBVUksRUFBbUIsS0FBSWhDLEVBQUc5YixVQUFZLEdBQ3JELElBQUk3Z0IsRUFBU3U4QixFQUFXSSxFQUFJN21DLEdBRTVCLE9BREt5b0MsRUFBVTVCLEVBQUc5YixVQUFXOGQsS0FBb0JoQyxFQUFHOWIsVUFBWThkLEdBQzlDLE9BQVgzK0IsR0FBbUIsRUFBSUEsRUFBT2pLLFksNEJDN0IzQyxJQUFJd1IsRUFBSSxFQUFRLE1BQ1oyeUIsRUFBYSxFQUFRLE1BS3pCM3lCLEVBQUUsQ0FBRTNJLE9BQVEsU0FBVStOLE9BQU8sRUFBTW5ULE9BSk4sRUFBUSxLQUlNMmdDLENBQXVCLFVBQVksQ0FDNUV5RSxNQUFPLFdBQ0wsT0FBTzFFLEVBQVd2bEMsS0FBTSxRQUFTLEdBQUksUSw0QkNSekMsSUFBSWlvQyxFQUFnQyxFQUFRLE1BQ3hDeGxCLEVBQVcsRUFBUSxNQUNuQnpULEVBQVcsRUFBUSxNQUNuQnlGLEVBQXlCLEVBQVEsTUFDakN3ZixFQUFxQixFQUFRLE1BQzdCaVQsRUFBcUIsRUFBUSxNQUM3QjdoQyxFQUFXLEVBQVEsTUFDbkI2a0MsRUFBaUIsRUFBUSxNQUN6Qnh1QixFQUFhLEVBQVEsTUFDckJ4VyxFQUFRLEVBQVEsTUFFaEJpbEMsRUFBWSxHQUFHNTlCLEtBQ2Z6QyxFQUFNQyxLQUFLRCxJQUNYc2dDLEVBQWEsV0FHYkMsR0FBY25sQyxHQUFNLFdBQWMsT0FBUTZYLE9BQU9xdEIsRUFBWSxRQUdqRW5DLEVBQThCLFFBQVMsR0FBRyxTQUFVcUMsRUFBT0MsRUFBYXBDLEdBQ3RFLElBQUlxQyxFQXFESixPQXpDRUEsRUFWMkIsS0FBM0IsT0FBTzN2QixNQUFNLFFBQVEsSUFFYyxHQUFuQyxPQUFPQSxNQUFNLFFBQVMsR0FBR3ZaLFFBQ08sR0FBaEMsS0FBS3VaLE1BQU0sV0FBV3ZaLFFBQ1UsR0FBaEMsSUFBSXVaLE1BQU0sWUFBWXZaLFFBRXRCLElBQUl1WixNQUFNLFFBQVF2WixPQUFTLEdBQzNCLEdBQUd1WixNQUFNLE1BQU12WixPQUdDLFNBQVV5MUIsRUFBVzBULEdBQ25DLElBQUk5MUIsRUFBU3ZVLE9BQU9xVSxFQUF1QnpVLE9BQ3ZDMHFDLE9BQWdCN3BDLElBQVY0cEMsRUFBc0JMLEVBQWFLLElBQVUsRUFDdkQsR0FBWSxJQUFSQyxFQUFXLE1BQU8sR0FDdEIsUUFBa0I3cEMsSUFBZGsyQixFQUF5QixNQUFPLENBQUNwaUIsR0FFckMsSUFBSzhOLEVBQVNzVSxHQUNaLE9BQU93VCxFQUFZaG1DLEtBQUtvUSxFQUFRb2lCLEVBQVcyVCxHQVc3QyxJQVRBLElBUUlqd0IsRUFBT3lSLEVBQVd5ZSxFQVJsQnBiLEVBQVMsR0FDVC9TLEdBQVN1YSxFQUFVbkssV0FBYSxJQUFNLEtBQzdCbUssRUFBVXJLLFVBQVksSUFBTSxLQUM1QnFLLEVBQVUxMUIsUUFBVSxJQUFNLEtBQzFCMDFCLEVBQVV4SyxPQUFTLElBQU0sSUFDbENxZSxFQUFnQixFQUVoQkMsRUFBZ0IsSUFBSTl0QixPQUFPZ2EsRUFBVTdpQixPQUFRc0ksRUFBUSxNQUVsRC9CLEVBQVFpQixFQUFXblgsS0FBS3NtQyxFQUFlbDJCLFFBQzVDdVgsRUFBWTJlLEVBQWMzZSxXQUNWMGUsSUFDZHJiLEVBQU9oakIsS0FBS29JLEVBQU85TSxNQUFNK2lDLEVBQWVud0IsRUFBTXJaLFFBQzFDcVosRUFBTW5aLE9BQVMsR0FBS21aLEVBQU1yWixNQUFRdVQsRUFBT3JULFFBQVE2b0MsRUFBVW44QixNQUFNdWhCLEVBQVE5VSxFQUFNNVMsTUFBTSxJQUN6RjhpQyxFQUFhbHdCLEVBQU0sR0FBR25aLE9BQ3RCc3BDLEVBQWdCMWUsRUFDWnFELEVBQU9qdUIsUUFBVW9wQyxLQUVuQkcsRUFBYzNlLFlBQWN6UixFQUFNclosT0FBT3lwQyxFQUFjM2UsWUFLN0QsT0FISTBlLElBQWtCajJCLEVBQU9yVCxRQUN2QnFwQyxHQUFlRSxFQUFjdndCLEtBQUssS0FBS2lWLEVBQU9oakIsS0FBSyxJQUNsRGdqQixFQUFPaGpCLEtBQUtvSSxFQUFPOU0sTUFBTStpQyxJQUN6QnJiLEVBQU9qdUIsT0FBU29wQyxFQUFNbmIsRUFBTzFuQixNQUFNLEVBQUc2aUMsR0FBT25iLEdBRzdDLElBQUkxVSxXQUFNaGEsRUFBVyxHQUFHUyxPQUNqQixTQUFVeTFCLEVBQVcwVCxHQUNuQyxZQUFxQjVwQyxJQUFkazJCLEdBQXFDLElBQVYwVCxFQUFjLEdBQUtGLEVBQVlobUMsS0FBS3ZFLEtBQU0rMkIsRUFBVzBULElBRXBFRixFQUVoQixDQUdMLFNBQWV4VCxFQUFXMFQsR0FDeEIsSUFBSXZnQyxFQUFJdUssRUFBdUJ6VSxNQUMzQjhxQyxFQUF3QmpxQyxNQUFiazJCLE9BQXlCbDJCLEVBQVlrMkIsRUFBVXVULEdBQzlELFlBQW9CenBDLElBQWJpcUMsRUFDSEEsRUFBU3ZtQyxLQUFLd3lCLEVBQVc3c0IsRUFBR3VnQyxHQUM1QkQsRUFBY2ptQyxLQUFLbkUsT0FBTzhKLEdBQUk2c0IsRUFBVzBULElBTy9DLFNBQVVwMkIsRUFBUW8yQixHQUNoQixJQUFJckMsRUFBTUQsRUFBZ0JxQyxFQUFlbjJCLEVBQVFyVSxLQUFNeXFDLEVBQU9ELElBQWtCRCxHQUNoRixHQUFJbkMsRUFBSXg4QixLQUFNLE9BQU93OEIsRUFBSXBuQyxNQUV6QixJQUFJZ25DLEVBQUtoNUIsRUFBU3FGLEdBQ2RsVCxFQUFJZixPQUFPSixNQUNYc0UsRUFBSTJ2QixFQUFtQitULEVBQUlqckIsUUFFM0JndUIsRUFBa0IvQyxFQUFHM21DLFFBQ3JCbWIsR0FBU3dyQixFQUFHcGIsV0FBYSxJQUFNLEtBQ3RCb2IsRUFBR3RiLFVBQVksSUFBTSxLQUNyQnNiLEVBQUczbUMsUUFBVSxJQUFNLEtBQ25CZ3BDLEVBQWEsSUFBTSxLQUk1QlMsRUFBVyxJQUFJeG1DLEVBQUUrbEMsRUFBYXJDLEVBQUssT0FBU0EsRUFBRzl6QixPQUFTLElBQUtzSSxHQUM3RGt1QixPQUFnQjdwQyxJQUFWNHBDLEVBQXNCTCxFQUFhSyxJQUFVLEVBQ3ZELEdBQVksSUFBUkMsRUFBVyxNQUFPLEdBQ3RCLEdBQWlCLElBQWJ2cEMsRUFBRUcsT0FBYyxPQUF1QyxPQUFoQzRvQyxFQUFlWSxFQUFVM3BDLEdBQWMsQ0FBQ0EsR0FBSyxHQUl4RSxJQUhBLElBQUlra0MsRUFBSSxFQUNKclYsRUFBSSxFQUNKbkksRUFBSSxHQUNEbUksRUFBSTd1QixFQUFFRyxRQUFRLENBQ25Cd3BDLEVBQVM1ZSxVQUFZbWUsRUFBYXJhLEVBQUksRUFDdEMsSUFDSWdOLEVBREFDLEVBQUlpTixFQUFlWSxFQUFVVCxFQUFhbHBDLEVBQUlBLEVBQUUwRyxNQUFNbW9CLElBRTFELEdBQ1EsT0FBTmlOLElBQ0NELEVBQUlsekIsRUFBSXpFLEVBQVN5bEMsRUFBUzVlLFdBQWFtZSxFQUFhLEVBQUlyYSxJQUFLN3VCLEVBQUVHLFdBQWErakMsRUFFN0VyVixFQUFJa1gsRUFBbUIvbEMsRUFBRzZ1QixFQUFHK2EsT0FDeEIsQ0FFTCxHQURBbGpCLEVBQUV0YixLQUFLcEwsRUFBRTBHLE1BQU13OUIsRUFBR3JWLElBQ2RuSSxFQUFFdm1CLFNBQVdvcEMsRUFBSyxPQUFPN2lCLEVBQzdCLElBQUssSUFBSTdmLEVBQUksRUFBR0EsR0FBS2kxQixFQUFFMzdCLE9BQVMsRUFBRzBHLElBRWpDLEdBREE2ZixFQUFFdGIsS0FBSzB3QixFQUFFajFCLElBQ0w2ZixFQUFFdm1CLFNBQVdvcEMsRUFBSyxPQUFPN2lCLEVBRS9CbUksRUFBSXFWLEVBQUlySSxHQUlaLE9BREFuVixFQUFFdGIsS0FBS3BMLEVBQUUwRyxNQUFNdzlCLElBQ1J4ZCxPQUdUd2lCLEksNEJDdElKLElBY01sdkIsRUFkRnZJLEVBQUksRUFBUSxNQUNadUIsRUFBMkIsVUFDM0I5TyxFQUFXLEVBQVEsTUFDbkJ5Z0MsRUFBYSxFQUFRLE1BQ3JCcnhCLEVBQXlCLEVBQVEsTUFDakNzeEIsRUFBdUIsRUFBUSxNQUMvQmp2QixFQUFVLEVBQVEsTUFFbEJrMEIsRUFBbUIsR0FBR0MsV0FDdEJuaEMsRUFBTUMsS0FBS0QsSUFFWG84QixFQUEwQkgsRUFBcUIsY0FTbkRuekIsRUFBRSxDQUFFM0ksT0FBUSxTQUFVK04sT0FBTyxFQUFNblQsVUFQWGlTLElBQVlvdkIsSUFDOUIvcUIsRUFBYWhILEVBQXlCL1QsT0FBT1EsVUFBVyxjQUNyRHVhLElBQWVBLEVBQVc3RixXQUs4QjR3QixJQUEyQixDQUMxRitFLFdBQVksU0FBb0I5RSxHQUM5QixJQUFJbjVCLEVBQU81TSxPQUFPcVUsRUFBdUJ6VSxPQUN6QzhsQyxFQUFXSyxHQUNYLElBQUkva0MsRUFBUWlFLEVBQVN5RSxFQUFJZCxVQUFVMUgsT0FBUyxFQUFJMEgsVUFBVSxRQUFLbkksRUFBV21NLEVBQUsxTCxTQUMzRStrQyxFQUFTam1DLE9BQU8rbEMsR0FDcEIsT0FBTzZFLEVBQ0hBLEVBQWlCem1DLEtBQUt5SSxFQUFNcTVCLEVBQVFqbEMsR0FDcEM0TCxFQUFLbkYsTUFBTXpHLEVBQU9BLEVBQVFpbEMsRUFBTy9rQyxVQUFZK2tDLE0sNEJDNUJyRCxJQUFJenpCLEVBQUksRUFBUSxNQUNaMnlCLEVBQWEsRUFBUSxNQUt6QjN5QixFQUFFLENBQUUzSSxPQUFRLFNBQVUrTixPQUFPLEVBQU1uVCxPQUpOLEVBQVEsS0FJTTJnQyxDQUF1QixXQUFhLENBQzdFMEYsT0FBUSxXQUNOLE9BQU8zRixFQUFXdmxDLEtBQU0sU0FBVSxHQUFJLFEsMEJDUjFDLElBQUk0UyxFQUFJLEVBQVEsTUFDWjJ5QixFQUFhLEVBQVEsTUFLekIzeUIsRUFBRSxDQUFFM0ksT0FBUSxTQUFVK04sT0FBTyxFQUFNblQsT0FKTixFQUFRLEtBSU0yZ0MsQ0FBdUIsUUFBVSxDQUMxRTJGLElBQUssV0FDSCxPQUFPNUYsRUFBV3ZsQyxLQUFNLE1BQU8sR0FBSSxRLDJCQ1J2QyxJQUFJNFMsRUFBSSxFQUFRLE1BQ1oyeUIsRUFBYSxFQUFRLE1BS3pCM3lCLEVBQUUsQ0FBRTNJLE9BQVEsU0FBVStOLE9BQU8sRUFBTW5ULE9BSk4sRUFBUSxLQUlNMmdDLENBQXVCLFFBQVUsQ0FDMUU0RixJQUFLLFdBQ0gsT0FBTzdGLEVBQVd2bEMsS0FBTSxNQUFPLEdBQUksUSw0QkNSdkMsSUFBSTRTLEVBQUksRUFBUSxNQUNaeTRCLEVBQVcsWUFHWHY5QixFQUZ5QixFQUFRLEtBRXhCdzlCLENBQXVCLFdBRWhDQyxFQUFVejlCLEVBQVMsV0FDckIsT0FBT3U5QixFQUFTcnJDLE9BQ2QsR0FBR3VyQyxRQUtQMzRCLEVBQUUsQ0FBRTNJLE9BQVEsU0FBVStOLE9BQU8sRUFBTW5ULE9BQVFpSixHQUFVLENBQ25EeTlCLFFBQVNBLEVBQ1RDLFVBQVdELEssNEJDZmIsSUFBSTM0QixFQUFJLEVBQVEsTUFDWjY0QixFQUFhLGNBR2IzOUIsRUFGeUIsRUFBUSxLQUV4Qnc5QixDQUF1QixhQUVoQ0ksRUFBWTU5QixFQUFTLFdBQ3ZCLE9BQU8yOUIsRUFBV3pyQyxPQUNoQixHQUFHMHJDLFVBS1A5NEIsRUFBRSxDQUFFM0ksT0FBUSxTQUFVK04sT0FBTyxFQUFNblQsT0FBUWlKLEdBQVUsQ0FDbkQ0OUIsVUFBV0EsRUFDWEMsU0FBVUQsSyw0QkNmWixJQUFJOTRCLEVBQUksRUFBUSxNQUNaZzVCLEVBQVEsYUFLWmg1QixFQUFFLENBQUUzSSxPQUFRLFNBQVUrTixPQUFPLEVBQU1uVCxPQUpOLEVBQVEsS0FJTXltQyxDQUF1QixTQUFXLENBQzNFdmtCLEtBQU0sV0FDSixPQUFPNmtCLEVBQU01ckMsVSxlQ1RXLEVBQVEsS0FJcEM2ckMsQ0FBc0Isa0IsNEJDRHRCLElBQUlqNUIsRUFBSSxFQUFRLE1BQ1ovUSxFQUFjLEVBQVEsTUFDdEJDLEVBQVMsRUFBUSxNQUNqQkMsRUFBTSxFQUFRLE1BQ2QxQixFQUFXLEVBQVEsS0FDbkI4QixFQUFpQixVQUNqQjRZLEVBQTRCLEVBQVEsTUFFcEMrd0IsRUFBZWhxQyxFQUFPb1csT0FFMUIsR0FBSXJXLEdBQXNDLG1CQUFoQmlxQyxNQUFpQyxnQkFBaUJBLEVBQWFsckMsaUJBRXhEQyxJQUEvQmlyQyxJQUFlQyxhQUNkLENBQ0QsSUFBSUMsRUFBOEIsR0FFOUJDLEVBQWdCLFdBQ2xCLElBQUlGLEVBQWMvaUMsVUFBVTFILE9BQVMsUUFBc0JULElBQWpCbUksVUFBVSxRQUFtQm5JLEVBQVlULE9BQU80SSxVQUFVLElBQ2hHcUMsRUFBU3JMLGdCQUFnQmlzQyxFQUN6QixJQUFJSCxFQUFhQyxRQUVEbHJDLElBQWhCa3JDLEVBQTRCRCxJQUFpQkEsRUFBYUMsR0FFOUQsTUFEb0IsS0FBaEJBLElBQW9CQyxFQUE0QjNnQyxJQUFVLEdBQ3ZEQSxHQUVUMFAsRUFBMEJreEIsRUFBZUgsR0FDekMsSUFBSUksRUFBa0JELEVBQWNyckMsVUFBWWtyQyxFQUFhbHJDLFVBQzdEc3JDLEVBQWdCN2pDLFlBQWM0akMsRUFFOUIsSUFBSUUsRUFBaUJELEVBQWdCdDhCLFNBQ2pDdzhCLEVBQXlDLGdCQUFoQ2hzQyxPQUFPMHJDLEVBQWEsU0FDN0J6M0IsRUFBUyx3QkFDYmxTLEVBQWUrcEMsRUFBaUIsY0FBZSxDQUM3Q25yQyxjQUFjLEVBQ2RvRCxJQUFLLFdBQ0gsSUFBSTRqQixFQUFTMW5CLEVBQVNMLE1BQVFBLEtBQUt5eUIsVUFBWXp5QixLQUMzQzJVLEVBQVN3M0IsRUFBZTVuQyxLQUFLd2pCLEdBQ2pDLEdBQUlobUIsRUFBSWlxQyxFQUE2QmprQixHQUFTLE1BQU8sR0FDckQsSUFBSXlXLEVBQU80TixFQUFTejNCLEVBQU85TSxNQUFNLEdBQUksR0FBSzhNLEVBQU9HLFFBQVFULEVBQVEsTUFDakUsTUFBZ0IsS0FBVG1xQixPQUFjMzlCLEVBQVkyOUIsS0FJckM1ckIsRUFBRSxDQUFFOVEsUUFBUSxFQUFNK0MsUUFBUSxHQUFRLENBQ2hDcVQsT0FBUSt6QixNLGVDL0NnQixFQUFRLEtBSXBDSixDQUFzQixnQixlQ0pNLEVBQVEsS0FJcENBLENBQXNCLHVCLGVDSk0sRUFBUSxLQUlwQ0EsQ0FBc0IsYSw0QkNIdEIsSUFBSWo1QixFQUFJLEVBQVEsTUFDWjlRLEVBQVMsRUFBUSxNQUNqQjBZLEVBQWEsRUFBUSxNQUNyQjFELEVBQVUsRUFBUSxNQUNsQmpWLEVBQWMsRUFBUSxNQUN0QnN5QixFQUFnQixFQUFRLEtBQ3hCQyxFQUFvQixFQUFRLE1BQzVCbHZCLEVBQVEsRUFBUSxNQUNoQm5ELEVBQU0sRUFBUSxNQUNkK00sRUFBVSxFQUFRLE1BQ2xCek8sRUFBVyxFQUFRLEtBQ25CMk8sRUFBVyxFQUFRLE1BQ25CcEYsRUFBVyxFQUFRLE1BQ25CaUMsRUFBa0IsRUFBUSxNQUMxQjBKLEVBQWMsRUFBUSxNQUN0QlAsRUFBMkIsRUFBUSxNQUNuQ3EzQixFQUFxQixFQUFRLElBQzdCN2tCLEVBQWEsRUFBUSxNQUNyQjJELEVBQTRCLEVBQVEsTUFDcENtaEIsRUFBOEIsRUFBUSxNQUN0QzdrQixFQUE4QixFQUFRLE1BQ3RDeFQsRUFBaUMsRUFBUSxNQUN6Q3pULEVBQXVCLEVBQVEsTUFDL0JrbkIsRUFBNkIsRUFBUSxNQUNyQ3psQixFQUE4QixFQUFRLE1BQ3RDQyxFQUFXLEVBQVEsTUFDbkJ1ZixFQUFTLEVBQVEsTUFDakJDLEVBQVksRUFBUSxNQUNwQlgsRUFBYSxFQUFRLE1BQ3JCemUsRUFBTSxFQUFRLE1BQ2RoQyxFQUFrQixFQUFRLE1BQzFCMlgsRUFBK0IsRUFBUSxNQUN2QzR6QixFQUF3QixFQUFRLE1BQ2hDbm1DLEVBQWlCLEVBQVEsTUFDekJDLEVBQXNCLEVBQVEsTUFDOUIrRSxFQUFXLGdCQUVYNmhDLEVBQVM3cUIsRUFBVSxVQUNuQnRGLEVBQVMsU0FFVGtjLEVBQWVoNEIsRUFBZ0IsZUFDL0J1RixFQUFtQkYsRUFBb0JHLElBQ3ZDRixFQUFtQkQsRUFBb0I2SyxVQUFVNEwsR0FDakR2WixFQUFrQkMsT0FBZ0IsVUFDbEMwcEMsRUFBVTFxQyxFQUFPb1csT0FDakIyZ0IsRUFBYXJlLEVBQVcsT0FBUSxhQUNoQ3lQLEVBQWlDaFcsRUFBK0JuVCxFQUNoRWdwQixFQUF1QnRwQixFQUFxQk0sRUFDNUNvcEIsRUFBNEJvaUIsRUFBNEJ4ckMsRUFDeEQwcEIsRUFBNkI5QyxFQUEyQjVtQixFQUN4RDJyQyxFQUFhaHJCLEVBQU8sV0FDcEJpckIsRUFBeUJqckIsRUFBTyxjQUNoQ2tyQixFQUF5QmxyQixFQUFPLDZCQUNoQ21yQixHQUF5Qm5yQixFQUFPLDZCQUNoQzRTLEdBQXdCNVMsRUFBTyxPQUMvQm9yQixHQUFVL3FDLEVBQU8rcUMsUUFFakJDLElBQWNELEtBQVlBLEdBQWlCLFlBQU1BLEdBQWlCLFVBQUVFLFVBR3BFQyxHQUFzQm5yQyxHQUFlcUQsR0FBTSxXQUM3QyxPQUVTLEdBRkZtbkMsRUFBbUJ2aUIsRUFBcUIsR0FBSSxJQUFLLENBQ3REM2xCLElBQUssV0FBYyxPQUFPMmxCLEVBQXFCOXBCLEtBQU0sSUFBSyxDQUFFZ0IsTUFBTyxJQUFLOGEsTUFDdEVBLEtBQ0QsU0FBVTVSLEVBQUc2ZixFQUFHQyxHQUNuQixJQUFJaWpCLEVBQTRCaGpCLEVBQStCcG5CLEVBQWlCa25CLEdBQzVFa2pCLFVBQWtDcHFDLEVBQWdCa25CLEdBQ3RERCxFQUFxQjVmLEVBQUc2ZixFQUFHQyxHQUN2QmlqQixHQUE2Qi9pQyxJQUFNckgsR0FDckNpbkIsRUFBcUJqbkIsRUFBaUJrbkIsRUFBR2tqQixJQUV6Q25qQixFQUVBOFksR0FBTyxTQUFVNXlCLEVBQUsrN0IsR0FDeEIsSUFBSWhrQixFQUFTMGtCLEVBQVd6OEIsR0FBT3E4QixFQUFtQkcsRUFBaUIsV0FPbkUsT0FOQTNtQyxFQUFpQmtpQixFQUFRLENBQ3ZCalgsS0FBTXNMLEVBQ05wTSxJQUFLQSxFQUNMKzdCLFlBQWFBLElBRVZscUMsSUFBYWttQixFQUFPZ2tCLFlBQWNBLEdBQ2hDaGtCLEdBR0xtbEIsR0FBVzlZLEVBQW9CLFNBQVVsMEIsR0FDM0MsTUFBb0IsaUJBQU5BLEdBQ1osU0FBVUEsR0FDWixPQUFPNEMsT0FBTzVDLGFBQWVzc0MsR0FHM0JXLEdBQWtCLFNBQXdCampDLEVBQUc2ZixFQUFHQyxHQUM5QzlmLElBQU1ySCxHQUFpQnNxQyxHQUFnQlQsRUFBd0IzaUIsRUFBR0MsR0FDdEVoYixFQUFTOUUsR0FDVCxJQUFJakosRUFBTXNVLEVBQVl3VSxHQUFHLEdBRXpCLE9BREEvYSxFQUFTZ2IsR0FDTGpvQixFQUFJMHFDLEVBQVl4ckMsSUFDYitvQixFQUFXM1UsWUFJVnRULEVBQUltSSxFQUFHcWlDLElBQVdyaUMsRUFBRXFpQyxHQUFRdHJDLEtBQU1pSixFQUFFcWlDLEdBQVF0ckMsSUFBTyxHQUN2RCtvQixFQUFhcWlCLEVBQW1CcmlCLEVBQVksQ0FBRTNVLFdBQVlMLEVBQXlCLEdBQUcsT0FKakZqVCxFQUFJbUksRUFBR3FpQyxJQUFTemlCLEVBQXFCNWYsRUFBR3FpQyxFQUFRdjNCLEVBQXlCLEVBQUcsS0FDakY5SyxFQUFFcWlDLEdBQVF0ckMsSUFBTyxHQUlWK3JDLEdBQW9COWlDLEVBQUdqSixFQUFLK29CLElBQzlCRixFQUFxQjVmLEVBQUdqSixFQUFLK29CLElBR3BDb2pCLEdBQW9CLFNBQTBCbGpDLEVBQUcwZixHQUNuRDVhLEVBQVM5RSxHQUNULElBQUltakMsRUFBYXhoQyxFQUFnQitkLEdBQzdCemhCLEVBQU9xZixFQUFXNmxCLEdBQVkvdUIsT0FBT2d2QixHQUF1QkQsSUFJaEUsT0FIQTNpQyxFQUFTdkMsR0FBTSxTQUFVbEgsR0FDbEJZLElBQWUwckMsR0FBc0JocEMsS0FBSzhvQyxFQUFZcHNDLElBQU1rc0MsR0FBZ0JqakMsRUFBR2pKLEVBQUtvc0MsRUFBV3BzQyxPQUUvRmlKLEdBT0xxakMsR0FBd0IsU0FBOEI1aUIsR0FDeEQsSUFBSVosRUFBSXhVLEVBQVlvVixHQUFHLEdBQ25CdFYsRUFBYW1WLEVBQTJCam1CLEtBQUt2RSxLQUFNK3BCLEdBQ3ZELFFBQUkvcEIsT0FBUzZDLEdBQW1CZCxFQUFJMHFDLEVBQVkxaUIsS0FBT2hvQixFQUFJMnFDLEVBQXdCM2lCLFFBQzVFMVUsSUFBZXRULEVBQUkvQixLQUFNK3BCLEtBQU9ob0IsRUFBSTBxQyxFQUFZMWlCLElBQU1ob0IsRUFBSS9CLEtBQU11c0MsSUFBV3ZzQyxLQUFLdXNDLEdBQVF4aUIsS0FBSzFVLElBR2xHbTRCLEdBQTRCLFNBQWtDdGpDLEVBQUc2ZixHQUNuRSxJQUFJN3BCLEVBQUsyTCxFQUFnQjNCLEdBQ3JCakosRUFBTXNVLEVBQVl3VSxHQUFHLEdBQ3pCLEdBQUk3cEIsSUFBTzJDLElBQW1CZCxFQUFJMHFDLEVBQVl4ckMsSUFBU2MsRUFBSTJxQyxFQUF3QnpyQyxHQUFuRixDQUNBLElBQUlrYSxFQUFhOE8sRUFBK0IvcEIsRUFBSWUsR0FJcEQsT0FISWthLElBQWNwWixFQUFJMHFDLEVBQVl4ckMsSUFBVWMsRUFBSTdCLEVBQUlxc0MsSUFBV3JzQyxFQUFHcXNDLEdBQVF0ckMsS0FDeEVrYSxFQUFXOUYsWUFBYSxHQUVuQjhGLElBR0xzeUIsR0FBdUIsU0FBNkJ2akMsR0FDdEQsSUFBSXFnQixFQUFRTCxFQUEwQnJlLEVBQWdCM0IsSUFDbERtQixFQUFTLEdBSWIsT0FIQVgsRUFBUzZmLEdBQU8sU0FBVXRwQixHQUNuQmMsRUFBSTBxQyxFQUFZeHJDLElBQVNjLEVBQUlnZixFQUFZOWYsSUFBTW9LLEVBQU9rQixLQUFLdEwsTUFFM0RvSyxHQUdMaWlDLEdBQXlCLFNBQStCcGpDLEdBQzFELElBQUl3akMsRUFBc0J4akMsSUFBTXJILEVBQzVCMG5CLEVBQVFMLEVBQTBCd2pCLEVBQXNCaEIsRUFBeUI3Z0MsRUFBZ0IzQixJQUNqR21CLEVBQVMsR0FNYixPQUxBWCxFQUFTNmYsR0FBTyxTQUFVdHBCLElBQ3BCYyxFQUFJMHFDLEVBQVl4ckMsSUFBVXlzQyxJQUF1QjNyQyxFQUFJYyxFQUFpQjVCLElBQ3hFb0ssRUFBT2tCLEtBQUtrZ0MsRUFBV3hyQyxPQUdwQm9LLEdBS0o4b0IsSUFjSGp5QixHQWJBc3FDLEVBQVUsV0FDUixHQUFJeHNDLGdCQUFnQndzQyxFQUFTLE1BQU1yc0MsVUFBVSwrQkFDN0MsSUFBSTRyQyxFQUFlL2lDLFVBQVUxSCxhQUEyQlQsSUFBakJtSSxVQUFVLEdBQStCNUksT0FBTzRJLFVBQVUsU0FBN0JuSSxFQUNoRW1QLEVBQU0xTixFQUFJeXBDLEdBQ1ZoaEIsRUFBUyxTQUFVL3BCLEdBQ2pCaEIsT0FBUzZDLEdBQWlCa29CLEVBQU94bUIsS0FBS21vQyxFQUF3QjFyQyxHQUM5RGUsRUFBSS9CLEtBQU11c0MsSUFBV3hxQyxFQUFJL0IsS0FBS3VzQyxHQUFTdjhCLEtBQU1oUSxLQUFLdXNDLEdBQVF2OEIsSUFBTyxHQUNyRWc5QixHQUFvQmh0QyxLQUFNZ1EsRUFBS2dGLEVBQXlCLEVBQUdoVSxLQUc3RCxPQURJYSxHQUFlaXJDLElBQVlFLEdBQW9CbnFDLEVBQWlCbU4sRUFBSyxDQUFFalAsY0FBYyxFQUFNK0UsSUFBS2lsQixJQUM3RjZYLEdBQUs1eUIsRUFBSys3QixLQUdPLFVBQUcsWUFBWSxXQUN2QyxPQUFPbm1DLEVBQWlCNUYsTUFBTWdRLE9BR2hDOU4sRUFBU3NxQyxFQUFTLGlCQUFpQixTQUFVVCxHQUMzQyxPQUFPbkosR0FBS3RnQyxFQUFJeXBDLEdBQWNBLE1BR2hDcmtCLEVBQTJCNW1CLEVBQUl5c0MsR0FDL0Ivc0MsRUFBcUJNLEVBQUlxc0MsR0FDekJsNUIsRUFBK0JuVCxFQUFJMHNDLEdBQ25DcmlCLEVBQTBCcnFCLEVBQUl3ckMsRUFBNEJ4ckMsRUFBSTJzQyxHQUM5RGhtQixFQUE0QjNtQixFQUFJd3NDLEdBRWhDcjFCLEVBQTZCblgsRUFBSSxTQUFVVSxHQUN6QyxPQUFPb2hDLEdBQUt0aUMsRUFBZ0JrQixHQUFPQSxJQUdqQ0ssSUFFRmlvQixFQUFxQjBpQixFQUFpQixVQUFHLGNBQWUsQ0FDdER6ckMsY0FBYyxFQUNkb0QsSUFBSyxXQUNILE9BQU95QixFQUFpQjVGLE1BQU0rckMsZUFHN0JqMUIsR0FDSDVVLEVBQVNXLEVBQWlCLHVCQUF3QjBxQyxHQUF1QixDQUFFNWtDLFFBQVEsTUFLekZpSyxFQUFFLENBQUU5USxRQUFRLEVBQU04Z0MsTUFBTSxFQUFNLzlCLFFBQVNzdkIsRUFBZTFZLE1BQU8wWSxHQUFpQixDQUM1RWpjLE9BQVFzMEIsSUFHVjloQyxFQUFTOGMsRUFBVzZNLEtBQXdCLFNBQVU3eUIsR0FDcERxcUMsRUFBc0JycUMsTUFHeEJvUixFQUFFLENBQUUzSSxPQUFRbVMsRUFBUWIsTUFBTSxFQUFNMVcsUUFBU3N2QixHQUFpQixDQUd4RCxJQUFPLFNBQVVsekIsR0FDZixJQUFJMFQsRUFBU3ZVLE9BQU9hLEdBQ3BCLEdBQUljLEVBQUk0cUMsRUFBd0JoNEIsR0FBUyxPQUFPZzRCLEVBQXVCaDRCLEdBQ3ZFLElBQUlvVCxFQUFTeWtCLEVBQVE3M0IsR0FHckIsT0FGQWc0QixFQUF1Qmg0QixHQUFVb1QsRUFDakM2a0IsR0FBdUI3a0IsR0FBVXBULEVBQzFCb1QsR0FJVDRsQixPQUFRLFNBQWdCQyxHQUN0QixJQUFLVixHQUFTVSxHQUFNLE1BQU16dEMsVUFBVXl0QyxFQUFNLG9CQUMxQyxHQUFJN3JDLEVBQUk2cUMsR0FBd0JnQixHQUFNLE9BQU9oQixHQUF1QmdCLElBRXRFQyxVQUFXLFdBQWNmLElBQWEsR0FDdENnQixVQUFXLFdBQWNoQixJQUFhLEtBR3hDbDZCLEVBQUUsQ0FBRTNJLE9BQVEsU0FBVXNSLE1BQU0sRUFBTTFXLFFBQVNzdkIsRUFBZTFZLE1BQU81WixHQUFlLENBRzlFdEIsT0EzSFksU0FBZ0IySixFQUFHMGYsR0FDL0IsWUFBc0Ivb0IsSUFBZitvQixFQUEyQnlpQixFQUFtQm5pQyxHQUFLa2pDLEdBQWtCZixFQUFtQm5pQyxHQUFJMGYsSUE2SG5Hem5CLGVBQWdCZ3JDLEdBR2hCL2tCLGlCQUFrQmdsQixHQUdsQmo1Qix5QkFBMEJxNUIsS0FHNUI1NkIsRUFBRSxDQUFFM0ksT0FBUSxTQUFVc1IsTUFBTSxFQUFNMVcsUUFBU3N2QixHQUFpQixDQUcxRDN1QixvQkFBcUJpb0MsR0FHckI1bkIsc0JBQXVCeW5CLEtBS3pCMTZCLEVBQUUsQ0FBRTNJLE9BQVEsU0FBVXNSLE1BQU0sRUFBTTFXLE9BQVFLLEdBQU0sV0FBY3VpQixFQUE0QjNtQixFQUFFLE9BQVUsQ0FDcEcra0Isc0JBQXVCLFNBQStCM2xCLEdBQ3BELE9BQU91bkIsRUFBNEIzbUIsRUFBRThJLEVBQVMxSixPQU05QzI0QixHQVdGam1CLEVBQUUsQ0FBRTNJLE9BQVEsT0FBUXNSLE1BQU0sRUFBTTFXLFFBVkhzdkIsR0FBaUJqdkIsR0FBTSxXQUNsRCxJQUFJNmlCLEVBQVN5a0IsSUFFYixNQUErQixVQUF4QjNULEVBQVcsQ0FBQzlRLEtBRWUsTUFBN0I4USxFQUFXLENBQUUvYyxFQUFHaU0sS0FFYyxNQUE5QjhRLEVBQVcvMUIsT0FBT2lsQixRQUd3QyxDQUUvRGtSLFVBQVcsU0FBbUIvNEIsRUFBSWc1QixFQUFVQyxHQUkxQyxJQUhBLElBRUk0VSxFQUZBN3ZCLEVBQU8sQ0FBQ2hlLEdBQ1JrQixFQUFRLEVBRUw0SCxVQUFVMUgsT0FBU0YsR0FBTzhjLEVBQUszUixLQUFLdkQsVUFBVTVILE1BRXJELEdBREEyc0MsRUFBWTdVLEdBQ1A3NEIsRUFBUzY0QixTQUFvQnI0QixJQUFQWCxLQUFvQmd0QyxHQUFTaHRDLEdBTXhELE9BTEs0TyxFQUFRb3FCLEtBQVdBLEVBQVcsU0FBVWo0QixFQUFLRCxHQUVoRCxHQUR3QixtQkFBYitzQyxJQUF5Qi9zQyxFQUFRK3NDLEVBQVV4cEMsS0FBS3ZFLEtBQU1pQixFQUFLRCxLQUNqRWtzQyxHQUFTbHNDLEdBQVEsT0FBT0EsSUFFL0JrZCxFQUFLLEdBQUtnYixFQUNITCxFQUFXN3FCLE1BQU0sS0FBTWtRLE1BTy9Cc3VCLEVBQWlCLFVBQUVsVSxJQUN0QnIyQixFQUE0QnVxQyxFQUFpQixVQUFHbFUsRUFBY2tVLEVBQWlCLFVBQUUvWixTQUluRi9zQixFQUFlOG1DLEVBQVNwd0IsR0FFeEIyRSxFQUFXd3JCLElBQVUsRyxlQ3RUTyxFQUFRLEtBSXBDVixDQUFzQixhLGVDSk0sRUFBUSxLQUlwQ0EsQ0FBc0IsVSxlQ0pNLEVBQVEsS0FJcENBLENBQXNCLFksZUNKTSxFQUFRLEtBSXBDQSxDQUFzQixXLGVDSk0sRUFBUSxLQUlwQ0EsQ0FBc0IsWSxlQ0pNLEVBQVEsS0FJcENBLENBQXNCLFUsZUNKTSxFQUFRLEtBSXBDQSxDQUFzQixnQixlQ0pNLEVBQVEsS0FJcENBLENBQXNCLGdCLGNDSk0sRUFBUSxLQUlwQ0EsQ0FBc0IsZ0IsNEJDSHRCLElBQUlsWixFQUFzQixFQUFRLEtBQzlCcWIsRUFBYyxFQUFRLE1BRXRCNXBDLEVBQWN1dUIsRUFBb0J2dUIsYUFLdENNLEVBSjZCaXVCLEVBQW9CanVCLHdCQUkxQixjQUFjLFNBQW9CdUYsRUFBUXRDLEdBQy9ELE9BQU9xbUMsRUFBWXpwQyxLQUFLSCxFQUFZcEUsTUFBT2lLLEVBQVF0QyxFQUFPcUIsVUFBVTFILE9BQVMsRUFBSTBILFVBQVUsUUFBS25JLE8sNEJDVGxHLElBQUk4eEIsRUFBc0IsRUFBUSxLQUM5QmtELEVBQVMsY0FFVHp4QixFQUFjdXVCLEVBQW9CdnVCLGFBS3RDTSxFQUo2Qml1QixFQUFvQmp1Qix3QkFJMUIsU0FBUyxTQUFlb0csR0FDN0MsT0FBTytxQixFQUFPenhCLEVBQVlwRSxNQUFPOEssRUFBWTlCLFVBQVUxSCxPQUFTLEVBQUkwSCxVQUFVLFFBQUtuSSxPLDRCQ1RyRixJQUFJOHhCLEVBQXNCLEVBQVEsS0FDOUJzYixFQUFRLEVBQVEsTUFFaEI3cEMsRUFBY3V1QixFQUFvQnZ1QixhQU10Q00sRUFMNkJpdUIsRUFBb0JqdUIsd0JBSzFCLFFBQVEsU0FBYzFELEdBQzNDLE9BQU9pdEMsRUFBTWpnQyxNQUFNNUosRUFBWXBFLE1BQU9nSixlLDRCQ1Z4QyxJQUFJMnBCLEVBQXNCLEVBQVEsS0FDOUJvRCxFQUFVLGVBQ1ZtWSxFQUFxQixFQUFRLE1BRTdCOXBDLEVBQWN1dUIsRUFBb0J2dUIsYUFLdENNLEVBSjZCaXVCLEVBQW9CanVCLHdCQUkxQixVQUFVLFNBQWdCb0csR0FDL0MsSUFBSXFULEVBQU80WCxFQUFRM3hCLEVBQVlwRSxNQUFPOEssRUFBWTlCLFVBQVUxSCxPQUFTLEVBQUkwSCxVQUFVLFFBQUtuSSxHQUN4RixPQUFPcXRDLEVBQW1CbHVDLEtBQU1tZSxPLDRCQ1hsQyxJQUFJd1UsRUFBc0IsRUFBUSxLQUM5QnFELEVBQWEsa0JBRWI1eEIsRUFBY3V1QixFQUFvQnZ1QixhQUt0Q00sRUFKNkJpdUIsRUFBb0JqdUIsd0JBSTFCLGFBQWEsU0FBbUJ5cEMsR0FDckQsT0FBT25ZLEVBQVc1eEIsRUFBWXBFLE1BQU9tdUMsRUFBV25sQyxVQUFVMUgsT0FBUyxFQUFJMEgsVUFBVSxRQUFLbkksTyw0QkNUeEYsSUFBSTh4QixFQUFzQixFQUFRLEtBQzlCd0QsRUFBUSxhQUVSL3hCLEVBQWN1dUIsRUFBb0J2dUIsYUFLdENNLEVBSjZCaXVCLEVBQW9CanVCLHdCQUkxQixRQUFRLFNBQWN5cEMsR0FDM0MsT0FBT2hZLEVBQU0veEIsRUFBWXBFLE1BQU9tdUMsRUFBV25sQyxVQUFVMUgsT0FBUyxFQUFJMEgsVUFBVSxRQUFLbkksTyxlQ1ZqRCxFQUFRLEtBSTFDdXRDLENBQTRCLFdBQVcsU0FBVTdVLEdBQy9DLE9BQU8sU0FBc0I5bkIsRUFBTTdKLEVBQVl0RyxHQUM3QyxPQUFPaTRCLEVBQUt2NUIsS0FBTXlSLEVBQU03SixFQUFZdEcsUSxlQ05OLEVBQVEsS0FJMUM4c0MsQ0FBNEIsV0FBVyxTQUFVN1UsR0FDL0MsT0FBTyxTQUFzQjluQixFQUFNN0osRUFBWXRHLEdBQzdDLE9BQU9pNEIsRUFBS3Y1QixLQUFNeVIsRUFBTTdKLEVBQVl0RyxRLDRCQ0x4QyxJQUFJcXhCLEVBQXNCLEVBQVEsS0FDOUJqb0IsRUFBVyxnQkFFWHRHLEVBQWN1dUIsRUFBb0J2dUIsYUFLdENNLEVBSjZCaXVCLEVBQW9CanVCLHdCQUkxQixXQUFXLFNBQWlCb0csR0FDakRKLEVBQVN0RyxFQUFZcEUsTUFBTzhLLEVBQVk5QixVQUFVMUgsT0FBUyxFQUFJMEgsVUFBVSxRQUFLbkksTyw0QkNUaEYsSUFBSTZ4QixFQUE4QyxFQUFRLE9BTTFENXRCLEVBTG1DLHFDQUtOLE9BSlIsRUFBUSxNQUl3QjR0QixJLDRCQ05yRCxJQUFJQyxFQUFzQixFQUFRLEtBQzlCNkQsRUFBWSxpQkFFWnB5QixFQUFjdXVCLEVBQW9CdnVCLGFBS3RDTSxFQUo2Qml1QixFQUFvQmp1Qix3QkFJMUIsWUFBWSxTQUFrQnFKLEdBQ25ELE9BQU95b0IsRUFBVXB5QixFQUFZcEUsTUFBTytOLEVBQWUvRSxVQUFVMUgsT0FBUyxFQUFJMEgsVUFBVSxRQUFLbkksTyw0QkNUM0YsSUFBSTh4QixFQUFzQixFQUFRLEtBQzlCOEQsRUFBVyxnQkFFWHJ5QixFQUFjdXVCLEVBQW9CdnVCLGFBS3RDTSxFQUo2Qml1QixFQUFvQmp1Qix3QkFJMUIsV0FBVyxTQUFpQnFKLEdBQ2pELE9BQU8wb0IsRUFBU3J5QixFQUFZcEUsTUFBTytOLEVBQWUvRSxVQUFVMUgsT0FBUyxFQUFJMEgsVUFBVSxRQUFLbkksTyxlQ1Z4RCxFQUFRLEtBSTFDdXRDLENBQTRCLFNBQVMsU0FBVTdVLEdBQzdDLE9BQU8sU0FBb0I5bkIsRUFBTTdKLEVBQVl0RyxHQUMzQyxPQUFPaTRCLEVBQUt2NUIsS0FBTXlSLEVBQU03SixFQUFZdEcsUSxlQ05OLEVBQVEsS0FJMUM4c0MsQ0FBNEIsU0FBUyxTQUFVN1UsR0FDN0MsT0FBTyxTQUFvQjluQixFQUFNN0osRUFBWXRHLEdBQzNDLE9BQU9pNEIsRUFBS3Y1QixLQUFNeVIsRUFBTTdKLEVBQVl0RyxRLGVDTk4sRUFBUSxLQUkxQzhzQyxDQUE0QixRQUFRLFNBQVU3VSxHQUM1QyxPQUFPLFNBQW1COW5CLEVBQU03SixFQUFZdEcsR0FDMUMsT0FBT2k0QixFQUFLdjVCLEtBQU15UixFQUFNN0osRUFBWXRHLFEsNEJDTHhDLElBQUlRLEVBQVMsRUFBUSxNQUNqQjZ3QixFQUFzQixFQUFRLEtBQzlCMGIsRUFBaUIsRUFBUSxNQUd6QmovQixFQUZrQixFQUFRLEtBRWY5TyxDQUFnQixZQUMzQmdELEVBQWF4QixFQUFPd0IsV0FDcEJnckMsRUFBY0QsRUFBZXQyQixPQUM3QncyQixFQUFZRixFQUFlbG1DLEtBQzNCcW1DLEVBQWVILEVBQWU1N0IsUUFDOUJyTyxFQUFjdXVCLEVBQW9CdnVCLFlBQ2xDTSxFQUF5Qml1QixFQUFvQmp1Qix1QkFDN0MrcEMsRUFBMkJuckMsR0FBY0EsRUFBVzFDLFVBQVV3TyxHQUU5RHMvQixJQUFzQkQsSUFDYSxVQUFqQ0EsRUFBeUJqdEMsTUFBcURYLE1BQWpDNHRDLEVBQXlCanRDLE1BRXhFbXRDLEVBQW1CLFdBQ3JCLE9BQU9MLEVBQVkvcEMsS0FBS0gsRUFBWXBFLFFBS3RDMEUsRUFBdUIsV0FBVyxXQUNoQyxPQUFPOHBDLEVBQWFqcUMsS0FBS0gsRUFBWXBFLFVBSXZDMEUsRUFBdUIsUUFBUSxXQUM3QixPQUFPNnBDLEVBQVVocUMsS0FBS0gsRUFBWXBFLFVBSXBDMEUsRUFBdUIsU0FBVWlxQyxHQUFtQkQsR0FHcERocUMsRUFBdUIwSyxFQUFVdS9CLEdBQW1CRCxJLDRCQ3BDcEQsSUFBSS9iLEVBQXNCLEVBQVEsS0FFOUJ2dUIsRUFBY3V1QixFQUFvQnZ1QixZQUNsQ00sRUFBeUJpdUIsRUFBb0JqdUIsdUJBQzdDa3FDLEVBQVEsR0FBR3h3QixLQUtmMVosRUFBdUIsUUFBUSxTQUFjcXlCLEdBQzNDLE9BQU82WCxFQUFNNWdDLE1BQU01SixFQUFZcEUsTUFBT2dKLGUsNEJDVnhDLElBQUkycEIsRUFBc0IsRUFBUSxLQUM5QmtjLEVBQWUsRUFBUSxNQUV2QnpxQyxFQUFjdXVCLEVBQW9CdnVCLGFBTXRDTSxFQUw2Qml1QixFQUFvQmp1Qix3QkFLMUIsZUFBZSxTQUFxQnFKLEdBQ3pELE9BQU84Z0MsRUFBYTdnQyxNQUFNNUosRUFBWXBFLE1BQU9nSixlLDRCQ1YvQyxJQUFJMnBCLEVBQXNCLEVBQVEsS0FDOUJxRSxFQUFPLFlBQ1AvQyxFQUFxQixFQUFRLE1BRTdCN3ZCLEVBQWN1dUIsRUFBb0J2dUIsWUFDbENDLEVBQXlCc3VCLEVBQW9CdHVCLHdCQUtqREssRUFKNkJpdUIsRUFBb0JqdUIsd0JBSTFCLE9BQU8sU0FBYStHLEdBQ3pDLE9BQU91ckIsRUFBSzV5QixFQUFZcEUsTUFBT3lMLEVBQU96QyxVQUFVMUgsT0FBUyxFQUFJMEgsVUFBVSxRQUFLbkksR0FBVyxTQUFVcUosRUFBRzVJLEdBQ2xHLE9BQU8sSUFBSytDLEVBQXVCNHZCLEVBQW1CL3BCLEVBQUdBLEVBQUU3QixjQUFwRCxDQUFtRS9HLFUsNEJDWjlFLElBQUlxeEIsRUFBc0IsRUFBUSxLQUM5QkQsRUFBOEMsRUFBUSxNQUV0RHJ1QixFQUF5QnN1QixFQUFvQnR1Qix3QkFLakRTLEVBSm1DNnRCLEVBQW9CN3RCLDhCQUkxQixNQUFNLFdBSWpDLElBSEEsSUFBSTFELEVBQVEsRUFDUkUsRUFBUzBILFVBQVUxSCxPQUNuQitKLEVBQVMsSUFBS2hILEVBQXVCckUsTUFBNUIsQ0FBbUNzQixHQUN6Q0EsRUFBU0YsR0FBT2lLLEVBQU9qSyxHQUFTNEgsVUFBVTVILEtBQ2pELE9BQU9pSyxJQUNOcW5CLEksNEJDZEgsSUFBSUMsRUFBc0IsRUFBUSxLQUM5QnVFLEVBQWUsY0FFZjl5QixFQUFjdXVCLEVBQW9CdnVCLGFBS3RDTSxFQUo2Qml1QixFQUFvQmp1Qix3QkFJMUIsZUFBZSxTQUFxQm9HLEdBQ3pELE9BQU9vc0IsRUFBYTl5QixFQUFZcEUsTUFBTzhLLEVBQVk5QixVQUFVMUgsT0FBUTBILFVBQVUxSCxPQUFTLEVBQUkwSCxVQUFVLFFBQUtuSSxPLDRCQ1Q3RyxJQUFJOHhCLEVBQXNCLEVBQVEsS0FDOUIwRSxFQUFVLGFBRVZqekIsRUFBY3V1QixFQUFvQnZ1QixhQUt0Q00sRUFKNkJpdUIsRUFBb0JqdUIsd0JBSTFCLFVBQVUsU0FBZ0JvRyxHQUMvQyxPQUFPdXNCLEVBQVFqekIsRUFBWXBFLE1BQU84SyxFQUFZOUIsVUFBVTFILE9BQVEwSCxVQUFVMUgsT0FBUyxFQUFJMEgsVUFBVSxRQUFLbkksTyw0QkNUeEcsSUFBSTh4QixFQUFzQixFQUFRLEtBRTlCdnVCLEVBQWN1dUIsRUFBb0J2dUIsWUFDbENNLEVBQXlCaXVCLEVBQW9CanVCLHVCQUM3QytaLEVBQVExVSxLQUFLMFUsTUFJakIvWixFQUF1QixXQUFXLFdBTWhDLElBTEEsSUFJSTFELEVBSkFnTSxFQUFPaE4sS0FDUHNCLEVBQVM4QyxFQUFZNEksR0FBTTFMLE9BQzNCd3RDLEVBQVNyd0IsRUFBTW5kLEVBQVMsR0FDeEJGLEVBQVEsRUFFTEEsRUFBUTB0QyxHQUNiOXRDLEVBQVFnTSxFQUFLNUwsR0FDYjRMLEVBQUs1TCxLQUFXNEwsSUFBTzFMLEdBQ3ZCMEwsRUFBSzFMLEdBQVVOLEVBQ2YsT0FBT2dNLE0sNEJDbEJYLElBQUkybEIsRUFBc0IsRUFBUSxLQUM5QnR0QixFQUFXLEVBQVEsTUFDbkJ3dEIsRUFBVyxFQUFRLE1BQ25CanBCLEVBQVcsRUFBUSxNQUNuQjFFLEVBQVEsRUFBUSxNQUVoQmQsRUFBY3V1QixFQUFvQnZ1QixhQVV0Q00sRUFUNkJpdUIsRUFBb0JqdUIsd0JBUzFCLE9BQU8sU0FBYTBHLEdBQ3pDaEgsRUFBWXBFLE1BQ1osSUFBSTZJLEVBQVNncUIsRUFBUzdwQixVQUFVMUgsT0FBUyxFQUFJMEgsVUFBVSxRQUFLbkksRUFBVyxHQUNuRVMsRUFBU3RCLEtBQUtzQixPQUNkbW9CLEVBQU03ZixFQUFTd0IsR0FDZmpCLEVBQU05RSxFQUFTb2tCLEVBQUlub0IsUUFDbkJGLEVBQVEsRUFDWixHQUFJK0ksRUFBTXRCLEVBQVN2SCxFQUFRLE1BQU1nRixXQUFXLGdCQUM1QyxLQUFPbEYsRUFBUStJLEdBQUtuSyxLQUFLNkksRUFBU3pILEdBQVNxb0IsRUFBSXJvQixPQWZwQzhELEdBQU0sV0FFakIsSUFBSTNDLFVBQVUsR0FBR3VELElBQUksUywyQkNYdkIsSUFBSTZzQixFQUFzQixFQUFRLEtBQzlCc0IsRUFBcUIsRUFBUSxNQUM3Qi91QixFQUFRLEVBQVEsTUFFaEJkLEVBQWN1dUIsRUFBb0J2dUIsWUFDbENDLEVBQXlCc3VCLEVBQW9CdHVCLHVCQUM3Q0ssRUFBeUJpdUIsRUFBb0JqdUIsdUJBQzdDcXFDLEVBQVMsR0FBR2xuQyxNQVNoQm5ELEVBQXVCLFNBQVMsU0FBZWlELEVBQU8yQyxHQU1wRCxJQUxBLElBQUk2VCxFQUFPNHdCLEVBQU94cUMsS0FBS0gsRUFBWXBFLE1BQU8ySCxFQUFPMkMsR0FDN0NoRyxFQUFJMnZCLEVBQW1CajBCLEtBQU1BLEtBQUtxSSxhQUNsQ2pILEVBQVEsRUFDUkUsRUFBUzZjLEVBQUs3YyxPQUNkK0osRUFBUyxJQUFLaEgsRUFBdUJDLEdBQTVCLENBQWdDaEQsR0FDdENBLEVBQVNGLEdBQU9pSyxFQUFPakssR0FBUytjLEVBQUsvYyxLQUM1QyxPQUFPaUssSUFkSW5HLEdBQU0sV0FFakIsSUFBSTNDLFVBQVUsR0FBR3NGLGEsNEJDWG5CLElBQUk4cUIsRUFBc0IsRUFBUSxLQUM5QitFLEVBQVEsYUFFUnR6QixFQUFjdXVCLEVBQW9CdnVCLGFBS3RDTSxFQUo2Qml1QixFQUFvQmp1Qix3QkFJMUIsUUFBUSxTQUFjb0csR0FDM0MsT0FBTzRzQixFQUFNdHpCLEVBQVlwRSxNQUFPOEssRUFBWTlCLFVBQVUxSCxPQUFTLEVBQUkwSCxVQUFVLFFBQUtuSSxPLDRCQ1RwRixJQUFJOHhCLEVBQXNCLEVBQVEsS0FFOUJ2dUIsRUFBY3V1QixFQUFvQnZ1QixZQUNsQ00sRUFBeUJpdUIsRUFBb0JqdUIsdUJBQzdDc3FDLEVBQVEsR0FBRzdvQixLQUlmemhCLEVBQXVCLFFBQVEsU0FBY296QixHQUMzQyxPQUFPa1gsRUFBTXpxQyxLQUFLSCxFQUFZcEUsTUFBTzgzQixPLDRCQ1R2QyxJQUFJbkYsRUFBc0IsRUFBUSxLQUM5QnR0QixFQUFXLEVBQVEsTUFDbkJ3RSxFQUFrQixFQUFRLE1BQzFCb3FCLEVBQXFCLEVBQVEsTUFFN0I3dkIsRUFBY3V1QixFQUFvQnZ1QixhQUt0Q00sRUFKNkJpdUIsRUFBb0JqdUIsd0JBSTFCLFlBQVksU0FBa0J1cUMsRUFBTzNrQyxHQUMxRCxJQUFJSixFQUFJOUYsRUFBWXBFLE1BQ2hCc0IsRUFBUzRJLEVBQUU1SSxPQUNYNHRDLEVBQWFybEMsRUFBZ0JvbEMsRUFBTzN0QyxHQUN4QyxPQUFPLElBQUsyeUIsRUFBbUIvcEIsRUFBR0EsRUFBRTdCLGFBQTdCLENBQ0w2QixFQUFFbEQsT0FDRmtELEVBQUV0QyxXQUFhc25DLEVBQWFobEMsRUFBRThvQixrQkFDOUIzdEIsUUFBa0J4RSxJQUFSeUosRUFBb0JoSixFQUFTdUksRUFBZ0JTLEVBQUtoSixJQUFXNHRDLFEsNEJDakIzRSxJQUFJcHRDLEVBQVMsRUFBUSxNQUNqQjZ3QixFQUFzQixFQUFRLEtBQzlCenRCLEVBQVEsRUFBUSxNQUVoQjNDLEVBQVlULEVBQU9TLFVBQ25CNkIsRUFBY3V1QixFQUFvQnZ1QixZQUNsQ00sRUFBeUJpdUIsRUFBb0JqdUIsdUJBQzdDeXFDLEVBQWtCLEdBQUdDLGVBQ3JCTCxFQUFTLEdBQUdsbkMsTUFHWnduQyxJQUF5QjlzQyxHQUFhMkMsR0FBTSxXQUM5Q2lxQyxFQUFnQjVxQyxLQUFLLElBQUloQyxFQUFVLE9BV3JDbUMsRUFBdUIsa0JBQWtCLFdBQ3ZDLE9BQU95cUMsRUFBZ0JuaEMsTUFBTXFoQyxFQUF1Qk4sRUFBT3hxQyxLQUFLSCxFQUFZcEUsT0FBU29FLEVBQVlwRSxNQUFPZ0osYUFUN0Y5RCxHQUFNLFdBQ2pCLE1BQU8sQ0FBQyxFQUFHLEdBQUdrcUMsa0JBQW9CLElBQUk3c0MsRUFBVSxDQUFDLEVBQUcsSUFBSTZzQyxzQkFDbkRscUMsR0FBTSxXQUNYM0MsRUFBVTNCLFVBQVV3dUMsZUFBZTdxQyxLQUFLLENBQUMsRUFBRyxTLDRCQ2xCOUMsSUFBSUcsRUFBeUIsOEJBQ3pCUSxFQUFRLEVBQVEsTUFHaEI1QixFQUZTLEVBQVEsTUFFR0EsV0FDcEJnc0MsRUFBc0Joc0MsR0FBY0EsRUFBVzFDLFdBQWEsR0FDNUQydUMsRUFBZ0IsR0FBRzMvQixTQUNuQjQvQixFQUFZLEdBQUdweEIsS0FFZmxaLEdBQU0sV0FBY3FxQyxFQUFjaHJDLEtBQUssU0FDekNnckMsRUFBZ0IsV0FDZCxPQUFPQyxFQUFVanJDLEtBQUt2RSxRQUkxQixJQUFJeXZDLEVBQXNCSCxFQUFvQjEvQixVQUFZMi9CLEVBSTFEN3FDLEVBQXVCLFdBQVk2cUMsRUFBZUUsSSxlQ3BCaEIsRUFBUSxLQUkxQ3JCLENBQTRCLFVBQVUsU0FBVTdVLEdBQzlDLE9BQU8sU0FBcUI5bkIsRUFBTTdKLEVBQVl0RyxHQUM1QyxPQUFPaTRCLEVBQUt2NUIsS0FBTXlSLEVBQU03SixFQUFZdEcsUSxlQ05OLEVBQVEsS0FJMUM4c0MsQ0FBNEIsVUFBVSxTQUFVN1UsR0FDOUMsT0FBTyxTQUFxQjluQixFQUFNN0osRUFBWXRHLEdBQzVDLE9BQU9pNEIsRUFBS3Y1QixLQUFNeVIsRUFBTTdKLEVBQVl0RyxRLGVDTk4sRUFBUSxLQUkxQzhzQyxDQUE0QixTQUFTLFNBQVU3VSxHQUM3QyxPQUFPLFNBQW9COW5CLEVBQU03SixFQUFZdEcsR0FDM0MsT0FBT2k0QixFQUFLdjVCLEtBQU15UixFQUFNN0osRUFBWXRHLFEsZUNOTixFQUFRLEtBSTFDOHNDLENBQTRCLFNBQVMsU0FBVTdVLEdBQzdDLE9BQU8sU0FBMkI5bkIsRUFBTTdKLEVBQVl0RyxHQUNsRCxPQUFPaTRCLEVBQUt2NUIsS0FBTXlSLEVBQU03SixFQUFZdEcsT0FFckMsSSw0QkNQSCxJQVdJb3VDLEVBWEE1dEMsRUFBUyxFQUFRLE1BQ2pCbUQsRUFBYyxFQUFRLE1BQ3RCNk4sRUFBeUIsRUFBUSxNQUNqQ3VtQixFQUFhLEVBQVEsTUFDckJzVyxFQUFpQixFQUFRLE1BQ3pCdHZDLEVBQVcsRUFBUSxLQUNuQnV2QyxFQUFzQixnQkFDdEJydUIsRUFBa0IsRUFBUSxNQUUxQnN1QixHQUFXL3RDLEVBQU9nbkIsZUFBaUIsa0JBQW1CaG5CLEVBQ3RENmIsRUFBZTdhLE9BQU82YSxhQUd0QmpOLEVBQVUsU0FBVTZvQixHQUN0QixPQUFPLFdBQ0wsT0FBT0EsRUFBS3Y1QixLQUFNZ0osVUFBVTFILE9BQVMwSCxVQUFVLFFBQUtuSSxLQU1wRGl2QyxFQUFXandDLEVBQU9ELFFBQVV5NUIsRUFBVyxVQUFXM29CLEVBQVNpL0IsR0FLL0QsR0FBSXB1QixHQUFtQnN1QixFQUFTLENBQzlCSCxFQUFrQkMsRUFBZWwvQixlQUFlQyxFQUFTLFdBQVcsR0FDcEVvQyxFQUF1QlUsVUFBVyxFQUNsQyxJQUFJdThCLEVBQW1CRCxFQUFTbHZDLFVBQzVCb3ZDLEVBQWVELEVBQXlCLE9BQ3hDRSxFQUFZRixFQUFpQmh1QyxJQUM3Qm11QyxFQUFZSCxFQUFpQjVyQyxJQUM3QmdzQyxFQUFZSixFQUFpQmpxQyxJQUNqQ2IsRUFBWThxQyxFQUFrQixDQUM1QixPQUFVLFNBQVU5dUMsR0FDbEIsR0FBSVosRUFBU1ksS0FBUzBjLEVBQWExYyxHQUFNLENBQ3ZDLElBQUltUSxFQUFRdytCLEVBQW9CNXZDLE1BRWhDLE9BREtvUixFQUFNbUIsU0FBUW5CLEVBQU1tQixPQUFTLElBQUltOUIsR0FDL0JNLEVBQWF6ckMsS0FBS3ZFLEtBQU1pQixJQUFRbVEsRUFBTW1CLE9BQWUsT0FBRXRSLEdBQzlELE9BQU8rdUMsRUFBYXpyQyxLQUFLdkUsS0FBTWlCLElBRW5DYyxJQUFLLFNBQWFkLEdBQ2hCLEdBQUlaLEVBQVNZLEtBQVMwYyxFQUFhMWMsR0FBTSxDQUN2QyxJQUFJbVEsRUFBUXcrQixFQUFvQjV2QyxNQUVoQyxPQURLb1IsRUFBTW1CLFNBQVFuQixFQUFNbUIsT0FBUyxJQUFJbTlCLEdBQy9CTyxFQUFVMXJDLEtBQUt2RSxLQUFNaUIsSUFBUW1RLEVBQU1tQixPQUFPeFEsSUFBSWQsR0FDckQsT0FBT2d2QyxFQUFVMXJDLEtBQUt2RSxLQUFNaUIsSUFFaENrRCxJQUFLLFNBQWFsRCxHQUNoQixHQUFJWixFQUFTWSxLQUFTMGMsRUFBYTFjLEdBQU0sQ0FDdkMsSUFBSW1RLEVBQVF3K0IsRUFBb0I1dkMsTUFFaEMsT0FES29SLEVBQU1tQixTQUFRbkIsRUFBTW1CLE9BQVMsSUFBSW05QixHQUMvQk8sRUFBVTFyQyxLQUFLdkUsS0FBTWlCLEdBQU9pdkMsRUFBVTNyQyxLQUFLdkUsS0FBTWlCLEdBQU9tUSxFQUFNbUIsT0FBT3BPLElBQUlsRCxHQUNoRixPQUFPaXZDLEVBQVUzckMsS0FBS3ZFLEtBQU1pQixJQUVoQzZFLElBQUssU0FBYTdFLEVBQUtELEdBQ3JCLEdBQUlYLEVBQVNZLEtBQVMwYyxFQUFhMWMsR0FBTSxDQUN2QyxJQUFJbVEsRUFBUXcrQixFQUFvQjV2QyxNQUMzQm9SLEVBQU1tQixTQUFRbkIsRUFBTW1CLE9BQVMsSUFBSW05QixHQUN0Q08sRUFBVTFyQyxLQUFLdkUsS0FBTWlCLEdBQU9rdkMsRUFBVTVyQyxLQUFLdkUsS0FBTWlCLEVBQUtELEdBQVNvUSxFQUFNbUIsT0FBT3pNLElBQUk3RSxFQUFLRCxRQUNoRm12QyxFQUFVNXJDLEtBQUt2RSxLQUFNaUIsRUFBS0QsR0FDakMsT0FBT2hCLFUsNEJDOURJLEVBQVEsS0FLekJxNUIsQ0FBVyxXQUFXLFNBQVVFLEdBQzlCLE9BQU8sV0FBcUIsT0FBT0EsRUFBS3Y1QixLQUFNZ0osVUFBVTFILE9BQVMwSCxVQUFVLFFBQUtuSSxNQUw3RCxFQUFRLFEsZUNGN0IsSUFBSWlCLEVBQVMsRUFBUSxNQUNqQnN1QyxFQUFlLEVBQVEsTUFDdkJ2bEMsRUFBVSxFQUFRLE1BQ2xCNUksRUFBOEIsRUFBUSxNQUUxQyxJQUFLLElBQUlvdUMsS0FBbUJELEVBQWMsQ0FDeEMsSUFBSUUsRUFBYXh1QyxFQUFPdXVDLEdBQ3BCRSxFQUFzQkQsR0FBY0EsRUFBVzF2QyxVQUVuRCxHQUFJMnZDLEdBQXVCQSxFQUFvQjFsQyxVQUFZQSxFQUFTLElBQ2xFNUksRUFBNEJzdUMsRUFBcUIsVUFBVzFsQyxHQUM1RCxNQUFPOUYsR0FDUHdyQyxFQUFvQjFsQyxRQUFVQSxLLGVDWmxDLElBQUkvSSxFQUFTLEVBQVEsTUFDakJzdUMsRUFBZSxFQUFRLE1BQ3ZCSSxFQUF1QixFQUFRLE1BQy9CdnVDLEVBQThCLEVBQVEsTUFDdEMzQixFQUFrQixFQUFRLE1BRTFCOE8sRUFBVzlPLEVBQWdCLFlBQzNCMEMsRUFBZ0IxQyxFQUFnQixlQUNoQ213QyxFQUFjRCxFQUFxQno0QixPQUV2QyxJQUFLLElBQUlzNEIsS0FBbUJELEVBQWMsQ0FDeEMsSUFBSUUsRUFBYXh1QyxFQUFPdXVDLEdBQ3BCRSxFQUFzQkQsR0FBY0EsRUFBVzF2QyxVQUNuRCxHQUFJMnZDLEVBQXFCLENBRXZCLEdBQUlBLEVBQW9CbmhDLEtBQWNxaEMsRUFBYSxJQUNqRHh1QyxFQUE0QnN1QyxFQUFxQm5oQyxFQUFVcWhDLEdBQzNELE1BQU8xckMsR0FDUHdyQyxFQUFvQm5oQyxHQUFZcWhDLEVBS2xDLEdBSEtGLEVBQW9CdnRDLElBQ3ZCZixFQUE0QnN1QyxFQUFxQnZ0QyxFQUFlcXRDLEdBRTlERCxFQUFhQyxHQUFrQixJQUFLLElBQUlsaUMsS0FBZXFpQyxFQUV6RCxHQUFJRCxFQUFvQnBpQyxLQUFpQnFpQyxFQUFxQnJpQyxHQUFjLElBQzFFbE0sRUFBNEJzdUMsRUFBcUJwaUMsRUFBYXFpQyxFQUFxQnJpQyxJQUNuRixNQUFPcEosR0FDUHdyQyxFQUFvQnBpQyxHQUFlcWlDLEVBQXFCcmlDLE8sZUM1QmhFLElBQUl5RSxFQUFJLEVBQVEsTUFDWjlRLEVBQVMsRUFBUSxNQUNqQjhqQixFQUFPLEVBQVEsS0FLbkJoVCxFQUFFLENBQUU5USxRQUFRLEVBQU1pSixNQUFNLEVBQU1zSyxZQUFZLEVBQU14USxRQUhsQy9DLEVBQU9ndkIsZUFBaUJodkIsRUFBT2l2QixnQkFHcUIsQ0FHaEVELGFBQWNsTCxFQUFLOWYsSUFHbkJpckIsZUFBZ0JuTCxFQUFLcFUsUyxlQ2J2QixJQUFJb0IsRUFBSSxFQUFRLE1BQ1o5USxFQUFTLEVBQVEsTUFDakJ1K0IsRUFBWSxFQUFRLE1BQ3BCeGIsRUFBVSxFQUFRLE1BRWxCdEssRUFBVXpZLEVBQU95WSxRQUlyQjNILEVBQUUsQ0FBRTlRLFFBQVEsRUFBTXVULFlBQVksRUFBTW1HLGFBQWEsR0FBUSxDQUN2RDBKLGVBQWdCLFNBQXdCaFcsR0FDdEMsSUFBSWtXLEVBQVNQLEdBQVd0SyxFQUFRNkssT0FDaENpYixFQUFVamIsRUFBU0EsRUFBT3JhLEtBQUttRSxHQUFNQSxPLGVDWnpDLElBQUkwRCxFQUFJLEVBQVEsTUFDWjlRLEVBQVMsRUFBUSxNQUNqQnVZLEVBQVksRUFBUSxNQUVwQnhTLEVBQVEsR0FBR0EsTUFHWCs2QixFQUFPLFNBQVU4TixHQUNuQixPQUFPLFNBQVU3TyxFQUFTOE8sR0FDeEIsSUFBSUMsRUFBWTVuQyxVQUFVMUgsT0FBUyxFQUMvQjRjLEVBQU8weUIsRUFBWS9vQyxFQUFNdEQsS0FBS3lFLFVBQVcsUUFBS25JLEVBQ2xELE9BQU82dkMsRUFBVUUsRUFBWSxZQUVSLG1CQUFYL08sRUFBd0JBLEVBQVUzOUIsU0FBUzI5QixJQUFVN3pCLE1BQU1oTyxLQUFNa2UsSUFDdkUyakIsRUFBUzhPLEtBTWpCLzlCLEVBQUUsQ0FBRTlRLFFBQVEsRUFBTWlKLE1BQU0sRUFBTWxHLE9BZm5CLFdBQVd5VixLQUFLRCxJQWVtQixDQUc1QzRYLFdBQVkyUSxFQUFLOWdDLEVBQU9td0IsWUFHeEI0ZSxZQUFhak8sRUFBSzlnQyxFQUFPK3VDLGdCLDRCQ3hCM0IsRUFBUSxNQUNSLElBQUlqK0IsRUFBSSxFQUFRLE1BQ1o0SCxFQUFhLEVBQVEsTUFDckJzMkIsRUFBaUIsRUFBUSxLQUN6QjV1QyxFQUFXLEVBQVEsTUFDbkIrQyxFQUFjLEVBQVEsTUFDdEJTLEVBQWlCLEVBQVEsTUFDekJtUixFQUE0QixFQUFRLE1BQ3BDbFIsRUFBc0IsRUFBUSxNQUM5QlIsRUFBYSxFQUFRLE1BQ3JCNHJDLEVBQVMsRUFBUSxNQUNqQmhtQyxFQUFPLEVBQVEsTUFDZi9JLEVBQVUsRUFBUSxLQUNsQmdOLEVBQVcsRUFBUSxNQUNuQjNPLEVBQVcsRUFBUSxLQUNuQkUsRUFBUyxFQUFRLElBQ2pCeVUsRUFBMkIsRUFBUSxNQUNuQ2c4QixFQUFjLEVBQVEsTUFDdEI3bEMsRUFBb0IsRUFBUSxNQUM1QjdLLEVBQWtCLEVBQVEsTUFFMUJvZ0MsRUFBU2xtQixFQUFXLFNBQ3BCeTJCLEVBQVV6MkIsRUFBVyxXQUNyQnBMLEVBQVc5TyxFQUFnQixZQUMzQjR3QyxFQUFvQixrQkFDcEJDLEVBQTZCRCwwQkFDN0JyckMsRUFBbUJGLEVBQW9CRyxJQUN2Q3NyQyxFQUF5QnpyQyxFQUFvQjZLLFVBQVUwZ0MsR0FDdkRuL0IsRUFBMkJwTSxFQUFvQjZLLFVBQVUyZ0MsR0FFekRFLEVBQU8sTUFDUEMsRUFBWTN3QyxNQUFNLEdBRWxCNHdDLEVBQWtCLFNBQVU3cEMsR0FDOUIsT0FBTzRwQyxFQUFVNXBDLEVBQVEsS0FBTzRwQyxFQUFVNXBDLEVBQVEsR0FBS3FWLE9BQU8scUJBQXVCclYsRUFBUSxLQUFNLFFBR2pHOHBDLEVBQWdCLFNBQVVDLEdBQzVCLElBQ0UsT0FBT0MsbUJBQW1CRCxHQUMxQixNQUFPMXNDLEdBQ1AsT0FBTzBzQyxJQUlQRSxFQUFjLFNBQVV6eEMsR0FDMUIsSUFBSW1MLEVBQVNuTCxFQUFHNFUsUUFBUXU4QixFQUFNLEtBQzFCM3BDLEVBQVEsRUFDWixJQUNFLE9BQU9ncUMsbUJBQW1Ccm1DLEdBQzFCLE1BQU90RyxHQUNQLEtBQU8yQyxHQUNMMkQsRUFBU0EsRUFBT3lKLFFBQVF5OEIsRUFBZ0I3cEMsS0FBVThwQyxHQUVwRCxPQUFPbm1DLElBSVBtQyxFQUFPLGVBRVBzSCxFQUFVLENBQ1osSUFBSyxNQUNMLElBQUssTUFDTCxJQUFLLE1BQ0wsSUFBSyxNQUNMLElBQUssTUFDTCxNQUFPLEtBR0xva0IsRUFBVyxTQUFVemUsR0FDdkIsT0FBTzNGLEVBQVEyRixJQUdibTNCLEVBQVksU0FBVTF4QyxHQUN4QixPQUFPMnhDLG1CQUFtQjN4QyxHQUFJNFUsUUFBUXRILEVBQU0wckIsSUFHMUM0WSxFQUFvQixTQUFVem1DLEVBQVEwbUMsR0FDeEMsR0FBSUEsRUFJRixJQUhBLElBRUluOUIsRUFBV3ZELEVBRlhzeUIsRUFBYW9PLEVBQU1sM0IsTUFBTSxLQUN6QnpaLEVBQVEsRUFFTEEsRUFBUXVpQyxFQUFXcmlDLFNBQ3hCc1QsRUFBWSt1QixFQUFXdmlDLE1BQ1RFLFNBQ1orUCxFQUFRdUQsRUFBVWlHLE1BQU0sS0FDeEJ4UCxFQUFPa0IsS0FBSyxDQUNWdEwsSUFBSzB3QyxFQUFZdGdDLEVBQU0yZ0MsU0FDdkJoeEMsTUFBTzJ3QyxFQUFZdGdDLEVBQU0rTSxLQUFLLFVBT3BDNnpCLEVBQXFCLFNBQVVGLEdBQ2pDL3hDLEtBQUt5UyxRQUFRblIsT0FBUyxFQUN0Qnd3QyxFQUFrQjl4QyxLQUFLeVMsUUFBU3MvQixJQUc5QkcsRUFBMEIsU0FBVUMsRUFBUUMsR0FDOUMsR0FBSUQsRUFBU0MsRUFBVSxNQUFNanlDLFVBQVUseUJBR3JDa3lDLEVBQTBCeDdCLEdBQTBCLFNBQWtCeTdCLEVBQVFyZ0MsR0FDaEZwTSxFQUFpQjdGLEtBQU0sQ0FDckI4USxLQUFNcWdDLEVBQ041bEMsU0FBVXlsQyxFQUFZSSxFQUF1QmtCLEdBQVE3L0IsU0FDckRSLEtBQU1BLE1BRVAsWUFBWSxXQUNiLElBQUliLEVBQVFXLEVBQXlCL1IsTUFDakNpUyxFQUFPYixFQUFNYSxLQUNiM0csRUFBTzhGLEVBQU03RixTQUFTQyxPQUN0QjZGLEVBQVEvRixFQUFLdEssTUFHZixPQUZHc0ssRUFBS00sT0FDUk4sRUFBS3RLLE1BQWlCLFNBQVRpUixFQUFrQlosRUFBTXBRLElBQWUsV0FBVGdSLEVBQW9CWixFQUFNclEsTUFBUSxDQUFDcVEsRUFBTXBRLElBQUtvUSxFQUFNclEsUUFDeEZzSyxLQUtQaW5DLEVBQTZCLFdBQy9CcHRDLEVBQVduRixLQUFNdXlDLEVBQTRCckIsR0FDN0MsSUFHSXZsQyxFQUFnQkosRUFBVUMsRUFBTUYsRUFBTWtuQyxFQUFlQyxFQUFXMWhDLEVBQU8wYyxFQUFReHNCLEVBSC9FczRCLEVBQU92d0IsVUFBVTFILE9BQVMsRUFBSTBILFVBQVUsUUFBS25JLEVBQzdDbU0sRUFBT2hOLEtBQ1B5UyxFQUFVLEdBVWQsR0FQQTVNLEVBQWlCbUgsRUFBTSxDQUNyQjhELEtBQU1vZ0MsRUFDTnorQixRQUFTQSxFQUNUaWdDLFVBQVcsYUFDWFQsbUJBQW9CQSxTQUdUcHhDLElBQVQwNEIsRUFDRixHQUFJbDVCLEVBQVNrNUIsR0FFWCxHQUE4QixtQkFEOUI1dEIsRUFBaUJSLEVBQWtCb3VCLElBSWpDLElBREEvdEIsR0FEQUQsRUFBV0ksRUFBZXBILEtBQUtnMUIsSUFDZi90QixPQUNQRixFQUFPRSxFQUFLakgsS0FBS2dILElBQVdLLE1BQU0sQ0FHekMsSUFDR21GLEdBRkgwaEMsR0FEQUQsRUFBZ0J4QixFQUFZaGlDLEVBQVMxRCxFQUFLdEssU0FDaEJ3SyxNQUVMakgsS0FBS2l1QyxJQUFnQjVtQyxPQUN2QzZoQixFQUFTZ2xCLEVBQVVsdUMsS0FBS2l1QyxJQUFnQjVtQyxPQUN4QzZtQyxFQUFVbHVDLEtBQUtpdUMsR0FBZTVtQyxLQUMvQixNQUFNekwsVUFBVSxtQ0FDbEJzUyxFQUFRbEcsS0FBSyxDQUFFdEwsSUFBSzhQLEVBQU0vUCxNQUFRLEdBQUlBLE1BQU95c0IsRUFBT3pzQixNQUFRLFVBRXpELElBQUtDLEtBQU9zNEIsRUFBVXdYLEVBQU94WCxFQUFNdDRCLElBQU13UixFQUFRbEcsS0FBSyxDQUFFdEwsSUFBS0EsRUFBS0QsTUFBT3U0QixFQUFLdDRCLEdBQU8sVUFFNUY2d0MsRUFBa0JyL0IsRUFBeUIsaUJBQVQ4bUIsRUFBdUMsTUFBbkJBLEVBQUtyNEIsT0FBTyxHQUFhcTRCLEVBQUsxeEIsTUFBTSxHQUFLMHhCLEVBQU9BLEVBQU8sS0FLL0dvWixFQUEyQkosRUFBMkIzeEMsVUFFMURxRSxFQUFZMHRDLEVBQTBCLENBR3BDQyxPQUFRLFNBQWdCcHhDLEVBQU1SLEdBQzVCa3hDLEVBQXdCbHBDLFVBQVUxSCxPQUFRLEdBQzFDLElBQUk4UCxFQUFRZ2dDLEVBQXVCcHhDLE1BQ25Db1IsRUFBTXFCLFFBQVFsRyxLQUFLLENBQUV0TCxJQUFLTyxFQUFPLEdBQUlSLE1BQU9BLEVBQVEsS0FDcERvUSxFQUFNc2hDLGFBSVIsT0FBVSxTQUFVbHhDLEdBQ2xCMHdDLEVBQXdCbHBDLFVBQVUxSCxPQUFRLEdBSzFDLElBSkEsSUFBSThQLEVBQVFnZ0MsRUFBdUJweEMsTUFDL0J5UyxFQUFVckIsRUFBTXFCLFFBQ2hCeFIsRUFBTU8sRUFBTyxHQUNiSixFQUFRLEVBQ0xBLEVBQVFxUixFQUFRblIsUUFDakJtUixFQUFRclIsR0FBT0gsTUFBUUEsRUFBS3dSLEVBQVFFLE9BQU92UixFQUFPLEdBQ2pEQSxJQUVQZ1EsRUFBTXNoQyxhQUlSdnVDLElBQUssU0FBYTNDLEdBQ2hCMHdDLEVBQXdCbHBDLFVBQVUxSCxPQUFRLEdBSTFDLElBSEEsSUFBSW1SLEVBQVUyK0IsRUFBdUJweEMsTUFBTXlTLFFBQ3ZDeFIsRUFBTU8sRUFBTyxHQUNiSixFQUFRLEVBQ0xBLEVBQVFxUixFQUFRblIsT0FBUUYsSUFDN0IsR0FBSXFSLEVBQVFyUixHQUFPSCxNQUFRQSxFQUFLLE9BQU93UixFQUFRclIsR0FBT0osTUFFeEQsT0FBTyxNQUlUNnhDLE9BQVEsU0FBZ0JyeEMsR0FDdEIwd0MsRUFBd0JscEMsVUFBVTFILE9BQVEsR0FLMUMsSUFKQSxJQUFJbVIsRUFBVTIrQixFQUF1QnB4QyxNQUFNeVMsUUFDdkN4UixFQUFNTyxFQUFPLEdBQ2I2SixFQUFTLEdBQ1RqSyxFQUFRLEVBQ0xBLEVBQVFxUixFQUFRblIsT0FBUUYsSUFDekJxUixFQUFRclIsR0FBT0gsTUFBUUEsR0FBS29LLEVBQU9rQixLQUFLa0csRUFBUXJSLEdBQU9KLE9BRTdELE9BQU9xSyxHQUlUdEosSUFBSyxTQUFhUCxHQUNoQjB3QyxFQUF3QmxwQyxVQUFVMUgsT0FBUSxHQUkxQyxJQUhBLElBQUltUixFQUFVMitCLEVBQXVCcHhDLE1BQU15UyxRQUN2Q3hSLEVBQU1PLEVBQU8sR0FDYkosRUFBUSxFQUNMQSxFQUFRcVIsRUFBUW5SLFFBQ3JCLEdBQUltUixFQUFRclIsS0FBU0gsTUFBUUEsRUFBSyxPQUFPLEVBRTNDLE9BQU8sR0FJVDZFLElBQUssU0FBYXRFLEVBQU1SLEdBQ3RCa3hDLEVBQXdCbHBDLFVBQVUxSCxPQUFRLEdBUTFDLElBUEEsSUFNSStQLEVBTkFELEVBQVFnZ0MsRUFBdUJweEMsTUFDL0J5UyxFQUFVckIsRUFBTXFCLFFBQ2hCcWdDLEdBQVEsRUFDUjd4QyxFQUFNTyxFQUFPLEdBQ2JneEIsRUFBTXh4QixFQUFRLEdBQ2RJLEVBQVEsRUFFTEEsRUFBUXFSLEVBQVFuUixPQUFRRixLQUM3QmlRLEVBQVFvQixFQUFRclIsSUFDTkgsTUFBUUEsSUFDWjZ4QyxFQUFPcmdDLEVBQVFFLE9BQU92UixJQUFTLElBRWpDMHhDLEdBQVEsRUFDUnpoQyxFQUFNclEsTUFBUXd4QixJQUlmc2dCLEdBQU9yZ0MsRUFBUWxHLEtBQUssQ0FBRXRMLElBQUtBLEVBQUtELE1BQU93eEIsSUFDNUNwaEIsRUFBTXNoQyxhQUlSdnNCLEtBQU0sV0FDSixJQUlJOVUsRUFBTzBoQyxFQUFjQyxFQUpyQjVoQyxFQUFRZ2dDLEVBQXVCcHhDLE1BQy9CeVMsRUFBVXJCLEVBQU1xQixRQUVoQjVLLEVBQVE0SyxFQUFRNUssUUFHcEIsSUFEQTRLLEVBQVFuUixPQUFTLEVBQ1oweEMsRUFBYSxFQUFHQSxFQUFhbnJDLEVBQU12RyxPQUFRMHhDLElBQWMsQ0FFNUQsSUFEQTNoQyxFQUFReEosRUFBTW1yQyxHQUNURCxFQUFlLEVBQUdBLEVBQWVDLEVBQVlELElBQ2hELEdBQUl0Z0MsRUFBUXNnQyxHQUFjOXhDLElBQU1vUSxFQUFNcFEsSUFBSyxDQUN6Q3dSLEVBQVFFLE9BQU9vZ0MsRUFBYyxFQUFHMWhDLEdBQ2hDLE1BR0EwaEMsSUFBaUJDLEdBQVl2Z0MsRUFBUWxHLEtBQUs4RSxHQUVoREQsRUFBTXNoQyxhQUdSN25DLFFBQVMsU0FBaUJvb0MsR0FLeEIsSUFKQSxJQUdJNWhDLEVBSEFvQixFQUFVMitCLEVBQXVCcHhDLE1BQU15UyxRQUN2Q3RGLEVBQWdCcEMsRUFBS2tvQyxFQUFVanFDLFVBQVUxSCxPQUFTLEVBQUkwSCxVQUFVLFFBQUtuSSxFQUFXLEdBQ2hGTyxFQUFRLEVBRUxBLEVBQVFxUixFQUFRblIsUUFFckI2TCxHQURBa0UsRUFBUW9CLEVBQVFyUixNQUNJSixNQUFPcVEsRUFBTXBRLElBQUtqQixPQUkxQ21JLEtBQU0sV0FDSixPQUFPLElBQUlrcUMsRUFBd0JyeUMsS0FBTSxTQUczQytYLE9BQVEsV0FDTixPQUFPLElBQUlzNkIsRUFBd0JyeUMsS0FBTSxXQUczQ3lTLFFBQVMsV0FDUCxPQUFPLElBQUk0L0IsRUFBd0JyeUMsS0FBTSxhQUUxQyxDQUFFcVYsWUFBWSxJQUdqQm5ULEVBQVN5d0MsRUFBMEJ2akMsRUFBVXVqQyxFQUF5QmxnQyxTQUl0RXZRLEVBQVN5d0MsRUFBMEIsWUFBWSxXQUs3QyxJQUpBLElBR0l0aEMsRUFIQW9CLEVBQVUyK0IsRUFBdUJweEMsTUFBTXlTLFFBQ3ZDcEgsRUFBUyxHQUNUakssRUFBUSxFQUVMQSxFQUFRcVIsRUFBUW5SLFFBQ3JCK1AsRUFBUW9CLEVBQVFyUixLQUNoQmlLLEVBQU9rQixLQUFLcWxDLEVBQVV2Z0MsRUFBTXBRLEtBQU8sSUFBTTJ3QyxFQUFVdmdDLEVBQU1yUSxRQUN6RCxPQUFPcUssRUFBTytTLEtBQUssT0FDcEIsQ0FBRS9JLFlBQVksSUFFakIzUCxFQUFlNnNDLEVBQTRCckIsR0FFM0N0K0IsRUFBRSxDQUFFOVEsUUFBUSxFQUFNK0MsUUFBU2lzQyxHQUFrQixDQUMzQ3pxQixnQkFBaUJrc0IsSUFLZHpCLEdBQW1DLG1CQUFWcFEsR0FBMEMsbUJBQVh1USxHQUMzRHIrQixFQUFFLENBQUU5USxRQUFRLEVBQU11VCxZQUFZLEVBQU14USxRQUFRLEdBQVEsQ0FDbEQ4OUIsTUFBTyxTQUFlaFcsR0FDcEIsSUFDSTRNLEVBQU0yWixFQUFNQyxFQURaajFCLEVBQU8sQ0FBQ3lPLEdBa0JWLE9BaEJFM2pCLFVBQVUxSCxPQUFTLElBRWpCakIsRUFESms1QixFQUFPdndCLFVBQVUsTUFFZmtxQyxFQUFPM1osRUFBSzJaLEtBQ1JseEMsRUFBUWt4QyxLQUFVaEMsS0FDcEJpQyxFQUFVNVosRUFBSzRaLFFBQVUsSUFBSWxDLEVBQVExWCxFQUFLNFosU0FBVyxJQUFJbEMsR0FDNUNsdkMsSUFBSSxpQkFDZm94QyxFQUFRcnRDLElBQUksZUFBZ0IsbURBRTlCeXpCLEVBQU9oNUIsRUFBT2c1QixFQUFNLENBQ2xCMlosS0FBTWwrQixFQUF5QixFQUFHNVUsT0FBTzh5QyxJQUN6Q0MsUUFBU24rQixFQUF5QixFQUFHbStCLE9BSTNDajFCLEVBQUszUixLQUFLZ3RCLElBQ0htSCxFQUFPMXlCLE1BQU1oTyxLQUFNa2UsTUFLbENyZSxFQUFPRCxRQUFVLENBQ2Z5bUIsZ0JBQWlCa3NCLEVBQ2pCYSxTQUFVaEMsSSwyQkN2VlosRUFBUSxNQUNSLElBMENJaUMsRUExQ0F6Z0MsRUFBSSxFQUFRLE1BQ1ovUSxFQUFjLEVBQVEsTUFDdEJpdkMsRUFBaUIsRUFBUSxLQUN6Qmh2QyxFQUFTLEVBQVEsTUFDakJzbUIsRUFBbUIsRUFBUSxNQUMzQmxtQixFQUFXLEVBQVEsTUFDbkJpRCxFQUFhLEVBQVEsTUFDckJwRCxFQUFNLEVBQVEsTUFDZDZsQixFQUFTLEVBQVEsTUFDakIwckIsRUFBWSxFQUFRLE1BQ3BCM2xCLEVBQVMsZUFDVDRsQixFQUFVLEVBQVEsTUFDbEI3dEMsRUFBaUIsRUFBUSxNQUN6Qjh0QyxFQUF3QixFQUFRLE1BQ2hDN3RDLEVBQXNCLEVBQVEsTUFFOUI4dEMsRUFBWTN4QyxFQUFPaWtCLElBQ25CTSxFQUFrQm10QixFQUFzQm50QixnQkFDeENxdEIsRUFBK0JGLEVBQXNCSixTQUNyRHZ0QyxFQUFtQkYsRUFBb0JHLElBQ3ZDNnRDLEVBQXNCaHVDLEVBQW9CNkssVUFBVSxPQUNwRGlPLEVBQVExVSxLQUFLMFUsTUFDYm9CLEVBQU05VixLQUFLOFYsSUFHWCt6QixFQUFpQixpQkFDakJDLEVBQWUsZUFDZkMsRUFBZSxlQUVmQyxFQUFRLFdBQ1JDLEVBQWUsZ0JBQ2ZDLEVBQVEsS0FDUkMsRUFBWSxXQUNaQyxFQUFNLFdBQ05DLEVBQU0sUUFDTkMsRUFBTSxnQkFFTkMsRUFBNEIsb0NBQzVCQyxFQUE4QyxtQ0FDOUNDLEVBQTJDLHlDQUMzQ0MsRUFBbUIsb0JBSW5CQyxFQUFZLFNBQVU1dUIsRUFBSzZHLEdBQzdCLElBQUl0aEIsRUFBUXNwQyxFQUFZdnpDLEVBQ3hCLEdBQXVCLEtBQW5CdXJCLEVBQU16ckIsT0FBTyxHQUFXLENBQzFCLEdBQXNDLEtBQWxDeXJCLEVBQU16ckIsT0FBT3lyQixFQUFNcnJCLE9BQVMsR0FBVyxPQUFPdXlDLEVBRWxELEtBREF4b0MsRUFBU3VwQyxFQUFVam9CLEVBQU05a0IsTUFBTSxHQUFJLEtBQ3RCLE9BQU9nc0MsRUFDcEIvdEIsRUFBSVMsS0FBT2xiLE9BRU4sR0FBS3dwQyxFQUFVL3VCLEdBUWYsQ0FFTCxHQURBNkcsRUFBUTRtQixFQUFRNW1CLEdBQ1oybkIsRUFBMEJoNkIsS0FBS3FTLEdBQVEsT0FBT2tuQixFQUVsRCxHQUFlLFFBRGZ4b0MsRUFBU3lwQyxFQUFVbm9CLElBQ0UsT0FBT2tuQixFQUM1Qi90QixFQUFJUyxLQUFPbGIsTUFiZSxDQUMxQixHQUFJa3BDLEVBQTRDajZCLEtBQUtxUyxHQUFRLE9BQU9rbkIsRUFHcEUsSUFGQXhvQyxFQUFTLEdBQ1RzcEMsRUFBYXJCLEVBQVUzbUIsR0FDbEJ2ckIsRUFBUSxFQUFHQSxFQUFRdXpDLEVBQVdyekMsT0FBUUYsSUFDekNpSyxHQUFVMHBDLEVBQWNKLEVBQVd2ekMsR0FBUTR6QyxHQUU3Q2x2QixFQUFJUyxLQUFPbGIsSUFVWHlwQyxFQUFZLFNBQVVub0IsR0FDeEIsSUFDSXNvQixFQUFhQyxFQUFTOXpDLEVBQU8rekMsRUFBTTV0QixFQUFPM2dCLEVBQVF3dUMsRUFEbERDLEVBQVExb0IsRUFBTTlSLE1BQU0sS0FNeEIsR0FKSXc2QixFQUFNL3pDLFFBQXFDLElBQTNCK3pDLEVBQU1BLEVBQU0vekMsT0FBUyxJQUN2Qyt6QyxFQUFNQyxPQUVSTCxFQUFjSSxFQUFNL3pDLFFBQ0YsRUFBRyxPQUFPcXJCLEVBRTVCLElBREF1b0IsRUFBVSxHQUNMOXpDLEVBQVEsRUFBR0EsRUFBUTZ6QyxFQUFhN3pDLElBQVMsQ0FFNUMsR0FBWSxLQURaK3pDLEVBQU9FLEVBQU1qMEMsSUFDRyxPQUFPdXJCLEVBTXZCLEdBTEFwRixFQUFRLEdBQ0o0dEIsRUFBSzd6QyxPQUFTLEdBQXVCLEtBQWxCNnpDLEVBQUtqMEMsT0FBTyxLQUNqQ3FtQixFQUFRMnNCLEVBQVU1NUIsS0FBSzY2QixHQUFRLEdBQUssRUFDcENBLEVBQU9BLEVBQUt0dEMsTUFBZSxHQUFUMGYsRUFBYSxFQUFJLElBRXhCLEtBQVQ0dEIsRUFDRnZ1QyxFQUFTLE1BQ0osQ0FDTCxLQUFlLElBQVQyZ0IsRUFBYzZzQixFQUFlLEdBQVQ3c0IsRUFBYTRzQixFQUFNRSxHQUFLLzVCLEtBQUs2NkIsR0FBTyxPQUFPeG9CLEVBQ3JFL2xCLEVBQVN5Z0IsU0FBUzh0QixFQUFNNXRCLEdBRTFCMnRCLEVBQVEzb0MsS0FBSzNGLEdBRWYsSUFBS3hGLEVBQVEsRUFBR0EsRUFBUTZ6QyxFQUFhN3pDLElBRW5DLEdBREF3RixFQUFTc3VDLEVBQVE5ekMsR0FDYkEsR0FBUzZ6QyxFQUFjLEdBQ3pCLEdBQUlydUMsR0FBVWlaLEVBQUksSUFBSyxFQUFJbzFCLEdBQWMsT0FBTyxVQUMzQyxHQUFJcnVDLEVBQVMsSUFBSyxPQUFPLEtBR2xDLElBREF3dUMsRUFBT0YsRUFBUUksTUFDVmwwQyxFQUFRLEVBQUdBLEVBQVE4ekMsRUFBUTV6QyxPQUFRRixJQUN0Q2cwQyxHQUFRRixFQUFROXpDLEdBQVN5ZSxFQUFJLElBQUssRUFBSXplLEdBRXhDLE9BQU9nMEMsR0FJTFIsRUFBWSxTQUFVam9CLEdBQ3hCLElBSUkzckIsRUFBT00sRUFBUWkwQyxFQUFhQyxFQUFXNXVDLEVBQVE2dUMsRUFBT0MsRUFKdERDLEVBQVUsQ0FBQyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQ2hDQyxFQUFhLEVBQ2JDLEVBQVcsS0FDWEMsRUFBVSxFQUdWQyxFQUFPLFdBQ1QsT0FBT3BwQixFQUFNenJCLE9BQU80MEMsSUFHdEIsR0FBYyxLQUFWQyxJQUFlLENBQ2pCLEdBQXVCLEtBQW5CcHBCLEVBQU16ckIsT0FBTyxHQUFXLE9BQzVCNDBDLEdBQVcsRUFFWEQsSUFEQUQsRUFHRixLQUFPRyxLQUFRLENBQ2IsR0FBa0IsR0FBZEgsRUFBaUIsT0FDckIsR0FBYyxLQUFWRyxJQUFKLENBUUEsSUFEQS8wQyxFQUFRTSxFQUFTLEVBQ1ZBLEVBQVMsR0FBSyt5QyxFQUFJLzVCLEtBQUt5N0IsTUFDNUIvMEMsRUFBZ0IsR0FBUkEsRUFBYXFtQixTQUFTMHVCLElBQVEsSUFDdENELElBQ0F4MEMsSUFFRixHQUFjLEtBQVZ5MEMsSUFBZSxDQUNqQixHQUFjLEdBQVZ6MEMsRUFBYSxPQUVqQixHQURBdzBDLEdBQVd4MEMsRUFDUHMwQyxFQUFhLEVBQUcsT0FFcEIsSUFEQUwsRUFBYyxFQUNQUSxLQUFRLENBRWIsR0FEQVAsRUFBWSxLQUNSRCxFQUFjLEVBQUcsQ0FDbkIsS0FBYyxLQUFWUSxLQUFpQlIsRUFBYyxHQUM5QixPQURpQ08sSUFHeEMsSUFBSzdCLEVBQU0zNUIsS0FBS3k3QixLQUFTLE9BQ3pCLEtBQU85QixFQUFNMzVCLEtBQUt5N0IsTUFBUyxDQUV6QixHQURBbnZDLEVBQVN5Z0IsU0FBUzB1QixJQUFRLElBQ1IsT0FBZFAsRUFBb0JBLEVBQVk1dUMsTUFDL0IsSUFBaUIsR0FBYjR1QyxFQUFnQixPQUNwQkEsRUFBd0IsR0FBWkEsRUFBaUI1dUMsRUFDbEMsR0FBSTR1QyxFQUFZLElBQUssT0FDckJNLElBRUZILEVBQVFDLEdBQW9DLElBQXRCRCxFQUFRQyxHQUFvQkosRUFFL0IsS0FEbkJELEdBQ3VDLEdBQWZBLEdBQWtCSyxJQUU1QyxHQUFtQixHQUFmTCxFQUFrQixPQUN0QixNQUNLLEdBQWMsS0FBVlEsS0FFVCxHQURBRCxLQUNLQyxJQUFRLFlBQ1IsR0FBSUEsSUFBUSxPQUNuQkosRUFBUUMsS0FBZ0I1MEMsTUEzQ3hCLENBQ0UsR0FBaUIsT0FBYjYwQyxFQUFtQixPQUN2QkMsSUFFQUQsSUFEQUQsR0EwQ0osR0FBaUIsT0FBYkMsRUFHRixJQUZBSixFQUFRRyxFQUFhQyxFQUNyQkQsRUFBYSxFQUNRLEdBQWRBLEdBQW1CSCxFQUFRLEdBQ2hDQyxFQUFPQyxFQUFRQyxHQUNmRCxFQUFRQyxLQUFnQkQsRUFBUUUsRUFBV0osRUFBUSxHQUNuREUsRUFBUUUsSUFBYUosR0FBU0MsT0FFM0IsR0FBa0IsR0FBZEUsRUFBaUIsT0FDNUIsT0FBT0QsR0E2QkxLLEVBQWdCLFNBQVV6dkIsR0FDNUIsSUFBSWxiLEVBQVFqSyxFQUFPeTBDLEVBQVVJLEVBRTdCLEdBQW1CLGlCQUFSMXZCLEVBQWtCLENBRTNCLElBREFsYixFQUFTLEdBQ0pqSyxFQUFRLEVBQUdBLEVBQVEsRUFBR0EsSUFDekJpSyxFQUFPNnFDLFFBQVEzdkIsRUFBTyxLQUN0QkEsRUFBTzlILEVBQU04SCxFQUFPLEtBQ3BCLE9BQU9sYixFQUFPK1MsS0FBSyxLQUVoQixHQUFtQixpQkFBUm1JLEVBQWtCLENBR2xDLElBRkFsYixFQUFTLEdBQ1R3cUMsRUF0QzBCLFNBQVVNLEdBTXRDLElBTEEsSUFBSUMsRUFBVyxLQUNYcm9CLEVBQVksRUFDWnNvQixFQUFZLEtBQ1pDLEVBQWEsRUFDYmwxQyxFQUFRLEVBQ0xBLEVBQVEsRUFBR0EsSUFDSSxJQUFoQiswQyxFQUFLLzBDLElBQ0hrMUMsRUFBYXZvQixJQUNmcW9CLEVBQVdDLEVBQ1h0b0IsRUFBWXVvQixHQUVkRCxFQUFZLEtBQ1pDLEVBQWEsSUFFSyxPQUFkRCxJQUFvQkEsRUFBWWoxQyxLQUNsQ2sxQyxHQU9OLE9BSklBLEVBQWF2b0IsSUFDZnFvQixFQUFXQyxFQUNYdG9CLEVBQVl1b0IsR0FFUEYsRUFlTUcsQ0FBd0Jod0IsR0FDOUJubEIsRUFBUSxFQUFHQSxFQUFRLEVBQUdBLElBQ3JCNjBDLEdBQTJCLElBQWhCMXZCLEVBQUtubEIsS0FDaEI2MEMsSUFBU0EsR0FBVSxHQUNuQkosSUFBYXowQyxHQUNmaUssR0FBVWpLLEVBQVEsSUFBTSxLQUN4QjYwQyxHQUFVLElBRVY1cUMsR0FBVWtiLEVBQUtubEIsR0FBT3dPLFNBQVMsSUFDM0J4TyxFQUFRLElBQUdpSyxHQUFVLE9BRzdCLE1BQU8sSUFBTUEsRUFBUyxJQUN0QixPQUFPa2IsR0FHUHl1QixFQUE0QixHQUM1QndCLEVBQTJCNXVCLEVBQU8sR0FBSW90QixFQUEyQixDQUNuRSxJQUFLLEVBQUcsSUFBSyxFQUFHLElBQUssRUFBRyxJQUFLLEVBQUcsSUFBSyxJQUVuQ3lCLEVBQXVCN3VCLEVBQU8sR0FBSTR1QixFQUEwQixDQUM5RCxJQUFLLEVBQUcsSUFBSyxFQUFHLElBQUssRUFBRyxJQUFLLElBRTNCRSxFQUEyQjl1QixFQUFPLEdBQUk2dUIsRUFBc0IsQ0FDOUQsSUFBSyxFQUFHLElBQUssRUFBRyxJQUFLLEVBQUcsSUFBSyxFQUFHLElBQUssRUFBRyxJQUFLLEVBQUcsS0FBTSxFQUFHLElBQUssRUFBRyxJQUFLLEVBQUcsSUFBSyxJQUc1RTFCLEVBQWdCLFNBQVVnQixFQUFNandDLEdBQ2xDLElBQUlvMkIsRUFBT3ZPLEVBQU9vb0IsRUFBTSxHQUN4QixPQUFPN1osRUFBTyxJQUFRQSxFQUFPLE1BQVNuNkIsRUFBSStELEVBQUtpd0MsR0FBUUEsRUFBT2xFLG1CQUFtQmtFLElBRy9FWSxFQUFpQixDQUNuQkMsSUFBSyxHQUNMQyxLQUFNLEtBQ05DLEtBQU0sR0FDTkMsTUFBTyxJQUNQQyxHQUFJLEdBQ0pDLElBQUssS0FHSHBDLEVBQVksU0FBVS91QixHQUN4QixPQUFPL2pCLEVBQUk0MEMsRUFBZ0I3d0IsRUFBSW94QixTQUc3QkMsRUFBc0IsU0FBVXJ4QixHQUNsQyxNQUF1QixJQUFoQkEsRUFBSVEsVUFBa0MsSUFBaEJSLEVBQUlzeEIsVUFHL0JDLEVBQWlDLFNBQVV2eEIsR0FDN0MsT0FBUUEsRUFBSVMsTUFBUVQsRUFBSXd4QixrQkFBa0MsUUFBZHh4QixFQUFJb3hCLFFBRzlDSyxFQUF1QixTQUFVNWlDLEVBQVE2aUMsR0FDM0MsSUFBSS9wQixFQUNKLE9BQXdCLEdBQWpCOVksRUFBT3JULFFBQWV5eUMsRUFBTXo1QixLQUFLM0YsRUFBT3pULE9BQU8sTUFDakIsTUFBOUJ1c0IsRUFBUzlZLEVBQU96VCxPQUFPLE1BQWdCczJDLEdBQXdCLEtBQVYvcEIsSUFHMURncUIsR0FBK0IsU0FBVTlpQyxHQUMzQyxJQUFJb25CLEVBQ0osT0FBT3BuQixFQUFPclQsT0FBUyxHQUFLaTJDLEVBQXFCNWlDLEVBQU85TSxNQUFNLEVBQUcsTUFDOUMsR0FBakI4TSxFQUFPclQsUUFDeUIsT0FBOUJ5NkIsRUFBUXBuQixFQUFPelQsT0FBTyxLQUF5QixPQUFWNjZCLEdBQTRCLE1BQVZBLEdBQTJCLE1BQVZBLElBSTFFMmIsR0FBa0IsU0FBVTV4QixHQUM5QixJQUFJN2xCLEVBQU82bEIsRUFBSTdsQixLQUNYMDNDLEVBQVcxM0MsRUFBS3FCLFFBQ2hCcTJDLEdBQTJCLFFBQWQ3eEIsRUFBSW94QixRQUFnQyxHQUFaUyxHQUFrQkosRUFBcUJ0M0MsRUFBSyxJQUFJLElBQ3ZGQSxFQUFLcTFDLE9BSUxzQyxHQUFjLFNBQVVDLEdBQzFCLE1BQW1CLE1BQVpBLEdBQTZDLFFBQTFCQSxFQUFRcjFCLGVBU2hDczFCLEdBQWUsR0FDZkMsR0FBUyxHQUNUQyxHQUFZLEdBQ1pDLEdBQWdDLEdBQ2hDQyxHQUFvQixHQUNwQkMsR0FBVyxHQUNYQyxHQUFpQixHQUNqQkMsR0FBNEIsR0FDNUJDLEdBQW1DLEdBQ25DQyxHQUFZLEdBQ1pDLEdBQU8sR0FDUEMsR0FBVyxHQUNYQyxHQUFPLEdBQ1BDLEdBQU8sR0FDUEMsR0FBYSxHQUNiQyxHQUFZLEdBQ1pDLEdBQWEsR0FDYkMsR0FBTyxHQUNQQyxHQUE0QixHQUM1QkMsR0FBUSxHQUNSQyxHQUFXLEdBR1hDLEdBQVcsU0FBVXJ6QixFQUFLNkcsRUFBT3lzQixFQUFlaHFCLEdBQ2xELElBTUl1bEIsRUFBWW9CLEVBQU1zRCxFQUFrQkMsRUFwQ2R6QixFQThCdEJ6bUMsRUFBUWdvQyxHQUFpQnRCLEdBQ3pCaEMsRUFBVSxFQUNWOXVDLEVBQVMsR0FDVHV5QyxHQUFTLEVBQ1RDLEdBQWMsRUFDZEMsR0FBb0IsRUFvQnhCLElBakJLTCxJQUNIdHpCLEVBQUlveEIsT0FBUyxHQUNicHhCLEVBQUlRLFNBQVcsR0FDZlIsRUFBSXN4QixTQUFXLEdBQ2Z0eEIsRUFBSVMsS0FBTyxLQUNYVCxFQUFJOEssS0FBTyxLQUNYOUssRUFBSTdsQixLQUFPLEdBQ1g2bEIsRUFBSWlzQixNQUFRLEtBQ1pqc0IsRUFBSTR6QixTQUFXLEtBQ2Y1ekIsRUFBSXd4QixrQkFBbUIsRUFDdkIzcUIsRUFBUUEsRUFBTTdYLFFBQVEwL0IsRUFBMEMsS0FHbEU3bkIsRUFBUUEsRUFBTTdYLFFBQVEyL0IsRUFBa0IsSUFFeENFLEVBQWFyQixFQUFVM21CLEdBRWhCbXBCLEdBQVduQixFQUFXcnpDLFFBQVEsQ0FFbkMsT0FEQXkwQyxFQUFPcEIsRUFBV21CLEdBQ1Yxa0MsR0FDTixLQUFLMG1DLEdBQ0gsSUFBSS9CLElBQVFoQyxFQUFNejVCLEtBQUt5N0IsR0FHaEIsSUFBS3FELEVBR0wsT0FBT3hGLEVBRlp4aUMsRUFBUTRtQyxHQUNSLFNBSkFoeEMsR0FBVSt1QyxFQUFLdnpCLGNBQ2ZwUixFQUFRMm1DLEdBS1YsTUFFRixLQUFLQSxHQUNILEdBQUloQyxJQUFTL0IsRUFBYTE1QixLQUFLeTdCLElBQWlCLEtBQVJBLEdBQXVCLEtBQVJBLEdBQXVCLEtBQVJBLEdBQ3BFL3VDLEdBQVUrdUMsRUFBS3Z6QixrQkFDVixJQUFZLEtBQVJ1ekIsRUEwQkosSUFBS3FELEVBS0wsT0FBT3hGLEVBSlo1c0MsRUFBUyxHQUNUb0ssRUFBUTRtQyxHQUNSbEMsRUFBVSxFQUNWLFNBN0JBLEdBQUlzRCxJQUNEdkUsRUFBVS91QixJQUFRL2pCLEVBQUk0MEMsRUFBZ0IzdkMsSUFDNUIsUUFBVkEsSUFBcUJtd0MsRUFBb0JyeEIsSUFBcUIsT0FBYkEsRUFBSThLLE9BQ3ZDLFFBQWQ5SyxFQUFJb3hCLFNBQXFCcHhCLEVBQUlTLE1BQzdCLE9BRUgsR0FEQVQsRUFBSW94QixPQUFTbHdDLEVBQ1RveUMsRUFFRixZQURJdkUsRUFBVS91QixJQUFRNndCLEVBQWU3d0IsRUFBSW94QixTQUFXcHhCLEVBQUk4SyxPQUFNOUssRUFBSThLLEtBQU8sT0FHM0U1cEIsRUFBUyxHQUNTLFFBQWQ4ZSxFQUFJb3hCLE9BQ045bEMsRUFBUXVuQyxHQUNDOUQsRUFBVS91QixJQUFRc0osR0FBUUEsRUFBSzhuQixRQUFVcHhCLEVBQUlveEIsT0FDdEQ5bEMsRUFBUTZtQyxHQUNDcEQsRUFBVS91QixHQUNuQjFVLEVBQVFpbkMsR0FDNEIsS0FBM0IxRCxFQUFXbUIsRUFBVSxJQUM5QjFrQyxFQUFROG1DLEdBQ1JwQyxNQUVBaHdCLEVBQUl3eEIsa0JBQW1CLEVBQ3ZCeHhCLEVBQUk3bEIsS0FBS3NNLEtBQUssSUFDZDZFLEVBQVE0bkMsSUFRWixNQUVGLEtBQUtoQixHQUNILElBQUs1b0IsR0FBU0EsRUFBS2tvQixrQkFBNEIsS0FBUnZCLEVBQWMsT0FBT25DLEVBQzVELEdBQUl4a0IsRUFBS2tvQixrQkFBNEIsS0FBUnZCLEVBQWEsQ0FDeENqd0IsRUFBSW94QixPQUFTOW5CLEVBQUs4bkIsT0FDbEJweEIsRUFBSTdsQixLQUFPbXZCLEVBQUtudkIsS0FBSzRILFFBQ3JCaWUsRUFBSWlzQixNQUFRM2lCLEVBQUsyaUIsTUFDakJqc0IsRUFBSTR6QixTQUFXLEdBQ2Y1ekIsRUFBSXd4QixrQkFBbUIsRUFDdkJsbUMsRUFBUThuQyxHQUNSLE1BRUY5bkMsRUFBdUIsUUFBZmdlLEVBQUs4bkIsT0FBbUJ5QixHQUFPUixHQUN2QyxTQUVGLEtBQUtGLEdBQ0gsR0FBWSxLQUFSbEMsR0FBMEMsS0FBM0JwQixFQUFXbUIsRUFBVSxHQUdqQyxDQUNMMWtDLEVBQVErbUMsR0FDUixTQUpBL21DLEVBQVFrbkMsR0FDUnhDLElBSUEsTUFFSixLQUFLb0MsR0FDSCxHQUFZLEtBQVJuQyxFQUFhLENBQ2Yza0MsRUFBUW1uQyxHQUNSLE1BRUFubkMsRUFBUTJuQyxHQUNSLFNBR0osS0FBS1osR0FFSCxHQURBcnlCLEVBQUlveEIsT0FBUzluQixFQUFLOG5CLE9BQ2RuQixHQUFRMUMsRUFDVnZ0QixFQUFJUSxTQUFXOEksRUFBSzlJLFNBQ3BCUixFQUFJc3hCLFNBQVdob0IsRUFBS2dvQixTQUNwQnR4QixFQUFJUyxLQUFPNkksRUFBSzdJLEtBQ2hCVCxFQUFJOEssS0FBT3hCLEVBQUt3QixLQUNoQjlLLEVBQUk3bEIsS0FBT212QixFQUFLbnZCLEtBQUs0SCxRQUNyQmllLEVBQUlpc0IsTUFBUTNpQixFQUFLMmlCLFdBQ1osR0FBWSxLQUFSZ0UsR0FBd0IsTUFBUkEsR0FBZ0JsQixFQUFVL3VCLEdBQ25EMVUsRUFBUWduQyxRQUNILEdBQVksS0FBUnJDLEVBQ1Rqd0IsRUFBSVEsU0FBVzhJLEVBQUs5SSxTQUNwQlIsRUFBSXN4QixTQUFXaG9CLEVBQUtnb0IsU0FDcEJ0eEIsRUFBSVMsS0FBTzZJLEVBQUs3SSxLQUNoQlQsRUFBSThLLEtBQU94QixFQUFLd0IsS0FDaEI5SyxFQUFJN2xCLEtBQU9tdkIsRUFBS252QixLQUFLNEgsUUFDckJpZSxFQUFJaXNCLE1BQVEsR0FDWjNnQyxFQUFRNm5DLE9BQ0gsSUFBWSxLQUFSbEQsRUFTSixDQUNMandCLEVBQUlRLFNBQVc4SSxFQUFLOUksU0FDcEJSLEVBQUlzeEIsU0FBV2hvQixFQUFLZ29CLFNBQ3BCdHhCLEVBQUlTLEtBQU82SSxFQUFLN0ksS0FDaEJULEVBQUk4SyxLQUFPeEIsRUFBS3dCLEtBQ2hCOUssRUFBSTdsQixLQUFPbXZCLEVBQUtudkIsS0FBSzRILFFBQ3JCaWUsRUFBSTdsQixLQUFLcTFDLE1BQ1Rsa0MsRUFBUTJuQyxHQUNSLFNBaEJBanpCLEVBQUlRLFNBQVc4SSxFQUFLOUksU0FDcEJSLEVBQUlzeEIsU0FBV2hvQixFQUFLZ29CLFNBQ3BCdHhCLEVBQUlTLEtBQU82SSxFQUFLN0ksS0FDaEJULEVBQUk4SyxLQUFPeEIsRUFBS3dCLEtBQ2hCOUssRUFBSTdsQixLQUFPbXZCLEVBQUtudkIsS0FBSzRILFFBQ3JCaWUsRUFBSWlzQixNQUFRM2lCLEVBQUsyaUIsTUFDakJqc0IsRUFBSTR6QixTQUFXLEdBQ2Z0b0MsRUFBUThuQyxHQVVSLE1BRUosS0FBS2QsR0FDSCxJQUFJdkQsRUFBVS91QixJQUFpQixLQUFSaXdCLEdBQXVCLE1BQVJBLEVBRS9CLElBQVksS0FBUkEsRUFFSixDQUNMandCLEVBQUlRLFNBQVc4SSxFQUFLOUksU0FDcEJSLEVBQUlzeEIsU0FBV2hvQixFQUFLZ29CLFNBQ3BCdHhCLEVBQUlTLEtBQU82SSxFQUFLN0ksS0FDaEJULEVBQUk4SyxLQUFPeEIsRUFBS3dCLEtBQ2hCeGYsRUFBUTJuQyxHQUNSLFNBUEEzbkMsRUFBUW1uQyxRQUZSbm5DLEVBQVFrbkMsR0FVUixNQUVKLEtBQUtELEdBRUgsR0FEQWpuQyxFQUFRa25DLEdBQ0ksS0FBUnZDLEdBQTZDLEtBQTlCL3VDLEVBQU85RixPQUFPNDBDLEVBQVUsR0FBVyxTQUN0REEsSUFDQSxNQUVGLEtBQUt3QyxHQUNILEdBQVksS0FBUnZDLEdBQXVCLE1BQVJBLEVBQWMsQ0FDL0Iza0MsRUFBUW1uQyxHQUNSLFNBQ0EsTUFFSixLQUFLQSxHQUNILEdBQVksS0FBUnhDLEVBQWEsQ0FDWHdELElBQVF2eUMsRUFBUyxNQUFRQSxHQUM3QnV5QyxHQUFTLEVBQ1RGLEVBQW1CL0YsRUFBVXRzQyxHQUM3QixJQUFLLElBQUlnQixFQUFJLEVBQUdBLEVBQUlxeEMsRUFBaUIvM0MsT0FBUTBHLElBQUssQ0FDaEQsSUFBSTJ4QyxFQUFZTixFQUFpQnJ4QyxHQUNqQyxHQUFpQixLQUFiMnhDLEdBQXFCRixFQUF6QixDQUlBLElBQUlHLEVBQW9CN0UsRUFBYzRFLEVBQVdqRCxHQUM3QytDLEVBQW1CM3pCLEVBQUlzeEIsVUFBWXdDLEVBQ2xDOXpCLEVBQUlRLFVBQVlzekIsT0FMbkJILEdBQW9CLEVBT3hCenlDLEVBQVMsUUFDSixHQUNMK3VDLEdBQVExQyxHQUFlLEtBQVIwQyxHQUF1QixLQUFSQSxHQUF1QixLQUFSQSxHQUNwQyxNQUFSQSxHQUFnQmxCLEVBQVUvdUIsR0FDM0IsQ0FDQSxHQUFJeXpCLEdBQW9CLElBQVZ2eUMsRUFBYyxNQW5mZCxvQkFvZmQ4dUMsR0FBV3hDLEVBQVV0c0MsR0FBUTFGLE9BQVMsRUFDdEMwRixFQUFTLEdBQ1RvSyxFQUFRb25DLFFBQ0h4eEMsR0FBVSt1QyxFQUNqQixNQUVGLEtBQUt5QyxHQUNMLEtBQUtDLEdBQ0gsR0FBSVcsR0FBK0IsUUFBZHR6QixFQUFJb3hCLE9BQWtCLENBQ3pDOWxDLEVBQVF5bkMsR0FDUixTQUNLLEdBQVksS0FBUjlDLEdBQWdCeUQsRUFPcEIsSUFDTHpELEdBQVExQyxHQUFlLEtBQVIwQyxHQUF1QixLQUFSQSxHQUF1QixLQUFSQSxHQUNwQyxNQUFSQSxHQUFnQmxCLEVBQVUvdUIsR0FDM0IsQ0FDQSxHQUFJK3VCLEVBQVUvdUIsSUFBa0IsSUFBVjllLEVBQWMsT0FBTzZzQyxFQUMzQyxHQUFJdUYsR0FBMkIsSUFBVnB5QyxJQUFpQm13QyxFQUFvQnJ4QixJQUFxQixPQUFiQSxFQUFJOEssTUFBZ0IsT0FFdEYsR0FEQTBvQixFQUFVNUUsRUFBVTV1QixFQUFLOWUsR0FDWixPQUFPc3lDLEVBR3BCLEdBRkF0eUMsRUFBUyxHQUNUb0ssRUFBUTBuQyxHQUNKTSxFQUFlLE9BQ25CLFNBRVksS0FBUnJELEVBQWF5RCxHQUFjLEVBQ2QsS0FBUnpELElBQWF5RCxHQUFjLEdBQ3BDeHlDLEdBQVUrdUMsTUF0QjRCLENBQ3RDLEdBQWMsSUFBVi91QyxFQUFjLE9BQU82c0MsRUFFekIsR0FEQXlGLEVBQVU1RSxFQUFVNXVCLEVBQUs5ZSxHQUNaLE9BQU9zeUMsRUFHcEIsR0FGQXR5QyxFQUFTLEdBQ1RvSyxFQUFRc25DLEdBQ0pVLEdBQWlCWCxHQUFVLE9BaUIvQixNQUVKLEtBQUtDLEdBQ0gsSUFBSXpFLEVBQU0zNUIsS0FBS3k3QixHQUVSLElBQ0xBLEdBQVExQyxHQUFlLEtBQVIwQyxHQUF1QixLQUFSQSxHQUF1QixLQUFSQSxHQUNwQyxNQUFSQSxHQUFnQmxCLEVBQVUvdUIsSUFDM0JzekIsRUFDQSxDQUNBLEdBQWMsSUFBVnB5QyxFQUFjLENBQ2hCLElBQUk0cEIsRUFBT3ZKLFNBQVNyZ0IsRUFBUSxJQUM1QixHQUFJNHBCLEVBQU8sTUFBUSxPQUFPa2pCLEVBQzFCaHVCLEVBQUk4SyxLQUFRaWtCLEVBQVUvdUIsSUFBUThLLElBQVMrbEIsRUFBZTd3QixFQUFJb3hCLFFBQVcsS0FBT3RtQixFQUM1RTVwQixFQUFTLEdBRVgsR0FBSW95QyxFQUFlLE9BQ25CaG9DLEVBQVEwbkMsR0FDUixTQUNLLE9BQU9oRixFQWZaOXNDLEdBQVUrdUMsRUFnQlosTUFFRixLQUFLNEMsR0FFSCxHQURBN3lCLEVBQUlveEIsT0FBUyxPQUNELEtBQVJuQixHQUF1QixNQUFSQSxFQUFjM2tDLEVBQVF3bkMsT0FDcEMsS0FBSXhwQixHQUF1QixRQUFmQSxFQUFLOG5CLE9BeUJmLENBQ0w5bEMsRUFBUTJuQyxHQUNSLFNBMUJBLEdBQUloRCxHQUFRMUMsRUFDVnZ0QixFQUFJUyxLQUFPNkksRUFBSzdJLEtBQ2hCVCxFQUFJN2xCLEtBQU9tdkIsRUFBS252QixLQUFLNEgsUUFDckJpZSxFQUFJaXNCLE1BQVEzaUIsRUFBSzJpQixXQUNaLEdBQVksS0FBUmdFLEVBQ1Rqd0IsRUFBSVMsS0FBTzZJLEVBQUs3SSxLQUNoQlQsRUFBSTdsQixLQUFPbXZCLEVBQUtudkIsS0FBSzRILFFBQ3JCaWUsRUFBSWlzQixNQUFRLEdBQ1ozZ0MsRUFBUTZuQyxPQUNILElBQVksS0FBUmxELEVBTUosQ0FDQTBCLEdBQTZCOUMsRUFBVzlzQyxNQUFNaXVDLEdBQVMxM0IsS0FBSyxPQUMvRDBILEVBQUlTLEtBQU82SSxFQUFLN0ksS0FDaEJULEVBQUk3bEIsS0FBT212QixFQUFLbnZCLEtBQUs0SCxRQUNyQjZ2QyxHQUFnQjV4QixJQUVsQjFVLEVBQVEybkMsR0FDUixTQVpBanpCLEVBQUlTLEtBQU82SSxFQUFLN0ksS0FDaEJULEVBQUk3bEIsS0FBT212QixFQUFLbnZCLEtBQUs0SCxRQUNyQmllLEVBQUlpc0IsTUFBUTNpQixFQUFLMmlCLE1BQ2pCanNCLEVBQUk0ekIsU0FBVyxHQUNmdG9DLEVBQVE4bkMsSUFhVixNQUVKLEtBQUtOLEdBQ0gsR0FBWSxLQUFSN0MsR0FBdUIsTUFBUkEsRUFBYyxDQUMvQjNrQyxFQUFReW5DLEdBQ1IsTUFFRXpwQixHQUF1QixRQUFmQSxFQUFLOG5CLFNBQXFCTyxHQUE2QjlDLEVBQVc5c0MsTUFBTWl1QyxHQUFTMTNCLEtBQUssT0FDNUZtNUIsRUFBcUJub0IsRUFBS252QixLQUFLLElBQUksR0FBTzZsQixFQUFJN2xCLEtBQUtzTSxLQUFLNmlCLEVBQUtudkIsS0FBSyxJQUNqRTZsQixFQUFJUyxLQUFPNkksRUFBSzdJLE1BRXZCblYsRUFBUTJuQyxHQUNSLFNBRUYsS0FBS0YsR0FDSCxHQUFJOUMsR0FBUTFDLEdBQWUsS0FBUjBDLEdBQXVCLE1BQVJBLEdBQXdCLEtBQVJBLEdBQXVCLEtBQVJBLEVBQWEsQ0FDNUUsSUFBS3FELEdBQWlCN0IsRUFBcUJ2d0MsR0FDekNvSyxFQUFRMm5DLFFBQ0gsR0FBYyxJQUFWL3hDLEVBQWMsQ0FFdkIsR0FEQThlLEVBQUlTLEtBQU8sR0FDUDZ5QixFQUFlLE9BQ25CaG9DLEVBQVEwbkMsT0FDSCxDQUVMLEdBREFRLEVBQVU1RSxFQUFVNXVCLEVBQUs5ZSxHQUNaLE9BQU9zeUMsRUFFcEIsR0FEZ0IsYUFBWnh6QixFQUFJUyxPQUFxQlQsRUFBSVMsS0FBTyxJQUNwQzZ5QixFQUFlLE9BQ25CcHlDLEVBQVMsR0FDVG9LLEVBQVEwbkMsR0FDUixTQUNHOXhDLEdBQVUrdUMsRUFDakIsTUFFRixLQUFLK0MsR0FDSCxHQUFJakUsRUFBVS91QixJQUVaLEdBREExVSxFQUFRMm5DLEdBQ0ksS0FBUmhELEdBQXVCLE1BQVJBLEVBQWMsY0FDNUIsR0FBS3FELEdBQXlCLEtBQVJyRCxFQUd0QixHQUFLcUQsR0FBeUIsS0FBUnJELEdBR3RCLEdBQUlBLEdBQVExQyxJQUNqQmppQyxFQUFRMm5DLEdBQ0ksS0FBUmhELEdBQWEsY0FKakJqd0IsRUFBSTR6QixTQUFXLEdBQ2Z0b0MsRUFBUThuQyxRQUpScHpCLEVBQUlpc0IsTUFBUSxHQUNaM2dDLEVBQVE2bkMsR0FPUixNQUVKLEtBQUtGLEdBQ0gsR0FDRWhELEdBQVExQyxHQUFlLEtBQVIwQyxHQUNOLE1BQVJBLEdBQWdCbEIsRUFBVS91QixLQUN6QnN6QixJQUEwQixLQUFSckQsR0FBdUIsS0FBUkEsR0FDbkMsQ0FrQkEsR0EzWFcsUUFEbkI4QixHQUQwQkEsRUE0V0Y3d0MsR0EzV053YixnQkFDcUIsU0FBWnExQixHQUFrQyxTQUFaQSxHQUFrQyxXQUFaQSxHQTJXN0RILEdBQWdCNXhCLEdBQ0osS0FBUml3QixHQUF5QixNQUFSQSxHQUFnQmxCLEVBQVUvdUIsSUFDN0NBLEVBQUk3bEIsS0FBS3NNLEtBQUssS0FFUHFyQyxHQUFZNXdDLEdBQ1QsS0FBUit1QyxHQUF5QixNQUFSQSxHQUFnQmxCLEVBQVUvdUIsSUFDN0NBLEVBQUk3bEIsS0FBS3NNLEtBQUssS0FHRSxRQUFkdVosRUFBSW94QixTQUFxQnB4QixFQUFJN2xCLEtBQUtxQixRQUFVaTJDLEVBQXFCdndDLEtBQy9EOGUsRUFBSVMsT0FBTVQsRUFBSVMsS0FBTyxJQUN6QnZmLEVBQVNBLEVBQU85RixPQUFPLEdBQUssS0FFOUI0a0IsRUFBSTdsQixLQUFLc00sS0FBS3ZGLElBRWhCQSxFQUFTLEdBQ1MsUUFBZDhlLEVBQUlveEIsU0FBcUJuQixHQUFRMUMsR0FBZSxLQUFSMEMsR0FBdUIsS0FBUkEsR0FDekQsS0FBT2p3QixFQUFJN2xCLEtBQUtxQixPQUFTLEdBQXFCLEtBQWhCd2tCLEVBQUk3bEIsS0FBSyxJQUNyQzZsQixFQUFJN2xCLEtBQUsreEMsUUFHRCxLQUFSK0QsR0FDRmp3QixFQUFJaXNCLE1BQVEsR0FDWjNnQyxFQUFRNm5DLElBQ1MsS0FBUmxELElBQ1Rqd0IsRUFBSTR6QixTQUFXLEdBQ2Z0b0MsRUFBUThuQyxTQUdWbHlDLEdBQVUrdEMsRUFBY2dCLEVBQU1VLEdBQzlCLE1BRUosS0FBS3VDLEdBQ1MsS0FBUmpELEdBQ0Zqd0IsRUFBSWlzQixNQUFRLEdBQ1ozZ0MsRUFBUTZuQyxJQUNTLEtBQVJsRCxHQUNUandCLEVBQUk0ekIsU0FBVyxHQUNmdG9DLEVBQVE4bkMsSUFDQ25ELEdBQVExQyxJQUNqQnZ0QixFQUFJN2xCLEtBQUssSUFBTTgwQyxFQUFjZ0IsRUFBTWYsSUFDbkMsTUFFSixLQUFLaUUsR0FDRUcsR0FBeUIsS0FBUnJELEVBR1hBLEdBQVExQyxJQUNMLEtBQVIwQyxHQUFlbEIsRUFBVS91QixHQUFNQSxFQUFJaXNCLE9BQVMsTUFDMUJqc0IsRUFBSWlzQixPQUFULEtBQVJnRSxFQUEwQixNQUNqQmhCLEVBQWNnQixFQUFNZixLQUx0Q2x2QixFQUFJNHpCLFNBQVcsR0FDZnRvQyxFQUFROG5DLElBS1IsTUFFSixLQUFLQSxHQUNDbkQsR0FBUTFDLElBQUt2dEIsRUFBSTR6QixVQUFZM0UsRUFBY2dCLEVBQU1TLElBSXpEVixNQU1BK0QsR0FBaUIsU0FBYS96QixHQUNoQyxJQUlJZzBCLEVBQVdSLEVBSlh0c0MsRUFBTzdILEVBQVduRixLQUFNNjVDLEdBQWdCLE9BQ3hDenFCLEVBQU9wbUIsVUFBVTFILE9BQVMsRUFBSTBILFVBQVUsUUFBS25JLEVBQzdDazVDLEVBQVkzNUMsT0FBTzBsQixHQUNuQjFVLEVBQVF2TCxFQUFpQm1ILEVBQU0sQ0FBRThELEtBQU0sUUFFM0MsUUFBYWpRLElBQVR1dUIsRUFDRixHQUFJQSxhQUFnQnlxQixHQUFnQkMsRUFBWW5HLEVBQW9CdmtCLFFBR2xFLEdBREFrcUIsRUFBVUgsR0FBU1csRUFBWSxHQUFJMTVDLE9BQU9ndkIsSUFDN0IsTUFBTWp2QixVQUFVbTVDLEdBSWpDLEdBREFBLEVBQVVILEdBQVMvbkMsRUFBTzJvQyxFQUFXLEtBQU1ELEdBQzlCLE1BQU0zNUMsVUFBVW01QyxHQUM3QixJQUFJdHpCLEVBQWU1VSxFQUFNNFUsYUFBZSxJQUFJSyxFQUN4QzJ6QixFQUFvQnRHLEVBQTZCMXRCLEdBQ3JEZzBCLEVBQWtCL0gsbUJBQW1CN2dDLEVBQU0yZ0MsT0FDM0NpSSxFQUFrQnRILFVBQVksV0FDNUJ0aEMsRUFBTTJnQyxNQUFRM3hDLE9BQU80bEIsSUFBaUIsTUFFbkNua0IsSUFDSG1MLEVBQUtvWixLQUFPNnpCLEdBQWExMUMsS0FBS3lJLEdBQzlCQSxFQUFLa3RDLE9BQVNDLEdBQVU1MUMsS0FBS3lJLEdBQzdCQSxFQUFLeWtCLFNBQVcyb0IsR0FBWTcxQyxLQUFLeUksR0FDakNBLEVBQUtzWixTQUFXK3pCLEdBQVk5MUMsS0FBS3lJLEdBQ2pDQSxFQUFLb3FDLFNBQVdrRCxHQUFZLzFDLEtBQUt5SSxHQUNqQ0EsRUFBS3VaLEtBQU9nMEIsR0FBUWgyQyxLQUFLeUksR0FDekJBLEVBQUt3dEMsU0FBV0MsR0FBWWwyQyxLQUFLeUksR0FDakNBLEVBQUs0akIsS0FBTzhwQixHQUFRbjJDLEtBQUt5SSxHQUN6QkEsRUFBS2laLFNBQVcwMEIsR0FBWXAyQyxLQUFLeUksR0FDakNBLEVBQUtxNUIsT0FBU3VVLEdBQVVyMkMsS0FBS3lJLEdBQzdCQSxFQUFLZ1osYUFBZTYwQixHQUFnQnQyQyxLQUFLeUksR0FDekNBLEVBQUt3WixLQUFPczBCLEdBQVF2MkMsS0FBS3lJLEtBSXpCK3RDLEdBQWVsQixHQUFlajVDLFVBRTlCcTVDLEdBQWUsV0FDakIsSUFBSW4wQixFQUFNNnRCLEVBQW9CM3pDLE1BQzFCazNDLEVBQVNweEIsRUFBSW94QixPQUNiNXdCLEVBQVdSLEVBQUlRLFNBQ2Y4d0IsRUFBV3R4QixFQUFJc3hCLFNBQ2Y3d0IsRUFBT1QsRUFBSVMsS0FDWHFLLEVBQU85SyxFQUFJOEssS0FDWDN3QixFQUFPNmxCLEVBQUk3bEIsS0FDWDh4QyxFQUFRanNCLEVBQUlpc0IsTUFDWjJILEVBQVc1ekIsRUFBSTR6QixTQUNmbnFCLEVBQVMybkIsRUFBUyxJQVl0QixPQVhhLE9BQVQzd0IsR0FDRmdKLEdBQVUsS0FDTjRuQixFQUFvQnJ4QixLQUN0QnlKLEdBQVVqSixHQUFZOHdCLEVBQVcsSUFBTUEsRUFBVyxJQUFNLEtBRTFEN25CLEdBQVV5bUIsRUFBY3p2QixHQUNYLE9BQVRxSyxJQUFlckIsR0FBVSxJQUFNcUIsSUFDaEIsUUFBVnNtQixJQUFrQjNuQixHQUFVLE1BQ3ZDQSxHQUFVekosRUFBSXd4QixpQkFBbUJyM0MsRUFBSyxHQUFLQSxFQUFLcUIsT0FBUyxJQUFNckIsRUFBS21lLEtBQUssS0FBTyxHQUNsRSxPQUFWMnpCLElBQWdCeGlCLEdBQVUsSUFBTXdpQixHQUNuQixPQUFiMkgsSUFBbUJucUIsR0FBVSxJQUFNbXFCLEdBQ2hDbnFCLEdBR0w0cUIsR0FBWSxXQUNkLElBQUlyMEIsRUFBTTZ0QixFQUFvQjN6QyxNQUMxQmszQyxFQUFTcHhCLEVBQUlveEIsT0FDYnRtQixFQUFPOUssRUFBSThLLEtBQ2YsR0FBYyxRQUFWc21CLEVBQWtCLElBQ3BCLE9BQU8sSUFBSW54QixJQUFJbXhCLEVBQU9qM0MsS0FBSyxJQUFJaTZDLE9BQy9CLE1BQU9uMUMsR0FDUCxNQUFPLE9BRVQsTUFBYyxRQUFWbXlDLEdBQXFCckMsRUFBVS91QixHQUM1Qm94QixFQUFTLE1BQVFsQixFQUFjbHdCLEVBQUlTLE9BQWtCLE9BQVRxSyxFQUFnQixJQUFNQSxFQUFPLElBRGhDLFFBSTlDd3BCLEdBQWMsV0FDaEIsT0FBT3pHLEVBQW9CM3pDLE1BQU1rM0MsT0FBUyxLQUd4Q21ELEdBQWMsV0FDaEIsT0FBTzFHLEVBQW9CM3pDLE1BQU1zbUIsVUFHL0JnMEIsR0FBYyxXQUNoQixPQUFPM0csRUFBb0IzekMsTUFBTW8zQyxVQUcvQm1ELEdBQVUsV0FDWixJQUFJejBCLEVBQU02dEIsRUFBb0IzekMsTUFDMUJ1bUIsRUFBT1QsRUFBSVMsS0FDWHFLLEVBQU85SyxFQUFJOEssS0FDZixPQUFnQixPQUFUckssRUFBZ0IsR0FDVixPQUFUcUssRUFBZ0JvbEIsRUFBY3p2QixHQUM5Qnl2QixFQUFjenZCLEdBQVEsSUFBTXFLLEdBRzlCNnBCLEdBQWMsV0FDaEIsSUFBSWwwQixFQUFPb3RCLEVBQW9CM3pDLE1BQU11bUIsS0FDckMsT0FBZ0IsT0FBVEEsRUFBZ0IsR0FBS3l2QixFQUFjenZCLElBR3hDbTBCLEdBQVUsV0FDWixJQUFJOXBCLEVBQU8raUIsRUFBb0IzekMsTUFBTTR3QixLQUNyQyxPQUFnQixPQUFUQSxFQUFnQixHQUFLeHdCLE9BQU93d0IsSUFHakMrcEIsR0FBYyxXQUNoQixJQUFJNzBCLEVBQU02dEIsRUFBb0IzekMsTUFDMUJDLEVBQU82bEIsRUFBSTdsQixLQUNmLE9BQU82bEIsRUFBSXd4QixpQkFBbUJyM0MsRUFBSyxHQUFLQSxFQUFLcUIsT0FBUyxJQUFNckIsRUFBS21lLEtBQUssS0FBTyxJQUczRXc4QixHQUFZLFdBQ2QsSUFBSTdJLEVBQVE0QixFQUFvQjN6QyxNQUFNK3hDLE1BQ3RDLE9BQU9BLEVBQVEsSUFBTUEsRUFBUSxJQUczQjhJLEdBQWtCLFdBQ3BCLE9BQU9sSCxFQUFvQjN6QyxNQUFNZ21CLGNBRy9CODBCLEdBQVUsV0FDWixJQUFJcEIsRUFBVy9GLEVBQW9CM3pDLE1BQU0wNUMsU0FDekMsT0FBT0EsRUFBVyxJQUFNQSxFQUFXLElBR2pDc0IsR0FBcUIsU0FBVW5uQixFQUFROUksR0FDekMsTUFBTyxDQUFFNW1CLElBQUswdkIsRUFBUS90QixJQUFLaWxCLEVBQVFocUIsY0FBYyxFQUFNc1UsWUFBWSxJQXlIckUsR0F0SEl4VCxHQUNGdW1CLEVBQWlCMnlCLEdBQWMsQ0FHN0IzMEIsS0FBTTQwQixHQUFtQmYsSUFBYyxTQUFVN3pCLEdBQy9DLElBQUlOLEVBQU02dEIsRUFBb0IzekMsTUFDMUIrNUMsRUFBWTM1QyxPQUFPZ21CLEdBQ25Ca3pCLEVBQVVILEdBQVNyekIsRUFBS2kwQixHQUM1QixHQUFJVCxFQUFTLE1BQU1uNUMsVUFBVW01QyxHQUM3QjVGLEVBQTZCNXRCLEVBQUlFLGNBQWNpc0IsbUJBQW1CbnNCLEVBQUlpc0IsVUFJeEVtSSxPQUFRYyxHQUFtQmIsSUFHM0Ixb0IsU0FBVXVwQixHQUFtQlosSUFBYSxTQUFVM29CLEdBQ2xELElBQUkzTCxFQUFNNnRCLEVBQW9CM3pDLE1BQzlCbTVDLEdBQVNyekIsRUFBSzFsQixPQUFPcXhCLEdBQVksSUFBS3FtQixPQUl4Q3h4QixTQUFVMDBCLEdBQW1CWCxJQUFhLFNBQVUvekIsR0FDbEQsSUFBSVIsRUFBTTZ0QixFQUFvQjN6QyxNQUMxQjIwQyxFQUFhckIsRUFBVWx6QyxPQUFPa21CLElBQ2xDLElBQUkrd0IsRUFBK0J2eEIsR0FBbkMsQ0FDQUEsRUFBSVEsU0FBVyxHQUNmLElBQUssSUFBSXRlLEVBQUksRUFBR0EsRUFBSTJzQyxFQUFXcnpDLE9BQVEwRyxJQUNyQzhkLEVBQUlRLFVBQVl5dUIsRUFBY0osRUFBVzNzQyxHQUFJMHVDLE9BS2pEVSxTQUFVNEQsR0FBbUJWLElBQWEsU0FBVWxELEdBQ2xELElBQUl0eEIsRUFBTTZ0QixFQUFvQjN6QyxNQUMxQjIwQyxFQUFhckIsRUFBVWx6QyxPQUFPZzNDLElBQ2xDLElBQUlDLEVBQStCdnhCLEdBQW5DLENBQ0FBLEVBQUlzeEIsU0FBVyxHQUNmLElBQUssSUFBSXB2QyxFQUFJLEVBQUdBLEVBQUkyc0MsRUFBV3J6QyxPQUFRMEcsSUFDckM4ZCxFQUFJc3hCLFVBQVlyQyxFQUFjSixFQUFXM3NDLEdBQUkwdUMsT0FLakRud0IsS0FBTXkwQixHQUFtQlQsSUFBUyxTQUFVaDBCLEdBQzFDLElBQUlULEVBQU02dEIsRUFBb0IzekMsTUFDMUI4bEIsRUFBSXd4QixrQkFDUjZCLEdBQVNyekIsRUFBSzFsQixPQUFPbW1CLEdBQU9peUIsT0FJOUJnQyxTQUFVUSxHQUFtQlAsSUFBYSxTQUFVRCxHQUNsRCxJQUFJMTBCLEVBQU02dEIsRUFBb0IzekMsTUFDMUI4bEIsRUFBSXd4QixrQkFDUjZCLEdBQVNyekIsRUFBSzFsQixPQUFPbzZDLEdBQVcvQixPQUlsQzduQixLQUFNb3FCLEdBQW1CTixJQUFTLFNBQVU5cEIsR0FDMUMsSUFBSTlLLEVBQU02dEIsRUFBb0IzekMsTUFDMUJxM0MsRUFBK0J2eEIsS0FFdkIsS0FEWjhLLEVBQU94d0IsT0FBT3d3QixJQUNFOUssRUFBSThLLEtBQU8sS0FDdEJ1b0IsR0FBU3J6QixFQUFLOEssRUFBTThuQixRQUkzQnp5QixTQUFVKzBCLEdBQW1CTCxJQUFhLFNBQVUxMEIsR0FDbEQsSUFBSUgsRUFBTTZ0QixFQUFvQjN6QyxNQUMxQjhsQixFQUFJd3hCLG1CQUNSeHhCLEVBQUk3bEIsS0FBTyxHQUNYazVDLEdBQVNyekIsRUFBS0csRUFBVyxHQUFJNnlCLFFBSS9CelMsT0FBUTJVLEdBQW1CSixJQUFXLFNBQVV2VSxHQUM5QyxJQUFJdmdCLEVBQU02dEIsRUFBb0IzekMsTUFFaEIsS0FEZHFtQyxFQUFTam1DLE9BQU9pbUMsSUFFZHZnQixFQUFJaXNCLE1BQVEsTUFFUixLQUFPMUwsRUFBT25sQyxPQUFPLEtBQUltbEMsRUFBU0EsRUFBT3grQixNQUFNLElBQ25EaWUsRUFBSWlzQixNQUFRLEdBQ1pvSCxHQUFTcnpCLEVBQUt1Z0IsRUFBUTRTLEtBRXhCdkYsRUFBNkI1dEIsRUFBSUUsY0FBY2lzQixtQkFBbUJuc0IsRUFBSWlzQixVQUl4RS9yQixhQUFjZzFCLEdBQW1CSCxJQUdqQ3IwQixLQUFNdzBCLEdBQW1CRixJQUFTLFNBQVV0MEIsR0FDMUMsSUFBSVYsRUFBTTZ0QixFQUFvQjN6QyxNQUVsQixLQURad21CLEVBQU9wbUIsT0FBT29tQixLQUtWLEtBQU9BLEVBQUt0bEIsT0FBTyxLQUFJc2xCLEVBQU9BLEVBQUszZSxNQUFNLElBQzdDaWUsRUFBSTR6QixTQUFXLEdBQ2ZQLEdBQVNyekIsRUFBS1UsRUFBTTB5QixLQUxsQnB6QixFQUFJNHpCLFNBQVcsVUFZdkJ4M0MsRUFBUzY0QyxHQUFjLFVBQVUsV0FDL0IsT0FBT2QsR0FBYTExQyxLQUFLdkUsUUFDeEIsQ0FBRXFWLFlBQVksSUFJakJuVCxFQUFTNjRDLEdBQWMsWUFBWSxXQUNqQyxPQUFPZCxHQUFhMTFDLEtBQUt2RSxRQUN4QixDQUFFcVYsWUFBWSxJQUVibytCLEVBQVcsQ0FDYixJQUFJd0gsR0FBd0J4SCxFQUFVeUgsZ0JBQ2xDQyxHQUF3QjFILEVBQVUySCxnQkFJbENILElBQXVCLzRDLEVBQVMyM0MsR0FBZ0IsbUJBQW1CLFNBQXlCd0IsR0FDOUYsT0FBT0osR0FBc0JqdEMsTUFBTXlsQyxFQUFXenFDLGNBSzVDbXlDLElBQXVCajVDLEVBQVMyM0MsR0FBZ0IsbUJBQW1CLFNBQXlCL3pCLEdBQzlGLE9BQU9xMUIsR0FBc0JudEMsTUFBTXlsQyxFQUFXenFDLGNBSWxEdEQsRUFBZW0wQyxHQUFnQixPQUUvQmpuQyxFQUFFLENBQUU5USxRQUFRLEVBQU0rQyxRQUFTaXNDLEVBQWdCcjFCLE1BQU81WixHQUFlLENBQy9Ea2tCLElBQUs4ekIsTSw0QkMxK0JDLEVBQVEsS0FJaEJqbkMsQ0FBRSxDQUFFM0ksT0FBUSxNQUFPK04sT0FBTyxFQUFNM0MsWUFBWSxHQUFRLENBQ2xENlEsT0FBUSxXQUNOLE9BQU9ILElBQUlubEIsVUFBVWdQLFNBQVNyTCxLQUFLdkUsVSxlQ1B2QyxFQUFRLE1BQ1IsRUFBUSxNQUNSLElBQUlDLEVBQU8sRUFBUSxLQUVuQkosRUFBT0QsUUFBVUssRyxlQ0pqQixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsS0FDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLElBQUlBLEVBQU8sRUFBUSxLQUVuQkosRUFBT0QsUUFBVUssRyxTQ0hqQixJQUFJcTdDLEVBQVcsU0FBVTE3QyxHQUN2QixhQUVBLElBRUlpQixFQUZBMDZDLEVBQUt6NEMsT0FBT2xDLFVBQ1ptd0MsRUFBU3dLLEVBQUc1N0IsZUFFWjZzQixFQUE0QixtQkFBWHQwQixPQUF3QkEsT0FBUyxHQUNsRHNqQyxFQUFpQmhQLEVBQVFqaEMsVUFBWSxhQUNyQ2t3QyxFQUFzQmpQLEVBQVFrUCxlQUFpQixrQkFDL0NDLEVBQW9CblAsRUFBUW9QLGFBQWUsZ0JBRS9DLFNBQVM5N0MsRUFBTzg5QixFQUFLMzhCLEVBQUtELEdBT3hCLE9BTkE4QixPQUFPWCxlQUFleTdCLEVBQUszOEIsRUFBSyxDQUM5QkQsTUFBT0EsRUFDUHFVLFlBQVksRUFDWnRVLGNBQWMsRUFDZHVVLFVBQVUsSUFFTHNvQixFQUFJMzhCLEdBRWIsSUFFRW5CLEVBQU8sR0FBSSxJQUNYLE1BQU8rN0MsR0FDUC83QyxFQUFTLFNBQVM4OUIsRUFBSzM4QixFQUFLRCxHQUMxQixPQUFPNDhCLEVBQUkzOEIsR0FBT0QsR0FJdEIsU0FBUzRoQyxFQUFLa1osRUFBU0MsRUFBUzd1QyxFQUFNOHVDLEdBRXBDLElBQUlDLEVBQWlCRixHQUFXQSxFQUFRbjdDLHFCQUFxQnM3QyxFQUFZSCxFQUFVRyxFQUMvRUMsRUFBWXI1QyxPQUFPdkMsT0FBTzA3QyxFQUFlcjdDLFdBQ3pDdzdDLEVBQVUsSUFBSUMsRUFBUUwsR0FBZSxJQU16QyxPQUZBRyxFQUFVRyxRQXNNWixTQUEwQlIsRUFBUzV1QyxFQUFNa3ZDLEdBQ3ZDLElBQUlockMsRUFBUW1yQyxFQUVaLE9BQU8sU0FBZ0IvdEMsRUFBUXdPLEdBQzdCLEdBQUk1TCxJQUFVb3JDLEVBQ1osTUFBTSxJQUFJN25CLE1BQU0sZ0NBR2xCLEdBQUl2akIsSUFBVXFyQyxFQUFtQixDQUMvQixHQUFlLFVBQVhqdUMsRUFDRixNQUFNd08sRUFLUixPQUFPMC9CLElBTVQsSUFIQU4sRUFBUTV0QyxPQUFTQSxFQUNqQjR0QyxFQUFRcC9CLElBQU1BLElBRUQsQ0FDWCxJQUFJMi9CLEVBQVdQLEVBQVFPLFNBQ3ZCLEdBQUlBLEVBQVUsQ0FDWixJQUFJQyxFQUFpQkMsRUFBb0JGLEVBQVVQLEdBQ25ELEdBQUlRLEVBQWdCLENBQ2xCLEdBQUlBLElBQW1CRSxFQUFrQixTQUN6QyxPQUFPRixHQUlYLEdBQXVCLFNBQW5CUixFQUFRNXRDLE9BR1Y0dEMsRUFBUVcsS0FBT1gsRUFBUVksTUFBUVosRUFBUXAvQixTQUVsQyxHQUF1QixVQUFuQm8vQixFQUFRNXRDLE9BQW9CLENBQ3JDLEdBQUk0QyxJQUFVbXJDLEVBRVosTUFEQW5yQyxFQUFRcXJDLEVBQ0ZMLEVBQVFwL0IsSUFHaEJvL0IsRUFBUWEsa0JBQWtCYixFQUFRcC9CLFNBRU4sV0FBbkJvL0IsRUFBUTV0QyxRQUNqQjR0QyxFQUFRYyxPQUFPLFNBQVVkLEVBQVFwL0IsS0FHbkM1TCxFQUFRb3JDLEVBRVIsSUFBSVcsRUFBU0MsRUFBU3RCLEVBQVM1dUMsRUFBTWt2QyxHQUNyQyxHQUFvQixXQUFoQmUsRUFBT3JzQyxLQUFtQixDQU81QixHQUpBTSxFQUFRZ3JDLEVBQVF4d0MsS0FDWjZ3QyxFQUNBWSxFQUVBRixFQUFPbmdDLE1BQVE4L0IsRUFDakIsU0FHRixNQUFPLENBQ0w5N0MsTUFBT204QyxFQUFPbmdDLElBQ2RwUixLQUFNd3dDLEVBQVF4d0MsTUFHUyxVQUFoQnV4QyxFQUFPcnNDLE9BQ2hCTSxFQUFRcXJDLEVBR1JMLEVBQVE1dEMsT0FBUyxRQUNqQjR0QyxFQUFRcC9CLElBQU1tZ0MsRUFBT25nQyxPQTlRUHNnQyxDQUFpQnhCLEVBQVM1dUMsRUFBTWt2QyxHQUU3Q0QsRUFjVCxTQUFTaUIsRUFBU2x1QyxFQUFJMHVCLEVBQUs1Z0IsR0FDekIsSUFDRSxNQUFPLENBQUVsTSxLQUFNLFNBQVVrTSxJQUFLOU4sRUFBRzNLLEtBQUtxNUIsRUFBSzVnQixJQUMzQyxNQUFPNitCLEdBQ1AsTUFBTyxDQUFFL3FDLEtBQU0sUUFBU2tNLElBQUs2K0IsSUFoQmpDajhDLEVBQVFnakMsS0FBT0EsRUFvQmYsSUFBSTJaLEVBQXlCLGlCQUN6QmMsRUFBeUIsaUJBQ3pCYixFQUFvQixZQUNwQkMsRUFBb0IsWUFJcEJLLEVBQW1CLEdBTXZCLFNBQVNaLEtBQ1QsU0FBU3FCLEtBQ1QsU0FBU0MsS0FJVCxJQUFJem9DLEVBQW9CLEdBQ3hCQSxFQUFrQnltQyxHQUFrQixXQUNsQyxPQUFPeDdDLE1BR1QsSUFBSXk5QyxFQUFXMzZDLE9BQU9WLGVBQ2xCczdDLEVBQTBCRCxHQUFZQSxFQUFTQSxFQUFTMWxDLEVBQU8sTUFDL0QybEMsR0FDQUEsSUFBNEJuQyxHQUM1QnhLLEVBQU94c0MsS0FBS201QyxFQUF5QmxDLEtBR3ZDem1DLEVBQW9CMm9DLEdBR3RCLElBQUlDLEVBQUtILEVBQTJCNThDLFVBQ2xDczdDLEVBQVV0N0MsVUFBWWtDLE9BQU92QyxPQUFPd1UsR0FXdEMsU0FBUzZvQyxFQUFzQmg5QyxHQUM3QixDQUFDLE9BQVEsUUFBUyxVQUFVaUssU0FBUSxTQUFTMkQsR0FDM0MxTyxFQUFPYyxFQUFXNE4sR0FBUSxTQUFTd08sR0FDakMsT0FBT2hkLEtBQUtzOEMsUUFBUTl0QyxFQUFRd08sU0FrQ2xDLFNBQVM2Z0MsRUFBYzFCLEVBQVcyQixHQUNoQyxTQUFTQyxFQUFPdnZDLEVBQVF3TyxFQUFLdUksRUFBU21CLEdBQ3BDLElBQUl5MkIsRUFBU0MsRUFBU2pCLEVBQVUzdEMsR0FBUzJ0QyxFQUFXbi9CLEdBQ3BELEdBQW9CLFVBQWhCbWdDLEVBQU9yc0MsS0FFSixDQUNMLElBQUl6RixFQUFTOHhDLEVBQU9uZ0MsSUFDaEJoYyxFQUFRcUssRUFBT3JLLE1BQ25CLE9BQUlBLEdBQ2lCLGlCQUFWQSxHQUNQK3ZDLEVBQU94c0MsS0FBS3ZELEVBQU8sV0FDZDg4QyxFQUFZdjRCLFFBQVF2a0IsRUFBTWc5QyxTQUFTdjVCLE1BQUssU0FBU3pqQixHQUN0RCs4QyxFQUFPLE9BQVEvOEMsRUFBT3VrQixFQUFTbUIsTUFDOUIsU0FBU20xQixHQUNWa0MsRUFBTyxRQUFTbEMsRUFBS3QyQixFQUFTbUIsTUFJM0JvM0IsRUFBWXY0QixRQUFRdmtCLEdBQU95akIsTUFBSyxTQUFTdzVCLEdBSTlDNXlDLEVBQU9ySyxNQUFRaTlDLEVBQ2YxNEIsRUFBUWxhLE1BQ1AsU0FBU3RHLEdBR1YsT0FBT2c1QyxFQUFPLFFBQVNoNUMsRUFBT3dnQixFQUFTbUIsTUF2QnpDQSxFQUFPeTJCLEVBQU9uZ0MsS0E0QmxCLElBQUlraEMsRUFnQ0psK0MsS0FBS3M4QyxRQTlCTCxTQUFpQjl0QyxFQUFRd08sR0FDdkIsU0FBU21oQyxJQUNQLE9BQU8sSUFBSUwsR0FBWSxTQUFTdjRCLEVBQVNtQixHQUN2Q3EzQixFQUFPdnZDLEVBQVF3TyxFQUFLdUksRUFBU21CLE1BSWpDLE9BQU93M0IsRUFhTEEsRUFBa0JBLEVBQWdCejVCLEtBQ2hDMDVCLEVBR0FBLEdBQ0VBLEtBa0hWLFNBQVN0QixFQUFvQkYsRUFBVVAsR0FDckMsSUFBSTV0QyxFQUFTbXVDLEVBQVNweEMsU0FBUzZ3QyxFQUFRNXRDLFFBQ3ZDLEdBQUlBLElBQVczTixFQUFXLENBS3hCLEdBRkF1N0MsRUFBUU8sU0FBVyxLQUVJLFVBQW5CUCxFQUFRNXRDLE9BQW9CLENBRTlCLEdBQUltdUMsRUFBU3B4QyxTQUFpQixTQUc1QjZ3QyxFQUFRNXRDLE9BQVMsU0FDakI0dEMsRUFBUXAvQixJQUFNbmMsRUFDZGc4QyxFQUFvQkYsRUFBVVAsR0FFUCxVQUFuQkEsRUFBUTV0QyxRQUdWLE9BQU9zdUMsRUFJWFYsRUFBUTV0QyxPQUFTLFFBQ2pCNHRDLEVBQVFwL0IsSUFBTSxJQUFJN2MsVUFDaEIsa0RBR0osT0FBTzI4QyxFQUdULElBQUlLLEVBQVNDLEVBQVM1dUMsRUFBUW11QyxFQUFTcHhDLFNBQVU2d0MsRUFBUXAvQixLQUV6RCxHQUFvQixVQUFoQm1nQyxFQUFPcnNDLEtBSVQsT0FIQXNyQyxFQUFRNXRDLE9BQVMsUUFDakI0dEMsRUFBUXAvQixJQUFNbWdDLEVBQU9uZ0MsSUFDckJvL0IsRUFBUU8sU0FBVyxLQUNaRyxFQUdULElBQUlzQixFQUFPakIsRUFBT25nQyxJQUVsQixPQUFNb2hDLEVBT0ZBLEVBQUt4eUMsTUFHUHd3QyxFQUFRTyxFQUFTMEIsWUFBY0QsRUFBS3A5QyxNQUdwQ283QyxFQUFRNXdDLEtBQU9teEMsRUFBUzJCLFFBUUQsV0FBbkJsQyxFQUFRNXRDLFNBQ1Y0dEMsRUFBUTV0QyxPQUFTLE9BQ2pCNHRDLEVBQVFwL0IsSUFBTW5jLEdBVWxCdTdDLEVBQVFPLFNBQVcsS0FDWkcsR0FORXNCLEdBM0JQaEMsRUFBUTV0QyxPQUFTLFFBQ2pCNHRDLEVBQVFwL0IsSUFBTSxJQUFJN2MsVUFBVSxvQ0FDNUJpOEMsRUFBUU8sU0FBVyxLQUNaRyxHQW9EWCxTQUFTeUIsRUFBYUMsR0FDcEIsSUFBSW50QyxFQUFRLENBQUVvdEMsT0FBUUQsRUFBSyxJQUV2QixLQUFLQSxJQUNQbnRDLEVBQU1xdEMsU0FBV0YsRUFBSyxJQUdwQixLQUFLQSxJQUNQbnRDLEVBQU1zdEMsV0FBYUgsRUFBSyxHQUN4Qm50QyxFQUFNdXRDLFNBQVdKLEVBQUssSUFHeEJ4K0MsS0FBSzYrQyxXQUFXdHlDLEtBQUs4RSxHQUd2QixTQUFTeXRDLEVBQWN6dEMsR0FDckIsSUFBSThyQyxFQUFTOXJDLEVBQU0wdEMsWUFBYyxHQUNqQzVCLEVBQU9yc0MsS0FBTyxnQkFDUHFzQyxFQUFPbmdDLElBQ2QzTCxFQUFNMHRDLFdBQWE1QixFQUdyQixTQUFTZCxFQUFRTCxHQUlmaDhDLEtBQUs2K0MsV0FBYSxDQUFDLENBQUVKLE9BQVEsU0FDN0J6QyxFQUFZbnhDLFFBQVEwekMsRUFBY3YrQyxNQUNsQ0EsS0FBS2cvQyxPQUFNLEdBOEJiLFNBQVNqbkMsRUFBT2xILEdBQ2QsR0FBSUEsRUFBVSxDQUNaLElBQUlsRixFQUFpQmtGLEVBQVMycUMsR0FDOUIsR0FBSTd2QyxFQUNGLE9BQU9BLEVBQWVwSCxLQUFLc00sR0FHN0IsR0FBNkIsbUJBQWxCQSxFQUFTckYsS0FDbEIsT0FBT3FGLEVBR1QsSUFBS3VoQixNQUFNdmhCLEVBQVN2UCxRQUFTLENBQzNCLElBQUkwRyxHQUFLLEVBQUd3RCxFQUFPLFNBQVNBLElBQzFCLE9BQVN4RCxFQUFJNkksRUFBU3ZQLFFBQ3BCLEdBQUl5dkMsRUFBT3hzQyxLQUFLc00sRUFBVTdJLEdBR3hCLE9BRkF3RCxFQUFLeEssTUFBUTZQLEVBQVM3SSxHQUN0QndELEVBQUtJLE1BQU8sRUFDTEosRUFPWCxPQUhBQSxFQUFLeEssTUFBUUgsRUFDYjJLLEVBQUtJLE1BQU8sRUFFTEosR0FHVCxPQUFPQSxFQUFLQSxLQUFPQSxHQUt2QixNQUFPLENBQUVBLEtBQU1reEMsR0FJakIsU0FBU0EsSUFDUCxNQUFPLENBQUUxN0MsTUFBT0gsRUFBVytLLE1BQU0sR0ErTW5DLE9BNW1CQTJ4QyxFQUFrQjM4QyxVQUFZKzhDLEVBQUd0MUMsWUFBY20xQyxFQUMvQ0EsRUFBMkJuMUMsWUFBY2sxQyxFQUN6Q0EsRUFBa0IwQixZQUFjbi9DLEVBQzlCMDlDLEVBQ0E3QixFQUNBLHFCQWFGLzdDLEVBQVFzL0Msb0JBQXNCLFNBQVNDLEdBQ3JDLElBQUlDLEVBQXlCLG1CQUFYRCxHQUF5QkEsRUFBTzkyQyxZQUNsRCxRQUFPKzJDLElBQ0hBLElBQVM3QixHQUcyQix1QkFBbkM2QixFQUFLSCxhQUFlRyxFQUFLNTlDLFFBSWhDNUIsRUFBUXkvQyxLQUFPLFNBQVNGLEdBUXRCLE9BUElyOEMsT0FBT1QsZUFDVFMsT0FBT1QsZUFBZTg4QyxFQUFRM0IsSUFFOUIyQixFQUFPbDBCLFVBQVl1eUIsRUFDbkIxOUMsRUFBT3EvQyxFQUFReEQsRUFBbUIsc0JBRXBDd0QsRUFBT3YrQyxVQUFZa0MsT0FBT3ZDLE9BQU9vOUMsR0FDMUJ3QixHQU9Udi9DLEVBQVEwL0MsTUFBUSxTQUFTdGlDLEdBQ3ZCLE1BQU8sQ0FBRWdoQyxRQUFTaGhDLElBc0VwQjRnQyxFQUFzQkMsRUFBY2o5QyxXQUNwQ2k5QyxFQUFjajlDLFVBQVU2NkMsR0FBdUIsV0FDN0MsT0FBT3o3QyxNQUVUSixFQUFRaStDLGNBQWdCQSxFQUt4QmorQyxFQUFRMi9DLE1BQVEsU0FBU3pELEVBQVNDLEVBQVM3dUMsRUFBTTh1QyxFQUFhOEIsUUFDeEMsSUFBaEJBLElBQXdCQSxFQUFjOTRCLFNBRTFDLElBQUl3NkIsRUFBTyxJQUFJM0IsRUFDYmpiLEVBQUtrWixFQUFTQyxFQUFTN3VDLEVBQU04dUMsR0FDN0I4QixHQUdGLE9BQU9sK0MsRUFBUXMvQyxvQkFBb0JuRCxHQUMvQnlELEVBQ0FBLEVBQUtoMEMsT0FBT2laLE1BQUssU0FBU3BaLEdBQ3hCLE9BQU9BLEVBQU9PLEtBQU9QLEVBQU9ySyxNQUFRdytDLEVBQUtoMEMsV0F1S2pEb3lDLEVBQXNCRCxHQUV0Qjc5QyxFQUFPNjlDLEVBQUloQyxFQUFtQixhQU85QmdDLEVBQUduQyxHQUFrQixXQUNuQixPQUFPeDdDLE1BR1QyOUMsRUFBRy90QyxTQUFXLFdBQ1osTUFBTyxzQkFrQ1RoUSxFQUFRdUksS0FBTyxTQUFTd0gsR0FDdEIsSUFBSXhILEVBQU8sR0FDWCxJQUFLLElBQUlsSCxLQUFPME8sRUFDZHhILEVBQUtvRSxLQUFLdEwsR0FNWixPQUpBa0gsRUFBS0wsVUFJRSxTQUFTMEQsSUFDZCxLQUFPckQsRUFBSzdHLFFBQVEsQ0FDbEIsSUFBSUwsRUFBTWtILEVBQUttdEMsTUFDZixHQUFJcjBDLEtBQU8wTyxFQUdULE9BRkFuRSxFQUFLeEssTUFBUUMsRUFDYnVLLEVBQUtJLE1BQU8sRUFDTEosRUFRWCxPQURBQSxFQUFLSSxNQUFPLEVBQ0xKLElBc0NYNUwsRUFBUW1ZLE9BQVNBLEVBTWpCc2tDLEVBQVF6N0MsVUFBWSxDQUNsQnlILFlBQWFnMEMsRUFFYjJDLE1BQU8sU0FBU1MsR0FjZCxHQWJBei9DLEtBQUswUixLQUFPLEVBQ1oxUixLQUFLd0wsS0FBTyxFQUdaeEwsS0FBSys4QyxLQUFPLzhDLEtBQUtnOUMsTUFBUW44QyxFQUN6QmIsS0FBSzRMLE1BQU8sRUFDWjVMLEtBQUsyOEMsU0FBVyxLQUVoQjM4QyxLQUFLd08sT0FBUyxPQUNkeE8sS0FBS2dkLElBQU1uYyxFQUVYYixLQUFLNitDLFdBQVdoMEMsUUFBUWkwQyxJQUVuQlcsRUFDSCxJQUFLLElBQUlqK0MsS0FBUXhCLEtBRVEsTUFBbkJ3QixFQUFLTixPQUFPLElBQ1o2dkMsRUFBT3hzQyxLQUFLdkUsS0FBTXdCLEtBQ2pCNHdCLE9BQU81d0IsRUFBS3FHLE1BQU0sTUFDckI3SCxLQUFLd0IsR0FBUVgsSUFNckJtaUIsS0FBTSxXQUNKaGpCLEtBQUs0TCxNQUFPLEVBRVosSUFDSTh6QyxFQURZMS9DLEtBQUs2K0MsV0FBVyxHQUNMRSxXQUMzQixHQUF3QixVQUFwQlcsRUFBVzV1QyxLQUNiLE1BQU00dUMsRUFBVzFpQyxJQUduQixPQUFPaGQsS0FBSzIvQyxNQUdkMUMsa0JBQW1CLFNBQVMyQyxHQUMxQixHQUFJNS9DLEtBQUs0TCxLQUNQLE1BQU1nMEMsRUFHUixJQUFJeEQsRUFBVXA4QyxLQUNkLFNBQVM2L0MsRUFBT0MsRUFBS0MsR0FZbkIsT0FYQTVDLEVBQU9yc0MsS0FBTyxRQUNkcXNDLEVBQU9uZ0MsSUFBTTRpQyxFQUNieEQsRUFBUTV3QyxLQUFPczBDLEVBRVhDLElBR0YzRCxFQUFRNXRDLE9BQVMsT0FDakI0dEMsRUFBUXAvQixJQUFNbmMsS0FHTmsvQyxFQUdaLElBQUssSUFBSS8zQyxFQUFJaEksS0FBSzYrQyxXQUFXdjlDLE9BQVMsRUFBRzBHLEdBQUssSUFBS0EsRUFBRyxDQUNwRCxJQUFJcUosRUFBUXJSLEtBQUs2K0MsV0FBVzcyQyxHQUN4Qm0xQyxFQUFTOXJDLEVBQU0wdEMsV0FFbkIsR0FBcUIsU0FBakIxdEMsRUFBTW90QyxPQUlSLE9BQU9vQixFQUFPLE9BR2hCLEdBQUl4dUMsRUFBTW90QyxRQUFVeitDLEtBQUswUixLQUFNLENBQzdCLElBQUlzdUMsRUFBV2pQLEVBQU94c0MsS0FBSzhNLEVBQU8sWUFDOUI0dUMsRUFBYWxQLEVBQU94c0MsS0FBSzhNLEVBQU8sY0FFcEMsR0FBSTJ1QyxHQUFZQyxFQUFZLENBQzFCLEdBQUlqZ0QsS0FBSzBSLEtBQU9MLEVBQU1xdEMsU0FDcEIsT0FBT21CLEVBQU94dUMsRUFBTXF0QyxVQUFVLEdBQ3pCLEdBQUkxK0MsS0FBSzBSLEtBQU9MLEVBQU1zdEMsV0FDM0IsT0FBT2tCLEVBQU94dUMsRUFBTXN0QyxpQkFHakIsR0FBSXFCLEdBQ1QsR0FBSWhnRCxLQUFLMFIsS0FBT0wsRUFBTXF0QyxTQUNwQixPQUFPbUIsRUFBT3h1QyxFQUFNcXRDLFVBQVUsT0FHM0IsS0FBSXVCLEVBTVQsTUFBTSxJQUFJdHJCLE1BQU0sMENBTGhCLEdBQUkzMEIsS0FBSzBSLEtBQU9MLEVBQU1zdEMsV0FDcEIsT0FBT2tCLEVBQU94dUMsRUFBTXN0QyxnQkFVOUJ6QixPQUFRLFNBQVNwc0MsRUFBTWtNLEdBQ3JCLElBQUssSUFBSWhWLEVBQUloSSxLQUFLNitDLFdBQVd2OUMsT0FBUyxFQUFHMEcsR0FBSyxJQUFLQSxFQUFHLENBQ3BELElBQUlxSixFQUFRclIsS0FBSzYrQyxXQUFXNzJDLEdBQzVCLEdBQUlxSixFQUFNb3RDLFFBQVV6K0MsS0FBSzBSLE1BQ3JCcS9CLEVBQU94c0MsS0FBSzhNLEVBQU8sZUFDbkJyUixLQUFLMFIsS0FBT0wsRUFBTXN0QyxXQUFZLENBQ2hDLElBQUl1QixFQUFlN3VDLEVBQ25CLE9BSUE2dUMsSUFDVSxVQUFUcHZDLEdBQ1MsYUFBVEEsSUFDRG92QyxFQUFhekIsUUFBVXpoQyxHQUN2QkEsR0FBT2tqQyxFQUFhdkIsYUFHdEJ1QixFQUFlLE1BR2pCLElBQUkvQyxFQUFTK0MsRUFBZUEsRUFBYW5CLFdBQWEsR0FJdEQsT0FIQTVCLEVBQU9yc0MsS0FBT0EsRUFDZHFzQyxFQUFPbmdDLElBQU1BLEVBRVRrakMsR0FDRmxnRCxLQUFLd08sT0FBUyxPQUNkeE8sS0FBS3dMLEtBQU8wMEMsRUFBYXZCLFdBQ2xCN0IsR0FHRjk4QyxLQUFLbWdELFNBQVNoRCxJQUd2QmdELFNBQVUsU0FBU2hELEVBQVF5QixHQUN6QixHQUFvQixVQUFoQnpCLEVBQU9yc0MsS0FDVCxNQUFNcXNDLEVBQU9uZ0MsSUFjZixNQVhvQixVQUFoQm1nQyxFQUFPcnNDLE1BQ1MsYUFBaEJxc0MsRUFBT3JzQyxLQUNUOVEsS0FBS3dMLEtBQU8yeEMsRUFBT25nQyxJQUNNLFdBQWhCbWdDLEVBQU9yc0MsTUFDaEI5USxLQUFLMi9DLEtBQU8zL0MsS0FBS2dkLElBQU1tZ0MsRUFBT25nQyxJQUM5QmhkLEtBQUt3TyxPQUFTLFNBQ2R4TyxLQUFLd0wsS0FBTyxPQUNhLFdBQWhCMnhDLEVBQU9yc0MsTUFBcUI4dEMsSUFDckM1K0MsS0FBS3dMLEtBQU9vekMsR0FHUDlCLEdBR1RzRCxPQUFRLFNBQVN6QixHQUNmLElBQUssSUFBSTMyQyxFQUFJaEksS0FBSzYrQyxXQUFXdjlDLE9BQVMsRUFBRzBHLEdBQUssSUFBS0EsRUFBRyxDQUNwRCxJQUFJcUosRUFBUXJSLEtBQUs2K0MsV0FBVzcyQyxHQUM1QixHQUFJcUosRUFBTXN0QyxhQUFlQSxFQUd2QixPQUZBMytDLEtBQUttZ0QsU0FBUzl1QyxFQUFNMHRDLFdBQVkxdEMsRUFBTXV0QyxVQUN0Q0UsRUFBY3p0QyxHQUNQeXJDLElBS2IsTUFBUyxTQUFTMkIsR0FDaEIsSUFBSyxJQUFJejJDLEVBQUloSSxLQUFLNitDLFdBQVd2OUMsT0FBUyxFQUFHMEcsR0FBSyxJQUFLQSxFQUFHLENBQ3BELElBQUlxSixFQUFRclIsS0FBSzYrQyxXQUFXNzJDLEdBQzVCLEdBQUlxSixFQUFNb3RDLFNBQVdBLEVBQVEsQ0FDM0IsSUFBSXRCLEVBQVM5ckMsRUFBTTB0QyxXQUNuQixHQUFvQixVQUFoQjVCLEVBQU9yc0MsS0FBa0IsQ0FDM0IsSUFBSXV2QyxFQUFTbEQsRUFBT25nQyxJQUNwQjhoQyxFQUFjenRDLEdBRWhCLE9BQU9ndkMsR0FNWCxNQUFNLElBQUkxckIsTUFBTSwwQkFHbEIyckIsY0FBZSxTQUFTenZDLEVBQVV3dEMsRUFBWUMsR0FhNUMsT0FaQXQrQyxLQUFLMjhDLFNBQVcsQ0FDZHB4QyxTQUFVd00sRUFBT2xILEdBQ2pCd3RDLFdBQVlBLEVBQ1pDLFFBQVNBLEdBR1MsU0FBaEJ0K0MsS0FBS3dPLFNBR1B4TyxLQUFLZ2QsSUFBTW5jLEdBR05pOEMsSUFRSmw5QyxFQTdzQkssQ0FvdEJpQkMsRUFBT0QsU0FHdEMsSUFDRTJnRCxtQkFBcUJqRixFQUNyQixNQUFPa0YsR0FVUHQ4QyxTQUFTLElBQUsseUJBQWRBLENBQXdDbzNDLE1DenVCdENtRixFQUEyQixHQUcvQixTQUFTQyxFQUFvQkMsR0FFNUIsR0FBR0YsRUFBeUJFLEdBQzNCLE9BQU9GLEVBQXlCRSxHQUFVL2dELFFBRzNDLElBQUlDLEVBQVM0Z0QsRUFBeUJFLEdBQVksQ0FHakQvZ0QsUUFBUyxJQU9WLE9BSEFnaEQsRUFBb0JELEdBQVU5Z0QsRUFBUUEsRUFBT0QsUUFBUzhnRCxHQUcvQzdnRCxFQUFPRCxRQ25CZjhnRCxFQUFvQkcsRUFBSSxDQUFDamhELEVBQVNraEQsS0FDakMsSUFBSSxJQUFJNy9DLEtBQU82L0MsRUFDWEosRUFBb0JLLEVBQUVELEVBQVk3L0MsS0FBU3kvQyxFQUFvQkssRUFBRW5oRCxFQUFTcUIsSUFDNUU2QixPQUFPWCxlQUFldkMsRUFBU3FCLEVBQUssQ0FBRW9VLFlBQVksRUFBTWxSLElBQUsyOEMsRUFBVzcvQyxNQ0ozRXkvQyxFQUFvQmhoQyxFQUFJLFdBQ3ZCLEdBQTBCLGlCQUFmRixXQUF5QixPQUFPQSxXQUMzQyxJQUNDLE9BQU94ZixNQUFRLElBQUlrRSxTQUFTLGNBQWIsR0FDZCxNQUFPODRCLEdBQ1IsR0FBc0IsaUJBQVh2ZCxPQUFxQixPQUFPQSxRQUxqQixHQ0F4QmloQyxFQUFvQkssRUFBSSxDQUFDbmpCLEVBQUtvakIsSUFBVWwrQyxPQUFPbEMsVUFBVStlLGVBQWVwYixLQUFLcTVCLEVBQUtvakIsR0NDbEZOLEVBQW9CN2QsRUFBS2pqQyxJQUNILG9CQUFYc1ksUUFBMEJBLE9BQU8wakMsYUFDMUM5NEMsT0FBT1gsZUFBZXZDLEVBQVNzWSxPQUFPMGpDLFlBQWEsQ0FBRTU2QyxNQUFPLFdBRTdEOEIsT0FBT1gsZUFBZXZDLEVBQVMsYUFBYyxDQUFFb0IsT0FBTyxLLG9nQkNMbENpZ0QsRUFDakIsV0FDVzV1QyxFQUNBN1EsR0FJZSxJQUhmMC9DLEVBR2UsdURBSFEsR0FDdkI3NUMsRUFFZSx1Q0FEZjg1QyxFQUNlLHVDQUFmenhCLEVBQWUsdURBQUYsR0FBRSxVQUxmLEtBQUFyZCxLQUNBLEtBQUE3USxPQUNBLEtBQUEwL0MsV0FDQSxLQUFBNzVDLFFBQ0EsS0FBQTg1QyxZQUNBLEtBQUF6eEIsU0NQZixTQUFTMHhCLEtBRU0sV0FBU0MsR0FDdEIsT0FBbUIsTUFBWkEsRUFBbUJELEVBQU8sV0FDL0IsT0FBT3BoRCxLQUFLc2hELGNBQWNELElDSmYsV0FBUzM5QixHQUN0QixNQUFvQixpQkFBTkEsR0FBa0IsV0FBWUEsRUFDeENBLEVBQ0EvaUIsTUFBTTBKLEtBQUtxWixHQ0hqQixTQUFTNjlCLElBQ1AsTUFBTyxHQUdNLFdBQVNGLEdBQ3RCLE9BQW1CLE1BQVpBLEVBQW1CRSxFQUFRLFdBQ2hDLE9BQU92aEQsS0FBS3doRCxpQkFBaUJILElDTmxCLFdBQVNBLEdBQ3RCLE9BQU8sV0FDTCxPQUFPcmhELEtBQUt5aEQsUUFBUUosSUFJakIsU0FBU0ssRUFBYUwsR0FDM0IsT0FBTyxTQUFTOThCLEdBQ2QsT0FBT0EsRUFBS2s5QixRQUFRSixJQ054QixJQUFJN3pDLEVBQU83TSxNQUFNQyxVQUFVNE0sS0FRM0IsU0FBU20wQyxJQUNQLE9BQU8zaEQsS0FBSzRoRCxrQkNUZCxJQUFJdjBDLEVBQVMxTSxNQUFNQyxVQUFVeU0sT0FFN0IsU0FBUzZ6QyxJQUNQLE9BQU9saEQsS0FBS2toRCxTQ0xDLFdBQVNXLEdBQ3RCLE9BQU8sSUFBSWxoRCxNQUFNa2hELEVBQU92Z0QsUUNNbkIsU0FBU3dnRCxFQUFVMzhCLEVBQVE0OEIsR0FDaEMvaEQsS0FBS2dpRCxjQUFnQjc4QixFQUFPNjhCLGNBQzVCaGlELEtBQUtpaUQsYUFBZTk4QixFQUFPODhCLGFBQzNCamlELEtBQUtraUQsTUFBUSxLQUNibGlELEtBQUttaUQsUUFBVWg5QixFQUNmbmxCLEtBQUtvaUQsU0FBV0wsRUNaSCxXQUFTcitCLEdBQ3RCLE9BQU8sV0FDTCxPQUFPQSxHQ0dYLFNBQVMyK0IsRUFBVWw5QixFQUFRbTlCLEVBQU9oOUIsRUFBT3U4QixFQUFReDhCLEVBQU01VCxHQVNyRCxJQVJBLElBQ0k4UyxFQURBdmMsRUFBSSxFQUVKdTZDLEVBQWNELEVBQU1oaEQsT0FDcEJraEQsRUFBYS93QyxFQUFLblEsT0FLZjBHLEVBQUl3NkMsSUFBY3g2QyxHQUNuQnVjLEVBQU8rOUIsRUFBTXQ2QyxLQUNmdWMsRUFBSzY5QixTQUFXM3dDLEVBQUt6SixHQUNyQjY1QyxFQUFPNzVDLEdBQUt1YyxHQUVaZSxFQUFNdGQsR0FBSyxJQUFJODVDLEVBQVUzOEIsRUFBUTFULEVBQUt6SixJQUsxQyxLQUFPQSxFQUFJdTZDLElBQWV2NkMsR0FDcEJ1YyxFQUFPKzlCLEVBQU10NkMsTUFDZnFkLEVBQUtyZCxHQUFLdWMsR0FLaEIsU0FBU2srQixFQUFRdDlCLEVBQVFtOUIsRUFBT2g5QixFQUFPdThCLEVBQVF4OEIsRUFBTTVULEVBQU14USxHQUN6RCxJQUFJK0csRUFDQXVjLEVBS0FtK0IsRUFKQUMsRUFBaUIsSUFBSUMsSUFDckJMLEVBQWNELEVBQU1oaEQsT0FDcEJraEQsRUFBYS93QyxFQUFLblEsT0FDbEJ1aEQsRUFBWSxJQUFJbGlELE1BQU00aEQsR0FLMUIsSUFBS3Y2QyxFQUFJLEVBQUdBLEVBQUl1NkMsSUFBZXY2QyxHQUN6QnVjLEVBQU8rOUIsRUFBTXQ2QyxNQUNmNjZDLEVBQVU3NkMsR0FBSzA2QyxFQUFXemhELEVBQUlzRCxLQUFLZ2dCLEVBQU1BLEVBQUs2OUIsU0FBVXA2QyxFQUFHczZDLEdBQVMsR0FDaEVLLEVBQWU1Z0QsSUFBSTJnRCxHQUNyQnI5QixFQUFLcmQsR0FBS3VjLEVBRVZvK0IsRUFBZTc4QyxJQUFJNDhDLEVBQVVuK0IsSUFRbkMsSUFBS3ZjLEVBQUksRUFBR0EsRUFBSXc2QyxJQUFjeDZDLEVBQzVCMDZDLEVBQVd6aEQsRUFBSXNELEtBQUs0Z0IsRUFBUTFULEVBQUt6SixHQUFJQSxFQUFHeUosR0FBUSxJQUM1QzhTLEVBQU9vK0IsRUFBZXgrQyxJQUFJdStDLEtBQzVCYixFQUFPNzVDLEdBQUt1YyxFQUNaQSxFQUFLNjlCLFNBQVczd0MsRUFBS3pKLEdBQ3JCMjZDLEVBQWVHLE9BQU9KLElBRXRCcDlCLEVBQU10ZCxHQUFLLElBQUk4NUMsRUFBVTM4QixFQUFRMVQsRUFBS3pKLElBSzFDLElBQUtBLEVBQUksRUFBR0EsRUFBSXU2QyxJQUFldjZDLEdBQ3hCdWMsRUFBTys5QixFQUFNdDZDLEtBQVEyNkMsRUFBZXgrQyxJQUFJMCtDLEVBQVU3NkMsTUFBUXVjLElBQzdEYyxFQUFLcmQsR0FBS3VjLEdBS2hCLFNBQVN3OUIsRUFBTXg5QixHQUNiLE9BQU9BLEVBQUs2OUIsU0N2RGQsU0FBU1csRUFBVWpuQyxFQUFHK0IsR0FDcEIsT0FBTy9CLEVBQUkrQixHQUFLLEVBQUkvQixFQUFJK0IsRUFBSSxFQUFJL0IsR0FBSytCLEVBQUksRUFBSTVWLElIUC9DNjVDLEVBQVVsaEQsVUFBWSxDQUNwQnlILFlBQWF5NUMsRUFDYnQ0QixZQUFhLFNBQVN3NUIsR0FBUyxPQUFPaGpELEtBQUttaUQsUUFBUWMsYUFBYUQsRUFBT2hqRCxLQUFLa2lELFFBQzVFZSxhQUFjLFNBQVNELEVBQU94M0MsR0FBUSxPQUFPeEwsS0FBS21pRCxRQUFRYyxhQUFhRCxFQUFPeDNDLElBQzlFODFDLGNBQWUsU0FBU0QsR0FBWSxPQUFPcmhELEtBQUttaUQsUUFBUWIsY0FBY0QsSUFDdEVHLGlCQUFrQixTQUFTSCxHQUFZLE9BQU9yaEQsS0FBS21pRCxRQUFRWCxpQkFBaUJILEtJcEJ2RSxJQUFJNkIsRUFBUSwrQkFFbkIsU0FDRUMsSUFBSyw2QkFDTEQsTUFBT0EsRUFDUEUsTUFBTywrQkFDUEMsSUFBSyx1Q0FDTEMsTUFBTyxpQ0NMTSxXQUFTOWhELEdBQ3RCLElBQUkraEQsRUFBUy9oRCxHQUFRLEdBQUl3RyxFQUFJdTdDLEVBQU9uM0MsUUFBUSxLQUU1QyxPQURJcEUsR0FBSyxHQUFxQyxXQUEvQnU3QyxFQUFTL2hELEVBQUtxRyxNQUFNLEVBQUdHLE1BQWlCeEcsRUFBT0EsRUFBS3FHLE1BQU1HLEVBQUksSUFDdEV3N0MsRUFBVzdqQyxlQUFlNGpDLEdBQVUsQ0FBQ3BxQixNQUFPcXFCLEVBQVdELEdBQVNFLE1BQU9qaUQsR0FBUUEsRUNIeEYsU0FBU2tpRCxFQUFXbGlELEdBQ2xCLE9BQU8sV0FDTHhCLEtBQUsyakQsZ0JBQWdCbmlELElBSXpCLFNBQVNvaUQsRUFBYUMsR0FDcEIsT0FBTyxXQUNMN2pELEtBQUs4akQsa0JBQWtCRCxFQUFTMXFCLE1BQU8wcUIsRUFBU0osUUFJcEQsU0FBU00sRUFBYXZpRCxFQUFNUixHQUMxQixPQUFPLFdBQ0xoQixLQUFLZ2tELGFBQWF4aUQsRUFBTVIsSUFJNUIsU0FBU2lqRCxFQUFlSixFQUFVN2lELEdBQ2hDLE9BQU8sV0FDTGhCLEtBQUtra0QsZUFBZUwsRUFBUzFxQixNQUFPMHFCLEVBQVNKLE1BQU96aUQsSUFJeEQsU0FBU21qRCxFQUFhM2lELEVBQU1SLEdBQzFCLE9BQU8sV0FDTCxJQUFJNjhCLEVBQUk3OEIsRUFBTWdOLE1BQU1oTyxLQUFNZ0osV0FDakIsTUFBTDYwQixFQUFXNzlCLEtBQUsyakQsZ0JBQWdCbmlELEdBQy9CeEIsS0FBS2drRCxhQUFheGlELEVBQU1xOEIsSUFJakMsU0FBU3VtQixFQUFlUCxFQUFVN2lELEdBQ2hDLE9BQU8sV0FDTCxJQUFJNjhCLEVBQUk3OEIsRUFBTWdOLE1BQU1oTyxLQUFNZ0osV0FDakIsTUFBTDYwQixFQUFXNzlCLEtBQUs4akQsa0JBQWtCRCxFQUFTMXFCLE1BQU8wcUIsRUFBU0osT0FDMUR6akQsS0FBS2trRCxlQUFlTCxFQUFTMXFCLE1BQU8wcUIsRUFBU0osTUFBTzVsQixJQ3RDOUMsV0FBU3RaLEdBQ3RCLE9BQVFBLEVBQUt5OUIsZUFBaUJ6OUIsRUFBS3k5QixjQUFjcUMsYUFDekM5L0IsRUFBS3BNLFVBQVlvTSxHQUNsQkEsRUFBSzgvQixZQ0RkLFNBQVNDLEVBQVk5aUQsR0FDbkIsT0FBTyxXQUNMeEIsS0FBS3NwQixNQUFNaTdCLGVBQWUvaUQsSUFJOUIsU0FBU2dqRCxFQUFjaGpELEVBQU1SLEVBQU95akQsR0FDbEMsT0FBTyxXQUNMemtELEtBQUtzcEIsTUFBTW83QixZQUFZbGpELEVBQU1SLEVBQU95akQsSUFJeEMsU0FBU0UsRUFBY25qRCxFQUFNUixFQUFPeWpELEdBQ2xDLE9BQU8sV0FDTCxJQUFJNW1CLEVBQUk3OEIsRUFBTWdOLE1BQU1oTyxLQUFNZ0osV0FDakIsTUFBTDYwQixFQUFXNzlCLEtBQUtzcEIsTUFBTWk3QixlQUFlL2lELEdBQ3BDeEIsS0FBS3NwQixNQUFNbzdCLFlBQVlsakQsRUFBTXE4QixFQUFHNG1CLElBYWxDLFNBQVNHLEVBQVdyZ0MsRUFBTS9pQixHQUMvQixPQUFPK2lCLEVBQUsrRSxNQUFNdTdCLGlCQUFpQnJqRCxJQUM1QixFQUFZK2lCLEdBQU11Z0MsaUJBQWlCdmdDLEVBQU0sTUFBTXNnQyxpQkFBaUJyakQsR0NqQ3pFLFNBQVN1akQsRUFBZXZqRCxHQUN0QixPQUFPLGtCQUNFeEIsS0FBS3dCLElBSWhCLFNBQVN3akQsRUFBaUJ4akQsRUFBTVIsR0FDOUIsT0FBTyxXQUNMaEIsS0FBS3dCLEdBQVFSLEdBSWpCLFNBQVNpa0QsRUFBaUJ6akQsRUFBTVIsR0FDOUIsT0FBTyxXQUNMLElBQUk2OEIsRUFBSTc4QixFQUFNZ04sTUFBTWhPLEtBQU1nSixXQUNqQixNQUFMNjBCLFNBQWtCNzlCLEtBQUt3QixHQUN0QnhCLEtBQUt3QixHQUFRcThCLEdDaEJ0QixTQUFTcW5CLEVBQVd2d0MsR0FDbEIsT0FBT0EsRUFBT29TLE9BQU9sTSxNQUFNLFNBRzdCLFNBQVNzcUMsRUFBVTVnQyxHQUNqQixPQUFPQSxFQUFLNGdDLFdBQWEsSUFBSUMsRUFBVTdnQyxHQUd6QyxTQUFTNmdDLEVBQVU3Z0MsR0FDakJ2a0IsS0FBS3FsRCxNQUFROWdDLEVBQ2J2a0IsS0FBS3NsRCxPQUFTSixFQUFXM2dDLEVBQUtnaEMsYUFBYSxVQUFZLElBdUJ6RCxTQUFTQyxFQUFXamhDLEVBQU1nRyxHQUV4QixJQURBLElBQUlwTSxFQUFPZ25DLEVBQVU1Z0MsR0FBT3ZjLEdBQUssRUFBR3NYLEVBQUlpTCxFQUFNanBCLFNBQ3JDMEcsRUFBSXNYLEdBQUduQixFQUFLeE0sSUFBSTRZLEVBQU12aUIsSUFHakMsU0FBU3k5QyxFQUFjbGhDLEVBQU1nRyxHQUUzQixJQURBLElBQUlwTSxFQUFPZ25DLEVBQVU1Z0MsR0FBT3ZjLEdBQUssRUFBR3NYLEVBQUlpTCxFQUFNanBCLFNBQ3JDMEcsRUFBSXNYLEdBQUduQixFQUFLdW5DLE9BQU9uN0IsRUFBTXZpQixJQUdwQyxTQUFTMjlDLEVBQVlwN0IsR0FDbkIsT0FBTyxXQUNMaTdCLEVBQVd4bEQsS0FBTXVxQixJQUlyQixTQUFTcTdCLEVBQWFyN0IsR0FDcEIsT0FBTyxXQUNMazdCLEVBQWN6bEQsS0FBTXVxQixJQUl4QixTQUFTczdCLEVBQWdCdDdCLEVBQU92cEIsR0FDOUIsT0FBTyxZQUNKQSxFQUFNZ04sTUFBTWhPLEtBQU1nSixXQUFhdzhDLEVBQWFDLEdBQWV6bEQsS0FBTXVxQixJQ3pEdEUsU0FBU3U3QixJQUNQOWxELEtBQUsrbEQsWUFBYyxHQUdyQixTQUFTQyxFQUFhaGxELEdBQ3BCLE9BQU8sV0FDTGhCLEtBQUsrbEQsWUFBYy9rRCxHQUl2QixTQUFTaWxELEVBQWFqbEQsR0FDcEIsT0FBTyxXQUNMLElBQUk2OEIsRUFBSTc4QixFQUFNZ04sTUFBTWhPLEtBQU1nSixXQUMxQmhKLEtBQUsrbEQsWUFBbUIsTUFBTGxvQixFQUFZLEdBQUtBLEdDYnhDLFNBQVNxb0IsSUFDUGxtRCxLQUFLbW1ELFVBQVksR0FHbkIsU0FBU0MsRUFBYXBsRCxHQUNwQixPQUFPLFdBQ0xoQixLQUFLbW1ELFVBQVlubEQsR0FJckIsU0FBU3FsRCxFQUFhcmxELEdBQ3BCLE9BQU8sV0FDTCxJQUFJNjhCLEVBQUk3OEIsRUFBTWdOLE1BQU1oTyxLQUFNZ0osV0FDMUJoSixLQUFLbW1ELFVBQWlCLE1BQUx0b0IsRUFBWSxHQUFLQSxHQ2J0QyxTQUFTeW9CLElBQ0h0bUQsS0FBS3VtRCxhQUFhdm1ELEtBQUt3bUQsV0FBV2g5QixZQUFZeHBCLE1DRHBELFNBQVN5bUQsS0FDSHptRCxLQUFLMG1ELGlCQUFpQjFtRCxLQUFLd21ELFdBQVd2RCxhQUFhampELEtBQU1BLEtBQUt3bUQsV0FBV0csWUNFL0UsU0FBU0MsR0FBZXBsRCxHQUN0QixPQUFPLFdBQ0wsSUFBSTJXLEVBQVduWSxLQUFLZ2lELGNBQ2hCNkUsRUFBTTdtRCxLQUFLaWlELGFBQ2YsT0FBTzRFLElBQVEzRCxHQUFTL3FDLEVBQVMydUMsZ0JBQWdCN0UsZUFBaUJpQixFQUM1RC9xQyxFQUFTRSxjQUFjN1csR0FDdkIyVyxFQUFTNHVDLGdCQUFnQkYsRUFBS3JsRCxJQUl4QyxTQUFTd2xELEdBQWFuRCxHQUNwQixPQUFPLFdBQ0wsT0FBTzdqRCxLQUFLZ2lELGNBQWMrRSxnQkFBZ0JsRCxFQUFTMXFCLE1BQU8wcUIsRUFBU0osUUFJeEQsWUFBU2ppRCxHQUN0QixJQUFJcWlELEVBQVdybEMsRUFBVWhkLEdBQ3pCLE9BQVFxaUQsRUFBU0osTUFDWHVELEdBQ0FKLElBQWdCL0MsR0NwQnhCLFNBQVNvRCxLQUNQLE9BQU8sS0NKVCxTQUFTdkIsS0FDUCxJQUFJdmdDLEVBQVNubEIsS0FBS3dtRCxXQUNkcmhDLEdBQVFBLEVBQU82TSxZQUFZaHlCLE1DRmpDLFNBQVNrbkQsS0FDUCxJQUFJQyxFQUFRbm5ELEtBQUtvbkQsV0FBVSxHQUFRamlDLEVBQVNubEIsS0FBS3dtRCxXQUNqRCxPQUFPcmhDLEVBQVNBLEVBQU84OUIsYUFBYWtFLEVBQU9ubkQsS0FBS3VtRCxhQUFlWSxFQUdqRSxTQUFTRSxLQUNQLElBQUlGLEVBQVFubkQsS0FBS29uRCxXQUFVLEdBQU9qaUMsRUFBU25sQixLQUFLd21ELFdBQ2hELE9BQU9yaEMsRUFBU0EsRUFBTzg5QixhQUFha0UsRUFBT25uRCxLQUFLdW1ELGFBQWVZLEVDRGpFLFNBQVNHLEdBQWVDLEdBQ3RCLE9BQU9BLEVBQVV4Z0MsT0FBT2xNLE1BQU0sU0FBU3pOLEtBQUksU0FBUzZpQixHQUNsRCxJQUFJenVCLEVBQU8sR0FBSXdHLEVBQUlpb0IsRUFBRTdqQixRQUFRLEtBRTdCLE9BRElwRSxHQUFLLElBQUd4RyxFQUFPeXVCLEVBQUVwb0IsTUFBTUcsRUFBSSxHQUFJaW9CLEVBQUlBLEVBQUVwb0IsTUFBTSxFQUFHRyxJQUMzQyxDQUFDOEksS0FBTW1mLEVBQUd6dUIsS0FBTUEsTUFJM0IsU0FBU2dtRCxHQUFTQyxHQUNoQixPQUFPLFdBQ0wsSUFBSUMsRUFBSzFuRCxLQUFLMm5ELEtBQ2QsR0FBS0QsRUFBTCxDQUNBLElBQUssSUFBa0MzRyxFQUE5QjM0QyxFQUFJLEVBQUdKLEdBQUssRUFBR2tYLEVBQUl3b0MsRUFBR3BtRCxPQUFXOEcsRUFBSThXLElBQUs5VyxFQUM3QzI0QyxFQUFJMkcsRUFBR3QvQyxHQUFNcS9DLEVBQVMzMkMsTUFBUWl3QyxFQUFFandDLE9BQVMyMkMsRUFBUzMyQyxNQUFTaXdDLEVBQUV2L0MsT0FBU2ltRCxFQUFTam1ELEtBR2pGa21ELElBQUsxL0MsR0FBSys0QyxFQUZWL2dELEtBQUs0bkQsb0JBQW9CN0csRUFBRWp3QyxLQUFNaXdDLEVBQUUxdkIsU0FBVTB2QixFQUFFL2xDLFdBSzdDaFQsRUFBRzAvQyxFQUFHcG1ELE9BQVMwRyxTQUNUaEksS0FBSzJuRCxPQUlyQixTQUFTRSxHQUFNSixFQUFVem1ELEVBQU9nYSxHQUM5QixPQUFPLFdBQ0wsSUFBb0IrbEMsRUFBaEIyRyxFQUFLMW5ELEtBQUsybkQsS0FBU3QyQixFQWhDM0IsU0FBeUJBLEdBQ3ZCLE9BQU8sU0FBU0MsR0FDZEQsRUFBUzlzQixLQUFLdkUsS0FBTXN4QixFQUFPdHhCLEtBQUtvaUQsV0E4QkUwRixDQUFnQjltRCxHQUNsRCxHQUFJMG1ELEVBQUksSUFBSyxJQUFJdC9DLEVBQUksRUFBRzhXLEVBQUl3b0MsRUFBR3BtRCxPQUFROEcsRUFBSThXLElBQUs5VyxFQUM5QyxJQUFLMjRDLEVBQUkyRyxFQUFHdC9DLElBQUkwSSxPQUFTMjJDLEVBQVMzMkMsTUFBUWl3QyxFQUFFdi9DLE9BQVNpbUQsRUFBU2ptRCxLQUk1RCxPQUhBeEIsS0FBSzRuRCxvQkFBb0I3RyxFQUFFandDLEtBQU1pd0MsRUFBRTF2QixTQUFVMHZCLEVBQUUvbEMsU0FDL0NoYixLQUFLOHhCLGlCQUFpQml2QixFQUFFandDLEtBQU1pd0MsRUFBRTF2QixTQUFXQSxFQUFVMHZCLEVBQUUvbEMsUUFBVUEsUUFDakUrbEMsRUFBRS8vQyxNQUFRQSxHQUlkaEIsS0FBSzh4QixpQkFBaUIyMUIsRUFBUzMyQyxLQUFNdWdCLEVBQVVyVyxHQUMvQytsQyxFQUFJLENBQUNqd0MsS0FBTTIyQyxFQUFTMzJDLEtBQU10UCxLQUFNaW1ELEVBQVNqbUQsS0FBTVIsTUFBT0EsRUFBT3F3QixTQUFVQSxFQUFVclcsUUFBU0EsR0FDckYwc0MsRUFDQUEsRUFBR243QyxLQUFLdzBDLEdBREovZ0QsS0FBSzJuRCxLQUFPLENBQUM1RyxJQ3pDMUIsU0FBU2pnQixHQUFjdmMsRUFBTXpULEVBQU13aEMsR0FDakMsSUFBSTd5QixFQUFTLEVBQVk4RSxHQUNyQitNLEVBQVE3UixFQUFPc29DLFlBRUUsbUJBQVZ6MkIsRUFDVEEsRUFBUSxJQUFJQSxFQUFNeGdCLEVBQU13aEMsSUFFeEJoaEIsRUFBUTdSLEVBQU90SCxTQUFTMG9CLFlBQVksU0FDaEN5UixHQUFRaGhCLEVBQU00USxVQUFVcHhCLEVBQU13aEMsRUFBTzBWLFFBQVMxVixFQUFPMlYsWUFBYTMyQixFQUFNNDJCLE9BQVM1VixFQUFPNFYsUUFDdkY1MkIsRUFBTTRRLFVBQVVweEIsR0FBTSxHQUFPLElBR3BDeVQsRUFBS3VjLGNBQWN4UCxHQUdyQixTQUFTNjJCLEdBQWlCcjNDLEVBQU13aEMsR0FDOUIsT0FBTyxXQUNMLE9BQU94UixHQUFjOWdDLEtBQU04USxFQUFNd2hDLElBSXJDLFNBQVM4VixHQUFpQnQzQyxFQUFNd2hDLEdBQzlCLE9BQU8sV0FDTCxPQUFPeFIsR0FBYzlnQyxLQUFNOFEsRUFBTXdoQyxFQUFPdGtDLE1BQU1oTyxLQUFNZ0osYVZaeERvOEMsRUFBVXhrRCxVQUFZLENBQ3BCK1EsSUFBSyxTQUFTblEsR0FDSnhCLEtBQUtzbEQsT0FBT2w1QyxRQUFRNUssR0FDcEIsSUFDTnhCLEtBQUtzbEQsT0FBTy80QyxLQUFLL0ssR0FDakJ4QixLQUFLcWxELE1BQU1yQixhQUFhLFFBQVNoa0QsS0FBS3NsRCxPQUFPbG5DLEtBQUssUUFHdERzbkMsT0FBUSxTQUFTbGtELEdBQ2YsSUFBSXdHLEVBQUloSSxLQUFLc2xELE9BQU9sNUMsUUFBUTVLLEdBQ3hCd0csR0FBSyxJQUNQaEksS0FBS3NsRCxPQUFPM3lDLE9BQU8zSyxFQUFHLEdBQ3RCaEksS0FBS3FsRCxNQUFNckIsYUFBYSxRQUFTaGtELEtBQUtzbEQsT0FBT2xuQyxLQUFLLFFBR3REaXFDLFNBQVUsU0FBUzdtRCxHQUNqQixPQUFPeEIsS0FBS3NsRCxPQUFPbDVDLFFBQVE1SyxJQUFTLElXTWpDLElBQUk5QixHQUFPLENBQUMsTUFFWixTQUFTNG9ELEdBQVV6c0MsRUFBUTBzQyxHQUNoQ3ZvRCxLQUFLd29ELFFBQVUzc0MsRUFDZjdiLEtBQUt5b0QsU0FBV0YsRUFHbEIsU0FBU0csS0FDUCxPQUFPLElBQUlKLEdBQVUsQ0FBQyxDQUFDbndDLFNBQVMydUMsa0JBQW1CcG5ELElBT3JENG9ELEdBQVUxbkQsVUFBWThuRCxHQUFVOW5ELFVBQVksQ0FDMUN5SCxZQUFhaWdELEdBQ2JLLE9DakRhLFNBQVNBLEdBQ0EsbUJBQVhBLElBQXVCQSxFQUFTdEgsRUFBU3NILElBRXBELElBQUssSUFBSTlzQyxFQUFTN2IsS0FBS3dvRCxRQUFTdHBDLEVBQUlyRCxFQUFPdmEsT0FBUXNuRCxFQUFZLElBQUlqb0QsTUFBTXVlLEdBQUk5VyxFQUFJLEVBQUdBLEVBQUk4VyxJQUFLOVcsRUFDM0YsSUFBSyxJQUFpRm1jLEVBQU1za0MsRUFBbkZ2RyxFQUFRem1DLEVBQU96VCxHQUFJa1gsRUFBSWdqQyxFQUFNaGhELE9BQVF3bkQsRUFBV0YsRUFBVXhnRCxHQUFLLElBQUl6SCxNQUFNMmUsR0FBbUJ0WCxFQUFJLEVBQUdBLEVBQUlzWCxJQUFLdFgsR0FDOUd1YyxFQUFPKzlCLEVBQU10NkMsTUFBUTZnRCxFQUFVRixFQUFPcGtELEtBQUtnZ0IsRUFBTUEsRUFBSzY5QixTQUFVcDZDLEVBQUdzNkMsTUFDbEUsYUFBYy85QixJQUFNc2tDLEVBQVF6RyxTQUFXNzlCLEVBQUs2OUIsVUFDaEQwRyxFQUFTOWdELEdBQUs2Z0QsR0FLcEIsT0FBTyxJQUFJUCxHQUFVTSxFQUFXNW9ELEtBQUt5b0QsV0RzQ3JDTSxVRTFDYSxTQUFTSixHQUNZQSxFQUFaLG1CQUFYQSxFQVJiLFNBQWtCQSxHQUNoQixPQUFPLFdBQ0wsSUFBSXJHLEVBQVFxRyxFQUFPMzZDLE1BQU1oTyxLQUFNZ0osV0FDL0IsT0FBZ0IsTUFBVHM1QyxFQUFnQixHQUFLbDBDLEVBQU1rMEMsSUFLTzBHLENBQVNMLEdBQ3RDTSxFQUFZTixHQUUxQixJQUFLLElBQUk5c0MsRUFBUzdiLEtBQUt3b0QsUUFBU3RwQyxFQUFJckQsRUFBT3ZhLE9BQVFzbkQsRUFBWSxHQUFJTCxFQUFVLEdBQUluZ0QsRUFBSSxFQUFHQSxFQUFJOFcsSUFBSzlXLEVBQy9GLElBQUssSUFBeUNtYyxFQUFyQys5QixFQUFRem1DLEVBQU96VCxHQUFJa1gsRUFBSWdqQyxFQUFNaGhELE9BQWMwRyxFQUFJLEVBQUdBLEVBQUlzWCxJQUFLdFgsR0FDOUR1YyxFQUFPKzlCLEVBQU10NkMsTUFDZjRnRCxFQUFVcjhDLEtBQUtvOEMsRUFBT3BrRCxLQUFLZ2dCLEVBQU1BLEVBQUs2OUIsU0FBVXA2QyxFQUFHczZDLElBQ25EaUcsRUFBUWg4QyxLQUFLZ1ksSUFLbkIsT0FBTyxJQUFJK2pDLEdBQVVNLEVBQVdMLElGOEJoQ1csWXhCeENhLFNBQVN6dUMsR0FDdEIsT0FBT3phLEtBQUsyb0QsT0FBZ0IsTUFBVGx1QyxFQUFnQmtuQyxFQVhyQyxTQUFtQmxuQyxHQUNqQixPQUFPLFdBQ0wsT0FBT2pOLEVBQUtqSixLQUFLdkUsS0FBS2toRCxTQUFVem1DLElBVTVCMHVDLENBQTJCLG1CQUFWMXVDLEVBQXVCQSxFQUFRaW5DLEVBQWFqbkMsTXdCdUNuRTJ1QyxldkJ6Q2EsU0FBUzN1QyxHQUN0QixPQUFPemEsS0FBSytvRCxVQUFtQixNQUFUdHVDLEVBQWdCeW1DLEVBUHhDLFNBQXdCem1DLEdBQ3RCLE9BQU8sV0FDTCxPQUFPcE4sRUFBTzlJLEtBQUt2RSxLQUFLa2hELFNBQVV6bUMsSUFNOUI0dUMsQ0FBZ0MsbUJBQVY1dUMsRUFBdUJBLEVBQVFpbkMsRUFBYWpuQyxNdUJ3Q3hFcE4sT0dyRGEsU0FBU29OLEdBQ0QsbUJBQVZBLElBQXNCQSxFQUFRc3RCLEVBQVF0dEIsSUFFakQsSUFBSyxJQUFJb0IsRUFBUzdiLEtBQUt3b0QsUUFBU3RwQyxFQUFJckQsRUFBT3ZhLE9BQVFzbkQsRUFBWSxJQUFJam9ELE1BQU11ZSxHQUFJOVcsRUFBSSxFQUFHQSxFQUFJOFcsSUFBSzlXLEVBQzNGLElBQUssSUFBdUVtYyxFQUFuRSs5QixFQUFRem1DLEVBQU96VCxHQUFJa1gsRUFBSWdqQyxFQUFNaGhELE9BQVF3bkQsRUFBV0YsRUFBVXhnRCxHQUFLLEdBQVVKLEVBQUksRUFBR0EsRUFBSXNYLElBQUt0WCxHQUMzRnVjLEVBQU8rOUIsRUFBTXQ2QyxLQUFPeVMsRUFBTWxXLEtBQUtnZ0IsRUFBTUEsRUFBSzY5QixTQUFVcDZDLEVBQUdzNkMsSUFDMUR3RyxFQUFTdjhDLEtBQUtnWSxHQUtwQixPQUFPLElBQUkrakMsR0FBVU0sRUFBVzVvRCxLQUFLeW9ELFdIMkNyQ2gzQyxLbkJzQmEsU0FBU3pRLEVBQU9DLEdBQzdCLElBQUsrSCxVQUFVMUgsT0FBUSxPQUFPWCxNQUFNMEosS0FBS3JLLEtBQU0raEQsR0FFL0MsSUFBSWgzQyxFQUFPOUosRUFBTXdoRCxFQUFVSixFQUN2QmtHLEVBQVV2b0QsS0FBS3lvRCxTQUNmNXNDLEVBQVM3YixLQUFLd29ELFFBRUcsbUJBQVZ4bkQsSUFBc0JBLEVBQVEsRUFBU0EsSUFFbEQsSUFBSyxJQUFJa2UsRUFBSXJELEVBQU92YSxPQUFRdWdELEVBQVMsSUFBSWxoRCxNQUFNdWUsR0FBSW9HLEVBQVEsSUFBSTNrQixNQUFNdWUsR0FBSW1HLEVBQU8sSUFBSTFrQixNQUFNdWUsR0FBSTlXLEVBQUksRUFBR0EsRUFBSThXLElBQUs5VyxFQUFHLENBQy9HLElBQUkrYyxFQUFTb2pDLEVBQVFuZ0QsR0FDakJrNkMsRUFBUXptQyxFQUFPelQsR0FDZm02QyxFQUFjRCxFQUFNaGhELE9BQ3BCbVEsRUFBT3JELEVBQU1wTixFQUFNdUQsS0FBSzRnQixFQUFRQSxHQUFVQSxFQUFPaTlCLFNBQVVoNkMsRUFBR21nRCxJQUM5RC9GLEVBQWEvd0MsRUFBS25RLE9BQ2xCZ29ELEVBQWFoa0MsRUFBTWxkLEdBQUssSUFBSXpILE1BQU02aEQsR0FDbEMrRyxFQUFjMUgsRUFBT3o1QyxHQUFLLElBQUl6SCxNQUFNNmhELEdBQ3BDZ0gsRUFBWW5rQyxFQUFLamQsR0FBSyxJQUFJekgsTUFBTTRoRCxHQUVwQ3gzQyxFQUFLb2EsRUFBUW05QixFQUFPZ0gsRUFBWUMsRUFBYUMsRUFBVy8zQyxFQUFNeFEsR0FLOUQsSUFBSyxJQUFvQmtRLEVBQVUzRixFQUExQmkrQyxFQUFLLEVBQUdDLEVBQUssRUFBbUJELEVBQUtqSCxJQUFjaUgsRUFDMUQsR0FBSXQ0QyxFQUFXbTRDLEVBQVdHLEdBQUssQ0FFN0IsSUFESUEsR0FBTUMsSUFBSUEsRUFBS0QsRUFBSyxLQUNmaitDLEVBQU8rOUMsRUFBWUcsT0FBVUEsRUFBS2xILElBQzNDcnhDLEVBQVMrd0MsTUFBUTEyQyxHQUFRLE1BUS9CLE9BSEFxMkMsRUFBUyxJQUFJeUcsR0FBVXpHLEVBQVEwRyxJQUN4Qm9CLE9BQVNya0MsRUFDaEJ1OEIsRUFBTytILE1BQVF2a0MsRUFDUnc4QixHbUJ6RFB2OEIsTXJCdkRhLFdBQ2IsT0FBTyxJQUFJZ2pDLEdBQVV0b0QsS0FBSzJwRCxRQUFVM3BELEtBQUt3b0QsUUFBUXA3QyxJQUFJeThDLEdBQVM3cEQsS0FBS3lvRCxXcUJ1RG5FcGpDLEtJeERhLFdBQ2IsT0FBTyxJQUFJaWpDLEdBQVV0b0QsS0FBSzRwRCxPQUFTNXBELEtBQUt3b0QsUUFBUXA3QyxJQUFJeThDLEdBQVM3cEQsS0FBS3lvRCxXSndEbEVycUMsS0s1RGEsU0FBUzByQyxFQUFTQyxFQUFVQyxHQUN6QyxJQUFJMWtDLEVBQVF0bEIsS0FBS3NsQixRQUFTdThCLEVBQVM3aEQsS0FBTXFsQixFQUFPcmxCLEtBQUtxbEIsT0FJckQsT0FIQUMsRUFBMkIsbUJBQVp3a0MsRUFBeUJBLEVBQVF4a0MsR0FBU0EsRUFBTXN0QixPQUFPa1gsRUFBVSxJQUNoRSxNQUFaQyxJQUFrQmxJLEVBQVNrSSxFQUFTbEksSUFDMUIsTUFBVm1JLEVBQWdCM2tDLEVBQUtxZ0MsU0FBZXNFLEVBQU8za0MsR0FDeENDLEdBQVN1OEIsRUFBU3Y4QixFQUFNMmtDLE1BQU1wSSxHQUFRcUksUUFBVXJJLEdMd0R2RG9JLE1NM0RhLFNBQVN2QixHQUN0QixLQUFNQSxhQUFxQkosSUFBWSxNQUFNLElBQUkzekIsTUFBTSxpQkFFdkQsSUFBSyxJQUFJdzFCLEVBQVVucUQsS0FBS3dvRCxRQUFTNEIsRUFBVTFCLEVBQVVGLFFBQVM2QixFQUFLRixFQUFRN29ELE9BQVFncEQsRUFBS0YsRUFBUTlvRCxPQUFRNGQsRUFBSW5WLEtBQUtELElBQUl1Z0QsRUFBSUMsR0FBS0MsRUFBUyxJQUFJNXBELE1BQU0wcEQsR0FBS2ppRCxFQUFJLEVBQUdBLEVBQUk4VyxJQUFLOVcsRUFDcEssSUFBSyxJQUFtR21jLEVBQS9GaW1DLEVBQVNMLEVBQVEvaEQsR0FBSXFpRCxFQUFTTCxFQUFRaGlELEdBQUlrWCxFQUFJa3JDLEVBQU9scEQsT0FBUTJvRCxFQUFRTSxFQUFPbmlELEdBQUssSUFBSXpILE1BQU0yZSxHQUFVdFgsRUFBSSxFQUFHQSxFQUFJc1gsSUFBS3RYLEdBQ3hIdWMsRUFBT2ltQyxFQUFPeGlELElBQU15aUQsRUFBT3ppRCxNQUM3QmlpRCxFQUFNamlELEdBQUt1YyxHQUtqQixLQUFPbmMsRUFBSWlpRCxJQUFNamlELEVBQ2ZtaUQsRUFBT25pRCxHQUFLK2hELEVBQVEvaEQsR0FHdEIsT0FBTyxJQUFJa2dELEdBQVVpQyxFQUFRdnFELEtBQUt5b0QsV042Q2xDQyxVQWhCRixXQUNFLE9BQU8xb0QsTUFnQlBrcUQsTU8vRGEsV0FFYixJQUFLLElBQUlydUMsRUFBUzdiLEtBQUt3b0QsUUFBU3BnRCxHQUFLLEVBQUc4VyxFQUFJckQsRUFBT3ZhLFNBQVU4RyxFQUFJOFcsR0FDL0QsSUFBSyxJQUE4RHFGLEVBQTFEKzlCLEVBQVF6bUMsRUFBT3pULEdBQUlKLEVBQUlzNkMsRUFBTWhoRCxPQUFTLEVBQUdrSyxFQUFPODJDLEVBQU10NkMsS0FBWUEsR0FBSyxJQUMxRXVjLEVBQU8rOUIsRUFBTXQ2QyxNQUNYd0QsR0FBNkMsRUFBckMrWSxFQUFLbW1DLHdCQUF3QmwvQyxJQUFXQSxFQUFLZzdDLFdBQVd2RCxhQUFhMStCLEVBQU0vWSxHQUN2RkEsRUFBTytZLEdBS2IsT0FBT3ZrQixNUHFEUG1tQixLbEI5RGEsU0FBU3drQyxHQUd0QixTQUFTQyxFQUFZOXVDLEVBQUcrQixHQUN0QixPQUFPL0IsR0FBSytCLEVBQUk4c0MsRUFBUTd1QyxFQUFFc21DLFNBQVV2a0MsRUFBRXVrQyxXQUFhdG1DLEdBQUsrQixFQUhyRDhzQyxJQUFTQSxFQUFVNUgsR0FNeEIsSUFBSyxJQUFJbG5DLEVBQVM3YixLQUFLd29ELFFBQVN0cEMsRUFBSXJELEVBQU92YSxPQUFRdXBELEVBQWEsSUFBSWxxRCxNQUFNdWUsR0FBSTlXLEVBQUksRUFBR0EsRUFBSThXLElBQUs5VyxFQUFHLENBQy9GLElBQUssSUFBbUZtYyxFQUEvRSs5QixFQUFRem1DLEVBQU96VCxHQUFJa1gsRUFBSWdqQyxFQUFNaGhELE9BQVF3cEQsRUFBWUQsRUFBV3ppRCxHQUFLLElBQUl6SCxNQUFNMmUsR0FBVXRYLEVBQUksRUFBR0EsRUFBSXNYLElBQUt0WCxHQUN4R3VjLEVBQU8rOUIsRUFBTXQ2QyxNQUNmOGlELEVBQVU5aUQsR0FBS3VjLEdBR25CdW1DLEVBQVUza0MsS0FBS3lrQyxHQUdqQixPQUFPLElBQUl0QyxHQUFVdUMsRUFBWTdxRCxLQUFLeW9ELFVBQVV5QixTa0IrQ2hEM2xELEtRakVhLFdBQ2IsSUFBSTB1QyxFQUFXanFDLFVBQVUsR0FHekIsT0FGQUEsVUFBVSxHQUFLaEosS0FDZml6QyxFQUFTamxDLE1BQU0sS0FBTWhGLFdBQ2RoSixNUjhEUCtxRCxNU2xFYSxXQUNiLE9BQU9wcUQsTUFBTTBKLEtBQUtySyxPVGtFbEJ1a0IsS1VuRWEsV0FFYixJQUFLLElBQUkxSSxFQUFTN2IsS0FBS3dvRCxRQUFTcGdELEVBQUksRUFBRzhXLEVBQUlyRCxFQUFPdmEsT0FBUThHLEVBQUk4VyxJQUFLOVcsRUFDakUsSUFBSyxJQUFJazZDLEVBQVF6bUMsRUFBT3pULEdBQUlKLEVBQUksRUFBR3NYLEVBQUlnakMsRUFBTWhoRCxPQUFRMEcsRUFBSXNYLElBQUt0WCxFQUFHLENBQy9ELElBQUl1YyxFQUFPKzlCLEVBQU10NkMsR0FDakIsR0FBSXVjLEVBQU0sT0FBT0EsRUFJckIsT0FBTyxNVjJEUHRULEtXcEVhLFdBQ2IsSUFBSUEsRUFBTyxFQUNYLElBQUssTUFBTXNULEtBQVF2a0IsT0FBUWlSLEVBQzNCLE9BQU9BLEdYa0VQc3dDLE1ZckVhLFdBQ2IsT0FBUXZoRCxLQUFLdWtCLFFacUVieW1DLEthdEVhLFNBQVMvWCxHQUV0QixJQUFLLElBQUlwM0IsRUFBUzdiLEtBQUt3b0QsUUFBU3BnRCxFQUFJLEVBQUc4VyxFQUFJckQsRUFBT3ZhLE9BQVE4RyxFQUFJOFcsSUFBSzlXLEVBQ2pFLElBQUssSUFBZ0RtYyxFQUE1Qys5QixFQUFRem1DLEVBQU96VCxHQUFJSixFQUFJLEVBQUdzWCxFQUFJZ2pDLEVBQU1oaEQsT0FBYzBHLEVBQUlzWCxJQUFLdFgsR0FDOUR1YyxFQUFPKzlCLEVBQU10NkMsS0FBSWlyQyxFQUFTMXVDLEtBQUtnZ0IsRUFBTUEsRUFBSzY5QixTQUFVcDZDLEVBQUdzNkMsR0FJL0QsT0FBT3RpRCxNYitEUGlyRCxLZjdCYSxTQUFTenBELEVBQU1SLEdBQzVCLElBQUk2aUQsRUFBV3JsQyxFQUFVaGQsR0FFekIsR0FBSXdILFVBQVUxSCxPQUFTLEVBQUcsQ0FDeEIsSUFBSWlqQixFQUFPdmtCLEtBQUt1a0IsT0FDaEIsT0FBT3MvQixFQUFTSixNQUNWbC9CLEVBQUsybUMsZUFBZXJILEVBQVMxcUIsTUFBTzBxQixFQUFTSixPQUM3Q2wvQixFQUFLZ2hDLGFBQWExQixHQUcxQixPQUFPN2pELEtBQUtnckQsTUFBZSxNQUFUaHFELEVBQ1g2aUQsRUFBU0osTUFBUUcsRUFBZUYsRUFBZ0MsbUJBQVYxaUQsRUFDdEQ2aUQsRUFBU0osTUFBUVcsRUFBaUJELEVBQ2xDTixFQUFTSixNQUFRUSxFQUFpQkYsR0FBZ0JGLEVBQVU3aUQsS2VpQm5Fc29CLE1ibERhLFNBQVM5bkIsRUFBTVIsRUFBT3lqRCxHQUNuQyxPQUFPejdDLFVBQVUxSCxPQUFTLEVBQ3BCdEIsS0FBS2dyRCxNQUFlLE1BQVRocUQsRUFDTHNqRCxFQUErQixtQkFBVnRqRCxFQUNyQjJqRCxFQUNBSCxHQUFlaGpELEVBQU1SLEVBQW1CLE1BQVp5akQsRUFBbUIsR0FBS0EsSUFDMURHLEVBQVc1a0QsS0FBS3VrQixPQUFRL2lCLElhNkM5Qm9ELFNackRhLFNBQVNwRCxFQUFNUixHQUM1QixPQUFPZ0ksVUFBVTFILE9BQVMsRUFDcEJ0QixLQUFLZ3JELE1BQWUsTUFBVGhxRCxFQUNQK2pELEVBQWtDLG1CQUFWL2pELEVBQ3hCaWtELEVBQ0FELEdBQWtCeGpELEVBQU1SLElBQzVCaEIsS0FBS3VrQixPQUFPL2lCLElZZ0RsQjJwRCxRWGJhLFNBQVMzcEQsRUFBTVIsR0FDNUIsSUFBSXVwQixFQUFRMjZCLEVBQVcxakQsRUFBTyxJQUU5QixHQUFJd0gsVUFBVTFILE9BQVMsRUFBRyxDQUV4QixJQURBLElBQUk2YyxFQUFPZ25DLEVBQVVubEQsS0FBS3VrQixRQUFTdmMsR0FBSyxFQUFHc1gsRUFBSWlMLEVBQU1qcEIsU0FDNUMwRyxFQUFJc1gsT0FBUW5CLEVBQUtrcUMsU0FBUzk5QixFQUFNdmlCLElBQUssT0FBTyxFQUNyRCxPQUFPLEVBR1QsT0FBT2hJLEtBQUtnckQsTUFBdUIsbUJBQVZocUQsRUFDbkI2a0QsRUFBa0I3a0QsRUFDbEIya0QsRUFDQUMsR0FBY3I3QixFQUFPdnBCLEtXRTNCb3FELEtWMURhLFNBQVNwcUQsR0FDdEIsT0FBT2dJLFVBQVUxSCxPQUNYdEIsS0FBS2dyRCxLQUFjLE1BQVRocUQsRUFDTjhrRCxHQUErQixtQkFBVjlrRCxFQUNyQmlsRCxFQUNBRCxHQUFjaGxELElBQ2xCaEIsS0FBS3VrQixPQUFPd2hDLGFVcURsQno5QixLVDNEYSxTQUFTdG5CLEdBQ3RCLE9BQU9nSSxVQUFVMUgsT0FDWHRCLEtBQUtnckQsS0FBYyxNQUFUaHFELEVBQ05rbEQsR0FBK0IsbUJBQVZsbEQsRUFDckJxbEQsRUFDQUQsR0FBY3BsRCxJQUNsQmhCLEtBQUt1a0IsT0FBTzRoQyxXU3NEbEJHLE1SekVhLFdBQ2IsT0FBT3RtRCxLQUFLZ3JELEtBQUsxRSxJUXlFakJHLE1QMUVhLFdBQ2IsT0FBT3ptRCxLQUFLZ3JELEtBQUt2RSxLTzBFakI3VCxPYzdFYSxTQUFTcHhDLEdBQ3RCLElBQUlqQixFQUF5QixtQkFBVGlCLEVBQXNCQSxFQUFPNnBELEdBQVE3cEQsR0FDekQsT0FBT3hCLEtBQUsyb0QsUUFBTyxXQUNqQixPQUFPM29ELEtBQUt3cEIsWUFBWWpwQixFQUFPeU4sTUFBTWhPLEtBQU1nSixnQmQyRTdDc2lELE9MekVhLFNBQVM5cEQsRUFBTStwRCxHQUM1QixJQUFJaHJELEVBQXlCLG1CQUFUaUIsRUFBc0JBLEVBQU82cEQsR0FBUTdwRCxHQUNyRG1uRCxFQUFtQixNQUFWNEMsRUFBaUJ0RSxHQUFpQyxtQkFBWHNFLEVBQXdCQSxFQUFTbEssRUFBU2tLLEdBQzlGLE9BQU92ckQsS0FBSzJvRCxRQUFPLFdBQ2pCLE9BQU8zb0QsS0FBS2lqRCxhQUFhMWlELEVBQU95TixNQUFNaE8sS0FBTWdKLFdBQVkyL0MsRUFBTzM2QyxNQUFNaE8sS0FBTWdKLFlBQWMsVUtzRTNGMDhDLE9KNUVhLFdBQ2IsT0FBTzFsRCxLQUFLZ3JELEtBQUt0RixLSTRFakJ5QixNSHhFYSxTQUFTcUUsR0FDdEIsT0FBT3hyRCxLQUFLMm9ELE9BQU82QyxFQUFPbkUsR0FBc0JILEtHd0VoRG5GLE1lbkZhLFNBQVMvZ0QsR0FDdEIsT0FBT2dJLFVBQVUxSCxPQUNYdEIsS0FBSzRFLFNBQVMsV0FBWTVELEdBQzFCaEIsS0FBS3VrQixPQUFPNjlCLFVmaUZsQnNGLEdGcENhLFNBQVNELEVBQVV6bUQsRUFBT2dhLEdBQ3ZDLElBQStDaFQsRUFBeUJpb0IsRUFBcEVzM0IsRUFBWUQsR0FBZUcsRUFBVyxJQUFRbm9DLEVBQUlpb0MsRUFBVWptRCxPQUVoRSxLQUFJMEgsVUFBVTFILE9BQVMsR0FBdkIsQ0FhQSxJQURBb21ELEVBQUsxbUQsRUFBUTZtRCxHQUFRTCxHQUNoQngvQyxFQUFJLEVBQUdBLEVBQUlzWCxJQUFLdFgsRUFBR2hJLEtBQUtnckQsS0FBS3RELEVBQUdILEVBQVV2L0MsR0FBSWhILEVBQU9nYSxJQUMxRCxPQUFPaGIsS0FiTCxJQUFJMG5ELEVBQUsxbkQsS0FBS3VrQixPQUFPb2pDLEtBQ3JCLEdBQUlELEVBQUksSUFBSyxJQUEwQjNHLEVBQXRCMzRDLEVBQUksRUFBRzhXLEVBQUl3b0MsRUFBR3BtRCxPQUFXOEcsRUFBSThXLElBQUs5VyxFQUNqRCxJQUFLSixFQUFJLEVBQUcrNEMsRUFBSTJHLEVBQUd0L0MsR0FBSUosRUFBSXNYLElBQUt0WCxFQUM5QixJQUFLaW9CLEVBQUlzM0IsRUFBVXYvQyxJQUFJOEksT0FBU2l3QyxFQUFFandDLE1BQVFtZixFQUFFenVCLE9BQVN1L0MsRUFBRXYvQyxLQUNyRCxPQUFPdS9DLEVBQUUvL0MsT0U2QmpCeXFELFNEeERhLFNBQVMzNkMsRUFBTXdoQyxHQUM1QixPQUFPdHlDLEtBQUtnckQsTUFBd0IsbUJBQVgxWSxFQUNuQjhWLEdBQ0FELElBQWtCcjNDLEVBQU13aEMsS0NzRDlCLENBQUNwNkIsT0FBTzNNLFVnQnRGSyxZQUNiLElBQUssSUFBSXNRLEVBQVM3YixLQUFLd29ELFFBQVNwZ0QsRUFBSSxFQUFHOFcsRUFBSXJELEVBQU92YSxPQUFROEcsRUFBSThXLElBQUs5VyxFQUNqRSxJQUFLLElBQWdEbWMsRUFBNUMrOUIsRUFBUXptQyxFQUFPelQsR0FBSUosRUFBSSxFQUFHc1gsRUFBSWdqQyxFQUFNaGhELE9BQWMwRyxFQUFJc1gsSUFBS3RYLEdBQzlEdWMsRUFBTys5QixFQUFNdDZDLFlBQVV1YyxLaEJzRmpDLFlpQnpGQSxJQUFJbW5DLEdBQU8sQ0FBQzFxRCxNQUFPLFFBRW5CLFNBQVMsS0FDUCxJQUFLLElBQXlDaXZCLEVBQXJDam9CLEVBQUksRUFBR3NYLEVBQUl0VyxVQUFVMUgsT0FBUXFxRCxFQUFJLEdBQU8zakQsRUFBSXNYLElBQUt0WCxFQUFHLENBQzNELEtBQU1pb0IsRUFBSWpuQixVQUFVaEIsR0FBSyxLQUFRaW9CLEtBQUswN0IsR0FBTSxRQUFRcnhDLEtBQUsyVixHQUFJLE1BQU0sSUFBSTBFLE1BQU0saUJBQW1CMUUsR0FDaEcwN0IsRUFBRTE3QixHQUFLLEdBRVQsT0FBTyxJQUFJZ0IsR0FBUzA2QixHQUd0QixTQUFTMTZCLEdBQVMwNkIsR0FDaEIzckQsS0FBSzJyRCxFQUFJQSxFQUdYLFNBQVMsR0FBZXBFLEVBQVdxRSxHQUNqQyxPQUFPckUsRUFBVXhnQyxPQUFPbE0sTUFBTSxTQUFTek4sS0FBSSxTQUFTNmlCLEdBQ2xELElBQUl6dUIsRUFBTyxHQUFJd0csRUFBSWlvQixFQUFFN2pCLFFBQVEsS0FFN0IsR0FESXBFLEdBQUssSUFBR3hHLEVBQU95dUIsRUFBRXBvQixNQUFNRyxFQUFJLEdBQUlpb0IsRUFBSUEsRUFBRXBvQixNQUFNLEVBQUdHLElBQzlDaW9CLElBQU0yN0IsRUFBTWpzQyxlQUFlc1EsR0FBSSxNQUFNLElBQUkwRSxNQUFNLGlCQUFtQjFFLEdBQ3RFLE1BQU8sQ0FBQ25mLEtBQU1tZixFQUFHenVCLEtBQU1BLE1BNkMzQixTQUFTMkMsR0FBSTJNLEVBQU10UCxHQUNqQixJQUFLLElBQTRCc2MsRUFBeEI5VixFQUFJLEVBQUdzWCxFQUFJeE8sRUFBS3hQLE9BQVcwRyxFQUFJc1gsSUFBS3RYLEVBQzNDLElBQUs4VixFQUFJaE4sRUFBSzlJLElBQUl4RyxPQUFTQSxFQUN6QixPQUFPc2MsRUFBRTljLE1BS2YsU0FBUzhFLEdBQUlnTCxFQUFNdFAsRUFBTXl4QyxHQUN2QixJQUFLLElBQUlqckMsRUFBSSxFQUFHc1gsRUFBSXhPLEVBQUt4UCxPQUFRMEcsRUFBSXNYLElBQUt0WCxFQUN4QyxHQUFJOEksRUFBSzlJLEdBQUd4RyxPQUFTQSxFQUFNLENBQ3pCc1AsRUFBSzlJLEdBQUswakQsR0FBTTU2QyxFQUFPQSxFQUFLakosTUFBTSxFQUFHRyxHQUFHc1csT0FBT3hOLEVBQUtqSixNQUFNRyxFQUFJLElBQzlELE1BSUosT0FEZ0IsTUFBWmlyQyxHQUFrQm5pQyxFQUFLdkUsS0FBSyxDQUFDL0ssS0FBTUEsRUFBTVIsTUFBT2l5QyxJQUM3Q25pQyxFQXpEVG1nQixHQUFTcndCLFVBQVksR0FBU0EsVUFBWSxDQUN4Q3lILFlBQWE0b0IsR0FDYnkyQixHQUFJLFNBQVNELEVBQVV4VSxHQUNyQixJQUVJaGpCLEVBRkEwN0IsRUFBSTNyRCxLQUFLMnJELEVBQ1R6akMsRUFBSSxHQUFldS9CLEVBQVcsR0FBSWtFLEdBRWxDM2pELEdBQUssRUFDTHNYLEVBQUk0SSxFQUFFNW1CLE9BR1YsS0FBSTBILFVBQVUxSCxPQUFTLEdBQXZCLENBT0EsR0FBZ0IsTUFBWjJ4QyxHQUF3QyxtQkFBYkEsRUFBeUIsTUFBTSxJQUFJdGUsTUFBTSxxQkFBdUJzZSxHQUMvRixPQUFTanJDLEVBQUlzWCxHQUNYLEdBQUkyUSxHQUFLdzNCLEVBQVd2L0IsRUFBRWxnQixJQUFJOEksS0FBTTY2QyxFQUFFMTdCLEdBQUtucUIsR0FBSTZsRCxFQUFFMTdCLEdBQUl3M0IsRUFBU2ptRCxLQUFNeXhDLFFBQzNELEdBQWdCLE1BQVpBLEVBQWtCLElBQUtoakIsS0FBSzA3QixFQUFHQSxFQUFFMTdCLEdBQUtucUIsR0FBSTZsRCxFQUFFMTdCLEdBQUl3M0IsRUFBU2ptRCxLQUFNLE1BRzFFLE9BQU94QixLQVpMLE9BQVNnSSxFQUFJc1gsT0FBUTJRLEdBQUt3M0IsRUFBV3YvQixFQUFFbGdCLElBQUk4SSxRQUFVbWYsRUFBSTlyQixHQUFJd25ELEVBQUUxN0IsR0FBSXczQixFQUFTam1ELE9BQVEsT0FBT3l1QixHQWMvRjQ3QixLQUFNLFdBQ0osSUFBSUEsRUFBTyxHQUFJRixFQUFJM3JELEtBQUsyckQsRUFDeEIsSUFBSyxJQUFJMTdCLEtBQUswN0IsRUFBR0UsRUFBSzU3QixHQUFLMDdCLEVBQUUxN0IsR0FBR3BvQixRQUNoQyxPQUFPLElBQUlvcEIsR0FBUzQ2QixJQUV0QnRuRCxLQUFNLFNBQVN1TSxFQUFNOUQsR0FDbkIsSUFBS3NTLEVBQUl0VyxVQUFVMUgsT0FBUyxHQUFLLEVBQUcsSUFBSyxJQUFnQ2dlLEVBQUcyUSxFQUEvQi9SLEVBQU8sSUFBSXZkLE1BQU0yZSxHQUFJdFgsRUFBSSxFQUFTQSxFQUFJc1gsSUFBS3RYLEVBQUdrVyxFQUFLbFcsR0FBS2dCLFVBQVVoQixFQUFJLEdBQ25ILElBQUtoSSxLQUFLMnJELEVBQUVoc0MsZUFBZTdPLEdBQU8sTUFBTSxJQUFJNmpCLE1BQU0saUJBQW1CN2pCLEdBQ3JFLElBQXVCOUksRUFBSSxFQUFHc1gsR0FBekIyUSxFQUFJandCLEtBQUsyckQsRUFBRTc2QyxJQUFvQnhQLE9BQVEwRyxFQUFJc1gsSUFBS3RYLEVBQUdpb0IsRUFBRWpvQixHQUFHaEgsTUFBTWdOLE1BQU1oQixFQUFNa1IsSUFFakZsUSxNQUFPLFNBQVM4QyxFQUFNOUQsRUFBTWtSLEdBQzFCLElBQUtsZSxLQUFLMnJELEVBQUVoc0MsZUFBZTdPLEdBQU8sTUFBTSxJQUFJNmpCLE1BQU0saUJBQW1CN2pCLEdBQ3JFLElBQUssSUFBSW1mLEVBQUlqd0IsS0FBSzJyRCxFQUFFNzZDLEdBQU85SSxFQUFJLEVBQUdzWCxFQUFJMlEsRUFBRTN1QixPQUFRMEcsRUFBSXNYLElBQUt0WCxFQUFHaW9CLEVBQUVqb0IsR0FBR2hILE1BQU1nTixNQUFNaEIsRUFBTWtSLEtBdUJ2RixZQ25GQSxJQUlJNHRDLEdBQ0FDLEdBTEEsR0FBUSxFQUNScGIsR0FBVSxFQUNWcWIsR0FBVyxFQUlYQyxHQUFZLEVBQ1pDLEdBQVcsRUFDWEMsR0FBWSxFQUNaQyxHQUErQixpQkFBaEJDLGFBQTRCQSxZQUFZMzZCLElBQU0yNkIsWUFBY3oyQyxLQUMzRTAyQyxHQUE2QixpQkFBWDdzQyxRQUF1QkEsT0FBTzhzQyxzQkFBd0I5c0MsT0FBTzhzQyxzQkFBc0J4aEQsS0FBSzBVLFFBQVUsU0FBUzNlLEdBQUtteEIsV0FBV254QixFQUFHLEtBRTdJLFNBQVM0d0IsS0FDZCxPQUFPdzZCLEtBQWFJLEdBQVNFLElBQVdOLEdBQVdFLEdBQU0xNkIsTUFBUXk2QixJQUduRSxTQUFTSyxLQUNQTixHQUFXLEVBR04sU0FBU08sS0FDZHpzRCxLQUFLMHNELE1BQ0wxc0QsS0FBSzJzRCxNQUNMM3NELEtBQUtraUQsTUFBUSxLQTBCUixTQUFTMEssR0FBTTNaLEVBQVU0WixFQUFPQyxHQUNyQyxJQUFJNzhCLEVBQUksSUFBSXc4QixHQUVaLE9BREF4OEIsRUFBRTg4QixRQUFROVosRUFBVTRaLEVBQU9DLEdBQ3BCNzhCLEVBY1QsU0FBUys4QixLQUNQZCxJQUFZRCxHQUFZRyxHQUFNMTZCLE9BQVN5NkIsR0FDdkMsR0FBUXhiLEdBQVUsRUFDbEIsS0FkSyxXQUNMamYsT0FDRSxHQUVGLElBREEsSUFBa0JzTCxFQUFkL00sRUFBSTY3QixHQUNENzdCLElBQ0ErTSxFQUFJa3ZCLEdBQVdqOEIsRUFBRTA4QixRQUFVLEdBQUcxOEIsRUFBRXk4QixNQUFNbm9ELEtBQUssS0FBTXk0QixHQUN0RC9NLEVBQUlBLEVBQUVpeUIsUUFFTixHQU9BK0ssR0FDQSxRQUNBLEdBQVEsRUFXWixXQUVFLElBREEsSUFBSUMsRUFBbUJDLEVBQWZDLEVBQUt0QixHQUFjZ0IsRUFBT3ZzQyxJQUMzQjZzQyxHQUNEQSxFQUFHVixPQUNESSxFQUFPTSxFQUFHVCxRQUFPRyxFQUFPTSxFQUFHVCxPQUMvQk8sRUFBS0UsRUFBSUEsRUFBS0EsRUFBR2xMLFFBRWpCaUwsRUFBS0MsRUFBR2xMLE1BQU9rTCxFQUFHbEwsTUFBUSxLQUMxQmtMLEVBQUtGLEVBQUtBLEVBQUdoTCxNQUFRaUwsRUFBS3JCLEdBQVdxQixHQUd6Q3BCLEdBQVdtQixFQUNYRyxHQUFNUCxHQXRCSlEsR0FDQXBCLEdBQVcsR0FJZixTQUFTcUIsS0FDUCxJQUFJNzdCLEVBQU0wNkIsR0FBTTE2QixNQUFPbTdCLEVBQVFuN0IsRUFBTXU2QixHQUNqQ1ksRUE3RVUsTUE2RVNWLElBQWFVLEVBQU9aLEdBQVl2NkIsR0FrQnpELFNBQVMyN0IsR0FBTVAsR0FDVCxLQUNBbmMsS0FBU0EsR0FBVTZjLGFBQWE3YyxLQUN4Qm1jLEVBQU9aLEdBQ1AsSUFDTlksRUFBT3ZzQyxNQUFVb3dCLEdBQVUxZSxXQUFXKzZCLEdBQU1GLEVBQU9WLEdBQU0xNkIsTUFBUXk2QixLQUNqRUgsS0FBVUEsR0FBV3lCLGNBQWN6QixPQUVsQ0EsS0FBVUMsR0FBWUcsR0FBTTE2QixNQUFPczZCLEdBQVduYixZQUFZMGMsR0F2R25ELE1Bd0daLEdBQVEsRUFBR2pCLEdBQVNVLE1DekdULFlBQVMvWixFQUFVNFosRUFBT0MsR0FDdkMsSUFBSTc4QixFQUFJLElBQUl3OEIsR0FNWixPQUxBSSxFQUFpQixNQUFUQSxFQUFnQixHQUFLQSxFQUM3QjU4QixFQUFFODhCLFNBQVFXLElBQ1J6OUIsRUFBRWpOLE9BQ0Zpd0IsRUFBU3lhLEVBQVViLEtBQ2xCQSxFQUFPQyxHQUNINzhCLEVEaUJUdzhCLEdBQU03ckQsVUFBWWdzRCxHQUFNaHNELFVBQVksQ0FDbEN5SCxZQUFhb2tELEdBQ2JNLFFBQVMsU0FBUzlaLEVBQVU0WixFQUFPQyxHQUNqQyxHQUF3QixtQkFBYjdaLEVBQXlCLE1BQU0sSUFBSTl5QyxVQUFVLDhCQUN4RDJzRCxHQUFnQixNQUFSQSxFQUFlcDdCLE1BQVNvN0IsSUFBa0IsTUFBVEQsRUFBZ0IsR0FBS0EsR0FDekQ3c0QsS0FBS2tpRCxPQUFTNkosS0FBYS9yRCxPQUMxQityRCxHQUFVQSxHQUFTN0osTUFBUWxpRCxLQUMxQjhyRCxHQUFXOXJELEtBQ2hCK3JELEdBQVcvckQsTUFFYkEsS0FBSzBzRCxNQUFRelosRUFDYmp6QyxLQUFLMnNELE1BQVFHLEVBQ2JPLE1BRUZycUMsS0FBTSxXQUNBaGpCLEtBQUswc0QsUUFDUDFzRCxLQUFLMHNELE1BQVEsS0FDYjFzRCxLQUFLMnNELE1BQVFwc0MsSUFDYjhzQyxRRXpDTixJQUFJTSxHQUFVLEdBQVMsUUFBUyxNQUFPLFNBQVUsYUFDN0NDLEdBQWEsR0FVRixZQUFTcnBDLEVBQU0vaUIsRUFBTTZRLEVBQUlqUixFQUFPa2hELEVBQU91TCxHQUNwRCxJQUFJQyxFQUFZdnBDLEVBQUt3cEMsYUFDckIsR0FBS0QsR0FDQSxHQUFJejdDLEtBQU15N0MsRUFBVyxZQURWdnBDLEVBQUt3cEMsYUFBZSxJQW1DdEMsU0FBZ0J4cEMsRUFBTWxTLEVBQUluRixHQUN4QixJQUNJOGdELEVBREFGLEVBQVl2cEMsRUFBS3dwQyxhQWdCckIsU0FBU3BtRCxFQUFNK2xELEdBQ2IsSUFBSTFsRCxFQUFHSSxFQUFHa1gsRUFBR3loQyxFQUdiLEdBakVtQixJQWlFZjd6QyxFQUFLa0UsTUFBcUIsT0FBTzRSLElBRXJDLElBQUtoYixLQUFLOGxELEVBRVIsSUFEQS9NLEVBQUkrTSxFQUFVOWxELElBQ1J4RyxPQUFTMEwsRUFBSzFMLEtBQXBCLENBS0EsR0F4RWUsSUF3RVh1L0MsRUFBRTN2QyxNQUFtQixPQUFPLEdBQVF6SixHQXZFekIsSUEwRVhvNUMsRUFBRTN2QyxPQUNKMnZDLEVBQUUzdkMsTUF6RVMsRUEwRVgydkMsRUFBRTZMLE1BQU01cEMsT0FDUis5QixFQUFFMkcsR0FBR25qRCxLQUFLLFlBQWFnZ0IsRUFBTUEsRUFBSzY5QixTQUFVckIsRUFBRTMvQyxNQUFPMi9DLEVBQUV1QixjQUNoRHdMLEVBQVU5bEQsS0FJVEEsRUFBSXFLLElBQ1owdUMsRUFBRTN2QyxNQWpGUyxFQWtGWDJ2QyxFQUFFNkwsTUFBTTVwQyxPQUNSKzlCLEVBQUUyRyxHQUFHbmpELEtBQUssU0FBVWdnQixFQUFNQSxFQUFLNjlCLFNBQVVyQixFQUFFMy9DLE1BQU8yL0MsRUFBRXVCLGNBQzdDd0wsRUFBVTlsRCxJQW9CckIsR0FaQSxJQUFRLFdBL0ZTLElBZ0dYa0YsRUFBS2tFLFFBQ1BsRSxFQUFLa0UsTUFoR1EsRUFpR2JsRSxFQUFLMC9DLE1BQU1HLFFBQVFrQixFQUFNL2dELEVBQUsyL0MsTUFBTzMvQyxFQUFLNC9DLE1BQzFDbUIsRUFBS1AsT0FNVHhnRCxFQUFLa0UsTUExR2EsRUEyR2xCbEUsRUFBS3c2QyxHQUFHbmpELEtBQUssUUFBU2dnQixFQUFNQSxFQUFLNjlCLFNBQVVsMUMsRUFBSzlMLE1BQU84TCxFQUFLbzFDLE9BM0cxQyxJQTRHZHAxQyxFQUFLa0UsTUFBVCxDQUtBLElBSkFsRSxFQUFLa0UsTUE1R1ksRUErR2pCNDhDLEVBQVEsSUFBSXJ0RCxNQUFNMmUsRUFBSXBTLEVBQUs4Z0QsTUFBTTFzRCxRQUM1QjBHLEVBQUksRUFBR0ksR0FBSyxFQUFHSixFQUFJc1gsSUFBS3RYLEdBQ3ZCKzRDLEVBQUk3ekMsRUFBSzhnRCxNQUFNaG1ELEdBQUdoSCxNQUFNdUQsS0FBS2dnQixFQUFNQSxFQUFLNjlCLFNBQVVsMUMsRUFBSzlMLE1BQU84TCxFQUFLbzFDLFVBQ3JFMEwsSUFBUTVsRCxHQUFLMjRDLEdBR2pCaU4sRUFBTTFzRCxPQUFTOEcsRUFBSSxHQUdyQixTQUFTNmxELEVBQUtQLEdBS1osSUFKQSxJQUFJejlCLEVBQUl5OUIsRUFBVXhnRCxFQUFLZ2hELFNBQVdoaEQsRUFBS2loRCxLQUFLNXBELEtBQUssS0FBTW1wRCxFQUFVeGdELEVBQUtnaEQsV0FBYWhoRCxFQUFLMC9DLE1BQU1HLFFBQVEvcEMsR0FBTzlWLEVBQUtrRSxNQXZIbEcsRUF1SGtILEdBQzlIcEosR0FBSyxFQUNMc1gsRUFBSTB1QyxFQUFNMXNELFNBRUwwRyxFQUFJc1gsR0FDWDB1QyxFQUFNaG1ELEdBQUd6RCxLQUFLZ2dCLEVBQU0wTCxHQTVITixJQWdJWi9pQixFQUFLa0UsUUFDUGxFLEVBQUt3NkMsR0FBR25qRCxLQUFLLE1BQU9nZ0IsRUFBTUEsRUFBSzY5QixTQUFVbDFDLEVBQUs5TCxNQUFPOEwsRUFBS28xQyxPQUMxRHQvQixLQUlKLFNBQVNBLElBSVAsSUFBSyxJQUFJaGIsS0FIVGtGLEVBQUtrRSxNQXRJVSxFQXVJZmxFLEVBQUswL0MsTUFBTTVwQyxjQUNKOHFDLEVBQVV6N0MsR0FDSHk3QyxFQUFXLGNBQ2xCdnBDLEVBQUt3cEMsYUE3RmRELEVBQVV6N0MsR0FBTW5GLEVBQ2hCQSxFQUFLMC9DLE1BQVFBLElBRWIsU0FBa0JjLEdBQ2hCeGdELEVBQUtrRSxNQXREYyxFQXVEbkJsRSxFQUFLMC9DLE1BQU1HLFFBQVFwbEQsRUFBT3VGLEVBQUsyL0MsTUFBTzMvQyxFQUFLNC9DLE1BR3ZDNS9DLEVBQUsyL0MsT0FBU2EsR0FBUy9sRCxFQUFNK2xELEVBQVV4Z0QsRUFBSzIvQyxTQVByQixFQUFHMy9DLEVBQUs0L0MsTUF4Q3JDdnNELENBQU9na0IsRUFBTWxTLEVBQUksQ0FDZjdRLEtBQU1BLEVBQ05KLE1BQU9BLEVBQ1BraEQsTUFBT0EsRUFDUG9GLEdBQUlpRyxHQUNKSyxNQUFPSixHQUNQZCxLQUFNZSxFQUFPZixLQUNiRCxNQUFPZ0IsRUFBT2hCLE1BQ2RxQixTQUFVTCxFQUFPSyxTQUNqQkMsS0FBTU4sRUFBT00sS0FDYnZCLE1BQU8sS0FDUHg3QyxNQXZCaUIsSUEyQmQsU0FBU21vQixHQUFLaFYsRUFBTWxTLEdBQ3pCLElBQUkrN0MsRUFBVyxHQUFJN3BDLEVBQU1sUyxHQUN6QixHQUFJKzdDLEVBQVNoOUMsTUE3Qk0sRUE2QlcsTUFBTSxJQUFJdWpCLE1BQU0sK0JBQzlDLE9BQU95NUIsRUFHRixTQUFTLEdBQUk3cEMsRUFBTWxTLEdBQ3hCLElBQUkrN0MsRUFBVyxHQUFJN3BDLEVBQU1sUyxHQUN6QixHQUFJKzdDLEVBQVNoOUMsTUFoQ00sRUFnQ1csTUFBTSxJQUFJdWpCLE1BQU0sNkJBQzlDLE9BQU95NUIsRUFHRixTQUFTLEdBQUk3cEMsRUFBTWxTLEdBQ3hCLElBQUkrN0MsRUFBVzdwQyxFQUFLd3BDLGFBQ3BCLElBQUtLLEtBQWNBLEVBQVdBLEVBQVMvN0MsSUFBTSxNQUFNLElBQUlzaUIsTUFBTSx3QkFDN0QsT0FBT3k1QixFQzlDTSxZQUFTN3BDLEVBQU0vaUIsR0FDNUIsSUFDSTRzRCxFQUNBQyxFQUVBcm1ELEVBSkE4bEQsRUFBWXZwQyxFQUFLd3BDLGFBR2pCeE0sR0FBUSxFQUdaLEdBQUt1TSxFQUFMLENBSUEsSUFBSzlsRCxLQUZMeEcsRUFBZSxNQUFSQSxFQUFlLEtBQU9BLEVBQU8sR0FFMUJzc0QsR0FDSE0sRUFBV04sRUFBVTlsRCxJQUFJeEcsT0FBU0EsR0FDdkM2c0QsRUFBU0QsRUFBU2g5QyxNRFBBLEdDT29CZzlDLEVBQVNoOUMsTURKL0IsRUNLaEJnOUMsRUFBU2g5QyxNREpNLEVDS2ZnOUMsRUFBU3hCLE1BQU01cEMsT0FDZm9yQyxFQUFTMUcsR0FBR25qRCxLQUFLOHBELEVBQVMsWUFBYyxTQUFVOXBDLEVBQU1BLEVBQUs2OUIsU0FBVWdNLEVBQVNodEQsTUFBT2d0RCxFQUFTOUwsY0FDekZ3TCxFQUFVOWxELElBTDhCdTVDLEdBQVEsRUFRckRBLFVBQWNoOUIsRUFBS3dwQyxjQ3RCVixZQUFTanlDLEVBQUcrQixHQUN6QixPQUFPL0IsR0FBS0EsRUFBRytCLEdBQUtBLEVBQUcsU0FBU29TLEdBQzlCLE9BQU9uVSxHQUFLLEVBQUltVSxHQUFLcFMsRUFBSW9TLEdDRjdCLElDRUlxK0IsR0RGQUMsR0FBVSxJQUFNeGtELEtBQUt5a0QsR0FFZEMsR0FBVyxDQUNwQkMsV0FBWSxFQUNaQyxXQUFZLEVBQ1pDLE9BQVEsRUFDUkMsTUFBTyxFQUNQQyxPQUFRLEVBQ1JDLE9BQVEsR0FHSyxZQUFTanpDLEVBQUcrQixFQUFHQyxFQUFHK2lDLEVBQUc3akIsRUFBR2w4QixHQUNyQyxJQUFJZ3VELEVBQVFDLEVBQVFGLEVBS3BCLE9BSklDLEVBQVMva0QsS0FBSzJ2QixLQUFLNWQsRUFBSUEsRUFBSStCLEVBQUlBLE1BQUkvQixHQUFLZ3pDLEVBQVFqeEMsR0FBS2l4QyxJQUNyREQsRUFBUS95QyxFQUFJZ0MsRUFBSUQsRUFBSWdqQyxLQUFHL2lDLEdBQUtoQyxFQUFJK3lDLEVBQU9oTyxHQUFLaGpDLEVBQUlneEMsSUFDaERFLEVBQVNobEQsS0FBSzJ2QixLQUFLNWIsRUFBSUEsRUFBSStpQyxFQUFJQSxNQUFJL2lDLEdBQUtpeEMsRUFBUWxPLEdBQUtrTyxFQUFRRixHQUFTRSxHQUN0RWp6QyxFQUFJK2tDLEVBQUloakMsRUFBSUMsSUFBR2hDLEdBQUtBLEVBQUcrQixHQUFLQSxFQUFHZ3hDLEdBQVNBLEVBQU9DLEdBQVVBLEdBQ3RELENBQ0xKLFdBQVkxeEIsRUFDWjJ4QixXQUFZN3RELEVBQ1o4dEQsT0FBUTdrRCxLQUFLaWxELE1BQU1ueEMsRUFBRy9CLEdBQUt5eUMsR0FDM0JNLE1BQU85a0QsS0FBS2tsRCxLQUFLSixHQUFTTixHQUMxQk8sT0FBUUEsRUFDUkMsT0FBUUEsR0VwQlosU0FBU0csR0FBcUJDLEVBQU9DLEVBQVNDLEVBQVNDLEdBRXJELFNBQVNoYSxFQUFJdm9CLEdBQ1gsT0FBT0EsRUFBRXpyQixPQUFTeXJCLEVBQUV1b0IsTUFBUSxJQUFNLEdBc0NwQyxPQUFPLFNBQVN4NUIsRUFBRytCLEdBQ2pCLElBQUlrUCxFQUFJLEdBQ0ppRCxFQUFJLEdBT1IsT0FOQWxVLEVBQUlxekMsRUFBTXJ6QyxHQUFJK0IsRUFBSXN4QyxFQUFNdHhDLEdBdEMxQixTQUFtQjB4QyxFQUFJQyxFQUFJQyxFQUFJQyxFQUFJM2lDLEVBQUdpRCxHQUNwQyxHQUFJdS9CLElBQU9FLEdBQU1ELElBQU9FLEVBQUksQ0FDMUIsSUFBSTFuRCxFQUFJK2tCLEVBQUV4Z0IsS0FBSyxhQUFjLEtBQU02aUQsRUFBUyxLQUFNQyxHQUNsRHIvQixFQUFFempCLEtBQUssQ0FBQ3ZFLEVBQUdBLEVBQUksRUFBRzBiLEVBQUc5YyxHQUFPMm9ELEVBQUlFLElBQU0sQ0FBQ3puRCxFQUFHQSxFQUFJLEVBQUcwYixFQUFHOWMsR0FBTzRvRCxFQUFJRSxVQUN0REQsR0FBTUMsSUFDZjNpQyxFQUFFeGdCLEtBQUssYUFBZWtqRCxFQUFLTCxFQUFVTSxFQUFLTCxHQWtDNUNNLENBQVU3ekMsRUFBRTR5QyxXQUFZNXlDLEVBQUU2eUMsV0FBWTl3QyxFQUFFNndDLFdBQVk3d0MsRUFBRTh3QyxXQUFZNWhDLEVBQUdpRCxHQTlCdkUsU0FBZ0JsVSxFQUFHK0IsRUFBR2tQLEVBQUdpRCxHQUNuQmxVLElBQU0rQixHQUNKL0IsRUFBSStCLEVBQUksSUFBS0EsR0FBSyxJQUFjQSxFQUFJL0IsRUFBSSxNQUFLQSxHQUFLLEtBQ3REa1UsRUFBRXpqQixLQUFLLENBQUN2RSxFQUFHK2tCLEVBQUV4Z0IsS0FBSytvQyxFQUFJdm9CLEdBQUssVUFBVyxLQUFNdWlDLEdBQVksRUFBRzVyQyxFQUFHOWMsR0FBT2tWLEVBQUcrQixNQUMvREEsR0FDVGtQLEVBQUV4Z0IsS0FBSytvQyxFQUFJdm9CLEdBQUssVUFBWWxQLEVBQUl5eEMsR0EwQmxDVixDQUFPOXlDLEVBQUU4eUMsT0FBUS93QyxFQUFFK3dDLE9BQVE3aEMsRUFBR2lELEdBdEJoQyxTQUFlbFUsRUFBRytCLEVBQUdrUCxFQUFHaUQsR0FDbEJsVSxJQUFNK0IsRUFDUm1TLEVBQUV6akIsS0FBSyxDQUFDdkUsRUFBRytrQixFQUFFeGdCLEtBQUsrb0MsRUFBSXZvQixHQUFLLFNBQVUsS0FBTXVpQyxHQUFZLEVBQUc1ckMsRUFBRzljLEdBQU9rVixFQUFHK0IsS0FDOURBLEdBQ1RrUCxFQUFFeGdCLEtBQUsrb0MsRUFBSXZvQixHQUFLLFNBQVdsUCxFQUFJeXhDLEdBbUJqQ1QsQ0FBTS95QyxFQUFFK3lDLE1BQU9oeEMsRUFBRWd4QyxNQUFPOWhDLEVBQUdpRCxHQWY3QixTQUFldS9CLEVBQUlDLEVBQUlDLEVBQUlDLEVBQUkzaUMsRUFBR2lELEdBQ2hDLEdBQUl1L0IsSUFBT0UsR0FBTUQsSUFBT0UsRUFBSSxDQUMxQixJQUFJMW5ELEVBQUkra0IsRUFBRXhnQixLQUFLK29DLEVBQUl2b0IsR0FBSyxTQUFVLEtBQU0sSUFBSyxLQUFNLEtBQ25EaUQsRUFBRXpqQixLQUFLLENBQUN2RSxFQUFHQSxFQUFJLEVBQUcwYixFQUFHOWMsR0FBTzJvRCxFQUFJRSxJQUFNLENBQUN6bkQsRUFBR0EsRUFBSSxFQUFHMGIsRUFBRzljLEdBQU80b0QsRUFBSUUsVUFDL0MsSUFBUEQsR0FBbUIsSUFBUEMsR0FDckIzaUMsRUFBRXhnQixLQUFLK29DLEVBQUl2b0IsR0FBSyxTQUFXMGlDLEVBQUssSUFBTUMsRUFBSyxLQVc3Q0UsQ0FBTTl6QyxFQUFFZ3pDLE9BQVFoekMsRUFBRWl6QyxPQUFRbHhDLEVBQUVpeEMsT0FBUWp4QyxFQUFFa3hDLE9BQVFoaUMsRUFBR2lELEdBQ2pEbFUsRUFBSStCLEVBQUksS0FDRCxTQUFTb1MsR0FFZCxJQURBLElBQTBCOHdCLEVBQXRCLzRDLEdBQUssRUFBR3NYLEVBQUkwUSxFQUFFMXVCLFNBQ1QwRyxFQUFJc1gsR0FBR3lOLEdBQUdnMEIsRUFBSS93QixFQUFFaG9CLElBQUlBLEdBQUsrNEMsRUFBRXI5QixFQUFFdU0sR0FDdEMsT0FBT2xELEVBQUUzTyxLQUFLLE1BS2IsSUFBSXl4QyxHQUEwQlgsSUR4RDlCLFNBQWtCbHVELEdBQ3ZCLE1BQU1rZSxFQUFJLElBQTBCLG1CQUFkNHdDLFVBQTJCQSxVQUFZQyxpQkFBaUIvdUQsRUFBUSxJQUN0RixPQUFPa2UsRUFBRTh3QyxXQUFhdkIsR0FBV3dCLEdBQVUvd0MsRUFBRXBELEVBQUdvRCxFQUFFckIsRUFBR3FCLEVBQUVwQixFQUFHb0IsRUFBRTJoQyxFQUFHM2hDLEVBQUU4ZCxFQUFHOWQsRUFBRXBlLEtDc0RKLE9BQVEsTUFBTyxRQUN4RW92RCxHQUEwQmhCLElEcEQ5QixTQUFrQmx1RCxHQUN2QixPQUFhLE1BQVRBLEVBQXNCeXRELElBQ3JCSCxLQUFTQSxHQUFVbjJDLFNBQVM0dUMsZ0JBQWdCLDZCQUE4QixNQUMvRXVILEdBQVF0SyxhQUFhLFlBQWFoakQsSUFDNUJBLEVBQVFzdEQsR0FBUTZCLFVBQVVDLFFBQVFDLGVBRWpDSixJQURQanZELEVBQVFBLEVBQU1zdkQsUUFDU3gwQyxFQUFHOWEsRUFBTTZjLEVBQUc3YyxFQUFNOGMsRUFBRzljLEVBQU02L0MsRUFBRzcvQyxFQUFNZzhCLEVBQUdoOEIsRUFBTUYsR0FGTDJ0RCxNQ2dERyxLQUFNLElBQUssS0M1RC9FLFNBQVM4QixHQUFZbCtDLEVBQUk3USxHQUN2QixJQUFJZ3ZELEVBQVFDLEVBQ1osT0FBTyxXQUNMLElBQUlyQyxFQUFXLEdBQUlwdUQsS0FBTXFTLEdBQ3JCMjdDLEVBQVFJLEVBQVNKLE1BS3JCLEdBQUlBLElBQVV3QyxFQUVaLElBQUssSUFBSXhvRCxFQUFJLEVBQUdzWCxHQURoQm14QyxFQUFTRCxFQUFTeEMsR0FDUzFzRCxPQUFRMEcsRUFBSXNYLElBQUt0WCxFQUMxQyxHQUFJeW9ELEVBQU96b0QsR0FBR3hHLE9BQVNBLEVBQU0sRUFDM0JpdkQsRUFBU0EsRUFBTzVvRCxTQUNUOEssT0FBTzNLLEVBQUcsR0FDakIsTUFLTm9tRCxFQUFTSixNQUFReUMsR0FJckIsU0FBU0MsR0FBY3IrQyxFQUFJN1EsRUFBTVIsR0FDL0IsSUFBSXd2RCxFQUFRQyxFQUNaLEdBQXFCLG1CQUFWenZELEVBQXNCLE1BQU0sSUFBSTJ6QixNQUMzQyxPQUFPLFdBQ0wsSUFBSXk1QixFQUFXLEdBQUlwdUQsS0FBTXFTLEdBQ3JCMjdDLEVBQVFJLEVBQVNKLE1BS3JCLEdBQUlBLElBQVV3QyxFQUFRLENBQ3BCQyxHQUFVRCxFQUFTeEMsR0FBT25tRCxRQUMxQixJQUFLLElBQUlvb0IsRUFBSSxDQUFDenVCLEtBQU1BLEVBQU1SLE1BQU9BLEdBQVFnSCxFQUFJLEVBQUdzWCxFQUFJbXhDLEVBQU9udkQsT0FBUTBHLEVBQUlzWCxJQUFLdFgsRUFDMUUsR0FBSXlvRCxFQUFPem9ELEdBQUd4RyxPQUFTQSxFQUFNLENBQzNCaXZELEVBQU96b0QsR0FBS2lvQixFQUNaLE1BR0Fqb0IsSUFBTXNYLEdBQUdteEMsRUFBT2xrRCxLQUFLMGpCLEdBRzNCbStCLEVBQVNKLE1BQVF5QyxHQXNCZCxTQUFTRSxHQUFXQyxFQUFZcHZELEVBQU1SLEdBQzNDLElBQUlxUixFQUFLdStDLEVBQVdDLElBT3BCLE9BTEFELEVBQVc1RixNQUFLLFdBQ2QsSUFBSW9ELEVBQVcsR0FBSXB1RCxLQUFNcVMsSUFDeEIrN0MsRUFBU3B0RCxRQUFVb3RELEVBQVNwdEQsTUFBUSxLQUFLUSxHQUFRUixFQUFNZ04sTUFBTWhPLEtBQU1nSixjQUcvRCxTQUFTdWIsR0FDZCxPQUFPLEdBQUlBLEVBQU1sUyxHQUFJclIsTUFBTVEsSUM5RWhCLFlBQVM2RyxFQUFhMUksRUFBU2lCLEdBQzVDeUgsRUFBWXpILFVBQVlqQixFQUFRaUIsVUFBWUEsRUFDNUNBLEVBQVV5SCxZQUFjQSxFQUduQixTQUFTeW9ELEdBQU8zckMsRUFBUTI3QixHQUM3QixJQUFJbGdELEVBQVlrQyxPQUFPdkMsT0FBTzRrQixFQUFPdmtCLFdBQ3JDLElBQUssSUFBSUssS0FBTzYvQyxFQUFZbGdELEVBQVVLLEdBQU82L0MsRUFBVzcvQyxHQUN4RCxPQUFPTCxFQ05GLFNBQVNtd0QsTUFFVCxJQUFJQyxHQUFTLEdBQ1RDLEdBQVcsRUFBSUQsR0FFdEJFLEdBQU0sc0JBQ05DLEdBQU0sZ0RBQ05DLEdBQU0saURBQ05DLEdBQVEscUJBQ1JDLEdBQWUsSUFBSXYwQyxPQUFPLFVBQVksQ0FBQ20wQyxHQUFLQSxHQUFLQSxJQUFPLFFBQ3hESyxHQUFlLElBQUl4MEMsT0FBTyxVQUFZLENBQUNxMEMsR0FBS0EsR0FBS0EsSUFBTyxRQUN4REksR0FBZ0IsSUFBSXowQyxPQUFPLFdBQWEsQ0FBQ20wQyxHQUFLQSxHQUFLQSxHQUFLQyxJQUFPLFFBQy9ETSxHQUFnQixJQUFJMTBDLE9BQU8sV0FBYSxDQUFDcTBDLEdBQUtBLEdBQUtBLEdBQUtELElBQU8sUUFDL0RPLEdBQWUsSUFBSTMwQyxPQUFPLFVBQVksQ0FBQ28wQyxHQUFLQyxHQUFLQSxJQUFPLFFBQ3hETyxHQUFnQixJQUFJNTBDLE9BQU8sV0FBYSxDQUFDbzBDLEdBQUtDLEdBQUtBLEdBQUtELElBQU8sUUFFL0RTLEdBQVEsQ0FDVkMsVUFBVyxTQUNYQyxhQUFjLFNBQ2RDLEtBQU0sTUFDTkMsV0FBWSxRQUNaQyxNQUFPLFNBQ1BDLE1BQU8sU0FDUEMsT0FBUSxTQUNSQyxNQUFPLEVBQ1BDLGVBQWdCLFNBQ2hCQyxLQUFNLElBQ05DLFdBQVksUUFDWkMsTUFBTyxTQUNQQyxVQUFXLFNBQ1hDLFVBQVcsUUFDWEMsV0FBWSxRQUNaQyxVQUFXLFNBQ1hDLE1BQU8sU0FDUEMsZUFBZ0IsUUFDaEJDLFNBQVUsU0FDVkMsUUFBUyxTQUNUQyxLQUFNLE1BQ05DLFNBQVUsSUFDVkMsU0FBVSxNQUNWQyxjQUFlLFNBQ2ZDLFNBQVUsU0FDVkMsVUFBVyxNQUNYQyxTQUFVLFNBQ1ZDLFVBQVcsU0FDWEMsWUFBYSxRQUNiQyxlQUFnQixRQUNoQkMsV0FBWSxTQUNaQyxXQUFZLFNBQ1pDLFFBQVMsUUFDVEMsV0FBWSxTQUNaQyxhQUFjLFFBQ2RDLGNBQWUsUUFDZkMsY0FBZSxRQUNmQyxjQUFlLFFBQ2ZDLGNBQWUsTUFDZkMsV0FBWSxRQUNaQyxTQUFVLFNBQ1ZDLFlBQWEsTUFDYkMsUUFBUyxRQUNUQyxRQUFTLFFBQ1RDLFdBQVksUUFDWkMsVUFBVyxTQUNYQyxZQUFhLFNBQ2JDLFlBQWEsUUFDYkMsUUFBUyxTQUNUQyxVQUFXLFNBQ1hDLFdBQVksU0FDWkMsS0FBTSxTQUNOQyxVQUFXLFNBQ1hDLEtBQU0sUUFDTkMsTUFBTyxNQUNQQyxZQUFhLFNBQ2JDLEtBQU0sUUFDTkMsU0FBVSxTQUNWQyxRQUFTLFNBQ1RDLFVBQVcsU0FDWEMsT0FBUSxRQUNSQyxNQUFPLFNBQ1BDLE1BQU8sU0FDUEMsU0FBVSxTQUNWQyxjQUFlLFNBQ2ZDLFVBQVcsUUFDWEMsYUFBYyxTQUNkQyxVQUFXLFNBQ1hDLFdBQVksU0FDWkMsVUFBVyxTQUNYQyxxQkFBc0IsU0FDdEJDLFVBQVcsU0FDWEMsV0FBWSxRQUNaQyxVQUFXLFNBQ1hDLFVBQVcsU0FDWEMsWUFBYSxTQUNiQyxjQUFlLFFBQ2ZDLGFBQWMsUUFDZEMsZUFBZ0IsUUFDaEJDLGVBQWdCLFFBQ2hCQyxlQUFnQixTQUNoQkMsWUFBYSxTQUNiQyxLQUFNLE1BQ05DLFVBQVcsUUFDWEMsTUFBTyxTQUNQQyxRQUFTLFNBQ1RDLE9BQVEsUUFDUkMsaUJBQWtCLFFBQ2xCQyxXQUFZLElBQ1pDLGFBQWMsU0FDZEMsYUFBYyxRQUNkQyxlQUFnQixRQUNoQkMsZ0JBQWlCLFFBQ2pCQyxrQkFBbUIsTUFDbkJDLGdCQUFpQixRQUNqQkMsZ0JBQWlCLFNBQ2pCQyxhQUFjLFFBQ2RDLFVBQVcsU0FDWEMsVUFBVyxTQUNYQyxTQUFVLFNBQ1ZDLFlBQWEsU0FDYkMsS0FBTSxJQUNOQyxRQUFTLFNBQ1RDLE1BQU8sUUFDUEMsVUFBVyxRQUNYQyxPQUFRLFNBQ1JDLFVBQVcsU0FDWEMsT0FBUSxTQUNSQyxjQUFlLFNBQ2ZDLFVBQVcsU0FDWEMsY0FBZSxTQUNmQyxjQUFlLFNBQ2ZDLFdBQVksU0FDWkMsVUFBVyxTQUNYQyxLQUFNLFNBQ05DLEtBQU0sU0FDTkMsS0FBTSxTQUNOQyxXQUFZLFNBQ1pDLE9BQVEsUUFDUkMsY0FBZSxRQUNmQyxJQUFLLFNBQ0xDLFVBQVcsU0FDWEMsVUFBVyxRQUNYQyxZQUFhLFFBQ2JDLE9BQVEsU0FDUkMsV0FBWSxTQUNaQyxTQUFVLFFBQ1ZDLFNBQVUsU0FDVkMsT0FBUSxTQUNSQyxPQUFRLFNBQ1JDLFFBQVMsUUFDVEMsVUFBVyxRQUNYQyxVQUFXLFFBQ1hDLFVBQVcsUUFDWEMsS0FBTSxTQUNOQyxZQUFhLE1BQ2JDLFVBQVcsUUFDWEMsSUFBSyxTQUNMQyxLQUFNLE1BQ05DLFFBQVMsU0FDVEMsT0FBUSxTQUNSQyxVQUFXLFFBQ1hDLE9BQVEsU0FDUkMsTUFBTyxTQUNQQyxNQUFPLFNBQ1BDLFdBQVksU0FDWkMsT0FBUSxTQUNSQyxZQUFhLFVBaUJmLFNBQVNDLEtBQ1AsT0FBT2o3RCxLQUFLazdELE1BQU1DLFlBT3BCLFNBQVNDLEtBQ1AsT0FBT3A3RCxLQUFLazdELE1BQU1HLFlBR0wsU0FBUzcwQixHQUFNODBCLEdBQzVCLElBQUlwOEMsRUFBR3E4QyxFQUVQLE9BREFELEdBQVVBLEVBQVMsSUFBSXYwQyxPQUFPdkUsZUFDdEJ0RCxFQUFJbXlDLEdBQU03aEQsS0FBSzhyRCxLQUFZQyxFQUFJcjhDLEVBQUUsR0FBRzVkLE9BQVE0ZCxFQUFJbUksU0FBU25JLEVBQUUsR0FBSSxJQUFXLElBQU5xOEMsRUFBVUMsR0FBS3Q4QyxHQUMvRSxJQUFOcThDLEVBQVUsSUFBSUUsR0FBS3Y4QyxHQUFLLEVBQUksR0FBUUEsR0FBSyxFQUFJLElBQVFBLEdBQUssRUFBSSxHQUFZLElBQUpBLEdBQWlCLEdBQUpBLElBQVksRUFBVSxHQUFKQSxFQUFVLEdBQ3pHLElBQU5xOEMsRUFBVUcsR0FBS3g4QyxHQUFLLEdBQUssSUFBTUEsR0FBSyxHQUFLLElBQU1BLEdBQUssRUFBSSxLQUFXLElBQUpBLEdBQVksS0FDckUsSUFBTnE4QyxFQUFVRyxHQUFNeDhDLEdBQUssR0FBSyxHQUFRQSxHQUFLLEVBQUksSUFBUUEsR0FBSyxFQUFJLEdBQVFBLEdBQUssRUFBSSxJQUFRQSxHQUFLLEVBQUksR0FBWSxJQUFKQSxJQUFrQixHQUFKQSxJQUFZLEVBQVUsR0FBSkEsR0FBWSxLQUNsSixPQUNDQSxFQUFJb3lDLEdBQWE5aEQsS0FBSzhyRCxJQUFXLElBQUlHLEdBQUl2OEMsRUFBRSxHQUFJQSxFQUFFLEdBQUlBLEVBQUUsR0FBSSxJQUMzREEsRUFBSXF5QyxHQUFhL2hELEtBQUs4ckQsSUFBVyxJQUFJRyxHQUFXLElBQVB2OEMsRUFBRSxHQUFXLElBQVksSUFBUEEsRUFBRSxHQUFXLElBQVksSUFBUEEsRUFBRSxHQUFXLElBQUssSUFDL0ZBLEVBQUlzeUMsR0FBY2hpRCxLQUFLOHJELElBQVdJLEdBQUt4OEMsRUFBRSxHQUFJQSxFQUFFLEdBQUlBLEVBQUUsR0FBSUEsRUFBRSxLQUMzREEsRUFBSXV5QyxHQUFjamlELEtBQUs4ckQsSUFBV0ksR0FBWSxJQUFQeDhDLEVBQUUsR0FBVyxJQUFZLElBQVBBLEVBQUUsR0FBVyxJQUFZLElBQVBBLEVBQUUsR0FBVyxJQUFLQSxFQUFFLEtBQy9GQSxFQUFJd3lDLEdBQWFsaUQsS0FBSzhyRCxJQUFXSyxHQUFLejhDLEVBQUUsR0FBSUEsRUFBRSxHQUFLLElBQUtBLEVBQUUsR0FBSyxJQUFLLElBQ3BFQSxFQUFJeXlDLEdBQWNuaUQsS0FBSzhyRCxJQUFXSyxHQUFLejhDLEVBQUUsR0FBSUEsRUFBRSxHQUFLLElBQUtBLEVBQUUsR0FBSyxJQUFLQSxFQUFFLElBQ3hFMHlDLEdBQU1qeUMsZUFBZTI3QyxHQUFVRSxHQUFLNUosR0FBTTBKLElBQy9CLGdCQUFYQSxFQUEyQixJQUFJRyxHQUFJeHpELElBQUtBLElBQUtBLElBQUssR0FDbEQsS0FHUixTQUFTdXpELEdBQUtsOEMsR0FDWixPQUFPLElBQUltOEMsR0FBSW44QyxHQUFLLEdBQUssSUFBTUEsR0FBSyxFQUFJLElBQVUsSUFBSkEsRUFBVSxHQUcxRCxTQUFTbzhDLEdBQUs3NEIsRUFBR25qQixFQUFHN0IsRUFBRy9CLEdBRXJCLE9BRElBLEdBQUssSUFBRyttQixFQUFJbmpCLEVBQUk3QixFQUFJNVYsS0FDakIsSUFBSXd6RCxHQUFJNTRCLEVBQUduakIsRUFBRzdCLEVBQUcvQixHQUduQixTQUFTOC9DLEdBQVc3YSxHQUV6QixPQURNQSxhQUFhZ1EsS0FBUWhRLEVBQUl2YSxHQUFNdWEsSUFDaENBLEVBRUUsSUFBSTBhLElBRFgxYSxFQUFJQSxFQUFFbWEsT0FDV3I0QixFQUFHa2UsRUFBRXJoQyxFQUFHcWhDLEVBQUVsakMsRUFBR2tqQyxFQUFFOGEsU0FGakIsSUFBSUosR0FLZCxTQUFTLEdBQUk1NEIsRUFBR25qQixFQUFHN0IsRUFBR2crQyxHQUMzQixPQUE0QixJQUFyQjd5RCxVQUFVMUgsT0FBZXM2RCxHQUFXLzRCLEdBQUssSUFBSTQ0QixHQUFJNTRCLEVBQUduakIsRUFBRzdCLEVBQWMsTUFBWGcrQyxFQUFrQixFQUFJQSxHQUdsRixTQUFTSixHQUFJNTRCLEVBQUduakIsRUFBRzdCLEVBQUdnK0MsR0FDM0I3N0QsS0FBSzZpQyxHQUFLQSxFQUNWN2lDLEtBQUswZixHQUFLQSxFQUNWMWYsS0FBSzZkLEdBQUtBLEVBQ1Y3ZCxLQUFLNjdELFNBQVdBLEVBMkJsQixTQUFTQyxLQUNQLE1BQU8sSUFBTXgwQyxHQUFJdG5CLEtBQUs2aUMsR0FBS3ZiLEdBQUl0bkIsS0FBSzBmLEdBQUs0SCxHQUFJdG5CLEtBQUs2ZCxHQUdwRCxTQUFTaytDLEtBQ1AsSUFBSWpnRCxFQUFJOWIsS0FBSzY3RCxRQUNiLE9BQWMsS0FEUS8vQyxFQUFJc1csTUFBTXRXLEdBQUssRUFBSS9SLEtBQUttb0IsSUFBSSxFQUFHbm9CLEtBQUtELElBQUksRUFBR2dTLEtBQy9DLE9BQVMsU0FDckIvUixLQUFLbW9CLElBQUksRUFBR25vQixLQUFLRCxJQUFJLElBQUtDLEtBQUtncEIsTUFBTS95QixLQUFLNmlDLElBQU0sSUFBTSxLQUN0RDk0QixLQUFLbW9CLElBQUksRUFBR25vQixLQUFLRCxJQUFJLElBQUtDLEtBQUtncEIsTUFBTS95QixLQUFLMGYsSUFBTSxJQUFNLEtBQ3REM1YsS0FBS21vQixJQUFJLEVBQUdub0IsS0FBS0QsSUFBSSxJQUFLQyxLQUFLZ3BCLE1BQU0veUIsS0FBSzZkLElBQU0sS0FDekMsSUFBTi9CLEVBQVUsSUFBTSxLQUFPQSxFQUFJLEtBR3BDLFNBQVN3TCxHQUFJdG1CLEdBRVgsUUFEQUEsRUFBUStJLEtBQUttb0IsSUFBSSxFQUFHbm9CLEtBQUtELElBQUksSUFBS0MsS0FBS2dwQixNQUFNL3hCLElBQVUsS0FDdkMsR0FBSyxJQUFNLElBQU1BLEVBQU00TyxTQUFTLElBR2xELFNBQVMrckQsR0FBS0ssRUFBR2p2QyxFQUFHd3VDLEVBQUd6L0MsR0FJckIsT0FISUEsR0FBSyxFQUFHa2dELEVBQUlqdkMsRUFBSXd1QyxFQUFJdHpELElBQ2ZzekQsR0FBSyxHQUFLQSxHQUFLLEVBQUdTLEVBQUlqdkMsRUFBSTlrQixJQUMxQjhrQixHQUFLLElBQUdpdkMsRUFBSS96RCxLQUNkLElBQUlnMEQsR0FBSUQsRUFBR2p2QyxFQUFHd3VDLEVBQUd6L0MsR0FHbkIsU0FBU29nRCxHQUFXbmIsR0FDekIsR0FBSUEsYUFBYWtiLEdBQUssT0FBTyxJQUFJQSxHQUFJbGIsRUFBRWliLEVBQUdqYixFQUFFaDBCLEVBQUdnMEIsRUFBRXdhLEVBQUd4YSxFQUFFOGEsU0FFdEQsR0FETTlhLGFBQWFnUSxLQUFRaFEsRUFBSXZhLEdBQU11YSxLQUNoQ0EsRUFBRyxPQUFPLElBQUlrYixHQUNuQixHQUFJbGIsYUFBYWtiLEdBQUssT0FBT2xiLEVBRTdCLElBQUlsZSxHQURKa2UsRUFBSUEsRUFBRW1hLE9BQ0lyNEIsRUFBSSxJQUNWbmpCLEVBQUlxaEMsRUFBRXJoQyxFQUFJLElBQ1Y3QixFQUFJa2pDLEVBQUVsakMsRUFBSSxJQUNWL1QsRUFBTUMsS0FBS0QsSUFBSSs0QixFQUFHbmpCLEVBQUc3QixHQUNyQnFVLEVBQU1ub0IsS0FBS21vQixJQUFJMlEsRUFBR25qQixFQUFHN0IsR0FDckJtK0MsRUFBSS96RCxJQUNKOGtCLEVBQUltRixFQUFNcG9CLEVBQ1Z5eEQsR0FBS3JwQyxFQUFNcG9CLEdBQU8sRUFVdEIsT0FUSWlqQixHQUNhaXZDLEVBQVhuNUIsSUFBTTNRLEdBQVV4UyxFQUFJN0IsR0FBS2tQLEVBQWMsR0FBVHJOLEVBQUk3QixHQUM3QjZCLElBQU13UyxHQUFVclUsRUFBSWdsQixHQUFLOVYsRUFBSSxHQUM1QjhWLEVBQUluakIsR0FBS3FOLEVBQUksRUFDdkJBLEdBQUt3dUMsRUFBSSxHQUFNcnBDLEVBQU1wb0IsRUFBTSxFQUFJb29CLEVBQU1wb0IsRUFDckNreUQsR0FBSyxJQUVManZDLEVBQUl3dUMsRUFBSSxHQUFLQSxFQUFJLEVBQUksRUFBSVMsRUFFcEIsSUFBSUMsR0FBSUQsRUFBR2p2QyxFQUFHd3VDLEVBQUd4YSxFQUFFOGEsU0FHckIsU0FBU00sR0FBSUgsRUFBR2p2QyxFQUFHd3VDLEVBQUdNLEdBQzNCLE9BQTRCLElBQXJCN3lELFVBQVUxSCxPQUFlNDZELEdBQVdGLEdBQUssSUFBSUMsR0FBSUQsRUFBR2p2QyxFQUFHd3VDLEVBQWMsTUFBWE0sRUFBa0IsRUFBSUEsR0FHekYsU0FBU0ksR0FBSUQsRUFBR2p2QyxFQUFHd3VDLEVBQUdNLEdBQ3BCNzdELEtBQUtnOEQsR0FBS0EsRUFDVmg4RCxLQUFLK3NCLEdBQUtBLEVBQ1Yvc0IsS0FBS3U3RCxHQUFLQSxFQUNWdjdELEtBQUs2N0QsU0FBV0EsRUF5Q2xCLFNBQVNPLEdBQVFKLEVBQUcxUixFQUFJK1IsR0FDdEIsT0FHWSxLQUhKTCxFQUFJLEdBQUsxUixHQUFNK1IsRUFBSy9SLEdBQU0wUixFQUFJLEdBQ2hDQSxFQUFJLElBQU1LLEVBQ1ZMLEVBQUksSUFBTTFSLEdBQU0rUixFQUFLL1IsSUFBTyxJQUFNMFIsR0FBSyxHQUN2QzFSLEdDalhELFNBQVNnUyxHQUFNbFAsRUFBSW1QLEVBQUlDLEVBQUlDLEVBQUlDLEdBQ3BDLElBQUl2UCxFQUFLQyxFQUFLQSxFQUFJdVAsRUFBS3hQLEVBQUtDLEVBQzVCLFFBQVMsRUFBSSxFQUFJQSxFQUFLLEVBQUlELEVBQUt3UCxHQUFNSixHQUM5QixFQUFJLEVBQUlwUCxFQUFLLEVBQUl3UCxHQUFNSCxHQUN2QixFQUFJLEVBQUlwUCxFQUFLLEVBQUlELEVBQUssRUFBSXdQLEdBQU1GLEVBQ2pDRSxFQUFLRCxHQUFNLEVEb0tuQixHQUFPM0wsR0FBT3ZxQixHQUFPLENBQ25CcWxCLEtBQU0sU0FBUytRLEdBQ2IsT0FBTzk1RCxPQUFPOGtCLE9BQU8sSUFBSTVuQixLQUFLcUksWUFBYXJJLEtBQU00OEQsSUFFbkRDLFlBQWEsV0FDWCxPQUFPNzhELEtBQUtrN0QsTUFBTTJCLGVBRXBCdjFDLElBQUsyekMsR0FDTEUsVUFBV0YsR0FDWDZCLFVBU0YsV0FDRSxPQUFPWixHQUFXbDhELE1BQU04OEQsYUFUeEJ6QixVQUFXRCxHQUNYeHJELFNBQVV3ckQsS0E2RFosR0FBT0ssR0FBSyxHQUFLM0ssR0FBT0MsR0FBTyxDQUM3QkUsU0FBVSxTQUFTL2hDLEdBRWpCLE9BREFBLEVBQVMsTUFBTEEsRUFBWStoQyxHQUFXbG5ELEtBQUs4VixJQUFJb3hDLEdBQVUvaEMsR0FDdkMsSUFBSXVzQyxHQUFJejdELEtBQUs2aUMsRUFBSTNULEVBQUdsdkIsS0FBSzBmLEVBQUl3UCxFQUFHbHZCLEtBQUs2ZCxFQUFJcVIsRUFBR2x2QixLQUFLNjdELFVBRTFEN0ssT0FBUSxTQUFTOWhDLEdBRWYsT0FEQUEsRUFBUyxNQUFMQSxFQUFZOGhDLEdBQVNqbkQsS0FBSzhWLElBQUlteEMsR0FBUTloQyxHQUNuQyxJQUFJdXNDLEdBQUl6N0QsS0FBSzZpQyxFQUFJM1QsRUFBR2x2QixLQUFLMGYsRUFBSXdQLEVBQUdsdkIsS0FBSzZkLEVBQUlxUixFQUFHbHZCLEtBQUs2N0QsVUFFMURYLElBQUssV0FDSCxPQUFPbDdELE1BRVQ2OEQsWUFBYSxXQUNYLE9BQVMsSUFBTzc4RCxLQUFLNmlDLEdBQUs3aUMsS0FBSzZpQyxFQUFJLFFBQzFCLElBQU83aUMsS0FBSzBmLEdBQUsxZixLQUFLMGYsRUFBSSxRQUMxQixJQUFPMWYsS0FBSzZkLEdBQUs3ZCxLQUFLNmQsRUFBSSxPQUMzQixHQUFLN2QsS0FBSzY3RCxTQUFXNzdELEtBQUs2N0QsU0FBVyxHQUUvQ3YwQyxJQUFLdzBDLEdBQ0xYLFVBQVdXLEdBQ1hULFVBQVdVLEdBQ1huc0QsU0FBVW1zRCxNQWlFWixHQUFPRSxHQUFLRSxHQUFLckwsR0FBT0MsR0FBTyxDQUM3QkUsU0FBVSxTQUFTL2hDLEdBRWpCLE9BREFBLEVBQVMsTUFBTEEsRUFBWStoQyxHQUFXbG5ELEtBQUs4VixJQUFJb3hDLEdBQVUvaEMsR0FDdkMsSUFBSStzQyxHQUFJajhELEtBQUtnOEQsRUFBR2g4RCxLQUFLK3NCLEVBQUcvc0IsS0FBS3U3RCxFQUFJcnNDLEVBQUdsdkIsS0FBSzY3RCxVQUVsRDdLLE9BQVEsU0FBUzloQyxHQUVmLE9BREFBLEVBQVMsTUFBTEEsRUFBWThoQyxHQUFTam5ELEtBQUs4VixJQUFJbXhDLEdBQVE5aEMsR0FDbkMsSUFBSStzQyxHQUFJajhELEtBQUtnOEQsRUFBR2g4RCxLQUFLK3NCLEVBQUcvc0IsS0FBS3U3RCxFQUFJcnNDLEVBQUdsdkIsS0FBSzY3RCxVQUVsRFgsSUFBSyxXQUNILElBQUljLEVBQUloOEQsS0FBS2c4RCxFQUFJLElBQXFCLEtBQWRoOEQsS0FBS2c4RCxFQUFJLEdBQzdCanZDLEVBQUlxRixNQUFNNHBDLElBQU01cEMsTUFBTXB5QixLQUFLK3NCLEdBQUssRUFBSS9zQixLQUFLK3NCLEVBQ3pDd3VDLEVBQUl2N0QsS0FBS3U3RCxFQUNUYyxFQUFLZCxHQUFLQSxFQUFJLEdBQU1BLEVBQUksRUFBSUEsR0FBS3h1QyxFQUNqQ3U5QixFQUFLLEVBQUlpUixFQUFJYyxFQUNqQixPQUFPLElBQUlaLEdBQ1RXLEdBQVFKLEdBQUssSUFBTUEsRUFBSSxJQUFNQSxFQUFJLElBQUsxUixFQUFJK1IsR0FDMUNELEdBQVFKLEVBQUcxUixFQUFJK1IsR0FDZkQsR0FBUUosRUFBSSxJQUFNQSxFQUFJLElBQU1BLEVBQUksSUFBSzFSLEVBQUkrUixHQUN6Q3I4RCxLQUFLNjdELFVBR1RnQixZQUFhLFdBQ1gsT0FBUSxHQUFLNzhELEtBQUsrc0IsR0FBSy9zQixLQUFLK3NCLEdBQUssR0FBS3FGLE1BQU1weUIsS0FBSytzQixLQUN6QyxHQUFLL3NCLEtBQUt1N0QsR0FBS3Y3RCxLQUFLdTdELEdBQUssR0FDekIsR0FBS3Y3RCxLQUFLNjdELFNBQVc3N0QsS0FBSzY3RCxTQUFXLEdBRS9DaUIsVUFBVyxXQUNULElBQUloaEQsRUFBSTliLEtBQUs2N0QsUUFDYixPQUFjLEtBRFEvL0MsRUFBSXNXLE1BQU10VyxHQUFLLEVBQUkvUixLQUFLbW9CLElBQUksRUFBR25vQixLQUFLRCxJQUFJLEVBQUdnUyxLQUMvQyxPQUFTLFVBQ3BCOWIsS0FBS2c4RCxHQUFLLEdBQUssS0FDQSxLQUFmaDhELEtBQUsrc0IsR0FBSyxHQUFXLE1BQ04sS0FBZi9zQixLQUFLdTdELEdBQUssR0FBVyxLQUNmLElBQU56L0MsRUFBVSxJQUFNLEtBQU9BLEVBQUksU0V4V3RDLFNBQWU0SCxHQUFLLElBQU1BLEVDeUJYLFNBQVNxNUMsR0FBUWpoRCxFQUFHK0IsR0FDakMsSUFBSWdqQyxFQUFJaGpDLEVBQUkvQixFQUNaLE9BQU8ra0MsRUF6QlQsU0FBZ0Iva0MsRUFBRytrQyxHQUNqQixPQUFPLFNBQVM1d0IsR0FDZCxPQUFPblUsRUFBSW1VLEVBQUk0d0IsR0F1Qk5tYyxDQUFPbGhELEVBQUcra0MsR0FBSyxHQUFTenVCLE1BQU10VyxHQUFLK0IsRUFBSS9CLEdDdEJwRCxTQUFlLFNBQVVtaEQsRUFBU2h3QyxHQUNoQyxJQUFJdVosRURhQyxTQUFldlosR0FDcEIsT0FBb0IsSUFBWkEsR0FBS0EsR0FBVzh2QyxHQUFVLFNBQVNqaEQsRUFBRytCLEdBQzVDLE9BQU9BLEVBQUkvQixFQWJmLFNBQXFCQSxFQUFHK0IsRUFBR29QLEdBQ3pCLE9BQU9uUixFQUFJL1IsS0FBSzhWLElBQUkvRCxFQUFHbVIsR0FBSXBQLEVBQUk5VCxLQUFLOFYsSUFBSWhDLEVBQUdvUCxHQUFLblIsRUFBR21SLEVBQUksRUFBSUEsRUFBRyxTQUFTZ0QsR0FDckUsT0FBT2xtQixLQUFLOFYsSUFBSS9ELEVBQUltVSxFQUFJcFMsRUFBR29QLElBV1ppd0MsQ0FBWXBoRCxFQUFHK0IsRUFBR29QLEdBQUssR0FBU21GLE1BQU10VyxHQUFLK0IsRUFBSS9CLElDZnBEcWhELENBQU1sd0MsR0FFbEIsU0FBU2l1QyxFQUFJdnpELEVBQU8yQyxHQUNsQixJQUFJdTRCLEVBQUkyRCxHQUFPNytCLEVBQVEsR0FBU0EsSUFBUWs3QixHQUFJdjRCLEVBQU0sR0FBU0EsSUFBTXU0QixHQUM3RG5qQixFQUFJOG1CLEVBQU03K0IsRUFBTStYLEVBQUdwVixFQUFJb1YsR0FDdkI3QixFQUFJMm9CLEVBQU03K0IsRUFBTWtXLEVBQUd2VCxFQUFJdVQsR0FDdkJnK0MsRUFBVWtCLEdBQVFwMUQsRUFBTWswRCxRQUFTdnhELEVBQUl1eEQsU0FDekMsT0FBTyxTQUFTNXJDLEdBS2QsT0FKQXRvQixFQUFNazdCLEVBQUlBLEVBQUU1UyxHQUNadG9CLEVBQU0rWCxFQUFJQSxFQUFFdVEsR0FDWnRvQixFQUFNa1csRUFBSUEsRUFBRW9TLEdBQ1p0b0IsRUFBTWswRCxRQUFVQSxFQUFRNXJDLEdBQ2pCdG9CLEVBQVEsSUFNbkIsT0FGQXV6RCxFQUFJaUMsTUFBUUYsRUFFTC9CLEVBbkJULENBb0JHLEdBRUgsU0FBU2tDLEdBQVVDLEdBQ2pCLE9BQU8sU0FBU0MsR0FDZCxJQUlJdDFELEVBQUd3K0IsRUFKSGxuQixFQUFJZytDLEVBQU9oOEQsT0FDWHVoQyxFQUFJLElBQUlsaUMsTUFBTTJlLEdBQ2RJLEVBQUksSUFBSS9lLE1BQU0yZSxHQUNkekIsRUFBSSxJQUFJbGQsTUFBTTJlLEdBRWxCLElBQUt0WCxFQUFJLEVBQUdBLEVBQUlzWCxJQUFLdFgsRUFDbkJ3K0IsRUFBUSxHQUFTODJCLEVBQU90MUQsSUFDeEI2NkIsRUFBRTc2QixHQUFLdytCLEVBQU0zRCxHQUFLLEVBQ2xCbmpCLEVBQUUxWCxHQUFLdytCLEVBQU05bUIsR0FBSyxFQUNsQjdCLEVBQUU3VixHQUFLdytCLEVBQU0zb0IsR0FBSyxFQU1wQixPQUpBZ2xCLEVBQUl3NkIsRUFBT3g2QixHQUNYbmpCLEVBQUkyOUMsRUFBTzM5QyxHQUNYN0IsRUFBSXcvQyxFQUFPeC9DLEdBQ1gyb0IsRUFBTXExQixRQUFVLEVBQ1QsU0FBUzVyQyxHQUlkLE9BSEF1VyxFQUFNM0QsRUFBSUEsRUFBRTVTLEdBQ1p1VyxFQUFNOW1CLEVBQUlBLEVBQUV1USxHQUNadVcsRUFBTTNvQixFQUFJQSxFQUFFb1MsR0FDTHVXLEVBQVEsS0FLQzQyQixJSDdDUCxTQUFTcmxELEdBQ3RCLElBQUl1SCxFQUFJdkgsRUFBT3pXLE9BQVMsRUFDeEIsT0FBTyxTQUFTMnVCLEdBQ2QsSUFBSWpvQixFQUFJaW9CLEdBQUssRUFBS0EsRUFBSSxFQUFLQSxHQUFLLEdBQUtBLEVBQUksRUFBRzNRLEVBQUksR0FBS3ZWLEtBQUswVSxNQUFNd1IsRUFBSTNRLEdBQ2hFazlDLEVBQUt6a0QsRUFBTy9QLEdBQ1p5MEQsRUFBSzFrRCxFQUFPL1AsRUFBSSxHQUNoQnUwRCxFQUFLdjBELEVBQUksRUFBSStQLEVBQU8vUCxFQUFJLEdBQUssRUFBSXcwRCxFQUFLQyxFQUN0Q0MsRUFBSzEwRCxFQUFJc1gsRUFBSSxFQUFJdkgsRUFBTy9QLEVBQUksR0FBSyxFQUFJeTBELEVBQUtELEVBQzlDLE9BQU9GLElBQU9yc0MsRUFBSWpvQixFQUFJc1gsR0FBS0EsRUFBR2k5QyxFQUFJQyxFQUFJQyxFQUFJQyxPR3NDbEJVLElDcERiLFNBQVNybEQsR0FDdEIsSUFBSXVILEVBQUl2SCxFQUFPelcsT0FDZixPQUFPLFNBQVMydUIsR0FDZCxJQUFJam9CLEVBQUkrQixLQUFLMFUsUUFBUXdSLEdBQUssR0FBSyxJQUFNQSxFQUFJQSxHQUFLM1EsR0FDMUNpOUMsRUFBS3hrRCxHQUFRL1AsRUFBSXNYLEVBQUksR0FBS0EsR0FDMUJrOUMsRUFBS3prRCxFQUFPL1AsRUFBSXNYLEdBQ2hCbTlDLEVBQUsxa0QsR0FBUS9QLEVBQUksR0FBS3NYLEdBQ3RCbzlDLEVBQUsza0QsR0FBUS9QLEVBQUksR0FBS3NYLEdBQzFCLE9BQU9nOUMsSUFBT3JzQyxFQUFJam9CLEVBQUlzWCxHQUFLQSxFQUFHaTlDLEVBQUlDLEVBQUlDLEVBQUlDLE9EMkN2QyxJRW5ESGEsR0FBTSw4Q0FDTkMsR0FBTSxJQUFJemdELE9BQU93Z0QsR0FBSXJwRCxPQUFRLEtBY2xCLFlBQVM0SCxFQUFHK0IsR0FDekIsSUFDSTQvQyxFQUNBQyxFQUNBQyxFQUhBQyxFQUFLTCxHQUFJcnhDLFVBQVlzeEMsR0FBSXR4QyxVQUFZLEVBSXJDbGtCLEdBQUssRUFDTCtrQixFQUFJLEdBQ0ppRCxFQUFJLEdBTVIsSUFIQWxVLEdBQVEsR0FBSStCLEdBQVEsSUFHWjQvQyxFQUFLRixHQUFJL3RELEtBQUtzTSxNQUNkNGhELEVBQUtGLEdBQUlodUQsS0FBS3FPLE1BQ2Y4L0MsRUFBS0QsRUFBR3Q4RCxPQUFTdzhELElBQ3BCRCxFQUFLOS9DLEVBQUVoVyxNQUFNKzFELEVBQUlELEdBQ2I1d0MsRUFBRS9rQixHQUFJK2tCLEVBQUUva0IsSUFBTTIxRCxFQUNiNXdDLElBQUkva0IsR0FBSzIxRCxJQUVYRixFQUFLQSxFQUFHLE9BQVNDLEVBQUtBLEVBQUcsSUFDeEIzd0MsRUFBRS9rQixHQUFJK2tCLEVBQUUva0IsSUFBTTAxRCxFQUNiM3dDLElBQUkva0IsR0FBSzAxRCxHQUVkM3dDLElBQUkva0IsR0FBSyxLQUNUZ29CLEVBQUV6akIsS0FBSyxDQUFDdkUsRUFBR0EsRUFBRzBiLEVBQUc5YyxHQUFPNjJELEVBQUlDLE1BRTlCRSxFQUFLSixHQUFJdHhDLFVBWVgsT0FSSTB4QyxFQUFLLy9DLEVBQUV2YyxTQUNUcThELEVBQUs5L0MsRUFBRWhXLE1BQU0rMUQsR0FDVDd3QyxFQUFFL2tCLEdBQUkra0IsRUFBRS9rQixJQUFNMjFELEVBQ2I1d0MsSUFBSS9rQixHQUFLMjFELEdBS1Q1d0MsRUFBRXpyQixPQUFTLEVBQUswdUIsRUFBRSxHQTdDM0IsU0FBYW5TLEdBQ1gsT0FBTyxTQUFTb1MsR0FDZCxPQUFPcFMsRUFBRW9TLEdBQUssSUE0Q1Y0dEMsQ0FBSTd0QyxFQUFFLEdBQUd0TSxHQXBEakIsU0FBYzdGLEdBQ1osT0FBTyxXQUNMLE9BQU9BLEdBbURIaWdELENBQUtqZ0QsSUFDSkEsRUFBSW1TLEVBQUUxdUIsT0FBUSxTQUFTMnVCLEdBQ3RCLElBQUssSUFBVzh3QixFQUFQLzRDLEVBQUksRUFBTUEsRUFBSTZWLElBQUs3VixFQUFHK2tCLEdBQUdnMEIsRUFBSS93QixFQUFFaG9CLElBQUlBLEdBQUsrNEMsRUFBRXI5QixFQUFFdU0sR0FDckQsT0FBT2xELEVBQUUzTyxLQUFLLE1DMURULFlBQVN0QyxFQUFHK0IsR0FDekIsSUFBSUMsRUFDSixPQUFxQixpQkFBTkQsRUFBaUIsR0FDMUJBLGFBQWEyb0IsR0FBUSxJQUNwQjFvQixFQUFJMG9CLEdBQU0zb0IsS0FBT0EsRUFBSUMsRUFBRyxJQUN6QixJQUFtQmhDLEVBQUcrQixHQ0g5QixTQUFTLEdBQVdyYyxHQUNsQixPQUFPLFdBQ0x4QixLQUFLMmpELGdCQUFnQm5pRCxJQUl6QixTQUFTLEdBQWFxaUQsR0FDcEIsT0FBTyxXQUNMN2pELEtBQUs4akQsa0JBQWtCRCxFQUFTMXFCLE1BQU8wcUIsRUFBU0osUUFJcEQsU0FBUyxHQUFhamlELEVBQU11OEQsRUFBYXhqQyxHQUN2QyxJQUFJeWpDLEVBRUFDLEVBREFDLEVBQVUzakMsRUFBUyxHQUV2QixPQUFPLFdBQ0wsSUFBSTRqQyxFQUFVbitELEtBQUt1bEQsYUFBYS9qRCxHQUNoQyxPQUFPMjhELElBQVlELEVBQVUsS0FDdkJDLElBQVlILEVBQVdDLEVBQ3ZCQSxFQUFlRixFQUFZQyxFQUFXRyxFQUFTNWpDLElBSXpELFNBQVMsR0FBZXNwQixFQUFVa2EsRUFBYXhqQyxHQUM3QyxJQUFJeWpDLEVBRUFDLEVBREFDLEVBQVUzakMsRUFBUyxHQUV2QixPQUFPLFdBQ0wsSUFBSTRqQyxFQUFVbitELEtBQUtrckQsZUFBZXJILEVBQVMxcUIsTUFBTzBxQixFQUFTSixPQUMzRCxPQUFPMGEsSUFBWUQsRUFBVSxLQUN2QkMsSUFBWUgsRUFBV0MsRUFDdkJBLEVBQWVGLEVBQVlDLEVBQVdHLEVBQVM1akMsSUFJekQsU0FBUyxHQUFhLzRCLEVBQU11OEQsRUFBYS84RCxHQUN2QyxJQUFJZzlELEVBQ0FJLEVBQ0FILEVBQ0osT0FBTyxXQUNMLElBQUlFLEVBQStCRCxFQUF0QjNqQyxFQUFTdjVCLEVBQU1oQixNQUM1QixHQUFjLE1BQVZ1NkIsRUFHSixPQUZBNGpDLEVBQVVuK0QsS0FBS3VsRCxhQUFhL2pELE9BQzVCMDhELEVBQVUzakMsRUFBUyxJQUNVLEtBQ3ZCNGpDLElBQVlILEdBQVlFLElBQVlFLEVBQVdILEdBQzlDRyxFQUFXRixFQUFTRCxFQUFlRixFQUFZQyxFQUFXRyxFQUFTNWpDLElBTDFDdjZCLEtBQUsyakQsZ0JBQWdCbmlELElBU3pELFNBQVMsR0FBZXFpRCxFQUFVa2EsRUFBYS84RCxHQUM3QyxJQUFJZzlELEVBQ0FJLEVBQ0FILEVBQ0osT0FBTyxXQUNMLElBQUlFLEVBQStCRCxFQUF0QjNqQyxFQUFTdjVCLEVBQU1oQixNQUM1QixHQUFjLE1BQVZ1NkIsRUFHSixPQUZBNGpDLEVBQVVuK0QsS0FBS2tyRCxlQUFlckgsRUFBUzFxQixNQUFPMHFCLEVBQVNKLFdBQ3ZEeWEsRUFBVTNqQyxFQUFTLElBQ1UsS0FDdkI0akMsSUFBWUgsR0FBWUUsSUFBWUUsRUFBV0gsR0FDOUNHLEVBQVdGLEVBQVNELEVBQWVGLEVBQVlDLEVBQVdHLEVBQVM1akMsSUFMMUN2NkIsS0FBSzhqRCxrQkFBa0JELEVBQVMxcUIsTUFBTzBxQixFQUFTSixRQzVEcEYsU0FBUzRhLEdBQWdCNzhELEVBQU13RyxHQUM3QixPQUFPLFNBQVNpb0IsR0FDZGp3QixLQUFLZ2tELGFBQWF4aUQsRUFBTXdHLEVBQUV6RCxLQUFLdkUsS0FBTWl3QixLQUl6QyxTQUFTcXVDLEdBQWtCemEsRUFBVTc3QyxHQUNuQyxPQUFPLFNBQVNpb0IsR0FDZGp3QixLQUFLa2tELGVBQWVMLEVBQVMxcUIsTUFBTzBxQixFQUFTSixNQUFPejdDLEVBQUV6RCxLQUFLdkUsS0FBTWl3QixLQUlyRSxTQUFTc3VDLEdBQVkxYSxFQUFVN2lELEdBQzdCLElBQUlrc0QsRUFBSXpELEVBQ1IsU0FBU3VFLElBQ1AsSUFBSWhtRCxFQUFJaEgsRUFBTWdOLE1BQU1oTyxLQUFNZ0osV0FFMUIsT0FESWhCLElBQU15aEQsSUFBSXlELEdBQU16RCxFQUFLemhELElBQU1zMkQsR0FBa0J6YSxFQUFVNzdDLElBQ3BEa2xELEVBR1QsT0FEQWMsRUFBTXdRLE9BQVN4OUQsRUFDUmd0RCxFQUdULFNBQVN5USxHQUFVajlELEVBQU1SLEdBQ3ZCLElBQUlrc0QsRUFBSXpELEVBQ1IsU0FBU3VFLElBQ1AsSUFBSWhtRCxFQUFJaEgsRUFBTWdOLE1BQU1oTyxLQUFNZ0osV0FFMUIsT0FESWhCLElBQU15aEQsSUFBSXlELEdBQU16RCxFQUFLemhELElBQU1xMkQsR0FBZ0I3OEQsRUFBTXdHLElBQzlDa2xELEVBR1QsT0FEQWMsRUFBTXdRLE9BQVN4OUQsRUFDUmd0RCxFQy9CVCxTQUFTMFEsR0FBY3JzRCxFQUFJclIsR0FDekIsT0FBTyxXQUNMdTRCLEdBQUt2NUIsS0FBTXFTLEdBQUl3NkMsT0FBUzdyRCxFQUFNZ04sTUFBTWhPLEtBQU1nSixZQUk5QyxTQUFTMjFELEdBQWN0c0QsRUFBSXJSLEdBQ3pCLE9BQU9BLEdBQVNBLEVBQU8sV0FDckJ1NEIsR0FBS3Y1QixLQUFNcVMsR0FBSXc2QyxNQUFRN3JELEdDUjNCLFNBQVM0OUQsR0FBaUJ2c0QsRUFBSXJSLEdBQzVCLE9BQU8sV0FDTCxHQUFJaEIsS0FBTXFTLEdBQUk2N0MsVUFBWWx0RCxFQUFNZ04sTUFBTWhPLEtBQU1nSixZQUloRCxTQUFTNjFELEdBQWlCeHNELEVBQUlyUixHQUM1QixPQUFPQSxHQUFTQSxFQUFPLFdBQ3JCLEdBQUloQixLQUFNcVMsR0FBSTY3QyxTQUFXbHRELEdDUjdCLFNBQVM4OUQsR0FBYXpzRCxFQUFJclIsR0FDeEIsR0FBcUIsbUJBQVZBLEVBQXNCLE1BQU0sSUFBSTJ6QixNQUMzQyxPQUFPLFdBQ0wsR0FBSTMwQixLQUFNcVMsR0FBSTg3QyxLQUFPbnRELEdDS3pCLFNBQVMrOUQsR0FBVzFzRCxFQUFJN1EsRUFBTTZ2QixHQUM1QixJQUFJMnRDLEVBQUtDLEVBQUtDLEVBVGhCLFNBQWUxOUQsR0FDYixPQUFRQSxFQUFPLElBQUl1bEIsT0FBT2xNLE1BQU0sU0FBU3ROLE9BQU0sU0FBUzBpQixHQUN0RCxJQUFJam9CLEVBQUlpb0IsRUFBRTdqQixRQUFRLEtBRWxCLE9BRElwRSxHQUFLLElBQUdpb0IsRUFBSUEsRUFBRXBvQixNQUFNLEVBQUdHLEtBQ25CaW9CLEdBQVcsVUFBTkEsS0FLS3RvQixDQUFNbkcsR0FBUSszQixHQUFPLEdBQ3pDLE9BQU8sV0FDTCxJQUFJNjBCLEVBQVc4USxFQUFJbC9ELEtBQU1xUyxHQUNyQnExQyxFQUFLMEcsRUFBUzFHLEdBS2RBLElBQU9zWCxJQUFNQyxHQUFPRCxFQUFNdFgsR0FBSW1FLFFBQVFuRSxHQUFHbG1ELEVBQU02dkIsR0FFbkQrOEIsRUFBUzFHLEdBQUt1WCxHQ25CbEIsSUFBSSxHQUFZLHlCQ2lCaEIsU0FBUyxHQUFZejlELEdBQ25CLE9BQU8sV0FDTHhCLEtBQUtzcEIsTUFBTWk3QixlQUFlL2lELElDckI5QixTQUFTMjlELEdBQWlCMzlELEVBQU13RyxFQUFHeThDLEdBQ2pDLE9BQU8sU0FBU3gwQixHQUNkandCLEtBQUtzcEIsTUFBTW83QixZQUFZbGpELEVBQU13RyxFQUFFekQsS0FBS3ZFLEtBQU1pd0IsR0FBSXcwQixJQUlsRCxTQUFTMmEsR0FBVzU5RCxFQUFNUixFQUFPeWpELEdBQy9CLElBQUl4MEIsRUFBR3c1QixFQUNQLFNBQVN1RSxJQUNQLElBQUlobUQsRUFBSWhILEVBQU1nTixNQUFNaE8sS0FBTWdKLFdBRTFCLE9BREloQixJQUFNeWhELElBQUl4NUIsR0FBS3c1QixFQUFLemhELElBQU1tM0QsR0FBaUIzOUQsRUFBTXdHLEVBQUd5OEMsSUFDakR4MEIsRUFHVCxPQURBKzlCLEVBQU13USxPQUFTeDlELEVBQ1JndEQsRUNkVCxTQUFTcVIsR0FBZ0JyM0QsR0FDdkIsT0FBTyxTQUFTaW9CLEdBQ2Rqd0IsS0FBSytsRCxZQUFjLzlDLEVBQUV6RCxLQUFLdkUsS0FBTWl3QixJQUlwQyxTQUFTcXZDLEdBQVV0K0QsR0FDakIsSUFBSWtzRCxFQUFJekQsRUFDUixTQUFTdUUsSUFDUCxJQUFJaG1ELEVBQUloSCxFQUFNZ04sTUFBTWhPLEtBQU1nSixXQUUxQixPQURJaEIsSUFBTXloRCxJQUFJeUQsR0FBTXpELEVBQUt6aEQsSUFBTXEzRCxHQUFnQnIzRCxJQUN4Q2tsRCxFQUdULE9BREFjLEVBQU13USxPQUFTeDlELEVBQ1JndEQsRUNRVCxJQUFJMzdDLEdBQUssRUFFRixTQUFTLEdBQVd3SixFQUFRMHNDLEVBQVMvbUQsRUFBTTZRLEdBQ2hEclMsS0FBS3dvRCxRQUFVM3NDLEVBQ2Y3YixLQUFLeW9ELFNBQVdGLEVBQ2hCdm9ELEtBQUt1L0QsTUFBUS85RCxFQUNieEIsS0FBSzZ3RCxJQUFNeCtDLEVBT04sU0FBU210RCxLQUNkLFFBQVNudEQsR0FHWCxJQUFJb3RELEdBQXNCLGFBRTFCLEdBQVc3K0QsVUFWSSxTQUFvQlksR0FDakMsT0FBTyxLQUFZb3ZELFdBQVdwdkQsSUFTRVosVUFBWSxDQUM1Q3lILFlBQWEsR0FDYnNnRCxPQ3ZDYSxTQUFTQSxHQUN0QixJQUFJbm5ELEVBQU94QixLQUFLdS9ELE1BQ1psdEQsRUFBS3JTLEtBQUs2d0QsSUFFUSxtQkFBWGxJLElBQXVCQSxFQUFTdEgsRUFBU3NILElBRXBELElBQUssSUFBSTlzQyxFQUFTN2IsS0FBS3dvRCxRQUFTdHBDLEVBQUlyRCxFQUFPdmEsT0FBUXNuRCxFQUFZLElBQUlqb0QsTUFBTXVlLEdBQUk5VyxFQUFJLEVBQUdBLEVBQUk4VyxJQUFLOVcsRUFDM0YsSUFBSyxJQUFpRm1jLEVBQU1za0MsRUFBbkZ2RyxFQUFRem1DLEVBQU96VCxHQUFJa1gsRUFBSWdqQyxFQUFNaGhELE9BQVF3bkQsRUFBV0YsRUFBVXhnRCxHQUFLLElBQUl6SCxNQUFNMmUsR0FBbUJ0WCxFQUFJLEVBQUdBLEVBQUlzWCxJQUFLdFgsR0FDOUd1YyxFQUFPKzlCLEVBQU10NkMsTUFBUTZnRCxFQUFVRixFQUFPcGtELEtBQUtnZ0IsRUFBTUEsRUFBSzY5QixTQUFVcDZDLEVBQUdzNkMsTUFDbEUsYUFBYy85QixJQUFNc2tDLEVBQVF6RyxTQUFXNzlCLEVBQUs2OUIsVUFDaEQwRyxFQUFTOWdELEdBQUs2Z0QsRUFDZHVGLEdBQVN0RixFQUFTOWdELEdBQUl4RyxFQUFNNlEsRUFBSXJLLEVBQUc4Z0QsRUFBVSxHQUFJdmtDLEVBQU1sUyxLQUs3RCxPQUFPLElBQUksR0FBV3UyQyxFQUFXNW9ELEtBQUt5b0QsU0FBVWpuRCxFQUFNNlEsSUR3QnREMDJDLFVFeENhLFNBQVNKLEdBQ3RCLElBQUlubkQsRUFBT3hCLEtBQUt1L0QsTUFDWmx0RCxFQUFLclMsS0FBSzZ3RCxJQUVRLG1CQUFYbEksSUFBdUJBLEVBQVNNLEVBQVlOLElBRXZELElBQUssSUFBSTlzQyxFQUFTN2IsS0FBS3dvRCxRQUFTdHBDLEVBQUlyRCxFQUFPdmEsT0FBUXNuRCxFQUFZLEdBQUlMLEVBQVUsR0FBSW5nRCxFQUFJLEVBQUdBLEVBQUk4VyxJQUFLOVcsRUFDL0YsSUFBSyxJQUF5Q21jLEVBQXJDKzlCLEVBQVF6bUMsRUFBT3pULEdBQUlrWCxFQUFJZ2pDLEVBQU1oaEQsT0FBYzBHLEVBQUksRUFBR0EsRUFBSXNYLElBQUt0WCxFQUNsRSxHQUFJdWMsRUFBTys5QixFQUFNdDZDLEdBQUksQ0FDbkIsSUFBSyxJQUEyRGc3QyxFQUF2RDlCLEVBQVd5SCxFQUFPcGtELEtBQUtnZ0IsRUFBTUEsRUFBSzY5QixTQUFVcDZDLEVBQUdzNkMsR0FBZW9kLEVBQVUsR0FBSW43QyxFQUFNbFMsR0FBSzZjLEVBQUksRUFBR3FzQyxFQUFJcmEsRUFBUzUvQyxPQUFRNHRCLEVBQUlxc0MsSUFBS3JzQyxHQUMvSDh6QixFQUFROUIsRUFBU2h5QixLQUNuQmsvQixHQUFTcEwsRUFBT3hoRCxFQUFNNlEsRUFBSTZjLEVBQUdneUIsRUFBVXdlLEdBRzNDOVcsRUFBVXI4QyxLQUFLMjBDLEdBQ2ZxSCxFQUFRaDhDLEtBQUtnWSxHQUtuQixPQUFPLElBQUksR0FBV3FrQyxFQUFXTCxFQUFTL21ELEVBQU02USxJRnFCaERoRixPRzFDYSxTQUFTb04sR0FDRCxtQkFBVkEsSUFBc0JBLEVBQVFzdEIsRUFBUXR0QixJQUVqRCxJQUFLLElBQUlvQixFQUFTN2IsS0FBS3dvRCxRQUFTdHBDLEVBQUlyRCxFQUFPdmEsT0FBUXNuRCxFQUFZLElBQUlqb0QsTUFBTXVlLEdBQUk5VyxFQUFJLEVBQUdBLEVBQUk4VyxJQUFLOVcsRUFDM0YsSUFBSyxJQUF1RW1jLEVBQW5FKzlCLEVBQVF6bUMsRUFBT3pULEdBQUlrWCxFQUFJZ2pDLEVBQU1oaEQsT0FBUXduRCxFQUFXRixFQUFVeGdELEdBQUssR0FBVUosRUFBSSxFQUFHQSxFQUFJc1gsSUFBS3RYLEdBQzNGdWMsRUFBTys5QixFQUFNdDZDLEtBQU95UyxFQUFNbFcsS0FBS2dnQixFQUFNQSxFQUFLNjlCLFNBQVVwNkMsRUFBR3M2QyxJQUMxRHdHLEVBQVN2OEMsS0FBS2dZLEdBS3BCLE9BQU8sSUFBSSxHQUFXcWtDLEVBQVc1b0QsS0FBS3lvRCxTQUFVem9ELEtBQUt1L0QsTUFBT3YvRCxLQUFLNndELE1IZ0NqRTVHLE1JNUNhLFNBQVMyRyxHQUN0QixHQUFJQSxFQUFXQyxNQUFRN3dELEtBQUs2d0QsSUFBSyxNQUFNLElBQUlsOEIsTUFFM0MsSUFBSyxJQUFJdzFCLEVBQVVucUQsS0FBS3dvRCxRQUFTNEIsRUFBVXdHLEVBQVdwSSxRQUFTNkIsRUFBS0YsRUFBUTdvRCxPQUFRZ3BELEVBQUtGLEVBQVE5b0QsT0FBUTRkLEVBQUluVixLQUFLRCxJQUFJdWdELEVBQUlDLEdBQUtDLEVBQVMsSUFBSTVwRCxNQUFNMHBELEdBQUtqaUQsRUFBSSxFQUFHQSxFQUFJOFcsSUFBSzlXLEVBQ3JLLElBQUssSUFBbUdtYyxFQUEvRmltQyxFQUFTTCxFQUFRL2hELEdBQUlxaUQsRUFBU0wsRUFBUWhpRCxHQUFJa1gsRUFBSWtyQyxFQUFPbHBELE9BQVEyb0QsRUFBUU0sRUFBT25pRCxHQUFLLElBQUl6SCxNQUFNMmUsR0FBVXRYLEVBQUksRUFBR0EsRUFBSXNYLElBQUt0WCxHQUN4SHVjLEVBQU9pbUMsRUFBT3hpRCxJQUFNeWlELEVBQU96aUQsTUFDN0JpaUQsRUFBTWppRCxHQUFLdWMsR0FLakIsS0FBT25jLEVBQUlpaUQsSUFBTWppRCxFQUNmbWlELEVBQU9uaUQsR0FBSytoRCxFQUFRL2hELEdBR3RCLE9BQU8sSUFBSSxHQUFXbWlELEVBQVF2cUQsS0FBS3lvRCxTQUFVem9ELEtBQUt1L0QsTUFBT3YvRCxLQUFLNndELE1KOEI5RG5JLFVKM0NhLFdBQ2IsT0FBTyxJQUFJLEdBQVUxb0QsS0FBS3dvRCxRQUFTeG9ELEtBQUt5b0QsV0kyQ3hDbUksV0s3Q2EsV0FLYixJQUpBLElBQUlwdkQsRUFBT3hCLEtBQUt1L0QsTUFDWkksRUFBTTMvRCxLQUFLNndELElBQ1grTyxFQUFNSixLQUVEM2pELEVBQVM3YixLQUFLd29ELFFBQVN0cEMsRUFBSXJELEVBQU92YSxPQUFROEcsRUFBSSxFQUFHQSxFQUFJOFcsSUFBSzlXLEVBQ2pFLElBQUssSUFBeUNtYyxFQUFyQys5QixFQUFRem1DLEVBQU96VCxHQUFJa1gsRUFBSWdqQyxFQUFNaGhELE9BQWMwRyxFQUFJLEVBQUdBLEVBQUlzWCxJQUFLdFgsRUFDbEUsR0FBSXVjLEVBQU8rOUIsRUFBTXQ2QyxHQUFJLENBQ25CLElBQUkwM0QsRUFBVSxHQUFJbjdDLEVBQU1vN0MsR0FDeEJ2UixHQUFTN3BDLEVBQU0vaUIsRUFBTW8rRCxFQUFLNTNELEVBQUdzNkMsRUFBTyxDQUNsQ3dLLEtBQU00UyxFQUFRNVMsS0FBTzRTLEVBQVE3UyxNQUFRNlMsRUFBUXhSLFNBQzdDckIsTUFBTyxFQUNQcUIsU0FBVXdSLEVBQVF4UixTQUNsQkMsS0FBTXVSLEVBQVF2UixPQU10QixPQUFPLElBQUksR0FBV3R5QyxFQUFRN2IsS0FBS3lvRCxTQUFVam5ELEVBQU1vK0QsSUwyQm5EcjdELEtBQU1rN0QsR0FBb0JsN0QsS0FDMUJ3bUQsTUFBTzBVLEdBQW9CMVUsTUFDM0J4bUMsS0FBTWs3QyxHQUFvQmw3QyxLQUMxQnRULEtBQU13dUQsR0FBb0J4dUQsS0FDMUJzd0MsTUFBT2tlLEdBQW9CbGUsTUFDM0J5SixLQUFNeVUsR0FBb0J6VSxLQUMxQnRELEdMOUJhLFNBQVNsbUQsRUFBTTZ2QixHQUM1QixJQUFJaGYsRUFBS3JTLEtBQUs2d0QsSUFFZCxPQUFPN25ELFVBQVUxSCxPQUFTLEVBQ3BCLEdBQUl0QixLQUFLdWtCLE9BQVFsUyxHQUFJcTFDLEdBQUdBLEdBQUdsbUQsR0FDM0J4QixLQUFLZ3JELEtBQUsrVCxHQUFXMXNELEVBQUk3USxFQUFNNnZCLEtLMEJyQzQ1QixLVmVhLFNBQVN6cEQsRUFBTVIsR0FDNUIsSUFBSTZpRCxFQUFXcmxDLEVBQVVoZCxHQUFPd0csRUFBaUIsY0FBYjY3QyxFQUEyQixHQUF1QixHQUN0RixPQUFPN2pELEtBQUt5K0QsVUFBVWo5RCxFQUF1QixtQkFBVlIsR0FDNUI2aUQsRUFBU0osTUFBUSxHQUFpQixJQUFjSSxFQUFVNzdDLEVBQUcyb0QsR0FBVzN3RCxLQUFNLFFBQVV3QixFQUFNUixJQUN0RixNQUFUQSxHQUFpQjZpRCxFQUFTSixNQUFRLEdBQWUsSUFBWUksSUFDNURBLEVBQVNKLE1BQVEsR0FBaUIsSUFBY0ksRUFBVTc3QyxFQUFHaEgsS1VuQnBFeTlELFVUckJhLFNBQVNqOUQsRUFBTVIsR0FDNUIsSUFBSUMsRUFBTSxRQUFVTyxFQUNwQixHQUFJd0gsVUFBVTFILE9BQVMsRUFBRyxPQUFRTCxFQUFNakIsS0FBS2d1RCxNQUFNL3NELEtBQVNBLEVBQUl1OUQsT0FDaEUsR0FBYSxNQUFUeDlELEVBQWUsT0FBT2hCLEtBQUtndUQsTUFBTS9zRCxFQUFLLE1BQzFDLEdBQXFCLG1CQUFWRCxFQUFzQixNQUFNLElBQUkyekIsTUFDM0MsSUFBSWt2QixFQUFXcmxDLEVBQVVoZCxHQUN6QixPQUFPeEIsS0FBS2d1RCxNQUFNL3NELEdBQU00aUQsRUFBU0osTUFBUThhLEdBQWNFLElBQVc1YSxFQUFVN2lELEtTZ0I1RXNvQixNSFVhLFNBQVM5bkIsRUFBTVIsRUFBT3lqRCxHQUNuQyxJQUFJejhDLEVBQXFCLGNBQWhCeEcsR0FBUSxJQUFzQixHQUF1QixHQUM5RCxPQUFnQixNQUFUUixFQUFnQmhCLEtBQ2xCby9ELFdBQVc1OUQsRUFqRWxCLFNBQW1CQSxFQUFNdThELEdBQ3ZCLElBQUlDLEVBQ0FJLEVBQ0FILEVBQ0osT0FBTyxXQUNMLElBQUlFLEVBQVUsRUFBTW4rRCxLQUFNd0IsR0FDdEIwOEQsR0FBV2wrRCxLQUFLc3BCLE1BQU1pN0IsZUFBZS9pRCxHQUFPLEVBQU14QixLQUFNd0IsSUFDNUQsT0FBTzI4RCxJQUFZRCxFQUFVLEtBQ3ZCQyxJQUFZSCxHQUFZRSxJQUFZRSxFQUFXSCxFQUMvQ0EsRUFBZUYsRUFBWUMsRUFBV0csRUFBU0MsRUFBV0YsSUF3RDVDMkIsQ0FBVXIrRCxFQUFNd0csSUFDakMwL0MsR0FBRyxhQUFlbG1ELEVBQU0sR0FBWUEsSUFDcEIsbUJBQVZSLEVBQXVCaEIsS0FDN0JvL0QsV0FBVzU5RCxFQXJDbEIsU0FBdUJBLEVBQU11OEQsRUFBYS84RCxHQUN4QyxJQUFJZzlELEVBQ0FJLEVBQ0FILEVBQ0osT0FBTyxXQUNMLElBQUlFLEVBQVUsRUFBTW4rRCxLQUFNd0IsR0FDdEIrNEIsRUFBU3Y1QixFQUFNaEIsTUFDZmsrRCxFQUFVM2pDLEVBQVMsR0FFdkIsT0FEYyxNQUFWQSxJQUFvQ3Y2QixLQUFLc3BCLE1BQU1pN0IsZUFBZS9pRCxHQUE5QzA4RCxFQUFVM2pDLEVBQTJDLEVBQU12NkIsS0FBTXdCLElBQzlFMjhELElBQVlELEVBQVUsS0FDdkJDLElBQVlILEdBQVlFLElBQVlFLEVBQVdILEdBQzlDRyxFQUFXRixFQUFTRCxFQUFlRixFQUFZQyxFQUFXRyxFQUFTNWpDLEtBMEJ0RCxDQUFjLzRCLEVBQU13RyxFQUFHMm9ELEdBQVczd0QsS0FBTSxTQUFXd0IsRUFBTVIsS0FDMUVncUQsS0F2QlAsU0FBMEIzNEMsRUFBSTdRLEdBQzVCLElBQUl3OUQsRUFBS0MsRUFBS2EsRUFBd0RwYSxFQUE3Q3prRCxFQUFNLFNBQVdPLEVBQU04dkIsRUFBUSxPQUFTcndCLEVBQ2pFLE9BQU8sV0FDTCxJQUFJbXRELEVBQVcsR0FBSXB1RCxLQUFNcVMsR0FDckJxMUMsRUFBSzBHLEVBQVMxRyxHQUNkcjJCLEVBQWtDLE1BQXZCKzhCLEVBQVNwdEQsTUFBTUMsR0FBZXlrRCxJQUFXQSxFQUFTLEdBQVlsa0QsU0FBU1gsRUFLbEY2bUQsSUFBT3NYLEdBQU9jLElBQWN6dUMsSUFBVzR0QyxHQUFPRCxFQUFNdFgsR0FBSW1FLFFBQVFuRSxHQUFHcDJCLEVBQU93dUMsRUFBWXp1QyxHQUUxRis4QixFQUFTMUcsR0FBS3VYLEdBV05jLENBQWlCLy9ELEtBQUs2d0QsSUFBS3J2RCxJQUNqQ3hCLEtBQ0NvL0QsV0FBVzU5RCxFQXBEbEIsU0FBdUJBLEVBQU11OEQsRUFBYXhqQyxHQUN4QyxJQUFJeWpDLEVBRUFDLEVBREFDLEVBQVUzakMsRUFBUyxHQUV2QixPQUFPLFdBQ0wsSUFBSTRqQyxFQUFVLEVBQU1uK0QsS0FBTXdCLEdBQzFCLE9BQU8yOEQsSUFBWUQsRUFBVSxLQUN2QkMsSUFBWUgsRUFBV0MsRUFDdkJBLEVBQWVGLEVBQVlDLEVBQVdHLEVBQVM1akMsSUE0Q2pDLENBQWMvNEIsRUFBTXdHLEVBQUdoSCxHQUFReWpELEdBQ2hEaUQsR0FBRyxhQUFlbG1ELEVBQU0sT0duQjdCNDlELFdGMUNhLFNBQVM1OUQsRUFBTVIsRUFBT3lqRCxHQUNuQyxJQUFJeGpELEVBQU0sVUFBWU8sR0FBUSxJQUM5QixHQUFJd0gsVUFBVTFILE9BQVMsRUFBRyxPQUFRTCxFQUFNakIsS0FBS2d1RCxNQUFNL3NELEtBQVNBLEVBQUl1OUQsT0FDaEUsR0FBYSxNQUFUeDlELEVBQWUsT0FBT2hCLEtBQUtndUQsTUFBTS9zRCxFQUFLLE1BQzFDLEdBQXFCLG1CQUFWRCxFQUFzQixNQUFNLElBQUkyekIsTUFDM0MsT0FBTzMwQixLQUFLZ3VELE1BQU0vc0QsRUFBS20rRCxHQUFXNTlELEVBQU1SLEVBQW1CLE1BQVp5akQsRUFBbUIsR0FBS0EsS0VzQ3ZFMkcsS003Q2EsU0FBU3BxRCxHQUN0QixPQUFPaEIsS0FBS2d1RCxNQUFNLE9BQXlCLG1CQUFWaHRELEVBUm5DLFNBQXNCQSxHQUNwQixPQUFPLFdBQ0wsSUFBSXU1QixFQUFTdjVCLEVBQU1oQixNQUNuQkEsS0FBSytsRCxZQUF3QixNQUFWeHJCLEVBQWlCLEdBQUtBLEdBTXJDLENBQWFvMkIsR0FBVzN3RCxLQUFNLE9BQVFnQixJQWY5QyxTQUFzQkEsR0FDcEIsT0FBTyxXQUNMaEIsS0FBSytsRCxZQUFjL2tELEdBY2YsQ0FBc0IsTUFBVEEsRUFBZ0IsR0FBS0EsRUFBUSxNTjJDaERzK0QsVUQ1Q2EsU0FBU3QrRCxHQUN0QixJQUFJQyxFQUFNLE9BQ1YsR0FBSStILFVBQVUxSCxPQUFTLEVBQUcsT0FBUUwsRUFBTWpCLEtBQUtndUQsTUFBTS9zRCxLQUFTQSxFQUFJdTlELE9BQ2hFLEdBQWEsTUFBVHg5RCxFQUFlLE9BQU9oQixLQUFLZ3VELE1BQU0vc0QsRUFBSyxNQUMxQyxHQUFxQixtQkFBVkQsRUFBc0IsTUFBTSxJQUFJMnpCLE1BQzNDLE9BQU8zMEIsS0FBS2d1RCxNQUFNL3NELEVBQUtxK0QsR0FBVXQrRCxLQ3dDakMwa0QsT090RGEsV0FDYixPQUFPMWxELEtBQUswbkQsR0FBRyxhQVRqQixTQUF3QnIxQyxHQUN0QixPQUFPLFdBQ0wsSUFBSThTLEVBQVNubEIsS0FBS3dtRCxXQUNsQixJQUFLLElBQUl4K0MsS0FBS2hJLEtBQUsrdEQsYUFBYyxJQUFLL2xELElBQU1xSyxFQUFJLE9BQzVDOFMsR0FBUUEsRUFBTzZNLFlBQVloeUIsT0FLSmdnRSxDQUFlaGdFLEtBQUs2d0QsT1BzRGpEN0MsTXBCWmEsU0FBU3hzRCxFQUFNUixHQUM1QixJQUFJcVIsRUFBS3JTLEtBQUs2d0QsSUFJZCxHQUZBcnZELEdBQVEsR0FFSndILFVBQVUxSCxPQUFTLEVBQUcsQ0FFeEIsSUFEQSxJQUNrQzJ1QixFQUQ5Qis5QixFQUFRLEdBQUlodUQsS0FBS3VrQixPQUFRbFMsR0FBSTI3QyxNQUN4QmhtRCxFQUFJLEVBQUdzWCxFQUFJMHVDLEVBQU0xc0QsT0FBVzBHLEVBQUlzWCxJQUFLdFgsRUFDNUMsSUFBS2lvQixFQUFJKzlCLEVBQU1obUQsSUFBSXhHLE9BQVNBLEVBQzFCLE9BQU95dUIsRUFBRWp2QixNQUdiLE9BQU8sS0FHVCxPQUFPaEIsS0FBS2dyRCxNQUFlLE1BQVRocUQsRUFBZ0J1dkQsR0FBY0csSUFBZXIrQyxFQUFJN1EsRUFBTVIsS29CRnpFNnJELE1SbERhLFNBQVM3ckQsR0FDdEIsSUFBSXFSLEVBQUtyUyxLQUFLNndELElBRWQsT0FBTzduRCxVQUFVMUgsT0FDWHRCLEtBQUtnckQsTUFBdUIsbUJBQVZocUQsRUFDZDA5RCxHQUNBQyxJQUFldHNELEVBQUlyUixJQUN2QixHQUFJaEIsS0FBS3VrQixPQUFRbFMsR0FBSXc2QyxPUTRDM0JxQixTUG5EYSxTQUFTbHRELEdBQ3RCLElBQUlxUixFQUFLclMsS0FBSzZ3RCxJQUVkLE9BQU83bkQsVUFBVTFILE9BQ1h0QixLQUFLZ3JELE1BQXVCLG1CQUFWaHFELEVBQ2Q0OUQsR0FDQUMsSUFBa0J4c0QsRUFBSXJSLElBQzFCLEdBQUloQixLQUFLdWtCLE9BQVFsUyxHQUFJNjdDLFVPNkMzQkMsS056RGEsU0FBU250RCxHQUN0QixJQUFJcVIsRUFBS3JTLEtBQUs2d0QsSUFFZCxPQUFPN25ELFVBQVUxSCxPQUNYdEIsS0FBS2dyRCxLQUFLOFQsR0FBYXpzRCxFQUFJclIsSUFDM0IsR0FBSWhCLEtBQUt1a0IsT0FBUWxTLEdBQUk4N0MsTU1xRDNCOFIsWVF6RGEsU0FBU2ovRCxHQUN0QixHQUFxQixtQkFBVkEsRUFBc0IsTUFBTSxJQUFJMnpCLE1BQzNDLE9BQU8zMEIsS0FBS2dyRCxLQVZkLFNBQXFCMzRDLEVBQUlyUixHQUN2QixPQUFPLFdBQ0wsSUFBSTY4QixFQUFJNzhCLEVBQU1nTixNQUFNaE8sS0FBTWdKLFdBQzFCLEdBQWlCLG1CQUFONjBCLEVBQWtCLE1BQU0sSUFBSWxKLE1BQ3ZDLEdBQUkzMEIsS0FBTXFTLEdBQUk4N0MsS0FBT3R3QixHQU1Ob2lDLENBQVlqZ0UsS0FBSzZ3RCxJQUFLN3ZELEtSd0R2Q3NKLElTbEVhLFdBQ2IsSUFBSTAwRCxFQUFLQyxFQUFLanlELEVBQU9oTixLQUFNcVMsRUFBS3JGLEVBQUs2akQsSUFBSzUvQyxFQUFPakUsRUFBS2lFLE9BQ3RELE9BQU8sSUFBSStULFNBQVEsU0FBU08sRUFBU21CLEdBQ25DLElBQUl3NUMsRUFBUyxDQUFDbC9ELE1BQU8wbEIsR0FDakJwYyxFQUFNLENBQUN0SixNQUFPLFdBQTRCLEtBQVRpUSxHQUFZc1UsTUFFakR2WSxFQUFLZytDLE1BQUssV0FDUixJQUFJb0QsRUFBVyxHQUFJcHVELEtBQU1xUyxHQUNyQnExQyxFQUFLMEcsRUFBUzFHLEdBS2RBLElBQU9zWCxLQUNUQyxHQUFPRCxFQUFNdFgsR0FBSW1FLFFBQ2JGLEVBQUV1VSxPQUFPM3pELEtBQUsyekQsR0FDbEJqQixFQUFJdFQsRUFBRXdVLFVBQVU1ekQsS0FBSzJ6RCxHQUNyQmpCLEVBQUl0VCxFQUFFcmhELElBQUlpQyxLQUFLakMsSUFHakI4akQsRUFBUzFHLEdBQUt1WCxLQUlILElBQVRodUQsR0FBWXNVLFFUMkNsQixDQUFDck4sT0FBTzNNLFVBQVdrMEQsR0FBb0J2bkQsT0FBTzNNLFdVaEVoRCxJQUFJNjBELEdBQWdCLENBQ2xCdFQsS0FBTSxLQUNORCxNQUFPLEVBQ1BxQixTQUFVLElBQ1ZDLEtDREssU0FBb0JsK0IsR0FDekIsUUFBU0EsR0FBSyxJQUFNLEVBQUlBLEVBQUlBLEVBQUlBLEdBQUtBLEdBQUssR0FBS0EsRUFBSUEsRUFBSSxHQUFLLElERzlELFNBQVN5dkMsR0FBUW43QyxFQUFNbFMsR0FFckIsSUFEQSxJQUFJdzdDLElBQ0tBLEVBQVN0cEMsRUFBS3dwQyxpQkFBbUJGLEVBQVNBLEVBQU94N0MsS0FDeEQsS0FBTWtTLEVBQU9BLEVBQUtpaUMsWUFDaEIsTUFBTSxJQUFJN3hCLE1BQU0sY0FBY3RpQixlQUdsQyxPQUFPdzdDLEVFZlQsdUJDRmUsU0FBU3JzRCxHQUN0QixPQUFPeEIsS0FBS2dyRCxNQUFLLFdBQ2YsR0FBVWhyRCxLQUFNd0IsT0RDcEIsd0JGaUJlLFNBQVNBLEdBQ3RCLElBQUk2USxFQUNBdzdDLEVBRUFyc0QsYUFBZ0IsSUFDbEI2USxFQUFLN1EsRUFBS3F2RCxJQUFLcnZELEVBQU9BLEVBQUsrOUQsUUFFM0JsdEQsRUFBS210RCxNQUFVM1IsRUFBU3VTLElBQWV0VCxLQUFPcDdCLEtBQU9sd0IsRUFBZSxNQUFSQSxFQUFlLEtBQU9BLEVBQU8sSUFHM0YsSUFBSyxJQUFJcWEsRUFBUzdiLEtBQUt3b0QsUUFBU3RwQyxFQUFJckQsRUFBT3ZhLE9BQVE4RyxFQUFJLEVBQUdBLEVBQUk4VyxJQUFLOVcsRUFDakUsSUFBSyxJQUF5Q21jLEVBQXJDKzlCLEVBQVF6bUMsRUFBT3pULEdBQUlrWCxFQUFJZ2pDLEVBQU1oaEQsT0FBYzBHLEVBQUksRUFBR0EsRUFBSXNYLElBQUt0WCxHQUM5RHVjLEVBQU8rOUIsRUFBTXQ2QyxLQUNmb21ELEdBQVM3cEMsRUFBTS9pQixFQUFNNlEsRUFBSXJLLEVBQUdzNkMsRUFBT3VMLEdBQVU2UixHQUFRbjdDLEVBQU1sUyxJQUtqRSxPQUFPLElBQUksR0FBV3dKLEVBQVE3YixLQUFLeW9ELFNBQVVqbkQsRUFBTTZRLElJMUJyRCxNQUFNLElBQUNxRCxHQUFHLElBQUV3YyxHQUFHLElBQUVwb0IsSUFBT0MsS0F3RnhCLFNBQVMrRyxHQUFLbWYsR0FDWixNQUFPLENBQUNuZixLQUFNbWYsR0E3RUwsQ0FBQyxJQUFLLEtBQUs3aUIsSUFBSTBELElBT2YsQ0FBQyxJQUFLLEtBQUsxRCxJQUFJMEQsSUFPZixDQUFDLElBQUssSUFBSyxJQUFLLElBQUssS0FBTSxLQUFNLEtBQU0sTUFBTTFELElBQUkwRCxJQ3hDckQsTUFBTXV2RCxHQUFVdDJELEtBQUt5a0QsR0FBSyxJQUNwQixHQUFVLElBQU16a0QsS0FBS3lrRCxHQ0s5QjhSLEdBQUssT0FFTEMsR0FBSyxPQUNMclQsR0FBSyxFQUFJLEdBQ1RFLEdBQUssRUFBSSxHQUNURCxHQUFLLEVBQUlDLEdBQUtBLEdBR2xCLFNBQVNvVCxHQUFXemYsR0FDbEIsR0FBSUEsYUFBYTBmLEdBQUssT0FBTyxJQUFJQSxHQUFJMWYsRUFBRXdhLEVBQUd4YSxFQUFFamxDLEVBQUdpbEMsRUFBRWxqQyxFQUFHa2pDLEVBQUU4YSxTQUN0RCxHQUFJOWEsYUFBYTJmLEdBQUssT0FBT0MsR0FBUTVmLEdBQy9CQSxhQUFhMGEsS0FBTTFhLEVBQUk2YSxHQUFXN2EsSUFDeEMsSUFHdUVyOUIsRUFBR3VaLEVBSHRFNEYsRUFBSSs5QixHQUFTN2YsRUFBRWxlLEdBQ2ZuakIsRUFBSWtoRCxHQUFTN2YsRUFBRXJoQyxHQUNmN0IsRUFBSStpRCxHQUFTN2YsRUFBRWxqQyxHQUNmb1AsRUFBSTR6QyxJQUFTLFNBQVloK0IsRUFBSSxTQUFZbmpCLEVBQUksU0FBWTdCLEdBZHRELEdBbUJQLE9BSklnbEIsSUFBTW5qQixHQUFLQSxJQUFNN0IsRUFBRzZGLEVBQUl1WixFQUFJaFEsR0FDOUJ2SixFQUFJbTlDLElBQVMsU0FBWWgrQixFQUFJLFNBQVluakIsRUFBSSxTQUFZN0IsR0FBS3lpRCxJQUM5RHJqQyxFQUFJNGpDLElBQVMsU0FBWWgrQixFQUFJLFNBQVluakIsRUFBSSxTQUFZN0IsR0FBSzBpRCxLQUV6RCxJQUFJRSxHQUFJLElBQU14ekMsRUFBSSxHQUFJLEtBQU92SixFQUFJdUosR0FBSSxLQUFPQSxFQUFJZ1EsR0FBSThqQixFQUFFOGEsU0FPaEQsU0FBU2lGLEdBQUl2RixFQUFHei9DLEVBQUcrQixFQUFHZytDLEdBQ25DLE9BQTRCLElBQXJCN3lELFVBQVUxSCxPQUFlay9ELEdBQVdqRixHQUFLLElBQUlrRixHQUFJbEYsRUFBR3ovQyxFQUFHK0IsRUFBYyxNQUFYZytDLEVBQWtCLEVBQUlBLEdBR2xGLFNBQVM0RSxHQUFJbEYsRUFBR3ovQyxFQUFHK0IsRUFBR2crQyxHQUMzQjc3RCxLQUFLdTdELEdBQUtBLEVBQ1Z2N0QsS0FBSzhiLEdBQUtBLEVBQ1Y5YixLQUFLNmQsR0FBS0EsRUFDVjdkLEtBQUs2N0QsU0FBV0EsRUEwQmxCLFNBQVNnRixHQUFRNXdDLEdBQ2YsT0FBT0EsRUF4REFtOUIsb0JBd0RTcmpELEtBQUs4VixJQUFJb1EsRUFBRyxFQUFJLEdBQUtBLEVBQUlrOUIsR0FBS0QsR0FHaEQsU0FBUzZULEdBQVE5d0MsR0FDZixPQUFPQSxFQUFJbTlCLEdBQUtuOUIsRUFBSUEsRUFBSUEsRUFBSWs5QixJQUFNbDlCLEVBQUlpOUIsSUFHeEMsU0FBUzhULEdBQVN0OUMsR0FDaEIsT0FBTyxLQUFPQSxHQUFLLFNBQVksTUFBUUEsRUFBSSxNQUFRM1osS0FBSzhWLElBQUk2RCxFQUFHLEVBQUksS0FBTyxNQUc1RSxTQUFTazlDLEdBQVNsOUMsR0FDaEIsT0FBUUEsR0FBSyxNQUFRLE9BQVVBLEVBQUksTUFBUTNaLEtBQUs4VixLQUFLNkQsRUFBSSxNQUFTLE1BQU8sS0FHM0UsU0FBU3U5QyxHQUFXbGdCLEdBQ2xCLEdBQUlBLGFBQWEyZixHQUFLLE9BQU8sSUFBSUEsR0FBSTNmLEVBQUVpYixFQUFHamIsRUFBRWpqQyxFQUFHaWpDLEVBQUV3YSxFQUFHeGEsRUFBRThhLFNBRXRELEdBRE05YSxhQUFhMGYsS0FBTTFmLEVBQUl5ZixHQUFXemYsSUFDNUIsSUFBUkEsRUFBRWpsQyxHQUFtQixJQUFSaWxDLEVBQUVsakMsRUFBUyxPQUFPLElBQUk2aUQsR0FBSXo0RCxJQUFLLEVBQUk4NEMsRUFBRXdhLEdBQUt4YSxFQUFFd2EsRUFBSSxJQUFNLEVBQUl0ekQsSUFBSzg0QyxFQUFFd2EsRUFBR3hhLEVBQUU4YSxTQUN2RixJQUFJRyxFQUFJanlELEtBQUtpbEQsTUFBTWpPLEVBQUVsakMsRUFBR2tqQyxFQUFFamxDLEdBQUssR0FDL0IsT0FBTyxJQUFJNGtELEdBQUkxRSxFQUFJLEVBQUlBLEVBQUksSUFBTUEsRUFBR2p5RCxLQUFLMnZCLEtBQUtxbkIsRUFBRWpsQyxFQUFJaWxDLEVBQUVqbEMsRUFBSWlsQyxFQUFFbGpDLEVBQUlrakMsRUFBRWxqQyxHQUFJa2pDLEVBQUV3YSxFQUFHeGEsRUFBRThhLFNBV3hFLFNBQVM2RSxHQUFJMUUsRUFBR2wrQyxFQUFHeTlDLEVBQUdNLEdBQzNCNzdELEtBQUtnOEQsR0FBS0EsRUFDVmg4RCxLQUFLOGQsR0FBS0EsRUFDVjlkLEtBQUt1N0QsR0FBS0EsRUFDVnY3RCxLQUFLNjdELFNBQVdBLEVBR2xCLFNBQVM4RSxHQUFRNWYsR0FDZixHQUFJM3VCLE1BQU0ydUIsRUFBRWliLEdBQUksT0FBTyxJQUFJeUUsR0FBSTFmLEVBQUV3YSxFQUFHLEVBQUcsRUFBR3hhLEVBQUU4YSxTQUM1QyxJQUFJRyxFQUFJamIsRUFBRWliLEVBQUlxRSxHQUNkLE9BQU8sSUFBSUksR0FBSTFmLEVBQUV3YSxFQUFHeHhELEtBQUttM0QsSUFBSWxGLEdBQUtqYixFQUFFampDLEVBQUcvVCxLQUFLbzNELElBQUluRixHQUFLamIsRUFBRWpqQyxFQUFHaWpDLEVBQUU4YSxTQzdHOUQsU0FBU3gwRCxHQUFNa2QsR0FDYixJQUFJbVcsRUFBTSxFQUNOd21CLEVBQVczOEIsRUFBSzI4QixTQUNoQmw1QyxFQUFJazVDLEdBQVlBLEVBQVM1L0MsT0FDN0IsR0FBSzBHLEVBQ0EsT0FBU0EsR0FBSyxHQUFHMHlCLEdBQU93bUIsRUFBU2w1QyxHQUFHaEgsV0FEakMwNUIsRUFBTSxFQUVkblcsRUFBS3ZqQixNQUFRMDVCLEVDUUEsU0FBUzBtQyxHQUFVM3ZELEVBQU15dkMsR0FDbEN6dkMsYUFBZ0JteEMsS0FDbEJueEMsRUFBTyxNQUFDNVEsRUFBVzRRLFFBQ0Y1USxJQUFicWdELElBQXdCQSxFQUFXbWdCLFVBQ2pCeGdFLElBQWJxZ0QsSUFDVEEsRUFBV29nQixJQVdiLElBUkEsSUFDSS84QyxFQUVBeStCLEVBQ0F1ZSxFQUNBdjVELEVBQ0FzWCxFQU5BNWYsRUFBTyxJQUFJOGhFLEdBQUsvdkQsR0FFaEJzNUMsRUFBUSxDQUFDcnJELEdBTU42a0IsRUFBT3dtQyxFQUFNelYsT0FDbEIsSUFBS2lzQixFQUFTcmdCLEVBQVMzOEIsRUFBSzlTLFNBQVc2TixHQUFLaWlELEVBQVM1Z0UsTUFBTTBKLEtBQUtrM0QsSUFBU2pnRSxRQUV2RSxJQURBaWpCLEVBQUsyOEIsU0FBV3FnQixFQUNYdjVELEVBQUlzWCxFQUFJLEVBQUd0WCxHQUFLLElBQUtBLEVBQ3hCK2lELEVBQU14K0MsS0FBS3kyQyxFQUFRdWUsRUFBT3Y1RCxHQUFLLElBQUl3NUQsR0FBS0QsRUFBT3Y1RCxLQUMvQ2c3QyxFQUFNNzlCLE9BQVNaLEVBQ2Z5K0IsRUFBTTVsQyxNQUFRbUgsRUFBS25ILE1BQVEsRUFLakMsT0FBTzFkLEVBQUsraEUsV0FBV0MsSUFPekIsU0FBU0osR0FBZXpnQixHQUN0QixPQUFPQSxFQUFFSyxTQUdYLFNBQVNtZ0IsR0FBWXhnQixHQUNuQixPQUFPbGdELE1BQU1tTyxRQUFRK3hDLEdBQUtBLEVBQUUsR0FBSyxLQUduQyxTQUFTOGdCLEdBQVNwOUMsUUFDUTFqQixJQUFwQjBqQixFQUFLOVMsS0FBS3pRLFFBQXFCdWpCLEVBQUt2akIsTUFBUXVqQixFQUFLOVMsS0FBS3pRLE9BQzFEdWpCLEVBQUs5UyxLQUFPOFMsRUFBSzlTLEtBQUtBLEtBR2pCLFNBQVNpd0QsR0FBY245QyxHQUM1QixJQUFJcTlDLEVBQVMsRUFDYixHQUFHcjlDLEVBQUtxOUMsT0FBU0EsU0FDVHI5QyxFQUFPQSxFQUFLWSxTQUFZWixFQUFLcTlDLFNBQVdBLEdBRzNDLFNBQVNKLEdBQUsvdkQsR0FDbkJ6UixLQUFLeVIsS0FBT0EsRUFDWnpSLEtBQUtvZCxNQUNMcGQsS0FBSzRoRSxPQUFTLEVBQ2Q1aEUsS0FBS21sQixPQUFTLEtDdkVELFlBQVNaLEdBQ3RCQSxFQUFLczlDLEdBQUs5M0QsS0FBS2dwQixNQUFNeE8sRUFBS3M5QyxJQUMxQnQ5QyxFQUFLdTlDLEdBQUsvM0QsS0FBS2dwQixNQUFNeE8sRUFBS3U5QyxJQUMxQnY5QyxFQUFLdzlDLEdBQUtoNEQsS0FBS2dwQixNQUFNeE8sRUFBS3c5QyxJQUMxQng5QyxFQUFLeTlDLEdBQUtqNEQsS0FBS2dwQixNQUFNeE8sRUFBS3k5QyxJQ0piLFlBQVM3OEMsRUFBUTA4QyxFQUFJQyxFQUFJQyxFQUFJQyxHQU8xQyxJQU5BLElBQ0l6OUMsRUFEQXdtQyxFQUFRNWxDLEVBQU8rN0IsU0FFZmw1QyxHQUFLLEVBQ0xzWCxFQUFJeXJDLEVBQU16cEQsT0FDVjR0QixFQUFJL0osRUFBT25rQixRQUFVK2dFLEVBQUtGLEdBQU0xOEMsRUFBT25rQixRQUVsQ2dILEVBQUlzWCxJQUNYaUYsRUFBT3dtQyxFQUFNL2lELElBQVM4NUQsR0FBS0EsRUFBSXY5QyxFQUFLeTlDLEdBQUtBLEVBQ3pDejlDLEVBQUtzOUMsR0FBS0EsRUFBSXQ5QyxFQUFLdzlDLEdBQUtGLEdBQU10OUMsRUFBS3ZqQixNQUFRa3VCLEVDTmhDLGNBQ2IsSUFBSSt5QyxFQUFLLEVBQ0xDLEVBQUssRUFDTEMsRUFBVSxFQUNWcHZDLEdBQVEsRUFFWixTQUFTcXZDLEVBQVUxaUUsR0FDakIsSUFBSTRmLEVBQUk1ZixFQUFLa2lFLE9BQVMsRUFPdEIsT0FOQWxpRSxFQUFLbWlFLEdBQ0xuaUUsRUFBS29pRSxHQUFLSyxFQUNWemlFLEVBQUtxaUUsR0FBS0UsRUFDVnZpRSxFQUFLc2lFLEdBQUtFLEVBQUs1aUQsRUFDZjVmLEVBQUsraEUsV0FLUCxTQUFzQlMsRUFBSTVpRCxHQUN4QixPQUFPLFNBQVNpRixHQUNWQSxFQUFLMjhCLFVBQ1AsR0FBWTM4QixFQUFNQSxFQUFLczlDLEdBQUlLLEdBQU0zOUMsRUFBS25ILE1BQVEsR0FBS2tDLEVBQUdpRixFQUFLdzlDLEdBQUlHLEdBQU0zOUMsRUFBS25ILE1BQVEsR0FBS2tDLEdBRXpGLElBQUl1aUQsRUFBS3Q5QyxFQUFLczlDLEdBQ1ZDLEVBQUt2OUMsRUFBS3U5QyxHQUNWQyxFQUFLeDlDLEVBQUt3OUMsR0FBS0ksRUFDZkgsRUFBS3o5QyxFQUFLeTlDLEdBQUtHLEVBQ2ZKLEVBQUtGLElBQUlBLEVBQUtFLEdBQU1GLEVBQUtFLEdBQU0sR0FDL0JDLEVBQUtGLElBQUlBLEVBQUtFLEdBQU1GLEVBQUtFLEdBQU0sR0FDbkN6OUMsRUFBS3M5QyxHQUFLQSxFQUNWdDlDLEVBQUt1OUMsR0FBS0EsRUFDVnY5QyxFQUFLdzlDLEdBQUtBLEVBQ1Z4OUMsRUFBS3k5QyxHQUFLQSxHQW5CSUssQ0FBYUgsRUFBSTVpRCxJQUM3QnlULEdBQU9yekIsRUFBSytoRSxXQUFXLElBQ3BCL2hFLEVBaUNULE9BWkEwaUUsRUFBVXJ2QyxNQUFRLFNBQVNyUCxHQUN6QixPQUFPMWEsVUFBVTFILFFBQVV5eEIsSUFBVXJQLEVBQUcwK0MsR0FBYXJ2QyxHQUd2RHF2QyxFQUFVbnhELEtBQU8sU0FBU3lTLEdBQ3hCLE9BQU8xYSxVQUFVMUgsUUFBVTJnRSxHQUFNditDLEVBQUUsR0FBSXcrQyxHQUFNeCtDLEVBQUUsR0FBSTArQyxHQUFhLENBQUNILEVBQUlDLElBR3ZFRSxFQUFVRCxRQUFVLFNBQVN6K0MsR0FDM0IsT0FBTzFhLFVBQVUxSCxRQUFVNmdFLEdBQVd6K0MsRUFBRzArQyxHQUFhRCxHQUdqREMsRUNoRFQsU0FBU0UsR0FBa0J4bUQsRUFBRytCLEdBQzVCLE9BQU8vQixFQUFFcUosU0FBV3RILEVBQUVzSCxPQUFTLEVBQUksRUFXckMsU0FBU285QyxHQUFTMWtDLEdBQ2hCLElBQUlxakIsRUFBV3JqQixFQUFFcWpCLFNBQ2pCLE9BQU9BLEVBQVdBLEVBQVMsR0FBS3JqQixFQUFFNU4sRUFJcEMsU0FBU3V5QyxHQUFVM2tDLEdBQ2pCLElBQUlxakIsRUFBV3JqQixFQUFFcWpCLFNBQ2pCLE9BQU9BLEVBQVdBLEVBQVNBLEVBQVM1L0MsT0FBUyxHQUFLdThCLEVBQUU1TixFQUt0RCxTQUFTd3lDLEdBQVlDLEVBQUlDLEVBQUkzd0IsR0FDM0IsSUFBSTR3QixFQUFTNXdCLEdBQVMyd0IsRUFBRzM2RCxFQUFJMDZELEVBQUcxNkQsR0FDaEMyNkQsRUFBRzdrRCxHQUFLOGtELEVBQ1JELEVBQUc1MUMsR0FBS2lsQixFQUNSMHdCLEVBQUc1a0QsR0FBSzhrRCxFQUNSRCxFQUFHMWxDLEdBQUsrVSxFQUNSMndCLEVBQUd6akQsR0FBSzh5QixFQXNCVixTQUFTNndCLEdBQWFDLEVBQUtqbEMsRUFBR2tsQyxHQUM1QixPQUFPRCxFQUFJaG5ELEVBQUVxSixTQUFXMFksRUFBRTFZLE9BQVMyOUMsRUFBSWhuRCxFQUFJaW5ELEVBRzdDLFNBQVNDLEdBQVN6K0MsRUFBTXZjLEdBQ3RCaEksS0FBSzJyRCxFQUFJcG5DLEVBQ1R2a0IsS0FBS21sQixPQUFTLEtBQ2RubEIsS0FBS2toRCxTQUFXLEtBQ2hCbGhELEtBQUs2bkIsRUFBSSxLQUNUN25CLEtBQUs4YixFQUFJOWIsS0FDVEEsS0FBS2k5QixFQUFJLEVBQ1RqOUIsS0FBS2tmLEVBQUksRUFDVGxmLEtBQUs4ZCxFQUFJLEVBQ1Q5ZCxLQUFLK3NCLEVBQUksRUFDVC9zQixLQUFLaXdCLEVBQUksS0FDVGp3QixLQUFLZ0ksRUFBSUEsRUE2QkksY0FDYixJQUFJaTdELEVBQWFYLEdBQ2JMLEVBQUssRUFDTEMsRUFBSyxFQUNMZ0IsRUFBVyxLQUVmLFNBQVNDLEVBQUt6akUsR0FDWixJQUFJdXdCLEVBL0JSLFNBQWtCdndCLEdBU2hCLElBUkEsSUFDSTZrQixFQUVBeStCLEVBQ0E5QixFQUNBbDVDLEVBQ0FzWCxFQU5BNmpELEVBQU8sSUFBSUgsR0FBU3RqRSxFQUFNLEdBRTFCcXJELEVBQVEsQ0FBQ29ZLEdBTU41K0MsRUFBT3dtQyxFQUFNelYsT0FDbEIsR0FBSTRMLEVBQVczOEIsRUFBS29uQyxFQUFFekssU0FFcEIsSUFEQTM4QixFQUFLMjhCLFNBQVcsSUFBSXZnRCxNQUFNMmUsRUFBSTRoQyxFQUFTNS9DLFFBQ2xDMEcsRUFBSXNYLEVBQUksRUFBR3RYLEdBQUssSUFBS0EsRUFDeEIraUQsRUFBTXgrQyxLQUFLeTJDLEVBQVF6K0IsRUFBSzI4QixTQUFTbDVDLEdBQUssSUFBSWc3RCxHQUFTOWhCLEVBQVNsNUMsR0FBSUEsSUFDaEVnN0MsRUFBTTc5QixPQUFTWixFQU1yQixPQURDNCtDLEVBQUtoK0MsT0FBUyxJQUFJNjlDLEdBQVMsS0FBTSxJQUFJOWhCLFNBQVcsQ0FBQ2lpQixHQUMzQ0EsRUFXR0MsQ0FBUzFqRSxHQU9qQixHQUpBdXdCLEVBQUVvekMsVUFBVUMsR0FBWXJ6QyxFQUFFOUssT0FBT2pHLEdBQUsrUSxFQUFFZ04sRUFDeENoTixFQUFFd3hDLFdBQVc4QixHQUdUTCxFQUFVeGpFLEVBQUsraEUsV0FBVytCLE9BSXpCLENBQ0gsSUFBSTUwRCxFQUFPbFAsRUFDUG1QLEVBQVFuUCxFQUNSK2pFLEVBQVMvakUsRUFDYkEsRUFBSytoRSxZQUFXLFNBQVNsOUMsR0FDbkJBLEVBQUtiLEVBQUk5VSxFQUFLOFUsSUFBRzlVLEVBQU8yVixHQUN4QkEsRUFBS2IsRUFBSTdVLEVBQU02VSxJQUFHN1UsRUFBUTBWLEdBQzFCQSxFQUFLbkgsTUFBUXFtRCxFQUFPcm1ELFFBQU9xbUQsRUFBU2wvQyxNQUUxQyxJQUFJd0ksRUFBSW5lLElBQVNDLEVBQVEsRUFBSW8wRCxFQUFXcjBELEVBQU1DLEdBQVMsRUFDbkQ2MEQsRUFBSzMyQyxFQUFJbmUsRUFBSzhVLEVBQ2RpZ0QsRUFBSzFCLEdBQU1wekQsRUFBTTZVLEVBQUlxSixFQUFJMjJDLEdBQ3pCRSxFQUFLMUIsR0FBTXVCLEVBQU9ybUQsT0FBUyxHQUMvQjFkLEVBQUsraEUsWUFBVyxTQUFTbDlDLEdBQ3ZCQSxFQUFLYixHQUFLYSxFQUFLYixFQUFJZ2dELEdBQU1DLEVBQ3pCcC9DLEVBQUswSSxFQUFJMUksRUFBS25ILE1BQVF3bUQsS0FJMUIsT0FBT2xrRSxFQU9ULFNBQVM0akUsRUFBVXpsQyxHQUNqQixJQUFJcWpCLEVBQVdyakIsRUFBRXFqQixTQUNiMmlCLEVBQVdobUMsRUFBRTFZLE9BQU8rN0IsU0FDcEI0aUIsRUFBSWptQyxFQUFFNzFCLEVBQUk2N0QsRUFBU2htQyxFQUFFNzFCLEVBQUksR0FBSyxLQUNsQyxHQUFJazVDLEVBQVUsRUE1R2xCLFNBQXVCcmpCLEdBTXJCLElBTEEsSUFJSWltQyxFQUpBOXhCLEVBQVEsRUFDUjR3QixFQUFTLEVBQ1QxaEIsRUFBV3JqQixFQUFFcWpCLFNBQ2JsNUMsRUFBSWs1QyxFQUFTNS9DLFNBRVIwRyxHQUFLLElBQ1o4N0QsRUFBSTVpQixFQUFTbDVDLElBQ1hpMUIsR0FBSytVLEVBQ1A4eEIsRUFBRTVrRCxHQUFLOHlCLEVBQ1BBLEdBQVM4eEIsRUFBRS8yQyxHQUFLNjFDLEdBQVVrQixFQUFFaG1ELEdBbUcxQmltRCxDQUFjbG1DLEdBQ2QsSUFBSW1tQyxHQUFZOWlCLEVBQVMsR0FBR2prQixFQUFJaWtCLEVBQVNBLEVBQVM1L0MsT0FBUyxHQUFHMjdCLEdBQUssRUFDL0Q2bUMsR0FDRmptQyxFQUFFWixFQUFJNm1DLEVBQUU3bUMsRUFBSWdtQyxFQUFXcGxDLEVBQUU4dEIsRUFBR21ZLEVBQUVuWSxHQUM5Qjl0QixFQUFFM2UsRUFBSTJlLEVBQUVaLEVBQUkrbUMsR0FFWm5tQyxFQUFFWixFQUFJK21DLE9BRUNGLElBQ1RqbUMsRUFBRVosRUFBSTZtQyxFQUFFN21DLEVBQUlnbUMsRUFBV3BsQyxFQUFFOHRCLEVBQUdtWSxFQUFFblksSUFFaEM5dEIsRUFBRTFZLE9BQU8wQyxFQW9CWCxTQUFtQmdXLEVBQUdpbUMsRUFBR2YsR0FDdkIsR0FBSWUsRUFBRyxDQVVMLElBVEEsSUFRSTl4QixFQVJBaXlCLEVBQU1wbUMsRUFDTnFtQyxFQUFNcm1DLEVBQ05pbEMsRUFBTWdCLEVBQ05LLEVBQU1GLEVBQUk5K0MsT0FBTys3QixTQUFTLEdBQzFCa2pCLEVBQU1ILEVBQUkva0QsRUFDVm1sRCxFQUFNSCxFQUFJaGxELEVBQ1ZvbEQsRUFBTXhCLEVBQUk1akQsRUFDVnFsRCxFQUFNSixFQUFJamxELEVBRVA0akQsRUFBTU4sR0FBVU0sR0FBTW1CLEVBQU0xQixHQUFTMEIsR0FBTW5CLEdBQU9tQixHQUN2REUsRUFBTTVCLEdBQVM0QixJQUNmRCxFQUFNMUIsR0FBVTBCLElBQ1pwb0QsRUFBSStoQixHQUNSbVUsRUFBUTh3QixFQUFJN2xDLEVBQUlxbkMsRUFBTUwsRUFBSWhuQyxFQUFJbW5DLEVBQU1uQixFQUFXSCxFQUFJblgsRUFBR3NZLEVBQUl0WSxJQUM5QyxJQUNWOFcsR0FBWUksR0FBYUMsRUFBS2psQyxFQUFHa2xDLEdBQVdsbEMsRUFBR21VLEdBQy9Db3lCLEdBQU9weUIsRUFDUHF5QixHQUFPcnlCLEdBRVRzeUIsR0FBT3hCLEVBQUk1akQsRUFDWGtsRCxHQUFPSCxFQUFJL2tELEVBQ1hxbEQsR0FBT0osRUFBSWpsRCxFQUNYbWxELEdBQU9ILEVBQUlobEQsRUFFVDRqRCxJQUFRTixHQUFVMEIsS0FDcEJBLEVBQUlqMEMsRUFBSTZ5QyxFQUNSb0IsRUFBSWhsRCxHQUFLb2xELEVBQU1ELEdBRWJKLElBQVExQixHQUFTNEIsS0FDbkJBLEVBQUlsMEMsRUFBSWcwQyxFQUNSRSxFQUFJamxELEdBQUtrbEQsRUFBTUcsRUFDZnhCLEVBQVdsbEMsR0FHZixPQUFPa2xDLEVBeERNeUIsQ0FBVTNtQyxFQUFHaW1DLEVBQUdqbUMsRUFBRTFZLE9BQU8wQyxHQUFLZzhDLEVBQVMsSUFJdEQsU0FBU04sRUFBVzFsQyxHQUNsQkEsRUFBRTh0QixFQUFFam9DLEVBQUltYSxFQUFFWixFQUFJWSxFQUFFMVksT0FBT2pHLEVBQ3ZCMmUsRUFBRTNlLEdBQUsyZSxFQUFFMVksT0FBT2pHLEVBcURsQixTQUFTc2tELEVBQVNqL0MsR0FDaEJBLEVBQUtiLEdBQUt1K0MsRUFDVjE5QyxFQUFLMEksRUFBSTFJLEVBQUtuSCxNQUFROGtELEVBZXhCLE9BWkFpQixFQUFLRixXQUFhLFNBQVN2L0MsR0FDekIsT0FBTzFhLFVBQVUxSCxRQUFVMmhFLEVBQWF2L0MsRUFBR3kvQyxHQUFRRixHQUdyREUsRUFBS2x5RCxLQUFPLFNBQVN5UyxHQUNuQixPQUFPMWEsVUFBVTFILFFBQVU0aEUsR0FBVyxFQUFPakIsR0FBTXYrQyxFQUFFLEdBQUl3K0MsR0FBTXgrQyxFQUFFLEdBQUl5L0MsR0FBU0QsRUFBVyxLQUFPLENBQUNqQixFQUFJQyxJQUd2R2lCLEVBQUtELFNBQVcsU0FBU3gvQyxHQUN2QixPQUFPMWEsVUFBVTFILFFBQVU0aEUsR0FBVyxFQUFNakIsR0FBTXYrQyxFQUFFLEdBQUl3K0MsR0FBTXgrQyxFQUFFLEdBQUl5L0MsR0FBU0QsRUFBVyxDQUFDakIsRUFBSUMsR0FBTSxNQUc5RmlCLEVDM09NLFlBQVNoK0MsRUFBUTA4QyxFQUFJQyxFQUFJQyxFQUFJQyxHQU8xQyxJQU5BLElBQ0l6OUMsRUFEQXdtQyxFQUFRNWxDLEVBQU8rN0IsU0FFZmw1QyxHQUFLLEVBQ0xzWCxFQUFJeXJDLEVBQU16cEQsT0FDVjR0QixFQUFJL0osRUFBT25rQixRQUFVZ2hFLEVBQUtGLEdBQU0zOEMsRUFBT25rQixRQUVsQ2dILEVBQUlzWCxJQUNYaUYsRUFBT3dtQyxFQUFNL2lELElBQVM2NUQsR0FBS0EsRUFBSXQ5QyxFQUFLdzlDLEdBQUtBLEVBQ3pDeDlDLEVBQUt1OUMsR0FBS0EsRUFBSXY5QyxFQUFLeTlDLEdBQUtGLEdBQU12OUMsRUFBS3ZqQixNQUFRa3VCLEVQbUMvQyxHQUFPdXhDLEdBQUtLLEdBQUtoUSxHQUFPQyxHQUFPLENBQzdCRSxTQUFVLFNBQVMvaEMsR0FDakIsT0FBTyxJQUFJdXhDLEdBQUl6Z0UsS0FBS3U3RCxFQXpDZCxJQXlDNEIsTUFBTHJzQyxFQUFZLEVBQUlBLEdBQUlsdkIsS0FBSzhiLEVBQUc5YixLQUFLNmQsRUFBRzdkLEtBQUs2N0QsVUFFeEU3SyxPQUFRLFNBQVM5aEMsR0FDZixPQUFPLElBQUl1eEMsR0FBSXpnRSxLQUFLdTdELEVBNUNkLElBNEM0QixNQUFMcnNDLEVBQVksRUFBSUEsR0FBSWx2QixLQUFLOGIsRUFBRzliLEtBQUs2ZCxFQUFHN2QsS0FBSzY3RCxVQUV4RVgsSUFBSyxXQUNILElBQUlqdUMsR0FBS2p0QixLQUFLdTdELEVBQUksSUFBTSxJQUNwQjczQyxFQUFJME8sTUFBTXB5QixLQUFLOGIsR0FBS21SLEVBQUlBLEVBQUlqdEIsS0FBSzhiLEVBQUksSUFDckNtaEIsRUFBSTdLLE1BQU1weUIsS0FBSzZkLEdBQUtvUCxFQUFJQSxFQUFJanRCLEtBQUs2ZCxFQUFJLElBSXpDLE9BQU8sSUFBSTQ5QyxHQUNUdUYsR0FBVSxXQUpadDlDLEVBQUk0OEMsR0FBS1MsR0FBUXI5QyxJQUlXLFdBSDVCdUosRUFqREssRUFpREk4ekMsR0FBUTl6QyxJQUcyQixVQUY1Q2dRLEVBQUlzakMsR0FBS1EsR0FBUTlqQyxLQUdmK2pDLElBQVUsU0FBWXQ5QyxFQUFJLFVBQVl1SixFQUFJLFFBQVlnUSxHQUN0RCtqQyxHQUFVLFNBQVl0OUMsRUFBSSxTQUFZdUosRUFBSSxVQUFZZ1EsR0FDdERqOUIsS0FBSzY3RCxhQWtEWCxHQUFPNkUsSUFqQkEsU0FBYTFFLEVBQUdsK0MsRUFBR3k5QyxFQUFHTSxHQUMzQixPQUE0QixJQUFyQjd5RCxVQUFVMUgsT0FBZTIvRCxHQUFXakYsR0FBSyxJQUFJMEUsR0FBSTFFLEVBQUdsK0MsRUFBR3k5QyxFQUFjLE1BQVhNLEVBQWtCLEVBQUlBLEtBZ0J4RS9LLEdBQU9DLEdBQU8sQ0FDN0JFLFNBQVUsU0FBUy9oQyxHQUNqQixPQUFPLElBQUl3eEMsR0FBSTFnRSxLQUFLZzhELEVBQUdoOEQsS0FBSzhkLEVBQUc5ZCxLQUFLdTdELEVBN0c5QixJQTZHNEMsTUFBTHJzQyxFQUFZLEVBQUlBLEdBQUlsdkIsS0FBSzY3RCxVQUV4RTdLLE9BQVEsU0FBUzloQyxHQUNmLE9BQU8sSUFBSXd4QyxHQUFJMWdFLEtBQUtnOEQsRUFBR2g4RCxLQUFLOGQsRUFBRzlkLEtBQUt1N0QsRUFoSDlCLElBZ0g0QyxNQUFMcnNDLEVBQVksRUFBSUEsR0FBSWx2QixLQUFLNjdELFVBRXhFWCxJQUFLLFdBQ0gsT0FBT3lGLEdBQVEzZ0UsTUFBTWs3RCxVRTlDekJzRyxHQUFLNWdFLFVBQVl3Z0UsR0FBVXhnRSxVQUFZLENBQ3JDeUgsWUFBYW01RCxHQUNibjZELE1EbkVhLFdBQ2IsT0FBT3JILEtBQUtxakUsVUFBVWg4RCxLQ21FdEIyakQsS003RWEsU0FBUy9YLEVBQVVqbUMsR0FDaEMsSUFBSTVMLEdBQVMsRUFDYixJQUFLLE1BQU1takIsS0FBUXZrQixLQUNqQml6QyxFQUFTMXVDLEtBQUt5SSxFQUFNdVgsSUFBUW5qQixFQUFPcEIsTUFFckMsT0FBT0EsTU55RVBxakUsVU85RWEsU0FBU3B3QixFQUFVam1DLEdBRWhDLElBREEsSUFBNENrMEMsRUFBVWw1QyxFQUFHc1gsRUFBckRpRixFQUFPdmtCLEtBQU0rcUQsRUFBUSxDQUFDeG1DLEdBQU8vWSxFQUFPLEdBQW9CcEssR0FBUyxFQUM5RG1qQixFQUFPd21DLEVBQU16VixPQUVsQixHQURBOXBDLEVBQUtlLEtBQUtnWSxHQUNOMjhCLEVBQVczOEIsRUFBSzI4QixTQUNsQixJQUFLbDVDLEVBQUksRUFBR3NYLEVBQUk0aEMsRUFBUzUvQyxPQUFRMEcsRUFBSXNYLElBQUt0WCxFQUN4QytpRCxFQUFNeCtDLEtBQUsyMEMsRUFBU2w1QyxJQUkxQixLQUFPdWMsRUFBTy9ZLEVBQUs4cEMsT0FDakJyQyxFQUFTMXVDLEtBQUt5SSxFQUFNdVgsSUFBUW5qQixFQUFPcEIsTUFFckMsT0FBT0EsTVBrRVB5aEUsV1EvRWEsU0FBU3h1QixFQUFVam1DLEdBRWhDLElBREEsSUFBaUNrMEMsRUFBVWw1QyxFQUF2Q3VjLEVBQU92a0IsS0FBTStxRCxFQUFRLENBQUN4bUMsR0FBb0JuakIsR0FBUyxFQUNoRG1qQixFQUFPd21DLEVBQU16VixPQUVsQixHQURBckMsRUFBUzF1QyxLQUFLeUksRUFBTXVYLElBQVFuakIsRUFBT3BCLE1BQy9Ca2hELEVBQVczOEIsRUFBSzI4QixTQUNsQixJQUFLbDVDLEVBQUlrNUMsRUFBUzUvQyxPQUFTLEVBQUcwRyxHQUFLLElBQUtBLEVBQ3RDK2lELEVBQU14K0MsS0FBSzIwQyxFQUFTbDVDLElBSTFCLE9BQU9oSSxNUnNFUHdOLEtTaEZhLFNBQVN5bEMsRUFBVWptQyxHQUNoQyxJQUFJNUwsR0FBUyxFQUNiLElBQUssTUFBTW1qQixLQUFRdmtCLEtBQ2pCLEdBQUlpekMsRUFBUzF1QyxLQUFLeUksRUFBTXVYLElBQVFuakIsRUFBT3BCLE1BQ3JDLE9BQU91a0IsR1Q2RVhtVyxJVWpGYSxTQUFTMTVCLEdBQ3RCLE9BQU9oQixLQUFLcWpFLFdBQVUsU0FBUzkrQyxHQUk3QixJQUhBLElBQUltVyxHQUFPMTVCLEVBQU11akIsRUFBSzlTLE9BQVMsRUFDM0J5dkMsRUFBVzM4QixFQUFLMjhCLFNBQ2hCbDVDLEVBQUlrNUMsR0FBWUEsRUFBUzUvQyxTQUNwQjBHLEdBQUssR0FBRzB5QixHQUFPd21CLEVBQVNsNUMsR0FBR2hILE1BQ3BDdWpCLEVBQUt2akIsTUFBUTA1QixNVjRFZnZVLEtXbEZhLFNBQVN3a0MsR0FDdEIsT0FBTzNxRCxLQUFLeWhFLFlBQVcsU0FBU2w5QyxHQUMxQkEsRUFBSzI4QixVQUNQMzhCLEVBQUsyOEIsU0FBUy82QixLQUFLd2tDLE9YZ0Z2QjFxRCxLWW5GYSxTQUFTcUssR0FJdEIsSUFIQSxJQUFJM0MsRUFBUTNILEtBQ1IraUUsRUFjTixTQUE2QmpuRCxFQUFHK0IsR0FDOUIsR0FBSS9CLElBQU0rQixFQUFHLE9BQU8vQixFQUNwQixJQUFJMm9ELEVBQVMzb0QsRUFBRTRvRCxZQUNYQyxFQUFTOW1ELEVBQUU2bUQsWUFDWDVtRCxFQUFJLEtBR1IsSUFGQWhDLEVBQUkyb0QsRUFBT252QixNQUNYejNCLEVBQUk4bUQsRUFBT3J2QixNQUNKeDVCLElBQU0rQixHQUNYQyxFQUFJaEMsRUFDSkEsRUFBSTJvRCxFQUFPbnZCLE1BQ1h6M0IsRUFBSThtRCxFQUFPcnZCLE1BRWIsT0FBT3gzQixFQTFCUThtRCxDQUFvQmo5RCxFQUFPMkMsR0FDdEN5Z0QsRUFBUSxDQUFDcGpELEdBQ05BLElBQVVvN0QsR0FDZnA3RCxFQUFRQSxFQUFNd2QsT0FDZDRsQyxFQUFNeCtDLEtBQUs1RSxHQUdiLElBREEsSUFBSXVuQixFQUFJNjdCLEVBQU16cEQsT0FDUGdKLElBQVF5NEQsR0FDYmhZLEVBQU1wNEMsT0FBT3VjLEVBQUcsRUFBRzVrQixHQUNuQkEsRUFBTUEsRUFBSTZhLE9BRVosT0FBTzRsQyxHWnVFUDJaLFVhcEZhLFdBRWIsSUFEQSxJQUFJbmdELEVBQU92a0IsS0FBTStxRCxFQUFRLENBQUN4bUMsR0FDbkJBLEVBQU9BLEVBQUtZLFFBQ2pCNGxDLEVBQU14K0MsS0FBS2dZLEdBRWIsT0FBT3dtQyxHYmdGUDhaLFljckZhLFdBQ2IsT0FBT2xrRSxNQUFNMEosS0FBS3JLLE9kcUZsQjhrRSxPZXRGYSxXQUNiLElBQUlBLEVBQVMsR0FNYixPQUxBOWtFLEtBQUt5aEUsWUFBVyxTQUFTbDlDLEdBQ2xCQSxFQUFLMjhCLFVBQ1I0akIsRUFBT3Y0RCxLQUFLZ1ksTUFHVHVnRCxHZmdGUEMsTWdCdkZhLFdBQ2IsSUFBSXJsRSxFQUFPTSxLQUFNK2tFLEVBQVEsR0FNekIsT0FMQXJsRSxFQUFLc3JELE1BQUssU0FBU3ptQyxHQUNiQSxJQUFTN2tCLEdBQ1hxbEUsRUFBTXg0RCxLQUFLLENBQUMySCxPQUFRcVEsRUFBS1ksT0FBUWxiLE9BQVFzYSxPQUd0Q3dnRCxHaEJpRlBsWixLQTVDRixXQUNFLE9BQU91VixHQUFVcGhFLE1BQU15aEUsV0FBV0UsS0E0Q2xDLENBQUN6cEQsT0FBTzNNLFVpQnpGSyxZQUNiLElBQWlCeTVELEVBQXdCOWpCLEVBQVVsNUMsRUFBR3NYLEVBQWxEaUYsRUFBT3ZrQixLQUFld0wsRUFBTyxDQUFDK1ksR0FDbEMsR0FFRSxJQURBeWdELEVBQVV4NUQsRUFBSzFELFVBQVcwRCxFQUFPLEdBQzFCK1ksRUFBT3lnRCxFQUFRMXZCLE9BRXBCLFNBRE0vd0IsRUFDRjI4QixFQUFXMzhCLEVBQUsyOEIsU0FDbEIsSUFBS2w1QyxFQUFJLEVBQUdzWCxFQUFJNGhDLEVBQVM1L0MsT0FBUTBHLEVBQUlzWCxJQUFLdFgsRUFDeEN3RCxFQUFLZSxLQUFLMjBDLEVBQVNsNUMsVUFJbEJ3RCxFQUFLbEssVWI2RGhCMGhFLEdBQVNwaUUsVUFBWWtDLE9BQU92QyxPQUFPaWhFLEdBQUs1Z0UsV2NuQnhDLFNBQWUsU0FBVXFrRSxFQUFPQyxHQUU5QixTQUFTQyxFQUFTaGdELEVBQVEwOEMsRUFBSUMsRUFBSUMsRUFBSUMsSUFuRGpDLFNBQXVCa0QsRUFBTy8vQyxFQUFRMDhDLEVBQUlDLEVBQUlDLEVBQUlDLEdBa0J2RCxJQWpCQSxJQUVJb0QsRUFDQUMsRUFJQXBELEVBQUlDLEVBRUpvRCxFQUNBQyxFQUNBQyxFQUNBQyxFQUNBQyxFQUNBQyxFQUNBQyxFQWZBQyxFQUFPLEdBQ1A5YSxFQUFRNWxDLEVBQU8rN0IsU0FHZnVJLEVBQUssRUFDTEMsRUFBSyxFQUNMcHFDLEVBQUl5ckMsRUFBTXpwRCxPQUVWTixFQUFRbWtCLEVBQU9ua0IsTUFTWnlvRCxFQUFLbnFDLEdBQUcsQ0FDYjJpRCxFQUFLRixFQUFLRixFQUFJSyxFQUFLRixFQUFLRixFQUd4QixHQUFHd0QsRUFBV3ZhLEVBQU1yQixLQUFNMW9ELGFBQWVza0UsR0FBWTViLEVBQUtwcUMsR0FPMUQsSUFOQWltRCxFQUFXQyxFQUFXRixFQUV0Qk0sRUFBT04sRUFBV0EsR0FEbEJLLEVBQVE1N0QsS0FBS21vQixJQUFJZ3dDLEVBQUtELEVBQUlBLEVBQUtDLElBQU9saEUsRUFBUWtrRSxJQUU5Q1EsRUFBVzM3RCxLQUFLbW9CLElBQUlzekMsRUFBV0ksRUFBTUEsRUFBT0wsR0FHckM3YixFQUFLcHFDLElBQUtvcUMsRUFBSSxDQU1uQixHQUxBNGIsR0FBWUQsRUFBWXRhLEVBQU1yQixHQUFJMW9ELE1BQzlCcWtFLEVBQVlFLElBQVVBLEVBQVdGLEdBQ2pDQSxFQUFZRyxJQUFVQSxFQUFXSCxHQUNyQ08sRUFBT04sRUFBV0EsRUFBV0ssR0FDN0JGLEVBQVcxN0QsS0FBS21vQixJQUFJc3pDLEVBQVdJLEVBQU1BLEVBQU9MLElBQzdCRyxFQUFVLENBQUVKLEdBQVlELEVBQVcsTUFDbERLLEVBQVdELEVBSWJJLEVBQUt0NUQsS0FBSzY0RCxFQUFNLENBQUNwa0UsTUFBT3NrRSxFQUFVUSxLQUFNN0QsRUFBS0MsRUFBSWhoQixTQUFVNkosRUFBTWxqRCxNQUFNNGhELEVBQUlDLEtBQ3ZFMGIsRUFBSVUsS0FBTSxHQUFZVixFQUFLdkQsRUFBSUMsRUFBSUMsRUFBSS9nRSxFQUFROGdFLEdBQU1JLEVBQUtvRCxFQUFXdGtFLEVBQVFnaEUsR0FDNUUsR0FBYW9ELEVBQUt2RCxFQUFJQyxFQUFJOWdFLEVBQVE2Z0UsR0FBTUksRUFBS3FELEVBQVd0a0UsRUFBUStnRSxFQUFJQyxHQUN6RWhoRSxHQUFTc2tFLEVBQVU3YixFQUFLQyxHQVN4QnFjLENBQWNiLEVBQU8vL0MsRUFBUTA4QyxFQUFJQyxFQUFJQyxFQUFJQyxHQU8zQyxPQUpBbUQsRUFBU0QsTUFBUSxTQUFTeGhELEdBQ3hCLE9BQU91aEQsR0FBUXZoRCxHQUFLQSxHQUFLLEVBQUlBLEVBQUksSUFHNUJ5aEQsRUFWVCxFQW5Ea0IsRUFBSXA3RCxLQUFLMnZCLEtBQUssSUFBTSxHQ0MvQixTQUFTMFksR0FBU3R4QyxHQUN2QixHQUFpQixtQkFBTkEsRUFBa0IsTUFBTSxJQUFJNnpCLE1BQ3ZDLE9BQU83ekIsRUNORixTQUFTa2xFLEtBQ2QsT0FBTyxFQUdNLFlBQVN0aUQsR0FDdEIsT0FBTyxXQUNMLE9BQU9BLEdDREksY0FDYixJQUFJdWlELEVBQU9kLEdBQ1BweUMsR0FBUSxFQUNSa3ZDLEVBQUssRUFDTEMsRUFBSyxFQUNMZ0UsRUFBZSxDQUFDLEdBQ2hCQyxFQUFlSCxHQUNmSSxFQUFhSixHQUNiSyxFQUFlTCxHQUNmTSxFQUFnQk4sR0FDaEJPLEVBQWNQLEdBRWxCLFNBQVNRLEVBQVE5bUUsR0FRZixPQVBBQSxFQUFLbWlFLEdBQ0xuaUUsRUFBS29pRSxHQUFLLEVBQ1ZwaUUsRUFBS3FpRSxHQUFLRSxFQUNWdmlFLEVBQUtzaUUsR0FBS0UsRUFDVnhpRSxFQUFLK2hFLFdBQVdZLEdBQ2hCNkQsRUFBZSxDQUFDLEdBQ1puekMsR0FBT3J6QixFQUFLK2hFLFdBQVcsSUFDcEIvaEUsRUFHVCxTQUFTMmlFLEVBQWE5OUMsR0FDcEIsSUFBSThnQixFQUFJNmdDLEVBQWEzaEQsRUFBS25ILE9BQ3RCeWtELEVBQUt0OUMsRUFBS3M5QyxHQUFLeDhCLEVBQ2Z5OEIsRUFBS3Y5QyxFQUFLdTlDLEdBQUt6OEIsRUFDZjA4QixFQUFLeDlDLEVBQUt3OUMsR0FBSzE4QixFQUNmMjhCLEVBQUt6OUMsRUFBS3k5QyxHQUFLMzhCLEVBQ2YwOEIsRUFBS0YsSUFBSUEsRUFBS0UsR0FBTUYsRUFBS0UsR0FBTSxHQUMvQkMsRUFBS0YsSUFBSUEsRUFBS0UsR0FBTUYsRUFBS0UsR0FBTSxHQUNuQ3o5QyxFQUFLczlDLEdBQUtBLEVBQ1Z0OUMsRUFBS3U5QyxHQUFLQSxFQUNWdjlDLEVBQUt3OUMsR0FBS0EsRUFDVng5QyxFQUFLeTlDLEdBQUtBLEVBQ056OUMsRUFBSzI4QixXQUNQN2IsRUFBSTZnQyxFQUFhM2hELEVBQUtuSCxNQUFRLEdBQUsrb0QsRUFBYTVoRCxHQUFRLEVBQ3hEczlDLEdBQU0wRSxFQUFZaGlELEdBQVE4Z0IsRUFDMUJ5OEIsR0FBTXNFLEVBQVc3aEQsR0FBUThnQixHQUN6QjA4QixHQUFNc0UsRUFBYTloRCxHQUFROGdCLEdBRWxCdzhCLElBQUlBLEVBQUtFLEdBQU1GLEVBQUtFLEdBQU0sSUFEbkNDLEdBQU1zRSxFQUFjL2hELEdBQVE4Z0IsR0FFbkJ5OEIsSUFBSUEsRUFBS0UsR0FBTUYsRUFBS0UsR0FBTSxHQUNuQ2lFLEVBQUsxaEQsRUFBTXM5QyxFQUFJQyxFQUFJQyxFQUFJQyxJQTRDM0IsT0F4Q0F3RSxFQUFRenpDLE1BQVEsU0FBU3JQLEdBQ3ZCLE9BQU8xYSxVQUFVMUgsUUFBVXl4QixJQUFVclAsRUFBRzhpRCxHQUFXenpDLEdBR3JEeXpDLEVBQVF2MUQsS0FBTyxTQUFTeVMsR0FDdEIsT0FBTzFhLFVBQVUxSCxRQUFVMmdFLEdBQU12K0MsRUFBRSxHQUFJdytDLEdBQU14K0MsRUFBRSxHQUFJOGlELEdBQVcsQ0FBQ3ZFLEVBQUlDLElBR3JFc0UsRUFBUVAsS0FBTyxTQUFTdmlELEdBQ3RCLE9BQU8xYSxVQUFVMUgsUUFBVTJrRSxFQUFPN3pCLEdBQVMxdUIsR0FBSThpRCxHQUFXUCxHQUc1RE8sRUFBUXJFLFFBQVUsU0FBU3orQyxHQUN6QixPQUFPMWEsVUFBVTFILE9BQVNrbEUsRUFBUUwsYUFBYXppRCxHQUFHK2lELGFBQWEvaUQsR0FBSzhpRCxFQUFRTCxnQkFHOUVLLEVBQVFMLGFBQWUsU0FBU3ppRCxHQUM5QixPQUFPMWEsVUFBVTFILFFBQVU2a0UsRUFBNEIsbUJBQU56aUQsRUFBbUJBLEVBQUksSUFBVUEsR0FBSThpRCxHQUFXTCxHQUduR0ssRUFBUUMsYUFBZSxTQUFTL2lELEdBQzlCLE9BQU8xYSxVQUFVMUgsT0FBU2tsRSxFQUFRSixXQUFXMWlELEdBQUcyaUQsYUFBYTNpRCxHQUFHNGlELGNBQWM1aUQsR0FBRzZpRCxZQUFZN2lELEdBQUs4aUQsRUFBUUosY0FHNUdJLEVBQVFKLFdBQWEsU0FBUzFpRCxHQUM1QixPQUFPMWEsVUFBVTFILFFBQVU4a0UsRUFBMEIsbUJBQU4xaUQsRUFBbUJBLEVBQUksSUFBVUEsR0FBSThpRCxHQUFXSixHQUdqR0ksRUFBUUgsYUFBZSxTQUFTM2lELEdBQzlCLE9BQU8xYSxVQUFVMUgsUUFBVStrRSxFQUE0QixtQkFBTjNpRCxFQUFtQkEsRUFBSSxJQUFVQSxHQUFJOGlELEdBQVdILEdBR25HRyxFQUFRRixjQUFnQixTQUFTNWlELEdBQy9CLE9BQU8xYSxVQUFVMUgsUUFBVWdsRSxFQUE2QixtQkFBTjVpRCxFQUFtQkEsRUFBSSxJQUFVQSxHQUFJOGlELEdBQVdGLEdBR3BHRSxFQUFRRCxZQUFjLFNBQVM3aUQsR0FDN0IsT0FBTzFhLFVBQVUxSCxRQUFVaWxFLEVBQTJCLG1CQUFON2lELEVBQW1CQSxFQUFJLElBQVVBLEdBQUk4aUQsR0FBV0QsR0FHM0ZDLEVDckZGLFNBQVNFLEdBQWE1cUQsRUFBRytCLEdBQzlCLElBSUk3VixFQUpBMitELEVBQUs5b0QsRUFBSUEsRUFBRXZjLE9BQVMsRUFDcEJzbEUsRUFBSzlxRCxFQUFJL1IsS0FBS0QsSUFBSTY4RCxFQUFJN3FELEVBQUV4YSxRQUFVLEVBQ2xDb2lCLEVBQUksSUFBSS9pQixNQUFNaW1FLEdBQ2Q5b0QsRUFBSSxJQUFJbmQsTUFBTWdtRSxHQUdsQixJQUFLMytELEVBQUksRUFBR0EsRUFBSTQrRCxJQUFNNStELEVBQUcwYixFQUFFMWIsR0FBS2hILEdBQU04YSxFQUFFOVQsR0FBSTZWLEVBQUU3VixJQUM5QyxLQUFPQSxFQUFJMitELElBQU0zK0QsRUFBRzhWLEVBQUU5VixHQUFLNlYsRUFBRTdWLEdBRTdCLE9BQU8sU0FBU2lvQixHQUNkLElBQUtqb0IsRUFBSSxFQUFHQSxFQUFJNCtELElBQU01K0QsRUFBRzhWLEVBQUU5VixHQUFLMGIsRUFBRTFiLEdBQUdpb0IsR0FDckMsT0FBT25TLEdDbkJJLFlBQVNoQyxFQUFHK0IsR0FDekIsSUFBSWdqQyxFQUFJLElBQUlqckMsS0FDWixPQUFPa0csR0FBS0EsRUFBRytCLEdBQUtBLEVBQUcsU0FBU29TLEdBQzlCLE9BQU80d0IsRUFBRWdtQixRQUFRL3FELEdBQUssRUFBSW1VLEdBQUtwUyxFQUFJb1MsR0FBSTR3QixHQ0Q1QixZQUFTL2tDLEVBQUcrQixHQUN6QixJQUVJcVIsRUFGQWxuQixFQUFJLEdBQ0o4VixFQUFJLEdBTVIsSUFBS29SLEtBSEssT0FBTnBULEdBQTJCLGlCQUFOQSxJQUFnQkEsRUFBSSxJQUNuQyxPQUFOK0IsR0FBMkIsaUJBQU5BLElBQWdCQSxFQUFJLElBRW5DQSxFQUNKcVIsS0FBS3BULEVBQ1A5VCxFQUFFa25CLEdBQUtsdUIsR0FBTThhLEVBQUVvVCxHQUFJclIsRUFBRXFSLElBRXJCcFIsRUFBRW9SLEdBQUtyUixFQUFFcVIsR0FJYixPQUFPLFNBQVNlLEdBQ2QsSUFBS2YsS0FBS2xuQixFQUFHOFYsRUFBRW9SLEdBQUtsbkIsRUFBRWtuQixHQUFHZSxHQUN6QixPQUFPblMsR0NwQkksWUFBU2hDLEVBQUcrQixHQUNwQkEsSUFBR0EsRUFBSSxJQUNaLElBRUk3VixFQUZBc1gsRUFBSXhELEVBQUkvUixLQUFLRCxJQUFJK1QsRUFBRXZjLE9BQVF3YSxFQUFFeGEsUUFBVSxFQUN2Q3djLEVBQUlELEVBQUVoVyxRQUVWLE9BQU8sU0FBU29vQixHQUNkLElBQUtqb0IsRUFBSSxFQUFHQSxFQUFJc1gsSUFBS3RYLEVBQUc4VixFQUFFOVYsR0FBSzhULEVBQUU5VCxJQUFNLEVBQUlpb0IsR0FBS3BTLEVBQUU3VixHQUFLaW9CLEVBQ3ZELE9BQU9uUyxHQ0dJLFlBQVNoQyxFQUFHK0IsR0FDekIsSUFBa0JDLEVEQVU0RixFQ0F4QnVNLFNBQVdwUyxFQUNmLE9BQVksTUFBTEEsR0FBbUIsWUFBTm9TLEVBQWtCLEdBQVNwUyxJQUNsQyxXQUFOb1MsRUFBaUJycEIsR0FDWixXQUFOcXBCLEdBQW1CblMsRUFBSTBvQixHQUFNM29CLEtBQU9BLEVBQUlDLEVBQUdvOUMsSUFBT3ZtRCxHQUNsRGtKLGFBQWEyb0IsR0FBUTAwQixHQUNyQnI5QyxhQUFhakksS0FBT0ssSURMRXlOLEVDTVI3RixHRExicGMsWUFBWXVELE9BQU8wZSxJQUFRQSxhQUFhaGlCLFNDTXpDZixNQUFNbU8sUUFBUStPLEdBQUs2b0QsR0FDRSxtQkFBZDdvRCxFQUFFNFUsU0FBZ0QsbUJBQWY1VSxFQUFFak8sVUFBMkJ3aUIsTUFBTXZVLEdBQUtsTyxHQUNsRi9JLEdBSG1CLEtBR1hrVixFQUFHK0IsR0NqQkosU0FBUyxHQUFJbFcsRUFBTzJDLEdBQ2pDLElBQUlpeEQsRUFBSSxJQUFPNXpELEVBQVEsR0FBU0EsSUFBUTR6RCxHQUFJanhELEVBQU0sR0FBU0EsSUFBTWl4RCxHQUM3RHovQyxFQUFJLEdBQU1uVSxFQUFNbVUsRUFBR3hSLEVBQUl3UixHQUN2QitCLEVBQUksR0FBTWxXLEVBQU1rVyxFQUFHdlQsRUFBSXVULEdBQ3ZCZytDLEVBQVUsR0FBTWwwRCxFQUFNazBELFFBQVN2eEQsRUFBSXV4RCxTQUN2QyxPQUFPLFNBQVM1ckMsR0FLZCxPQUpBdG9CLEVBQU00ekQsRUFBSUEsRUFBRXRyQyxHQUNadG9CLEVBQU1tVSxFQUFJQSxFQUFFbVUsR0FDWnRvQixFQUFNa1csRUFBSUEsRUFBRW9TLEdBQ1p0b0IsRUFBTWswRCxRQUFVQSxFQUFRNXJDLEdBQ2pCdG9CLEVBQVEsSUNibkIsSUFBSW0vRCxHQUFNLzhELEtBQUsydkIsS0FBSyxJQUNoQnF0QyxHQUFLaDlELEtBQUsydkIsS0FBSyxJQUNmc3RDLEdBQUtqOUQsS0FBSzJ2QixLQUFLLEdBZ0NaLFNBQVN1dEMsR0FBY3QvRCxFQUFPcWIsRUFBTTNiLEdBQ3pDLElBQUlpRSxHQUFRMFgsRUFBT3JiLEdBQVNvQyxLQUFLbW9CLElBQUksRUFBRzdxQixHQUNwQzYvRCxFQUFRbjlELEtBQUswVSxNQUFNMVUsS0FBSytWLElBQUl4VSxHQUFRdkIsS0FBS285RCxNQUN6Q3BpRSxFQUFRdUcsRUFBT3ZCLEtBQUs4VixJQUFJLEdBQUlxbkQsR0FDaEMsT0FBT0EsR0FBUyxHQUNUbmlFLEdBQVMraEUsR0FBTSxHQUFLL2hFLEdBQVNnaUUsR0FBSyxFQUFJaGlFLEdBQVNpaUUsR0FBSyxFQUFJLEdBQUtqOUQsS0FBSzhWLElBQUksR0FBSXFuRCxJQUMxRW45RCxLQUFLOFYsSUFBSSxJQUFLcW5ELElBQVVuaUUsR0FBUytoRSxHQUFNLEdBQUsvaEUsR0FBU2dpRSxHQUFLLEVBQUloaUUsR0FBU2lpRSxHQUFLLEVBQUksR0N4QzFFLFlBQVNsckQsRUFBRytCLEdBQ3pCLE9BQU8vQixFQUFJK0IsR0FBSyxFQUFJL0IsRUFBSStCLEVBQUksRUFBSS9CLEdBQUsrQixFQUFJLEVBQUk1VixJQ0NoQyxZQUFTbkgsR0FDdEIsSUFBSWl1QixFQUFRanVCLEVBQ1I2cEQsRUFBVTdwRCxFQU9kLFNBQVM4TixFQUFLa04sRUFBRzRILEVBQUcwakQsRUFBSXJ1QyxHQUd0QixJQUZVLE1BQU5xdUMsSUFBWUEsRUFBSyxHQUNYLE1BQU5ydUMsSUFBWUEsRUFBS2pkLEVBQUV4YSxRQUNoQjhsRSxFQUFLcnVDLEdBQUksQ0FDZCxNQUFNc3VDLEVBQU9ELEVBQUtydUMsSUFBUSxFQUN0QjR4QixFQUFRN3VDLEVBQUV1ckQsR0FBTTNqRCxHQUFLLEVBQUcwakQsRUFBS0MsRUFBTSxFQUNsQ3R1QyxFQUFLc3VDLEVBRVosT0FBT0QsRUFxQlQsT0FsQ2lCLElBQWJ0bUUsRUFBRVEsU0FDSnl0QixFQUFRLENBQUM4eEIsRUFBR245QixJQUFNNWlCLEVBQUUrL0MsR0FBS245QixFQUN6QmluQyxFQW1DSixTQUE2QjdwRCxHQUMzQixNQUFPLENBQUMrL0MsRUFBR245QixJQUFNLEdBQVU1aUIsRUFBRSsvQyxHQUFJbjlCLEdBcENyQjRqRCxDQUFvQnhtRSxJQWdDekIsQ0FBQzhOLE9BQU0yNEQsT0FQZCxTQUFnQnpyRCxFQUFHNEgsRUFBRzBqRCxFQUFJcnVDLEdBQ2QsTUFBTnF1QyxJQUFZQSxFQUFLLEdBQ1gsTUFBTnJ1QyxJQUFZQSxFQUFLamQsRUFBRXhhLFFBQ3ZCLE1BQU0wRyxFQUFJNEcsRUFBS2tOLEVBQUc0SCxFQUFHMGpELEVBQUlydUMsRUFBSyxHQUM5QixPQUFPL3dCLEVBQUlvL0QsR0FBTXI0QyxFQUFNalQsRUFBRTlULEVBQUksR0FBSTBiLElBQU1xTCxFQUFNalQsRUFBRTlULEdBQUkwYixHQUFLMWIsRUFBSSxFQUFJQSxHQUc1QzZHLE1BbEJ0QixTQUFlaU4sRUFBRzRILEVBQUcwakQsRUFBSXJ1QyxHQUd2QixJQUZVLE1BQU5xdUMsSUFBWUEsRUFBSyxHQUNYLE1BQU5ydUMsSUFBWUEsRUFBS2pkLEVBQUV4YSxRQUNoQjhsRSxFQUFLcnVDLEdBQUksQ0FDZCxNQUFNc3VDLEVBQU9ELEVBQUtydUMsSUFBUSxFQUN0QjR4QixFQUFRN3VDLEVBQUV1ckQsR0FBTTNqRCxHQUFLLEVBQUdxVixFQUFLc3VDLEVBQzVCRCxFQUFLQyxFQUFNLEVBRWxCLE9BQU9ELElDMUJYLE1BQU1JLEdBQWtCQyxHQUFTLElBQ3BCQyxHQUFjRixHQUFnQjM0RCxNQUczQyxJQUYwQjI0RCxHQUFnQjU0RCxLQUNkNjRELElDUGIsU0FBUy9qRCxHQUN0QixPQUFhLE9BQU5BLEVBQWF6YixLQUFPeWIsS0RNZ0I2akQsT0FDN0MsSUVSZSxZQUFTenJELEVBQUcrQixHQUN6QixPQUFPL0IsR0FBS0EsRUFBRytCLEdBQUtBLEVBQUcsU0FBU29TLEdBQzlCLE9BQU9sbUIsS0FBS2dwQixNQUFNalgsR0FBSyxFQUFJbVUsR0FBS3BTLEVBQUlvUyxJQ0Z6QixTQUFTLEdBQU92TSxHQUM3QixPQUFRQSxFQ0lWLElBQUlpa0QsR0FBTyxDQUFDLEVBQUcsR0FFUixTQUFTLEdBQVNqa0QsR0FDdkIsT0FBT0EsRUFHVCxTQUFTckIsR0FBVXZHLEVBQUcrQixHQUNwQixPQUFRQSxHQUFNL0IsR0FBS0EsR0FDYixTQUFTNEgsR0FBSyxPQUFRQSxFQUFJNUgsR0FBSytCLElDYkw2RixFRGNqQjBPLE1BQU12VSxHQUFLNVYsSUFBTSxHQ2J6QixXQUNMLE9BQU95YixJQUZJLElBQW1CQSxFRHlCbEMsU0FBU2trRCxHQUFNeGlELEVBQVF5aUQsRUFBTzlKLEdBQzVCLElBQUkrSixFQUFLMWlELEVBQU8sR0FBSTJpRCxFQUFLM2lELEVBQU8sR0FBSTRpRCxFQUFLSCxFQUFNLEdBQUlJLEVBQUtKLEVBQU0sR0FHOUQsT0FGSUUsRUFBS0QsR0FBSUEsRUFBS3psRCxHQUFVMGxELEVBQUlELEdBQUtFLEVBQUtqSyxFQUFZa0ssRUFBSUQsS0FDckRGLEVBQUt6bEQsR0FBVXlsRCxFQUFJQyxHQUFLQyxFQUFLakssRUFBWWlLLEVBQUlDLElBQzNDLFNBQVN2a0QsR0FBSyxPQUFPc2tELEVBQUdGLEVBQUdwa0QsS0FHcEMsU0FBU3drRCxHQUFROWlELEVBQVF5aUQsRUFBTzlKLEdBQzlCLElBQUkzMUQsRUFBSTJCLEtBQUtELElBQUlzYixFQUFPOWpCLE9BQVF1bUUsRUFBTXZtRSxRQUFVLEVBQzVDdS9DLEVBQUksSUFBSWxnRCxNQUFNeUgsR0FDZHk2QixFQUFJLElBQUlsaUMsTUFBTXlILEdBQ2RKLEdBQUssRUFRVCxJQUxJb2QsRUFBT2hkLEdBQUtnZCxFQUFPLEtBQ3JCQSxFQUFTQSxFQUFPdmQsUUFBUUMsVUFDeEIrL0QsRUFBUUEsRUFBTWhnRSxRQUFRQyxhQUdmRSxFQUFJSSxHQUNYeTRDLEVBQUU3NEMsR0FBS3FhLEdBQVUrQyxFQUFPcGQsR0FBSW9kLEVBQU9wZCxFQUFJLElBQ3ZDNjZCLEVBQUU3NkIsR0FBSysxRCxFQUFZOEosRUFBTTcvRCxHQUFJNi9ELEVBQU03L0QsRUFBSSxJQUd6QyxPQUFPLFNBQVMwYixHQUNkLElBQUkxYixFQUFJbWdFLEdBQU8vaUQsRUFBUTFCLEVBQUcsRUFBR3RiLEdBQUssRUFDbEMsT0FBT3k2QixFQUFFNzZCLEdBQUc2NEMsRUFBRTc0QyxHQUFHMGIsS0FJZCxTQUFTbW9DLEdBQUszM0MsRUFBUWpLLEdBQzNCLE9BQU9BLEVBQ0ZtYixPQUFPbFIsRUFBT2tSLFVBQ2R5aUQsTUFBTTN6RCxFQUFPMnpELFNBQ2I5SixZQUFZN3BELEVBQU82cEQsZUFDbkJxSyxNQUFNbDBELEVBQU9rMEQsU0FDYkMsUUFBUW4wRCxFQUFPbTBELFdBNkRQLFNBQVNDLEtBQ3RCLE9BM0RLLFdBQ0wsSUFHSW5ZLEVBQ0FvWSxFQUNBRixFQUVBRyxFQUNBajVDLEVBQ0E1QyxFQVRBdkgsRUFBU3VpRCxHQUNURSxFQUFRRixHQUNSNUosRUFBYyxHQUlkcUssRUFBUSxHQUtaLFNBQVNLLElBQ1AsSUE1RGEzc0QsRUFBRytCLEVBQ2RvUyxFQTJERTNRLEVBQUl2VixLQUFLRCxJQUFJc2IsRUFBTzlqQixPQUFRdW1FLEVBQU12bUUsUUFJdEMsT0FISThtRSxJQUFVLEtBN0REdHNELEVBNkQyQnNKLEVBQU8sR0E3RC9CdkgsRUE2RG1DdUgsRUFBTzlGLEVBQUksR0EzRDVEeEQsRUFBSStCLElBQUdvUyxFQUFJblUsRUFBR0EsRUFBSStCLEVBQUdBLEVBQUlvUyxHQTJESG00QyxFQTFEbkIsU0FBUzFrRCxHQUFLLE9BQU8zWixLQUFLbW9CLElBQUlwVyxFQUFHL1IsS0FBS0QsSUFBSStULEVBQUc2RixNQTJEbEQ4a0QsRUFBWWxwRCxFQUFJLEVBQUk0b0QsR0FBVU4sR0FDOUJyNEMsRUFBUzVDLEVBQVEsS0FDVmlqQyxFQUdULFNBQVNBLEVBQU1sc0MsR0FDYixPQUFPME8sTUFBTTFPLEdBQUtBLEdBQUsya0QsR0FBVzk0QyxJQUFXQSxFQUFTaTVDLEVBQVVwakQsRUFBT2hZLElBQUkraUQsR0FBWTBYLEVBQU85SixLQUFlNU4sRUFBVWlZLEVBQU0xa0QsS0ErQi9ILE9BNUJBa3NDLEVBQU04WSxPQUFTLFNBQVN6N0MsR0FDdEIsT0FBT203QyxFQUFNRyxHQUFhNTdDLElBQVVBLEVBQVE2N0MsRUFBVVgsRUFBT3ppRCxFQUFPaFksSUFBSStpRCxHQUFZLE1BQXFCbGpDLE1BRzNHMmlDLEVBQU14cUMsT0FBUyxTQUFTdW1DLEdBQ3RCLE9BQU8zaUQsVUFBVTFILFFBQVU4akIsRUFBU3prQixNQUFNMEosS0FBS3NoRCxFQUFHLElBQVM4YyxLQUFhcmpELEVBQU92ZCxTQUdqRituRCxFQUFNaVksTUFBUSxTQUFTbGMsR0FDckIsT0FBTzNpRCxVQUFVMUgsUUFBVXVtRSxFQUFRbG5FLE1BQU0wSixLQUFLc2hELEdBQUk4YyxLQUFhWixFQUFNaGdFLFNBR3ZFK25ELEVBQU0rWSxXQUFhLFNBQVNoZCxHQUMxQixPQUFPa2MsRUFBUWxuRSxNQUFNMEosS0FBS3NoRCxHQUFJb1MsRUFBYyxHQUFrQjBLLEtBR2hFN1ksRUFBTXdZLE1BQVEsU0FBU3pjLEdBQ3JCLE9BQU8zaUQsVUFBVTFILFFBQVU4bUUsSUFBUXpjLEdBQVcsR0FBVThjLEtBQWFMLElBQVUsSUFHakZ4WSxFQUFNbU8sWUFBYyxTQUFTcFMsR0FDM0IsT0FBTzNpRCxVQUFVMUgsUUFBVXk4RCxFQUFjcFMsRUFBRzhjLEtBQWExSyxHQUczRG5PLEVBQU15WSxRQUFVLFNBQVMxYyxHQUN2QixPQUFPM2lELFVBQVUxSCxRQUFVK21FLEVBQVUxYyxFQUFHaUUsR0FBU3lZLEdBRzVDLFNBQVNwNEMsRUFBRzI0QyxHQUVqQixPQURBelksRUFBWWxnQyxFQUFHczRDLEVBQWNLLEVBQ3RCSCxLQUtGSSxHQUFjLEdBQVUsSUUzSDFCLFNBQVNDLEdBQVUxakQsRUFBUXlpRCxHQUNoQyxPQUFRNytELFVBQVUxSCxRQUNoQixLQUFLLEVBQUcsTUFDUixLQUFLLEVBQUd0QixLQUFLNm5FLE1BQU16aUQsR0FBUyxNQUM1QixRQUFTcGxCLEtBQUs2bkUsTUFBTUEsR0FBT3ppRCxPQUFPQSxHQUVwQyxPQUFPcGxCLEtDTFQsSUNDVytvRSxHRERQbnRELEdBQUssMkVBRU0sU0FBU290RCxHQUFnQkMsR0FDdEMsS0FBTXh1RCxFQUFRbUIsR0FBR3BNLEtBQUt5NUQsSUFBYSxNQUFNLElBQUl0MEMsTUFBTSxtQkFBcUJzMEMsR0FDeEUsSUFBSXh1RCxFQUNKLE9BQU8sSUFBSXl1RCxHQUFnQixDQUN6QnB6QyxLQUFNcmIsRUFBTSxHQUNaMHVELE1BQU8xdUQsRUFBTSxHQUNibkUsS0FBTW1FLEVBQU0sR0FDWnNOLE9BQVF0TixFQUFNLEdBQ2RxakQsS0FBTXJqRCxFQUFNLEdBQ1oydUQsTUFBTzN1RCxFQUFNLEdBQ2I0dUQsTUFBTzV1RCxFQUFNLEdBQ2I2aUIsVUFBVzdpQixFQUFNLElBQU1BLEVBQU0sR0FBRzVTLE1BQU0sR0FDdENrZixLQUFNdE0sRUFBTSxHQUNaM0osS0FBTTJKLEVBQU0sTUFNVCxTQUFTeXVELEdBQWdCRCxHQUM5QmpwRSxLQUFLODFCLFVBQTBCajFCLElBQW5Cb29FLEVBQVVuekMsS0FBcUIsSUFBTW16QyxFQUFVbnpDLEtBQU8sR0FDbEU5MUIsS0FBS21wRSxXQUE0QnRvRSxJQUFwQm9vRSxFQUFVRSxNQUFzQixJQUFNRixFQUFVRSxNQUFRLEdBQ3JFbnBFLEtBQUtzVyxVQUEwQnpWLElBQW5Cb29FLEVBQVUzeUQsS0FBcUIsSUFBTTJ5RCxFQUFVM3lELEtBQU8sR0FDbEV0VyxLQUFLK25CLFlBQThCbG5CLElBQXJCb29FLEVBQVVsaEQsT0FBdUIsR0FBS2toRCxFQUFVbGhELE9BQVMsR0FDdkUvbkIsS0FBSzg5RCxPQUFTbUwsRUFBVW5MLEtBQ3hCOTlELEtBQUtvcEUsV0FBNEJ2b0UsSUFBcEJvb0UsRUFBVUcsV0FBc0J2b0UsR0FBYW9vRSxFQUFVRyxNQUNwRXBwRSxLQUFLcXBFLFFBQVVKLEVBQVVJLE1BQ3pCcnBFLEtBQUtzOUIsZUFBb0N6OEIsSUFBeEJvb0UsRUFBVTNyQyxlQUEwQno4QixHQUFhb29FLEVBQVUzckMsVUFDNUV0OUIsS0FBSyttQixPQUFTa2lELEVBQVVsaUQsS0FDeEIvbUIsS0FBSzhRLFVBQTBCalEsSUFBbkJvb0UsRUFBVW40RCxLQUFxQixHQUFLbTRELEVBQVVuNEQsS0FBTyxHRXZCNUQsU0FBU3c0RCxHQUFtQjVsRCxFQUFHMmhCLEdBQ3BDLElBQUtyOUIsR0FBSzBiLEVBQUkyaEIsRUFBSTNoQixFQUFFNmxELGNBQWNsa0MsRUFBSSxHQUFLM2hCLEVBQUU2bEQsaUJBQWlCbjlELFFBQVEsTUFBUSxFQUFHLE9BQU8sS0FDeEYsSUFBSXBFLEVBQUd3aEUsRUFBYzlsRCxFQUFFN2IsTUFBTSxFQUFHRyxHQUloQyxNQUFPLENBQ0x3aEUsRUFBWWxvRSxPQUFTLEVBQUlrb0UsRUFBWSxHQUFLQSxFQUFZM2hFLE1BQU0sR0FBSzJoRSxHQUNoRTlsRCxFQUFFN2IsTUFBTUcsRUFBSSxJQ2ZGLFlBQVMwYixHQUN0QixPQUFPQSxFQUFJNGxELEdBQW1Cdi9ELEtBQUsyTCxJQUFJZ08sS0FBU0EsRUFBRSxHQUFLemIsSUNEMUMsWUFBU3liLEVBQUcyaEIsR0FDekIsSUFBSXdiLEVBQUl5b0IsR0FBbUI1bEQsRUFBRzJoQixHQUM5QixJQUFLd2IsRUFBRyxPQUFPbjlCLEVBQUksR0FDbkIsSUFBSThsRCxFQUFjM29CLEVBQUUsR0FDaEI1Z0MsRUFBVzRnQyxFQUFFLEdBQ2pCLE9BQU81Z0MsRUFBVyxFQUFJLEtBQU8sSUFBSXRmLE9BQU9zZixHQUFVN0IsS0FBSyxLQUFPb3JELEVBQ3hEQSxFQUFZbG9FLE9BQVMyZSxFQUFXLEVBQUl1cEQsRUFBWTNoRSxNQUFNLEVBQUdvWSxFQUFXLEdBQUssSUFBTXVwRCxFQUFZM2hFLE1BQU1vWSxFQUFXLEdBQzVHdXBELEVBQWMsSUFBSTdvRSxNQUFNc2YsRUFBV3VwRCxFQUFZbG9FLE9BQVMsR0FBRzhjLEtBQUssS0pXeEU0cUQsR0FBZ0Jwb0UsVUFBWXNvRSxHQUFnQnRvRSxVQWU1Q3NvRSxHQUFnQnRvRSxVQUFVZ1AsU0FBVyxXQUNuQyxPQUFPNVAsS0FBSzgxQixLQUNOOTFCLEtBQUttcEUsTUFDTG5wRSxLQUFLc1csS0FDTHRXLEtBQUsrbkIsUUFDSi9uQixLQUFLODlELEtBQU8sSUFBTSxVQUNIajlELElBQWZiLEtBQUtvcEUsTUFBc0IsR0FBS3IvRCxLQUFLbW9CLElBQUksRUFBZ0IsRUFBYmx5QixLQUFLb3BFLFNBQ2pEcHBFLEtBQUtxcEUsTUFBUSxJQUFNLFVBQ0F4b0UsSUFBbkJiLEtBQUtzOUIsVUFBMEIsR0FBSyxJQUFNdnpCLEtBQUttb0IsSUFBSSxFQUFvQixFQUFqQmx5QixLQUFLczlCLGFBQzNEdDlCLEtBQUsrbUIsS0FBTyxJQUFNLElBQ25CL21CLEtBQUs4USxNS3pDYixVQUNFLElBQUssQ0FBQzRTLEVBQUcyaEIsS0FBVyxJQUFKM2hCLEdBQVMrWSxRQUFRNEksR0FDakMsRUFBTTNoQixHQUFNM1osS0FBS2dwQixNQUFNclAsR0FBRzlULFNBQVMsR0FDbkMsRUFBTThULEdBQU1BLEVBQUksR0FDaEIsRUhSYSxTQUFTQSxHQUN0QixPQUFPM1osS0FBSzJMLElBQUlnTyxFQUFJM1osS0FBS2dwQixNQUFNclAsS0FBTyxLQUNoQ0EsRUFBRTByQixlQUFlLE1BQU10NkIsUUFBUSxLQUFNLElBQ3JDNE8sRUFBRTlULFNBQVMsS0dNakIsRUFBSyxDQUFDOFQsRUFBRzJoQixJQUFNM2hCLEVBQUU2bEQsY0FBY2xrQyxHQUMvQixFQUFLLENBQUMzaEIsRUFBRzJoQixJQUFNM2hCLEVBQUUrWSxRQUFRNEksR0FDekIsRUFBSyxDQUFDM2hCLEVBQUcyaEIsSUFBTTNoQixFQUFFMlosWUFBWWdJLEdBQzdCLEVBQU0zaEIsR0FBTTNaLEtBQUtncEIsTUFBTXJQLEdBQUc5VCxTQUFTLEdBQ25DLEVBQUssQ0FBQzhULEVBQUcyaEIsSUFBTW9rQyxHQUFrQixJQUFKL2xELEVBQVMyaEIsR0FDdEMsRUFBS29rQyxHQUNMLEVKWGEsU0FBUy9sRCxFQUFHMmhCLEdBQ3pCLElBQUl3YixFQUFJeW9CLEdBQW1CNWxELEVBQUcyaEIsR0FDOUIsSUFBS3diLEVBQUcsT0FBT245QixFQUFJLEdBQ25CLElBQUk4bEQsRUFBYzNvQixFQUFFLEdBQ2hCNWdDLEVBQVc0Z0MsRUFBRSxHQUNiNzRDLEVBQUlpWSxHQUFZOG9ELEdBQXVFLEVBQXREaC9ELEtBQUttb0IsS0FBSyxFQUFHbm9CLEtBQUtELElBQUksRUFBR0MsS0FBSzBVLE1BQU13QixFQUFXLE1BQVksRUFDNUZYLEVBQUlrcUQsRUFBWWxvRSxPQUNwQixPQUFPMEcsSUFBTXNYLEVBQUlrcUQsRUFDWHhoRSxFQUFJc1gsRUFBSWtxRCxFQUFjLElBQUk3b0UsTUFBTXFILEVBQUlzWCxFQUFJLEdBQUdsQixLQUFLLEtBQ2hEcFcsRUFBSSxFQUFJd2hFLEVBQVkzaEUsTUFBTSxFQUFHRyxHQUFLLElBQU13aEUsRUFBWTNoRSxNQUFNRyxHQUMxRCxLQUFPLElBQUlySCxNQUFNLEVBQUlxSCxHQUFHb1csS0FBSyxLQUFPa3JELEdBQW1CNWxELEVBQUczWixLQUFLbW9CLElBQUksRUFBR21ULEVBQUlyOUIsRUFBSSxJQUFJLElJRXhGLEVBQU0wYixHQUFNM1osS0FBS2dwQixNQUFNclAsR0FBRzlULFNBQVMsSUFBSTg1RCxjQUN2QyxFQUFNaG1ELEdBQU0zWixLQUFLZ3BCLE1BQU1yUCxHQUFHOVQsU0FBUyxLQ2pCdEIsWUFBUzhULEdBQ3RCLE9BQU9BLEVDUVQsSUNQSSxHQUNPNDNDLEdBQ0FxTyxHREtQdjhELEdBQU16TSxNQUFNQyxVQUFVd00sSUFDdEJ3OEQsR0FBVyxDQUFDLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxHQUFHLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksS0VMeEUsU0FBU0MsR0FBVWphLEdBQ3hCLElBQUl4cUMsRUFBU3dxQyxFQUFNeHFDLE9Ba0RuQixPQWhEQXdxQyxFQUFNa2EsTUFBUSxTQUFTemlFLEdBQ3JCLElBQUl3NUMsRUFBSXo3QixJQUNSLE9uQk5XLFNBQVN6ZCxFQUFPcWIsRUFBTTNiLEdBQ25DLElBQUlTLEVBRUF3WCxFQUNBd3FELEVBQ0F4K0QsRUFIQXRELEdBQUssRUFNVCxHQUQ4QlgsR0FBU0EsR0FBekJNLEdBQVNBLEtBQXZCcWIsR0FBUUEsSUFDYzNiLEVBQVEsRUFBRyxNQUFPLENBQUNNLEdBRXpDLElBRElHLEVBQVVrYixFQUFPcmIsS0FBTzJYLEVBQUkzWCxFQUFPQSxFQUFRcWIsRUFBTUEsRUFBTzFELEdBQ1QsS0FBOUNoVSxFQUFPMjdELEdBQWN0L0QsRUFBT3FiLEVBQU0zYixNQUFrQjJPLFNBQVMxSyxHQUFPLE1BQU8sR0FFaEYsR0FBSUEsRUFBTyxFQUlULElBSEEzRCxFQUFRb0MsS0FBSzhqQixLQUFLbG1CLEVBQVEyRCxHQUMxQjBYLEVBQU9qWixLQUFLMFUsTUFBTXVFLEVBQU8xWCxHQUN6QncrRCxFQUFRLElBQUlucEUsTUFBTTJlLEVBQUl2VixLQUFLOGpCLEtBQUs3SyxFQUFPcmIsRUFBUSxNQUN0Q0ssRUFBSXNYLEdBQUd3cUQsRUFBTTloRSxJQUFNTCxFQUFRSyxHQUFLc0QsT0FNekMsSUFKQUEsR0FBUUEsRUFDUjNELEVBQVFvQyxLQUFLOGpCLEtBQUtsbUIsRUFBUTJELEdBQzFCMFgsRUFBT2paLEtBQUswVSxNQUFNdUUsRUFBTzFYLEdBQ3pCdytELEVBQVEsSUFBSW5wRSxNQUFNMmUsRUFBSXZWLEtBQUs4akIsS0FBSzdLLEVBQU9yYixFQUFRLE1BQ3RDSyxFQUFJc1gsR0FBR3dxRCxFQUFNOWhFLElBQU1MLEVBQVFLLEdBQUtzRCxFQUszQyxPQUZJeEQsR0FBU2dpRSxFQUFNaGlFLFVBRVpnaUUsRW1CckJFQSxDQUFNanBCLEVBQUUsR0FBSUEsRUFBRUEsRUFBRXYvQyxPQUFTLEdBQWEsTUFBVCtGLEVBQWdCLEdBQUtBLElBRzNEdW9ELEVBQU1tYSxXQUFhLFNBQVMxaUUsRUFBTzRoRSxHQUNqQyxJQUFJcG9CLEVBQUl6N0IsSUFDUixPQ1pXLFNBQW9CemQsRUFBT3FiLEVBQU0zYixFQUFPNGhFLEdBQ3JELElBQ0kzckMsRUFEQWh5QixFcEJ1Q0MsU0FBa0IzRCxFQUFPcWIsRUFBTTNiLEdBQ3BDLElBQUkyaUUsRUFBUWpnRSxLQUFLMkwsSUFBSXNOLEVBQU9yYixHQUFTb0MsS0FBS21vQixJQUFJLEVBQUc3cUIsR0FDN0M0aUUsRUFBUWxnRSxLQUFLOFYsSUFBSSxHQUFJOVYsS0FBSzBVLE1BQU0xVSxLQUFLK1YsSUFBSWtxRCxHQUFTamdFLEtBQUtvOUQsT0FDdkRwaUUsRUFBUWlsRSxFQUFRQyxFQUlwQixPQUhJbGxFLEdBQVMraEUsR0FBS21ELEdBQVMsR0FDbEJsbEUsR0FBU2dpRSxHQUFJa0QsR0FBUyxFQUN0QmxsRSxHQUFTaWlFLEtBQUlpRCxHQUFTLEdBQ3hCam5ELEVBQU9yYixHQUFTc2lFLEVBQVFBLEVvQjlDcEJDLENBQVN2aUUsRUFBT3FiLEVBQU0zYixHQUdqQyxRQURBNGhFLEVBQVlELEdBQTZCLE1BQWJDLEVBQW9CLEtBQU9BLElBQ3JDbjRELE1BQ2hCLElBQUssSUFDSCxJQUFJOVAsRUFBUStJLEtBQUttb0IsSUFBSW5vQixLQUFLMkwsSUFBSS9OLEdBQVFvQyxLQUFLMkwsSUFBSXNOLElBRS9DLE9BRDJCLE1BQXZCaW1ELEVBQVUzckMsV0FBc0JsTCxNQUFNa0wsRUNSakMsU0FBU2h5QixFQUFNdEssR0FDNUIsT0FBTytJLEtBQUttb0IsSUFBSSxFQUFnRSxFQUE3RG5vQixLQUFLbW9CLEtBQUssRUFBR25vQixLQUFLRCxJQUFJLEVBQUdDLEtBQUswVSxNQUFNd0IsR0FBU2pmLEdBQVMsS0FBV2lmLEdBQVNsVyxLQUFLMkwsSUFBSXBLLEtETzVDNitELENBQWdCNytELEVBQU10SyxNQUFTaW9FLEVBQVUzckMsVUFBWUEsR0FDcEdxc0MsR0FBYVYsRUFBV2pvRSxHQUVqQyxJQUFLLEdBQ0wsSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxJQUN3QixNQUF2QmlvRSxFQUFVM3JDLFdBQXNCbEwsTUFBTWtMLEVFaEJqQyxTQUFTaHlCLEVBQU00bUIsR0FFNUIsT0FEQTVtQixFQUFPdkIsS0FBSzJMLElBQUlwSyxHQUFPNG1CLEVBQU1ub0IsS0FBSzJMLElBQUl3YyxHQUFPNW1CLEVBQ3RDdkIsS0FBS21vQixJQUFJLEVBQUdqUyxHQUFTaVMsR0FBT2pTLEdBQVMzVSxJQUFTLEVGY0s4K0QsQ0FBZTkrRCxFQUFNdkIsS0FBS21vQixJQUFJbm9CLEtBQUsyTCxJQUFJL04sR0FBUW9DLEtBQUsyTCxJQUFJc04sUUFBVWltRCxFQUFVM3JDLFVBQVlBLEdBQWdDLE1BQW5CMnJDLEVBQVVuNEQsT0FDckssTUFFRixJQUFLLElBQ0wsSUFBSyxJQUN3QixNQUF2Qm00RCxFQUFVM3JDLFdBQXNCbEwsTUFBTWtMLEVHckJqQyxTQUFTaHlCLEdBQ3RCLE9BQU92QixLQUFLbW9CLElBQUksR0FBSWpTLEdBQVNsVyxLQUFLMkwsSUFBSXBLLEtIb0JvQisrRCxDQUFlLytELE1BQVEyOUQsRUFBVTNyQyxVQUFZQSxFQUF1QyxHQUFQLE1BQW5CMnJDLEVBQVVuNEQsT0FJOUgsT0FBT3dxRCxHQUFPMk4sR0RaTGMsQ0FBV2xwQixFQUFFLEdBQUlBLEVBQUVBLEVBQUV2L0MsT0FBUyxHQUFhLE1BQVQrRixFQUFnQixHQUFLQSxFQUFPNGhFLElBR3ZFclosRUFBTTBhLEtBQU8sU0FBU2pqRSxHQUNQLE1BQVRBLElBQWVBLEVBQVEsSUFFM0IsSUFLSWtqRSxFQUNBai9ELEVBTkF1MUMsRUFBSXo3QixJQUNKcWtDLEVBQUssRUFDTEMsRUFBSzdJLEVBQUV2L0MsT0FBUyxFQUNoQnFHLEVBQVFrNUMsRUFBRTRJLEdBQ1Z6bUMsRUFBTzY5QixFQUFFNkksR0FHVDhnQixFQUFVLEdBT2QsSUFMSXhuRCxFQUFPcmIsSUFDVDJELEVBQU8zRCxFQUFPQSxFQUFRcWIsRUFBTUEsRUFBTzFYLEVBQ25DQSxFQUFPbStDLEVBQUlBLEVBQUtDLEVBQUlBLEVBQUtwK0MsR0FHcEJrL0QsS0FBWSxHQUFHLENBRXBCLElBREFsL0QsRUFBTzI3RCxHQUFjdC9ELEVBQU9xYixFQUFNM2IsTUFDckJrakUsRUFHWCxPQUZBMXBCLEVBQUU0SSxHQUFNOWhELEVBQ1JrNUMsRUFBRTZJLEdBQU0xbUMsRUFDRG9DLEVBQU95N0IsR0FDVCxHQUFJdjFDLEVBQU8sRUFDaEIzRCxFQUFRb0MsS0FBSzBVLE1BQU05VyxFQUFRMkQsR0FBUUEsRUFDbkMwWCxFQUFPalosS0FBSzhqQixLQUFLN0ssRUFBTzFYLEdBQVFBLE1BQzNCLE1BQUlBLEVBQU8sR0FJaEIsTUFIQTNELEVBQVFvQyxLQUFLOGpCLEtBQUtsbUIsRUFBUTJELEdBQVFBLEVBQ2xDMFgsRUFBT2paLEtBQUswVSxNQUFNdUUsRUFBTzFYLEdBQVFBLEVBSW5DaS9ELEVBQVVqL0QsRUFHWixPQUFPc2tELEdBR0ZBLEVBR00sU0FBUyxLQUN0QixJQUFJQSxFQUFRMFksS0FRWixPQU5BMVksRUFBTS9ELEtBQU8sV0FDWCxPQUFPQSxHQUFLK0QsRUFBTyxPQUdyQmtaLEdBQVU5NkQsTUFBTTRoRCxFQUFPNW1ELFdBRWhCNmdFLEdBQVVqYSxHRHZEakIsR0REYSxTQUFTNmEsR0FDdEIsSU9ic0JDLEVBQVVDLEVQYTVCcm9CLE9BQTRCemhELElBQXBCNHBFLEVBQU9DLGVBQStDN3BFLElBQXJCNHBFLEVBQU9FLFVBQTBCLElPYnhERCxFUGErRXQ5RCxHQUFJN0ksS0FBS2ttRSxFQUFPQyxTQUFVNWpELFFPYi9GNmpELEVQYXdHRixFQUFPRSxVQUFZLEdPWnBKLFNBQVMzcEUsRUFBT29vRSxHQU9yQixJQU5BLElBQUlwaEUsRUFBSWhILEVBQU1NLE9BQ1YydUIsRUFBSSxHQUNKN25CLEVBQUksRUFDSnNYLEVBQUlnckQsRUFBUyxHQUNicHBFLEVBQVMsRUFFTjBHLEVBQUksR0FBSzBYLEVBQUksSUFDZHBlLEVBQVNvZSxFQUFJLEVBQUkwcEQsSUFBTzFwRCxFQUFJM1YsS0FBS21vQixJQUFJLEVBQUdrM0MsRUFBUTluRSxJQUNwRDJ1QixFQUFFMWpCLEtBQUt2TCxFQUFNNHBFLFVBQVU1aUUsR0FBSzBYLEVBQUcxWCxFQUFJMFgsT0FDOUJwZSxHQUFVb2UsRUFBSSxHQUFLMHBELEtBQ3hCMXBELEVBQUlnckQsRUFBU3RpRSxHQUFLQSxFQUFJLEdBQUtzaUUsRUFBU3BwRSxRQUd0QyxPQUFPMnVCLEVBQUVub0IsVUFBVXNXLEtBQUt1c0QsS1BEdEJFLE9BQXFDaHFFLElBQXBCNHBFLEVBQU9LLFNBQXlCLEdBQUtMLEVBQU9LLFNBQVMsR0FBSyxHQUMzRUMsT0FBcUNscUUsSUFBcEI0cEUsRUFBT0ssU0FBeUIsR0FBS0wsRUFBT0ssU0FBUyxHQUFLLEdBQzNFRSxPQUE2Qm5xRSxJQUFuQjRwRSxFQUFPTyxRQUF3QixJQUFNUCxFQUFPTyxRQUFVLEdBQ2hFQyxPQUErQnBxRSxJQUFwQjRwRSxFQUFPUSxTQUF5QixHUWpCbEMsU0FBU0EsR0FDdEIsT0FBTyxTQUFTanFFLEdBQ2QsT0FBT0EsRUFBTThULFFBQVEsVUFBVSxTQUFTOU0sR0FDdEMsT0FBT2lqRSxHQUFVampFLE9SY3FDa2pFLENBQWU5OUQsR0FBSTdJLEtBQUtrbUUsRUFBT1EsU0FBVTdxRSxTQUMvRitxRSxPQUE2QnRxRSxJQUFuQjRwRSxFQUFPVSxRQUF3QixJQUFNVixFQUFPVSxRQUFVLEdBQ2hFQyxPQUF5QnZxRSxJQUFqQjRwRSxFQUFPVyxNQUFzQixJQUFNWCxFQUFPVyxNQUFRLEdBQzFEQyxPQUFxQnhxRSxJQUFmNHBFLEVBQU9ZLElBQW9CLE1BQVFaLEVBQU9ZLElBQU0sR0FFMUQsU0FBU0MsRUFBVXJDLEdBR2pCLElBQUluekMsR0FGSm16QyxFQUFZRCxHQUFnQkMsSUFFUG56QyxLQUNqQnF6QyxFQUFRRixFQUFVRSxNQUNsQjd5RCxFQUFPMnlELEVBQVUzeUQsS0FDakJ5UixFQUFTa2hELEVBQVVsaEQsT0FDbkIrMUMsRUFBT21MLEVBQVVuTCxLQUNqQnNMLEVBQVFILEVBQVVHLE1BQ2xCQyxFQUFRSixFQUFVSSxNQUNsQi9yQyxFQUFZMnJDLEVBQVUzckMsVUFDdEJ2VyxFQUFPa2lELEVBQVVsaUQsS0FDakJqVyxFQUFPbTRELEVBQVVuNEQsS0FHUixNQUFUQSxHQUFjdTRELEdBQVEsRUFBTXY0RCxFQUFPLEtBRzdCeTZELEdBQVl6NkQsVUFBcUJqUSxJQUFkeThCLElBQTRCQSxFQUFZLElBQUt2VyxHQUFPLEVBQU1qVyxFQUFPLE1BRzFGZ3RELEdBQWtCLE1BQVRob0MsR0FBMEIsTUFBVnF6QyxLQUFnQnJMLEdBQU8sRUFBTWhvQyxFQUFPLElBQUtxekMsRUFBUSxLQUk5RSxJQUFJNWxCLEVBQW9CLE1BQVh4N0IsRUFBaUI4aUQsRUFBNEIsTUFBWDlpRCxHQUFrQixTQUFTek4sS0FBS3hKLEdBQVEsSUFBTUEsRUFBSzBSLGNBQWdCLEdBQzlHZ3BELEVBQW9CLE1BQVh6akQsRUFBaUJnakQsRUFBaUIsT0FBT3p3RCxLQUFLeEosR0FBUXE2RCxFQUFVLEdBS3pFTSxFQUFhRixHQUFZejZELEdBQ3pCNDZELEVBQWMsYUFBYXB4RCxLQUFLeEosR0FVcEMsU0FBU3dxRCxFQUFPdDZELEdBQ2QsSUFFSWdILEVBQUdzWCxFQUFHeEIsRUFGTjZ0RCxFQUFjcG9CLEVBQ2Rxb0IsRUFBY0osRUFHbEIsR0FBYSxNQUFUMTZELEVBQ0Y4NkQsRUFBY0gsRUFBV3pxRSxHQUFTNHFFLEVBQ2xDNXFFLEVBQVEsT0FDSCxDQUlMLElBQUk2cUUsR0FISjdxRSxHQUFTQSxHQUdtQixHQUFLLEVBQUlBLEVBQVEsRUFpQjdDLEdBZEFBLEVBQVFveEIsTUFBTXB4QixHQUFTcXFFLEVBQU1JLEVBQVcxaEUsS0FBSzJMLElBQUkxVSxHQUFRczhCLEdBR3JEdlcsSUFBTS9sQixFU2pGSCxTQUFTK3JCLEdBQ3RCKytDLEVBQUssSUFBSyxJQUFrQ3BpQixFQUE5QnBxQyxFQUFJeU4sRUFBRXpyQixPQUFRMEcsRUFBSSxFQUFHeWhELEdBQU0sRUFBT3poRCxFQUFJc1gsSUFBS3RYLEVBQ3ZELE9BQVEra0IsRUFBRS9rQixJQUNSLElBQUssSUFBS3loRCxFQUFLQyxFQUFLMWhELEVBQUcsTUFDdkIsSUFBSyxJQUFnQixJQUFQeWhELElBQVVBLEVBQUt6aEQsR0FBRzBoRCxFQUFLMWhELEVBQUcsTUFDeEMsUUFBUyxLQUFNK2tCLEVBQUUva0IsR0FBSSxNQUFNOGpFLEVBQVNyaUIsRUFBSyxJQUFHQSxFQUFLLEdBR3JELE9BQU9BLEVBQUssRUFBSTE4QixFQUFFbGxCLE1BQU0sRUFBRzRoRCxHQUFNMThCLEVBQUVsbEIsTUFBTTZoRCxFQUFLLEdBQUszOEIsRVR5RTNCZy9DLENBQVcvcUUsSUFHekI2cUUsR0FBNEIsSUFBVjdxRSxHQUF3QixNQUFUc1YsSUFBY3UxRCxHQUFnQixHQUduRUYsR0FBZUUsRUFBMEIsTUFBVHYxRCxFQUFlQSxFQUFPODBELEVBQWtCLE1BQVQ5MEQsR0FBeUIsTUFBVEEsRUFBZSxHQUFLQSxHQUFRcTFELEVBQzNHQyxHQUF3QixNQUFUOTZELEVBQWU4NEQsR0FBUyxFQUFJYixHQUFpQixHQUFLLElBQU02QyxHQUFlQyxHQUEwQixNQUFUdjFELEVBQWUsSUFBTSxJQUl4SG8xRCxFQUVGLElBREExakUsR0FBSyxFQUFHc1gsRUFBSXRlLEVBQU1NLFNBQ1QwRyxFQUFJc1gsR0FDWCxHQUE2QixJQUF6QnhCLEVBQUk5YyxFQUFNMHNCLFdBQVcxbEIsS0FBYzhWLEVBQUksR0FBSSxDQUM3Qzh0RCxHQUFxQixLQUFOOXRELEVBQVdrdEQsRUFBVWhxRSxFQUFNNkcsTUFBTUcsRUFBSSxHQUFLaEgsRUFBTTZHLE1BQU1HLElBQU00akUsRUFDM0U1cUUsRUFBUUEsRUFBTTZHLE1BQU0sRUFBR0csR0FDdkIsT0FPSnFoRSxJQUFVdkwsSUFBTTk4RCxFQUFRc2hELEVBQU10aEQsRUFBT3VmLE1BR3pDLElBQUlqZixFQUFTcXFFLEVBQVlycUUsT0FBU04sRUFBTU0sT0FBU3NxRSxFQUFZdHFFLE9BQ3pENmdFLEVBQVU3Z0UsRUFBUzhuRSxFQUFRLElBQUl6b0UsTUFBTXlvRSxFQUFROW5FLEVBQVMsR0FBRzhjLEtBQUswWCxHQUFRLEdBTTFFLE9BSEl1ekMsR0FBU3ZMLElBQU05OEQsRUFBUXNoRCxFQUFNNmYsRUFBVW5oRSxFQUFPbWhFLEVBQVE3Z0UsT0FBUzhuRSxFQUFRd0MsRUFBWXRxRSxPQUFTaWYsS0FBVzRoRCxFQUFVLElBRzdHZ0gsR0FDTixJQUFLLElBQUtub0UsRUFBUTJxRSxFQUFjM3FFLEVBQVE0cUUsRUFBY3pKLEVBQVMsTUFDL0QsSUFBSyxJQUFLbmhFLEVBQVEycUUsRUFBY3hKLEVBQVVuaEUsRUFBUTRxRSxFQUFhLE1BQy9ELElBQUssSUFBSzVxRSxFQUFRbWhFLEVBQVF0NkQsTUFBTSxFQUFHdkcsRUFBUzZnRSxFQUFRN2dFLFFBQVUsR0FBS3FxRSxFQUFjM3FFLEVBQVE0cUUsRUFBY3pKLEVBQVF0NkQsTUFBTXZHLEdBQVMsTUFDOUgsUUFBU04sRUFBUW1oRSxFQUFVd0osRUFBYzNxRSxFQUFRNHFFLEVBR25ELE9BQU9YLEVBQVNqcUUsR0FPbEIsT0F0RUFzOEIsT0FBMEJ6OEIsSUFBZHk4QixFQUEwQixFQUNoQyxTQUFTaGpCLEtBQUt4SixHQUFRL0csS0FBS21vQixJQUFJLEVBQUdub0IsS0FBS0QsSUFBSSxHQUFJd3pCLElBQy9DdnpCLEtBQUttb0IsSUFBSSxFQUFHbm9CLEtBQUtELElBQUksR0FBSXd6QixJQWdFL0JnK0IsRUFBTzFyRCxTQUFXLFdBQ2hCLE9BQU9xNUQsRUFBWSxJQUdkM04sRUFhVCxNQUFPLENBQ0xBLE9BQVFnUSxFQUNSM0IsYUFaRixTQUFzQlYsRUFBV2pvRSxHQUMvQixJQUFJRixFQUFJd3FFLElBQVdyQyxFQUFZRCxHQUFnQkMsSUFBc0JuNEQsS0FBTyxJQUFLbTRELElBQzdFanNDLEVBQWlFLEVBQTdEanpCLEtBQUttb0IsS0FBSyxFQUFHbm9CLEtBQUtELElBQUksRUFBR0MsS0FBSzBVLE1BQU13QixHQUFTamYsR0FBUyxLQUMxRGt1QixFQUFJbmxCLEtBQUs4VixJQUFJLElBQUttZCxHQUNsQnVtQixFQUFTcW1CLEdBQVMsRUFBSTVzQyxFQUFJLEdBQzlCLE9BQU8sU0FBU2g4QixHQUNkLE9BQU9GLEVBQUVvdUIsRUFBSWx1QixHQUFTdWlELEtDOUhqQixDQVBHLENBQ1pvbkIsVUFBVyxJQUNYRCxTQUFVLENBQUMsR0FDWEksU0FBVSxDQUFDLElBQUssTUFLaEJ4UCxHQUFTLEdBQU9BLE9BQ2hCcU8sR0FBZSxHQUFPQSxhU2JqQixNQUFNcUMsR0FBVzl6RCxPQUFPLFlDRWhCLFNBQVMrekQsS0FDdEIsSUFLSTVELEVBTEF4RyxFQUFLLEVBQ0xFLEVBQUssRUFDTHppRCxFQUFJLEVBQ0o4RixFQUFTLENBQUMsSUFDVnlpRCxFQUFRLENBQUMsRUFBRyxHQUdoQixTQUFTalksRUFBTWxzQyxHQUNiLE9BQU9BLEdBQUtBLEVBQUlta0QsRUFBTU0sR0FBTy9pRCxFQUFRMUIsRUFBRyxFQUFHcEUsSUFBTStvRCxFQUduRCxTQUFTSSxJQUNQLElBQUl6Z0UsR0FBSyxFQUVULElBREFvZCxFQUFTLElBQUl6a0IsTUFBTTJlLEtBQ1Z0WCxFQUFJc1gsR0FBRzhGLEVBQU9wZCxLQUFPQSxFQUFJLEdBQUsrNUQsR0FBTS81RCxFQUFJc1gsR0FBS3VpRCxJQUFPdmlELEVBQUksR0FDakUsT0FBT3N3QyxFQWtDVCxPQS9CQUEsRUFBTXhxQyxPQUFTLFNBQVN1bUMsR0FDdEIsT0FBTzNpRCxVQUFVMUgsU0FBV3VnRSxFQUFJRSxHQUFNcFcsRUFBR2tXLEdBQU1BLEVBQUlFLEdBQU1BLEVBQUkwRyxLQUFhLENBQUM1RyxFQUFJRSxJQUdqRm5TLEVBQU1pWSxNQUFRLFNBQVNsYyxHQUNyQixPQUFPM2lELFVBQVUxSCxRQUFVZ2UsR0FBS3VvRCxFQUFRbG5FLE1BQU0wSixLQUFLc2hELElBQUlycUQsT0FBUyxFQUFHbW5FLEtBQWFaLEVBQU1oZ0UsU0FHeEYrbkQsRUFBTXNjLGFBQWUsU0FBU2ovQyxHQUM1QixJQUFJamxCLEVBQUk2L0QsRUFBTXo3RCxRQUFRNmdCLEdBQ3RCLE9BQU9qbEIsRUFBSSxFQUFJLENBQUNDLElBQUtBLEtBQ2ZELEVBQUksRUFBSSxDQUFDNjVELEVBQUl6OEMsRUFBTyxJQUNwQnBkLEdBQUtzWCxFQUFJLENBQUM4RixFQUFPOUYsRUFBSSxHQUFJeWlELEdBQ3pCLENBQUMzOEMsRUFBT3BkLEVBQUksR0FBSW9kLEVBQU9wZCxLQUcvQjRuRCxFQUFNeVksUUFBVSxTQUFTMWMsR0FDdkIsT0FBTzNpRCxVQUFVMUgsUUFBVSttRSxFQUFVMWMsRUFBR2lFLEdBQVNBLEdBR25EQSxFQUFNdWMsV0FBYSxXQUNqQixPQUFPL21ELEVBQU92ZCxTQUdoQituRCxFQUFNL0QsS0FBTyxXQUNYLE9BQU9vZ0IsS0FDRjdtRCxPQUFPLENBQUN5OEMsRUFBSUUsSUFDWjhGLE1BQU1BLEdBQ05RLFFBQVFBLElBR1JTLEdBQVU5NkQsTUFBTTY3RCxHQUFVamEsR0FBUTVtRCxXQ3BEM0MsU0NGZSxTQUFTaWdFLEdBRXRCLElBREEsSUFBSTNwRCxFQUFJMnBELEVBQVUzbkUsT0FBUyxFQUFJLEVBQUdnOEQsRUFBUyxJQUFJMzhELE1BQU0yZSxHQUFJdFgsRUFBSSxFQUN0REEsRUFBSXNYLEdBQUdnK0MsRUFBT3QxRCxHQUFLLElBQU1paEUsRUFBVXBoRSxNQUFVLEVBQUpHLEVBQWEsSUFBSkEsR0FDekQsT0FBT3MxRCxFRERULENBQXNCLGdFRUFQLFlBQVNqYyxHQUN0QixNQUEyQixpQkFBYkEsRUFDUixJQUFJaUgsR0FBVSxDQUFDLENBQUNud0MsU0FBU21wQyxjQUFjRCxLQUFhLENBQUNscEMsU0FBUzJ1QyxrQkFDOUQsSUFBSXdCLEdBQVUsQ0FBQyxDQUFDakgsSUFBWTNoRCxJQ0xwQyxNQUFNMHNFLEdBQUtyaUUsS0FBS3lrRCxHQUNaNmQsR0FBTSxFQUFJRCxHQUNWRSxHQUFVLEtBQ1ZDLEdBQWFGLEdBQU1DLEdBRXZCLFNBQVNFLEtBQ1B4c0UsS0FBS3lzRSxJQUFNenNFLEtBQUswc0UsSUFDaEIxc0UsS0FBSzJzRSxJQUFNM3NFLEtBQUs0c0UsSUFBTSxLQUN0QjVzRSxLQUFLMnJELEVBQUksR0FHWCxTQUFTLEtBQ1AsT0FBTyxJQUFJNmdCLEdBR2JBLEdBQUs1ckUsVUFBWSxHQUFLQSxVQUFZLENBQ2hDeUgsWUFBYW1rRSxHQUNiSyxPQUFRLFNBQVNucEQsRUFBR3VKLEdBQ2xCanRCLEtBQUsyckQsR0FBSyxLQUFPM3JELEtBQUt5c0UsSUFBTXpzRSxLQUFLMnNFLEtBQU9qcEQsR0FBSyxLQUFPMWpCLEtBQUswc0UsSUFBTTFzRSxLQUFLNHNFLEtBQU8zL0MsSUFFN0U2L0MsVUFBVyxXQUNRLE9BQWI5c0UsS0FBSzJzRSxNQUNQM3NFLEtBQUsyc0UsSUFBTTNzRSxLQUFLeXNFLElBQUt6c0UsS0FBSzRzRSxJQUFNNXNFLEtBQUswc0UsSUFDckMxc0UsS0FBSzJyRCxHQUFLLE1BR2RvaEIsT0FBUSxTQUFTcnBELEVBQUd1SixHQUNsQmp0QixLQUFLMnJELEdBQUssS0FBTzNyRCxLQUFLMnNFLEtBQU9qcEQsR0FBSyxLQUFPMWpCLEtBQUs0c0UsS0FBTzMvQyxJQUV2RCsvQyxpQkFBa0IsU0FBU2pMLEVBQUlDLEVBQUl0K0MsRUFBR3VKLEdBQ3BDanRCLEtBQUsyckQsR0FBSyxNQUFRb1csRUFBTSxNQUFRQyxFQUFNLEtBQU9oaUUsS0FBSzJzRSxLQUFPanBELEdBQUssS0FBTzFqQixLQUFLNHNFLEtBQU8zL0MsSUFFbkZnZ0QsY0FBZSxTQUFTbEwsRUFBSUMsRUFBSTdrQyxFQUFJK3ZDLEVBQUl4cEQsRUFBR3VKLEdBQ3pDanRCLEtBQUsyckQsR0FBSyxNQUFRb1csRUFBTSxNQUFRQyxFQUFNLE1BQVE3a0MsRUFBTSxNQUFRK3ZDLEVBQU0sS0FBT2x0RSxLQUFLMnNFLEtBQU9qcEQsR0FBSyxLQUFPMWpCLEtBQUs0c0UsS0FBTzMvQyxJQUUvR2tnRCxNQUFPLFNBQVNwTCxFQUFJQyxFQUFJN2tDLEVBQUkrdkMsRUFBSXJxQyxHQUM5QmsvQixHQUFNQSxFQUFJQyxHQUFNQSxFQUFJN2tDLEdBQU1BLEVBQUkrdkMsR0FBTUEsRUFBSXJxQyxHQUFLQSxFQUM3QyxJQUFJZy9CLEVBQUs3aEUsS0FBSzJzRSxJQUNWN0ssRUFBSzloRSxLQUFLNHNFLElBQ1ZRLEVBQU1qd0MsRUFBSzRrQyxFQUNYc0wsRUFBTUgsRUFBS2xMLEVBQ1hzTCxFQUFNekwsRUFBS0UsRUFDWHdMLEVBQU16TCxFQUFLRSxFQUNYd0wsRUFBUUYsRUFBTUEsRUFBTUMsRUFBTUEsRUFHOUIsR0FBSTFxQyxFQUFJLEVBQUcsTUFBTSxJQUFJbE8sTUFBTSxvQkFBc0JrTyxHQUdqRCxHQUFpQixPQUFiN2lDLEtBQUsyc0UsSUFDUDNzRSxLQUFLMnJELEdBQUssS0FBTzNyRCxLQUFLMnNFLElBQU01SyxHQUFNLEtBQU8vaEUsS0FBSzRzRSxJQUFNNUssUUFJakQsR0FBTXdMLEVBQVFsQixHQUtkLEdBQU12aUUsS0FBSzJMLElBQUk2M0QsRUFBTUgsRUFBTUMsRUFBTUMsR0FBT2hCLElBQWF6cEMsRUFLckQsQ0FDSCxJQUFJNHFDLEVBQU10d0MsRUFBSzBrQyxFQUNYNkwsRUFBTVIsRUFBS3BMLEVBQ1g2TCxFQUFRUCxFQUFNQSxFQUFNQyxFQUFNQSxFQUMxQk8sRUFBUUgsRUFBTUEsRUFBTUMsRUFBTUEsRUFDMUJHLEVBQU05akUsS0FBSzJ2QixLQUFLaTBDLEdBQ2hCRyxFQUFNL2pFLEtBQUsydkIsS0FBSzh6QyxHQUNoQmpTLEVBQUkxNEIsRUFBSTk0QixLQUFLdXdELEtBQUs4UixHQUFLcmlFLEtBQUtna0UsTUFBTUosRUFBUUgsRUFBUUksSUFBVSxFQUFJQyxFQUFNQyxLQUFTLEdBQy9FRSxFQUFNelMsRUFBSXVTLEVBQ1ZHLEVBQU0xUyxFQUFJc1MsRUFHVjlqRSxLQUFLMkwsSUFBSXM0RCxFQUFNLEdBQUsxQixLQUN0QnRzRSxLQUFLMnJELEdBQUssS0FBT29XLEVBQUtpTSxFQUFNVixHQUFPLEtBQU90TCxFQUFLZ00sRUFBTVQsSUFHdkR2dEUsS0FBSzJyRCxHQUFLLElBQU05b0IsRUFBSSxJQUFNQSxFQUFJLFdBQWEwcUMsRUFBTUUsRUFBTUgsRUFBTUksR0FBUSxLQUFPMXRFLEtBQUsyc0UsSUFBTTVLLEVBQUtrTSxFQUFNYixHQUFPLEtBQU9wdEUsS0FBSzRzRSxJQUFNNUssRUFBS2lNLEVBQU1aLFFBcEJ0SXJ0RSxLQUFLMnJELEdBQUssS0FBTzNyRCxLQUFLMnNFLElBQU01SyxHQUFNLEtBQU8vaEUsS0FBSzRzRSxJQUFNNUssSUF1QnhEa00sSUFBSyxTQUFTeHFELEVBQUd1SixFQUFHNFYsRUFBR3NyQyxFQUFJQyxFQUFJQyxHQUM3QjNxRCxHQUFLQSxFQUFHdUosR0FBS0EsRUFBV29oRCxJQUFRQSxFQUNoQyxJQUFJcE0sR0FEWXAvQixHQUFLQSxHQUNSOTRCLEtBQUttM0QsSUFBSWlOLEdBQ2xCak0sRUFBS3IvQixFQUFJOTRCLEtBQUtvM0QsSUFBSWdOLEdBQ2xCdE0sRUFBS24rQyxFQUFJdStDLEVBQ1RILEVBQUs3MEMsRUFBSWkxQyxFQUNUb00sRUFBSyxFQUFJRCxFQUNURSxFQUFLRixFQUFNRixFQUFLQyxFQUFLQSxFQUFLRCxFQUc5QixHQUFJdHJDLEVBQUksRUFBRyxNQUFNLElBQUlsTyxNQUFNLG9CQUFzQmtPLEdBR2hDLE9BQWI3aUMsS0FBSzJzRSxJQUNQM3NFLEtBQUsyckQsR0FBSyxJQUFNa1csRUFBSyxJQUFNQyxHQUlwQi8zRCxLQUFLMkwsSUFBSTFWLEtBQUsyc0UsSUFBTTlLLEdBQU15SyxJQUFXdmlFLEtBQUsyTCxJQUFJMVYsS0FBSzRzRSxJQUFNOUssR0FBTXdLLE1BQ3RFdHNFLEtBQUsyckQsR0FBSyxJQUFNa1csRUFBSyxJQUFNQyxHQUl4QmovQixJQUdEMHJDLEVBQUssSUFBR0EsRUFBS0EsRUFBS2xDLEdBQU1BLElBR3hCa0MsRUFBS2hDLEdBQ1B2c0UsS0FBSzJyRCxHQUFLLElBQU05b0IsRUFBSSxJQUFNQSxFQUFJLFFBQVV5ckMsRUFBSyxLQUFPNXFELEVBQUl1K0MsR0FBTSxLQUFPaDFDLEVBQUlpMUMsR0FBTSxJQUFNci9CLEVBQUksSUFBTUEsRUFBSSxRQUFVeXJDLEVBQUssS0FBT3R1RSxLQUFLMnNFLElBQU05SyxHQUFNLEtBQU83aEUsS0FBSzRzRSxJQUFNOUssR0FJckp5TSxFQUFLakMsS0FDWnRzRSxLQUFLMnJELEdBQUssSUFBTTlvQixFQUFJLElBQU1BLEVBQUksU0FBVzByQyxHQUFNbkMsSUFBTyxJQUFNa0MsRUFBSyxLQUFPdHVFLEtBQUsyc0UsSUFBTWpwRCxFQUFJbWYsRUFBSTk0QixLQUFLbTNELElBQUlrTixJQUFPLEtBQU9wdUUsS0FBSzRzRSxJQUFNMy9DLEVBQUk0VixFQUFJOTRCLEtBQUtvM0QsSUFBSWlOLE9BR2xKSSxLQUFNLFNBQVM5cUQsRUFBR3VKLEVBQUc2MkMsRUFBRzlILEdBQ3RCaDhELEtBQUsyckQsR0FBSyxLQUFPM3JELEtBQUt5c0UsSUFBTXpzRSxLQUFLMnNFLEtBQU9qcEQsR0FBSyxLQUFPMWpCLEtBQUswc0UsSUFBTTFzRSxLQUFLNHNFLEtBQU8zL0MsR0FBSyxNQUFRNjJDLEVBQUssTUFBUTlILEVBQUssS0FBUThILEVBQUssS0FFekhsMEQsU0FBVSxXQUNSLE9BQU81UCxLQUFLMnJELElBSWhCLFlDakllLFlBQVNqb0MsR0FDdEIsT0FBTyxXQUNMLE9BQU9BLEdDRkosSUFBSSxHQUFNM1osS0FBSzJMLElBQ1hzNUMsR0FBUWpsRCxLQUFLaWxELE1BQ2JrUyxHQUFNbjNELEtBQUttM0QsSUFDWCxHQUFNbjNELEtBQUttb0IsSUFDWCxHQUFNbm9CLEtBQUtELElBQ1hxM0QsR0FBTXAzRCxLQUFLbzNELElBQ1h6bkMsR0FBTzN2QixLQUFLMnZCLEtBRVosR0FBVSxNQUNWLEdBQUszdkIsS0FBS3lrRCxHQUNWaWdCLEdBQVMsR0FBSyxFQUNkLEdBQU0sRUFBSSxHQUVkLFNBQVNWLEdBQUtycUQsR0FDbkIsT0FBT0EsRUFBSSxFQUFJLEVBQUlBLEdBQUssRUFBSSxHQUFLM1osS0FBS2drRSxLQUFLcnFELEdBR3RDLFNBQVNnckQsR0FBS2hyRCxHQUNuQixPQUFPQSxHQUFLLEVBQUkrcUQsR0FBUy9xRCxJQUFNLEdBQUsrcUQsR0FBUzFrRSxLQUFLMmtFLEtBQUtockQsR0NkekQsU0FBU2lyRCxHQUFlOXRCLEdBQ3RCLE9BQU9BLEVBQUUrdEIsWUFHWCxTQUFTQyxHQUFlaHVCLEdBQ3RCLE9BQU9BLEVBQUVpdUIsWUFHWCxTQUFTQyxHQUFjbHVCLEdBQ3JCLE9BQU9BLEVBQUVtdUIsV0FHWCxTQUFTQyxHQUFZcHVCLEdBQ25CLE9BQU9BLEVBQUVxdUIsU0FHWCxTQUFTQyxHQUFZdHVCLEdBQ25CLE9BQU9BLEdBQUtBLEVBQUV1dUIsU0FHaEIsU0FBU0MsR0FBVXhOLEVBQUlDLEVBQUlDLEVBQUlDLEVBQUk3a0MsRUFBSSt2QyxFQUFJb0MsRUFBSUMsR0FDN0MsSUFBSUMsRUFBTXpOLEVBQUtGLEVBQUk0TixFQUFNek4sRUFBS0YsRUFDMUI0TixFQUFNSixFQUFLbnlDLEVBQUl3eUMsRUFBTUosRUFBS3JDLEVBQzFCajlDLEVBQUkwL0MsRUFBTUgsRUFBTUUsRUFBTUQsRUFDMUIsS0FBSXgvQyxFQUFJQSxFQUFJLElBRVosTUFBTyxDQUFDNHhDLEdBRFI1eEMsR0FBS3kvQyxHQUFPNU4sRUFBS29MLEdBQU15QyxHQUFPOU4sRUFBSzFrQyxJQUFPbE4sR0FDekJ1L0MsRUFBSzFOLEVBQUs3eEMsRUFBSXcvQyxHQUtqQyxTQUFTRyxHQUFlL04sRUFBSUMsRUFBSUMsRUFBSUMsRUFBSWlHLEVBQUk0SCxFQUFJdkIsR0FDOUMsSUFBSWhCLEVBQU16TCxFQUFLRSxFQUNYd0wsRUFBTXpMLEVBQUtFLEVBQ1hvRixHQUFNa0gsRUFBS3VCLEdBQU1BLEdBQU1uMkMsR0FBSzR6QyxFQUFNQSxFQUFNQyxFQUFNQSxHQUM5Q3VDLEVBQUsxSSxFQUFLbUcsRUFDVndDLEdBQU0zSSxFQUFLa0csRUFDWDBDLEVBQU1uTyxFQUFLaU8sRUFDWEcsRUFBTW5PLEVBQUtpTyxFQUNYUCxFQUFNek4sRUFBSytOLEVBQ1hMLEVBQU16TixFQUFLK04sRUFDWEcsR0FBT0YsRUFBTVIsR0FBTyxFQUNwQlcsR0FBT0YsRUFBTVIsR0FBTyxFQUNwQnhOLEVBQUt1TixFQUFNUSxFQUNYOU4sRUFBS3VOLEVBQU1RLEVBQ1hHLEVBQUtuTyxFQUFLQSxFQUFLQyxFQUFLQSxFQUNwQnIvQixFQUFJb2xDLEVBQUs0SCxFQUNUUSxFQUFJTCxFQUFNUCxFQUFNRCxFQUFNUyxFQUN0QnB2QixHQUFLcWhCLEVBQUssR0FBSyxFQUFJLEdBQUt4b0MsR0FBSyxHQUFJLEVBQUdtSixFQUFJQSxFQUFJdXRDLEVBQUtDLEVBQUlBLElBQ3JEQyxHQUFPRCxFQUFJbk8sRUFBS0QsRUFBS3BoQixHQUFLdXZCLEVBQzFCRyxJQUFRRixFQUFJcE8sRUFBS0MsRUFBS3JoQixHQUFLdXZCLEVBQzNCSSxHQUFPSCxFQUFJbk8sRUFBS0QsRUFBS3BoQixHQUFLdXZCLEVBQzFCSyxJQUFRSixFQUFJcE8sRUFBS0MsRUFBS3JoQixHQUFLdXZCLEVBQzNCTSxFQUFNSixFQUFNSixFQUNaUyxFQUFNSixFQUFNSixFQUNaUyxFQUFNSixFQUFNTixFQUNaVyxFQUFNSixFQUFNTixFQU1oQixPQUZJTyxFQUFNQSxFQUFNQyxFQUFNQSxFQUFNQyxFQUFNQSxFQUFNQyxFQUFNQSxJQUFLUCxFQUFNRSxFQUFLRCxFQUFNRSxHQUU3RCxDQUNMSyxHQUFJUixFQUNKUyxHQUFJUixFQUNKakQsS0FBTXdDLEVBQ052QyxLQUFNd0MsRUFDTkMsSUFBS00sR0FBT3JJLEVBQUtwbEMsRUFBSSxHQUNyQm90QyxJQUFLTSxHQUFPdEksRUFBS3BsQyxFQUFJLElBSVYsY0FDYixJQUFJK3JDLEVBQWNELEdBQ2RHLEVBQWNELEdBQ2RtQyxFQUFlLEdBQVMsR0FDeEJDLEVBQVksS0FDWmpDLEVBQWFELEdBQ2JHLEVBQVdELEdBQ1hHLEVBQVdELEdBQ1gveUIsRUFBVSxLQUVkLFNBQVM4eEIsSUFDUCxJQUFJbG5FLEVBQ0E2N0IsRUFDQW1sQyxHQUFNNEcsRUFBWTVnRSxNQUFNaE8sS0FBTWdKLFdBQzlCaS9ELEdBQU02RyxFQUFZOWdFLE1BQU1oTyxLQUFNZ0osV0FDOUJtbEUsRUFBS2EsRUFBV2hoRSxNQUFNaE8sS0FBTWdKLFdBQWF5bEUsR0FDekNMLEVBQUtjLEVBQVNsaEUsTUFBTWhPLEtBQU1nSixXQUFheWxFLEdBQ3ZDRixFQUFLLEdBQUlILEVBQUtELEdBQ2RHLEVBQUtGLEVBQUtELEVBUWQsR0FOSy94QixJQUFTQSxFQUFVcDFDLEVBQVMsTUFHN0JpaEUsRUFBS0QsSUFBSW5sQyxFQUFJb2xDLEVBQUlBLEVBQUtELEVBQUlBLEVBQUtubEMsR0FHN0JvbEMsRUFBSyxHQUdOLEdBQUlzRyxFQUFLLEdBQU0sR0FDbEJueUIsRUFBUXl3QixPQUFPNUUsRUFBSy9HLEdBQUlpTixHQUFLbEcsRUFBSzlHLEdBQUlnTixJQUN0Qy94QixFQUFROHhCLElBQUksRUFBRyxFQUFHakcsRUFBSWtHLEVBQUlDLEdBQUtFLEdBQzNCdEcsRUFBSyxLQUNQNXJCLEVBQVF5d0IsT0FBTzdFLEVBQUs5RyxHQUFJa04sR0FBS3BHLEVBQUs3RyxHQUFJaU4sSUFDdENoeUIsRUFBUTh4QixJQUFJLEVBQUcsRUFBR2xHLEVBQUlvRyxFQUFJRCxFQUFJRyxRQUs3QixDQUNILElBV0lwaEIsRUFDQUUsRUFaQThqQixFQUFNL0MsRUFDTmdELEVBQU0vQyxFQUNOZ0QsRUFBTWpELEVBQ05rRCxFQUFNakQsRUFDTmtELEVBQU0vQyxFQUNOZ0QsRUFBTWhELEVBQ05pRCxFQUFLcEMsRUFBU3BoRSxNQUFNaE8sS0FBTWdKLFdBQWEsRUFDdkN5b0UsRUFBTUQsRUFBSyxLQUFhUCxHQUFhQSxFQUFVampFLE1BQU1oTyxLQUFNZ0osV0FBYTB3QixHQUFLc3VDLEVBQUtBLEVBQUtDLEVBQUtBLElBQzVGNEgsRUFBSyxHQUFJLEdBQUk1SCxFQUFLRCxHQUFNLEdBQUlnSixFQUFhaGpFLE1BQU1oTyxLQUFNZ0osWUFDckQwb0UsRUFBTTdCLEVBQ044QixFQUFNOUIsRUFLVixHQUFJNEIsRUFBSyxHQUFTLENBQ2hCLElBQUlHLEVBQUtsRCxHQUFLK0MsRUFBS3pKLEVBQUs3RyxHQUFJcVEsSUFDeEIzOEQsRUFBSzY1RCxHQUFLK0MsRUFBS3hKLEVBQUs5RyxHQUFJcVEsS0FDdkJGLEdBQVksRUFBTE0sR0FBVSxJQUE4QlIsR0FBckJRLEdBQU90RCxFQUFLLEdBQUssRUFBZStDLEdBQU9PLElBQ2pFTixFQUFNLEVBQUdGLEVBQU1DLEdBQU9sRCxFQUFLQyxHQUFNLElBQ2pDbUQsR0FBWSxFQUFMMThELEdBQVUsSUFBOEJxOEQsR0FBckJyOEQsR0FBT3k1RCxFQUFLLEdBQUssRUFBZTZDLEdBQU90OEQsSUFDakUwOEQsRUFBTSxFQUFHTCxFQUFNQyxHQUFPaEQsRUFBS0MsR0FBTSxHQUd4QyxJQUFJZCxFQUFNckYsRUFBSy9HLEdBQUlnUSxHQUNmM0QsRUFBTXRGLEVBQUs5RyxHQUFJK1AsR0FDZjFCLEVBQU14SCxFQUFLOUcsR0FBSW1RLEdBQ2Y1QixFQUFNekgsRUFBSzdHLEdBQUlrUSxHQUduQixHQUFJeEIsRUFBSyxHQUFTLENBQ2hCLElBSUlnQyxFQUpBN0IsRUFBTS9ILEVBQUsvRyxHQUFJaVEsR0FDZmxCLEVBQU1oSSxFQUFLOUcsR0FBSWdRLEdBQ2ZqQixFQUFNbEksRUFBSzlHLEdBQUlrUSxHQUNmakIsRUFBTW5JLEVBQUs3RyxHQUFJaVEsR0FJbkIsR0FBSTdDLEVBQUssS0FBT3NELEVBQUt4QyxHQUFVL0IsRUFBS0MsRUFBSzJDLEVBQUtDLEVBQUtILEVBQUtDLEVBQUtULEVBQUtDLElBQU8sQ0FDdkUsSUFBSXFDLEVBQUt4RSxFQUFNdUUsRUFBRyxHQUNkRSxFQUFLeEUsRUFBTXNFLEVBQUcsR0FDZEcsRUFBS2hDLEVBQU02QixFQUFHLEdBQ2RJLEVBQUtoQyxFQUFNNEIsRUFBRyxHQUNkSyxFQUFLLEVBQUkvUSxHQUFJNE0sSUFBTStELEVBQUtFLEVBQUtELEVBQUtFLElBQU92NEMsR0FBS280QyxFQUFLQSxFQUFLQyxFQUFLQSxHQUFNcjRDLEdBQUtzNEMsRUFBS0EsRUFBS0MsRUFBS0EsS0FBUSxHQUMvRkUsRUFBS3o0QyxHQUFLbTRDLEVBQUcsR0FBS0EsRUFBRyxHQUFLQSxFQUFHLEdBQUtBLEVBQUcsSUFDekNILEVBQU0sR0FBSTdCLEdBQUs3SCxFQUFLbUssSUFBT0QsRUFBSyxJQUNoQ1AsRUFBTSxHQUFJOUIsR0FBSzVILEVBQUtrSyxJQUFPRCxFQUFLLEtBSzlCWCxFQUFNLEdBR0hJLEVBQU0sSUFDYnprQixFQUFLMGlCLEdBQWVNLEVBQUtDLEVBQUs3QyxFQUFLQyxFQUFLdEYsRUFBSTBKLEVBQUtyRCxHQUNqRGxoQixFQUFLd2lCLEdBQWVJLEVBQUtDLEVBQUtULEVBQUtDLEVBQUt4SCxFQUFJMEosRUFBS3JELEdBRWpEbHlCLEVBQVF5d0IsT0FBTzNmLEVBQUc0akIsR0FBSzVqQixFQUFHb2dCLElBQUtwZ0IsRUFBRzZqQixHQUFLN2pCLEVBQUdxZ0IsS0FHdENvRSxFQUFNOUIsRUFBSXp6QixFQUFROHhCLElBQUloaEIsRUFBRzRqQixHQUFJNWpCLEVBQUc2akIsR0FBSVksRUFBSzNpQixHQUFNOUIsRUFBR3FnQixJQUFLcmdCLEVBQUdvZ0IsS0FBTXRlLEdBQU01QixFQUFHbWdCLElBQUtuZ0IsRUFBR2tnQixNQUFPZ0IsSUFJMUZseUIsRUFBUTh4QixJQUFJaGhCLEVBQUc0akIsR0FBSTVqQixFQUFHNmpCLEdBQUlZLEVBQUszaUIsR0FBTTlCLEVBQUdxZ0IsSUFBS3JnQixFQUFHb2dCLEtBQU10ZSxHQUFNOUIsRUFBRytpQixJQUFLL2lCLEVBQUc4aUIsTUFBTzFCLEdBQzlFbHlCLEVBQVE4eEIsSUFBSSxFQUFHLEVBQUdqRyxFQUFJalosR0FBTTlCLEVBQUc2akIsR0FBSzdqQixFQUFHK2lCLElBQUsvaUIsRUFBRzRqQixHQUFLNWpCLEVBQUc4aUIsS0FBTWhoQixHQUFNNUIsRUFBRzJqQixHQUFLM2pCLEVBQUc2aUIsSUFBSzdpQixFQUFHMGpCLEdBQUsxakIsRUFBRzRpQixNQUFPMUIsR0FDckdseUIsRUFBUTh4QixJQUFJOWdCLEVBQUcwakIsR0FBSTFqQixFQUFHMmpCLEdBQUlZLEVBQUszaUIsR0FBTTVCLEVBQUc2aUIsSUFBSzdpQixFQUFHNGlCLEtBQU1oaEIsR0FBTTVCLEVBQUdtZ0IsSUFBS25nQixFQUFHa2dCLE1BQU9nQixNQUs3RWx5QixFQUFReXdCLE9BQU9TLEVBQUtDLEdBQU1ueEIsRUFBUTh4QixJQUFJLEVBQUcsRUFBR2pHLEVBQUlpSixFQUFLQyxHQUFNN0MsSUFyQjFDbHlCLEVBQVF5d0IsT0FBT1MsRUFBS0MsR0F5QnBDdkYsRUFBSyxJQUFjc0osRUFBTSxHQUd0QkksRUFBTSxJQUNieGtCLEVBQUswaUIsR0FBZUosRUFBS0MsRUFBS08sRUFBS0MsRUFBS2pJLEdBQUswSixFQUFLcEQsR0FDbERsaEIsRUFBS3dpQixHQUFldEMsRUFBS0MsRUFBSzJDLEVBQUtDLEVBQUtuSSxHQUFLMEosRUFBS3BELEdBRWxEbHlCLEVBQVEyd0IsT0FBTzdmLEVBQUc0akIsR0FBSzVqQixFQUFHb2dCLElBQUtwZ0IsRUFBRzZqQixHQUFLN2pCLEVBQUdxZ0IsS0FHdENtRSxFQUFNN0IsRUFBSXp6QixFQUFROHhCLElBQUloaEIsRUFBRzRqQixHQUFJNWpCLEVBQUc2akIsR0FBSVcsRUFBSzFpQixHQUFNOUIsRUFBR3FnQixJQUFLcmdCLEVBQUdvZ0IsS0FBTXRlLEdBQU01QixFQUFHbWdCLElBQUtuZ0IsRUFBR2tnQixNQUFPZ0IsSUFJMUZseUIsRUFBUTh4QixJQUFJaGhCLEVBQUc0akIsR0FBSTVqQixFQUFHNmpCLEdBQUlXLEVBQUsxaUIsR0FBTTlCLEVBQUdxZ0IsSUFBS3JnQixFQUFHb2dCLEtBQU10ZSxHQUFNOUIsRUFBRytpQixJQUFLL2lCLEVBQUc4aUIsTUFBTzFCLEdBQzlFbHlCLEVBQVE4eEIsSUFBSSxFQUFHLEVBQUdsRyxFQUFJaFosR0FBTTlCLEVBQUc2akIsR0FBSzdqQixFQUFHK2lCLElBQUsvaUIsRUFBRzRqQixHQUFLNWpCLEVBQUc4aUIsS0FBTWhoQixHQUFNNUIsRUFBRzJqQixHQUFLM2pCLEVBQUc2aUIsSUFBSzdpQixFQUFHMGpCLEdBQUsxakIsRUFBRzRpQixLQUFNMUIsR0FDcEdseUIsRUFBUTh4QixJQUFJOWdCLEVBQUcwakIsR0FBSTFqQixFQUFHMmpCLEdBQUlXLEVBQUsxaUIsR0FBTTVCLEVBQUc2aUIsSUFBSzdpQixFQUFHNGlCLEtBQU1oaEIsR0FBTTVCLEVBQUdtZ0IsSUFBS25nQixFQUFHa2dCLE1BQU9nQixLQUs3RWx5QixFQUFROHhCLElBQUksRUFBRyxFQUFHbEcsRUFBSXFKLEVBQUtELEVBQUs5QyxHQXJCSWx5QixFQUFRMndCLE9BQU95QyxFQUFLQyxRQTFGMUNyekIsRUFBUXl3QixPQUFPLEVBQUcsR0FvSHZDLEdBRkF6d0IsRUFBUTB3QixZQUVKOWxFLEVBQVEsT0FBT28xQyxFQUFVLEtBQU1wMUMsRUFBUyxJQUFNLEtBeUNwRCxPQXRDQWtuRSxFQUFJa0UsU0FBVyxXQUNiLElBQUl2dkMsSUFBTStyQyxFQUFZNWdFLE1BQU1oTyxLQUFNZ0osYUFBYzhsRSxFQUFZOWdFLE1BQU1oTyxLQUFNZ0osWUFBYyxFQUNsRjhTLElBQU1rekQsRUFBV2hoRSxNQUFNaE8sS0FBTWdKLGFBQWNrbUUsRUFBU2xoRSxNQUFNaE8sS0FBTWdKLFlBQWMsRUFBSSxHQUFLLEVBQzNGLE1BQU8sQ0FBQ2s0RCxHQUFJcGxELEdBQUsrbUIsRUFBR3MrQixHQUFJcmxELEdBQUsrbUIsSUFHL0JxckMsRUFBSVUsWUFBYyxTQUFTampCLEdBQ3pCLE9BQU8zaUQsVUFBVTFILFFBQVVzdEUsRUFBMkIsbUJBQU5qakIsRUFBbUJBLEVBQUksSUFBVUEsR0FBSXVpQixHQUFPVSxHQUc5RlYsRUFBSVksWUFBYyxTQUFTbmpCLEdBQ3pCLE9BQU8zaUQsVUFBVTFILFFBQVV3dEUsRUFBMkIsbUJBQU5uakIsRUFBbUJBLEVBQUksSUFBVUEsR0FBSXVpQixHQUFPWSxHQUc5RlosRUFBSThDLGFBQWUsU0FBU3JsQixHQUMxQixPQUFPM2lELFVBQVUxSCxRQUFVMHZFLEVBQTRCLG1CQUFOcmxCLEVBQW1CQSxFQUFJLElBQVVBLEdBQUl1aUIsR0FBTzhDLEdBRy9GOUMsRUFBSStDLFVBQVksU0FBU3RsQixHQUN2QixPQUFPM2lELFVBQVUxSCxRQUFVMnZFLEVBQWlCLE1BQUx0bEIsRUFBWSxLQUFvQixtQkFBTkEsRUFBbUJBLEVBQUksSUFBVUEsR0FBSXVpQixHQUFPK0MsR0FHL0cvQyxFQUFJYyxXQUFhLFNBQVNyakIsR0FDeEIsT0FBTzNpRCxVQUFVMUgsUUFBVTB0RSxFQUEwQixtQkFBTnJqQixFQUFtQkEsRUFBSSxJQUFVQSxHQUFJdWlCLEdBQU9jLEdBRzdGZCxFQUFJZ0IsU0FBVyxTQUFTdmpCLEdBQ3RCLE9BQU8zaUQsVUFBVTFILFFBQVU0dEUsRUFBd0IsbUJBQU52akIsRUFBbUJBLEVBQUksSUFBVUEsR0FBSXVpQixHQUFPZ0IsR0FHM0ZoQixFQUFJa0IsU0FBVyxTQUFTempCLEdBQ3RCLE9BQU8zaUQsVUFBVTFILFFBQVU4dEUsRUFBd0IsbUJBQU56akIsRUFBbUJBLEVBQUksSUFBVUEsR0FBSXVpQixHQUFPa0IsR0FHM0ZsQixFQUFJOXhCLFFBQVUsU0FBU3VQLEdBQ3JCLE9BQU8zaUQsVUFBVTFILFFBQVc4NkMsRUFBZSxNQUFMdVAsRUFBWSxLQUFPQSxFQUFJdWlCLEdBQU85eEIsR0FHL0Q4eEIsRUNuUUYsSUFBSSxHQUFRdnRFLE1BQU1DLFVBQVVpSCxNQ0E1QixTQUFTLEdBQUV3OUIsR0FDaEIsT0FBT0EsRUFBRSxHQUdKLFNBQVMsR0FBRUEsR0FDaEIsT0FBT0EsRUFBRSxHQ0NYLFNBQVNndEMsR0FBV3h4QixHQUNsQixPQUFPQSxFQUFFM3NDLE9BR1gsU0FBU28rRCxHQUFXenhCLEdBQ2xCLE9BQU9BLEVBQUU1MkMsT0F3Q1gsU0FBU3NvRSxHQUFnQm4yQixFQUFTeWxCLEVBQUlDLEVBQUlDLEVBQUlDLEdBQzVDNWxCLEVBQVF5d0IsT0FBT2hMLEVBQUlDLEdBQ25CMWxCLEVBQVE2d0IsY0FBY3BMLEdBQU1BLEVBQUtFLEdBQU0sRUFBR0QsRUFBSUQsRUFBSUcsRUFBSUQsRUFBSUMsR0NqRDdDLFlBQVMxd0MsR0FDdEJBLEVBQU1raEQsaUJBQ05saEQsRUFBTW1oRCwyQkNITyxZQUFTcnJFLEdBQ3RCLElBQUkxSCxFQUFPMEgsRUFBSytRLFNBQVMydUMsZ0JBQ3JCNEIsRUFBWSxHQUFPdGhELEdBQU1zZ0QsR0FBRyxpQkFBa0IsSUFBUyxHQUN2RCxrQkFBbUJob0QsRUFDckJncEQsRUFBVWhCLEdBQUcsbUJBQW9CLElBQVMsSUFFMUNob0QsRUFBS2d6RSxXQUFhaHpFLEVBQUs0cEIsTUFBTXFwRCxjQUM3Qmp6RSxFQUFLNHBCLE1BQU1xcEQsY0FBZ0IsUUFJeEIsU0FBU0MsR0FBUXhyRSxFQUFNeXJFLEdBQzVCLElBQUluekUsRUFBTzBILEVBQUsrUSxTQUFTMnVDLGdCQUNyQjRCLEVBQVksR0FBT3RoRCxHQUFNc2dELEdBQUcsaUJBQWtCLE1BQzlDbXJCLElBQ0ZucUIsRUFBVWhCLEdBQUcsYUFBYyxJQUFTLEdBQ3BDejFCLFlBQVcsV0FBYXkyQixFQUFVaEIsR0FBRyxhQUFjLFFBQVUsSUFFM0Qsa0JBQW1CaG9ELEVBQ3JCZ3BELEVBQVVoQixHQUFHLG1CQUFvQixPQUVqQ2hvRCxFQUFLNHBCLE1BQU1xcEQsY0FBZ0JqekUsRUFBS2d6RSxrQkFDekJoekUsRUFBS2d6RSxZQ3ZCaEIsU0FBU3Q0QyxHQUFLMVcsR0FDWixRQUFTQSxFQUFJM1osS0FBSzBaLElBQUlDLElBQU0sRUFBSUEsR0FBSyxFQVd2QyxTQUFlLFNBQVVvdkQsRUFBUUMsRUFBS0MsRUFBTUMsR0FJMUMsU0FBU0MsRUFBS3RCLEVBQUkvOEQsR0FDaEIsSUFLSTdNLEVBQ0E3RyxFQU5BZ3lFLEVBQU12QixFQUFHLEdBQUl3QixFQUFNeEIsRUFBRyxHQUFJeUIsRUFBS3pCLEVBQUcsR0FDbEMwQixFQUFNeitELEVBQUcsR0FBSTArRCxFQUFNMStELEVBQUcsR0FBSTIrRCxFQUFLMytELEVBQUcsR0FDbENvdEQsRUFBS3FSLEVBQU1ILEVBQ1hqUixFQUFLcVIsRUFBTUgsRUFDWGhELEVBQUtuTyxFQUFLQSxFQUFLQyxFQUFLQSxFQUt4QixHQUFJa08sRUE1Qk8sTUE2QlRqdkUsRUFBSTRJLEtBQUsrVixJQUFJMHpELEVBQUtILEdBQU1OLEVBQ3hCL3FFLEVBQUksU0FBU2lvQixHQUNYLE1BQU8sQ0FDTGtqRCxFQUFNbGpELEVBQUlneUMsRUFDVm1SLEVBQU1uakQsRUFBSWl5QyxFQUNWbVIsRUFBS3RwRSxLQUFLMFosSUFBSXN2RCxFQUFNOWlELEVBQUk5dUIsU0FNekIsQ0FDSCxJQUFJNG1FLEVBQUtoK0QsS0FBSzJ2QixLQUFLMDJDLEdBQ2ZxRCxHQUFNRCxFQUFLQSxFQUFLSCxFQUFLQSxFQUFLSixFQUFPN0MsSUFBTyxFQUFJaUQsRUFBS0wsRUFBT2pMLEdBQ3hEMkwsR0FBTUYsRUFBS0EsRUFBS0gsRUFBS0EsRUFBS0osRUFBTzdDLElBQU8sRUFBSW9ELEVBQUtSLEVBQU9qTCxHQUN4REMsRUFBS2orRCxLQUFLK1YsSUFBSS9WLEtBQUsydkIsS0FBSys1QyxFQUFLQSxFQUFLLEdBQUtBLEdBQ3ZDeEwsRUFBS2wrRCxLQUFLK1YsSUFBSS9WLEtBQUsydkIsS0FBS2c2QyxFQUFLQSxFQUFLLEdBQUtBLEdBQzNDdnlFLEdBQUs4bUUsRUFBS0QsR0FBTStLLEVBQ2hCL3FFLEVBQUksU0FBU2lvQixHQUNYLElBdENNdk0sRUFzQ0ZxSixFQUFJa0QsRUFBSTl1QixFQUNSd3lFLEVBQVN2NUMsR0FBSzR0QyxHQUNkWSxFQUFJeUssR0FBTUwsRUFBT2pMLElBQU80TCxHQXhDdEJqd0QsRUF3Q29DcXZELEVBQU1obUQsRUFBSWk3QyxJQXZDakR0a0QsRUFBSTNaLEtBQUswWixJQUFJLEVBQUlDLElBQU0sSUFBTUEsRUFBSSxJQUw1QyxTQUFjQSxHQUNaLFFBQVNBLEVBQUkzWixLQUFLMFosSUFBSUMsSUFBTSxFQUFJQSxHQUFLLEVBMkMyQjZYLENBQUt5c0MsSUFDL0QsTUFBTyxDQUNMbUwsRUFBTXZLLEVBQUkzRyxFQUNWbVIsRUFBTXhLLEVBQUkxRyxFQUNWbVIsRUFBS00sRUFBU3Y1QyxHQUFLMjRDLEVBQU1obUQsRUFBSWk3QyxLQU9uQyxPQUZBaGdFLEVBQUVrbUQsU0FBZSxJQUFKL3NELEVBQVc0eEUsRUFBTWhwRSxLQUFLNnBFLE1BRTVCNXJFLEVBUVQsT0FMQWtyRSxFQUFLSCxJQUFNLFNBQVNwbkIsR0FDbEIsSUFBSWtvQixFQUFLOXBFLEtBQUttb0IsSUFBSSxNQUFPeTVCLEdBQUltb0IsRUFBS0QsRUFBS0EsRUFDdkMsT0FBT2YsRUFBUWUsRUFBSUMsRUFENkJBLEVBQUtBLElBSWhEWixFQXZEVCxDQXdER25wRSxLQUFLNnBFLE1BQU8sRUFBRyxHQ3BFSCxZQUFTdGlELEVBQU8vTSxHQUc3QixHQUZBK00sRUNIYSxTQUFTQSxHQUN0QixJQUFJeWlELEVBQ0osS0FBT0EsRUFBY3ppRCxFQUFNeWlELGFBQWF6aUQsRUFBUXlpRCxFQUNoRCxPQUFPemlELEVEQUN5aUQsQ0FBWXppRCxRQUNQendCLElBQVQwakIsSUFBb0JBLEVBQU8rTSxFQUFNMGlELGVBQ2pDenZELEVBQU0sQ0FDUixJQUFJNCtCLEVBQU01K0IsRUFBSzB2RCxpQkFBbUIxdkQsRUFDbEMsR0FBSTQrQixFQUFJK3dCLGVBQWdCLENBQ3RCLElBQUludEMsRUFBUW9jLEVBQUkrd0IsaUJBR2hCLE9BRkFudEMsRUFBTXJqQixFQUFJNE4sRUFBTTZpRCxRQUFTcHRDLEVBQU05WixFQUFJcUUsRUFBTThpRCxRQUVsQyxFQURQcnRDLEVBQVFBLEVBQU1zdEMsZ0JBQWdCOXZELEVBQUsrdkQsZUFBZUMsWUFDcEM3d0QsRUFBR3FqQixFQUFNOVosR0FFekIsR0FBSTFJLEVBQUtpd0Qsc0JBQXVCLENBQzlCLElBQUloRyxFQUFPanFELEVBQUtpd0Qsd0JBQ2hCLE1BQU8sQ0FBQ2xqRCxFQUFNNmlELFFBQVUzRixFQUFLNS9ELEtBQU8yVixFQUFLa3dELFdBQVluakQsRUFBTThpRCxRQUFVNUYsRUFBS2tHLElBQU1ud0QsRUFBS293RCxZQUd6RixNQUFPLENBQUNyakQsRUFBTXNqRCxNQUFPdGpELEVBQU11akQsT0VsQjdCLFNBQWVueEQsR0FBSyxJQUFNQSxFQ0FYLFNBQVNveEQsR0FBVWhrRSxHQUFNLFlBQ3RDaWpFLEVBQVcsT0FDWDlwRSxFQUFNLFVBQ05rbUQsRUFBUyxTQUNUMUUsSUFFQTNvRCxPQUFPc2xCLGlCQUFpQnBvQixLQUFNLENBQzVCOFEsS0FBTSxDQUFDOVAsTUFBTzhQLEVBQU11RSxZQUFZLEVBQU10VSxjQUFjLEdBQ3BEZ3pFLFlBQWEsQ0FBQy95RSxNQUFPK3lFLEVBQWExK0QsWUFBWSxFQUFNdFUsY0FBYyxHQUNsRWtKLE9BQVEsQ0FBQ2pKLE1BQU9pSixFQUFRb0wsWUFBWSxFQUFNdFUsY0FBYyxHQUN4RG92RCxVQUFXLENBQUNudkQsTUFBT212RCxFQUFXOTZDLFlBQVksRUFBTXRVLGNBQWMsR0FDOUQ0cUQsRUFBRyxDQUFDM3FELE1BQU95cUQsS0NYUixTQUFTc3BCLEdBQVU3bEQsRUFBR3hMLEVBQUd1SixHQUM5Qmp0QixLQUFLa3ZCLEVBQUlBLEVBQ1RsdkIsS0FBSzBqQixFQUFJQSxFQUNUMWpCLEtBQUtpdEIsRUFBSUEsRUFHWDhuRCxHQUFVbjBFLFVBQVksQ0FDcEJ5SCxZQUFhMHNFLEdBQ2JubEIsTUFBTyxTQUFTMWdDLEdBQ2QsT0FBYSxJQUFOQSxFQUFVbHZCLEtBQU8sSUFBSSswRSxHQUFVLzBFLEtBQUtrdkIsRUFBSUEsRUFBR2x2QixLQUFLMGpCLEVBQUcxakIsS0FBS2l0QixJQUVqRTBpQyxVQUFXLFNBQVNqc0MsRUFBR3VKLEdBQ3JCLE9BQWEsSUFBTnZKLEVBQWdCLElBQU51SixFQUFVanRCLEtBQU8sSUFBSSswRSxHQUFVLzBFLEtBQUtrdkIsRUFBR2x2QixLQUFLMGpCLEVBQUkxakIsS0FBS2t2QixFQUFJeEwsRUFBRzFqQixLQUFLaXRCLEVBQUlqdEIsS0FBS2t2QixFQUFJakMsSUFFakdqZixNQUFPLFNBQVMrNEIsR0FDZCxNQUFPLENBQUNBLEVBQU0sR0FBSy9tQyxLQUFLa3ZCLEVBQUlsdkIsS0FBSzBqQixFQUFHcWpCLEVBQU0sR0FBSy9tQyxLQUFLa3ZCLEVBQUlsdkIsS0FBS2l0QixJQUUvRCtuRCxPQUFRLFNBQVN0eEQsR0FDZixPQUFPQSxFQUFJMWpCLEtBQUtrdkIsRUFBSWx2QixLQUFLMGpCLEdBRTNCdXhELE9BQVEsU0FBU2hvRCxHQUNmLE9BQU9BLEVBQUlqdEIsS0FBS2t2QixFQUFJbHZCLEtBQUtpdEIsR0FFM0J5N0MsT0FBUSxTQUFTNzNDLEdBQ2YsTUFBTyxFQUFFQSxFQUFTLEdBQUs3d0IsS0FBSzBqQixHQUFLMWpCLEtBQUtrdkIsR0FBSTJCLEVBQVMsR0FBSzd3QixLQUFLaXRCLEdBQUtqdEIsS0FBS2t2QixJQUV6RWdtRCxRQUFTLFNBQVN4eEQsR0FDaEIsT0FBUUEsRUFBSTFqQixLQUFLMGpCLEdBQUsxakIsS0FBS2t2QixHQUU3QmltRCxRQUFTLFNBQVNsb0QsR0FDaEIsT0FBUUEsRUFBSWp0QixLQUFLaXRCLEdBQUtqdEIsS0FBS2t2QixHQUU3QmttRCxTQUFVLFNBQVMxeEQsR0FDakIsT0FBT0EsRUFBRW1vQyxPQUFPem1DLE9BQU8xQixFQUFFbWtELFFBQVF6NkQsSUFBSXBOLEtBQUtrMUUsUUFBU2wxRSxNQUFNb04sSUFBSXNXLEVBQUVnbEQsT0FBUWhsRCxLQUV6RTJ4RCxTQUFVLFNBQVNwb0QsR0FDakIsT0FBT0EsRUFBRTQrQixPQUFPem1DLE9BQU82SCxFQUFFNDZDLFFBQVF6NkQsSUFBSXBOLEtBQUttMUUsUUFBU24xRSxNQUFNb04sSUFBSTZmLEVBQUV5N0MsT0FBUXo3QyxLQUV6RXJkLFNBQVUsV0FDUixNQUFPLGFBQWU1UCxLQUFLMGpCLEVBQUksSUFBTTFqQixLQUFLaXRCLEVBQUksV0FBYWp0QixLQUFLa3ZCLEVBQUksTUFJakUsSUFBSSxHQUFXLElBQUk2bEQsR0FBVSxFQUFHLEVBQUcsR0MzQ25DLFNBQVMsR0FBY3pqRCxHQUM1QkEsRUFBTW1oRCwyQkFHTyxZQUFTbmhELEdBQ3RCQSxFQUFNa2hELGlCQUNObGhELEVBQU1taEQsMkJDTVIsU0FBUyxHQUFjbmhELEdBQ3JCLFFBQVNBLEVBQU1na0QsU0FBMEIsVUFBZmhrRCxFQUFNeGdCLE1BQXNCd2dCLEVBQU1pa0QsUUFHOUQsU0FBUyxLQUNQLElBQUl2NEMsRUFBSWg5QixLQUNSLE9BQUlnOUIsYUFBYXc0QyxZQUNmeDRDLEVBQUlBLEVBQUVpM0MsaUJBQW1CajNDLEdBQ25CeTRDLGFBQWEsV0FFVixDQUFDLEVBRFJ6NEMsRUFBSUEsRUFBRTA0QyxRQUFRdGxCLFNBQ0gxc0MsRUFBR3NaLEVBQUUvUCxHQUFJLENBQUMrUCxFQUFFdFosRUFBSXNaLEVBQUVvc0MsTUFBT3BzQyxFQUFFL1AsRUFBSStQLEVBQUU0a0MsU0FFdkMsQ0FBQyxDQUFDLEVBQUcsR0FBSSxDQUFDNWtDLEVBQUVvc0MsTUFBTWhaLFFBQVFwdkQsTUFBT2c4QixFQUFFNGtDLE9BQU94UixRQUFRcHZELFFBRXBELENBQUMsQ0FBQyxFQUFHLEdBQUksQ0FBQ2c4QixFQUFFMjRDLFlBQWEzNEMsRUFBRTQ0QyxlQUdwQyxTQUFTQyxLQUNQLE9BQU83MUUsS0FBSzgxRSxRQUFVLEdBR3hCLFNBQVNDLEdBQWtCemtELEdBQ3pCLE9BQVFBLEVBQU0wa0QsUUFBOEIsSUFBcEIxa0QsRUFBTTJrRCxVQUFrQixJQUFPM2tELEVBQU0ya0QsVUFBWSxFQUFJLE9BQVUza0QsRUFBTWdrRCxRQUFVLEdBQUssR0FHOUcsU0FBUyxLQUNQLE9BQU9ZLFVBQVVDLGdCQUFtQixpQkFBa0JuMkUsS0FHeEQsU0FBU28yRSxHQUFpQmptQixFQUFXa21CLEVBQVFDLEdBQzNDLElBQUk1RixFQUFNdmdCLEVBQVUra0IsUUFBUW1CLEVBQU8sR0FBRyxJQUFNQyxFQUFnQixHQUFHLEdBQzNEMUYsRUFBTXpnQixFQUFVK2tCLFFBQVFtQixFQUFPLEdBQUcsSUFBTUMsRUFBZ0IsR0FBRyxHQUMzRDNGLEVBQU14Z0IsRUFBVWdsQixRQUFRa0IsRUFBTyxHQUFHLElBQU1DLEVBQWdCLEdBQUcsR0FDM0R6RixFQUFNMWdCLEVBQVVnbEIsUUFBUWtCLEVBQU8sR0FBRyxJQUFNQyxFQUFnQixHQUFHLEdBQy9ELE9BQU9ubUIsRUFBVVIsVUFDZmloQixFQUFNRixHQUFPQSxFQUFNRSxHQUFPLEVBQUk3bUUsS0FBS0QsSUFBSSxFQUFHNG1FLElBQVEzbUUsS0FBS21vQixJQUFJLEVBQUcwK0MsR0FDOURDLEVBQU1GLEdBQU9BLEVBQU1FLEdBQU8sRUFBSTltRSxLQUFLRCxJQUFJLEVBQUc2bUUsSUFBUTVtRSxLQUFLbW9CLElBQUksRUFBRzIrQyxJQUluRCxjQUNiLElBVUkwRixFQUNBQyxFQUNBQyxFQVpBcHBFLEVBQVMsR0FDVGdwRSxFQUFTLEdBQ1RLLEVBQVlOLEdBQ1pPLEVBQWFaLEdBQ2JhLEVBQVksR0FDWkMsRUFBYyxDQUFDLEVBQUd0MkQsS0FDbEIrMUQsRUFBa0IsQ0FBQyxFQUFDLEtBQVcsS0FBWSxDQUFDLzFELElBQVVBLE1BQ3REMnRDLEVBQVcsSUFDWDZQLEVBQWMsR0FDZCtZLEVBQVksR0FBUyxRQUFTLE9BQVEsT0FJdENDLEVBQWEsSUFFYkMsRUFBaUIsRUFDakJDLEVBQWMsR0FFbEIsU0FBUy9ELEVBQUt4cUIsR0FDWkEsRUFDSzlqRCxTQUFTLFNBQVVpeEUsSUFDbkJudUIsR0FBRyxhQUFjd3ZCLEdBQ2pCeHZCLEdBQUcsaUJBQWtCeXZCLEdBQ3JCenZCLEdBQUcsZ0JBQWlCMHZCLEdBQ3RCL3BFLE9BQU91cEUsR0FDTGx2QixHQUFHLGtCQUFtQjJ2QixHQUN0QjN2QixHQUFHLGlCQUFrQjR2QixHQUNyQjV2QixHQUFHLGlDQUFrQzZ2QixHQUNyQ2p1RCxNQUFNLDhCQUErQixpQkEyRDVDLFNBQVNzbUMsRUFBTU8sRUFBV2poQyxHQUV4QixPQURBQSxFQUFJbmxCLEtBQUttb0IsSUFBSTJrRCxFQUFZLEdBQUk5c0UsS0FBS0QsSUFBSStzRSxFQUFZLEdBQUkzbkQsT0FDekNpaEMsRUFBVWpoQyxFQUFJaWhDLEVBQVksSUFBSTRrQixHQUFVN2xELEVBQUdpaEMsRUFBVXpzQyxFQUFHeXNDLEVBQVVsakMsR0FHakYsU0FBUzBpQyxFQUFVUSxFQUFXeWhCLEVBQUkvOEQsR0FDaEMsSUFBSTZPLEVBQUlrdUQsRUFBRyxHQUFLLzhELEVBQUcsR0FBS3M3QyxFQUFVamhDLEVBQUdqQyxFQUFJMmtELEVBQUcsR0FBSy84RCxFQUFHLEdBQUtzN0MsRUFBVWpoQyxFQUNuRSxPQUFPeEwsSUFBTXlzQyxFQUFVenNDLEdBQUt1SixJQUFNa2pDLEVBQVVsakMsRUFBSWtqQyxFQUFZLElBQUk0a0IsR0FBVTVrQixFQUFVamhDLEVBQUd4TCxFQUFHdUosR0FHNUYsU0FBU21sRCxFQUFTaUUsR0FDaEIsTUFBTyxHQUFHQSxFQUFPLEdBQUcsS0FBTUEsRUFBTyxHQUFHLElBQU0sSUFBS0EsRUFBTyxHQUFHLEtBQU1BLEVBQU8sR0FBRyxJQUFNLEdBR2pGLFNBQVNqb0IsRUFBU3dDLEVBQVlULEVBQVdwcEIsRUFBT3pWLEdBQzlDcy9CLEVBQ0tsSixHQUFHLGNBQWMsV0FBYTh2QixFQUFReDNFLEtBQU1nSixXQUFXc29CLE1BQU1BLEdBQU8zcEIsV0FDcEUrL0MsR0FBRywyQkFBMkIsV0FBYTh2QixFQUFReDNFLEtBQU1nSixXQUFXc29CLE1BQU1BLEdBQU9obkIsU0FDakYwakQsTUFBTSxRQUFRLFdBQ2IsSUFBSWhoRCxFQUFPaE4sS0FDUGtlLEVBQU9sVixVQUNQMFcsRUFBSTgzRCxFQUFReHFFLEVBQU1rUixHQUFNb1QsTUFBTUEsR0FDOUIwTCxFQUFJcTVDLEVBQU9yb0UsTUFBTWhCLEVBQU1rUixHQUN2Qm1uQixFQUFhLE1BQVQwQixFQUFnQnFyQyxFQUFTcDFDLEdBQXNCLG1CQUFWK0osRUFBdUJBLEVBQU0vNEIsTUFBTWhCLEVBQU1rUixHQUFRNm9CLEVBQzFGKzhCLEVBQUkvNUQsS0FBS21vQixJQUFJOEssRUFBRSxHQUFHLEdBQUtBLEVBQUUsR0FBRyxHQUFJQSxFQUFFLEdBQUcsR0FBS0EsRUFBRSxHQUFHLElBQy9DbGhCLEVBQUk5TyxFQUFLOG9FLE9BQ1RqNEQsRUFBeUIsbUJBQWRzeUMsRUFBMkJBLEVBQVVuaUQsTUFBTWhCLEVBQU1rUixHQUFRaXlDLEVBQ3BFbm9ELEVBQUkrMUQsRUFBWWppRCxFQUFFNHNELE9BQU9yakMsR0FBRy9tQixPQUFPd2xELEVBQUlob0QsRUFBRW9ULEdBQUlyUixFQUFFNnFELE9BQU9yakMsR0FBRy9tQixPQUFPd2xELEVBQUlqbUQsRUFBRXFSLElBQzFFLE9BQU8sU0FBU2UsR0FDZCxHQUFVLElBQU5BLEVBQVNBLEVBQUlwUyxNQUNaLENBQUUsSUFBSTA5QyxFQUFJdnpELEVBQUVpb0IsR0FBSWYsRUFBSTQwQyxFQUFJdkksRUFBRSxHQUFJdHJDLEVBQUksSUFBSThrRCxHQUFVN2xELEVBQUdtVyxFQUFFLEdBQUtrMkIsRUFBRSxHQUFLcnNDLEVBQUdtVyxFQUFFLEdBQUtrMkIsRUFBRSxHQUFLcnNDLEdBQ3ZGeFAsRUFBRXd6RCxLQUFLLEtBQU1qakQsT0FLdkIsU0FBU3VuRCxFQUFReHFFLEVBQU1rUixFQUFNdTVELEdBQzNCLE9BQVNBLEdBQVN6cUUsRUFBSzBxRSxXQUFjLElBQUlDLEVBQVEzcUUsRUFBTWtSLEdBR3pELFNBQVN5NUQsRUFBUTNxRSxFQUFNa1IsR0FDckJsZSxLQUFLZ04sS0FBT0EsRUFDWmhOLEtBQUtrZSxLQUFPQSxFQUNabGUsS0FBS3F1RCxPQUFTLEVBQ2RydUQsS0FBSyt6RSxZQUFjLEtBQ25CL3pFLEtBQUtxMkUsT0FBU0EsRUFBT3JvRSxNQUFNaEIsRUFBTWtSLEdBQ2pDbGUsS0FBSzQzRSxLQUFPLEVBK0NkLFNBQVNWLEVBQVE1bEQsS0FBVXBULEdBQ3pCLEdBQUs3USxFQUFPVyxNQUFNaE8sS0FBTWdKLFdBQXhCLENBQ0EsSUFBSTBXLEVBQUk4M0QsRUFBUXgzRSxLQUFNa2UsR0FBTW9ULE1BQU1BLEdBQzlCckIsRUFBSWp3QixLQUFLODFFLE9BQ1Q1bUQsRUFBSW5sQixLQUFLbW9CLElBQUkya0QsRUFBWSxHQUFJOXNFLEtBQUtELElBQUkrc0UsRUFBWSxHQUFJNW1ELEVBQUVmLEVBQUlubEIsS0FBSzhWLElBQUksRUFBRzgyRCxFQUFXM29FLE1BQU1oTyxLQUFNZ0osY0FDL0ZxOEIsRUFBSSxHQUFRL1QsR0FJaEIsR0FBSTVSLEVBQUVtNEQsTUFDQW40RCxFQUFFbzRELE1BQU0sR0FBRyxLQUFPenlDLEVBQUUsSUFBTTNsQixFQUFFbzRELE1BQU0sR0FBRyxLQUFPenlDLEVBQUUsS0FDaEQzbEIsRUFBRW80RCxNQUFNLEdBQUs3bkQsRUFBRXk0QyxPQUFPaHBELEVBQUVvNEQsTUFBTSxHQUFLenlDLElBRXJDbW9CLGFBQWE5dEMsRUFBRW00RCxXQUlaLElBQUk1bkQsRUFBRWYsSUFBTUEsRUFBRyxPQUlsQnhQLEVBQUVvNEQsTUFBUSxDQUFDenlDLEVBQUdwVixFQUFFeTRDLE9BQU9yakMsSUFDdkIsR0FBVXJsQyxNQUNWMGYsRUFBRS9YLFFBR0osR0FBUTJwQixHQUNSNVIsRUFBRW00RCxNQUFRNWxELFdBQVc4bEQsRUFqTU4sS0FrTWZyNEQsRUFBRXd6RCxLQUFLLFFBQVN3RCxFQUFVL21CLEVBQVVDLEVBQU0zL0IsRUFBR2YsR0FBSXhQLEVBQUVvNEQsTUFBTSxHQUFJcDRELEVBQUVvNEQsTUFBTSxJQUFLcDRELEVBQUUyMkQsT0FBUUMsSUFFcEYsU0FBU3lCLElBQ1ByNEQsRUFBRW00RCxNQUFRLEtBQ1ZuNEQsRUFBRXBWLE9BSU4sU0FBUzZzRSxFQUFZN2xELEtBQVVwVCxHQUM3QixJQUFJdTRELEdBQWdCcHBFLEVBQU9XLE1BQU1oTyxLQUFNZ0osV0FBdkMsQ0FDQSxJQUFJMFcsRUFBSTgzRCxFQUFReDNFLEtBQU1rZSxHQUFNLEdBQU1vVCxNQUFNQSxHQUNwQ3VNLEVBQUksR0FBT3ZNLEVBQU1scUIsTUFBTXNnRCxHQUFHLGlCQUFrQnN3QixHQUFZLEdBQU10d0IsR0FBRyxlQUFnQnV3QixHQUFZLEdBQzdGNXlDLEVBQUksR0FBUS9ULEVBQU8waUQsR0FDbkJBLEVBQWdCMWlELEVBQU0waUQsY0FDdEJuUyxFQUFLdndDLEVBQU02aUQsUUFDWHJTLEVBQUt4d0MsRUFBTThpRCxRQUVmLEdBQVk5aUQsRUFBTWxxQixNQUNsQixHQUFja3FCLEdBQ2Q1UixFQUFFbzRELE1BQVEsQ0FBQ3p5QyxFQUFHcmxDLEtBQUs4MUUsT0FBT3BOLE9BQU9yakMsSUFDakMsR0FBVXJsQyxNQUNWMGYsRUFBRS9YLFFBRUYsU0FBU3F3RSxFQUFXMW1ELEdBRWxCLEdBREEsR0FBUUEsSUFDSDVSLEVBQUV3NEQsTUFBTyxDQUNaLElBQUlqVyxFQUFLM3dDLEVBQU02aUQsUUFBVXRTLEVBQUlLLEVBQUs1d0MsRUFBTThpRCxRQUFVdFMsRUFDbERwaUQsRUFBRXc0RCxNQUFRalcsRUFBS0EsRUFBS0MsRUFBS0EsRUFBSzhVLEVBRWhDdDNELEVBQUU0UixNQUFNQSxHQUNONGhELEtBQUssUUFBU3dELEVBQVUvbUIsRUFBVWp3QyxFQUFFMVMsS0FBSzhvRSxPQUFRcDJELEVBQUVvNEQsTUFBTSxHQUFLLEdBQVF4bUQsRUFBTzBpRCxHQUFnQnQwRCxFQUFFbzRELE1BQU0sSUFBS3A0RCxFQUFFMjJELE9BQVFDLElBR3hILFNBQVMyQixFQUFXM21ELEdBQ2xCdU0sRUFBRTZwQixHQUFHLDhCQUErQixNQUNwQyxHQUFXcDJCLEVBQU1scUIsS0FBTXNZLEVBQUV3NEQsT0FDekIsR0FBUTVtRCxHQUNSNVIsRUFBRTRSLE1BQU1BLEdBQU9obkIsT0FJbkIsU0FBUzhzRSxFQUFXOWxELEtBQVVwVCxHQUM1QixHQUFLN1EsRUFBT1csTUFBTWhPLEtBQU1nSixXQUF4QixDQUNBLElBQUlra0QsRUFBS2x0RCxLQUFLODFFLE9BQ1ZsRSxFQUFLLEdBQVF0Z0QsRUFBTTZtRCxlQUFpQjdtRCxFQUFNNm1ELGVBQWUsR0FBSzdtRCxFQUFPdHhCLE1BQ3JFNlUsRUFBS3E0QyxFQUFHd2IsT0FBT2tKLEdBQ2Z3RyxFQUFLbHJCLEVBQUdoK0IsR0FBS29DLEVBQU0rbUQsU0FBVyxHQUFNLEdBQ3BDanJCLEVBQUtzcEIsRUFBVS9tQixFQUFVQyxFQUFNMUMsRUFBSWtyQixHQUFLeEcsRUFBSS84RCxHQUFLd2hFLEVBQU9yb0UsTUFBTWhPLEtBQU1rZSxHQUFPbzRELEdBRS9FLEdBQVFobEQsR0FDSjQ4QixFQUFXLEVBQUcsR0FBT2x1RCxNQUFNNHdELGFBQWExQyxTQUFTQSxHQUFVM3BELEtBQUs2cEQsRUFBVWhCLEVBQUl3a0IsRUFBSXRnRCxHQUNqRixHQUFPdHhCLE1BQU11RSxLQUFLMnVFLEVBQUsvaUIsVUFBVy9DLEVBQUl3a0IsRUFBSXRnRCxJQUdqRCxTQUFTK2xELEVBQWEvbEQsS0FBVXBULEdBQzlCLEdBQUs3USxFQUFPVyxNQUFNaE8sS0FBTWdKLFdBQXhCLENBQ0EsSUFHSXN2RSxFQUFTdHdFLEVBQUdpb0IsRUFBR29WLEVBSGZrekMsRUFBVWpuRCxFQUFNaW5ELFFBQ2hCajVELEVBQUlpNUQsRUFBUWozRSxPQUNab2UsRUFBSTgzRCxFQUFReDNFLEtBQU1rZSxFQUFNb1QsRUFBTTZtRCxlQUFlNzJFLFNBQVdnZSxHQUFHZ1MsTUFBTUEsR0FJckUsSUFEQSxHQUFjQSxHQUNUdHBCLEVBQUksRUFBR0EsRUFBSXNYLElBQUt0WCxFQUVuQnE5QixFQUFJLENBRFlBLEVBQUksR0FBcEJwVixFQUFJc29ELEVBQVF2d0UsR0FBbUJoSSxNQUN2QkEsS0FBSzgxRSxPQUFPcE4sT0FBT3JqQyxHQUFJcFYsRUFBRXVvRCxZQUM1Qjk0RCxFQUFFKzRELE9BQ0cvNEQsRUFBRWc1RCxRQUFVaDVELEVBQUUrNEQsT0FBTyxLQUFPcHpDLEVBQUUsS0FBSTNsQixFQUFFZzVELE9BQVNyekMsRUFBRzNsQixFQUFFazRELEtBQU8sSUFEcERsNEQsRUFBRSs0RCxPQUFTcHpDLEVBQUdpekMsR0FBVSxFQUFNNTRELEVBQUVrNEQsS0FBTyxJQUFNckIsR0FJMURBLElBQWVBLEVBQWdCL29CLGFBQWErb0IsSUFFNUMrQixJQUNFNTRELEVBQUVrNEQsS0FBTyxJQUFHcEIsRUFBYW54QyxFQUFFLEdBQUlreEMsRUFBZ0J0a0QsWUFBVyxXQUFhc2tELEVBQWdCLE9BQVNRLElBQ3BHLEdBQVUvMkUsTUFDVjBmLEVBQUUvWCxVQUlOLFNBQVMydkUsRUFBV2htRCxLQUFVcFQsR0FDNUIsR0FBS2xlLEtBQUswM0UsVUFBVixDQUNBLElBRXdCMXZFLEVBQUdpb0IsRUFBR29WLEVBQUdrMkIsRUFGN0I3N0MsRUFBSTgzRCxFQUFReDNFLEtBQU1rZSxHQUFNb1QsTUFBTUEsR0FDOUJpbkQsRUFBVWpuRCxFQUFNNm1ELGVBQ2hCNzRELEVBQUlpNUQsRUFBUWozRSxPQUdoQixJQURBLEdBQVFnd0IsR0FDSHRwQixFQUFJLEVBQUdBLEVBQUlzWCxJQUFLdFgsRUFDSHE5QixFQUFJLEdBQXBCcFYsRUFBSXNvRCxFQUFRdndFLEdBQW1CaEksTUFDM0IwZixFQUFFKzRELFFBQVUvNEQsRUFBRSs0RCxPQUFPLEtBQU94b0QsRUFBRXVvRCxXQUFZOTRELEVBQUUrNEQsT0FBTyxHQUFLcHpDLEVBQ25EM2xCLEVBQUVnNUQsUUFBVWg1RCxFQUFFZzVELE9BQU8sS0FBT3pvRCxFQUFFdW9ELGFBQVk5NEQsRUFBRWc1RCxPQUFPLEdBQUtyekMsR0FHbkUsR0FEQXBWLEVBQUl2USxFQUFFMVMsS0FBSzhvRSxPQUNQcDJELEVBQUVnNUQsT0FBUSxDQUNaLElBQUk5RyxFQUFLbHlELEVBQUUrNEQsT0FBTyxHQUFJRSxFQUFLajVELEVBQUUrNEQsT0FBTyxHQUNoQzVqRSxFQUFLNkssRUFBRWc1RCxPQUFPLEdBQUlFLEVBQUtsNUQsRUFBRWc1RCxPQUFPLEdBQ2hDRyxHQUFNQSxFQUFLaGtFLEVBQUcsR0FBSys4RCxFQUFHLElBQU1pSCxHQUFNQSxFQUFLaGtFLEVBQUcsR0FBSys4RCxFQUFHLElBQU1pSCxFQUN4REMsR0FBTUEsRUFBS0YsRUFBRyxHQUFLRCxFQUFHLElBQU1HLEdBQU1BLEVBQUtGLEVBQUcsR0FBS0QsRUFBRyxJQUFNRyxFQUM1RDdvRCxFQUFJMi9CLEVBQU0zL0IsRUFBR2xtQixLQUFLMnZCLEtBQUttL0MsRUFBS0MsSUFDNUJ6ekMsRUFBSSxFQUFFdXNDLEVBQUcsR0FBSy84RCxFQUFHLElBQU0sR0FBSSs4RCxFQUFHLEdBQUsvOEQsRUFBRyxJQUFNLEdBQzVDMG1ELEVBQUksRUFBRW9kLEVBQUcsR0FBS0MsRUFBRyxJQUFNLEdBQUlELEVBQUcsR0FBS0MsRUFBRyxJQUFNLE9BRXpDLEtBQUlsNUQsRUFBRSs0RCxPQUNOLE9BRGNwekMsRUFBSTNsQixFQUFFKzRELE9BQU8sR0FBSWxkLEVBQUk3N0MsRUFBRSs0RCxPQUFPLEdBR2pELzRELEVBQUV3ekQsS0FBSyxRQUFTd0QsRUFBVS9tQixFQUFVMS9CLEVBQUdvVixFQUFHazJCLEdBQUk3N0MsRUFBRTIyRCxPQUFRQyxLQUcxRCxTQUFTaUIsRUFBV2ptRCxLQUFVcFQsR0FDNUIsR0FBS2xlLEtBQUswM0UsVUFBVixDQUNBLElBRXdCMXZFLEVBQUdpb0IsRUFGdkJ2USxFQUFJODNELEVBQVF4M0UsS0FBTWtlLEdBQU1vVCxNQUFNQSxHQUM5QmluRCxFQUFVam5ELEVBQU02bUQsZUFDaEI3NEQsRUFBSWk1RCxFQUFRajNFLE9BS2hCLElBSEEsR0FBY2d3QixHQUNWbWxELEdBQWFqcEIsYUFBYWlwQixHQUM5QkEsRUFBY3hrRCxZQUFXLFdBQWF3a0QsRUFBYyxPQUFTTSxHQUN4RC91RSxFQUFJLEVBQUdBLEVBQUlzWCxJQUFLdFgsRUFDbkJpb0IsRUFBSXNvRCxFQUFRdndFLEdBQ1IwWCxFQUFFKzRELFFBQVUvNEQsRUFBRSs0RCxPQUFPLEtBQU94b0QsRUFBRXVvRCxrQkFBbUI5NEQsRUFBRSs0RCxPQUM5Qy80RCxFQUFFZzVELFFBQVVoNUQsRUFBRWc1RCxPQUFPLEtBQU96b0QsRUFBRXVvRCxtQkFBbUI5NEQsRUFBRWc1RCxPQUc5RCxHQURJaDVELEVBQUVnNUQsU0FBV2g1RCxFQUFFKzRELFNBQVEvNEQsRUFBRSs0RCxPQUFTLzRELEVBQUVnNUQsY0FBZWg1RCxFQUFFZzVELFFBQ3JEaDVELEVBQUUrNEQsT0FBUS80RCxFQUFFKzRELE9BQU8sR0FBS3o0RSxLQUFLODFFLE9BQU9wTixPQUFPaHBELEVBQUUrNEQsT0FBTyxTQUl0RCxHQUZBLzRELEVBQUVwVixNQUVhLElBQVhvVixFQUFFazRELE9BQ0ozbkQsRUFBSSxHQUFRQSxFQUFHandCLE1BQ1grSixLQUFLdXdCLE1BQU1rOEMsRUFBVyxHQUFLdm1ELEVBQUUsR0FBSXVtRCxFQUFXLEdBQUt2bUQsRUFBRSxJQUFNZ25ELEdBQWEsQ0FDeEUsSUFBSTV4QyxFQUFJLEdBQU9ybEMsTUFBTTBuRCxHQUFHLGlCQUNwQnJpQixHQUFHQSxFQUFFcjNCLE1BQU1oTyxLQUFNZ0osYUF1RDdCLE9BeldBa3FFLEVBQUsvaUIsVUFBWSxTQUFTOTJCLEVBQVk4MkIsRUFBV3BwQixFQUFPelYsR0FDdEQsSUFBSW8zQixFQUFZcnZCLEVBQVdxdkIsVUFBWXJ2QixFQUFXcXZCLFlBQWNydkIsRUFDaEVxdkIsRUFBVTlqRCxTQUFTLFNBQVVpeEUsSUFDekJ4OEMsSUFBZXF2QixFQUNqQjBGLEVBQVMvMEIsRUFBWTgyQixFQUFXcHBCLEVBQU96VixHQUV2Q28zQixFQUFVeVgsWUFBWW5WLE1BQUssV0FDekJ3c0IsRUFBUXgzRSxLQUFNZ0osV0FDWHNvQixNQUFNQSxHQUNOM3BCLFFBQ0F1ckUsS0FBSyxLQUEyQixtQkFBZC9pQixFQUEyQkEsRUFBVW5pRCxNQUFNaE8sS0FBTWdKLFdBQWFtbkQsR0FDaEY3bEQsVUFLVDRvRSxFQUFLNkYsUUFBVSxTQUFTcndCLEVBQVd4NUIsRUFBR21XLEVBQUcvVCxHQUN2QzRoRCxFQUFLOEYsUUFBUXR3QixHQUFXLFdBQ3RCLElBQUl1d0IsRUFBS2o1RSxLQUFLODFFLE9BQU81bUQsRUFDakJrcEQsRUFBa0IsbUJBQU5scEQsRUFBbUJBLEVBQUVsaEIsTUFBTWhPLEtBQU1nSixXQUFha21CLEVBQzlELE9BQU8rcEQsRUFBS2IsSUFDWC95QyxFQUFHL1QsSUFHUjRoRCxFQUFLOEYsUUFBVSxTQUFTdHdCLEVBQVd4NUIsRUFBR21XLEVBQUcvVCxHQUN2QzRoRCxFQUFLL2lCLFVBQVV6SCxHQUFXLFdBQ3hCLElBQUkxckIsRUFBSXE1QyxFQUFPcm9FLE1BQU1oTyxLQUFNZ0osV0FDdkJra0QsRUFBS2x0RCxLQUFLODFFLE9BQ1ZsRSxFQUFVLE1BQUx2c0MsRUFBWStzQyxFQUFTcDFDLEdBQWtCLG1CQUFOcUksRUFBbUJBLEVBQUVyM0IsTUFBTWhPLEtBQU1nSixXQUFhcThCLEVBQ3BGeHdCLEVBQUtxNEMsRUFBR3diLE9BQU9rSixHQUNmd0csRUFBa0IsbUJBQU5scEQsRUFBbUJBLEVBQUVsaEIsTUFBTWhPLEtBQU1nSixXQUFha21CLEVBQzlELE9BQU93bkQsRUFBVS9tQixFQUFVQyxFQUFNMUMsRUFBSWtyQixHQUFLeEcsRUFBSS84RCxHQUFLbW9CLEVBQUdzNUMsS0FDckRqeEMsRUFBRy9ULElBR1I0aEQsRUFBS2dHLFlBQWMsU0FBU3h3QixFQUFXaGxDLEVBQUd1SixFQUFHcUUsR0FDM0M0aEQsRUFBSy9pQixVQUFVekgsR0FBVyxXQUN4QixPQUFPZ3VCLEVBQVUxMkUsS0FBSzgxRSxPQUFPbm1CLFVBQ2QsbUJBQU5qc0MsRUFBbUJBLEVBQUUxVixNQUFNaE8sS0FBTWdKLFdBQWEwYSxFQUN4QyxtQkFBTnVKLEVBQW1CQSxFQUFFamYsTUFBTWhPLEtBQU1nSixXQUFhaWtCLEdBQ3BEb3BELEVBQU9yb0UsTUFBTWhPLEtBQU1nSixXQUFZc3RFLEtBQ2pDLEtBQU1obEQsSUFHWDRoRCxFQUFLaUcsWUFBYyxTQUFTendCLEVBQVdobEMsRUFBR3VKLEVBQUdvWSxFQUFHL1QsR0FDOUM0aEQsRUFBSy9pQixVQUFVekgsR0FBVyxXQUN4QixJQUFJMXJCLEVBQUlxNUMsRUFBT3JvRSxNQUFNaE8sS0FBTWdKLFdBQ3ZCaW5CLEVBQUlqd0IsS0FBSzgxRSxPQUNUbEUsRUFBVSxNQUFMdnNDLEVBQVkrc0MsRUFBU3AxQyxHQUFrQixtQkFBTnFJLEVBQW1CQSxFQUFFcjNCLE1BQU1oTyxLQUFNZ0osV0FBYXE4QixFQUN4RixPQUFPcXhDLEVBQVUsYUFBbUI5RSxFQUFHLEdBQUlBLEVBQUcsSUFBSWhpQixNQUFNMy9CLEVBQUVmLEdBQUd5Z0MsVUFDOUMsbUJBQU5qc0MsR0FBb0JBLEVBQUUxVixNQUFNaE8sS0FBTWdKLFlBQWMwYSxFQUMxQyxtQkFBTnVKLEdBQW9CQSxFQUFFamYsTUFBTWhPLEtBQU1nSixZQUFjaWtCLEdBQ3REK1AsRUFBR3M1QyxLQUNManhDLEVBQUcvVCxJQW9EUnFtRCxFQUFRLzJFLFVBQVksQ0FDbEIwd0IsTUFBTyxTQUFTQSxHQUVkLE9BRElBLElBQU90eEIsS0FBSyt6RSxZQUFjemlELEdBQ3ZCdHhCLE1BRVQySCxNQUFPLFdBS0wsT0FKc0IsS0FBaEIzSCxLQUFLcXVELFNBQ1RydUQsS0FBS2dOLEtBQUswcUUsVUFBWTEzRSxLQUN0QkEsS0FBS29pQyxLQUFLLFVBRUxwaUMsTUFFVGt6RSxLQUFNLFNBQVNqeUUsRUFBS2t2RCxHQU1sQixPQUxJbndELEtBQUs4M0UsT0FBaUIsVUFBUjcyRSxJQUFpQmpCLEtBQUs4M0UsTUFBTSxHQUFLM25CLEVBQVV1WSxPQUFPMW9FLEtBQUs4M0UsTUFBTSxLQUMzRTkzRSxLQUFLeTRFLFFBQWtCLFVBQVJ4M0UsSUFBaUJqQixLQUFLeTRFLE9BQU8sR0FBS3RvQixFQUFVdVksT0FBTzFvRSxLQUFLeTRFLE9BQU8sS0FDOUV6NEUsS0FBSzA0RSxRQUFrQixVQUFSejNFLElBQWlCakIsS0FBSzA0RSxPQUFPLEdBQUt2b0IsRUFBVXVZLE9BQU8xb0UsS0FBSzA0RSxPQUFPLEtBQ2xGMTRFLEtBQUtnTixLQUFLOG9FLE9BQVMzbEIsRUFDbkJud0QsS0FBS29pQyxLQUFLLFFBQ0hwaUMsTUFFVHNLLElBQUssV0FLSCxPQUpzQixLQUFoQnRLLEtBQUtxdUQsZ0JBQ0ZydUQsS0FBS2dOLEtBQUswcUUsVUFDakIxM0UsS0FBS29pQyxLQUFLLFFBRUxwaUMsTUFFVG9pQyxLQUFNLFNBQVN0eEIsR0FDYixJQUFJK3ZDLEVBQUksR0FBTzdnRCxLQUFLZ04sTUFBTSswQyxRQUMxQiswQixFQUFVdnlFLEtBQ1J1TSxFQUNBOVEsS0FBS2dOLEtBQ0wsSUFBSThuRSxHQUFVaGtFLEVBQU0sQ0FDbEJpakUsWUFBYS96RSxLQUFLK3pFLFlBQ2xCOXBFLE9BQVFpcEUsRUFDUnBpRSxPQUNBcS9DLFVBQVdud0QsS0FBS2dOLEtBQUs4b0UsT0FDckJycUIsU0FBVXFyQixJQUVaajJCLEtBd0tOcXlCLEVBQUt5RCxXQUFhLFNBQVNockIsR0FDekIsT0FBTzNpRCxVQUFVMUgsUUFBVXExRSxFQUEwQixtQkFBTmhyQixFQUFtQkEsRUFBSSxJQUFVQSxHQUFJdW5CLEdBQVF5RCxHQUc5RnpELEVBQUs3bEUsT0FBUyxTQUFTcytDLEdBQ3JCLE9BQU8zaUQsVUFBVTFILFFBQVUrTCxFQUFzQixtQkFBTnMrQyxFQUFtQkEsRUFBSSxLQUFXQSxHQUFJdW5CLEdBQVE3bEUsR0FHM0Y2bEUsRUFBSzBELFVBQVksU0FBU2pyQixHQUN4QixPQUFPM2lELFVBQVUxSCxRQUFVczFFLEVBQXlCLG1CQUFOanJCLEVBQW1CQSxFQUFJLEtBQVdBLEdBQUl1bkIsR0FBUTBELEdBRzlGMUQsRUFBS21ELE9BQVMsU0FBUzFxQixHQUNyQixPQUFPM2lELFVBQVUxSCxRQUFVKzBFLEVBQXNCLG1CQUFOMXFCLEVBQW1CQSxFQUFJLEdBQVMsQ0FBQyxFQUFFQSxFQUFFLEdBQUcsSUFBS0EsRUFBRSxHQUFHLElBQUssRUFBRUEsRUFBRSxHQUFHLElBQUtBLEVBQUUsR0FBRyxNQUFPdW5CLEdBQVFtRCxHQUdwSW5ELEVBQUsyRCxZQUFjLFNBQVNsckIsR0FDMUIsT0FBTzNpRCxVQUFVMUgsUUFBVXUxRSxFQUFZLElBQU1sckIsRUFBRSxHQUFJa3JCLEVBQVksSUFBTWxyQixFQUFFLEdBQUl1bkIsR0FBUSxDQUFDMkQsRUFBWSxHQUFJQSxFQUFZLEtBR2xIM0QsRUFBS29ELGdCQUFrQixTQUFTM3FCLEdBQzlCLE9BQU8zaUQsVUFBVTFILFFBQVVnMUUsRUFBZ0IsR0FBRyxJQUFNM3FCLEVBQUUsR0FBRyxHQUFJMnFCLEVBQWdCLEdBQUcsSUFBTTNxQixFQUFFLEdBQUcsR0FBSTJxQixFQUFnQixHQUFHLElBQU0zcUIsRUFBRSxHQUFHLEdBQUkycUIsRUFBZ0IsR0FBRyxJQUFNM3FCLEVBQUUsR0FBRyxHQUFJdW5CLEdBQVEsQ0FBQyxDQUFDb0QsRUFBZ0IsR0FBRyxHQUFJQSxFQUFnQixHQUFHLElBQUssQ0FBQ0EsRUFBZ0IsR0FBRyxHQUFJQSxFQUFnQixHQUFHLE1BR3pRcEQsRUFBS3dELFVBQVksU0FBUy9xQixHQUN4QixPQUFPM2lELFVBQVUxSCxRQUFVbzFFLEVBQVkvcUIsRUFBR3VuQixHQUFRd0QsR0FHcER4RCxFQUFLaGxCLFNBQVcsU0FBU3ZDLEdBQ3ZCLE9BQU8zaUQsVUFBVTFILFFBQVU0c0QsR0FBWXZDLEVBQUd1bkIsR0FBUWhsQixHQUdwRGdsQixFQUFLblYsWUFBYyxTQUFTcFMsR0FDMUIsT0FBTzNpRCxVQUFVMUgsUUFBVXk4RCxFQUFjcFMsRUFBR3VuQixHQUFRblYsR0FHdERtVixFQUFLeHJCLEdBQUssV0FDUixJQUFJMW1ELEVBQVE4MUUsRUFBVXB2QixHQUFHMTVDLE1BQU04b0UsRUFBVzl0RSxXQUMxQyxPQUFPaEksSUFBVTgxRSxFQUFZNUQsRUFBT2x5RSxHQUd0Q2t5RSxFQUFLa0csY0FBZ0IsU0FBU3p0QixHQUM1QixPQUFPM2lELFVBQVUxSCxRQUFVMDFFLEdBQWtCcnJCLEdBQUtBLEdBQUtBLEVBQUd1bkIsR0FBUW5wRSxLQUFLMnZCLEtBQUtzOUMsSUFHOUU5RCxFQUFLK0QsWUFBYyxTQUFTdHJCLEdBQzFCLE9BQU8zaUQsVUFBVTFILFFBQVUyMUUsR0FBZXRyQixFQUFHdW5CLEdBQVErRCxHQUdoRC9ELEVGaFphNkIsR0FBVW4wRSxVLElHN0NmLEdBQUF5NEUsR0NBYUMsR0FBOUIsYyw0RkFBQSxTQUlXLEtBQUFsUSxNQUFnQixJQUtoQixLQUFBeEgsT0FBaUIsSUFLakIsS0FBQTJYLGdCQUEwQixHLHdLRGRwQkYsR0FBQSxRQUFVLEtBS1BHLG1CQUFoQixTQUFtQzkxRCxHQUMvQixPQUFPQSxFQUFJLEdBQU0sRUFBSUEsRUFBSUEsRUFBSUEsRUFBSSxFQUFJM1osS0FBSzhWLEtBQUssRUFBSTZELEVBQUksRUFBRyxHQUFLLEdBT25ELEdBQUErMUQsWUFBaEIsU0FBNEIvMUQsR0FDeEIsT0FBT0EsRUFBSUEsRUFBSUEsR0FPSCxHQUFBZzJELGFBQWhCLFNBQTZCaDJELEdBQ3pCLE9BQU8sRUFBSTNaLEtBQUs4VixJQUFJLEVBQUk2RCxFQUFHLElBTWYsR0FBQWkyRCxxQkFBaEIsU0FBcUNqMkQsR0FDakMsSUFBTWsyRCxFQUFNLEVBQUk3dkUsS0FBS3lrRCxHQUFNLElBRTNCLE9BQWEsSUFBTjlxQyxFQUNELEVBQ00sSUFBTkEsRUFDSSxFQUNBQSxFQUFJLElBQ0UzWixLQUFLOFYsSUFBSSxFQUFHLEdBQUs2RCxFQUFJLElBQU0zWixLQUFLbzNELEtBQUssR0FBS3o5QyxFQUFJLFFBQVVrMkQsR0FBTyxFQUNoRTd2RSxLQUFLOFYsSUFBSSxHQUFJLEdBQUs2RCxFQUFJLElBQU0zWixLQUFLbzNELEtBQUssR0FBS3o5QyxFQUFJLFFBQVVrMkQsR0FBTyxFQUFJLEdBTXZFLEdBQUFDLGNBQWhCLFNBQThCbjJELEdBQzFCLElBQU1vMkQsRUFBTSxFQUFJL3ZFLEtBQUt5a0QsR0FBTSxFQUUzQixPQUFhLElBQU45cUMsRUFDRCxFQUNNLElBQU5BLEVBQ0ksR0FDQzNaLEtBQUs4VixJQUFJLEVBQUcsR0FBSzZELEVBQUksSUFBTTNaLEtBQUtvM0QsS0FBUyxHQUFKejlDLEVBQVMsT0FBU28yRCxJQU10RCxHQUFBQyxlQUFoQixTQUErQnIyRCxHQUMzQixJQUFNbzJELEVBQU0sRUFBSS92RSxLQUFLeWtELEdBQU0sRUFFM0IsT0FBYSxJQUFOOXFDLEVBQ0QsRUFDTSxJQUFOQSxFQUNJLEVBQ0EzWixLQUFLOFYsSUFBSSxHQUFJLEdBQUs2RCxHQUFLM1osS0FBS28zRCxLQUFTLEdBQUp6OUMsRUFBUyxLQUFRbzJELEdBQU0sRyxJRTdEckQsRyxXQVlqQixXQUFZMzBELEVBQXlCNjBELEVBQTRCQyxFQUE2QmxpRSxFQUEwQjZwRCxJLDRGQUFjLFNBQ2xJNWhFLEtBQUttaUQsUUFBVWg5QixFQUNmbmxCLEtBQUtrNkUsV0FBYUYsRUFDbEJoNkUsS0FBS202RSxZQUFjRixFQUNuQmo2RSxLQUFLK1gsT0FBU0EsRUFDZC9YLEtBQUs0aEUsT0FBU0EsRUFDZDVoRSxLQUFLcVMsR0FBSzJ3RCxFQUFTb1gsVUFDbkJwWCxFQUFTb1gsWSx5Q0FHYixXQUNJLE9BQU9wNkUsS0FBS21pRCxTLElBR2hCLFNBQVduaEQsR0FDUGhCLEtBQUttaUQsUUFBVW5oRCxJLHFCQUduQixXQUNJLE9BQU9oQixLQUFLazZFLFksSUFHaEIsU0FBY2w1RSxHQUNWaEIsS0FBS2s2RSxXQUFhbDVFLEksc0JBR3RCLFdBQ0ksT0FBT2hCLEtBQUttNkUsYSxJQUdoQixTQUFlbjVFLEdBQ1hoQixLQUFLbTZFLFlBQWNuNUUsSSxzQkFRaEIsU0FBU3E1RSxHQUNaLElBQUk5cUQsRUFBaUIsR0FFckIsT0FBS3Z2QixLQUFLZzZFLFdBQWNoNkUsS0FBS2k2RSxZQUk3QjFxRCxHQUFVLElBRU52dkIsS0FBS2c2RSxZQUNMenFELEdBQVV2dkIsS0FBS2c2RSxVQUFVTSxTQUFTRCxHQUFpQixLQUduRHI2RSxLQUFLaTZFLGFBQ0wxcUQsR0FBVXZ2QixLQUFLaTZFLFdBQVdLLFNBQVNELElBR3ZDOXFELEdBQVUsSUFBTXZ2QixLQUFLcVMsR0FBSyxJQUFNclMsS0FBSzRoRSxRQWIxQnlZLEVBQWNyNkUsS0FBSytYLE9BQU8sR0FBRzFGLElBQU0sSUFBTXJTLEtBQUs0aEUsUyx3QkFxQnRELFNBQVd5WSxHQVFkLElBUEEsSUFBSTM2RSxFQUE2Qk0sS0FFN0J1dkIsRUFBUyx5QkFDVGUsRUFBUyxHQUNUaXFELEVBQVEsR0FFUkMsRUFBc0IsQ0FBQzk2RSxHQUNwQjg2RSxFQUFRbDVFLE9BQVMsSUFDcEI1QixFQUFPODZFLEVBQVF4b0MsVUFNVnR5QyxFQUFLczZFLFdBQWN0NkUsRUFBS3U2RSxXQUd6QjNwRCxHQUFVLE9BQUosT0FBVzV3QixFQUFLMlMsR0FBaEIsb0JBQThCM1MsRUFBSzJTLEdBQW5DLFNBRk5pZSxHQUFVLE9BQUosT0FBVzV3QixFQUFLMlMsR0FBaEIsb0JBQThCZ29FLEVBQWMzNkUsRUFBS3FZLE9BQU8sR0FBRzFGLElBQTNELFNBTU4zUyxFQUFLczZFLFlBQ0xPLEdBQVMsT0FBSixPQUFXNzZFLEVBQUsyUyxHQUFoQixlQUF5QjNTLEVBQUtzNkUsVUFBVTNuRSxHQUF4QyxPQUNMbW9FLEVBQVFqdUUsS0FBSzdNLEVBQUtzNkUsWUFHbEJ0NkUsRUFBS3U2RSxhQUNMTSxHQUFTLE9BQUosT0FBVzc2RSxFQUFLMlMsR0FBaEIsZUFBeUIzUyxFQUFLdTZFLFdBQVc1bkUsR0FBekMsT0FDTG1vRSxFQUFRanVFLEtBQUs3TSxFQUFLdTZFLGFBSTFCLE9BREExcUQsR0FBVWUsRUFBU2lxRCxFQUFRLFUseVNBcEdqQixHQUFBSCxVQUFZLEUsSUNQVEssRyxXQUtqQixXQUFZN3pDLEVBQTRCeGxDLEVBQWVzNUUsSSw0RkFBa0IsU0FDckUxNkUsS0FBSzRtQyxTQUFXQSxFQUNoQjVtQyxLQUFLb0IsTUFBUUEsRUFDYnBCLEtBQUswNkUsU0FBV0EsRSwwQ0FTYixTQUFNQyxFQUFnQi9ZLEdBQWMsTSxHQUN2QyxFQUFBNWhFLEtBQUs0bUMsVUFBU3I2QixLQUFkLFEsZ0RBQXNCb3VFLEVBQU0vekMsVyxnakJBQzVCLElBQU1nMEMsRUFBVSxJQUFJLEdBQVMsS0FBTTU2RSxLQUFLMDZFLFNBQVVDLEVBQU1ELFNBQVUxNkUsS0FBSzRtQyxTQUFTLytCLFFBQVMrNUQsR0FDekY1aEUsS0FBSzA2RSxTQUFTdjFELE9BQVN5MUQsRUFDdkJELEVBQU1ELFNBQVN2MUQsT0FBU3kxRCxFQUN4QjU2RSxLQUFLMDZFLFNBQVdFLE8sMHNDQ25CSEMsRyxXQU1qQixXQUFZQyxJLDRGQUFjLFNBQ3RCOTZFLEtBQUs4NkUsT0FBU0EsRSw0Q0FVbEIsU0FBUXJwRSxHQUdKLEdBRkEsYUFBcUIsRUFFakJBLEVBQUtuUSxPQUFTLEVBQ2QsT0FBTyxJQUFJLEdBQVMsS0FBSyxLQUFNLEtBQU0sR0FBSSxHQVM3QyxJQUxBLElBQUl5NUUsRUFBaUMsSUFBSW40QixJQUlyQ280QixFQUEwQixHQUNyQmh6RSxFQUFJLEVBQUdBLEVBQUl5SixFQUFLblEsT0FBUTBHLElBQUssQ0FDbEMsSUFBSW85RCxFQUFnQjN6RCxFQUFLekosR0FBRytQLE9BQzVCZ2pFLEVBQVNqMUUsSUFBSWtDLEVBQUcsSUFBSXl5RSxHQUFRLENBQUNocEUsRUFBS3pKLElBQUtBLEVBQUcsSUFBSSxHQUFTLEtBQU0sS0FBTSxLQUFNLENBQUN5SixFQUFLekosSUFBSyxLQUNwRmd6RSxFQUFZenVFLEtBQUs2NEQsR0FRckIsSUFKQSxJQUFJNlYsRUFBNkJqN0UsS0FBSzg2RSxPQUFPSSxZQUFZRixHQUdyRHB2RSxFQUFlLEVBQ1pBLEdBQVFxdkUsRUFBZTM1RSxPQUFTLEdBQUcsQ0FFdEMsSUFGc0MsRUFFbEM2NUUsRUFBbUI1NkQsSUFDbkJtRCxHQUFLLEVBQ0x1SixHQUFLLEVBSjZCLEtBS3hCOHRELEVBQVM1eUUsUUFMZSxJQUt0QywyQkFBK0IsT0FBdEIsRUFBc0IsYUFDYjR5RSxFQUFTNXlFLFFBREksSUFDM0IsMkJBQStCLEtBQXRCQyxFQUFzQixRQUN2QixFQUFJQSxHQUNBNnlFLEVBQWUsR0FBRzd5RSxHQUFLK3lFLElBQ3ZCQSxFQUFtQkYsRUFBZSxHQUFHN3lFLEdBQ3JDc2IsRUFBSSxFQUNKdUosRUFBSTdrQixJQU5XLGdDQUxPLDhCQWtCdEMsSUFBSWd6RSxFQUFXTCxFQUFTNTJFLElBQUl1ZixHQUN4QjIzRCxFQUFXTixFQUFTNTJFLElBQUk4b0IsR0FFeEJxdUQsRUFBcUJILEVBQW1CLEVBRTVDLElBQUtDLElBQWFDLEVBQ2QsS0FBTSxtQ0FJVixJQTVCc0MsRUE0QmxDRSxFQUFvQ3Y3RSxLQUFLdzdFLG1CQUFtQlAsR0E1QjFCLEtBK0J4QkYsRUFBUzV5RSxRQS9CZSxJQStCdEMsMkJBQStCLEtBQXRCLEVBQXNCLFFBQzNCLEdBQUksR0FBS3ViLEdBQUssR0FBS3VKLEVBQUcsQ0FHbEIsSUFBSXd1RCxFQUVBQSxFQURBLEVBQUkvM0QsRUFDUXUzRCxFQUFlLEdBQUd2M0QsR0FFbEJ1M0QsRUFBZXYzRCxHQUFHLEdBR2xDLElBQUlnNEQsRUFFQUEsRUFEQSxFQUFJenVELEVBQ1FndUQsRUFBZSxHQUFHaHVELEdBRWxCZ3VELEVBQWVodUQsR0FBRyxHQUlsQyxJQUFJOUQsR0FBUWl5RCxFQUFTeDBDLFNBQVN0bEMsT0FBU202RSxFQUFZSixFQUFTejBDLFNBQVN0bEMsT0FBU282RSxJQUFjTixFQUFTeDBDLFNBQVN0bEMsT0FBUys1RSxFQUFTejBDLFNBQVN0bEMsUUFDckksRUFBSW9pQixFQUNKNjNELEVBQXNCLEdBQUc3M0QsR0FBS3lGLEVBRTlCb3lELEVBQXNCNzNELEdBQUcsR0FBS3lGLElBdERKLDhCQTJEdEM4eEQsRUFBaUJNLEVBSWpCSCxFQUFTbnhCLE1BQU1veEIsRUFBVUMsR0FDekJQLEVBQVNqNEIsT0FBTzcxQixLQUNkcmhCLEVBR04sT0FBT212RSxFQUFTaGpFLFNBQVN2TSxPQUFPeEssTUFBTTA1RSxXLGdDQUdsQyxTQUFtQk8sR0FHdkIsSUFGQSxJQUFJMXJELEVBQXFCLEdBRWhCdm5CLEVBQUksRUFBR0EsRUFBSWl6RSxFQUFlMzVFLE9BQVEwRyxJQUFLLENBRzVDLElBRkEsSUFBSWc5RCxFQUFvQixHQUNwQkksRUFBTTZWLEVBQWVqekUsR0FDaEJJLEVBQUksRUFBR0EsRUFBSWc5RCxFQUFJOWpFLE9BQVE4RyxJQUM1QjQ4RCxFQUFRejRELEtBQUs2NEQsRUFBSWg5RCxJQUVyQm1uQixFQUFPaGpCLEtBQUt5NEQsR0FHaEIsT0FBT3oxQyxPLGtNQ2hJTW9zRCxHLDhLQUNqQixTQUFZcnJCLEdBR1IsSUFGQSxJQUFJL2dDLEVBQXFCLEdBRWhCdm5CLEVBQUksRUFBR0EsRUFBSXNvRCxFQUFPaHZELE9BQVEwRyxJQUFLLENBRXBDLElBREEsSUFBSW85RCxFQUFnQixHQUNYaDlELEVBQUksRUFBR0EsR0FBS0osRUFBR0ksSUFDcEJnOUQsRUFBSTc0RCxLQUFLdk0sS0FBSzQ3RSwyQkFBMkJ0ckIsRUFBT3RvRCxHQUFJc29ELEVBQU9sb0QsS0FFL0RtbkIsRUFBT2hqQixLQUFLNjRELEdBR2hCLE9BQU83MUMsSSx3Q0FHSCxTQUEyQmdMLEVBQWtCQyxHQUNqRCxHQUFJRCxFQUFPajVCLFFBQVVrNUIsRUFBT2w1QixPQUN4QixLQUFNLDhFQUlWLElBREEsSUFBSXU2RSxFQUFTLEVBQ0o3ekUsRUFBSSxFQUFHQSxFQUFJdXlCLEVBQU9qNUIsT0FBUTBHLElBQy9CNnpFLEdBQVU5eEUsS0FBSzhWLElBQUkyYSxFQUFPeHlCLEdBQUt1eUIsRUFBT3Z5QixHQUFJLEdBRzlDLE9BQU8rQixLQUFLMnZCLEtBQUttaUQsUSxrTUNsQkpDLEcsV0FBckIsYyw0RkFBQSxTQUVZLEtBQUFDLFdBQW9DLElBQUluNUIsSSw0Q0FFaEQsU0FBUWxqRCxHQUVKLE9BREFNLEtBQUsrN0UsV0FBV3ZxRSxRQUNUeFIsS0FBS2c4RSxZQUFZdDhFLEsseUJBR3BCLFNBQVlBLEdBQ2hCLElBQUtBLEVBQUtzNkUsWUFBY3Q2RSxFQUFLdTZFLFdBQ3pCLE9BQU92NkUsRUFHWCxJQUFJdThFLEVBQXFCdjhFLEVBQUtzNkUsVUFDMUJrQyxFQUFzQng4RSxFQUFLdTZFLFdBRTNCa0MsR0FBMEJGLEVBQVNqQyxZQUFjaUMsRUFBU2hDLFdBQzFEbUMsR0FBMkJGLEVBQVVsQyxZQUFja0MsRUFBVWpDLFdBRWpFLEdBQUlrQyxHQUFpQkMsRUFDakJwOEUsS0FBSys3RSxXQUFXajJFLElBQUlwRyxFQUFNQSxFQUFLa2lFLGFBQzVCLElBQUt1YSxHQUFpQkMsRUFBZ0IsQ0FDekMsSUFBSUMsRUFBbUJyOEUsS0FBS2c4RSxZQUFZQyxHQUN4Q3Y4RSxFQUFLczZFLFVBQVlxQyxFQUVqQixJQUFJQyxFQUFZdDhFLEtBQUsrN0UsV0FBVzUzRSxJQUFJazRFLEdBRXBDLFFBQWtCeDdFLElBQWR5N0UsRUFDQSxLQUFNLDZFQUdWdDhFLEtBQUsrN0UsV0FBV2oyRSxJQUFJcEcsRUFBTXFLLEtBQUtELElBQUlwSyxFQUFLa2lFLE9BQVEwYSxTQUM3QyxHQUFJSCxJQUFrQkMsRUFBZ0IsQ0FDekMsSUFBSSxFQUFtQnA4RSxLQUFLZzhFLFlBQVlFLEdBQ3hDeDhFLEVBQUtzNkUsVUFBWSxFQUNqQnQ2RSxFQUFLdTZFLFdBQWFnQyxFQUVsQixJQUFJLEVBQVlqOEUsS0FBSys3RSxXQUFXNTNFLElBQUksR0FFcEMsUUFBa0J0RCxJQUFkLEVBQ0EsS0FBTSw4RUFHVmIsS0FBSys3RSxXQUFXajJFLElBQUlwRyxFQUFNcUssS0FBS0QsSUFBSXBLLEVBQUtraUUsT0FBUSxRQUM1QyxDQUVKLElBQUkyYSxFQUF1QnY4RSxLQUFLZzhFLFlBQVlDLEdBQ3hDTyxFQUF3Qng4RSxLQUFLZzhFLFlBQVlFLEdBRXpDTyxFQUFVejhFLEtBQUsrN0UsV0FBVzUzRSxJQUFJbzRFLEdBQzlCRyxFQUFXMThFLEtBQUsrN0UsV0FBVzUzRSxJQUFJcTRFLEdBRW5DLFFBQWdCMzdFLElBQVo0N0UsUUFBc0M1N0UsSUFBYjY3RSxFQUN6QixLQUFNLDhFQUdORCxHQUFXQyxHQUNYaDlFLEVBQUtzNkUsVUFBWXVDLEVBQ2pCNzhFLEVBQUt1NkUsV0FBYXVDLElBRWxCOThFLEVBQUtzNkUsVUFBWXdDLEVBQ2pCOThFLEVBQUt1NkUsV0FBYXNDLEdBR3RCdjhFLEtBQUsrN0UsV0FBV2oyRSxJQUFJcEcsRUFBTXFLLEtBQUtELElBQUlwSyxFQUFLa2lFLE9BQVE2YSxFQUFTQyxJQUc3RCxPQUFPaDlFLE8sbXdCQ25FTWk5RSxHLHVwQkFBckIsc0MsMkJBSUlDLGlCQUEyQixJQUszQixFQUFBQyxrQkFBNEIsSUFLNUIsRUFBQUMsY0FBd0IsRUFNeEIsRUFBQUMseUJBQTJCLEVBSzNCLEVBQUFDLFNBQW1CLEdBS25CLEVBQUFDLFdBQXFCLFVBS3JCLEVBQUFDLG9CQUE4QixFQUs5QixFQUFBQyxrQkFBNEIsR0FLNUIsRUFBQUMsbUJBQTZCLFFBSzdCLEVBQUFDLFVBQW9CLFVBS3BCLEVBQUFDLG1CQUE2QixFQUs3QixFQUFBQyxrQkFBNEIsSUFTNUIsRUFBQTNzQixXQUFvQyxzQkFPcEMsRUFBQTRzQixTQUFtQixVQU9uQixFQUFBQyxTQUFtQixVQU1uQixFQUFBQyxhQUF1QixHQUt2QixFQUFBQyxtQkFBNkIsRUFLN0IsRUFBQUMsZ0JBQTBCLElBSzFCLEVBQUFDLG9CQUE4QixFQUs5QixFQUFBQyxnQkFBMEIsVUFFMUIsRUFBQUMsb0JBQWlDLElBQUlsRCxHQUFlLElBQUljLElBRXhELEVBQUFxQyxVQUF1QixJQUFJbEMsR0FZM0IsRUFBQW1DLFdBSWMsU0FBQ2o5RSxFQUFxQm9rRSxFQUFxQjhZLEdBQ3JELGtxQkFtQmMsRUFBS0MsZ0JBQWdCbjlFLEVBQU9va0UsRUFBSzhZLEdBbkIvQyw4RUFzQmMsRUFBS0UsZUFBZXA5RSxHQXRCbEMseURBdUNKLEVBQUFtOUUsZ0JBSWMsU0FBQ245RSxFQUFxQm9rRSxFQUFxQjhZLEdBQ3JELGdCQUFVQSxFQUFPMThFLEtBQU8wOEUsRUFBTzE4RSxLQUFPLElBQXRDLE9BQTJDMDhFLEVBQU8xOEUsS0FBTyxRQUFVLElBQW5FLE9BQXdFNGpFLEVBQUk1akUsS0FBTzRqRSxFQUFJNWpFLEtBQU8sS0FZbEcsRUFBQTQ4RSxlQUE4QyxTQUFDMTZELEdBQzNDLDZCQUFpQyxJQUFWQSxFQUFFMWlCLE9BQWF5N0IsUUFBUSxHQUE5QyxNQTNMUixFLFVBQTZDNjhDLElDVnhCK0UsR0FJakIsV0FBWXRtRSxFQUFrQjFGLEksNEZBQVUsU0FDcENyUyxLQUFLK1gsT0FBU0EsRUFDZC9YLEtBQUtxUyxHQUFLQSxHLGltQ0NGR2lzRSxHLHFMQVFqQixTQUFtQkMsR0FDZixPQUFPejdFLE9BQU8yUCxRQUFROHJFLEdBQWVueEUsS0FBSSxZQUFtQixjQUFqQm94RSxFQUFpQixLQUN4RCxNQUFPLENBQ0hoOUUsS0FGb0QsS0FHcERnOUUsSUFBSzEzRCxPQUFPTyxTQUFTbTNELFMsOEJBZ0JqQyxTQUNJL3NFLEVBQ0FndEUsRUFDQUMsRUFDQUMsR0FFQSxJQUFNQyxFQUFlLEdBQWtCLEdBQU9ILEdBQVcsR0FBT0MsSUFHMUQ1VSxFQURJLEtBQWlCMWtELE9BQU8sQ0FBQyxFQUFHLElBQUl5aUQsTUFBTSxDQUFDLEVBQUcsSUFDcENpQyxNQUFNNlUsR0FDaEJFLEVBQWdCLEtBQW1CejVELE9BQU8sQ0FBQyxFQUFHLElBQUl5aUQsTUFBTWlDLEdBRTlELE9BQU9obkUsT0FBTzJQLFFBQVFoQixHQUFNckUsS0FBSSwwQkFBRTB4RSxFQUFGLEtBQVUxWixFQUFWLFlBQW1CdGlFLE9BQU8yUCxRQUFRMnlELEdBQUtoNEQsS0FBSSxZQUFvQixjQUFsQjJ4RSxFQUFrQixLQUFWLzlFLEVBQVUsS0FDM0YsR0FBcUIsaUJBQVZBLEVBQW9CLENBQzNCLElBQU1nK0UsRUFBaUJILEVBQWM3OUUsR0FFckMsUUFBdUJILElBQW5CbStFLEVBQ0EsTUFBTSxJQUFJcnFELE1BQU0sZ0NBQWtDM3pCLEdBR3RELE1BQU8sQ0FDSEEsTUFBT0EsRUFDUGkrRSxNQUFPbjRELE9BQU9PLFNBQVN5M0QsR0FDdkJJLFNBQVVwNEQsT0FBT08sU0FBUzAzRCxHQUMxQnY0QyxNQUFPbzRDLEVBQWFJLElBR3hCLE9BQU9oK0UsVSwyQkFXbkIsU0FBYytXLEdBR1YsSSxNQUZNd1gsRUFBUyxJQUFJcXpCLElBRVZrOEIsRUFBUyxFQUFHQSxFQUFTL21FLEVBQU96VyxPQUFRdzlFLElBQ3pDLElBQUssSUFBSUMsRUFBUyxFQUFHQSxFQUFTaG5FLEVBQU8rbUUsR0FBUXg5RSxPQUFReTlFLElBQVUsQ0FDM0QsSUFBTUksRUFBY3BuRSxFQUFPK21FLEdBQVFDLEdBQVF2NEMsTUFFdENqWCxFQUFPeHRCLElBQUlvOUUsSUFDWjV2RCxFQUFPenBCLElBQUlxNUUsRUFBYSxJQUdMLFFBQXZCLEVBQUE1dkQsRUFBT3ByQixJQUFJZzdFLFVBQVksU0FBRTV5RSxLQUFLLENBQUN1eUUsRUFBUUMsSUFJL0MsT0FBT3h2RCxPLGtOQ25GTTZ2RCxHLFdBQ2pCLFdBQ3FCaGpDLEksNEZBQWlDLFNBQWpDLEtBQUFBLFUsK0NBR2QsU0FBV2lqQyxFQUFlQyxFQUFlQyxFQUFhQyxFQUFhcFcsRUFBZTVpQyxHQUNyRnhtQyxLQUFLbzhDLFFBQVFxakMsVUFBWXJXLEVBQ3pCcHBFLEtBQUtvOEMsUUFBUXl3QixPQUFPd1MsRUFBT0MsR0FDM0J0L0UsS0FBS284QyxRQUFRMndCLE9BQU93UyxFQUFLQyxHQUN6QngvRSxLQUFLbzhDLFFBQVFzakMsWUFBY2w1QyxFQUMzQnhtQyxLQUFLbzhDLFFBQVF1akMsYywrb0VDWUFDLEcsV0E2Q2pCLFdBQ0lDLEVBQ0E5bkUsRUFDQStuRSxFQUNBQyxHQUNnRCxXQUFoRC9rRSxFQUFnRCx1REFBckIsSUFBSTJoRSxHQUFpQixXQTdCNUMsS0FBQXFELFFBQTBFLEtBRTFFLEtBQUFDLGdCQUEwQixFQUMxQixLQUFBQyxtQkFBNkIsRUFTN0IsS0FBQUMsZUFBeUIsRUFDekIsS0FBQUMsZUFBeUIsRUFFekIsS0FBQUMscUJBQStCLEVBQy9CLEtBQUFDLG1CQUE2QixFQUU3QixLQUFBQyxlQUFzRCxDQUMxRHJ4RCxFQUFHLEVBQ0h4TCxFQUFHLEVBQ0h1SixFQUFHLEdBVUhqdEIsS0FBS3dnRixTQUFXeGdGLEtBQUt5Z0YsWUFBWXpsRSxHQUVqQ2hiLEtBQUt1ZCxRQUFVc2lFLEVBRWYsSUFBTWEsRUFBZSxJQUFJcEMsR0FDekJ0K0UsS0FBSzZsRSxLQUFPNmEsRUFBYUMsbUJBQW1CYixHQUM1QzkvRSxLQUFLNGdGLFFBQVVGLEVBQWFDLG1CQUFtQlosR0FFL0MvL0UsS0FBSytYLE9BQVMyb0UsRUFBYUcsaUJBQ3ZCOW9FLEVBQ0EvWCxLQUFLd2dGLFNBQVNoRCxTQUNkeDlFLEtBQUt3Z0YsU0FBUy9DLFNBQ2R6OUUsS0FBS3dnRixTQUFTOUMsY0FFbEIxOUUsS0FBSzhnRixlQUFpQkosRUFBYUssY0FBYy9nRixLQUFLK1gsUUFFbEQvWCxLQUFLd2dGLFNBQVNqSCxpQkFDZHY1RSxLQUFLZ2dGLFFBQVVoZ0YsS0FBS2doRixlQUd4QmhoRixLQUFLaWhGLFdBQWF4aEUsT0FBT3loRSxrQkFBb0IsRUFHN0NsaEYsS0FBS21oRixpQkFBbUIsQ0FDcEJDLEtBQU0sRUFDTkMsS0FBTSxFQUNOQyxRQUFTdGhGLEtBQUt3Z0YsU0FBU3BYLE1BQ3ZCbVksUUFBU3ZoRixLQUFLd2dGLFNBQVM1ZSxRQUczQjVoRSxLQUFLd2hGLGdCQUFrQnhoRixLQUFLbWhGLGlCQUU1Qm5oRixLQUFLeWhGLFVBQVl6aEYsS0FBS3dnRixTQUFTNUQsaUJBQy9CNThFLEtBQUswaEYsV0FBYTFoRixLQUFLd2dGLFNBQVMzRCxrQkFHaEM3OEUsS0FBS3VkLFFBQVE0b0MsVUFBWSxHQUd6Qm5tRCxLQUFLMmhGLFdBQWEsR0FBVTNoRixLQUFLdWQsU0FDNUJxMUIsT0FBTyxVQUNQcVksS0FBSyxRQUFTanJELEtBQUtpaEYsV0FBYWpoRixLQUFLd2dGLFNBQVNwWCxPQUM5Q25lLEtBQUssU0FBVWpyRCxLQUFLaWhGLFdBQWFqaEYsS0FBS3dnRixTQUFTNWUsUUFDL0MzVyxLQUFLLFFBSlEsaUJBSVdqckQsS0FBS3dnRixTQUFTcFgsTUFKekIsdUJBSTZDcHBFLEtBQUt3Z0YsU0FBUzVlLE9BSjNELE9BS2JsYSxHQUFHLGFBQWEsU0FBQ3AyQixHQUFELE9BQXVCLEVBQUtzd0QsWUFBWXR3RCxNQUN4RG8yQixHQUFHLGFBQWEsU0FBQ3AyQixHQUFELE9BQXVCLEVBQUtzd0QsWUFBWXR3RCxNQUN4RG8yQixHQUFHLFlBQVksU0FBQ3AyQixHQUFELE9BQXVCLEVBQUtzd0QsWUFBWXR3RCxNQUN2RG8yQixHQUFHLFNBQVMsU0FBQ3AyQixHQUFELE9BQXVCLEVBQUt1d0QsTUFBTXZ3RCxNQUNuRHR4QixLQUFLbzhDLFFBQVVwOEMsS0FBSzJoRixXQUFXcDlELE9BQVF1OUQsV0FBVyxNQUNsRDloRixLQUFLbzhDLFFBQVF3VCxNQUFNNXZELEtBQUtpaEYsV0FBWWpoRixLQUFLaWhGLFlBRXpDLElBQU0vTixFQUFPLEtBQ1JtRCxPQUFPLENBQUMsQ0FBQyxFQUFHLEdBQUksQ0FBQ3IyRSxLQUFLd2dGLFNBQVNwWCxNQUFPcHBFLEtBQUt3Z0YsU0FBUzVlLFVBQ3BEaVYsWUFBWSxDQUFDLElBQU0sS0FDbkJudkIsR0FBRyxRQUFRLFNBQUNwMkIsR0FDVCxFQUFLeXdELE9BQU96d0QsRUFBTTYrQixjQUkxQm53RCxLQUFLMmhGLFdBQVdwOUUsS0FBSzJ1RSxHQUVyQmx6RSxLQUFLZ2lGLHNCQUVMaGlGLEtBQUtpaUYsUyxnREFHRCxXQUFvQyxJQUF4QmpuRSxFQUF3Qiw0REFBVG5hLEVBQzNCMHVCLEVBQVMsSUFBSW90RCxHQUNqQixPQUFPNzVFLE9BQU84a0IsT0FBTzJILEVBQVF2VSxLLG1CQU0xQixXQUNIaGIsS0FBS2lpRixXLHFCQVNJLFdBQThELElBQXREQyxFQUFzRCx1REFBTCxNLCtPQUM1RDNFLEVBQW9CdjlFLEtBQUt3Z0YsU0FBU2xELGtCQUFvQnQ5RSxLQUFLd2dGLFNBQVNqRCxrQkFBb0IsRUFBSSxFQUc1RjRFLEVBQWlCLFNBQUNDLEVBQW9CQyxHQUN4QyxPQUFPLElBQUlyOUQsU0FBYyxTQUFDTyxHQUN0QixJQUFJKzhELEVBa0JKLzFCLHVCQWhCb0IsU0FBZGcyQixFQUFlQyxRQUNNM2hGLElBQW5CeWhGLElBQ0FBLEVBQWlCRSxHQUVyQixJQUFNOTBCLEVBQVU4MEIsRUFBWUYsRUFFdEJHLEVBQWdCLEVBQUtqQyxTQUFTNXZCLFdBQVdsRCxFQUFVNnZCLEdBQ3pELEVBQUswRSxPQUFPRyxFQUFVQyxFQUFhSSxHQUUvQi8wQixFQUFVNnZCLEVBQ1ZoeEIsc0JBQXNCZzJCLEdBRXRCaDlELFdBUVZtN0QsRUFBZSxJQUFJcEMsR0FFckI4RCxFQUFxQnpoRixNQUFNMEosS0FBSzFKLE1BQU1YLEtBQUs2bEUsS0FBS3ZrRSxRQUFRNkcsUUFDeER1NkUsRUFBNEIsSUFBSS9oRixNQUFNeWhGLEVBQVM5Z0YsUUFFaEMsUUFBZDRnRixHQUFxQyxTQUFkQSxHQUEwQmxpRixLQUFLc2dGLGtCLGlCQUt2RCxJQUpBdGdGLEtBQUtzZ0YsbUJBQW9CLEVBR3pCOEIsRUFBV3BpRixLQUFLMmlGLGVBQWUzaUYsS0FBSzRpRixnQkFDcEMsTUFBeUI5L0UsT0FBTzJQLFFBQVEydkUsR0FBeEMsZUFBbUQsYUFBdkM1RCxFQUF1QyxLQUFsQ3BaLEVBQWtDLEtBQy9Dc2QsRUFBZ0J0ZCxHQUFPdCtDLE9BQU9PLFNBQVNtM0QsR0FNM0MsT0FGTXFFLEVBQWlCbGlGLE1BQU0wSixLQUFLMUosTUFBTVgsS0FBSzRnRixRQUFRdC9FLFFBQVE2RyxRQUM3RG5JLEtBQUttZ0YsZUFBZ0IsRSxVQUNmZ0MsRUFBZU8sRUFBaUJHLEcsUUFDdEM3aUYsS0FBS21nRixlQUFnQixFQUVqQjJDLEVBQVksRyxLQUVFVixHLElBQWxCLDJCQUFXLEVBQWlCLFFBQ3hCVSxFQUFVdjJFLEtBQUt2TSxLQUFLK1gsT0FBTyxJLDhCQUl6QmdyRSxFQUFlLEcsS0FDSFgsRyxJQUFsQiwyQkFBVyxFQUFpQixRQUN4QlcsRUFBYXgyRSxLQUFLdk0sS0FBSzZsRSxLQUFLLEksOEJBR2hDN2xFLEtBQUs2bEUsS0FBT2tkLEVBQ1ovaUYsS0FBSytYLE9BQVMrcUUsRUFDZDlpRixLQUFLOGdGLGVBQWlCSixFQUFhSyxjQUFjL2dGLEtBQUsrWCxRLFdBR3REc3FFLEVBQXdCMWhGLE1BQU0wSixLQUFLMUosTUFBTVgsS0FBSzRnRixRQUFRdC9FLFFBQVE2RyxRQUM5RDY2RSxFQUErQixJQUFJcmlGLE1BQU0waEYsRUFBWS9nRixRQUV0QyxRQUFkNGdGLEdBQXFDLFlBQWRBLEdBQTZCbGlGLEtBQUtxZ0Ysb0IsaUJBSTFELElBSEFyZ0YsS0FBS3FnRixxQkFBc0IsRUFFM0JnQyxFQUFjcmlGLEtBQUsyaUYsZUFBZTNpRixLQUFLaWpGLGdCQUN2QyxNQUF5Qm5nRixPQUFPMlAsUUFBUTR2RSxHQUF4QyxlQUFzRCxhQUExQyxFQUEwQyxLQUFyQ2EsRUFBcUMsS0FDbERGLEVBQW1CRSxHQUFPcDhELE9BQU9PLFNBQVMsR0FNOUMsT0FGTTg3RCxFQUFjeGlGLE1BQU0wSixLQUFLMUosTUFBTVgsS0FBSzZsRSxLQUFLdmtFLFFBQVE2RyxRQUN2RG5JLEtBQUtvZ0YsZUFBZ0IsRSxVQUNmK0IsRUFBZWdCLEVBQWFILEcsUUFLbEMsSUFKQWhqRixLQUFLb2dGLGVBQWdCLEVBRWpCLEVBQVksR0FFaEIsTUFBa0IrQyxFQUFsQixlQUErQixDQUFwQixFQUFvQixLQUN2QkMsRUFBeUIsR0FERixLQUVOZixHQUZNLElBRTNCLDJCQUFXbkUsRUFBdUIsUUFDOUJrRixFQUFPNzJFLEtBQUt2TSxLQUFLK1gsT0FBTyxHQUFLbW1FLElBSE4sOEJBSzNCLEVBQVUzeEUsS0FBSzYyRSxHQUliQyxFQUFrQixHLEtBQ05oQixHLElBQWxCLDJCQUFXLEVBQW9CLFFBQzNCZ0IsRUFBZ0I5MkUsS0FBS3ZNLEtBQUs0Z0YsUUFBUSxJLDhCQUd0QzVnRixLQUFLNGdGLFFBQVV5QyxFQUNmcmpGLEtBQUsrWCxPQUFTLEVBQ2QvWCxLQUFLOGdGLGVBQWlCSixFQUFhSyxjQUFjL2dGLEtBQUsrWCxRLFFBRzFEL1gsS0FBS2lpRixTLG9GQUdELFdBQW1CLFdBQ25CcUIsRUFBWXRqRixLQUFLd2dGLFNBQVN6QyxvQkFDMUJ3RixFQUFrQnZqRixLQUFLd2dGLFNBQVN4QyxVQUloQ3dGLEVBQWdDeGpGLEtBQUs2bEUsS0FBS3o0RCxLQUFJLFNBQUNuQixFQUFJdXlFLEdBQUwsT0FBYSxJQUFJSCxHQUMvRCxFQUFLdG1FLE9BQU95bUUsR0FBS254RSxRQUFPLFNBQUFtbEIsR0FBRyxPQUFJQSxFQUFJeXNELE9BQVNoekUsRUFBR3V5RSxPQUFLcHhFLEtBQUksU0FBQXNXLEdBQUMsT0FBSUEsRUFBRTFpQixTQUFRaUwsRUFBR3V5RSxRQUc5RXgrRSxLQUFLNGlGLGVBQWlCVyxFQUFLRSxRQUFRSCxFQUFVSSxRQUFRRixJQUNyRHhqRixLQUFLMmpGLHNCQUF3QjNqRixLQUFLNGpGLGlCQUFpQjVqRixLQUFLNGlGLGdCQUd4RCxJQUFJaUIsRUFBbUM3akYsS0FBSzRnRixRQUFReHpFLEtBQ2hELFNBQUNuQixFQUFJdXlFLEdBQUwsT0FBYSxJQUFJSCxHQUNiLEVBQUt0bUUsT0FBTzNLLEtBQUksU0FBQTgxRSxHQUFHLE9BQUlBLEVBQUkxRSxHQUFLeDlFLFNBQ2hDaUwsRUFBR3V5RSxRQUlYeCtFLEtBQUtpakYsZUFBaUJNLEVBQUtFLFFBQVFILEVBQVVJLFFBQVFHLElBQ3JEN2pGLEtBQUs4akYsd0JBQTBCOWpGLEtBQUs0akYsaUJBQWlCNWpGLEtBQUtpakYsa0Isb0JBR3ZELFNBQU9jLEVBQWtCQyxHQUM1QmhrRixLQUFLd2dGLFNBQVNwWCxNQUFRMmEsRUFDdEIvakYsS0FBS3dnRixTQUFTNWUsT0FBU29pQixFQUV2QmhrRixLQUFLMmhGLFdBQVcxMkIsS0FBSyxTQUFVanJELEtBQUtpaEYsV0FBYStDLEdBQ2pEaGtGLEtBQUsyaEYsV0FBVzEyQixLQUFLLFFBQVNqckQsS0FBS2loRixXQUFhOEMsR0FDaEQvakYsS0FBSzJoRixXQUFXMTJCLEtBQUssUUFBckIsaUJBQXdDanJELEtBQUt3Z0YsU0FBU3BYLE1BQXRELHVCQUEwRXBwRSxLQUFLd2dGLFNBQVM1ZSxPQUF4RixPQUNBNWhFLEtBQUtvOEMsUUFBUXdULE1BQU01dkQsS0FBS2loRixXQUFZamhGLEtBQUtpaEYsWUFFekNqaEYsS0FBS21oRixpQkFBbUIsQ0FDcEJDLEtBQU0sRUFDTkMsS0FBTSxFQUNOQyxRQUFTeUMsRUFDVHhDLFFBQVN5QyxHQUdiaGtGLEtBQUsraEYsT0FBTy9oRixLQUFLdWdGLGtCLG1CQWdCZCxXQUlpQyxNQUhwQ3ZELEVBR29DLHVEQUhqQixHQUNuQmlILEVBRW9DLHVEQUZWLEdBQzFCbkgsRUFDb0MsdURBRFosRUFDeEJDLEVBQW9DLHVEQUFELEVBRTdCbUgsRUFBWUQsRUFFZEUsRUFBYyxHQUprQixLQU9ObmtGLEtBQUs4Z0YsZ0JBUEMsSUFPcEMsMkJBQW1ELHVCQUF2Q3Q2QyxFQUF1QyxLQUFoQ3p1QixFQUFnQyxVQUN0QkEsR0FEc0IsSUFDL0MsMkJBQWlDLHFCQUFyQixFQUFxQixLQUFoQixFQUFnQixLQUN2QnFwRSxFQUFPLEdBQU84QyxFQUFZcEgsR0FDMUJ1RSxFQUFPLEdBQU82QyxFQUFZcEgsR0FFaENxSCxHQUFlLHNDQUFKLE9BQ1FELEVBRFIscUJBQzhCQSxFQUQ5QixtQkFDa0QxOUMsRUFEbEQsZ0JBQytENDZDLEVBRC9ELGdCQUMyRUMsRUFEM0UsZ0NBTGdDLGdDQVBmLDhCQWtCcEMsSUFBTStDLEVBQWtCLElBQUlDLGdCQUFnQixFQUFHLEdBQ3pDQyxFQUFNRixFQUFnQnRDLFdBQVcsTUFFdkN3QyxFQUFLQyxLQUFMLFVBQWV2SCxFQUFmLHFEQU9BLElBSkEsSUFBTXQ1RCxFQUFJd2dFLEVBQVlsa0YsS0FBSzRnRixRQUFRdC9FLE9BQVN3N0UsR0FBaUI5OEUsS0FBSzRnRixRQUFRdC9FLE9BQVMsR0FBS3k3RSxFQUNsRnlILEVBQWF6NkUsS0FBS21vQixLQUFLZ3lELEVBQVlsSCxHQUFZLEVBQUcsR0FFcER5SCxFQUF1Qi9nRSxFQUNsQjBoRCxFQUFNLEVBQUdBLEVBQU1wbEUsS0FBSzZsRSxLQUFLdmtFLE9BQVE4akUsSUFBTyxDQUM3QyxJQUFNLEdBQUs4ZSxFQUFZcEgsR0FBaUIxWCxFQUFNb2YsRUFFOUNMLEdBQWUsb0RBQUosT0FFRXpnRSxFQUZGLHNDQUdFLEVBSEYsOENBSVVzNUQsRUFKViw4TkFTRGg5RSxLQUFLNmxFLEtBQUtULEdBQUs1akUsS0FUZCwyQ0FjWCxJQUFNa2pGLEVBQXdCSixFQUFLSyxZQUFZM2tGLEtBQUs2bEUsS0FBS1QsR0FBSzVqRSxNQUFNNG5FLE1BQVExbEQsRUFDeEVnaEUsRUFBZ0JELElBQ2hCQSxFQUFlQyxHQU92QixJQUhBLElBQU16M0QsRUFBSWkzRCxFQUFZbGtGLEtBQUs2bEUsS0FBS3ZrRSxPQUFTdzdFLEdBQWlCOThFLEtBQUs2bEUsS0FBS3ZrRSxPQUFTLEdBQUt5N0UsRUFDOUU2SCxFQUF3QjMzRCxFQUVuQmkyRCxFQUFNLEVBQUdBLEVBQU1sakYsS0FBSzRnRixRQUFRdC9FLE9BQVE0aEYsSUFBTyxDQUNoRCxJQUFNLEdBQUtnQixFQUFZcEgsR0FBaUJvRyxFQUFNc0IsRUFFOUNMLEdBQWUsb0RBQUosT0FFRSxFQUZGLHNDQUdFbDNELEVBSEYsOENBSVUrdkQsRUFKVixxSUFPcUIsRUFQckIsYUFPMkIvdkQsRUFQM0IsMElBVURqdEIsS0FBSzRnRixRQUFRc0MsR0FBSzFoRixLQVZqQiwyQ0FjWCxJQUFNLEVBQXdCOGlGLEVBQUtLLFlBQVkza0YsS0FBSzRnRixRQUFRc0MsR0FBSzFoRixNQUFNNG5FLE1BQVFuOEMsRUFDM0UsRUFBZ0IyM0QsSUFDaEJBLEVBQWdCLEdBSXhCLDZFQUNxRDc2RSxLQUFLOGpCLEtBQUs0MkQsR0FEL0QscUJBQ3lGMTZFLEtBQUs4akIsS0FBSysyRCxHQURuRywrQkFFVVQsRUFGVixvQyw0QkFZSSxTQUFlekosR0FDbkIsT0FBT0EsRUFBUzNpRSxPQUFPM0ssS0FBSSxTQUFBeTNFLEdBQUksT0FBSUEsRUFBS3h5RSxRLGtDQU9wQyxXQUdnQyxJQUZwQ3l5RSxFQUVvQyx1REFGekI5a0YsS0FBS3doRixnQkFDaEJDLEVBQ29DLHVEQURoQnpoRixLQUFLeWhGLFVBQ3pCQyxFQUFvQyx1REFBZjFoRixLQUFLMGhGLFdBRXBCOUQsRUFBa0I1OUUsS0FBSytrRiwyQkFFdkJDLEVBQXFCRixFQUFTeEQsUUFDaEN3RCxFQUFTMUQsS0FDVHhELEVBQ0E1OUUsS0FBSzRnRixRQUFRdC9FLE9BQVN0QixLQUFLd2dGLFNBQVMxRCxjQUNwQzJFLEVBQ0V3RCxFQUFzQkgsRUFBU3ZELFFBQ2pDdUQsRUFBU3pELEtBQ1R6RCxFQUNBNTlFLEtBQUs2bEUsS0FBS3ZrRSxPQUFTdEIsS0FBS3dnRixTQUFTMUQsY0FDakM0RSxFQUdBd0QsRUFBY243RSxLQUFLbW9CLElBQUksRUFBRzh5RCxFQUFxQmhsRixLQUFLNGdGLFFBQVF0L0UsUUFDNUQ2akYsRUFBZXA3RSxLQUFLbW9CLElBQUksRUFBRyt5RCxFQUFzQmpsRixLQUFLNmxFLEtBQUt2a0UsUUFFL0QsT0FBT3lJLEtBQUtELElBQUlvN0UsRUFBYUMsSyxzQ0FHekIsV0FDSixPQUFJbmxGLEtBQUt3Z0YsU0FBUzdDLGtCQUNQMzlFLEtBQUt3Z0YsU0FBUzVDLGdCQUFrQjU5RSxLQUFLdWdGLGVBQWVyeEQsRUFFcEQsSSwrQkFJUCxXQUdnQyxJQUZwQzQxRCxFQUVvQyx1REFGekI5a0YsS0FBS3doRixnQkFDaEJDLEVBQ29DLHVEQURoQnpoRixLQUFLeWhGLFVBQ3pCQyxFQUFvQyx1REFBZjFoRixLQUFLMGhGLFdBRTFCLE9BQU9vRCxFQUFTMUQsS0FDWnBoRixLQUFLK2tGLDJCQUNML2tGLEtBQUtvbEYscUJBQXFCTixFQUFVckQsRUFBV0MsR0FBYzFoRixLQUFLNGdGLFFBQVF0L0UsT0FDMUV0QixLQUFLd2dGLFNBQVMxRCxlQUFpQjk4RSxLQUFLNGdGLFFBQVF0L0UsT0FBUyxHQUNyRHRCLEtBQUt3Z0YsU0FBU3pELDJCLCtCQUdkLFdBR2dDLElBRnBDK0gsRUFFb0MsdURBRnpCOWtGLEtBQUt3aEYsZ0JBQ2hCQyxFQUNvQyx1REFEaEJ6aEYsS0FBS3loRixVQUN6QkMsRUFBb0MsdURBQWYxaEYsS0FBSzBoRixXQUUxQixPQUFPb0QsRUFBU3pELEtBQ1pyaEYsS0FBSytrRiwyQkFDTC9rRixLQUFLb2xGLHFCQUFxQk4sRUFBVXJELEVBQVdDLEdBQWMxaEYsS0FBSzZsRSxLQUFLdmtFLE9BQ3ZFdEIsS0FBS3dnRixTQUFTMUQsZUFBaUI5OEUsS0FBSzZsRSxLQUFLdmtFLE9BQVMsR0FDbER0QixLQUFLd2dGLFNBQVN6RCwyQixvQkFHZCxZQUF1RCxJQUE5Qzd0RCxFQUE4QyxFQUE5Q0EsRUFBR3hMLEVBQTJDLEVBQTNDQSxFQUFHdUosRUFBd0MsRUFBeENBLEVBQ25CanRCLEtBQUt1Z0YsZUFBaUIsQ0FBRXJ4RCxJQUFHeEwsSUFBR3VKLEtBRTlCLElBQU1vNEQsRUFBZ0IzaEUsRUFBSTFqQixLQUFLc2xGLGtCQUMzQnRsRixLQUFLbWhGLGlCQUNMbmhGLEtBQUt3Z0YsU0FBUzVELGlCQUNkNThFLEtBQUt3Z0YsU0FBUzNELG1CQUNkM3RELEVBRUVxMkQsRUFBZ0J0NEQsRUFBSWp0QixLQUFLd2xGLGtCQUMzQnhsRixLQUFLbWhGLGlCQUNMbmhGLEtBQUt3Z0YsU0FBUzVELGlCQUNkNThFLEtBQUt3Z0YsU0FBUzNELG1CQUNkM3RELEVBRUV1MkQsRUFBK0MsU0FBQy9oRSxFQUFHdUosR0FDckQsT0FBSXZKLEVBQUl1SixFQUNHQSxFQUNBaUMsR0FBSyxFQUNMbmxCLEtBQUtELElBQUk0WixFQUFHdUosR0FFWmxqQixLQUFLbW9CLElBQUl4TyxFQUFHdUosSUFLM0JqdEIsS0FBS3doRixnQkFBa0IsQ0FDbkJKLEtBQU0xOUQsRUFBSTFqQixLQUFLbWhGLGlCQUFpQkMsS0FBT2x5RCxFQUN2Q215RCxLQUFNcDBELEVBQUlqdEIsS0FBS21oRixpQkFBaUJFLEtBQU9ueUQsRUFDdkNveUQsUUFBU21FLEVBQVcvaEUsRUFBSTFqQixLQUFLbWhGLGlCQUFpQkcsUUFBVXB5RCxFQUFHbHZCLEtBQUttaEYsaUJBQWlCRyxTQUNqRkMsUUFBU2tFLEVBQVd4NEQsRUFBSWp0QixLQUFLbWhGLGlCQUFpQkksUUFBVXJ5RCxFQUFHbHZCLEtBQUttaEYsaUJBQWlCSSxVQUdyRnZoRixLQUFLeWhGLFVBQVl6aEYsS0FBS3doRixnQkFBZ0JGLFFBQVUrRCxFQUNoRHJsRixLQUFLMGhGLFdBQWExaEYsS0FBS3doRixnQkFBZ0JELFFBQVVnRSxFQUVqRHZsRixLQUFLaWlGLFcsb0JBY0QsV0FHc0IsSUFGMUJ5RCxFQUUwQix1REFGRS9rRixNQUFNMEosS0FBSzFKLE1BQU1YLEtBQUs2bEUsS0FBS3ZrRSxRQUFRNkcsUUFDL0R3OUUsRUFDMEIsdURBREtobEYsTUFBTTBKLEtBQUsxSixNQUFNWCxLQUFLNGdGLFFBQVF0L0UsUUFBUTZHLFFBQ3JFczZFLEVBQTBCLHdEQUFELEVBRXpCemlGLEtBQUs0bEYsV0FBV0YsRUFBaUJDLEVBQW9CbEQsR0FDckR6aUYsS0FBSzZsRixnQkFBZ0JILEVBQWlCakQsR0FDdEN6aUYsS0FBSzhsRixtQkFBbUJILEVBQW9CbEQsR0FDNUN6aUYsS0FBSytsRixpQkFBaUJ0RCxLLHdCQUdsQixTQUNKaUQsRUFDQUMsRUFDQWxELElBRXVCLElBQW5CQSxJQUNBQSxFQUFnQixHQUdwQixJQUFJeUMsRUFBY2xsRixLQUFLb2xGLHVCQUNqQnhILEVBQTBCNTlFLEtBQUsra0YsMkJBRXJDL2tGLEtBQUtvOEMsUUFBUTRwQyxVQUFVLEVBQUcsRUFBR2htRixLQUFLd2dGLFNBQVNwWCxNQUFPcHBFLEtBQUt3Z0YsU0FBUzVlLFFBVDNDLFdBV1M1aEUsS0FBSzhnRixnQkFYZCxJQVdyQiwyQkFBbUQscUJBQXZDdDZDLEVBQXVDLEtBQWhDenVCLEVBQWdDLEtBQy9DL1gsS0FBS284QyxRQUFRNnBDLFlBQ2JqbUYsS0FBS284QyxRQUFROHBDLFVBQVkxL0MsRUFGc0IsV0FJdEJ6dUIsR0FKc0IsSUFJL0MsMkJBQWlDLHFCQUFyQnF0RCxFQUFxQixLQUFoQjhkLEVBQWdCLEtBRXZCaUQsRUFBWW5tRixLQUFLd2hGLGdCQUFnQkosS0FBT3hELEVBQWtCc0YsR0FBT2dDLEVBQWNsbEYsS0FBS3dnRixTQUFTMUQsZUFDN0ZzSixFQUFZcG1GLEtBQUt3aEYsZ0JBQWdCSCxLQUFPekQsRUFBa0J4WSxHQUFPOGYsRUFBY2xsRixLQUFLd2dGLFNBQVMxRCxlQUc3RnVKLEVBQVVybUYsS0FBS3doRixnQkFBZ0JKLEtBQU94RCxFQUFrQitILEVBQW1CekMsSUFBUWdDLEVBQWNsbEYsS0FBS3dnRixTQUFTMUQsZUFDL0d3SixFQUFVdG1GLEtBQUt3aEYsZ0JBQWdCSCxLQUFPekQsRUFBa0I4SCxFQUFnQnRnQixJQUFROGYsRUFBY2xsRixLQUFLd2dGLFNBQVMxRCxlQUs5R3lKLEVBQWNKLEdBSEVFLEVBQVVGLEdBR2MxRCxFQUN4QytELEVBQWNKLEdBSEVFLEVBQVVGLEdBR2MzRCxFQUN4Q2dFLEVBQWlCRixHQUFlckIsRUFBY2xsRixLQUFLd2dGLFNBQVMxRCxlQUM1RDRKLEVBQWlCRixHQUFldEIsRUFBY2xsRixLQUFLd2dGLFNBQVMxRCxlQUc1RDJKLEVBQWlCLEdBQUtGLEVBQWN2bUYsS0FBS3dnRixTQUFTcFgsT0FJbERzZCxFQUFpQixHQUFLRixFQUFjeG1GLEtBQUt3Z0YsU0FBUzVlLFNBSWxENWhFLEtBQUt3Z0YsU0FBU3RELG9CQUFzQjlYLEdBQU9wbEUsS0FBS2lnRixnQkFBa0JpRCxHQUFPbGpGLEtBQUtrZ0Ysb0JBRTlFbGdGLEtBQUtvOEMsUUFBUXVxQyxPQUNiM21GLEtBQUtvOEMsUUFBUThwQyxVQUFZbG1GLEtBQUt3Z0YsU0FBUy9DLFNBQ3ZDejlFLEtBQUtvOEMsUUFBUXdxQyxTQUNUTCxFQUFjdm1GLEtBQUt3Z0YsU0FBUzFELGNBQzVCMEosRUFBY3htRixLQUFLd2dGLFNBQVMxRCxjQUM1Qm9JLEVBQWMsRUFBSWxsRixLQUFLd2dGLFNBQVMxRCxjQUNoQ29JLEVBQWMsRUFBSWxsRixLQUFLd2dGLFNBQVMxRCxlQUVwQzk4RSxLQUFLbzhDLFFBQVF5cUMsV0FHakI3bUYsS0FBS284QyxRQUFRd3FDLFNBQ1RMLEVBQ0FDLEVBQ0F0QixFQUNBQSxLQS9DdUMsOEJBbUQvQ2xsRixLQUFLbzhDLFFBQVEwd0IsYUE5REksaUMsNkJBeUVqQixTQUFnQm5nRCxFQUFleThDLEdBR25DLEdBRnNCcHBFLEtBQUtvOEMsUUFBUXVvQyxZQUFZaDRELEdBRTdCeThDLE1BQVFBLEVBQU8sQ0FHN0IsSUFGQSxJQUFJcGhFLEVBQUkya0IsRUFBTXJyQixPQUNWaXVCLEVBQVM1QyxFQUFNbTZELE9BQU8sRUFBRzkrRSxHQUFLLE1BQzNCaEksS0FBS284QyxRQUFRdW9DLFlBQVlwMUQsR0FBUTY1QyxNQUFRQSxHQUFTcGhFLEVBQUksR0FDekRBLElBQ0F1bkIsRUFBUzVDLEVBQU1tNkQsT0FBTyxFQUFHOStFLEdBQUssTUFHbEMsT0FBVSxJQUFOQSxFQUNPLEdBR0p1bkIsRUFFUCxPQUFPNUMsSSw2QkFJUCxTQUNKKzRELEVBQ0FqRCxJQUV1QixJQUFuQkEsSUFDQUEsRUFBZ0IsR0FHcEIsSUFBTXlDLEVBQWNsbEYsS0FBS29sRix1QkFDbkJ4SCxFQUFrQjU5RSxLQUFLK2tGLDJCQUd2QmdDLEVBQW1CaDlFLEtBQUttb0IsSUFBSW5vQixLQUFLMFUsT0FBT3plLEtBQUt3Z0YsU0FBU3hELFNBQVcsS0FBT2tJLEVBQWNsbEYsS0FBS3dnRixTQUFTMUQsZ0JBQWlCLEdBRXJIa0ssRUFBWWhuRixLQUFLc2xGLG9CQUNuQmQsRUFBYXo2RSxLQUFLbW9CLEtBQUtnekQsRUFBY2xsRixLQUFLd2dGLFNBQVN4RCxVQUFZLEVBQUcsR0FFdEVoOUUsS0FBS284QyxRQUFRdXFDLE9BRWIzbUYsS0FBS284QyxRQUFROHBDLFVBQVlsbUYsS0FBS3dnRixTQUFTdkQsV0FDdkNqOUUsS0FBS284QyxRQUFRNnFDLGFBQWUsTUFDNUJqbkYsS0FBS284QyxRQUFROHFDLFVBQVksUUFDekJsbkYsS0FBS284QyxRQUFRbW9DLEtBQWIsVUFBdUJ2a0YsS0FBS3dnRixTQUFTeEQsU0FBckMsd0JBQ0EsSUFBSyxJQUFJaDFFLEVBQUksRUFBR0EsRUFBSWhJLEtBQUs2bEUsS0FBS3ZrRSxPQUFRMEcsR0FBSysrRSxFQUFVLENBQ2pELElBQU0zaEIsRUFBTXBsRSxLQUFLNmxFLEtBQUs3OUQsR0FFbEJoSSxLQUFLd2dGLFNBQVN0RCxvQkFBc0JsMUUsR0FBS2hJLEtBQUtpZ0YsaUJBQzlDamdGLEtBQUtvOEMsUUFBUXVxQyxPQUNiM21GLEtBQUtvOEMsUUFBUThwQyxVQUFZbG1GLEtBQUt3Z0YsU0FBU3BELG1CQUN2Q3A5RSxLQUFLbzhDLFFBQVFtb0MsS0FBYixVQUF1QnZrRixLQUFLd2dGLFNBQVNyRCxrQkFBckMscURBQ0FxSCxFQUFhejZFLEtBQUttb0IsS0FBS2d6RCxFQUFjbGxGLEtBQUt3Z0YsU0FBU3JELG1CQUFxQixFQUFHLElBRy9FLElBQU1nSyxFQUFZbm5GLEtBQUt3aEYsZ0JBQWdCSCxLQUFPekQsR0FBbUJzSCxFQUFjbGxGLEtBQUt3Z0YsU0FBUzFELGVBQWlCOTBFLEVBQUl3OEUsRUFJNUc0QyxFQUFXRCxHQUhKbm5GLEtBQUt3aEYsZ0JBQWdCSCxLQUFPekQsR0FBbUJzSCxFQUFjbGxGLEtBQUt3Z0YsU0FBUzFELGVBQWlCNEksRUFBZ0IxOUUsR0FBS3c4RSxFQUVwRzJDLEdBQ2dCMUUsRUFFMUN6aUYsS0FBS284QyxRQUFRaXJDLFNBQ1RybkYsS0FBS3NuRixnQkFBZ0JsaUIsRUFBSTVqRSxLQUFNeEIsS0FBS3loRixXQUNwQ3VGLEVBQ0FJLEdBR0FwbkYsS0FBS3dnRixTQUFTdEQsb0JBQXNCbDFFLEdBQUtoSSxLQUFLaWdGLGdCQUM5Q2pnRixLQUFLbzhDLFFBQVF5cUMsVUFJckI3bUYsS0FBS284QyxRQUFReXFDLFksZ0NBR1QsU0FDSmxCLEVBQ0FsRCxJQUV1QixJQUFuQkEsSUFDQUEsRUFBZ0IsR0FHcEIsSUFBSXlDLEVBQWNsbEYsS0FBS29sRix1QkFDakJ4SCxFQUFrQjU5RSxLQUFLK2tGLDJCQUd6QmdDLEVBQW1CaDlFLEtBQUttb0IsSUFBSW5vQixLQUFLMFUsT0FBT3plLEtBQUt3Z0YsU0FBU3hELFNBQVcsS0FBT2tJLEVBQWNsbEYsS0FBS3dnRixTQUFTMUQsZ0JBQWlCLEdBRXJIa0ssRUFBWWhuRixLQUFLd2xGLG9CQUNqQmhCLEVBQWF6NkUsS0FBS21vQixLQUFLZ3pELEVBQWNsbEYsS0FBS3dnRixTQUFTeEQsVUFBWSxFQUFHLEdBRXRFaDlFLEtBQUtvOEMsUUFBUXVxQyxPQUNiM21GLEtBQUtvOEMsUUFBUXdTLE9BQVEsR0FBSzdrRCxLQUFLeWtELEdBQU0sS0FDckN4dUQsS0FBS284QyxRQUFROHBDLFVBQVlsbUYsS0FBS3dnRixTQUFTdkQsV0FDdkNqOUUsS0FBS284QyxRQUFRNnFDLGFBQWUsU0FDNUJqbkYsS0FBS284QyxRQUFROHFDLFVBQVksUUFDekJsbkYsS0FBS284QyxRQUFRbW9DLEtBQWIsVUFBdUJ2a0YsS0FBS3dnRixTQUFTeEQsU0FBckMsd0JBQ0EsSUFBSyxJQUFJaDFFLEVBQUksRUFBR0EsRUFBSWhJLEtBQUs0Z0YsUUFBUXQvRSxPQUFRMEcsR0FBSysrRSxFQUFVLENBQ3BELElBQU03RCxFQUFNbGpGLEtBQUs0Z0YsUUFBUTU0RSxHQUVyQmhJLEtBQUt3Z0YsU0FBU3RELG9CQUFzQmwxRSxHQUFLaEksS0FBS2tnRixvQkFDOUNsZ0YsS0FBS284QyxRQUFRdXFDLE9BQ2IzbUYsS0FBS284QyxRQUFROHBDLFVBQVlsbUYsS0FBS3dnRixTQUFTcEQsbUJBQ3ZDcDlFLEtBQUtvOEMsUUFBUW1vQyxLQUFiLFVBQXVCdmtGLEtBQUt3Z0YsU0FBU3JELGtCQUFyQyxxREFDQXFILEVBQWF6NkUsS0FBS21vQixLQUFLZ3pELEVBQWNsbEYsS0FBS3dnRixTQUFTckQsbUJBQXFCLEVBQUcsSUFHL0UsSUFBTW9LLElBQWN2bkYsS0FBS3doRixnQkFBZ0JKLEtBQU94RCxHQUFtQnNILEVBQWNsbEYsS0FBS3dnRixTQUFTMUQsZUFBaUI5MEUsRUFBSXc4RSxHQUk5R2dELEVBQVdELEtBSEZ2bkYsS0FBS3doRixnQkFBZ0JKLEtBQU94RCxHQUFtQnNILEVBQWNsbEYsS0FBS3dnRixTQUFTMUQsZUFBaUI2SSxFQUFtQjM5RSxHQUFLdzhFLEdBRXpHK0MsR0FDZ0I5RSxFQUcxQ3ppRixLQUFLbzhDLFFBQVFpckMsU0FDVHJuRixLQUFLc25GLGdCQUFnQnBFLEVBQUkxaEYsS0FBTXhCLEtBQUswaEYsWUFDcENzRixFQUNBUSxHQUdBeG5GLEtBQUt3Z0YsU0FBU3RELG9CQUFzQmwxRSxHQUFLaEksS0FBS2tnRixtQkFDOUNsZ0YsS0FBS284QyxRQUFReXFDLFVBSXJCN21GLEtBQUtvOEMsUUFBUXlxQyxZLDhCQVlULFNBQWlCbm5GLEdBQ3JCLElBQU0rbkYsRUFBOEIsR0FFOUJ2MkQsRUFBOEIsR0FJcEMsSUFGQUEsRUFBTTNrQixLQUFLLENBQUM3TSxFQUFNLElBRVh3eEIsRUFBTTV2QixPQUFTLEdBQUcsVUFDcUI0dkIsRUFBTThnQixRQUQzQixHQUNkenRCLEVBRGMsS0FDUm5ILEVBRFEsS0FFakJxcUUsRUFBY25tRixRQUFVOGIsR0FDeEJxcUUsRUFBY2w3RSxLQUFLLElBRXZCazdFLEVBQWNycUUsR0FBTzdRLEtBQUtnWSxHQUV0QkEsRUFBS3kxRCxXQUNMOW9ELEVBQU0za0IsS0FBSyxDQUFDZ1ksRUFBS3kxRCxVQUFXNThELEVBQVEsSUFHcENtSCxFQUFLMDFELFlBQ0wvb0QsRUFBTTNrQixLQUFLLENBQUNnWSxFQUFLMDFELFdBQVk3OEQsRUFBUSxJQUk3QyxPQUFPcXFFLEksOEJBR0gsU0FBaUJoRixHQUNqQnppRixLQUFLd2dGLFNBQVM3QyxvQkFDZDM5RSxLQUFLMG5GLDJCQUEyQmpGLEdBQ2hDemlGLEtBQUsybkYseUJBQXlCbEYsTSxvQ0FJOUIsU0FBdUJtRixFQUFvQkMsRUFBd0JwRixHQUN2RSxPQUF1QixJQUFuQkEsR0FBeUJvRixFQUlmLEdBQWtCLEdBQU8sV0FBWSxHQUFPN25GLEtBQUt3Z0YsU0FBUzFDLGlCQUNqRWx1QixDQUFNNnlCLEdBSkZtRixFQUFZNW5GLEtBQUt3Z0YsU0FBUzFDLGdCQUFrQixZLHNDQU9uRCxTQUF5QjJFLEdBQzdCemlGLEtBQUtvOEMsUUFBUXVxQyxPQWViLElBYkEsSUFBTW1CLEVBQXVCOW5GLEtBQUsrbkYsdUJBQXVCL25GLEtBQUtzZ0Ysa0JBQW1CdGdGLEtBQUttZ0YsY0FBZXNDLEdBRy9GeUMsRUFBc0JsbEYsS0FBS29sRix1QkFDM0J4SCxFQUEwQjU5RSxLQUFLd2dGLFNBQVM1QyxnQkFBa0I1OUUsS0FBS3VnRixlQUFlcnhELEVBRTlFODRELEVBQTZCLElBQUk1SSxHQUFtQnAvRSxLQUFLbzhDLFNBRXpENnJDLEVBQTZCam9GLEtBQUt3aEYsZ0JBQWdCSCxLQUFPekQsRUFBa0JzSCxFQUFjLEVBR3pGZ0QsRUFBK0MsSUFBSXRsQyxJQUNuRDhpQyxFQUFrQjFsRixLQUFLMmlGLGVBQWUzaUYsS0FBSzRpRixnQkFDeEM1NkUsRUFBSSxFQUFHQSxFQUFJMDlFLEVBQWdCcGtGLE9BQVEwRyxJQUN4Q2tnRixFQUFjcGlGLElBQ1Y0L0UsRUFBZ0IxOUUsR0FDaEIsQ0FDSWhJLEtBQUt3aEYsZ0JBQWdCSixLQUFPeEQsRUFDNUI1MUUsR0FBS2s5RSxFQUFjbGxGLEtBQUt3Z0YsU0FBUzFELGVBQWlCbUwsSUFTOUQsSUFIQSxJQUFNRSxFQUF5QnZLLEVBQWtCNTlFLEtBQUs2bEUsS0FBS3ZrRSxPQUN2RDhtRixFQUEyQnBvRixLQUFLd2hGLGdCQUFnQkosS0FBT3hELEVBQWtCdUssRUFFcEVFLEVBQWVyb0YsS0FBSzJqRixzQkFBc0JyaUYsT0FBUyxFQUFHK21GLEVBQWUsRUFBR0EsSUFFN0UsSUFBSyxJQUFJLEVBQUksRUFBRyxFQUFJcm9GLEtBQUsyakYsc0JBQXNCMEUsR0FBYy9tRixPQUFRLEdBQUssRUFBRyxDQUN6RSxJQUFNMDRFLEVBQVloNkUsS0FBSzJqRixzQkFBc0IwRSxHQUFjLEdBQ3JEcE8sRUFBYWo2RSxLQUFLMmpGLHNCQUFzQjBFLEdBQWMsRUFBSSxHQUMxRGxqRSxFQUFTNjBELEVBQVU3MEQsT0FIZ0QsS0FLbEQraUUsRUFBYy9qRixJQUFJNjFFLEVBQVUzbkUsSUFMc0IsR0FLbEVpMkUsRUFMa0UsS0FLM0RDLEVBTDJELFVBTWhETCxFQUFjL2pGLElBQUk4MUUsRUFBVzVuRSxJQU5tQixHQU1sRW0yRSxFQU5rRSxLQU0xREMsRUFOMEQsS0FtQnpFLEdBWEF6b0YsS0FBS284QyxRQUFRNnBDLFlBRWIrQixFQUFhVSxXQUFXSixFQUFPQyxFQUFPSCxFQUFrQkcsRUFBT3ZvRixLQUFLd2dGLFNBQVMzQyxvQkFBcUJpSyxHQUVsR0UsRUFBYVUsV0FBV0YsRUFBUUMsRUFBUUwsRUFBa0JLLEVBQVF6b0YsS0FBS3dnRixTQUFTM0Msb0JBQXFCaUssR0FHckdFLEVBQWFVLFdBQVdOLEVBQWtCRyxFQUFPSCxFQUFrQkssRUFBUXpvRixLQUFLd2dGLFNBQVMzQyxvQkFBcUJpSyxHQUM5RzluRixLQUFLbzhDLFFBQVEwd0IsWUFHVDNuRCxFQUFRLENBQ1IsSUFBTXdqRSxFQUFxQjUrRSxLQUFLRCxJQUFJeStFLEVBQU9FLEdBQVUxK0UsS0FBSzJMLElBQUk2eUUsRUFBUUUsR0FBVSxFQUNoRlAsRUFBY3BpRixJQUFJcWYsRUFBTzlTLEdBQUksQ0FBQysxRSxFQUFrQk8sSUFHcERQLEdBQW9CRCxFQUk1QixJQUFLbm9GLEtBQUtzZ0Ysa0JBQW1CLENBQ3pCdGdGLEtBQUtvOEMsUUFBUXdTLFFBQVMsR0FBSzdrRCxLQUFLeWtELEdBQU0sS0FDdEN4dUQsS0FBS284QyxRQUFROHBDLFVBQVlsbUYsS0FBS3dnRixTQUFTdkQsV0FDdkMsSUFBTUQsRUFBVyxHQUFLaDlFLEtBQUt1Z0YsZUFBZXJ4RCxFQUMxQ2x2QixLQUFLbzhDLFFBQVFtb0MsS0FBYixVQUF1QnZILEVBQXZCLHFEQUNBLElBQU15RSxFQUFZemhGLEtBQUtvOEMsUUFBUXVvQyxZQUFZLG9CQUFvQnZiLE1BQy9EcHBFLEtBQUtvOEMsUUFBUWlyQyxTQUNULHFCQUNFcm5GLEtBQUt3aEYsZ0JBQWdCSCxLQUFPekQsRUFBbUI1OUUsS0FBSzZsRSxLQUFLdmtFLFFBQVU0akYsRUFBY2xsRixLQUFLd2dGLFNBQVMxRCxlQUFrQixHQUFLMkUsRUFBWSxFQUNwSXpoRixLQUFLd2hGLGdCQUFnQkosS0FBT3hELEVBQWtCLEVBQUlaLEVBQVcsR0FJckVoOUUsS0FBS284QyxRQUFReXFDLFksd0NBR1QsU0FBMkJwRSxHQUMvQnppRixLQUFLbzhDLFFBQVF1cUMsT0FlYixJQWJBLElBQU1tQixFQUF1QjluRixLQUFLK25GLHVCQUF1Qi9uRixLQUFLcWdGLG9CQUFxQnJnRixLQUFLb2dGLGNBQWVxQyxHQUdqR3lDLEVBQXNCbGxGLEtBQUtvbEYsdUJBQzNCeEgsRUFBMEI1OUUsS0FBS3dnRixTQUFTNUMsZ0JBQWtCNTlFLEtBQUt1Z0YsZUFBZXJ4RCxFQUU5RTg0RCxFQUE2QixJQUFJNUksR0FBbUJwL0UsS0FBS284QyxTQUV6RHdzQyxFQUErQjVvRixLQUFLd2hGLGdCQUFnQkosS0FBTzhELEVBQWMsRUFBSXRILEVBRzdFc0ssRUFBK0MsSUFBSXRsQyxJQUNuRGltQyxFQUFrQjdvRixLQUFLMmlGLGVBQWUzaUYsS0FBS2lqRixnQkFDeENqN0UsRUFBSSxFQUFHQSxFQUFJNmdGLEVBQWdCdm5GLE9BQVEwRyxJQUN4Q2tnRixFQUFjcGlGLElBQ1YraUYsRUFBZ0I3Z0YsR0FDaEIsQ0FDSUEsR0FBS2s5RSxFQUFjbGxGLEtBQUt3Z0YsU0FBUzFELGVBQWlCOEwsRUFDbEQ1b0YsS0FBS3doRixnQkFBZ0JILEtBQU96RCxJQVN4QyxJQUhBLElBQU11SyxFQUF5QnZLLEVBQWtCNTlFLEtBQUs0Z0YsUUFBUXQvRSxPQUMxRDhtRixFQUEyQnBvRixLQUFLd2hGLGdCQUFnQkgsS0FBT3pELEVBQWtCdUssRUFFcEVFLEVBQWVyb0YsS0FBSzhqRix3QkFBd0J4aUYsT0FBUyxFQUFHK21GLEVBQWUsRUFBR0EsSUFFL0UsSUFBSyxJQUFJLEVBQUksRUFBRyxFQUFJcm9GLEtBQUs4akYsd0JBQXdCdUUsR0FBYy9tRixPQUFRLEdBQUssRUFBRyxDQUMzRSxJQUFNMDRFLEVBQVloNkUsS0FBSzhqRix3QkFBd0J1RSxHQUFjLEdBQ3ZEcE8sRUFBYWo2RSxLQUFLOGpGLHdCQUF3QnVFLEdBQWMsRUFBSSxHQUM1RGxqRSxFQUFTNjBELEVBQVU3MEQsT0FIa0QsS0FLcEQraUUsRUFBYy9qRixJQUFJNjFFLEVBQVUzbkUsSUFMd0IsR0FLcEVpMkUsRUFMb0UsS0FLN0RDLEVBTDZELFVBTWxETCxFQUFjL2pGLElBQUk4MUUsRUFBVzVuRSxJQU5xQixHQU1wRW0yRSxFQU5vRSxLQU01REMsRUFONEQsS0FtQjNFLEdBWEF6b0YsS0FBS284QyxRQUFRNnBDLFlBRWIrQixFQUFhVSxXQUFXSixFQUFPQyxFQUFPRCxFQUFPRixFQUFrQnBvRixLQUFLd2dGLFNBQVMzQyxvQkFBcUJpSyxHQUVsR0UsRUFBYVUsV0FBV0YsRUFBUUMsRUFBUUQsRUFBUUosRUFBa0Jwb0YsS0FBS3dnRixTQUFTM0Msb0JBQXFCaUssR0FHckdFLEVBQWFVLFdBQVdKLEVBQU9GLEVBQWtCSSxFQUFRSixFQUFrQnBvRixLQUFLd2dGLFNBQVMzQyxvQkFBcUJpSyxHQUM5RzluRixLQUFLbzhDLFFBQVEwd0IsWUFHVDNuRCxFQUFRLENBQ1IsSUFBTXdqRSxFQUFxQjUrRSxLQUFLRCxJQUFJdytFLEVBQU9FLEdBQVV6K0UsS0FBSzJMLElBQUk0eUUsRUFBUUUsR0FBVSxFQUNoRk4sRUFBY3BpRixJQUFJcWYsRUFBTzlTLEdBQUksQ0FBQ3MyRSxFQUFZUCxJQUc5Q0EsR0FBb0JELEVBSTVCLElBQUtub0YsS0FBS3FnRixvQkFBcUIsQ0FDM0JyZ0YsS0FBS284QyxRQUFROHBDLFVBQVlsbUYsS0FBS3dnRixTQUFTdkQsV0FDdkMsSUFBTUQsRUFBVyxHQUFLaDlFLEtBQUt1Z0YsZUFBZXJ4RCxFQUMxQ2x2QixLQUFLbzhDLFFBQVFtb0MsS0FBYixVQUF1QnZILEVBQXZCLHFEQUNBLElBQU15RSxFQUFZemhGLEtBQUtvOEMsUUFBUXVvQyxZQUFZLG9CQUFvQnZiLE1BQy9EcHBFLEtBQUtvOEMsUUFBUWlyQyxTQUNULG1CQUNBcm5GLEtBQUt3aEYsZ0JBQWdCSixLQUFPeEQsRUFBbUI1OUUsS0FBSzRnRixRQUFRdC9FLFFBQVU0akYsRUFBY2xsRixLQUFLd2dGLFNBQVMxRCxlQUFrQixFQUFJMkUsRUFBWSxFQUNwSXpoRixLQUFLd2hGLGdCQUFnQkgsS0FBT3pELEVBQWtCLEVBQUlaLEVBQVcsR0FJckVoOUUsS0FBS284QyxRQUFReXFDLFkseUJBR1QsV0FDSixPQUFPLEdBQVUsUUFDWmowQyxPQUFPLE9BQ1BxWSxLQUFLLFFBQVMsT0FDZDNoQyxNQUFNLFdBQVksWUFDbEJBLE1BQU0sVUFBVyxNQUNqQkEsTUFBTSxhQUFjLFksc0NBR3JCLFNBQXlCNUYsRUFBV3VKLEdBQ3hDLElBQU0yd0QsRUFBa0I1OUUsS0FBSytrRiwyQkFDdkJ5QyxFQUFXOWpFLEVBQUkxakIsS0FBS3doRixnQkFBZ0JKLEtBQU94RCxFQUMzQ3dKLEVBQVduNkQsRUFBSWp0QixLQUFLd2hGLGdCQUFnQkgsS0FBT3pELEVBRTNDc0gsRUFBY2xsRixLQUFLb2xGLHVCQUt6QixNQUFPLENBSEtyN0UsS0FBSzBVLE1BQU0yb0UsR0FBWWxDLEVBQWNsbEYsS0FBS3dnRixTQUFTMUQsZ0JBQ25EL3lFLEtBQUswVSxNQUFNK29FLEdBQVl0QyxFQUFjbGxGLEtBQUt3Z0YsU0FBUzFELG1CLHlCQUszRCxTQUFZeHJELEdBR2hCLElBQU1rOUMsRUFBT2w5QyxFQUFNcm5CLE9BQU91cUUsd0JBSE8sS0FJZHgwRSxLQUFLOG9GLHlCQUF5QngzRCxFQUFNNmlELFFBQVUzRixFQUFLNS9ELEtBQU0waUIsRUFBTThpRCxRQUFVNUYsRUFBS2tHLEtBSmhFLEdBSTFCdFAsRUFKMEIsS0FJckI4ZCxFQUpxQixLQU1qQyxHQUFJOWQsRUFBTSxHQUFLQSxHQUFPcGxFLEtBQUs2bEUsS0FBS3ZrRSxRQUFVNGhGLEVBQU0sR0FBS0EsR0FBT2xqRixLQUFLNGdGLFFBQVF0L0UsT0FZckUsT0FYSXRCLEtBQUt3Z0YsU0FBU2pILGdCQUFrQnY1RSxLQUFLZ2dGLFNBQ3JDaGdGLEtBQUtnZ0YsUUFBUTEyRCxNQUFNLGFBQWMsVUFHckN0cEIsS0FBS2lnRixnQkFBa0IsRUFDdkJqZ0YsS0FBS2tnRixtQkFBcUIsT0FFdEJsZ0YsS0FBS3dnRixTQUFTdEQsb0JBQ2RsOUUsS0FBS2lpRixVQU1iamlGLEtBQUtpZ0YsZUFBaUI3YSxFQUN0QnBsRSxLQUFLa2dGLGtCQUFvQmdELEVBRXJCbGpGLEtBQUt3Z0YsU0FBU3RELG9CQUNkbDlFLEtBQUtpaUYsU0FHTGppRixLQUFLd2dGLFNBQVNqSCxnQkFBa0J2NUUsS0FBS2dnRixTQUNyQ2hnRixLQUFLZ2dGLFFBQVExM0QsS0FBS3RvQixLQUFLd2dGLFNBQVN2QyxXQUFXaitFLEtBQUsrWCxPQUFPcXRELEdBQUs4ZCxHQUFNbGpGLEtBQUs2bEUsS0FBS1QsR0FBTXBsRSxLQUFLNGdGLFFBQVFzQyxLQUMxRjU1RCxNQUFNLE1BQVFnSSxFQUFNdWpELE1BQVEsR0FBTSxNQUNsQ3ZyRCxNQUFNLE9BQVNnSSxFQUFNc2pELE1BQVEsR0FBTSxNQUNuQ3RyRCxNQUFNLGFBQWMsYSxtQkFVekIsU0FBTWdJLEdBQ1YsR0FBS3R4QixLQUFLd2dGLFNBQVM3QyxrQkFBbkIsQ0FJQSxJQUFNb0wsRUFBYy9vRixLQUFLK2tGLDJCQUNuQkcsRUFBY2xsRixLQUFLb2xGLHVCQUduQjVXLEVBQU9sOUMsRUFBTXJuQixPQUFPdXFFLHdCQUNwQjl3RCxFQUFJNE4sRUFBTTZpRCxRQUFVM0YsRUFBSzUvRCxLQUN6QnFlLEVBQUlxRSxFQUFNOGlELFFBQVU1RixFQUFLa0csSUFHM0JoeEQsR0FBSzFqQixLQUFLd2hGLGdCQUFnQkosTUFDMUIxOUQsR0FBSzFqQixLQUFLd2hGLGdCQUFnQkosS0FBTzJILEdBQ2pDOTdELEdBQUtqdEIsS0FBS3doRixnQkFBZ0JILEtBQU8wSCxHQUNqQzk3RCxHQUFLanRCLEtBQUt3aEYsZ0JBQWdCSCxLQUFPMEgsRUFBYy9vRixLQUFLNmxFLEtBQUt2a0UsUUFBVTRqRixFQUFjbGxGLEtBQUt3Z0YsU0FBUzFELGVBRy9GOThFLEtBQUswakYsUUFBUSxRQUtiaGdFLEdBQUsxakIsS0FBS3doRixnQkFBZ0JKLEtBQU8ySCxHQUNqQ3JsRSxHQUFLMWpCLEtBQUt3aEYsZ0JBQWdCSixLQUFPMkgsRUFBYy9vRixLQUFLNGdGLFFBQVF0L0UsUUFBVTRqRixFQUFjbGxGLEtBQUt3Z0YsU0FBUzFELGdCQUNsRzd2RCxHQUFLanRCLEtBQUt3aEYsZ0JBQWdCSCxNQUMxQnAwRCxHQUFLanRCLEtBQUt3aEYsZ0JBQWdCSCxLQUFPMEgsR0FFakMvb0YsS0FBSzBqRixRQUFRLGlCLGtNQ2hoQ0pzRixHLDhLQUNqQixTQUFZMTRCLEdBR1IsSUFGQSxJQUFJL2dDLEVBQXFCLEdBRWhCdm5CLEVBQUksRUFBR0EsRUFBSXNvRCxFQUFPaHZELE9BQVEwRyxJQUFLLENBRXBDLElBREEsSUFBSW85RCxFQUFnQixHQUNYaDlELEVBQUksRUFBR0EsR0FBS0osRUFBR0ksSUFDcEJnOUQsRUFBSTc0RCxLQUFLdk0sS0FBS2lwRixxQ0FBcUMzNEIsRUFBT3RvRCxHQUFJc29ELEVBQU9sb0QsS0FFekVtbkIsRUFBT2hqQixLQUFLNjRELEdBR2hCLE9BQU83MUMsSSxrREFHSCxTQUFxQzdMLEVBQWF1SixHQVF0RCxJQVBBLElBQU15TixFQUFNLFNBQUM1ZSxFQUFXK0IsR0FBWixPQUEwQi9CLEVBQUkrQixHQUNwQ3FyRSxFQUFReGxFLEVBQUU0VCxPQUFPb0QsRUFBSyxHQUFLaFgsRUFBRXBpQixPQUM3QjZuRixFQUFRbDhELEVBQUVxSyxPQUFPb0QsRUFBSyxHQUFLek4sRUFBRTNyQixPQUUvQjhuRixFQUFZLEVBQ1pDLEVBQWMsRUFFVHJoRixFQUFJLEVBQUdBLEVBQUkwYixFQUFFcGlCLE9BQVEwRyxJQUMxQm9oRixJQUFjMWxFLEVBQUUxYixHQUFLa2hGLElBQVVqOEQsRUFBRWpsQixHQUFLbWhGLEdBQ3RDRSxHQUFldC9FLEtBQUsydkIsS0FBSzN2QixLQUFLOFYsSUFBSzZELEVBQUUxYixHQUFLa2hGLEVBQVEsSUFBTW4vRSxLQUFLMnZCLEtBQUszdkIsS0FBSzhWLElBQUtvTixFQUFFamxCLEdBQUttaEYsRUFBUSxJQUcvRixPQUFPLEVBQUlDLEVBQVlDLE8sdUJDOUJWQyxHLDJSQUNNLEdBQUFDLGVBQWlCLENBQ3BDLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFdBR21CLEdBQUFDLGFBQWUsQ0FDbEMsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFdBR21CLEdBQUFDLHVCQUF5QixDQUM1QyxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFcsSUN4SWFDLEcsNEtBSWpCLFNBQWtCMzhELEdBQ2QsT0FBT0EsRUFBRWxTLE1BQU0sSUFBSXljLFFBQU8sU0FBU3hiLEVBQUcrQixHQUNsQyxJQUFJQyxHQUFNaEMsR0FBSyxHQUFLQSxFQUFLK0IsRUFBRTZQLFdBQVcsR0FDdEMsT0FBTzVQLEVBQUlBLElBQ1osTSx1eEJDSFU2ckUsRyx1cEJBQXJCLHNDLDJCQUlJQyxPQUFpQixJQUtqQixFQUFBQyxnQkFBMEIsSUFLMUIsRUFBQXhNLFVBQW9CLFdBTXBCLEVBQUF5TSxnQkFBMEIsRUFNMUIsRUFBQUMsYUFBeUJULEdBQWFDLGVBS3RDLEVBQUFTLGtCQUE4QlYsR0FBYUUsYUFLM0MsRUFBQVMsbUJBQTZCLEVBSzdCLEVBQUFDLE9BQWlCLEVBS2pCLEVBQUEzTSxrQkFBNEIsSUFLNUIsRUFBQTRNLGVBQTJDLGFBUTNDLEVBQUFDLGVBQTZDLFNBQUM3bEUsR0FBRCxPQUFvQm1sRSxHQUFZVyxXQUFXOWxFLEVBQUsvaUIsT0FTN0YsRUFBQXk4RSxXQUVjLFNBQUNqOUUsR0FDWCxrcUJBbUJjLEVBQUttOUUsZ0JBQWdCbjlFLEdBbkJuQyw4RUFzQmMsRUFBS285RSxlQUFlcDlFLEdBdEJsQyx5REFxQ0osRUFBQW05RSxnQkFBZ0QsU0FBQ245RSxHQUFELE9BQXFCQSxFQUFNUSxNQVMzRSxFQUFBNDhFLGVBQTBDLFNBQUMxNkQsR0FBRCxnQkFBb0JBLEVBQUVyYyxNQUF0QixVQVMxQyxFQUFBaWpGLFNBQW9DLFNBQUM1bUUsR0FBRCxNQUE0QixVQUFYQSxFQUFFbGlCLEtBQW1CLEdBQUtraUIsRUFBRWxpQixNQVFqRixFQUFBK29GLGFBQXdDLEVBQUtELFNBdElqRCxFLFVBQThDaFIsSSxzUkNIekJrUixHLGlMQVNWLFNBQ0gvNEUsR0FFQSxJQUFNeXZDLEVBQXVCLEdBRTdCLEdBQUl6dkMsRUFBS3l2QyxTQUFVLFMsMDVCQUFBLENBQ0t6dkMsRUFBS3l2QyxVQURWLElBQ2YsMkJBQW1DLEtBQXhCOEIsRUFBd0IsUUFDL0I5QixFQUFTMzBDLEtBQUt2TSxLQUFLeXFGLGVBQWV6bkMsS0FGdkIsK0JBVW5CLE9BSkk5QixFQUFTNS9DLE9BQVMsR0FBb0IsSUFBZm1RLEVBQUtwSyxPQUM1QjY1QyxFQUFTMzBDLEtBQUssSUFBSTAwQyxHQUFVLEVBQUcsUUFBUyxHQUFJeHZDLEVBQUtwSyxNQUFPb0ssRUFBSzB2QyxZQUcxRCxJQUFJRixFQUNQeHZDLEVBQUtZLE1BQVFtNEUsRUFBcUJFLFVBQ2xDajVFLEVBQUtqUSxNQUFRLEdBQ2IwL0MsRUFDQXp2QyxFQUFLcEssTUFDTG9LLEVBQUswdkMsVUFDTDF2QyxFQUFLaWUsWSw4TEE3QkUsR0FBQWc3RCxVQUFvQixFLElDRGxCQyxHLDZLQUNWLFdBQ0gsT0FBTyxHQUFVLFFBQ1ovM0MsT0FBTyxPQUNQcVksS0FBSyxRQUFTLE9BQ2QzaEMsTUFBTSxXQUFZLFlBQ2xCQSxNQUFNLFVBQVcsTUFDakJBLE1BQU0sYUFBYyxhLHNOQ0xac2hFLEcsNEtBUVYsU0FDSHZsRCxFQUNBdm5CLEVBQ0Erc0UsR0FFQSxRQUFJL3NFLEVBQUVWLE9BQVN5dEUsS0FJWHhsRCxJQUFNdm5CLEtBSU51bkIsRUFBRTZiLFVBQ0s3YixFQUFFNmIsU0FBUzV6QyxNQUFLLFNBQUN1ekMsR0FDcEIsT0FBTytwQyxFQUFVRSxXQUFXanFDLEVBQUcvaUMsRUFBRytzRSxVLHNOQ3pCN0JFLEcscUxBSVYsU0FBMkJ2a0QsR0FDOUIsSUFBSXdrRCxFQUFZLE9BQ2hCLElBQ0lBLEVBQVlELEVBQVdFLFdBQVcsR0FBSXprRCxJQUFVLElBQU0sT0FBUyxPQUNqRSxNQUFPcVYsSUFDVCxPQUFPbXZDLEksd0JBT0osWUFDSCxNQUFXLEtBRHdELEVBQTVDbm9ELEVBQ0EsS0FENEMsRUFBekNuakIsRUFDUyxLQURnQyxFQUF0QzdCLEsseTBDQ0hoQnF0RSxHLFdBeUJqQixXQUNxQjN0RSxFQUNqQjlMLEdBQ2tELFdBQWxEdUosRUFBa0QsdURBQXRCLElBQUkydUUsR0FBa0IsV0FGakMsS0FBQXBzRSxVQW5CYixLQUFBNHRFLGNBQXdCLEVBQ3hCLEtBQUFDLGdCQUEwQixFQVcxQixLQUFBQyxRQUEyQixHQUMzQixLQUFBQyxTQUE0QixHQUU1QixLQUFBQyxhQUFxQyxLQUNyQyxLQUFBQyxpQkFBMkJ4ckYsS0FBS29yRixnQkFPcENwckYsS0FBS3dnRixTQUFXeGdGLEtBQUt5Z0YsWUFBWXpsRSxHQUVqQyxJQUFNMGxFLEVBQWUsSUFBSThKLEdBQ25CaUIsRUFBZ0IvSyxFQUFhK0osZUFBZWg1RSxHQUU5Q3pSLEtBQUt3Z0YsU0FBU2pILGlCQUNkdjVFLEtBQUtnZ0YsUUFBVTJLLEdBQWlCM0osZUFHcENoaEYsS0FBS29yRixnQkFBa0JwckYsS0FBS3dnRixTQUFTMEosT0FFckNscUYsS0FBSzByRixPQUFTLEtBQWlCN2pCLE1BQU0sQ0FBQyxFQUFHLEVBQUk5OUQsS0FBS3lrRCxLQUNsRHh1RCxLQUFLMnJGLE9BQVMsS0FBaUJ2bUUsT0FBTyxDQUFDLEVBQUcsSUFBSXlpRCxNQUFNLENBQUMsRUFBRzduRSxLQUFLd2dGLFNBQVNvSixTQUV0RSxJQUFNZ0MsRUFBVyxHQUF1QkgsR0FHeENHLEVBQVNseEQsS0FBSSxTQUFDbW1CLEdBQUQsT0FBaUJBLEVBQUVLLFNBQVM1L0MsT0FBUyxFQUFJLEVBQUl1L0MsRUFBRU0sYUFFNUQsSUFBTWloQixFQUFZLEtBQ2xCcGlFLEtBQUt5UixLQUFPMndELEVBQVV3cEIsR0FBVS9tQixjQUVoQzdrRSxLQUFLa3VFLElBQU0sS0FDTmMsWUFBVyxTQUFDbnVCLEdBQUQsT0FBc0I5MkMsS0FBS21vQixJQUFJLEVBQUdub0IsS0FBS0QsSUFBYyxFQUFWQyxLQUFLeWtELEdBQVEsRUFBS2s5QixPQUFPN3FDLEVBQUVnaEIsU0FDakZxTixVQUFTLFNBQUNydUIsR0FBRCxPQUFzQjkyQyxLQUFLbW9CLElBQUksRUFBR25vQixLQUFLRCxJQUFjLEVBQVZDLEtBQUt5a0QsR0FBUSxFQUFLazlCLE9BQU83cUMsRUFBRWtoQixTQUMvRTZNLGFBQVksU0FBQy90QixHQUFELE9BQXNCOTJDLEtBQUttb0IsSUFBSSxFQUFHMnVCLEVBQUVpaEIsR0FBSyxFQUFLNnBCLE9BQU85cUMsRUFBRWloQixJQUFNamhCLEVBQUVpaEIsT0FDM0VnTixhQUFZLFNBQUNqdUIsR0FBRCxPQUFzQjkyQyxLQUFLbW9CLElBQUksRUFBRyxFQUFLeTVELE9BQU85cUMsRUFBRW1oQixJQUFNLE1BRXZFaGlFLEtBQUs2ckYsVUFHTDdyRixLQUFLdWQsUUFBUTRvQyxVQUFZLEdBRXpCbm1ELEtBQUs4ckYsWUFBYyxHQUFVOXJGLEtBQUt1ZCxTQUM3QnExQixPQUFPLE9BQ1BxWSxLQUFLLEtBQU1saEQsS0FBSzBVLE1BQU0xVSxLQUFLNmdCLFNBQVcsV0FBRyxLQUFNLGdCQUMvQ3FnQyxLQUFLLFFBQVMsd0JBQ2RyWSxPQUFPLE1BRVosSUFBTSt1QyxFQUFhLEdBQVUzaEYsS0FBS3VkLFNBQzdCcTFCLE9BQU8sT0FDUHFZLEtBQUssVUFBVyxPQUNoQkEsS0FBSyxRQUFTLDhCQUNkQSxLQUFLLFVBSlMsY0FJU2pyRCxLQUFLd2dGLFNBQVNwWCxNQUp2QixZQUlnQ3BwRSxLQUFLd2dGLFNBQVM1ZSxTQUM1RDNXLEtBQUssUUFBU2pyRCxLQUFLd2dGLFNBQVNwWCxPQUM1Qm5lLEtBQUssU0FBVWpyRCxLQUFLd2dGLFNBQVM1ZSxRQUM3QjNXLEtBQUssV0FBWSxVQUNqQjNoQyxNQUFNLGNBQWUsa0RBRTFCcTRELEVBQVcvdUMsT0FBTyxTQUNicVksS0FBSyxPQUFRLFlBQ2IzaUMsS0FBSyxpQ0FHVnRvQixLQUFLK3JGLFlBQWNwSyxFQUFXL3VDLE9BQU8sS0FFaENxWSxLQUFLLFlBQWEsYUFBZWpyRCxLQUFLd2dGLFNBQVNvSixPQUFTLElBQU01cEYsS0FBS3dnRixTQUFTb0osT0FBUyxLQUcxRjVwRixLQUFLZy9DLFEsMENBR0YsV0FDSGgvQyxLQUFLNmhGLE1BQU03aEYsS0FBS3lSLEtBQUssTSx5QkFHakIsV0FBb0MsSUFBeEJ1SixFQUF3Qiw0REFBVG5hLEVBQ3pCMHVCLEVBQVMsSUFBSW82RCxHQUNuQixPQUFPN21GLE9BQU84a0IsT0FBTzJILEVBQVF2VSxLLGtCQUd6QixTQUFLNmxDLEdBQWdCLFdBQ3pCLE9BQU9BLEVBQUVLLFNBQVduM0MsS0FBS21vQixJQUFMLE1BQUFub0IsS0FBSSxHQUFRODJDLEVBQUVLLFNBQVU5ekMsS0FBSSxTQUFDcEYsR0FBRCxPQUFPLEVBQUtna0YsS0FBS2hrRixRQUFPNjRDLEVBQUVtaEIsSyxtQkFTdEUsU0FBTW5oQixHQUFXLFdBQ3JCLEdBQWUsVUFBWEEsRUFBRXIvQyxLQUNGLE1BQU8sUUFFWCxHQUFJeEIsS0FBS3dnRixTQUFTc0osZUFDZCxPQUFPOXBGLEtBQUt3Z0YsU0FBU3dKLGtCQUNqQmpnRixLQUFLMkwsSUFBSTFWLEtBQUt3Z0YsU0FBUzRKLGVBQWV2cEMsSUFBTTdnRCxLQUFLd2dGLFNBQVN3SixrQkFBa0Ixb0YsUUFHaEYsR0FBSXUvQyxFQUFFSyxTQUFTNS9DLE9BQVMsRUFBRyxDQUN2QixJQUFNMnFGLEVBQW9CcHJDLEVBQUVLLFNBQVM5ekMsS0FBSSxTQUFBMFEsR0FBQyxPQUFJLEVBQUswb0IsTUFBTTFvQixNQUNuRGhDLEVBQUksR0FBT213RSxFQUFRLElBQ25CcHVFLEVBQUksR0FBT291RSxFQUFRLElBSXpCLE9BSDBDLElBQXRCcHJDLEVBQUVLLFNBQVM1L0MsUUFBdUMsVUFBdkJ1L0MsRUFBRUssU0FBUyxHQUFHMS9DLEtBSWxELEdBQU9zYSxFQUFFa2dELEVBQUdsZ0QsRUFBRWlSLEVBQVMsSUFBTmpSLEVBQUV5L0MsR0FJdkIsSUFBUXovQyxFQUFFa2dELEVBQUluK0MsRUFBRW0rQyxHQUFLLEdBQUlsZ0QsRUFBRWlSLEVBQUlsUCxFQUFFa1AsR0FBSyxHQUFJalIsRUFBRXkvQyxFQUFJMTlDLEVBQUUwOUMsR0FBSyxHQU1sRSxPQUhLMWEsRUFBRW54QixNQUFNOFcsUUFDVHFhLEVBQUVueEIsTUFBTThXLE1BQVF4bUMsS0FBS2tzRixZQUVsQnJyQyxFQUFFbnhCLE1BQU04VyxRLHNCQVNmLFdBRUosT0FEQXhtQyxLQUFLbXJGLGNBQWdCbnJGLEtBQUttckYsYUFBZSxHQUFLbnJGLEtBQUt3Z0YsU0FBU3VKLGFBQWF6b0YsT0FDbEV0QixLQUFLd2dGLFNBQVN1SixhQUFhL3BGLEtBQUttckYsZ0IscUJBR25DLFdBQ0osSUFBSWdCLEVBQWVuc0YsS0FBS3dnRixTQUFTbkQsVUFDakNyOUUsS0FBS3VkLFFBQVE4L0QsV0FBYSxJQUFNOE8sRUFFaEMsSUFBTUMsRUFBZXBzRixLQUFLdWQsUUFBUXlrQyxjQUFjM3BDLGNBQWMsU0FDOUQrekUsRUFBYTVpRSxZQUFZeHBCLEtBQUt1ZCxRQUFReWtDLGNBQWN2OEIsZUFBM0IsYUFDOUIwbUUsRUFEOEIsZ0dBR3BCbnNGLEtBQUt3Z0YsU0FBU3BYLE1BQVFwcEUsS0FBS3dnRixTQUFTcUosZ0JBSGhCLG9CQUs5QnNDLEVBTDhCLHVKQVk5QkEsRUFaOEIseUZBZ0I5QkEsRUFoQjhCLCtGQW9COUJBLEVBcEI4Qiw4RkF3QjlCQSxFQXhCOEIsdUtBK0I5QkEsRUEvQjhCLDBFQWtDekJuc0YsS0FBS3VkLFFBQVF5a0MsY0FBYzU5QixLQUFLb0YsWUFBWTRpRSxLLHNCQVN4QyxTQUFTdnJDLEVBQWtCN3pDLEdBQy9CLElBQUlxL0UsRUFBS3RpRixLQUFLRCxJQUFJOUosS0FBS2dzRixLQUFLbnJDLEdBQUlBLEVBQUVpaEIsR0FBSzkwRCxFQUFLd3pFLFNBQVMwSixRQUFVcnBDLEVBQUVtaEIsR0FBS25oQixFQUFFaWhCLEtBQ3BFd3FCLEVBQUssR0FBZXQvRSxFQUFLMCtFLE9BQU90bUUsU0FBVSxDQUFDeTdCLEVBQUVnaEIsR0FBSWhoQixFQUFFa2hCLEtBQ25Ed3FCLEVBQUssR0FBZXYvRSxFQUFLMitFLE9BQU92bUUsU0FBVSxDQUFDeTdCLEVBQUVpaEIsR0FBSXVxQixJQUNqREcsRUFBSyxHQUFleC9FLEVBQUsyK0UsT0FBTzlqQixRQUFTLENBQUNobkIsRUFBRWloQixHQUFLLEdBQUssRUFBRzkwRCxFQUFLd3pFLFNBQVNvSixTQUUzRSxPQUFPLFNBQUMvb0MsR0FHSixPQUFPLFNBQUM1d0IsR0FHSixPQUZBampCLEVBQUswK0UsT0FBT3RtRSxPQUFPa25FLEVBQUdyOEQsSUFDdEJqakIsRUFBSzIrRSxPQUFPdm1FLE9BQU9tbkUsRUFBR3Q4RCxJQUFJNDNDLE1BQU0ya0IsRUFBR3Y4RCxJQUM1QmpqQixFQUFLa2hFLElBQUlydEIsTyx1QkFLcEIsU0FBVXZ2QixFQUFtQnV2QixHQUM3QjdnRCxLQUFLd2dGLFNBQVNqSCxnQkFBa0J2NUUsS0FBS2dnRixTQUNqQ24vQixFQUFFempDLE1BQVFwZCxLQUFLb3JGLGlCQUFtQyxVQUFoQnZxQyxFQUFFcHZDLEtBQUtqUSxNQUN6Q3hCLEtBQUtnZ0YsUUFBUTEzRCxLQUFLdG9CLEtBQUt3Z0YsU0FBU3ZDLFdBQVdwOUIsRUFBRXB2QyxPQUN4QzZYLE1BQU0sTUFBUWdJLEVBQU11akQsTUFBUSxHQUFNLE1BQ2xDdnJELE1BQU0sT0FBU2dJLEVBQU1zakQsTUFBUSxHQUFNLE1BQ25DdHJELE1BQU0sYUFBYyxhLHlCQUs3QixTQUFZZ0ksRUFBbUJ1dkIsR0FDL0I3Z0QsS0FBS3dnRixTQUFTakgsZ0JBQWtCdjVFLEtBQUtnZ0YsU0FDckNoZ0YsS0FBS2dnRixRQUNBMTJELE1BQU0sTUFBUWdJLEVBQU11akQsTUFBUSxHQUFNLE1BQ2xDdnJELE1BQU0sT0FBU2dJLEVBQU1zakQsTUFBUSxHQUFNLFEsd0JBSXhDLFNBQVd0akQsRUFBbUJ1dkIsR0FDOUI3Z0QsS0FBS3dnRixTQUFTakgsZ0JBQWtCdjVFLEtBQUtnZ0YsU0FDckNoZ0YsS0FBS2dnRixRQUFRMTJELE1BQU0sYUFBYyxZLG1DQVdqQyxTQUFzQnUzQixHQVcxQixPQVZzQixFQUFJOTJDLEtBQUttb0IsSUFBSSxFQUFHbHlCLEtBQUsyckYsT0FBTzlxQyxFQUFFbWhCLElBQU0sR0FBS2o0RCxLQUFLeWtELElBRWpEemtELEtBQUttb0IsSUFDcEIsRUFDQW5vQixLQUFLRCxJQUFjLEVBQVZDLEtBQUt5a0QsR0FBUXh1RCxLQUFLMHJGLE9BQU83cUMsRUFBRWtoQixLQUNwQ2g0RCxLQUFLbW9CLElBQUksRUFBR25vQixLQUFLRCxJQUFjLEVBQVZDLEtBQUt5a0QsR0FBUXh1RCxLQUFLMHJGLE9BQU83cUMsRUFBRWdoQixRQUtkLEVBQUk5M0QsS0FBS3lrRCxPLG1CQVEzQyxTQUFNM04sR0FDVSxVQUFoQkEsRUFBRXB2QyxLQUFLalEsTUFBcUJ4QixLQUFLdXJGLGNBQWdCdnJGLEtBQUt1ckYsYUFBYTk1RSxLQUFLWSxLQUFPd3VDLEVBQUVwdkMsS0FBS1ksS0FJMUZyUyxLQUFLdXJGLGFBQWUxcUMsRUFFaEI3Z0QsS0FBS3dnRixTQUFTeUosbUJBQ2RqcUYsS0FBS3lzRixlQUFlNXJDLEdBR3BCN2dELEtBQUt3Z0YsU0FBUzJKLGdCQUNkbnFGLEtBQUt3Z0YsU0FBUzJKLGVBQWV0cEMsRUFBRXB2QyxNQUluQ3pSLEtBQUtvckYsZ0JBQWtCdnFDLEVBQUV6akMsTUFBUXBkLEtBQUt3Z0YsU0FBUzBKLE9BRS9DbHFGLEtBQUswc0YsV0FBVzdyQyxHQUNoQjdnRCxLQUFLMnNGLFdBQVc5ckMsTSx3QkFHTixTQUFXMkYsRyxzS0FvQ3JCLE9BakNNb21DLEVBQWU1c0YsS0FBS3lSLEtBQUtwRSxRQUFPLFNBQUMydkIsR0FDbkMsT0FBTzR0RCxHQUFVRSxXQUFXdGtDLEVBQVl4cEIsRUFBRyxFQUFLb3VELGdCQUFrQixNQUdsRTVrQyxFQUFXcmhDLFFBQ1h5bkUsRUFBYXJnRixLQUFLaTZDLEVBQVdyaEMsUUFHM0IwbkUsRUFBVUQsRUFBYXYvRSxRQUFPLFNBQUNxVyxHQUFELE9BQXVCLEVBQUsybkUsUUFBUWwvRSxTQUFTdVgsTUFDM0VqUyxHQUFPLEVBQUF6UixLQUFLcXJGLFNBQVEvc0UsT0FBYixXQUF1QnV1RSxJQUVwQzdzRixLQUFLK3JGLFlBQVloakMsVUFBVSxRQUFRdDNDLEtBQUssSUFBSTRULE9BQU9xZ0MsU0FFbkQxbEQsS0FBS0MsS0FBT0QsS0FBSytyRixZQUFZaGpDLFVBQVUsUUFDbEN0M0MsS0FBS0EsR0FDTDZULFFBQ0FnbUMsT0FBTyxRQUNQTCxLQUFLLFFBQVMsT0FDZEEsS0FBSyxNQUFNLFNBQUNwSyxFQUFrQjc0QyxHQUFuQixNQUFpQyxRQUFVQSxLQUN0RGlqRCxLQUFLLElBQUtqckQsS0FBS2t1RSxLQUNmampCLEtBQUssWUFBYSxXQUNsQjNoQyxNQUFNLFFBQVEsU0FBQ3UzQixHQUFELE9BQXNCLEVBQUtyYSxNQUFNcWEsRUFBRXB2QyxTQUNqRHc1QyxLQUFLLGdCQUFnQixTQUFBcEssR0FBQyxPQUFJQSxFQUFFempDLE9BQVMsRUFBS291RSxpQkFBbUIsR0FBTSxLQUNuRTlqQyxHQUFHLFNBQVMsU0FBQ3AyQixFQUFtQnV2QixHQUN6QkEsRUFBRXpqQyxNQUFRLEVBQUtndUUsaUJBQ2YsRUFBS3ZKLE1BQU1oaEMsTUFHbEI2RyxHQUFHLGFBQWEsU0FBQ3AyQixFQUFtQnV2QixHQUFwQixPQUF5QyxFQUFLaXNDLFVBQVV4N0QsRUFBT3V2QixNQUMvRTZHLEdBQUcsYUFBYSxTQUFDcDJCLEVBQW1CdXZCLEdBQXBCLE9BQXlDLEVBQUsrZ0MsWUFBWXR3RCxFQUFPdXZCLE1BQ2pGNkcsR0FBRyxZQUFZLFNBQUNwMkIsRUFBbUJ1dkIsR0FBcEIsT0FBeUMsRUFBS2tzQyxXQUFXejdELEVBQU91dkIsTSxTQUc5RSxJQUFJNzdCLFNBQWMsU0FBQ08sR0FDckIsRUFBS3RsQixLQUFLMndELGFBQ0wxQyxTQUFTLEVBQUtzeUIsU0FBU2pELG1CQUN2QjllLFVBQVUsSUFBSyxFQUFLdXVCLFNBQVN4bUMsRUFBWSxJQUN6Q3lFLEtBQUssU0FBUyxTQUFDcEssR0FBRCxPQUFzQkEsRUFBRXpqQyxPQUFTLEVBQUtndUUsZ0JBQWtCLGFBQWUsU0FDckZuZ0MsS0FBSyxnQkFBZ0IsU0FBQXBLLEdBQUMsT0FBSUEsRUFBRXpqQyxPQUFTLEVBQUtndUUsZ0JBQWtCLEdBQU0sS0FDbEUxakMsR0FBRyxPQUFPLFdBQ1BuaUMsVSxPQUladmxCLEtBQUt3ckYsaUJBQW1CeHJGLEtBQUtvckYsZ0JBQzdCcHJGLEtBQUtxckYsUUFBVXVCLEUsMkVBR0wsU0FBV3BtQyxHLDhLQXlDckIsT0F4Q01vbUMsRUFBZTVzRixLQUFLeVIsS0FBS3BFLFFBQU8sU0FBQzJ2QixHQUNuQyxPQUFPNHRELEdBQVVFLFdBQVd0a0MsRUFBWXhwQixFQUFHLEVBQUtvdUQsb0JBRzlDeUIsRUFBVUQsRUFBYXYvRSxRQUFPLFNBQUNxVyxHQUFELE9BQXVCLEVBQUs0bkUsU0FBU24vRSxTQUFTdVgsTUFDNUVqUyxHQUFPLEVBQUF6UixLQUFLc3JGLFVBQVNodEUsT0FBZCxXQUF3QnV1RSxJQUVqQ3JtQyxFQUFXcmhDLFFBQ1gxVCxFQUFLa0IsT0FBT2xCLEVBQUtyRixRQUFRbzZDLEVBQVdyaEMsUUFBUyxHQUkzQ25ZLEVBQU9oTixNQUVQaXRGLEVBQXNELG9CQUFwQjVJLG1CQUk5QkQsRUFBa0IsSUFBSUMsZ0JBQWdCLEVBQUcsSUFDL0NDLEVBQU1GLEVBQWdCdEMsV0FBVyxPQUM3QnlDLEtBQU9ELEVBQUtDLEtBQU8sdURBSTNCdmtGLEtBQUsrckYsWUFBWWhqQyxVQUFVLFFBQVF0M0MsS0FBSyxJQUFJNFQsT0FBT3FnQyxTQUduRDFsRCxLQUFLb3JELEtBQU9wckQsS0FBSytyRixZQUFZaGpDLFVBQVUsUUFBUXQzQyxLQUFLQSxHQUFNNlQsUUFBUXN0QixPQUFPLFFBQ3BFdHBCLE1BQU0sUUFBUSxTQUFDdTNCLEdBQUQsT0FBc0JrcUMsR0FBV21DLG9CQUFvQixFQUFLMW1ELE1BQU1xYSxFQUFFcHZDLFVBQ2hGNlgsTUFBTSxlQUFnQixHQUN0QkEsTUFBTSxjQUFlLG9EQUNyQkEsTUFBTSxpQkFBa0IsUUFDeEIyaEMsS0FBSyxLQUFNLFFBQ1hHLE1BQUssU0FBQ3ZLLEdBQUQsT0FBc0IsRUFBSzIvQixTQUFTOEosU0FBU3pwQyxFQUFFcHZDLFNBQ3BENlgsTUFBTSxhQUFhLFNBQXNDdTNCLEdBQ3RELElBQU1zc0MsRUFBWUYsRUFBMkIzSSxFQUFJSyxZQUFZM2tGLEtBQUsrbEQsYUFBY3FqQixNQUFRcHBFLEtBQUtvdEYsd0JBQzdGLE9BQU9yakYsS0FBSzBVLE1BQU0xVSxLQUFLRCxJQUFNa0QsRUFBS3d6RSxTQUFTb0osT0FBUzU4RSxFQUFLd3pFLFNBQVMwSixPQUFVaUQsRUFBWSxHQUFNLEVBQUcsS0FBTyxRLFVBSTFHLElBQUlub0UsU0FBYyxTQUFDTyxHQUNyQixFQUFLNmxDLEtBQ0F3RixhQUFhMUMsU0FBUyxFQUFLc3lCLFNBQVNqRCxtQkFDcEM5ZSxVQUFVLGVBQWUsU0FBQzVkLEdBQ3ZCLE9BQU8sU0FBQzV3QixHQUFELE9BQWUsRUFBS3k3RCxPQUFPN3FDLEVBQUVnaEIsSUFBTWhoQixFQUFFa2hCLEdBQUtsaEIsRUFBRWdoQixJQUFNLEdBQUs5M0QsS0FBS3lrRCxHQUFLLE1BQVEsWUFFbkZpUSxVQUFVLE1BQU0sU0FBQzVkLEdBQ2QsT0FBTyxTQUFDNXdCLEdBQUQsT0FBZSxFQUFLeTdELE9BQU83cUMsRUFBRWdoQixJQUFNaGhCLEVBQUVraEIsR0FBS2xoQixFQUFFZ2hCLElBQU0sR0FBSzkzRCxLQUFLeWtELEdBQUssT0FBUyxVQUVwRmlRLFVBQVUsYUFBYSxTQUFDNWQsR0FDckIsT0FBTyxTQUFDNXdCLEdBQ0osSUFBSW85RCxFQUFnRCxJQUF4QyxFQUFLM0IsT0FBTzdxQyxFQUFFZ2hCLElBQU1oaEIsRUFBRWtoQixHQUFLbGhCLEVBQUVnaEIsSUFBTSxHQUFXOTNELEtBQUt5a0QsR0FBSyxHQUNwRSx1QkFBaUI2K0IsRUFBakIsc0JBQW9DLEVBQUsxQixPQUFPOXFDLEVBQUVpaEIsSUFBbEQsbUJBQWdFdXJCLEVBQVEsSUFBTSxJQUFNLEVBQXBGLFNBR1BqdUIsV0FBVyxnQkFBZ0IsU0FBc0NwaUMsR0FDOUQsSUFBTXN3RCxFQUFtQnhtRSxPQUFPTyxTQUFTLEdBQVVybkIsTUFBTXNwQixNQUFNLGFBQWF4VSxRQUFRLEtBQU0sS0FFMUYsT0FBTyxTQUFDbWIsR0FHSixPQUZ1QmpqQixFQUFLdWdGLHNCQUFzQnZ3RCxHQUU3QnN3RCxFQUNWcjlELEVBQUVyZ0IsV0FFRixRQUlsQjgzQyxHQUFHLE9BQU8sU0FBc0MxcUIsR0FDN0MsSUFBTXd3RCxFQUFpQnhnRixFQUFLdWdGLHNCQUFzQnZ3RCxHQUM1Q3pZLEVBQU8sR0FBVXZrQixNQUV2QnVrQixFQUFLK0UsTUFDRCxhQUNBa2tFLEVBQWlCMW1FLE9BQU9PLFNBQVM5QyxFQUFLK0UsTUFBTSxhQUFheFUsUUFBUSxLQUFNLE1BQVE4MUUsR0FBVUUsV0FBV3RrQyxFQUFZeHBCLEVBQUdod0IsRUFBS28rRSxpQkFBb0IsVUFBWSxVQUc1SjdsRSxVLFFBSVp2bEIsS0FBS3NyRixTQUFXc0IsRSwrRUFHWixTQUFlL3JDLEdBS25CLElBTG1DLFdBRS9CNHNDLEVBQTBCLEdBQzFCdGtFLEVBQStCMDNCLEVBRTVCMTNCLEdBQ0hza0UsRUFBT2xoRixLQUFLNGMsR0FDWkEsRUFBT0EsRUFBS2hFLE9BRWhCc29FLEVBQU8zbEYsVUFBVWtxQyxRQUdqQixJQUFNMDdDLEVBQWdCLEtBQ2pCOWUsWUFBWSxHQUNaRSxZQUFZLElBQ1pFLFdBQVcsR0FDWEUsVUFBUyxTQUFDcnVCLEdBQ1AsT0FBTyxFQUFJOTJDLEtBQUt5a0QsR0FBSzNOLEVBQUVwdkMsS0FBS3BLLE1BQVF3NUMsRUFBRTE3QixPQUFRMVQsS0FBS3BLLFNBRzNEckgsS0FBSzhyRixZQUFZL2lDLFVBQVUsVUFDdEJ0M0MsS0FBS2c4RSxHQUNMbm9FLFFBQ0FzdEIsT0FBTyxNQUNQOFUsR0FBRyxTQUFTLFNBQUNwMkIsRUFBbUJ1dkIsR0FDN0IsRUFBS2doQyxNQUFNaGhDLEVBQUUxN0IsV0FFaEI4bEMsS0FBSyxRQUFTLFNBQ2QzaEMsTUFBTSxVQUFXLEtBQ2pCMmhDLEtBQUssU0FBUyxTQUFDcEssR0FBRCxPQUFzQixFQUFLMi9CLFNBQVMrSixhQUFhMXBDLEVBQUVwdkMsU0FDakU2VyxNQUFLLFNBQUN1NEIsRyxNQUFxQixrQ0FDdEJBLEVBQUVwdkMsS0FBS2pRLEtBRGUsdUNBRWhCdUksS0FBS2dwQixNQUFNLElBQU04dEIsRUFBRXB2QyxLQUFLcEssTUFBUXc1QyxFQUFFMTdCLE9BQVExVCxLQUFLcEssT0FGL0IsZ0JBRXFELFFBQVIsRUFBQXc1QyxFQUFFMTdCLGNBQU0sZUFBRTFULEtBQUtqUSxLQUY1RCxXQUczQjhwRCxPQUFPLE1BQU8sZ0JBQWdCTCxLQUFLLFFBQVMsSUFDNUNBLEtBQUssU0FBVSxJQUNmclksT0FBTyxRQUNQcVksS0FBSyxJQUFLeWlDLEdBQ1Z6aUMsS0FBSyxZQUFhLHFCQUNsQkEsS0FBSyxRQUFRLFNBQUNwSyxHQUFELE9BQXNCLEVBQUtyYSxNQUFNcWEsRUFBRXB2QyxTQUVyRHpSLEtBQUs4ckYsWUFBWS9pQyxVQUFVLFVBQ3RCNkgsYUFDQTFDLFNBQVNsdUQsS0FBS3dnRixTQUFTakQsbUJBQ3ZCajBELE1BQU0sVUFBVyxLQUV0QnRwQixLQUFLOHJGLFlBQVkvaUMsVUFBVSxVQUN0QnQzQyxLQUFLZzhFLEdBQ0xwb0UsT0FBT3VyQyxhQUNQMUMsU0FBU2x1RCxLQUFLd2dGLFNBQVNqRCxtQkFDdkJqMEQsTUFBTSxVQUFXLEtBQ2pCbzhCLGMsbXdCQ3ZlUWlvQyxHLHVwQkFBckIsc0MsMkJBSUl0USxVQUFvQixVQUtwQixFQUFBNk0sWUFBNkJycEYsRUFLN0IsRUFBQStzRixZQUFzQixHQUt0QixFQUFBQyxVQUFvQixVQUtwQixFQUFBQyxVQUFvQixVQUtwQixFQUFBQyxpQkFBMkIsVUFLM0IsRUFBQTVELGVBQTJDLGFBUzNDLEVBQUE2RCxxQkFBZ0QsU0FBQ250QyxHQUFELE9BQWlCQSxFQUFFci9DLE1BU25FLEVBQUF5OEUsV0FFYyxTQUFDajlFLEdBQ1gsa3FCQW1CYyxFQUFLbTlFLGdCQUFnQm45RSxHQW5CbkMsOEVBc0JjLEVBQUtvOUUsZUFBZXA5RSxHQXRCbEMseURBcUNKLEVBQUFtOUUsZ0JBQStDLFNBQUNuOUUsR0FBRCxPQUFxQkEsRUFBTVEsTUFTMUUsRUFBQTQ4RSxlQUEwQyxTQUFDMTZELEdBQUQsZ0JBQW9CQSxFQUFFcmMsTUFBdEIsVUFTMUMsRUFBQWlqRixTQUFvQyxTQUFDNW1FLEdBQUQsT0FBaUJBLEVBQUVsaUIsTUFTdkQsRUFBQXlzRixTQUE4RCxTQUFDdnFFLEdBQUQsT0FBNENBLEVBQUV0RyxPQXZIaEgsRSxVQUE2Q2s4RCxJLHNSQ0Z4QjRVLEcsaUxBR1YsU0FBZTNwRSxHQUNsQixJQUFNMjhCLEVBQXVCLEdBRTdCLEdBQUkzOEIsRUFBSzI4QixTQUFVLFMsMDVCQUFBLENBQ0szOEIsRUFBSzI4QixVQURWLElBQ2YsMkJBQW1DLEtBQXhCOEIsRUFBd0IsUUFDL0I5QixFQUFTMzBDLEtBQUt2TSxLQUFLeXFGLGVBQWV6bkMsS0FGdkIsK0JBTW5CLE9BQU8sSUFBSS9CLEVBQ1AxOEIsRUFBS2xTLE1BQVE2N0UsRUFBb0J4RCxVQUNqQ25tRSxFQUFLL2lCLE1BQVEsR0FDYjAvQyxFQUNBMzhCLEVBQUtsZCxNQUNMa2QsRUFBSzQ4QixVQUNMNThCLEVBQUttTCxZLHF5Q0FqQkUsR0FBQWc3RCxVQUFvQixFLElDTWxCeUQsRyxXQW1CakIsV0FDWTV3RSxFQUNSOUwsR0FDZ0QsSSxFQUFoRHVKLEVBQWdELHVEQUFyQixJQUFJMnlFLEdBQWlCLFdBRnhDLEtBQUFwd0UsVUFkSyxLQUFBNndFLHFCQUE0RCxJQUFJeHJDLElBV3pFLEtBQUF5ckMsT0FBaUIsRUFPckJydUYsS0FBS3dnRixTQUFXeGdGLEtBQUt5Z0YsWUFBWXpsRSxHQUU3QmhiLEtBQUt3Z0YsU0FBU2pILGlCQUNkdjVFLEtBQUtnZ0YsUUFBVTJLLEdBQWlCM0osZUFHcENoaEYsS0FBSzZyRixVQUVMLElBQU1uTCxFQUFlLElBQUl3TixHQUVuQnRDLEVBQVcsR0FBdUJsTCxFQUFhK0osZUFBZWg1RSxJQUNwRW02RSxFQUFTbHhELEtBQUksU0FBQ21tQixHQUFELE9BQWlCQSxFQUFFSyxTQUFTNS9DLE9BQVMsRUFBSSxFQUFJdS9DLEVBQUV4NUMsU0FDNUR1a0YsRUFBU3psRSxNQUFLLFNBQUNySyxFQUErQitCLEdBQWhDLE9BQWtFQSxFQUFFN2MsTUFBUzhhLEVBQUU5YSxTQUU3RmhCLEtBQUtvaUUsVUFBWSxLQUNqQnBpRSxLQUFLb2lFLFVBQVVueEQsS0FBSyxDQUFDalIsS0FBS3dnRixTQUFTcFgsTUFBUSxFQUFHcHBFLEtBQUt3Z0YsU0FBUzVlLE9BQVMsSUFDaEV3RSxXQUFXcG1FLEtBQUt3Z0YsU0FBU29OLGFBQzlCNXRGLEtBQUt5UixLQUFPelIsS0FBS29pRSxVQUFVd3BCLEdBQVUvbUIsY0FFaEM3a0UsS0FBS3dnRixTQUFTMEosU0FDZmxxRixLQUFLd2dGLFNBQVMwSixPQUFTbHFGLEtBQUt5UixLQUFLLEdBQUdtd0QsUUF0QlEsV0F5QjdCNWhFLEtBQUt5UixNQXpCd0IsSUF5QmhELDJCQUE4QixLQUFuQm96RSxFQUFtQixRQUMxQjdrRixLQUFLb3VGLHFCQUFxQnRvRixJQUFJKytFLEVBQUtwekUsS0FBaUIsUUFBWCxFQUFBb3pFLEVBQUsxL0QsY0FBTSxlQUFFMVQsT0ExQlYsOEJBNkJoRHpSLEtBQUtzdUYsWUFBY3R1RixLQUFLeVIsS0FBSyxHQUU3QnpSLEtBQUt1dUYsV0FBYyxLQUNkbnBFLE9BQU8sQ0FBQyxFQUFHcGxCLEtBQUt3Z0YsU0FBUzBKLFNBRXpCcmlCLE1BQU0sQ0FBQzduRSxLQUFLd2dGLFNBQVNxTixVQUFXN3RGLEtBQUt3Z0YsU0FBU3NOLFlBRTlDL3ZCLFlBQVksSUFHakIvOUQsS0FBSzhyRixZQUFjLEdBQVU5ckYsS0FBS3VkLFNBQzdCcTFCLE9BQU8sT0FDUHFZLEtBQUssUUFBUyxlQUNkM2hDLE1BQU0sV0FBWSxZQUNsQkEsTUFBTSxRQUFTdHBCLEtBQUt3Z0YsU0FBU3BYLE1BQVEsTUFDckM5L0MsTUFBTSxTQUFVLFFBQ2hCQSxNQUFNLG1CQUFvQnRwQixLQUFLd2dGLFNBQVN1TixrQkFFN0MvdEYsS0FBS3dtRSxRQUFVLEdBQVV4bUUsS0FBS3VkLFNBQ3pCcTFCLE9BQU8sT0FDUHRwQixNQUFNLFdBQVksWUFDbEJBLE1BQU0sUUFBU3RwQixLQUFLd2dGLFNBQVNwWCxNQUFRLE1BQ3JDOS9DLE1BQU0sU0FBVXRwQixLQUFLd2dGLFNBQVM1ZSxPQUFTLE1BRTVDNWhFLEtBQUt3dUYsT0FBT3h1RixLQUFLc3VGLGEsMkNBR2QsU0FBT3ZLLEVBQWtCQyxHQUM1QmhrRixLQUFLd2dGLFNBQVNwWCxNQUFRMmEsRUFDdEIvakYsS0FBS3dnRixTQUFTNWUsT0FBU29pQixFQUN2QmhrRixLQUFLb2lFLFVBQVVueEQsS0FBSyxDQUFDOHlFLEVBQVcsRUFBR0MsRUFBWSxJQUUvQ2hrRixLQUFLOHJGLFlBQVl4aUUsTUFBTSxRQUFTdHBCLEtBQUt3Z0YsU0FBU3BYLE1BQVEsTUFDdERwcEUsS0FBS3dtRSxRQUFRbDlDLE1BQU0sUUFBU3RwQixLQUFLd2dGLFNBQVNwWCxNQUFRLE1BQ2xEcHBFLEtBQUt3bUUsUUFBUWw5QyxNQUFNLFNBQVV0cEIsS0FBS3dnRixTQUFTNWUsT0FBUyxNQUVwRDVoRSxLQUFLd3VGLE9BQU94dUYsS0FBS3N1RixhQUFhLEsseUJBRzFCLFdBQW9DLElBQXhCdHpFLEVBQXdCLDREQUFUbmEsRUFDekIwdUIsRUFBUyxJQUFJbytELEdBQ25CLE9BQU83cUYsT0FBTzhrQixPQUFPMkgsRUFBUXZVLEsscUJBR3pCLFdBQ0osSUFBSW14RSxFQUFlbnNGLEtBQUt3Z0YsU0FBU25ELFVBQ2pDcjlFLEtBQUt1ZCxRQUFROC9ELFdBQWEsSUFBTThPLEVBRWhDLElBQU1DLEVBQWVwc0YsS0FBS3VkLFFBQVF5a0MsY0FBYzNwQyxjQUFjLFNBQzlEK3pFLEVBQWE1aUUsWUFBWXhwQixLQUFLdWQsUUFBUXlrQyxjQUFjdjhCLGVBQTNCLHlCQUNsQjBtRSxFQURrQiwyRkFJbEJBLEVBSmtCLGtWQWNsQkEsRUFka0Isa0dBaUJsQkEsRUFqQmtCLDJSQXlCTEEsRUF6QkssaUdBNEJsQkEsRUE1QmtCLG9GQStCbEJBLEVBL0JrQiwyR0FrQ2xCQSxFQWxDa0IseUlBdUN6Qm5zRixLQUFLdWQsUUFBUXlrQyxjQUFjNTlCLEtBQUt3dUIsT0FBT3c1QyxLLG9CQUduQyxTQUFPMzZFLEdBQW9ELFdBQS9CZzlFLElBQStCLHlEQUMvRHp1RixLQUFLc3VGLFlBQWM3OEUsRUFFbkJ6UixLQUFLeXNGLGlCQUVMLElBQU1iLEVBQVcsR0FBdUJuNkUsRUFBS0EsTUFDN0NtNkUsRUFBU2x4RCxLQUFJLFNBQUNtbUIsR0FBRCxPQUFpQkEsRUFBRUssU0FBUzUvQyxPQUFTLEVBQUksRUFBSXUvQyxFQUFFeDVDLFNBRTVEdWtGLEVBQVN6bEUsTUFBSyxTQUFDckssRUFBK0IrQixHQUFoQyxPQUFrRUEsRUFBRTdjLE1BQVM4YSxFQUFFOWEsU0FFN0YsSUFBSStwRCxFQUFRL3FELEtBQUt3bUUsUUFBUXpkLFVBQXNDLFNBQzFEdDNDLEtBQ0d6UixLQUFLb2lFLFVBQVV3cEIsR0FBVS9tQixlQUN6QixTQUFDaGtCLEdBQUQsT0FBc0JBLEVBQUVwdkMsS0FBS1ksS0FBT3d1QyxFQUFFcHZDLEtBQUtZLEtBQU8sRUFBS2c4RSxXQUd6REssRUFBVzNqQyxFQUFNemxDLFFBQ2xCc3RCLE9BQU8sT0FDUHFZLEtBQUssUUFBUyxRQUNkM2hDLE1BQU0sY0FBYyxTQUFDdTNCLEdBQUQsT0FBc0IsRUFBSzB0QyxXQUFXLEVBQUsvTixTQUFTeU4sU0FBU3B0QyxPQUNqRnYzQixNQUFNLFNBQVMsU0FBQ3UzQixHQUFELE9BQXNCa3FDLEdBQVdtQyxvQkFBb0IsRUFBS3FCLFdBQVcsRUFBSy9OLFNBQVN5TixTQUFTcHRDLElBQUlqeEMsZUFDL0cwWixNQUFNLE9BQVEsT0FDZEEsTUFBTSxNQUFPLE9BQ2JBLE1BQU0sUUFBUyxPQUNmQSxNQUFNLFNBQVUsT0FDaEI4aEMsTUFBSyxTQUFDdkssR0FBRCxPQUFzQixFQUFLMi9CLFNBQVM4SixTQUFTenBDLEVBQUVwdkMsU0FDcERpMkMsR0FBRyxTQUFTLFNBQUNwMkIsRUFBbUJ1dkIsR0FBcEIsT0FBeUMsRUFBSzJ0QyxPQUFPM3RDLE1BQ2pFNkcsR0FBRyxlQUFlLFNBQUNwMkIsRUFBbUJ1dkIsR0FDbkN2dkIsRUFBTWtoRCxpQkFDRixFQUFLOGIsWUFBWW5wRSxRQUNqQixFQUFLcXBFLE9BQU8sRUFBS0YsWUFBWW5wRSxXQUdwQ3VpQyxHQUFHLGFBQWEsU0FBQ3AyQixFQUFtQnV2QixHQUFwQixPQUF5QyxFQUFLaXNDLFVBQVV4N0QsRUFBT3V2QixNQUMvRTZHLEdBQUcsYUFBYSxTQUFDcDJCLEVBQW1CdXZCLEdBQXBCLE9BQXlDLEVBQUsrZ0MsWUFBWXR3RCxFQUFPdXZCLE1BQ2pGNkcsR0FBRyxZQUFZLFNBQUNwMkIsRUFBbUJ1dkIsR0FBcEIsT0FBeUMsRUFBS2tzQyxXQUFXejdELEVBQU91dkIsTUFHcEY2dEMsRUFBU3prQyxNQUFNYyxHQUNWYixRQUNBMEcsYUFDQXJzRCxNQUFLLFNBQUNxc0QsR0FDSEEsRUFBV3RuQyxNQUFNLFFBQVEsU0FBQ3UzQixHQUFELE9BQXNCQSxFQUFFZ2hCLEdBQUssUUFDdERqUixFQUFXdG5DLE1BQU0sT0FBTyxTQUFDdTNCLEdBQUQsT0FBc0JBLEVBQUVpaEIsR0FBSyxRQUNyRGxSLEVBQVd0bkMsTUFBTSxTQUFTLFNBQUN1M0IsR0FBRCxPQUFzQjkyQyxLQUFLbW9CLElBQUksRUFBSTJ1QixFQUFFa2hCLEdBQUtsaEIsRUFBRWdoQixHQUFNLEdBQUssUUFDakZqUixFQUFXdG5DLE1BQU0sVUFBVSxTQUFDdTNCLEdBQUQsT0FBc0I5MkMsS0FBS21vQixJQUFJLEVBQUkydUIsRUFBRW1oQixHQUFLbmhCLEVBQUVpaEIsR0FBTSxHQUFLLFdBRzFGL1csRUFBTTFsQyxPQUFPcWdDLFNBRVQrb0MsR0FDQXp1RixLQUFLd2dGLFNBQVMySixlQUFlbnFGLEtBQUtzdUYsWUFBWTc4RSxRLDRCQUs5QyxXQUdKLElBSGtCLFdBQ2RnOEUsRUFBcUIsR0FDckJ0a0UsRUFBNkJucEIsS0FBS3N1RixZQUFZNzhFLEtBQzNDMFgsR0FDSHNrRSxFQUFPbGhGLEtBQUs0YyxHQUNaQSxFQUFPbnBCLEtBQUtvdUYscUJBQXFCanFGLElBQUlnbEIsR0FFekNza0UsRUFBTzNsRixVQUVQOUgsS0FBSzhyRixZQUFZeGpFLEtBQUssSUFDdEJ0b0IsS0FBSzhyRixZQUFZL2lDLFVBQVUsVUFDdEJ0M0MsS0FBS2c4RSxHQUNMbm9FLFFBQ0FzdEIsT0FBTyxRQUNQcVksS0FBSyxRQUFTLFNBQ2RBLEtBQUssU0FBUyxTQUFDcEssR0FBRCxPQUFpQixFQUFLMi9CLFNBQVN3TixxQkFBcUJudEMsTUFDbEV2NEIsTUFBSyxTQUFDdTRCLEdBQUQsbUNBQXVDQSxFQUFFci9DLEtBQXpDLGNBQ0xrbUQsR0FBRyxTQUFTLFNBQUNwMkIsRUFBbUJ1dkIsR0FDN0IsRUFBSzJ0QyxPQUFPLEVBQUsvOEUsS0FBS3BFLFFBQU8sU0FBQ3czRSxHQUFELE9BQXlCQSxFQUFLcHpFLEtBQUtZLEtBQU93dUMsRUFBRXh1QyxNQUFJLFMsdUJBSWpGLFNBQVVpZixFQUFtQnV2QixHQUM3QjdnRCxLQUFLd2dGLFNBQVNqSCxnQkFBa0J2NUUsS0FBS2dnRixTQUNyQ2hnRixLQUFLZ2dGLFFBQVExM0QsS0FBS3RvQixLQUFLd2dGLFNBQVN2QyxXQUFXcDlCLEVBQUVwdkMsT0FDeEM2WCxNQUFNLE1BQVFnSSxFQUFNdWpELE1BQVEsR0FBTSxNQUNsQ3ZyRCxNQUFNLE9BQVNnSSxFQUFNc2pELE1BQVEsR0FBTSxNQUNuQ3RyRCxNQUFNLGFBQWMsYSx5QkFJekIsU0FBWWdJLEVBQW1CdXZCLEdBQy9CN2dELEtBQUt3Z0YsU0FBU2pILGdCQUFrQnY1RSxLQUFLZ2dGLFNBQ3JDaGdGLEtBQUtnZ0YsUUFDQTEyRCxNQUFNLE1BQVFnSSxFQUFNdWpELE1BQVEsR0FBTSxNQUNsQ3ZyRCxNQUFNLE9BQVNnSSxFQUFNc2pELE1BQVEsR0FBTSxRLHdCQUl4QyxTQUFXdGpELEVBQW1CdXZCLEdBQzlCN2dELEtBQUt3Z0YsU0FBU2pILGdCQUFrQnY1RSxLQUFLZ2dGLFNBQ3JDaGdGLEtBQUtnZ0YsUUFBUTEyRCxNQUFNLGFBQWMsZSwrdkJDblA3QyxJQUFNcWxFLEc5Q0RTLFNBQVNDLElBQ3RCLElBQUl4dEYsRUFBUSxJQUFJd2hELElBQ1p4OUIsRUFBUyxHQUNUeWlELEVBQVEsR0FDUlEsRUFBVTJELEdBRWQsU0FBU3BjLEVBQU0vTyxHQUNiLElBQUk1L0MsRUFBTTQvQyxFQUFJLEdBQUk3NEMsRUFBSTVHLEVBQU0rQyxJQUFJbEQsR0FDaEMsSUFBSytHLEVBQUcsQ0FDTixHQUFJcWdFLElBQVkyRCxHQUFVLE9BQU8zRCxFQUNqQ2puRSxFQUFNMEUsSUFBSTdFLEVBQUsrRyxFQUFJb2QsRUFBTzdZLEtBQUtzMEMsSUFFakMsT0FBT2duQixHQUFPNy9ELEVBQUksR0FBSzYvRCxFQUFNdm1FLFFBNEIvQixPQXpCQXN1RCxFQUFNeHFDLE9BQVMsU0FBU3VtQyxHQUN0QixJQUFLM2lELFVBQVUxSCxPQUFRLE9BQU84akIsRUFBT3ZkLFFBQ3JDdWQsRUFBUyxHQUFJaGtCLEVBQVEsSUFBSXdoRCxJQUN6QixJQUFLLE1BQU01aEQsS0FBUzJxRCxFQUFHLENBQ3JCLE1BQU0xcUQsRUFBTUQsRUFBUSxHQUNoQkksRUFBTVcsSUFBSWQsSUFDZEcsRUFBTTBFLElBQUk3RSxFQUFLbWtCLEVBQU83WSxLQUFLdkwsSUFFN0IsT0FBTzR1RCxHQUdUQSxFQUFNaVksTUFBUSxTQUFTbGMsR0FDckIsT0FBTzNpRCxVQUFVMUgsUUFBVXVtRSxFQUFRbG5FLE1BQU0wSixLQUFLc2hELEdBQUlpRSxHQUFTaVksRUFBTWhnRSxTQUduRStuRCxFQUFNeVksUUFBVSxTQUFTMWMsR0FDdkIsT0FBTzNpRCxVQUFVMUgsUUFBVSttRSxFQUFVMWMsRUFBR2lFLEdBQVN5WSxHQUduRHpZLEVBQU0vRCxLQUFPLFdBQ1gsT0FBTytpQyxFQUFReHBFLEVBQVF5aUQsR0FBT1EsUUFBUUEsSUFHeENTLEdBQVU5NkQsTUFBTTRoRCxFQUFPNW1ELFdBRWhCNG1ELEU4Q3ZDaUIsQ0FBYSxJQUVsQmkvQixHLHVwQkFBckIsc0MsMkJBSUlDLFlBQXNCLEVBS3RCLEVBQUFDLFlBQXNCLElBS3RCLEVBQUFDLHFCQUErQixFQU8vQixFQUFBQyxrQkFBNEIsRUFLNUIsRUFBQUMsZ0JBQTBCLEdBSzFCLEVBQUFDLGVBQXlCLEVBS3pCLEVBQUFDLGtCQUE0QixFQUs1QixFQUFBQyxpQkFBMkIsRUFLM0IsRUFBQUMsY0FBd0IsRUFLeEIsRUFBQUMsYUFBdUIsSUFLdkIsRUFBQWhTLGtCQUE0QixJQVE1QixFQUFBaVMsY0FBNkMsU0FBQzN1QyxHQUMxQyxPQUFJQSxFQUFFNHVDLGFBQ0s1dUMsRUFBRUssU0FBUzUvQyxPQUFTLEVBQUl1L0MsRUFBRXFyQyxZQUFjLE9BQVMsT0FFakQsUUFVZixFQUFBd0QsZ0JBQ0ksU0FBQzd1QyxHQUFELE9BQXFCQSxFQUFFNHVDLGNBQWdCNXVDLEVBQUVxckMsWUFBd0IsUUFRckUsRUFBQXlELGdCQUNJLFNBQUNwMEIsR0FBRCxPQUF5Q0EsRUFBRXJuRCxPQUFPekMsS0FBS2crRSxhQUFlbDBCLEVBQUV0eEQsT0FBT3dILEtBQUt5NkUsV0FBYSxRQVNyRyxFQUFBMEQsY0FBNkMsU0FBQy91QyxHQUFELE9BQXFCOHRDLEdBQWtCOXRDLEVBQUVyL0MsT0FTdEYsRUFBQThvRixTQUF3QyxTQUFDenBDLEdBQUQsT0FBcUJBLEVBQUVyL0MsTUFTL0QsRUFBQXk4RSxXQUVjLFNBQUNqOUUsR0FDWCxrcUJBbUJjLEVBQUttOUUsZ0JBQWdCbjlFLEdBbkJuQyw4RUFzQmMsRUFBS285RSxlQUFlcDlFLEdBdEJsQyx5REFxQ0osRUFBQW05RSxnQkFBbUQsU0FBQ245RSxHQUFELE9BQXlCQSxFQUFNUSxNQVNsRixFQUFBNDhFLGVBQThDLFNBQUMxNkQsR0FBRCxnQkFBd0JBLEVBQUVyYyxNQUExQixVQXBLbEQsRSxVQUE4Q2l5RSxJLDBRQ1B6QnVXLEcsV0FDakIsYUFFOEMsSUFEekJwK0UsRUFDeUIsdURBRGIsR0FDckJnMEUsRUFBa0Msa0RBRHpCLEtBQUFoMEUsT0FDVCxLQUFBZzBFLGFBRVJ6bEYsS0FBSzh2RixVLHdDQUdGLFNBQUlqTCxHQUNQN2tGLEtBQUt5UixLQUFLbEYsS0FBS3M0RSxHQUNmN2tGLEtBQUsrdkYsU0FBUy92RixLQUFLeVIsS0FBS25RLE9BQVMsSyxrQkFHOUIsV0FDSCxPQUFPdEIsS0FBS3lSLEtBQUssSyxvQkFHZCxXQUNILElBQU04ZCxFQUFTdnZCLEtBQUt5UixLQUFLLEdBU3pCLE9BUEl6UixLQUFLeVIsS0FBS25RLE9BQVMsR0FDbkJ0QixLQUFLeVIsS0FBSyxHQUFLelIsS0FBS3lSLEtBQUs2akMsTUFDekJ0MUMsS0FBS2d3RixLQUFLLElBRVZod0YsS0FBS3lSLEtBQUs2akMsTUFHUC9sQixJLG1CQUdKLFdBQ0h2dkIsS0FBS3lSLEtBQUtrQixPQUFPLEVBQUczUyxLQUFLeVIsS0FBS25RLFUsa0JBRzNCLFdBQ0gsT0FBT3RCLEtBQUt5UixLQUFLblEsUyxxQkFHYixXQUNKLElBQUssSUFBSTBHLEVBQUkrQixLQUFLMFUsT0FBT3plLEtBQUt5UixLQUFLblEsT0FBUyxHQUFLLEdBQUkwRyxHQUFLLEVBQUdBLElBQ3pEaEksS0FBS2d3RixLQUFLaG9GLEssc0JBSVYsU0FBUzVHLEdBR2IsSUFGQSxJQUFNSixFQUFRaEIsS0FBS3lSLEtBQUtyUSxHQUVqQkEsRUFBUSxHQUFHLENBQ2QsSUFBTTZ1RixFQUFjbG1GLEtBQUswVSxPQUFPcmQsRUFBUSxHQUFLLEdBQ3ZDK2pCLEVBQVNubEIsS0FBS3lSLEtBQUt3K0UsR0FFekIsS0FBSWp3RixLQUFLeWxGLFdBQVd6a0YsRUFBT21rQixHQUFVLEdBR2pDLE1BRkFubEIsS0FBS3lSLEtBQUtyUSxHQUFTK2pCLEVBS3ZCL2pCLEVBQVE2dUYsRUFJWixPQURBandGLEtBQUt5UixLQUFLclEsR0FBU0osRUFDWkksSSxrQkFHSCxTQUFLQSxHQUlULElBSEEsSUFBTUosRUFBUWhCLEtBQUt5UixLQUFLclEsR0FDbEI2UCxFQUFPalIsS0FBS3lSLEtBQUtuUSxPQUVoQixFQUFJRixFQUFRLEVBQUk2UCxHQUFNLENBQ3pCLElBQUl1TSxFQUFjLEVBQUlwYyxFQUFRLEVBSzlCLEdBSklvYyxFQUFjdk0sRUFBTyxHQUFLalIsS0FBS3lsRixXQUFXemxGLEtBQUt5UixLQUFLK0wsRUFBYyxHQUFJeGQsS0FBS3lSLEtBQUsrTCxJQUFnQixHQUNoR0EsSUFHQXhkLEtBQUt5bEYsV0FBV3prRixFQUFPaEIsS0FBS3lSLEtBQUsrTCxLQUFpQixFQUNsRCxNQUdKeGQsS0FBS3lSLEtBQUtyUSxHQUFTcEIsS0FBS3lSLEtBQUsrTCxHQUM3QnBjLEVBQVFvYyxFQUlaLE9BREF4ZCxLQUFLeVIsS0FBS3JRLEdBQVNKLEVBQ1pJLE8sazdEQ2pGTTh1RixHLDJwQkFBckIsc0MsMkJBQ1dDLGlCQUE2QyxDQUFFenNFLEVBQUcsRUFBR3VKLEVBQUcsR0FFdkQsRUFBQW1qRSxVQUFvQixFQUNwQixFQUFBQyxXQUFxQixFQUNyQixFQUFBN3BELE1BQWdCLEdBTDVCLEUsd0NBT1csV0FDSCxPQUFPeG1DLEtBQUtxd0YsWSwwQkFHVCxTQUFhcnZGLEdBQ2hCaEIsS0FBS3F3RixVQUFZcnZGLEksd0JBR2QsV0FDSCxPQUFPaEIsS0FBS293RixXLHNCQUdULFdBQ0gsT0FBT3B3RixLQUFLd21DLFEseUJBUVQsU0FBWXhsQyxHQUNmaEIsS0FBS293RixTQUFXcHZGLEVBRGEsV0FFVGhCLEtBQUtraEQsVUFGSSxJQUU3QiwyQkFBbUMsUUFDUG92QyxZQUFZdHZGLEdBSFgsaUMseUJBVTFCLFdBQVcsV0FDT2hCLEtBQUtraEQsVUFEWixJQUNkLDJCQUF1RCxLQUE1QzhCLEVBQTRDLFFBQ25EQSxFQUFNdXRDLGNBQWEsR0FDbkJ2dEMsRUFBTXd0QyxlQUhJLGlDLHNCQVVYLFdBQVEsV0FDVXh3RixLQUFLa2hELFVBRGYsSUFDWCwyQkFBdUQsUUFDN0NxdkMsY0FBYSxHQUZaLGlDLHVCQVNSLFdBQ0h2d0YsS0FBS3l3RixPQUFPLE8sb0JBUVQsU0FBT3pvRixHQUNWLEdBQUlBLEVBQUksR0FDQWhJLEtBQUtraEQsU0FBUzUvQyxPQUFTLEVBQUcsWUFDTHRCLEtBQUtraEQsVUFEQSxJQUMxQiwyQkFBdUQsS0FBNUM4QixFQUE0QyxRQUNuREEsRUFBTXV0QyxjQUFhLEdBQ25CdnRDLEVBQU15dEMsT0FBT3pvRixFQUFJLElBSEssa0Msc0JBYy9CLFNBQVN3K0IsR0FDWnhtQyxLQUFLd21DLE1BQVFBLEVBRFksV0FFSnhtQyxLQUFLa2hELFVBRkQsSUFFekIsMkJBQXVELFFBQzdDd3ZDLFNBQVNscUQsR0FITSxvQyxxQkFsRlN5YSxHLHNSQ0NyQjB2QyxHLGlMQUdWLFNBQWVsL0UsR0FDbEIsSUFBTXl2QyxFQUEyQixHQUVqQyxHQUFJenZDLEVBQUt5dkMsU0FBVSxTLDA1QkFBQSxDQUNLenZDLEVBQUt5dkMsVUFEVixJQUNmLDJCQUFtQyxLQUF4QjhCLEVBQXdCLFFBQy9COUIsRUFBUzMwQyxLQUFLdk0sS0FBS3lxRixlQUFlem5DLEtBRnZCLCtCQU1uQixPQUFPLElBQUlrdEMsR0FDUHorRSxFQUFLWSxNQUFRcytFLEVBQXFCakcsVUFDbENqNUUsRUFBS2pRLE1BQVEsR0FDYjAvQyxFQUNBenZDLEVBQUtwSyxNQUNMb0ssRUFBSzB2QyxVQUNMMXZDLEVBQUtpZSxZLHdZQWpCRSxHQUFBZzdELFVBQW9CLEUsSUNRbEJrRyxHLFdBcUJqQixXQUNxQnJ6RSxFQUNqQjlMLEdBQ2tELFdBQWxEdUosRUFBa0QsdURBQXRCLElBQUk2ekUsR0FBa0IsV0FGakMsS0FBQXR4RSxVQWpCYixLQUFBOHdFLE9BQWlCLEVBWWpCLEtBQUF3QyxVQUFvQixFQVN4Qjd3RixLQUFLd2dGLFNBQVd4Z0YsS0FBS3lnRixZQUFZemxFLEdBRTdCaGIsS0FBS3dnRixTQUFTakgsaUJBQ2R2NUUsS0FBS2dnRixRQUFVMkssR0FBaUIzSixlQUdwQyxJQUFNOFAsRUFBZ0IsSUFBSUgsR0FDcEJsRixFQUFnQnFGLEVBQWNyRyxlQUFlaDVFLEdBRTdDbTZFLEVBQVcsR0FBMkJILEdBRzVDRyxFQUFTbHhELEtBQUksU0FBQ21tQixHQUFELE9BQXFCQSxFQUFFSyxTQUFTNS9DLE9BQVMsRUFBSSxFQUFJdS9DLEVBQUV4NUMsU0FFaEVySCxLQUFLK3dGLFdBQWEsS0FDYmxwQixNQUFNLENBQUM3bkUsS0FBS3dnRixTQUFTc08sWUFBYTl1RixLQUFLd2dGLFNBQVN1TyxjQUVyRC91RixLQUFLZ3hGLFdBQWEsS0FDYjl0QixTQUFTLENBQUMsRUFBRyxLQUNiRCxZQUFXLFNBQUNubkQsRUFBc0IrQixHQUMvQixHQUFJL0IsRUFBRXJLLEtBQUt3L0UsZUFBaUJwekUsRUFBRXBNLEtBQUt3L0UsY0FDL0IsT0FBTyxFQUVYLElBQ01DLEdBRFMsRUFBS0MsZ0JBQWdCcjFFLEdBQUssRUFBS3ExRSxnQkFBZ0J0ekUsSUFDckMsRUFBSSxFQUM3QixPQUFRL0IsRUFBRXFKLFNBQVd0SCxFQUFFc0gsT0FBVStyRSxFQUFXQSxFQUFXLEtBRy9EbHhGLEtBQUt5UixLQUFPelIsS0FBS2d4RixXQUFXcEYsR0FBVS9tQixjQUN0QzdrRSxLQUFLTixLQUFPTSxLQUFLeVIsS0FBSyxHQUV0QnpSLEtBQUt1ZCxRQUFRNG9DLFVBQVksR0FFekJubUQsS0FBS21qRCxJQUFNLEdBQVVuakQsS0FBS3VkLFNBQ3JCcTFCLE9BQU8sT0FDUHFZLEtBQUssVUFBVyxPQUNoQkEsS0FBSyxRQUFTLDhCQUNkQSxLQUFLLFVBSkMsY0FJaUJqckQsS0FBS3dnRixTQUFTcFgsTUFKL0IsWUFJd0NwcEUsS0FBS3dnRixTQUFTNWUsU0FDNUQzVyxLQUFLLFFBQVNqckQsS0FBS3dnRixTQUFTcFgsT0FDNUJuZSxLQUFLLFNBQVVqckQsS0FBS3dnRixTQUFTNWUsUUFDN0J0NEMsTUFBTSxjQUFlLGtEQUUxQnRwQixLQUFLb3hGLGFBQWUsS0FDZi9hLE9BQU8sQ0FBQyxDQUFDLEVBQUcsR0FBSSxDQUFDcjJFLEtBQUt3Z0YsU0FBU3BYLE1BQU9wcEUsS0FBS3dnRixTQUFTNWUsVUFDcERpVixZQUFZLENBQUMsR0FBSyxJQUNsQm52QixHQUFHLFFBQVEsU0FBQ3AyQixHQUNULEVBQUt1L0QsVUFBWXYvRCxFQUFNNitCLFVBQVVqaEMsRUFDakMsRUFBS3l5RCxXQUFXMTJCLEtBQUssWUFBYTM1QixFQUFNNitCLFVBQVV2Z0QsZUFHMUQ1UCxLQUFLMmhGLFdBQWEzaEYsS0FBS21qRCxJQUFJNStDLEtBQUt2RSxLQUFLb3hGLGNBQWN4K0MsT0FBTyxLQUUxRDV5QyxLQUFLd3VGLE9BQU94dUYsS0FBS04sTSxnREFHYixXQUFvQyxJQUF4QnNiLEVBQXdCLDREQUFUbmEsRUFDekIwdUIsRUFBUyxJQUFJcy9ELEdBQ25CLE9BQU8vckYsT0FBTzhrQixPQUFPMkgsRUFBUXZVLEssb0JBR3pCLFNBQU90YixHQUF1QixJLEVBQUEsT0FDbENNLEtBQUsrd0YsV0FBVzNyRSxPQUFPLENBQUMsRUFBRzFsQixFQUFLK1IsS0FBS3BLLFFBRXJDckgsS0FBS04sS0FBT0EsRUFFWk0sS0FBS04sS0FBS2drQixFQUFJMWpCLEtBQUt3Z0YsU0FBUzVlLE9BQVMsRUFDckM1aEUsS0FBS04sS0FBS3V0QixFQUFJLEVBRWRqdEIsS0FBS04sS0FBSytSLEtBQUs2K0UsYUFBWSxHQUVULFFBQWxCLEVBQUF0d0YsS0FBS04sS0FBS3doRCxnQkFBUSxTQUFFcjJDLFNBQVEsU0FBQ2cyQyxFQUFzQjc0QyxHQUMvQzY0QyxFQUFFcHZDLEtBQUtpL0UsU0FBUyxFQUFLbFEsU0FBU29QLGNBQWMvdUMsRUFBRXB2QyxVQUc5Q3pSLEtBQUt3Z0YsU0FBU3dPLHFCQUNkaHZGLEtBQUtOLEtBQUsrUixLQUFLKytFLGNBQ2Z4d0YsS0FBS3F4RixjQUFjcnhGLEtBQUtOLE9BRXhCTSxLQUFLTixLQUFLK1IsS0FBSzYvRSxZQUduQnR4RixLQUFLNmhELE9BQU9uaUQsR0FDWk0sS0FBS3V4RixXQUFXN3hGLEssd0JBR1osU0FBV3dVLEdBQXlCLGFBQzNCLEVBQUVBLEVBQU8rWSxHQUFJL1ksRUFBT3dQLEdBQTVCQSxFQURtQyxLQUNoQ3VKLEVBRGdDLEtBR3hDdkosRUFBSUEsRUFBSTFqQixLQUFLNndGLFVBQVk3d0YsS0FBS3dnRixTQUFTcFgsTUFBUSxFQUMvQ244QyxFQUFJQSxFQUFJanRCLEtBQUs2d0YsVUFBWTd3RixLQUFLd2dGLFNBQVM1ZSxPQUFTLEVBRWhENWhFLEtBQUsyaEYsV0FDQS93QixhQUNBMUMsU0FBU2x1RCxLQUFLd2dGLFNBQVNqRCxtQkFDdkJ0eUIsS0FBSyxZQUhWLG9CQUdvQ3ZuQyxFQUhwQyxZQUd5Q3VKLEVBSHpDLGtCQUdvRGp0QixLQUFLNndGLFVBSHpELE1BSUtucEMsR0FBRyxPQUFPLGtCQUFNLEVBQUswcEMsYUFBYWpoQyxVQUFVLEVBQUtoTixJQUFLLGFBQTBCei9CLEVBQUd1SixHQUFHMmlDLE1BQU0sRUFBS2loQyxpQiwyQkFHbEcsU0FBY254RixHLFFBQ2xCLEdBQUtNLEtBQUt3Z0YsU0FBU3lPLGlCQUFuQixDQUtBdnZGLEVBQUsrUixLQUFLZy9FLE9BQU8sR0FHakIsSUFGQSxJQUFJZSxFQUFlOXhGLEVBQUsrUixLQUFLcEssT0FBU3JILEtBQUt3Z0YsU0FBU3lPLGlCQUFtQmp2RixLQUFLd2dGLFNBQVMwTyxnQkFBa0IsSUFDakd1QyxFQUFLLElBQUk1QixHLGdEQUFxQ253RixFQUFLd2hELFVBQVksSyxnakJBQU0sU0FBQ3BsQyxFQUFzQitCLEdBQXZCLE9BQWdEQSxFQUFFcE0sS0FBS3BLLE1BQVF5VSxFQUFFckssS0FBS3BLLFNBQzFJbXFGLEVBQWUsR0FBS0MsRUFBR3hnRixPQUFTLEdBQUcsQ0FDdEMsSUFBTXlnRixFQUFXRCxFQUFHL3JDLFNBQ3BCOHJDLEdBQWdCRSxFQUFTamdGLEtBQUtwSyxNQUM5QnFxRixFQUFTamdGLEtBQUtnL0UsT0FBTyxHQUNKLFFBQWpCLEVBQUFpQixFQUFTeHdDLGdCQUFRLFNBQUVyMkMsU0FBUSxTQUFDZzJDLEVBQXNCNzRDLEdBQzlDeXBGLEVBQUc5L0UsSUFBSWt2QyxZQVpYbmhELEVBQUsrUixLQUFLZy9FLE9BQU96d0YsS0FBS3dnRixTQUFTMk8sa0Isb0JBaUIvQixTQUFPajdFLEdBQXlCLFdBRTlCeTlFLEVBQVMzeEYsS0FBS2d4RixXQUFXaHhGLEtBQUtOLE1BQzlCcXJELEVBQTZCNG1DLEVBQU85c0IsY0FBYy84RCxVQUFVdUYsUUFBTyxTQUFDd3pDLEdBQUQsT0FBMkJBLEVBQUVwdkMsS0FBS3cvRSxpQkFDckdsc0IsRUFBNkI0c0IsRUFBTzVzQixRQUFRMTNELFFBQU8sU0FBQ3d6QyxHQUFELE9BQTJCQSxFQUFFNTJDLE9BQU93SCxLQUFLdy9FLGdCQUFrQnB3QyxFQUFFM3NDLE9BQU96QyxLQUFLdy9FLGlCQUdsSWxtQyxFQUFNbGdELFNBQVEsU0FBQWcyQyxHQUFDLE9BQUlBLEVBQUU1ekIsRUFBSTR6QixFQUFFempDLE1BQVEsRUFBS29qRSxTQUFTK08sZ0JBR2pELElBQU1ockUsRUFBT3ZrQixLQUFLMmhGLFdBQVc1NEIsVUFBMEMsVUFDbEV0M0MsS0FBS3M1QyxHQUFPLFNBQUNsSyxHQUFELE9BQTBCQSxFQUFFcHZDLEtBQUtZLEtBQU93dUMsRUFBRXB2QyxLQUFLWSxLQUFPLEVBQUtnOEUsV0FFeEV1RCxFQUFZcnRFLEVBQUtlLFFBQ2hCc3RCLE9BQU8sS0FDUHFZLEtBQUssUUFBUyxRQUNkM2hDLE1BQU0sU0FBVSxXQUdoQjJoQyxLQUFLLFlBTk0sb0JBTW9CLzJDLEVBQU8rWSxHQUFLLEVBTmhDLFlBTXFDL1ksRUFBT3pDLEtBQUswK0UsaUJBQWlCenNFLEdBQUssRUFOdkUsTUFPWGdrQyxHQUFHLFNBQVMsU0FBQ3AyQixFQUFtQnV2QixHQUFwQixPQUE2QyxFQUFLZ2hDLE1BQU12d0QsRUFBT3V2QixNQUMzRTZHLEdBQUcsYUFBYSxTQUFDcDJCLEVBQW1CdXZCLEdBQXBCLE9BQTZDLEVBQUtpc0MsVUFBVXg3RCxFQUFPdXZCLE1BQ25GNkcsR0FBRyxZQUFZLFNBQUNwMkIsRUFBbUJ1dkIsR0FBcEIsT0FBNkMsRUFBS2tzQyxXQUFXejdELEVBQU91dkIsTUFDbkY2RyxHQUFHLGVBQWUsU0FBQ3AyQixFQUFtQnV2QixHQUFwQixPQUE2QyxFQUFLZ3hDLFdBQVd2Z0UsRUFBT3V2QixNQUV0Rm9KLE1BQU0xbEMsR0FFWHF0RSxFQUFVaC9DLE9BQU8sVUFDWnFZLEtBQUssSUFBSyxNQUNWM2hDLE1BQU0sZUFBZ0IsU0FDdEJBLE1BQU0sVUFBVSxTQUFDdTNCLEdBQUQsT0FBMEIsRUFBSzIvQixTQUFTa1AsZ0JBQWdCN3VDLEVBQUVwdkMsU0FDMUU2WCxNQUFNLFFBQVEsU0FBQ3UzQixHQUFELE9BQTBCLEVBQUsyL0IsU0FBU2dQLGNBQWMzdUMsRUFBRXB2QyxTQUUzRSxJQUFNcWdGLEVBQVcsS0FBaUJqcUIsTUFBTSxDQUFDLEVBQUcsRUFBSTk5RCxLQUFLeWtELEtBRS9DdWpDLEVBQVcsS0FDWm5qQixZQUFZLEdBRVpFLGFBQVksU0FBQ2p1QixHQUNWLE9BQU8sRUFBS3N3QyxnQkFBZ0J0d0MsTUFFL0JtdUIsV0FBVyxHQUNYRSxVQUFTLFNBQUFydUIsR0FFTixPQUFPaXhDLEVBQVNqeEMsRUFBRXB2QyxLQUFLMHZDLFVBQVlOLEVBQUVwdkMsS0FBS3BLLFFBQVUsS0FHeERySCxLQUFLd2dGLFNBQVM2TyxpQkFFZHVDLEVBQVVoL0MsT0FBTyxRQUNacVksS0FBSyxRQUFTLFlBRWRBLEtBQUssSUFBSzhtQyxHQUNWem9FLE1BQU0sUUFBUSxTQUFDdTNCLEdBQUQsT0FBMEIsRUFBSzIvQixTQUFTa1AsZ0JBQWdCN3VDLEVBQUVwdkMsU0FDeEU2WCxNQUFNLGVBQWdCLEdBRzNCdHBCLEtBQUt3Z0YsU0FBUzhPLGNBQ2RzQyxFQUFVaC9DLE9BQU8sUUFDWnFZLEtBQUssS0FBSyxTQUFDcEssR0FBRCxPQUEwQkEsRUFBRUssVUFBWSxHQUFLLE1BQ3ZEK0osS0FBSyxLQUFNLFNBQ1hBLEtBQUssZUFBZSxTQUFDcEssR0FBRCxPQUEwQkEsRUFBRUssU0FBVyxNQUFRLFdBQ25Fa0ssTUFBSyxTQUFDdkssR0FBRCxPQUEwQixFQUFLMi9CLFNBQVM4SixTQUFTenBDLEVBQUVwdkMsU0FDeEQ2WCxNQUFNLE9BQVEsbUJBQ2RBLE1BQU0sZUFBZ0IsTUFJL0IsSUFBTTBvRSxFQUFhSixFQUFVaGhDLGFBQ3hCMUMsU0FBU2x1RCxLQUFLd2dGLFNBQVNqRCxtQkFDdkJ0eUIsS0FBSyxhQUFhLFNBQUNwSyxHQUFELDBCQUF1Q0EsRUFBRTV6QixFQUF6QyxhQUErQzR6QixFQUFFbjlCLEVBQWpELFFBR3ZCc3VFLEVBQVdycEMsT0FBTyxVQUNic0MsS0FBSyxLQUFLLFNBQUNwSyxHQUFELE9BQTBCLEVBQUtzd0MsZ0JBQWdCdHdDLE1BQ3pEdjNCLE1BQU0sZ0JBQWdCLFNBQUN1M0IsR0FBRCxPQUEwQkEsRUFBRUssVUFBWUwsRUFBRUssU0FBUyxHQUFHenZDLEtBQUt3L0UsY0FBZ0IsRUFBSSxLQUNyRzNuRSxNQUFNLFVBQVUsU0FBQ3UzQixHQUFELE9BQTBCLEVBQUsyL0IsU0FBU2tQLGdCQUFnQjd1QyxFQUFFcHZDLFNBQzFFNlgsTUFBTSxRQUFRLFNBQUN1M0IsR0FBRCxPQUEwQixFQUFLMi9CLFNBQVNnUCxjQUFjM3VDLEVBQUVwdkMsU0FFdkV6UixLQUFLd2dGLFNBQVM2TyxpQkFDZDJDLEVBQVdycEMsT0FBTyxhQUNici9CLE1BQU0sZUFBZ0IsR0FHM0J0cEIsS0FBS3dnRixTQUFTOE8sY0FDZDBDLEVBQVdycEMsT0FBTyxRQUNici9CLE1BQU0sZUFBZ0IsR0FJL0IsSUFBTTJvRSxFQUFXMXRFLEVBQUtjLE9BQU91ckMsYUFDeEIxQyxTQUFTbHVELEtBQUt3Z0YsU0FBU2pELG1CQUN2QnR5QixLQUFLLGFBQWEsU0FBQXBLLEdBQUMsMEJBQWlCM3NDLEVBQU8rWSxFQUF4QixZQUE2Qi9ZLEVBQU93UCxFQUFwQyxRQUNuQmdpQyxTQUVMdXNDLEVBQVN0cEMsT0FBTyxVQUNYc0MsS0FBSyxJQUFLLE1BRWZnbkMsRUFBU3RwQyxPQUFPLFFBQ1hyL0IsTUFBTSxlQUFnQixNQUUzQjJvRSxFQUFTdHBDLE9BQU8sUUFDWHIvQixNQUFNLGVBQWdCLE1BSTNCLElBQUkwZCxFQUFPaG5DLEtBQUsyaEYsV0FBVzU0QixVQUFVLGFBQ2hDdDNDLEtBQUtzekQsR0FBTyxTQUFDbGtCLEdBQUQsT0FBMEJBLEVBQUU1MkMsT0FBT3dILEtBQUtZLE1BRW5ENi9FLEV2QzFQZCxTQUFjQyxHQUNaLElBQUlqK0UsRUFBU20rRCxHQUNUcG9FLEVBQVNxb0UsR0FDVDV1RCxFQUFJLEdBQ0p1SixFQUFJLEdBQ0ptdkIsRUFBVSxLQUVkLFNBQVNwVixJQUNQLElBQUloZ0MsRUFBUW9yRixFQUFPLFFBQVdwcEYsV0FBWStqQixFQUFJN1ksRUFBT2xHLE1BQU1oTyxLQUFNb3lGLEdBQU9uaUUsRUFBSWhtQixFQUFPK0QsTUFBTWhPLEtBQU1veUYsR0FHL0YsR0FGS2gyQyxJQUFTQSxFQUFVcDFDLEVBQVMsTUFDakNtckYsRUFBTS8xQyxHQUFVMTRCLEVBQUUxVixNQUFNaE8sTUFBT295RixFQUFLLEdBQUtybEUsRUFBR3FsRSxLQUFTbmxFLEVBQUVqZixNQUFNaE8sS0FBTW95RixJQUFRMXVFLEVBQUUxVixNQUFNaE8sTUFBT295RixFQUFLLEdBQUtuaUUsRUFBR21pRSxLQUFTbmxFLEVBQUVqZixNQUFNaE8sS0FBTW95RixJQUMxSHByRixFQUFRLE9BQU9vMUMsRUFBVSxLQUFNcDFDLEVBQVMsSUFBTSxLQXVCcEQsT0FwQkFnZ0MsRUFBSzl5QixPQUFTLFNBQVN5M0MsR0FDckIsT0FBTzNpRCxVQUFVMUgsUUFBVTRTLEVBQVN5M0MsRUFBRzNrQixHQUFROXlCLEdBR2pEOHlCLEVBQUsvOEIsT0FBUyxTQUFTMGhELEdBQ3JCLE9BQU8zaUQsVUFBVTFILFFBQVUySSxFQUFTMGhELEVBQUcza0IsR0FBUS84QixHQUdqRCs4QixFQUFLdGpCLEVBQUksU0FBU2lvQyxHQUNoQixPQUFPM2lELFVBQVUxSCxRQUFVb2lCLEVBQWlCLG1CQUFOaW9DLEVBQW1CQSxFQUFJLElBQVVBLEdBQUkza0IsR0FBUXRqQixHQUdyRnNqQixFQUFLL1osRUFBSSxTQUFTMCtCLEdBQ2hCLE9BQU8zaUQsVUFBVTFILFFBQVUyckIsRUFBaUIsbUJBQU4wK0IsRUFBbUJBLEVBQUksSUFBVUEsR0FBSTNrQixHQUFRL1osR0FHckYrWixFQUFLb1YsUUFBVSxTQUFTdVAsR0FDdEIsT0FBTzNpRCxVQUFVMUgsUUFBVzg2QyxFQUFlLE1BQUx1UCxFQUFZLEtBQU9BLEVBQUkza0IsR0FBUW9WLEdBR2hFcFYsRUF1QkEsQ0FBS3VyQyxJdUNpTStFN3VELEdBQUUsU0FBQW05QixHQUFDLE9BQUlBLEVBQUU1ekIsS0FBR0EsR0FBRSxTQUFBNHpCLEdBQUMsT0FBSUEsRUFBRW45QixLQUkxR3NqQixFQUFLMWhCLFFBQ0FnbUMsT0FBTyxPQUFRLEtBQ2ZMLEtBQUssUUFBUyxRQUNkM2hDLE1BQU0sT0FBUSxRQUNkQSxNQUFNLGlCQUFrQixPQUN4QkEsTUFBTSxpQkFBa0IsU0FDeEJBLE1BQU0sVUFBVSxTQUFDdTNCLEdBQUQsT0FBMEIsRUFBSzIvQixTQUFTbVAsZ0JBQWdCOXVDLE1BQ3hFdjNCLE1BQU0sZUFBZ0IsTUFFdEIyaEMsS0FBSyxLQUFLLFNBQUNwSyxHQUNSLElBQU1FLEVBQUksQ0FDTnI5QixFQUFHeFAsRUFBT3pDLEtBQUswK0UsaUJBQWlCenNFLEVBQ2hDdUosRUFBRy9ZLEVBQU96QyxLQUFLMCtFLGlCQUFpQmxqRSxHQUlwQyxPQUFPaWxFLEVBQWMsQ0FDakJoK0UsT0FBUTZzQyxFQUNSOTJDLE9BQVE4MkMsT0FJZmtKLE1BQU1qakIsR0FDTjRwQixhQUNBMUMsU0FBU2x1RCxLQUFLd2dGLFNBQVNqRCxtQkFDdkJ0eUIsS0FBSyxJQUFLaW5DLEdBQ1Y1b0UsTUFBTSxTQUFVdHBCLEtBQUt3Z0YsU0FBU21QLGlCQUM5QnJtRSxNQUFNLGdCQUFnQixTQUFDdTNCLEdBQ3BCLE9BQUlBLEVBQUUzc0MsT0FBT3pDLEtBQUtnK0UsYUFDUCxFQUFLc0IsV0FBV2x3QyxFQUFFNTJDLE9BQU93SCxLQUFLcEssT0FBUyxLQUV2QyxTQUtuQjIvQixFQUFLM2hCLE9BQU91ckMsYUFDUDFDLFNBQVNsdUQsS0FBS3dnRixTQUFTakQsbUJBQ3ZCajBELE1BQU0sZUFBZ0IsTUFFdEIyaEMsS0FBSyxLQUFLLFNBQUNwSyxHQUNSLElBQU1FLEVBQUksQ0FDTnI5QixFQUFHeFAsRUFBT3dQLEVBQ1Z1SixFQUFHL1ksRUFBTytZLEdBSWQsT0FBT2lsRSxFQUFjLENBQ2pCaCtFLE9BQVE2c0MsRUFDUjkyQyxPQUFRODJDLE9BR2YyRSxTQUdMcUYsRUFBTWxnRCxTQUFRLFNBQUNnMkMsR0FDWEEsRUFBRXB2QyxLQUFLMCtFLGlCQUFtQixDQUN0QnpzRSxFQUFHbTlCLEVBQUVuOUIsRUFDTHVKLEVBQUc0ekIsRUFBRTV6QixRLDZCQUtULFNBQWdCNHpCLEdBQ3BCLE9BQUlBLEVBQUVwdkMsS0FBS2crRSxhQUNBenZGLEtBQUsrd0YsV0FBV2x3QyxFQUFFcHZDLEtBQUtwSyxPQUFTLEVBRWhDLEksbUJBSVAsU0FBTWlxQixFQUFtQnV2QixHQUN4QjdnRCxLQUFLd2dGLFNBQVN3TyxzQkFJZjE5RCxFQUFNK2dFLG1CQUlOL2dFLEVBQU0rbUQsU0FDTngzQixFQUFFcHZDLEtBQUs2L0UsWUFDQXp3QyxFQUFFSyxVQUFZTCxFQUFFSyxTQUFTNXpDLE1BQUssU0FBQWdTLEdBQUMsT0FBS0EsRUFBRTdOLEtBQUt3L0UsaUJBQ2xEcHdDLEVBQUVwdkMsS0FBSysrRSxjQUVQM3ZDLEVBQUVwdkMsS0FBS2cvRSxPQUFPendGLEtBQUt3Z0YsU0FBUzJPLGdCQUdoQ252RixLQUFLNmhELE9BQU9oQixHQUNaN2dELEtBQUt1eEYsV0FBVzF3QyxPLHVCQUdaLFNBQVV2dkIsRUFBbUJ1dkIsR0FBb0IsV0FDakQ3Z0QsS0FBS3dnRixTQUFTakgsZ0JBQWtCdjVFLEtBQUtnZ0YsVUFDckNoZ0YsS0FBS2dnRixRQUFRMTNELEtBQUt0b0IsS0FBS3dnRixTQUFTdkMsV0FBV3A5QixFQUFFcHZDLE9BQ3hDNlgsTUFBTSxNQUFRZ0ksRUFBTXVqRCxNQUFRLEdBQU0sTUFDbEN2ckQsTUFBTSxPQUFTZ0ksRUFBTXNqRCxNQUFRLEdBQU0sTUFFeEM1MEUsS0FBS3N5RixhQUFlN3lFLE9BQU93UyxZQUFXLGtCQUFNLEVBQUsrdEQsUUFBUTEyRCxNQUFNLGFBQWMsYUFBWSxRLHdCQUl6RixTQUFXZ0ksRUFBbUJ1dkIsR0FDOUI3Z0QsS0FBS3dnRixTQUFTakgsZ0JBQWtCdjVFLEtBQUtnZ0YsVUFDckN4eUIsYUFBYXh0RCxLQUFLc3lGLGNBQ2xCdHlGLEtBQUtnZ0YsUUFBUTEyRCxNQUFNLGFBQWMsYSx3QkFJakMsU0FBV2dJLEVBQW1CdXZCLEdBQzlCN2dELEtBQUt3Z0YsU0FBUzRPLGtCQUNkcHZGLEtBQUt3dUYsT0FBTzN0QyxRIiwiZmlsZSI6InVuaXBlcHQtdmlzdWFsaXphdGlvbnMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gd2VicGFja1VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24ocm9vdCwgZmFjdG9yeSkge1xuXHRpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcpXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG5cdGVsc2UgaWYodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKVxuXHRcdGRlZmluZShbXSwgZmFjdG9yeSk7XG5cdGVsc2UgaWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKVxuXHRcdGV4cG9ydHNbXCJVbmlwZXB0VmlzdWFsaXphdGlvbnNcIl0gPSBmYWN0b3J5KCk7XG5cdGVsc2Vcblx0XHRyb290W1wiVW5pcGVwdFZpc3VhbGl6YXRpb25zXCJdID0gZmFjdG9yeSgpO1xufSkodGhpcywgZnVuY3Rpb24oKSB7XG5yZXR1cm4gIiwicmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zeW1ib2wnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3ltYm9sLmFzeW5jLWl0ZXJhdG9yJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN5bWJvbC5kZXNjcmlwdGlvbicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zeW1ib2wuaGFzLWluc3RhbmNlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN5bWJvbC5pcy1jb25jYXQtc3ByZWFkYWJsZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zeW1ib2wuaXRlcmF0b3InKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3ltYm9sLm1hdGNoJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN5bWJvbC5tYXRjaC1hbGwnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3ltYm9sLnJlcGxhY2UnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3ltYm9sLnNlYXJjaCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zeW1ib2wuc3BlY2llcycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zeW1ib2wuc3BsaXQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3ltYm9sLnRvLXByaW1pdGl2ZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zeW1ib2wudG8tc3RyaW5nLXRhZycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zeW1ib2wudW5zY29wYWJsZXMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuYWdncmVnYXRlLWVycm9yJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmFycmF5LmZyb20nKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuYXJyYXkuaXMtYXJyYXknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuYXJyYXkub2YnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuYXJyYXkuY29uY2F0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmFycmF5LmNvcHktd2l0aGluJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmFycmF5LmV2ZXJ5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmFycmF5LmZpbGwnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuYXJyYXkuZmlsdGVyJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmFycmF5LmZpbmQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuYXJyYXkuZmluZC1pbmRleCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hcnJheS5mbGF0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmFycmF5LmZsYXQtbWFwJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmFycmF5LmZvci1lYWNoJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmFycmF5LmluY2x1ZGVzJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmFycmF5LmluZGV4LW9mJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmFycmF5LmpvaW4nKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuYXJyYXkubGFzdC1pbmRleC1vZicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hcnJheS5tYXAnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuYXJyYXkucmVkdWNlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmFycmF5LnJlZHVjZS1yaWdodCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hcnJheS5yZXZlcnNlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmFycmF5LnNsaWNlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmFycmF5LnNvbWUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuYXJyYXkuc29ydCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hcnJheS5zcGxpY2UnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuYXJyYXkuc3BlY2llcycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hcnJheS51bnNjb3BhYmxlcy5mbGF0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmFycmF5LnVuc2NvcGFibGVzLmZsYXQtbWFwJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmFycmF5Lml0ZXJhdG9yJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmZ1bmN0aW9uLmJpbmQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuZnVuY3Rpb24ubmFtZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5mdW5jdGlvbi5oYXMtaW5zdGFuY2UnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuZ2xvYmFsLXRoaXMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMub2JqZWN0LmFzc2lnbicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5vYmplY3QuY3JlYXRlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm9iamVjdC5kZWZpbmUtcHJvcGVydHknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMub2JqZWN0LmRlZmluZS1wcm9wZXJ0aWVzJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm9iamVjdC5lbnRyaWVzJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm9iamVjdC5mcmVlemUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMub2JqZWN0LmZyb20tZW50cmllcycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3JzJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm9iamVjdC5nZXQtb3duLXByb3BlcnR5LW5hbWVzJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm9iamVjdC5nZXQtcHJvdG90eXBlLW9mJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm9iamVjdC5pcycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5vYmplY3QuaXMtZXh0ZW5zaWJsZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5vYmplY3QuaXMtZnJvemVuJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm9iamVjdC5pcy1zZWFsZWQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMub2JqZWN0LmtleXMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMub2JqZWN0LnByZXZlbnQtZXh0ZW5zaW9ucycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5vYmplY3Quc2VhbCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5vYmplY3Quc2V0LXByb3RvdHlwZS1vZicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5vYmplY3QudmFsdWVzJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm9iamVjdC50by1zdHJpbmcnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMub2JqZWN0LmRlZmluZS1nZXR0ZXInKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMub2JqZWN0LmRlZmluZS1zZXR0ZXInKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMub2JqZWN0Lmxvb2t1cC1nZXR0ZXInKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMub2JqZWN0Lmxvb2t1cC1zZXR0ZXInKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3RyaW5nLmZyb20tY29kZS1wb2ludCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zdHJpbmcucmF3Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN0cmluZy5jb2RlLXBvaW50LWF0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN0cmluZy5lbmRzLXdpdGgnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3RyaW5nLmluY2x1ZGVzJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN0cmluZy5tYXRjaCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zdHJpbmcubWF0Y2gtYWxsJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN0cmluZy5wYWQtZW5kJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN0cmluZy5wYWQtc3RhcnQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3RyaW5nLnJlcGVhdCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zdHJpbmcucmVwbGFjZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zdHJpbmcuc2VhcmNoJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN0cmluZy5zcGxpdCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zdHJpbmcuc3RhcnRzLXdpdGgnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3RyaW5nLnRyaW0nKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3RyaW5nLnRyaW0tc3RhcnQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3RyaW5nLnRyaW0tZW5kJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN0cmluZy5pdGVyYXRvcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zdHJpbmcuYW5jaG9yJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN0cmluZy5iaWcnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3RyaW5nLmJsaW5rJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN0cmluZy5ib2xkJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN0cmluZy5maXhlZCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zdHJpbmcuZm9udGNvbG9yJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN0cmluZy5mb250c2l6ZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zdHJpbmcuaXRhbGljcycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zdHJpbmcubGluaycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zdHJpbmcuc21hbGwnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3RyaW5nLnN0cmlrZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zdHJpbmcuc3ViJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN0cmluZy5zdXAnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3RyaW5nLnJlcGxhY2UtYWxsJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnJlZ2V4cC5jb25zdHJ1Y3RvcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5yZWdleHAuZXhlYycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5yZWdleHAuZmxhZ3MnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMucmVnZXhwLnN0aWNreScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5yZWdleHAudGVzdCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5yZWdleHAudG8tc3RyaW5nJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnBhcnNlLWludCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5wYXJzZS1mbG9hdCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5udW1iZXIuY29uc3RydWN0b3InKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMubnVtYmVyLmVwc2lsb24nKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMubnVtYmVyLmlzLWZpbml0ZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5udW1iZXIuaXMtaW50ZWdlcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5udW1iZXIuaXMtbmFuJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm51bWJlci5pcy1zYWZlLWludGVnZXInKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMubnVtYmVyLm1heC1zYWZlLWludGVnZXInKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMubnVtYmVyLm1pbi1zYWZlLWludGVnZXInKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMubnVtYmVyLnBhcnNlLWZsb2F0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm51bWJlci5wYXJzZS1pbnQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMubnVtYmVyLnRvLWZpeGVkJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm51bWJlci50by1wcmVjaXNpb24nKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMubWF0aC5hY29zaCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5tYXRoLmFzaW5oJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm1hdGguYXRhbmgnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMubWF0aC5jYnJ0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm1hdGguY2x6MzInKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMubWF0aC5jb3NoJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm1hdGguZXhwbTEnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMubWF0aC5mcm91bmQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMubWF0aC5oeXBvdCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5tYXRoLmltdWwnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMubWF0aC5sb2cxMCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5tYXRoLmxvZzFwJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm1hdGgubG9nMicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5tYXRoLnNpZ24nKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMubWF0aC5zaW5oJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm1hdGgudGFuaCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5tYXRoLnRvLXN0cmluZy10YWcnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMubWF0aC50cnVuYycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5kYXRlLm5vdycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5kYXRlLnRvLWpzb24nKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuZGF0ZS50by1pc28tc3RyaW5nJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmRhdGUudG8tc3RyaW5nJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmRhdGUudG8tcHJpbWl0aXZlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmpzb24uc3RyaW5naWZ5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmpzb24udG8tc3RyaW5nLXRhZycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5wcm9taXNlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnByb21pc2UuYWxsLXNldHRsZWQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMucHJvbWlzZS5hbnknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMucHJvbWlzZS5maW5hbGx5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm1hcCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zZXQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMud2Vhay1tYXAnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMud2Vhay1zZXQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuYXJyYXktYnVmZmVyLmNvbnN0cnVjdG9yJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmFycmF5LWJ1ZmZlci5pcy12aWV3Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmFycmF5LWJ1ZmZlci5zbGljZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5kYXRhLXZpZXcnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuaW50OC1hcnJheScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy50eXBlZC1hcnJheS51aW50OC1hcnJheScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy50eXBlZC1hcnJheS51aW50OC1jbGFtcGVkLWFycmF5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmludDE2LWFycmF5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LnVpbnQxNi1hcnJheScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy50eXBlZC1hcnJheS5pbnQzMi1hcnJheScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy50eXBlZC1hcnJheS51aW50MzItYXJyYXknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuZmxvYXQzMi1hcnJheScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy50eXBlZC1hcnJheS5mbG9hdDY0LWFycmF5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmZyb20nKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMudHlwZWQtYXJyYXkub2YnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuY29weS13aXRoaW4nKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuZXZlcnknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuZmlsbCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy50eXBlZC1hcnJheS5maWx0ZXInKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuZmluZCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy50eXBlZC1hcnJheS5maW5kLWluZGV4Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmZvci1lYWNoJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmluY2x1ZGVzJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmluZGV4LW9mJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnR5cGVkLWFycmF5Lml0ZXJhdG9yJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmpvaW4nKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMudHlwZWQtYXJyYXkubGFzdC1pbmRleC1vZicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy50eXBlZC1hcnJheS5tYXAnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMudHlwZWQtYXJyYXkucmVkdWNlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LnJlZHVjZS1yaWdodCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy50eXBlZC1hcnJheS5yZXZlcnNlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LnNldCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy50eXBlZC1hcnJheS5zbGljZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy50eXBlZC1hcnJheS5zb21lJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LnNvcnQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuc3ViYXJyYXknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMudHlwZWQtYXJyYXkudG8tbG9jYWxlLXN0cmluZycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy50eXBlZC1hcnJheS50by1zdHJpbmcnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMucmVmbGVjdC5hcHBseScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5yZWZsZWN0LmNvbnN0cnVjdCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5yZWZsZWN0LmRlZmluZS1wcm9wZXJ0eScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5yZWZsZWN0LmRlbGV0ZS1wcm9wZXJ0eScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5yZWZsZWN0LmdldCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5yZWZsZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5yZWZsZWN0LmdldC1wcm90b3R5cGUtb2YnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMucmVmbGVjdC5oYXMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMucmVmbGVjdC5pcy1leHRlbnNpYmxlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnJlZmxlY3Qub3duLWtleXMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMucmVmbGVjdC5wcmV2ZW50LWV4dGVuc2lvbnMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMucmVmbGVjdC5zZXQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMucmVmbGVjdC5zZXQtcHJvdG90eXBlLW9mJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnJlZmxlY3QudG8tc3RyaW5nLXRhZycpO1xudmFyIHBhdGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcGF0aCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHBhdGg7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAodHlwZW9mIGl0ICE9ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IoU3RyaW5nKGl0KSArICcgaXMgbm90IGEgZnVuY3Rpb24nKTtcbiAgfSByZXR1cm4gaXQ7XG59O1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoIWlzT2JqZWN0KGl0KSAmJiBpdCAhPT0gbnVsbCkge1xuICAgIHRocm93IFR5cGVFcnJvcihcIkNhbid0IHNldCBcIiArIFN0cmluZyhpdCkgKyAnIGFzIGEgcHJvdG90eXBlJyk7XG4gIH0gcmV0dXJuIGl0O1xufTtcbiIsInZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWNyZWF0ZScpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcblxudmFyIFVOU0NPUEFCTEVTID0gd2VsbEtub3duU3ltYm9sKCd1bnNjb3BhYmxlcycpO1xudmFyIEFycmF5UHJvdG90eXBlID0gQXJyYXkucHJvdG90eXBlO1xuXG4vLyBBcnJheS5wcm90b3R5cGVbQEB1bnNjb3BhYmxlc11cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLUBAdW5zY29wYWJsZXNcbmlmIChBcnJheVByb3RvdHlwZVtVTlNDT1BBQkxFU10gPT0gdW5kZWZpbmVkKSB7XG4gIGRlZmluZVByb3BlcnR5TW9kdWxlLmYoQXJyYXlQcm90b3R5cGUsIFVOU0NPUEFCTEVTLCB7XG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIHZhbHVlOiBjcmVhdGUobnVsbClcbiAgfSk7XG59XG5cbi8vIGFkZCBhIGtleSB0byBBcnJheS5wcm90b3R5cGVbQEB1bnNjb3BhYmxlc11cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICBBcnJheVByb3RvdHlwZVtVTlNDT1BBQkxFU11ba2V5XSA9IHRydWU7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGNoYXJBdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctbXVsdGlieXRlJykuY2hhckF0O1xuXG4vLyBgQWR2YW5jZVN0cmluZ0luZGV4YCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYWR2YW5jZXN0cmluZ2luZGV4XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChTLCBpbmRleCwgdW5pY29kZSkge1xuICByZXR1cm4gaW5kZXggKyAodW5pY29kZSA/IGNoYXJBdChTLCBpbmRleCkubGVuZ3RoIDogMSk7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIENvbnN0cnVjdG9yLCBuYW1lKSB7XG4gIGlmICghKGl0IGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgdGhyb3cgVHlwZUVycm9yKCdJbmNvcnJlY3QgJyArIChuYW1lID8gbmFtZSArICcgJyA6ICcnKSArICdpbnZvY2F0aW9uJyk7XG4gIH0gcmV0dXJuIGl0O1xufTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKCFpc09iamVjdChpdCkpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IoU3RyaW5nKGl0KSArICcgaXMgbm90IGFuIG9iamVjdCcpO1xuICB9IHJldHVybiBpdDtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIERhdGFWaWV3ICE9PSAndW5kZWZpbmVkJztcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBOQVRJVkVfQVJSQVlfQlVGRkVSID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci1uYXRpdmUnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mJyk7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lJyk7XG52YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpLmY7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1wcm90b3R5cGUtb2YnKTtcbnZhciBzZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qtc2V0LXByb3RvdHlwZS1vZicpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy91aWQnKTtcblxudmFyIEludDhBcnJheSA9IGdsb2JhbC5JbnQ4QXJyYXk7XG52YXIgSW50OEFycmF5UHJvdG90eXBlID0gSW50OEFycmF5ICYmIEludDhBcnJheS5wcm90b3R5cGU7XG52YXIgVWludDhDbGFtcGVkQXJyYXkgPSBnbG9iYWwuVWludDhDbGFtcGVkQXJyYXk7XG52YXIgVWludDhDbGFtcGVkQXJyYXlQcm90b3R5cGUgPSBVaW50OENsYW1wZWRBcnJheSAmJiBVaW50OENsYW1wZWRBcnJheS5wcm90b3R5cGU7XG52YXIgVHlwZWRBcnJheSA9IEludDhBcnJheSAmJiBnZXRQcm90b3R5cGVPZihJbnQ4QXJyYXkpO1xudmFyIFR5cGVkQXJyYXlQcm90b3R5cGUgPSBJbnQ4QXJyYXlQcm90b3R5cGUgJiYgZ2V0UHJvdG90eXBlT2YoSW50OEFycmF5UHJvdG90eXBlKTtcbnZhciBPYmplY3RQcm90b3R5cGUgPSBPYmplY3QucHJvdG90eXBlO1xudmFyIGlzUHJvdG90eXBlT2YgPSBPYmplY3RQcm90b3R5cGUuaXNQcm90b3R5cGVPZjtcblxudmFyIFRPX1NUUklOR19UQUcgPSB3ZWxsS25vd25TeW1ib2woJ3RvU3RyaW5nVGFnJyk7XG52YXIgVFlQRURfQVJSQVlfVEFHID0gdWlkKCdUWVBFRF9BUlJBWV9UQUcnKTtcbi8vIEZpeGluZyBuYXRpdmUgdHlwZWQgYXJyYXlzIGluIE9wZXJhIFByZXN0byBjcmFzaGVzIHRoZSBicm93c2VyLCBzZWUgIzU5NVxudmFyIE5BVElWRV9BUlJBWV9CVUZGRVJfVklFV1MgPSBOQVRJVkVfQVJSQVlfQlVGRkVSICYmICEhc2V0UHJvdG90eXBlT2YgJiYgY2xhc3NvZihnbG9iYWwub3BlcmEpICE9PSAnT3BlcmEnO1xudmFyIFRZUEVEX0FSUkFZX1RBR19SRVFJUkVEID0gZmFsc2U7XG52YXIgTkFNRTtcblxudmFyIFR5cGVkQXJyYXlDb25zdHJ1Y3RvcnNMaXN0ID0ge1xuICBJbnQ4QXJyYXk6IDEsXG4gIFVpbnQ4QXJyYXk6IDEsXG4gIFVpbnQ4Q2xhbXBlZEFycmF5OiAxLFxuICBJbnQxNkFycmF5OiAyLFxuICBVaW50MTZBcnJheTogMixcbiAgSW50MzJBcnJheTogNCxcbiAgVWludDMyQXJyYXk6IDQsXG4gIEZsb2F0MzJBcnJheTogNCxcbiAgRmxvYXQ2NEFycmF5OiA4XG59O1xuXG52YXIgQmlnSW50QXJyYXlDb25zdHJ1Y3RvcnNMaXN0ID0ge1xuICBCaWdJbnQ2NEFycmF5OiA4LFxuICBCaWdVaW50NjRBcnJheTogOFxufTtcblxudmFyIGlzVmlldyA9IGZ1bmN0aW9uIGlzVmlldyhpdCkge1xuICBpZiAoIWlzT2JqZWN0KGl0KSkgcmV0dXJuIGZhbHNlO1xuICB2YXIga2xhc3MgPSBjbGFzc29mKGl0KTtcbiAgcmV0dXJuIGtsYXNzID09PSAnRGF0YVZpZXcnXG4gICAgfHwgaGFzKFR5cGVkQXJyYXlDb25zdHJ1Y3RvcnNMaXN0LCBrbGFzcylcbiAgICB8fCBoYXMoQmlnSW50QXJyYXlDb25zdHJ1Y3RvcnNMaXN0LCBrbGFzcyk7XG59O1xuXG52YXIgaXNUeXBlZEFycmF5ID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmICghaXNPYmplY3QoaXQpKSByZXR1cm4gZmFsc2U7XG4gIHZhciBrbGFzcyA9IGNsYXNzb2YoaXQpO1xuICByZXR1cm4gaGFzKFR5cGVkQXJyYXlDb25zdHJ1Y3RvcnNMaXN0LCBrbGFzcylcbiAgICB8fCBoYXMoQmlnSW50QXJyYXlDb25zdHJ1Y3RvcnNMaXN0LCBrbGFzcyk7XG59O1xuXG52YXIgYVR5cGVkQXJyYXkgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKGlzVHlwZWRBcnJheShpdCkpIHJldHVybiBpdDtcbiAgdGhyb3cgVHlwZUVycm9yKCdUYXJnZXQgaXMgbm90IGEgdHlwZWQgYXJyYXknKTtcbn07XG5cbnZhciBhVHlwZWRBcnJheUNvbnN0cnVjdG9yID0gZnVuY3Rpb24gKEMpIHtcbiAgaWYgKHNldFByb3RvdHlwZU9mKSB7XG4gICAgaWYgKGlzUHJvdG90eXBlT2YuY2FsbChUeXBlZEFycmF5LCBDKSkgcmV0dXJuIEM7XG4gIH0gZWxzZSBmb3IgKHZhciBBUlJBWSBpbiBUeXBlZEFycmF5Q29uc3RydWN0b3JzTGlzdCkgaWYgKGhhcyhUeXBlZEFycmF5Q29uc3RydWN0b3JzTGlzdCwgTkFNRSkpIHtcbiAgICB2YXIgVHlwZWRBcnJheUNvbnN0cnVjdG9yID0gZ2xvYmFsW0FSUkFZXTtcbiAgICBpZiAoVHlwZWRBcnJheUNvbnN0cnVjdG9yICYmIChDID09PSBUeXBlZEFycmF5Q29uc3RydWN0b3IgfHwgaXNQcm90b3R5cGVPZi5jYWxsKFR5cGVkQXJyYXlDb25zdHJ1Y3RvciwgQykpKSB7XG4gICAgICByZXR1cm4gQztcbiAgICB9XG4gIH0gdGhyb3cgVHlwZUVycm9yKCdUYXJnZXQgaXMgbm90IGEgdHlwZWQgYXJyYXkgY29uc3RydWN0b3InKTtcbn07XG5cbnZhciBleHBvcnRUeXBlZEFycmF5TWV0aG9kID0gZnVuY3Rpb24gKEtFWSwgcHJvcGVydHksIGZvcmNlZCkge1xuICBpZiAoIURFU0NSSVBUT1JTKSByZXR1cm47XG4gIGlmIChmb3JjZWQpIGZvciAodmFyIEFSUkFZIGluIFR5cGVkQXJyYXlDb25zdHJ1Y3RvcnNMaXN0KSB7XG4gICAgdmFyIFR5cGVkQXJyYXlDb25zdHJ1Y3RvciA9IGdsb2JhbFtBUlJBWV07XG4gICAgaWYgKFR5cGVkQXJyYXlDb25zdHJ1Y3RvciAmJiBoYXMoVHlwZWRBcnJheUNvbnN0cnVjdG9yLnByb3RvdHlwZSwgS0VZKSkge1xuICAgICAgZGVsZXRlIFR5cGVkQXJyYXlDb25zdHJ1Y3Rvci5wcm90b3R5cGVbS0VZXTtcbiAgICB9XG4gIH1cbiAgaWYgKCFUeXBlZEFycmF5UHJvdG90eXBlW0tFWV0gfHwgZm9yY2VkKSB7XG4gICAgcmVkZWZpbmUoVHlwZWRBcnJheVByb3RvdHlwZSwgS0VZLCBmb3JjZWQgPyBwcm9wZXJ0eVxuICAgICAgOiBOQVRJVkVfQVJSQVlfQlVGRkVSX1ZJRVdTICYmIEludDhBcnJheVByb3RvdHlwZVtLRVldIHx8IHByb3BlcnR5KTtcbiAgfVxufTtcblxudmFyIGV4cG9ydFR5cGVkQXJyYXlTdGF0aWNNZXRob2QgPSBmdW5jdGlvbiAoS0VZLCBwcm9wZXJ0eSwgZm9yY2VkKSB7XG4gIHZhciBBUlJBWSwgVHlwZWRBcnJheUNvbnN0cnVjdG9yO1xuICBpZiAoIURFU0NSSVBUT1JTKSByZXR1cm47XG4gIGlmIChzZXRQcm90b3R5cGVPZikge1xuICAgIGlmIChmb3JjZWQpIGZvciAoQVJSQVkgaW4gVHlwZWRBcnJheUNvbnN0cnVjdG9yc0xpc3QpIHtcbiAgICAgIFR5cGVkQXJyYXlDb25zdHJ1Y3RvciA9IGdsb2JhbFtBUlJBWV07XG4gICAgICBpZiAoVHlwZWRBcnJheUNvbnN0cnVjdG9yICYmIGhhcyhUeXBlZEFycmF5Q29uc3RydWN0b3IsIEtFWSkpIHtcbiAgICAgICAgZGVsZXRlIFR5cGVkQXJyYXlDb25zdHJ1Y3RvcltLRVldO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoIVR5cGVkQXJyYXlbS0VZXSB8fCBmb3JjZWQpIHtcbiAgICAgIC8vIFY4IH4gQ2hyb21lIDQ5LTUwIGAlVHlwZWRBcnJheSVgIG1ldGhvZHMgYXJlIG5vbi13cml0YWJsZSBub24tY29uZmlndXJhYmxlXG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gcmVkZWZpbmUoVHlwZWRBcnJheSwgS0VZLCBmb3JjZWQgPyBwcm9wZXJ0eSA6IE5BVElWRV9BUlJBWV9CVUZGRVJfVklFV1MgJiYgSW50OEFycmF5W0tFWV0gfHwgcHJvcGVydHkpO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuICAgIH0gZWxzZSByZXR1cm47XG4gIH1cbiAgZm9yIChBUlJBWSBpbiBUeXBlZEFycmF5Q29uc3RydWN0b3JzTGlzdCkge1xuICAgIFR5cGVkQXJyYXlDb25zdHJ1Y3RvciA9IGdsb2JhbFtBUlJBWV07XG4gICAgaWYgKFR5cGVkQXJyYXlDb25zdHJ1Y3RvciAmJiAoIVR5cGVkQXJyYXlDb25zdHJ1Y3RvcltLRVldIHx8IGZvcmNlZCkpIHtcbiAgICAgIHJlZGVmaW5lKFR5cGVkQXJyYXlDb25zdHJ1Y3RvciwgS0VZLCBwcm9wZXJ0eSk7XG4gICAgfVxuICB9XG59O1xuXG5mb3IgKE5BTUUgaW4gVHlwZWRBcnJheUNvbnN0cnVjdG9yc0xpc3QpIHtcbiAgaWYgKCFnbG9iYWxbTkFNRV0pIE5BVElWRV9BUlJBWV9CVUZGRVJfVklFV1MgPSBmYWxzZTtcbn1cblxuLy8gV2ViS2l0IGJ1ZyAtIHR5cGVkIGFycmF5cyBjb25zdHJ1Y3RvcnMgcHJvdG90eXBlIGlzIE9iamVjdC5wcm90b3R5cGVcbmlmICghTkFUSVZFX0FSUkFZX0JVRkZFUl9WSUVXUyB8fCB0eXBlb2YgVHlwZWRBcnJheSAhPSAnZnVuY3Rpb24nIHx8IFR5cGVkQXJyYXkgPT09IEZ1bmN0aW9uLnByb3RvdHlwZSkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2hhZG93IC0tIHNhZmVcbiAgVHlwZWRBcnJheSA9IGZ1bmN0aW9uIFR5cGVkQXJyYXkoKSB7XG4gICAgdGhyb3cgVHlwZUVycm9yKCdJbmNvcnJlY3QgaW52b2NhdGlvbicpO1xuICB9O1xuICBpZiAoTkFUSVZFX0FSUkFZX0JVRkZFUl9WSUVXUykgZm9yIChOQU1FIGluIFR5cGVkQXJyYXlDb25zdHJ1Y3RvcnNMaXN0KSB7XG4gICAgaWYgKGdsb2JhbFtOQU1FXSkgc2V0UHJvdG90eXBlT2YoZ2xvYmFsW05BTUVdLCBUeXBlZEFycmF5KTtcbiAgfVxufVxuXG5pZiAoIU5BVElWRV9BUlJBWV9CVUZGRVJfVklFV1MgfHwgIVR5cGVkQXJyYXlQcm90b3R5cGUgfHwgVHlwZWRBcnJheVByb3RvdHlwZSA9PT0gT2JqZWN0UHJvdG90eXBlKSB7XG4gIFR5cGVkQXJyYXlQcm90b3R5cGUgPSBUeXBlZEFycmF5LnByb3RvdHlwZTtcbiAgaWYgKE5BVElWRV9BUlJBWV9CVUZGRVJfVklFV1MpIGZvciAoTkFNRSBpbiBUeXBlZEFycmF5Q29uc3RydWN0b3JzTGlzdCkge1xuICAgIGlmIChnbG9iYWxbTkFNRV0pIHNldFByb3RvdHlwZU9mKGdsb2JhbFtOQU1FXS5wcm90b3R5cGUsIFR5cGVkQXJyYXlQcm90b3R5cGUpO1xuICB9XG59XG5cbi8vIFdlYktpdCBidWcgLSBvbmUgbW9yZSBvYmplY3QgaW4gVWludDhDbGFtcGVkQXJyYXkgcHJvdG90eXBlIGNoYWluXG5pZiAoTkFUSVZFX0FSUkFZX0JVRkZFUl9WSUVXUyAmJiBnZXRQcm90b3R5cGVPZihVaW50OENsYW1wZWRBcnJheVByb3RvdHlwZSkgIT09IFR5cGVkQXJyYXlQcm90b3R5cGUpIHtcbiAgc2V0UHJvdG90eXBlT2YoVWludDhDbGFtcGVkQXJyYXlQcm90b3R5cGUsIFR5cGVkQXJyYXlQcm90b3R5cGUpO1xufVxuXG5pZiAoREVTQ1JJUFRPUlMgJiYgIWhhcyhUeXBlZEFycmF5UHJvdG90eXBlLCBUT19TVFJJTkdfVEFHKSkge1xuICBUWVBFRF9BUlJBWV9UQUdfUkVRSVJFRCA9IHRydWU7XG4gIGRlZmluZVByb3BlcnR5KFR5cGVkQXJyYXlQcm90b3R5cGUsIFRPX1NUUklOR19UQUcsIHsgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGlzT2JqZWN0KHRoaXMpID8gdGhpc1tUWVBFRF9BUlJBWV9UQUddIDogdW5kZWZpbmVkO1xuICB9IH0pO1xuICBmb3IgKE5BTUUgaW4gVHlwZWRBcnJheUNvbnN0cnVjdG9yc0xpc3QpIGlmIChnbG9iYWxbTkFNRV0pIHtcbiAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoZ2xvYmFsW05BTUVdLCBUWVBFRF9BUlJBWV9UQUcsIE5BTUUpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBOQVRJVkVfQVJSQVlfQlVGRkVSX1ZJRVdTOiBOQVRJVkVfQVJSQVlfQlVGRkVSX1ZJRVdTLFxuICBUWVBFRF9BUlJBWV9UQUc6IFRZUEVEX0FSUkFZX1RBR19SRVFJUkVEICYmIFRZUEVEX0FSUkFZX1RBRyxcbiAgYVR5cGVkQXJyYXk6IGFUeXBlZEFycmF5LFxuICBhVHlwZWRBcnJheUNvbnN0cnVjdG9yOiBhVHlwZWRBcnJheUNvbnN0cnVjdG9yLFxuICBleHBvcnRUeXBlZEFycmF5TWV0aG9kOiBleHBvcnRUeXBlZEFycmF5TWV0aG9kLFxuICBleHBvcnRUeXBlZEFycmF5U3RhdGljTWV0aG9kOiBleHBvcnRUeXBlZEFycmF5U3RhdGljTWV0aG9kLFxuICBpc1ZpZXc6IGlzVmlldyxcbiAgaXNUeXBlZEFycmF5OiBpc1R5cGVkQXJyYXksXG4gIFR5cGVkQXJyYXk6IFR5cGVkQXJyYXksXG4gIFR5cGVkQXJyYXlQcm90b3R5cGU6IFR5cGVkQXJyYXlQcm90b3R5cGVcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgTkFUSVZFX0FSUkFZX0JVRkZFUiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItbmF0aXZlJyk7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xudmFyIHJlZGVmaW5lQWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lLWFsbCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1pbnN0YW5jZScpO1xudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbnRlZ2VyJyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG52YXIgdG9JbmRleCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleCcpO1xudmFyIElFRUU3NTQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaWVlZTc1NCcpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtcHJvdG90eXBlLW9mJyk7XG52YXIgc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXNldC1wcm90b3R5cGUtb2YnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eU5hbWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LW5hbWVzJykuZjtcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5JykuZjtcbnZhciBhcnJheUZpbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktZmlsbCcpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgSW50ZXJuYWxTdGF0ZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZScpO1xuXG52YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0O1xudmFyIHNldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLnNldDtcbnZhciBBUlJBWV9CVUZGRVIgPSAnQXJyYXlCdWZmZXInO1xudmFyIERBVEFfVklFVyA9ICdEYXRhVmlldyc7XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG52YXIgV1JPTkdfTEVOR1RIID0gJ1dyb25nIGxlbmd0aCc7XG52YXIgV1JPTkdfSU5ERVggPSAnV3JvbmcgaW5kZXgnO1xudmFyIE5hdGl2ZUFycmF5QnVmZmVyID0gZ2xvYmFsW0FSUkFZX0JVRkZFUl07XG52YXIgJEFycmF5QnVmZmVyID0gTmF0aXZlQXJyYXlCdWZmZXI7XG52YXIgJERhdGFWaWV3ID0gZ2xvYmFsW0RBVEFfVklFV107XG52YXIgJERhdGFWaWV3UHJvdG90eXBlID0gJERhdGFWaWV3ICYmICREYXRhVmlld1tQUk9UT1RZUEVdO1xudmFyIE9iamVjdFByb3RvdHlwZSA9IE9iamVjdC5wcm90b3R5cGU7XG52YXIgUmFuZ2VFcnJvciA9IGdsb2JhbC5SYW5nZUVycm9yO1xuXG52YXIgcGFja0lFRUU3NTQgPSBJRUVFNzU0LnBhY2s7XG52YXIgdW5wYWNrSUVFRTc1NCA9IElFRUU3NTQudW5wYWNrO1xuXG52YXIgcGFja0ludDggPSBmdW5jdGlvbiAobnVtYmVyKSB7XG4gIHJldHVybiBbbnVtYmVyICYgMHhGRl07XG59O1xuXG52YXIgcGFja0ludDE2ID0gZnVuY3Rpb24gKG51bWJlcikge1xuICByZXR1cm4gW251bWJlciAmIDB4RkYsIG51bWJlciA+PiA4ICYgMHhGRl07XG59O1xuXG52YXIgcGFja0ludDMyID0gZnVuY3Rpb24gKG51bWJlcikge1xuICByZXR1cm4gW251bWJlciAmIDB4RkYsIG51bWJlciA+PiA4ICYgMHhGRiwgbnVtYmVyID4+IDE2ICYgMHhGRiwgbnVtYmVyID4+IDI0ICYgMHhGRl07XG59O1xuXG52YXIgdW5wYWNrSW50MzIgPSBmdW5jdGlvbiAoYnVmZmVyKSB7XG4gIHJldHVybiBidWZmZXJbM10gPDwgMjQgfCBidWZmZXJbMl0gPDwgMTYgfCBidWZmZXJbMV0gPDwgOCB8IGJ1ZmZlclswXTtcbn07XG5cbnZhciBwYWNrRmxvYXQzMiA9IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgcmV0dXJuIHBhY2tJRUVFNzU0KG51bWJlciwgMjMsIDQpO1xufTtcblxudmFyIHBhY2tGbG9hdDY0ID0gZnVuY3Rpb24gKG51bWJlcikge1xuICByZXR1cm4gcGFja0lFRUU3NTQobnVtYmVyLCA1MiwgOCk7XG59O1xuXG52YXIgYWRkR2V0dGVyID0gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBrZXkpIHtcbiAgZGVmaW5lUHJvcGVydHkoQ29uc3RydWN0b3JbUFJPVE9UWVBFXSwga2V5LCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKVtrZXldOyB9IH0pO1xufTtcblxudmFyIGdldCA9IGZ1bmN0aW9uICh2aWV3LCBjb3VudCwgaW5kZXgsIGlzTGl0dGxlRW5kaWFuKSB7XG4gIHZhciBpbnRJbmRleCA9IHRvSW5kZXgoaW5kZXgpO1xuICB2YXIgc3RvcmUgPSBnZXRJbnRlcm5hbFN0YXRlKHZpZXcpO1xuICBpZiAoaW50SW5kZXggKyBjb3VudCA+IHN0b3JlLmJ5dGVMZW5ndGgpIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfSU5ERVgpO1xuICB2YXIgYnl0ZXMgPSBnZXRJbnRlcm5hbFN0YXRlKHN0b3JlLmJ1ZmZlcikuYnl0ZXM7XG4gIHZhciBzdGFydCA9IGludEluZGV4ICsgc3RvcmUuYnl0ZU9mZnNldDtcbiAgdmFyIHBhY2sgPSBieXRlcy5zbGljZShzdGFydCwgc3RhcnQgKyBjb3VudCk7XG4gIHJldHVybiBpc0xpdHRsZUVuZGlhbiA/IHBhY2sgOiBwYWNrLnJldmVyc2UoKTtcbn07XG5cbnZhciBzZXQgPSBmdW5jdGlvbiAodmlldywgY291bnQsIGluZGV4LCBjb252ZXJzaW9uLCB2YWx1ZSwgaXNMaXR0bGVFbmRpYW4pIHtcbiAgdmFyIGludEluZGV4ID0gdG9JbmRleChpbmRleCk7XG4gIHZhciBzdG9yZSA9IGdldEludGVybmFsU3RhdGUodmlldyk7XG4gIGlmIChpbnRJbmRleCArIGNvdW50ID4gc3RvcmUuYnl0ZUxlbmd0aCkgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19JTkRFWCk7XG4gIHZhciBieXRlcyA9IGdldEludGVybmFsU3RhdGUoc3RvcmUuYnVmZmVyKS5ieXRlcztcbiAgdmFyIHN0YXJ0ID0gaW50SW5kZXggKyBzdG9yZS5ieXRlT2Zmc2V0O1xuICB2YXIgcGFjayA9IGNvbnZlcnNpb24oK3ZhbHVlKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb3VudDsgaSsrKSBieXRlc1tzdGFydCArIGldID0gcGFja1tpc0xpdHRsZUVuZGlhbiA/IGkgOiBjb3VudCAtIGkgLSAxXTtcbn07XG5cbmlmICghTkFUSVZFX0FSUkFZX0JVRkZFUikge1xuICAkQXJyYXlCdWZmZXIgPSBmdW5jdGlvbiBBcnJheUJ1ZmZlcihsZW5ndGgpIHtcbiAgICBhbkluc3RhbmNlKHRoaXMsICRBcnJheUJ1ZmZlciwgQVJSQVlfQlVGRkVSKTtcbiAgICB2YXIgYnl0ZUxlbmd0aCA9IHRvSW5kZXgobGVuZ3RoKTtcbiAgICBzZXRJbnRlcm5hbFN0YXRlKHRoaXMsIHtcbiAgICAgIGJ5dGVzOiBhcnJheUZpbGwuY2FsbChuZXcgQXJyYXkoYnl0ZUxlbmd0aCksIDApLFxuICAgICAgYnl0ZUxlbmd0aDogYnl0ZUxlbmd0aFxuICAgIH0pO1xuICAgIGlmICghREVTQ1JJUFRPUlMpIHRoaXMuYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGg7XG4gIH07XG5cbiAgJERhdGFWaWV3ID0gZnVuY3Rpb24gRGF0YVZpZXcoYnVmZmVyLCBieXRlT2Zmc2V0LCBieXRlTGVuZ3RoKSB7XG4gICAgYW5JbnN0YW5jZSh0aGlzLCAkRGF0YVZpZXcsIERBVEFfVklFVyk7XG4gICAgYW5JbnN0YW5jZShidWZmZXIsICRBcnJheUJ1ZmZlciwgREFUQV9WSUVXKTtcbiAgICB2YXIgYnVmZmVyTGVuZ3RoID0gZ2V0SW50ZXJuYWxTdGF0ZShidWZmZXIpLmJ5dGVMZW5ndGg7XG4gICAgdmFyIG9mZnNldCA9IHRvSW50ZWdlcihieXRlT2Zmc2V0KTtcbiAgICBpZiAob2Zmc2V0IDwgMCB8fCBvZmZzZXQgPiBidWZmZXJMZW5ndGgpIHRocm93IFJhbmdlRXJyb3IoJ1dyb25nIG9mZnNldCcpO1xuICAgIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoID09PSB1bmRlZmluZWQgPyBidWZmZXJMZW5ndGggLSBvZmZzZXQgOiB0b0xlbmd0aChieXRlTGVuZ3RoKTtcbiAgICBpZiAob2Zmc2V0ICsgYnl0ZUxlbmd0aCA+IGJ1ZmZlckxlbmd0aCkgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpO1xuICAgIHNldEludGVybmFsU3RhdGUodGhpcywge1xuICAgICAgYnVmZmVyOiBidWZmZXIsXG4gICAgICBieXRlTGVuZ3RoOiBieXRlTGVuZ3RoLFxuICAgICAgYnl0ZU9mZnNldDogb2Zmc2V0XG4gICAgfSk7XG4gICAgaWYgKCFERVNDUklQVE9SUykge1xuICAgICAgdGhpcy5idWZmZXIgPSBidWZmZXI7XG4gICAgICB0aGlzLmJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoO1xuICAgICAgdGhpcy5ieXRlT2Zmc2V0ID0gb2Zmc2V0O1xuICAgIH1cbiAgfTtcblxuICBpZiAoREVTQ1JJUFRPUlMpIHtcbiAgICBhZGRHZXR0ZXIoJEFycmF5QnVmZmVyLCAnYnl0ZUxlbmd0aCcpO1xuICAgIGFkZEdldHRlcigkRGF0YVZpZXcsICdidWZmZXInKTtcbiAgICBhZGRHZXR0ZXIoJERhdGFWaWV3LCAnYnl0ZUxlbmd0aCcpO1xuICAgIGFkZEdldHRlcigkRGF0YVZpZXcsICdieXRlT2Zmc2V0Jyk7XG4gIH1cblxuICByZWRlZmluZUFsbCgkRGF0YVZpZXdbUFJPVE9UWVBFXSwge1xuICAgIGdldEludDg6IGZ1bmN0aW9uIGdldEludDgoYnl0ZU9mZnNldCkge1xuICAgICAgcmV0dXJuIGdldCh0aGlzLCAxLCBieXRlT2Zmc2V0KVswXSA8PCAyNCA+PiAyNDtcbiAgICB9LFxuICAgIGdldFVpbnQ4OiBmdW5jdGlvbiBnZXRVaW50OChieXRlT2Zmc2V0KSB7XG4gICAgICByZXR1cm4gZ2V0KHRoaXMsIDEsIGJ5dGVPZmZzZXQpWzBdO1xuICAgIH0sXG4gICAgZ2V0SW50MTY6IGZ1bmN0aW9uIGdldEludDE2KGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHZhciBieXRlcyA9IGdldCh0aGlzLCAyLCBieXRlT2Zmc2V0LCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgICByZXR1cm4gKGJ5dGVzWzFdIDw8IDggfCBieXRlc1swXSkgPDwgMTYgPj4gMTY7XG4gICAgfSxcbiAgICBnZXRVaW50MTY6IGZ1bmN0aW9uIGdldFVpbnQxNihieXRlT2Zmc2V0IC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICB2YXIgYnl0ZXMgPSBnZXQodGhpcywgMiwgYnl0ZU9mZnNldCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgICAgcmV0dXJuIGJ5dGVzWzFdIDw8IDggfCBieXRlc1swXTtcbiAgICB9LFxuICAgIGdldEludDMyOiBmdW5jdGlvbiBnZXRJbnQzMihieXRlT2Zmc2V0IC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICByZXR1cm4gdW5wYWNrSW50MzIoZ2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKSk7XG4gICAgfSxcbiAgICBnZXRVaW50MzI6IGZ1bmN0aW9uIGdldFVpbnQzMihieXRlT2Zmc2V0IC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICByZXR1cm4gdW5wYWNrSW50MzIoZ2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKSkgPj4+IDA7XG4gICAgfSxcbiAgICBnZXRGbG9hdDMyOiBmdW5jdGlvbiBnZXRGbG9hdDMyKGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHJldHVybiB1bnBhY2tJRUVFNzU0KGdldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCksIDIzKTtcbiAgICB9LFxuICAgIGdldEZsb2F0NjQ6IGZ1bmN0aW9uIGdldEZsb2F0NjQoYnl0ZU9mZnNldCAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgcmV0dXJuIHVucGFja0lFRUU3NTQoZ2V0KHRoaXMsIDgsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKSwgNTIpO1xuICAgIH0sXG4gICAgc2V0SW50ODogZnVuY3Rpb24gc2V0SW50OChieXRlT2Zmc2V0LCB2YWx1ZSkge1xuICAgICAgc2V0KHRoaXMsIDEsIGJ5dGVPZmZzZXQsIHBhY2tJbnQ4LCB2YWx1ZSk7XG4gICAgfSxcbiAgICBzZXRVaW50ODogZnVuY3Rpb24gc2V0VWludDgoYnl0ZU9mZnNldCwgdmFsdWUpIHtcbiAgICAgIHNldCh0aGlzLCAxLCBieXRlT2Zmc2V0LCBwYWNrSW50OCwgdmFsdWUpO1xuICAgIH0sXG4gICAgc2V0SW50MTY6IGZ1bmN0aW9uIHNldEludDE2KGJ5dGVPZmZzZXQsIHZhbHVlIC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICBzZXQodGhpcywgMiwgYnl0ZU9mZnNldCwgcGFja0ludDE2LCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgc2V0VWludDE2OiBmdW5jdGlvbiBzZXRVaW50MTYoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCAyLCBieXRlT2Zmc2V0LCBwYWNrSW50MTYsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBzZXRJbnQzMjogZnVuY3Rpb24gc2V0SW50MzIoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBwYWNrSW50MzIsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBzZXRVaW50MzI6IGZ1bmN0aW9uIHNldFVpbnQzMihieXRlT2Zmc2V0LCB2YWx1ZSAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgc2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIHBhY2tJbnQzMiwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIHNldEZsb2F0MzI6IGZ1bmN0aW9uIHNldEZsb2F0MzIoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBwYWNrRmxvYXQzMiwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIHNldEZsb2F0NjQ6IGZ1bmN0aW9uIHNldEZsb2F0NjQoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCA4LCBieXRlT2Zmc2V0LCBwYWNrRmxvYXQ2NCwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkKTtcbiAgICB9XG4gIH0pO1xufSBlbHNlIHtcbiAgLyogZXNsaW50LWRpc2FibGUgbm8tbmV3IC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nICovXG4gIGlmICghZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIE5hdGl2ZUFycmF5QnVmZmVyKDEpO1xuICB9KSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIG5ldyBOYXRpdmVBcnJheUJ1ZmZlcigtMSk7XG4gIH0pIHx8IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICBuZXcgTmF0aXZlQXJyYXlCdWZmZXIoKTtcbiAgICBuZXcgTmF0aXZlQXJyYXlCdWZmZXIoMS41KTtcbiAgICBuZXcgTmF0aXZlQXJyYXlCdWZmZXIoTmFOKTtcbiAgICByZXR1cm4gTmF0aXZlQXJyYXlCdWZmZXIubmFtZSAhPSBBUlJBWV9CVUZGRVI7XG4gIH0pKSB7XG4gIC8qIGVzbGludC1lbmFibGUgbm8tbmV3IC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nICovXG4gICAgJEFycmF5QnVmZmVyID0gZnVuY3Rpb24gQXJyYXlCdWZmZXIobGVuZ3RoKSB7XG4gICAgICBhbkluc3RhbmNlKHRoaXMsICRBcnJheUJ1ZmZlcik7XG4gICAgICByZXR1cm4gbmV3IE5hdGl2ZUFycmF5QnVmZmVyKHRvSW5kZXgobGVuZ3RoKSk7XG4gICAgfTtcbiAgICB2YXIgQXJyYXlCdWZmZXJQcm90b3R5cGUgPSAkQXJyYXlCdWZmZXJbUFJPVE9UWVBFXSA9IE5hdGl2ZUFycmF5QnVmZmVyW1BST1RPVFlQRV07XG4gICAgZm9yICh2YXIga2V5cyA9IGdldE93blByb3BlcnR5TmFtZXMoTmF0aXZlQXJyYXlCdWZmZXIpLCBqID0gMCwga2V5OyBrZXlzLmxlbmd0aCA+IGo7KSB7XG4gICAgICBpZiAoISgoa2V5ID0ga2V5c1tqKytdKSBpbiAkQXJyYXlCdWZmZXIpKSB7XG4gICAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSgkQXJyYXlCdWZmZXIsIGtleSwgTmF0aXZlQXJyYXlCdWZmZXJba2V5XSk7XG4gICAgICB9XG4gICAgfVxuICAgIEFycmF5QnVmZmVyUHJvdG90eXBlLmNvbnN0cnVjdG9yID0gJEFycmF5QnVmZmVyO1xuICB9XG5cbiAgLy8gV2ViS2l0IGJ1ZyAtIHRoZSBzYW1lIHBhcmVudCBwcm90b3R5cGUgZm9yIHR5cGVkIGFycmF5cyBhbmQgZGF0YSB2aWV3XG4gIGlmIChzZXRQcm90b3R5cGVPZiAmJiBnZXRQcm90b3R5cGVPZigkRGF0YVZpZXdQcm90b3R5cGUpICE9PSBPYmplY3RQcm90b3R5cGUpIHtcbiAgICBzZXRQcm90b3R5cGVPZigkRGF0YVZpZXdQcm90b3R5cGUsIE9iamVjdFByb3RvdHlwZSk7XG4gIH1cblxuICAvLyBpT1MgU2FmYXJpIDcueCBidWdcbiAgdmFyIHRlc3RWaWV3ID0gbmV3ICREYXRhVmlldyhuZXcgJEFycmF5QnVmZmVyKDIpKTtcbiAgdmFyIG5hdGl2ZVNldEludDggPSAkRGF0YVZpZXdQcm90b3R5cGUuc2V0SW50ODtcbiAgdGVzdFZpZXcuc2V0SW50OCgwLCAyMTQ3NDgzNjQ4KTtcbiAgdGVzdFZpZXcuc2V0SW50OCgxLCAyMTQ3NDgzNjQ5KTtcbiAgaWYgKHRlc3RWaWV3LmdldEludDgoMCkgfHwgIXRlc3RWaWV3LmdldEludDgoMSkpIHJlZGVmaW5lQWxsKCREYXRhVmlld1Byb3RvdHlwZSwge1xuICAgIHNldEludDg6IGZ1bmN0aW9uIHNldEludDgoYnl0ZU9mZnNldCwgdmFsdWUpIHtcbiAgICAgIG5hdGl2ZVNldEludDguY2FsbCh0aGlzLCBieXRlT2Zmc2V0LCB2YWx1ZSA8PCAyNCA+PiAyNCk7XG4gICAgfSxcbiAgICBzZXRVaW50ODogZnVuY3Rpb24gc2V0VWludDgoYnl0ZU9mZnNldCwgdmFsdWUpIHtcbiAgICAgIG5hdGl2ZVNldEludDguY2FsbCh0aGlzLCBieXRlT2Zmc2V0LCB2YWx1ZSA8PCAyNCA+PiAyNCk7XG4gICAgfVxuICB9LCB7IHVuc2FmZTogdHJ1ZSB9KTtcbn1cblxuc2V0VG9TdHJpbmdUYWcoJEFycmF5QnVmZmVyLCBBUlJBWV9CVUZGRVIpO1xuc2V0VG9TdHJpbmdUYWcoJERhdGFWaWV3LCBEQVRBX1ZJRVcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgQXJyYXlCdWZmZXI6ICRBcnJheUJ1ZmZlcixcbiAgRGF0YVZpZXc6ICREYXRhVmlld1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tYWJzb2x1dGUtaW5kZXgnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcblxudmFyIG1pbiA9IE1hdGgubWluO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLmNvcHlXaXRoaW5gIG1ldGhvZCBpbXBsZW1lbnRhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuY29weXdpdGhpblxubW9kdWxlLmV4cG9ydHMgPSBbXS5jb3B5V2l0aGluIHx8IGZ1bmN0aW9uIGNvcHlXaXRoaW4odGFyZ2V0IC8qID0gMCAqLywgc3RhcnQgLyogPSAwLCBlbmQgPSBAbGVuZ3RoICovKSB7XG4gIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gIHZhciBsZW4gPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gIHZhciB0byA9IHRvQWJzb2x1dGVJbmRleCh0YXJnZXQsIGxlbik7XG4gIHZhciBmcm9tID0gdG9BYnNvbHV0ZUluZGV4KHN0YXJ0LCBsZW4pO1xuICB2YXIgZW5kID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQ7XG4gIHZhciBjb3VudCA9IG1pbigoZW5kID09PSB1bmRlZmluZWQgPyBsZW4gOiB0b0Fic29sdXRlSW5kZXgoZW5kLCBsZW4pKSAtIGZyb20sIGxlbiAtIHRvKTtcbiAgdmFyIGluYyA9IDE7XG4gIGlmIChmcm9tIDwgdG8gJiYgdG8gPCBmcm9tICsgY291bnQpIHtcbiAgICBpbmMgPSAtMTtcbiAgICBmcm9tICs9IGNvdW50IC0gMTtcbiAgICB0byArPSBjb3VudCAtIDE7XG4gIH1cbiAgd2hpbGUgKGNvdW50LS0gPiAwKSB7XG4gICAgaWYgKGZyb20gaW4gTykgT1t0b10gPSBPW2Zyb21dO1xuICAgIGVsc2UgZGVsZXRlIE9bdG9dO1xuICAgIHRvICs9IGluYztcbiAgICBmcm9tICs9IGluYztcbiAgfSByZXR1cm4gTztcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuZmlsbGAgbWV0aG9kIGltcGxlbWVudGF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5maWxsXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGZpbGwodmFsdWUgLyogLCBzdGFydCA9IDAsIGVuZCA9IEBsZW5ndGggKi8pIHtcbiAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgdmFyIGFyZ3VtZW50c0xlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gIHZhciBpbmRleCA9IHRvQWJzb2x1dGVJbmRleChhcmd1bWVudHNMZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCBsZW5ndGgpO1xuICB2YXIgZW5kID0gYXJndW1lbnRzTGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZDtcbiAgdmFyIGVuZFBvcyA9IGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuZ3RoIDogdG9BYnNvbHV0ZUluZGV4KGVuZCwgbGVuZ3RoKTtcbiAgd2hpbGUgKGVuZFBvcyA+IGluZGV4KSBPW2luZGV4KytdID0gdmFsdWU7XG4gIHJldHVybiBPO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZm9yRWFjaCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pdGVyYXRpb24nKS5mb3JFYWNoO1xudmFyIGFycmF5TWV0aG9kSXNTdHJpY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWlzLXN0cmljdCcpO1xuXG52YXIgU1RSSUNUX01FVEhPRCA9IGFycmF5TWV0aG9kSXNTdHJpY3QoJ2ZvckVhY2gnKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5mb3JFYWNoYCBtZXRob2QgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZvcmVhY2hcbm1vZHVsZS5leHBvcnRzID0gIVNUUklDVF9NRVRIT0QgPyBmdW5jdGlvbiBmb3JFYWNoKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gIHJldHVybiAkZm9yRWFjaCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG59IDogW10uZm9yRWFjaDtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIGNhbGxXaXRoU2FmZUl0ZXJhdGlvbkNsb3NpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2FsbC13aXRoLXNhZmUtaXRlcmF0aW9uLWNsb3NpbmcnKTtcbnZhciBpc0FycmF5SXRlcmF0b3JNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtYXJyYXktaXRlcmF0b3ItbWV0aG9kJyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5Jyk7XG52YXIgZ2V0SXRlcmF0b3JNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWl0ZXJhdG9yLW1ldGhvZCcpO1xuXG4vLyBgQXJyYXkuZnJvbWAgbWV0aG9kIGltcGxlbWVudGF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LmZyb21cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZnJvbShhcnJheUxpa2UgLyogLCBtYXBmbiA9IHVuZGVmaW5lZCwgdGhpc0FyZyA9IHVuZGVmaW5lZCAqLykge1xuICB2YXIgTyA9IHRvT2JqZWN0KGFycmF5TGlrZSk7XG4gIHZhciBDID0gdHlwZW9mIHRoaXMgPT0gJ2Z1bmN0aW9uJyA/IHRoaXMgOiBBcnJheTtcbiAgdmFyIGFyZ3VtZW50c0xlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gIHZhciBtYXBmbiA9IGFyZ3VtZW50c0xlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XG4gIHZhciBtYXBwaW5nID0gbWFwZm4gIT09IHVuZGVmaW5lZDtcbiAgdmFyIGl0ZXJhdG9yTWV0aG9kID0gZ2V0SXRlcmF0b3JNZXRob2QoTyk7XG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciBsZW5ndGgsIHJlc3VsdCwgc3RlcCwgaXRlcmF0b3IsIG5leHQsIHZhbHVlO1xuICBpZiAobWFwcGluZykgbWFwZm4gPSBiaW5kKG1hcGZuLCBhcmd1bWVudHNMZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkLCAyKTtcbiAgLy8gaWYgdGhlIHRhcmdldCBpcyBub3QgaXRlcmFibGUgb3IgaXQncyBhbiBhcnJheSB3aXRoIHRoZSBkZWZhdWx0IGl0ZXJhdG9yIC0gdXNlIGEgc2ltcGxlIGNhc2VcbiAgaWYgKGl0ZXJhdG9yTWV0aG9kICE9IHVuZGVmaW5lZCAmJiAhKEMgPT0gQXJyYXkgJiYgaXNBcnJheUl0ZXJhdG9yTWV0aG9kKGl0ZXJhdG9yTWV0aG9kKSkpIHtcbiAgICBpdGVyYXRvciA9IGl0ZXJhdG9yTWV0aG9kLmNhbGwoTyk7XG4gICAgbmV4dCA9IGl0ZXJhdG9yLm5leHQ7XG4gICAgcmVzdWx0ID0gbmV3IEMoKTtcbiAgICBmb3IgKDshKHN0ZXAgPSBuZXh0LmNhbGwoaXRlcmF0b3IpKS5kb25lOyBpbmRleCsrKSB7XG4gICAgICB2YWx1ZSA9IG1hcHBpbmcgPyBjYWxsV2l0aFNhZmVJdGVyYXRpb25DbG9zaW5nKGl0ZXJhdG9yLCBtYXBmbiwgW3N0ZXAudmFsdWUsIGluZGV4XSwgdHJ1ZSkgOiBzdGVwLnZhbHVlO1xuICAgICAgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBpbmRleCwgdmFsdWUpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgcmVzdWx0ID0gbmV3IEMobGVuZ3RoKTtcbiAgICBmb3IgKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKykge1xuICAgICAgdmFsdWUgPSBtYXBwaW5nID8gbWFwZm4oT1tpbmRleF0sIGluZGV4KSA6IE9baW5kZXhdO1xuICAgICAgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBpbmRleCwgdmFsdWUpO1xuICAgIH1cbiAgfVxuICByZXN1bHQubGVuZ3RoID0gaW5kZXg7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwidmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1hYnNvbHV0ZS1pbmRleCcpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLnsgaW5kZXhPZiwgaW5jbHVkZXMgfWAgbWV0aG9kcyBpbXBsZW1lbnRhdGlvblxudmFyIGNyZWF0ZU1ldGhvZCA9IGZ1bmN0aW9uIChJU19JTkNMVURFUykge1xuICByZXR1cm4gZnVuY3Rpb24gKCR0aGlzLCBlbCwgZnJvbUluZGV4KSB7XG4gICAgdmFyIE8gPSB0b0luZGV4ZWRPYmplY3QoJHRoaXMpO1xuICAgIHZhciBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgdmFyIGluZGV4ID0gdG9BYnNvbHV0ZUluZGV4KGZyb21JbmRleCwgbGVuZ3RoKTtcbiAgICB2YXIgdmFsdWU7XG4gICAgLy8gQXJyYXkjaW5jbHVkZXMgdXNlcyBTYW1lVmFsdWVaZXJvIGVxdWFsaXR5IGFsZ29yaXRobVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmUgLS0gTmFOIGNoZWNrXG4gICAgaWYgKElTX0lOQ0xVREVTICYmIGVsICE9IGVsKSB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIHtcbiAgICAgIHZhbHVlID0gT1tpbmRleCsrXTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmUgLS0gTmFOIGNoZWNrXG4gICAgICBpZiAodmFsdWUgIT0gdmFsdWUpIHJldHVybiB0cnVlO1xuICAgIC8vIEFycmF5I2luZGV4T2YgaWdub3JlcyBob2xlcywgQXJyYXkjaW5jbHVkZXMgLSBub3RcbiAgICB9IGVsc2UgZm9yICg7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIHtcbiAgICAgIGlmICgoSVNfSU5DTFVERVMgfHwgaW5kZXggaW4gTykgJiYgT1tpbmRleF0gPT09IGVsKSByZXR1cm4gSVNfSU5DTFVERVMgfHwgaW5kZXggfHwgMDtcbiAgICB9IHJldHVybiAhSVNfSU5DTFVERVMgJiYgLTE7XG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5pbmNsdWRlc2AgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmluY2x1ZGVzXG4gIGluY2x1ZGVzOiBjcmVhdGVNZXRob2QodHJ1ZSksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuaW5kZXhPZmAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmluZGV4b2ZcbiAgaW5kZXhPZjogY3JlYXRlTWV0aG9kKGZhbHNlKVxufTtcbiIsInZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dCcpO1xudmFyIEluZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5kZXhlZC1vYmplY3QnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciBhcnJheVNwZWNpZXNDcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktc3BlY2llcy1jcmVhdGUnKTtcblxudmFyIHB1c2ggPSBbXS5wdXNoO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLnsgZm9yRWFjaCwgbWFwLCBmaWx0ZXIsIHNvbWUsIGV2ZXJ5LCBmaW5kLCBmaW5kSW5kZXgsIGZpbHRlck91dCB9YCBtZXRob2RzIGltcGxlbWVudGF0aW9uXG52YXIgY3JlYXRlTWV0aG9kID0gZnVuY3Rpb24gKFRZUEUpIHtcbiAgdmFyIElTX01BUCA9IFRZUEUgPT0gMTtcbiAgdmFyIElTX0ZJTFRFUiA9IFRZUEUgPT0gMjtcbiAgdmFyIElTX1NPTUUgPSBUWVBFID09IDM7XG4gIHZhciBJU19FVkVSWSA9IFRZUEUgPT0gNDtcbiAgdmFyIElTX0ZJTkRfSU5ERVggPSBUWVBFID09IDY7XG4gIHZhciBJU19GSUxURVJfT1VUID0gVFlQRSA9PSA3O1xuICB2YXIgTk9fSE9MRVMgPSBUWVBFID09IDUgfHwgSVNfRklORF9JTkRFWDtcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgY2FsbGJhY2tmbiwgdGhhdCwgc3BlY2lmaWNDcmVhdGUpIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KCR0aGlzKTtcbiAgICB2YXIgc2VsZiA9IEluZGV4ZWRPYmplY3QoTyk7XG4gICAgdmFyIGJvdW5kRnVuY3Rpb24gPSBiaW5kKGNhbGxiYWNrZm4sIHRoYXQsIDMpO1xuICAgIHZhciBsZW5ndGggPSB0b0xlbmd0aChzZWxmLmxlbmd0aCk7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgY3JlYXRlID0gc3BlY2lmaWNDcmVhdGUgfHwgYXJyYXlTcGVjaWVzQ3JlYXRlO1xuICAgIHZhciB0YXJnZXQgPSBJU19NQVAgPyBjcmVhdGUoJHRoaXMsIGxlbmd0aCkgOiBJU19GSUxURVIgfHwgSVNfRklMVEVSX09VVCA/IGNyZWF0ZSgkdGhpcywgMCkgOiB1bmRlZmluZWQ7XG4gICAgdmFyIHZhbHVlLCByZXN1bHQ7XG4gICAgZm9yICg7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIGlmIChOT19IT0xFUyB8fCBpbmRleCBpbiBzZWxmKSB7XG4gICAgICB2YWx1ZSA9IHNlbGZbaW5kZXhdO1xuICAgICAgcmVzdWx0ID0gYm91bmRGdW5jdGlvbih2YWx1ZSwgaW5kZXgsIE8pO1xuICAgICAgaWYgKFRZUEUpIHtcbiAgICAgICAgaWYgKElTX01BUCkgdGFyZ2V0W2luZGV4XSA9IHJlc3VsdDsgLy8gbWFwXG4gICAgICAgIGVsc2UgaWYgKHJlc3VsdCkgc3dpdGNoIChUWVBFKSB7XG4gICAgICAgICAgY2FzZSAzOiByZXR1cm4gdHJ1ZTsgICAgICAgICAgICAgIC8vIHNvbWVcbiAgICAgICAgICBjYXNlIDU6IHJldHVybiB2YWx1ZTsgICAgICAgICAgICAgLy8gZmluZFxuICAgICAgICAgIGNhc2UgNjogcmV0dXJuIGluZGV4OyAgICAgICAgICAgICAvLyBmaW5kSW5kZXhcbiAgICAgICAgICBjYXNlIDI6IHB1c2guY2FsbCh0YXJnZXQsIHZhbHVlKTsgLy8gZmlsdGVyXG4gICAgICAgIH0gZWxzZSBzd2l0Y2ggKFRZUEUpIHtcbiAgICAgICAgICBjYXNlIDQ6IHJldHVybiBmYWxzZTsgICAgICAgICAgICAgLy8gZXZlcnlcbiAgICAgICAgICBjYXNlIDc6IHB1c2guY2FsbCh0YXJnZXQsIHZhbHVlKTsgLy8gZmlsdGVyT3V0XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIElTX0ZJTkRfSU5ERVggPyAtMSA6IElTX1NPTUUgfHwgSVNfRVZFUlkgPyBJU19FVkVSWSA6IHRhcmdldDtcbiAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAvLyBgQXJyYXkucHJvdG90eXBlLmZvckVhY2hgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5mb3JlYWNoXG4gIGZvckVhY2g6IGNyZWF0ZU1ldGhvZCgwKSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5tYXBgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5tYXBcbiAgbWFwOiBjcmVhdGVNZXRob2QoMSksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuZmlsdGVyYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZmlsdGVyXG4gIGZpbHRlcjogY3JlYXRlTWV0aG9kKDIpLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLnNvbWVgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5zb21lXG4gIHNvbWU6IGNyZWF0ZU1ldGhvZCgzKSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5ldmVyeWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmV2ZXJ5XG4gIGV2ZXJ5OiBjcmVhdGVNZXRob2QoNCksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuZmluZGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZpbmRcbiAgZmluZDogY3JlYXRlTWV0aG9kKDUpLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLmZpbmRJbmRleGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZpbmRJbmRleFxuICBmaW5kSW5kZXg6IGNyZWF0ZU1ldGhvZCg2KSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5maWx0ZXJPdXRgIG1ldGhvZFxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1hcnJheS1maWx0ZXJpbmdcbiAgZmlsdGVyT3V0OiBjcmVhdGVNZXRob2QoNylcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWludGVnZXInKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciBhcnJheU1ldGhvZElzU3RyaWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1pcy1zdHJpY3QnKTtcblxudmFyIG1pbiA9IE1hdGgubWluO1xudmFyIG5hdGl2ZUxhc3RJbmRleE9mID0gW10ubGFzdEluZGV4T2Y7XG52YXIgTkVHQVRJVkVfWkVSTyA9ICEhbmF0aXZlTGFzdEluZGV4T2YgJiYgMSAvIFsxXS5sYXN0SW5kZXhPZigxLCAtMCkgPCAwO1xudmFyIFNUUklDVF9NRVRIT0QgPSBhcnJheU1ldGhvZElzU3RyaWN0KCdsYXN0SW5kZXhPZicpO1xudmFyIEZPUkNFRCA9IE5FR0FUSVZFX1pFUk8gfHwgIVNUUklDVF9NRVRIT0Q7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUubGFzdEluZGV4T2ZgIG1ldGhvZCBpbXBsZW1lbnRhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUubGFzdGluZGV4b2Zcbm1vZHVsZS5leHBvcnRzID0gRk9SQ0VEID8gZnVuY3Rpb24gbGFzdEluZGV4T2Yoc2VhcmNoRWxlbWVudCAvKiAsIGZyb21JbmRleCA9IEBbKi0xXSAqLykge1xuICAvLyBjb252ZXJ0IC0wIHRvICswXG4gIGlmIChORUdBVElWRV9aRVJPKSByZXR1cm4gbmF0aXZlTGFzdEluZGV4T2YuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCAwO1xuICB2YXIgTyA9IHRvSW5kZXhlZE9iamVjdCh0aGlzKTtcbiAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgdmFyIGluZGV4ID0gbGVuZ3RoIC0gMTtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSBpbmRleCA9IG1pbihpbmRleCwgdG9JbnRlZ2VyKGFyZ3VtZW50c1sxXSkpO1xuICBpZiAoaW5kZXggPCAwKSBpbmRleCA9IGxlbmd0aCArIGluZGV4O1xuICBmb3IgKDtpbmRleCA+PSAwOyBpbmRleC0tKSBpZiAoaW5kZXggaW4gTyAmJiBPW2luZGV4XSA9PT0gc2VhcmNoRWxlbWVudCkgcmV0dXJuIGluZGV4IHx8IDA7XG4gIHJldHVybiAtMTtcbn0gOiBuYXRpdmVMYXN0SW5kZXhPZjtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIFY4X1ZFUlNJT04gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLXY4LXZlcnNpb24nKTtcblxudmFyIFNQRUNJRVMgPSB3ZWxsS25vd25TeW1ib2woJ3NwZWNpZXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTUVUSE9EX05BTUUpIHtcbiAgLy8gV2UgY2FuJ3QgdXNlIHRoaXMgZmVhdHVyZSBkZXRlY3Rpb24gaW4gVjggc2luY2UgaXQgY2F1c2VzXG4gIC8vIGRlb3B0aW1pemF0aW9uIGFuZCBzZXJpb3VzIHBlcmZvcm1hbmNlIGRlZ3JhZGF0aW9uXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy82NzdcbiAgcmV0dXJuIFY4X1ZFUlNJT04gPj0gNTEgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgYXJyYXkgPSBbXTtcbiAgICB2YXIgY29uc3RydWN0b3IgPSBhcnJheS5jb25zdHJ1Y3RvciA9IHt9O1xuICAgIGNvbnN0cnVjdG9yW1NQRUNJRVNdID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHsgZm9vOiAxIH07XG4gICAgfTtcbiAgICByZXR1cm4gYXJyYXlbTUVUSE9EX05BTUVdKEJvb2xlYW4pLmZvbyAhPT0gMTtcbiAgfSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE1FVEhPRF9OQU1FLCBhcmd1bWVudCkge1xuICB2YXIgbWV0aG9kID0gW11bTUVUSE9EX05BTUVdO1xuICByZXR1cm4gISFtZXRob2QgJiYgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11c2VsZXNzLWNhbGwsbm8tdGhyb3ctbGl0ZXJhbCAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xuICAgIG1ldGhvZC5jYWxsKG51bGwsIGFyZ3VtZW50IHx8IGZ1bmN0aW9uICgpIHsgdGhyb3cgMTsgfSwgMSk7XG4gIH0pO1xufTtcbiIsInZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1mdW5jdGlvbicpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIEluZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5kZXhlZC1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS57IHJlZHVjZSwgcmVkdWNlUmlnaHQgfWAgbWV0aG9kcyBpbXBsZW1lbnRhdGlvblxudmFyIGNyZWF0ZU1ldGhvZCA9IGZ1bmN0aW9uIChJU19SSUdIVCkge1xuICByZXR1cm4gZnVuY3Rpb24gKHRoYXQsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c0xlbmd0aCwgbWVtbykge1xuICAgIGFGdW5jdGlvbihjYWxsYmFja2ZuKTtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KHRoYXQpO1xuICAgIHZhciBzZWxmID0gSW5kZXhlZE9iamVjdChPKTtcbiAgICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgIHZhciBpbmRleCA9IElTX1JJR0hUID8gbGVuZ3RoIC0gMSA6IDA7XG4gICAgdmFyIGkgPSBJU19SSUdIVCA/IC0xIDogMTtcbiAgICBpZiAoYXJndW1lbnRzTGVuZ3RoIDwgMikgd2hpbGUgKHRydWUpIHtcbiAgICAgIGlmIChpbmRleCBpbiBzZWxmKSB7XG4gICAgICAgIG1lbW8gPSBzZWxmW2luZGV4XTtcbiAgICAgICAgaW5kZXggKz0gaTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBpbmRleCArPSBpO1xuICAgICAgaWYgKElTX1JJR0hUID8gaW5kZXggPCAwIDogbGVuZ3RoIDw9IGluZGV4KSB7XG4gICAgICAgIHRocm93IFR5cGVFcnJvcignUmVkdWNlIG9mIGVtcHR5IGFycmF5IHdpdGggbm8gaW5pdGlhbCB2YWx1ZScpO1xuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKDtJU19SSUdIVCA/IGluZGV4ID49IDAgOiBsZW5ndGggPiBpbmRleDsgaW5kZXggKz0gaSkgaWYgKGluZGV4IGluIHNlbGYpIHtcbiAgICAgIG1lbW8gPSBjYWxsYmFja2ZuKG1lbW8sIHNlbGZbaW5kZXhdLCBpbmRleCwgTyk7XG4gICAgfVxuICAgIHJldHVybiBtZW1vO1xuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIC8vIGBBcnJheS5wcm90b3R5cGUucmVkdWNlYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUucmVkdWNlXG4gIGxlZnQ6IGNyZWF0ZU1ldGhvZChmYWxzZSksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUucmVkdWNlUmlnaHRgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5yZWR1Y2VyaWdodFxuICByaWdodDogY3JlYXRlTWV0aG9kKHRydWUpXG59O1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtYXJyYXknKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIFNQRUNJRVMgPSB3ZWxsS25vd25TeW1ib2woJ3NwZWNpZXMnKTtcblxuLy8gYEFycmF5U3BlY2llc0NyZWF0ZWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5c3BlY2llc2NyZWF0ZVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob3JpZ2luYWxBcnJheSwgbGVuZ3RoKSB7XG4gIHZhciBDO1xuICBpZiAoaXNBcnJheShvcmlnaW5hbEFycmF5KSkge1xuICAgIEMgPSBvcmlnaW5hbEFycmF5LmNvbnN0cnVjdG9yO1xuICAgIC8vIGNyb3NzLXJlYWxtIGZhbGxiYWNrXG4gICAgaWYgKHR5cGVvZiBDID09ICdmdW5jdGlvbicgJiYgKEMgPT09IEFycmF5IHx8IGlzQXJyYXkoQy5wcm90b3R5cGUpKSkgQyA9IHVuZGVmaW5lZDtcbiAgICBlbHNlIGlmIChpc09iamVjdChDKSkge1xuICAgICAgQyA9IENbU1BFQ0lFU107XG4gICAgICBpZiAoQyA9PT0gbnVsbCkgQyA9IHVuZGVmaW5lZDtcbiAgICB9XG4gIH0gcmV0dXJuIG5ldyAoQyA9PT0gdW5kZWZpbmVkID8gQXJyYXkgOiBDKShsZW5ndGggPT09IDAgPyAwIDogbGVuZ3RoKTtcbn07XG4iLCJ2YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgaXRlcmF0b3JDbG9zZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvci1jbG9zZScpO1xuXG4vLyBjYWxsIHNvbWV0aGluZyBvbiBpdGVyYXRvciBzdGVwIHdpdGggc2FmZSBjbG9zaW5nIG9uIGVycm9yXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVyYXRvciwgZm4sIHZhbHVlLCBFTlRSSUVTKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIEVOVFJJRVMgPyBmbihhbk9iamVjdCh2YWx1ZSlbMF0sIHZhbHVlWzFdKSA6IGZuKHZhbHVlKTtcbiAgLy8gNy40LjYgSXRlcmF0b3JDbG9zZShpdGVyYXRvciwgY29tcGxldGlvbilcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBpdGVyYXRvckNsb3NlKGl0ZXJhdG9yKTtcbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxufTtcbiIsInZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xudmFyIFNBRkVfQ0xPU0lORyA9IGZhbHNlO1xuXG50cnkge1xuICB2YXIgY2FsbGVkID0gMDtcbiAgdmFyIGl0ZXJhdG9yV2l0aFJldHVybiA9IHtcbiAgICBuZXh0OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4geyBkb25lOiAhIWNhbGxlZCsrIH07XG4gICAgfSxcbiAgICAncmV0dXJuJzogZnVuY3Rpb24gKCkge1xuICAgICAgU0FGRV9DTE9TSU5HID0gdHJ1ZTtcbiAgICB9XG4gIH07XG4gIGl0ZXJhdG9yV2l0aFJldHVybltJVEVSQVRPUl0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby10aHJvdy1saXRlcmFsIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gIEFycmF5LmZyb20oaXRlcmF0b3JXaXRoUmV0dXJuLCBmdW5jdGlvbiAoKSB7IHRocm93IDI7IH0pO1xufSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjLCBTS0lQX0NMT1NJTkcpIHtcbiAgaWYgKCFTS0lQX0NMT1NJTkcgJiYgIVNBRkVfQ0xPU0lORykgcmV0dXJuIGZhbHNlO1xuICB2YXIgSVRFUkFUSU9OX1NVUFBPUlQgPSBmYWxzZTtcbiAgdHJ5IHtcbiAgICB2YXIgb2JqZWN0ID0ge307XG4gICAgb2JqZWN0W0lURVJBVE9SXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG5leHQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4geyBkb25lOiBJVEVSQVRJT05fU1VQUE9SVCA9IHRydWUgfTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9O1xuICAgIGV4ZWMob2JqZWN0KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuICByZXR1cm4gSVRFUkFUSU9OX1NVUFBPUlQ7XG59O1xuIiwidmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKGl0KS5zbGljZSg4LCAtMSk7XG59O1xuIiwidmFyIFRPX1NUUklOR19UQUdfU1VQUE9SVCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmctdGFnLXN1cHBvcnQnKTtcbnZhciBjbGFzc29mUmF3ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YtcmF3Jyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBUT19TVFJJTkdfVEFHID0gd2VsbEtub3duU3ltYm9sKCd0b1N0cmluZ1RhZycpO1xuLy8gRVMzIHdyb25nIGhlcmVcbnZhciBDT1JSRUNUX0FSR1VNRU5UUyA9IGNsYXNzb2ZSYXcoZnVuY3Rpb24gKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpID09ICdBcmd1bWVudHMnO1xuXG4vLyBmYWxsYmFjayBmb3IgSUUxMSBTY3JpcHQgQWNjZXNzIERlbmllZCBlcnJvclxudmFyIHRyeUdldCA9IGZ1bmN0aW9uIChpdCwga2V5KSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGl0W2tleV07XG4gIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cbn07XG5cbi8vIGdldHRpbmcgdGFnIGZyb20gRVM2KyBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ2Bcbm1vZHVsZS5leHBvcnRzID0gVE9fU1RSSU5HX1RBR19TVVBQT1JUID8gY2xhc3NvZlJhdyA6IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgTywgdGFnLCByZXN1bHQ7XG4gIHJldHVybiBpdCA9PT0gdW5kZWZpbmVkID8gJ1VuZGVmaW5lZCcgOiBpdCA9PT0gbnVsbCA/ICdOdWxsJ1xuICAgIC8vIEBAdG9TdHJpbmdUYWcgY2FzZVxuICAgIDogdHlwZW9mICh0YWcgPSB0cnlHZXQoTyA9IE9iamVjdChpdCksIFRPX1NUUklOR19UQUcpKSA9PSAnc3RyaW5nJyA/IHRhZ1xuICAgIC8vIGJ1aWx0aW5UYWcgY2FzZVxuICAgIDogQ09SUkVDVF9BUkdVTUVOVFMgPyBjbGFzc29mUmF3KE8pXG4gICAgLy8gRVMzIGFyZ3VtZW50cyBmYWxsYmFja1xuICAgIDogKHJlc3VsdCA9IGNsYXNzb2ZSYXcoTykpID09ICdPYmplY3QnICYmIHR5cGVvZiBPLmNhbGxlZSA9PSAnZnVuY3Rpb24nID8gJ0FyZ3VtZW50cycgOiByZXN1bHQ7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKS5mO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtY3JlYXRlJyk7XG52YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUtYWxsJyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLWNvbnRleHQnKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLWluc3RhbmNlJyk7XG52YXIgaXRlcmF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRlJyk7XG52YXIgZGVmaW5lSXRlcmF0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLWl0ZXJhdG9yJyk7XG52YXIgc2V0U3BlY2llcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtc3BlY2llcycpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgZmFzdEtleSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1tZXRhZGF0YScpLmZhc3RLZXk7XG52YXIgSW50ZXJuYWxTdGF0ZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZScpO1xuXG52YXIgc2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuc2V0O1xudmFyIGludGVybmFsU3RhdGVHZXR0ZXJGb3IgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldHRlckZvcjtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGdldENvbnN0cnVjdG9yOiBmdW5jdGlvbiAod3JhcHBlciwgQ09OU1RSVUNUT1JfTkFNRSwgSVNfTUFQLCBBRERFUikge1xuICAgIHZhciBDID0gd3JhcHBlcihmdW5jdGlvbiAodGhhdCwgaXRlcmFibGUpIHtcbiAgICAgIGFuSW5zdGFuY2UodGhhdCwgQywgQ09OU1RSVUNUT1JfTkFNRSk7XG4gICAgICBzZXRJbnRlcm5hbFN0YXRlKHRoYXQsIHtcbiAgICAgICAgdHlwZTogQ09OU1RSVUNUT1JfTkFNRSxcbiAgICAgICAgaW5kZXg6IGNyZWF0ZShudWxsKSxcbiAgICAgICAgZmlyc3Q6IHVuZGVmaW5lZCxcbiAgICAgICAgbGFzdDogdW5kZWZpbmVkLFxuICAgICAgICBzaXplOiAwXG4gICAgICB9KTtcbiAgICAgIGlmICghREVTQ1JJUFRPUlMpIHRoYXQuc2l6ZSA9IDA7XG4gICAgICBpZiAoaXRlcmFibGUgIT0gdW5kZWZpbmVkKSBpdGVyYXRlKGl0ZXJhYmxlLCB0aGF0W0FEREVSXSwgeyB0aGF0OiB0aGF0LCBBU19FTlRSSUVTOiBJU19NQVAgfSk7XG4gICAgfSk7XG5cbiAgICB2YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IGludGVybmFsU3RhdGVHZXR0ZXJGb3IoQ09OU1RSVUNUT1JfTkFNRSk7XG5cbiAgICB2YXIgZGVmaW5lID0gZnVuY3Rpb24gKHRoYXQsIGtleSwgdmFsdWUpIHtcbiAgICAgIHZhciBzdGF0ZSA9IGdldEludGVybmFsU3RhdGUodGhhdCk7XG4gICAgICB2YXIgZW50cnkgPSBnZXRFbnRyeSh0aGF0LCBrZXkpO1xuICAgICAgdmFyIHByZXZpb3VzLCBpbmRleDtcbiAgICAgIC8vIGNoYW5nZSBleGlzdGluZyBlbnRyeVxuICAgICAgaWYgKGVudHJ5KSB7XG4gICAgICAgIGVudHJ5LnZhbHVlID0gdmFsdWU7XG4gICAgICAvLyBjcmVhdGUgbmV3IGVudHJ5XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdGF0ZS5sYXN0ID0gZW50cnkgPSB7XG4gICAgICAgICAgaW5kZXg6IGluZGV4ID0gZmFzdEtleShrZXksIHRydWUpLFxuICAgICAgICAgIGtleToga2V5LFxuICAgICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgICBwcmV2aW91czogcHJldmlvdXMgPSBzdGF0ZS5sYXN0LFxuICAgICAgICAgIG5leHQ6IHVuZGVmaW5lZCxcbiAgICAgICAgICByZW1vdmVkOiBmYWxzZVxuICAgICAgICB9O1xuICAgICAgICBpZiAoIXN0YXRlLmZpcnN0KSBzdGF0ZS5maXJzdCA9IGVudHJ5O1xuICAgICAgICBpZiAocHJldmlvdXMpIHByZXZpb3VzLm5leHQgPSBlbnRyeTtcbiAgICAgICAgaWYgKERFU0NSSVBUT1JTKSBzdGF0ZS5zaXplKys7XG4gICAgICAgIGVsc2UgdGhhdC5zaXplKys7XG4gICAgICAgIC8vIGFkZCB0byBpbmRleFxuICAgICAgICBpZiAoaW5kZXggIT09ICdGJykgc3RhdGUuaW5kZXhbaW5kZXhdID0gZW50cnk7XG4gICAgICB9IHJldHVybiB0aGF0O1xuICAgIH07XG5cbiAgICB2YXIgZ2V0RW50cnkgPSBmdW5jdGlvbiAodGhhdCwga2V5KSB7XG4gICAgICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHRoYXQpO1xuICAgICAgLy8gZmFzdCBjYXNlXG4gICAgICB2YXIgaW5kZXggPSBmYXN0S2V5KGtleSk7XG4gICAgICB2YXIgZW50cnk7XG4gICAgICBpZiAoaW5kZXggIT09ICdGJykgcmV0dXJuIHN0YXRlLmluZGV4W2luZGV4XTtcbiAgICAgIC8vIGZyb3plbiBvYmplY3QgY2FzZVxuICAgICAgZm9yIChlbnRyeSA9IHN0YXRlLmZpcnN0OyBlbnRyeTsgZW50cnkgPSBlbnRyeS5uZXh0KSB7XG4gICAgICAgIGlmIChlbnRyeS5rZXkgPT0ga2V5KSByZXR1cm4gZW50cnk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHJlZGVmaW5lQWxsKEMucHJvdG90eXBlLCB7XG4gICAgICAvLyAyMy4xLjMuMSBNYXAucHJvdG90eXBlLmNsZWFyKClcbiAgICAgIC8vIDIzLjIuMy4yIFNldC5wcm90b3R5cGUuY2xlYXIoKVxuICAgICAgY2xlYXI6IGZ1bmN0aW9uIGNsZWFyKCkge1xuICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICAgIHZhciBzdGF0ZSA9IGdldEludGVybmFsU3RhdGUodGhhdCk7XG4gICAgICAgIHZhciBkYXRhID0gc3RhdGUuaW5kZXg7XG4gICAgICAgIHZhciBlbnRyeSA9IHN0YXRlLmZpcnN0O1xuICAgICAgICB3aGlsZSAoZW50cnkpIHtcbiAgICAgICAgICBlbnRyeS5yZW1vdmVkID0gdHJ1ZTtcbiAgICAgICAgICBpZiAoZW50cnkucHJldmlvdXMpIGVudHJ5LnByZXZpb3VzID0gZW50cnkucHJldmlvdXMubmV4dCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBkZWxldGUgZGF0YVtlbnRyeS5pbmRleF07XG4gICAgICAgICAgZW50cnkgPSBlbnRyeS5uZXh0O1xuICAgICAgICB9XG4gICAgICAgIHN0YXRlLmZpcnN0ID0gc3RhdGUubGFzdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgaWYgKERFU0NSSVBUT1JTKSBzdGF0ZS5zaXplID0gMDtcbiAgICAgICAgZWxzZSB0aGF0LnNpemUgPSAwO1xuICAgICAgfSxcbiAgICAgIC8vIDIzLjEuMy4zIE1hcC5wcm90b3R5cGUuZGVsZXRlKGtleSlcbiAgICAgIC8vIDIzLjIuMy40IFNldC5wcm90b3R5cGUuZGVsZXRlKHZhbHVlKVxuICAgICAgJ2RlbGV0ZSc6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHRoYXQpO1xuICAgICAgICB2YXIgZW50cnkgPSBnZXRFbnRyeSh0aGF0LCBrZXkpO1xuICAgICAgICBpZiAoZW50cnkpIHtcbiAgICAgICAgICB2YXIgbmV4dCA9IGVudHJ5Lm5leHQ7XG4gICAgICAgICAgdmFyIHByZXYgPSBlbnRyeS5wcmV2aW91cztcbiAgICAgICAgICBkZWxldGUgc3RhdGUuaW5kZXhbZW50cnkuaW5kZXhdO1xuICAgICAgICAgIGVudHJ5LnJlbW92ZWQgPSB0cnVlO1xuICAgICAgICAgIGlmIChwcmV2KSBwcmV2Lm5leHQgPSBuZXh0O1xuICAgICAgICAgIGlmIChuZXh0KSBuZXh0LnByZXZpb3VzID0gcHJldjtcbiAgICAgICAgICBpZiAoc3RhdGUuZmlyc3QgPT0gZW50cnkpIHN0YXRlLmZpcnN0ID0gbmV4dDtcbiAgICAgICAgICBpZiAoc3RhdGUubGFzdCA9PSBlbnRyeSkgc3RhdGUubGFzdCA9IHByZXY7XG4gICAgICAgICAgaWYgKERFU0NSSVBUT1JTKSBzdGF0ZS5zaXplLS07XG4gICAgICAgICAgZWxzZSB0aGF0LnNpemUtLTtcbiAgICAgICAgfSByZXR1cm4gISFlbnRyeTtcbiAgICAgIH0sXG4gICAgICAvLyAyMy4yLjMuNiBTZXQucHJvdG90eXBlLmZvckVhY2goY2FsbGJhY2tmbiwgdGhpc0FyZyA9IHVuZGVmaW5lZClcbiAgICAgIC8vIDIzLjEuMy41IE1hcC5wcm90b3R5cGUuZm9yRWFjaChjYWxsYmFja2ZuLCB0aGlzQXJnID0gdW5kZWZpbmVkKVxuICAgICAgZm9yRWFjaDogZnVuY3Rpb24gZm9yRWFjaChjYWxsYmFja2ZuIC8qICwgdGhhdCA9IHVuZGVmaW5lZCAqLykge1xuICAgICAgICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpO1xuICAgICAgICB2YXIgYm91bmRGdW5jdGlvbiA9IGJpbmQoY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIDMpO1xuICAgICAgICB2YXIgZW50cnk7XG4gICAgICAgIHdoaWxlIChlbnRyeSA9IGVudHJ5ID8gZW50cnkubmV4dCA6IHN0YXRlLmZpcnN0KSB7XG4gICAgICAgICAgYm91bmRGdW5jdGlvbihlbnRyeS52YWx1ZSwgZW50cnkua2V5LCB0aGlzKTtcbiAgICAgICAgICAvLyByZXZlcnQgdG8gdGhlIGxhc3QgZXhpc3RpbmcgZW50cnlcbiAgICAgICAgICB3aGlsZSAoZW50cnkgJiYgZW50cnkucmVtb3ZlZCkgZW50cnkgPSBlbnRyeS5wcmV2aW91cztcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIC8vIDIzLjEuMy43IE1hcC5wcm90b3R5cGUuaGFzKGtleSlcbiAgICAgIC8vIDIzLjIuMy43IFNldC5wcm90b3R5cGUuaGFzKHZhbHVlKVxuICAgICAgaGFzOiBmdW5jdGlvbiBoYXMoa2V5KSB7XG4gICAgICAgIHJldHVybiAhIWdldEVudHJ5KHRoaXMsIGtleSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZWRlZmluZUFsbChDLnByb3RvdHlwZSwgSVNfTUFQID8ge1xuICAgICAgLy8gMjMuMS4zLjYgTWFwLnByb3RvdHlwZS5nZXQoa2V5KVxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoa2V5KSB7XG4gICAgICAgIHZhciBlbnRyeSA9IGdldEVudHJ5KHRoaXMsIGtleSk7XG4gICAgICAgIHJldHVybiBlbnRyeSAmJiBlbnRyeS52YWx1ZTtcbiAgICAgIH0sXG4gICAgICAvLyAyMy4xLjMuOSBNYXAucHJvdG90eXBlLnNldChrZXksIHZhbHVlKVxuICAgICAgc2V0OiBmdW5jdGlvbiBzZXQoa2V5LCB2YWx1ZSkge1xuICAgICAgICByZXR1cm4gZGVmaW5lKHRoaXMsIGtleSA9PT0gMCA/IDAgOiBrZXksIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9IDoge1xuICAgICAgLy8gMjMuMi4zLjEgU2V0LnByb3RvdHlwZS5hZGQodmFsdWUpXG4gICAgICBhZGQ6IGZ1bmN0aW9uIGFkZCh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gZGVmaW5lKHRoaXMsIHZhbHVlID0gdmFsdWUgPT09IDAgPyAwIDogdmFsdWUsIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoREVTQ1JJUFRPUlMpIGRlZmluZVByb3BlcnR5KEMucHJvdG90eXBlLCAnc2l6ZScsIHtcbiAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKS5zaXplO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBDO1xuICB9LFxuICBzZXRTdHJvbmc6IGZ1bmN0aW9uIChDLCBDT05TVFJVQ1RPUl9OQU1FLCBJU19NQVApIHtcbiAgICB2YXIgSVRFUkFUT1JfTkFNRSA9IENPTlNUUlVDVE9SX05BTUUgKyAnIEl0ZXJhdG9yJztcbiAgICB2YXIgZ2V0SW50ZXJuYWxDb2xsZWN0aW9uU3RhdGUgPSBpbnRlcm5hbFN0YXRlR2V0dGVyRm9yKENPTlNUUlVDVE9SX05BTUUpO1xuICAgIHZhciBnZXRJbnRlcm5hbEl0ZXJhdG9yU3RhdGUgPSBpbnRlcm5hbFN0YXRlR2V0dGVyRm9yKElURVJBVE9SX05BTUUpO1xuICAgIC8vIGFkZCAua2V5cywgLnZhbHVlcywgLmVudHJpZXMsIFtAQGl0ZXJhdG9yXVxuICAgIC8vIDIzLjEuMy40LCAyMy4xLjMuOCwgMjMuMS4zLjExLCAyMy4xLjMuMTIsIDIzLjIuMy41LCAyMy4yLjMuOCwgMjMuMi4zLjEwLCAyMy4yLjMuMTFcbiAgICBkZWZpbmVJdGVyYXRvcihDLCBDT05TVFJVQ1RPUl9OQU1FLCBmdW5jdGlvbiAoaXRlcmF0ZWQsIGtpbmQpIHtcbiAgICAgIHNldEludGVybmFsU3RhdGUodGhpcywge1xuICAgICAgICB0eXBlOiBJVEVSQVRPUl9OQU1FLFxuICAgICAgICB0YXJnZXQ6IGl0ZXJhdGVkLFxuICAgICAgICBzdGF0ZTogZ2V0SW50ZXJuYWxDb2xsZWN0aW9uU3RhdGUoaXRlcmF0ZWQpLFxuICAgICAgICBraW5kOiBraW5kLFxuICAgICAgICBsYXN0OiB1bmRlZmluZWRcbiAgICAgIH0pO1xuICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBzdGF0ZSA9IGdldEludGVybmFsSXRlcmF0b3JTdGF0ZSh0aGlzKTtcbiAgICAgIHZhciBraW5kID0gc3RhdGUua2luZDtcbiAgICAgIHZhciBlbnRyeSA9IHN0YXRlLmxhc3Q7XG4gICAgICAvLyByZXZlcnQgdG8gdGhlIGxhc3QgZXhpc3RpbmcgZW50cnlcbiAgICAgIHdoaWxlIChlbnRyeSAmJiBlbnRyeS5yZW1vdmVkKSBlbnRyeSA9IGVudHJ5LnByZXZpb3VzO1xuICAgICAgLy8gZ2V0IG5leHQgZW50cnlcbiAgICAgIGlmICghc3RhdGUudGFyZ2V0IHx8ICEoc3RhdGUubGFzdCA9IGVudHJ5ID0gZW50cnkgPyBlbnRyeS5uZXh0IDogc3RhdGUuc3RhdGUuZmlyc3QpKSB7XG4gICAgICAgIC8vIG9yIGZpbmlzaCB0aGUgaXRlcmF0aW9uXG4gICAgICAgIHN0YXRlLnRhcmdldCA9IHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICAgICAgfVxuICAgICAgLy8gcmV0dXJuIHN0ZXAgYnkga2luZFxuICAgICAgaWYgKGtpbmQgPT0gJ2tleXMnKSByZXR1cm4geyB2YWx1ZTogZW50cnkua2V5LCBkb25lOiBmYWxzZSB9O1xuICAgICAgaWYgKGtpbmQgPT0gJ3ZhbHVlcycpIHJldHVybiB7IHZhbHVlOiBlbnRyeS52YWx1ZSwgZG9uZTogZmFsc2UgfTtcbiAgICAgIHJldHVybiB7IHZhbHVlOiBbZW50cnkua2V5LCBlbnRyeS52YWx1ZV0sIGRvbmU6IGZhbHNlIH07XG4gICAgfSwgSVNfTUFQID8gJ2VudHJpZXMnIDogJ3ZhbHVlcycsICFJU19NQVAsIHRydWUpO1xuXG4gICAgLy8gYWRkIFtAQHNwZWNpZXNdLCAyMy4xLjIuMiwgMjMuMi4yLjJcbiAgICBzZXRTcGVjaWVzKENPTlNUUlVDVE9SX05BTUUpO1xuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHJlZGVmaW5lQWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lLWFsbCcpO1xudmFyIGdldFdlYWtEYXRhID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLW1ldGFkYXRhJykuZ2V0V2Vha0RhdGE7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1pbnN0YW5jZScpO1xudmFyIGl0ZXJhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0ZScpO1xudmFyIEFycmF5SXRlcmF0aW9uTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWl0ZXJhdGlvbicpO1xudmFyICRoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgSW50ZXJuYWxTdGF0ZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZScpO1xuXG52YXIgc2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuc2V0O1xudmFyIGludGVybmFsU3RhdGVHZXR0ZXJGb3IgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldHRlckZvcjtcbnZhciBmaW5kID0gQXJyYXlJdGVyYXRpb25Nb2R1bGUuZmluZDtcbnZhciBmaW5kSW5kZXggPSBBcnJheUl0ZXJhdGlvbk1vZHVsZS5maW5kSW5kZXg7XG52YXIgaWQgPSAwO1xuXG4vLyBmYWxsYmFjayBmb3IgdW5jYXVnaHQgZnJvemVuIGtleXNcbnZhciB1bmNhdWdodEZyb3plblN0b3JlID0gZnVuY3Rpb24gKHN0b3JlKSB7XG4gIHJldHVybiBzdG9yZS5mcm96ZW4gfHwgKHN0b3JlLmZyb3plbiA9IG5ldyBVbmNhdWdodEZyb3plblN0b3JlKCkpO1xufTtcblxudmFyIFVuY2F1Z2h0RnJvemVuU3RvcmUgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuZW50cmllcyA9IFtdO1xufTtcblxudmFyIGZpbmRVbmNhdWdodEZyb3plbiA9IGZ1bmN0aW9uIChzdG9yZSwga2V5KSB7XG4gIHJldHVybiBmaW5kKHN0b3JlLmVudHJpZXMsIGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiBpdFswXSA9PT0ga2V5O1xuICB9KTtcbn07XG5cblVuY2F1Z2h0RnJvemVuU3RvcmUucHJvdG90eXBlID0ge1xuICBnZXQ6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgZW50cnkgPSBmaW5kVW5jYXVnaHRGcm96ZW4odGhpcywga2V5KTtcbiAgICBpZiAoZW50cnkpIHJldHVybiBlbnRyeVsxXTtcbiAgfSxcbiAgaGFzOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuICEhZmluZFVuY2F1Z2h0RnJvemVuKHRoaXMsIGtleSk7XG4gIH0sXG4gIHNldDogZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICB2YXIgZW50cnkgPSBmaW5kVW5jYXVnaHRGcm96ZW4odGhpcywga2V5KTtcbiAgICBpZiAoZW50cnkpIGVudHJ5WzFdID0gdmFsdWU7XG4gICAgZWxzZSB0aGlzLmVudHJpZXMucHVzaChba2V5LCB2YWx1ZV0pO1xuICB9LFxuICAnZGVsZXRlJzogZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciBpbmRleCA9IGZpbmRJbmRleCh0aGlzLmVudHJpZXMsIGZ1bmN0aW9uIChpdCkge1xuICAgICAgcmV0dXJuIGl0WzBdID09PSBrZXk7XG4gICAgfSk7XG4gICAgaWYgKH5pbmRleCkgdGhpcy5lbnRyaWVzLnNwbGljZShpbmRleCwgMSk7XG4gICAgcmV0dXJuICEhfmluZGV4O1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZ2V0Q29uc3RydWN0b3I6IGZ1bmN0aW9uICh3cmFwcGVyLCBDT05TVFJVQ1RPUl9OQU1FLCBJU19NQVAsIEFEREVSKSB7XG4gICAgdmFyIEMgPSB3cmFwcGVyKGZ1bmN0aW9uICh0aGF0LCBpdGVyYWJsZSkge1xuICAgICAgYW5JbnN0YW5jZSh0aGF0LCBDLCBDT05TVFJVQ1RPUl9OQU1FKTtcbiAgICAgIHNldEludGVybmFsU3RhdGUodGhhdCwge1xuICAgICAgICB0eXBlOiBDT05TVFJVQ1RPUl9OQU1FLFxuICAgICAgICBpZDogaWQrKyxcbiAgICAgICAgZnJvemVuOiB1bmRlZmluZWRcbiAgICAgIH0pO1xuICAgICAgaWYgKGl0ZXJhYmxlICE9IHVuZGVmaW5lZCkgaXRlcmF0ZShpdGVyYWJsZSwgdGhhdFtBRERFUl0sIHsgdGhhdDogdGhhdCwgQVNfRU5UUklFUzogSVNfTUFQIH0pO1xuICAgIH0pO1xuXG4gICAgdmFyIGdldEludGVybmFsU3RhdGUgPSBpbnRlcm5hbFN0YXRlR2V0dGVyRm9yKENPTlNUUlVDVE9SX05BTUUpO1xuXG4gICAgdmFyIGRlZmluZSA9IGZ1bmN0aW9uICh0aGF0LCBrZXksIHZhbHVlKSB7XG4gICAgICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHRoYXQpO1xuICAgICAgdmFyIGRhdGEgPSBnZXRXZWFrRGF0YShhbk9iamVjdChrZXkpLCB0cnVlKTtcbiAgICAgIGlmIChkYXRhID09PSB0cnVlKSB1bmNhdWdodEZyb3plblN0b3JlKHN0YXRlKS5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgICBlbHNlIGRhdGFbc3RhdGUuaWRdID0gdmFsdWU7XG4gICAgICByZXR1cm4gdGhhdDtcbiAgICB9O1xuXG4gICAgcmVkZWZpbmVBbGwoQy5wcm90b3R5cGUsIHtcbiAgICAgIC8vIDIzLjMuMy4yIFdlYWtNYXAucHJvdG90eXBlLmRlbGV0ZShrZXkpXG4gICAgICAvLyAyMy40LjMuMyBXZWFrU2V0LnByb3RvdHlwZS5kZWxldGUodmFsdWUpXG4gICAgICAnZGVsZXRlJzogZnVuY3Rpb24gKGtleSkge1xuICAgICAgICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpO1xuICAgICAgICBpZiAoIWlzT2JqZWN0KGtleSkpIHJldHVybiBmYWxzZTtcbiAgICAgICAgdmFyIGRhdGEgPSBnZXRXZWFrRGF0YShrZXkpO1xuICAgICAgICBpZiAoZGF0YSA9PT0gdHJ1ZSkgcmV0dXJuIHVuY2F1Z2h0RnJvemVuU3RvcmUoc3RhdGUpWydkZWxldGUnXShrZXkpO1xuICAgICAgICByZXR1cm4gZGF0YSAmJiAkaGFzKGRhdGEsIHN0YXRlLmlkKSAmJiBkZWxldGUgZGF0YVtzdGF0ZS5pZF07XG4gICAgICB9LFxuICAgICAgLy8gMjMuMy4zLjQgV2Vha01hcC5wcm90b3R5cGUuaGFzKGtleSlcbiAgICAgIC8vIDIzLjQuMy40IFdlYWtTZXQucHJvdG90eXBlLmhhcyh2YWx1ZSlcbiAgICAgIGhhczogZnVuY3Rpb24gaGFzKGtleSkge1xuICAgICAgICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpO1xuICAgICAgICBpZiAoIWlzT2JqZWN0KGtleSkpIHJldHVybiBmYWxzZTtcbiAgICAgICAgdmFyIGRhdGEgPSBnZXRXZWFrRGF0YShrZXkpO1xuICAgICAgICBpZiAoZGF0YSA9PT0gdHJ1ZSkgcmV0dXJuIHVuY2F1Z2h0RnJvemVuU3RvcmUoc3RhdGUpLmhhcyhrZXkpO1xuICAgICAgICByZXR1cm4gZGF0YSAmJiAkaGFzKGRhdGEsIHN0YXRlLmlkKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJlZGVmaW5lQWxsKEMucHJvdG90eXBlLCBJU19NQVAgPyB7XG4gICAgICAvLyAyMy4zLjMuMyBXZWFrTWFwLnByb3RvdHlwZS5nZXQoa2V5KVxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoa2V5KSB7XG4gICAgICAgIHZhciBzdGF0ZSA9IGdldEludGVybmFsU3RhdGUodGhpcyk7XG4gICAgICAgIGlmIChpc09iamVjdChrZXkpKSB7XG4gICAgICAgICAgdmFyIGRhdGEgPSBnZXRXZWFrRGF0YShrZXkpO1xuICAgICAgICAgIGlmIChkYXRhID09PSB0cnVlKSByZXR1cm4gdW5jYXVnaHRGcm96ZW5TdG9yZShzdGF0ZSkuZ2V0KGtleSk7XG4gICAgICAgICAgcmV0dXJuIGRhdGEgPyBkYXRhW3N0YXRlLmlkXSA6IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIC8vIDIzLjMuMy41IFdlYWtNYXAucHJvdG90eXBlLnNldChrZXksIHZhbHVlKVxuICAgICAgc2V0OiBmdW5jdGlvbiBzZXQoa2V5LCB2YWx1ZSkge1xuICAgICAgICByZXR1cm4gZGVmaW5lKHRoaXMsIGtleSwgdmFsdWUpO1xuICAgICAgfVxuICAgIH0gOiB7XG4gICAgICAvLyAyMy40LjMuMSBXZWFrU2V0LnByb3RvdHlwZS5hZGQodmFsdWUpXG4gICAgICBhZGQ6IGZ1bmN0aW9uIGFkZCh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gZGVmaW5lKHRoaXMsIHZhbHVlLCB0cnVlKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBDO1xuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGlzRm9yY2VkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWZvcmNlZCcpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lJyk7XG52YXIgSW50ZXJuYWxNZXRhZGF0YU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1tZXRhZGF0YScpO1xudmFyIGl0ZXJhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0ZScpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4taW5zdGFuY2UnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGNoZWNrQ29ycmVjdG5lc3NPZkl0ZXJhdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jaGVjay1jb3JyZWN0bmVzcy1vZi1pdGVyYXRpb24nKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIGluaGVyaXRJZlJlcXVpcmVkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2luaGVyaXQtaWYtcmVxdWlyZWQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQ09OU1RSVUNUT1JfTkFNRSwgd3JhcHBlciwgY29tbW9uKSB7XG4gIHZhciBJU19NQVAgPSBDT05TVFJVQ1RPUl9OQU1FLmluZGV4T2YoJ01hcCcpICE9PSAtMTtcbiAgdmFyIElTX1dFQUsgPSBDT05TVFJVQ1RPUl9OQU1FLmluZGV4T2YoJ1dlYWsnKSAhPT0gLTE7XG4gIHZhciBBRERFUiA9IElTX01BUCA/ICdzZXQnIDogJ2FkZCc7XG4gIHZhciBOYXRpdmVDb25zdHJ1Y3RvciA9IGdsb2JhbFtDT05TVFJVQ1RPUl9OQU1FXTtcbiAgdmFyIE5hdGl2ZVByb3RvdHlwZSA9IE5hdGl2ZUNvbnN0cnVjdG9yICYmIE5hdGl2ZUNvbnN0cnVjdG9yLnByb3RvdHlwZTtcbiAgdmFyIENvbnN0cnVjdG9yID0gTmF0aXZlQ29uc3RydWN0b3I7XG4gIHZhciBleHBvcnRlZCA9IHt9O1xuXG4gIHZhciBmaXhNZXRob2QgPSBmdW5jdGlvbiAoS0VZKSB7XG4gICAgdmFyIG5hdGl2ZU1ldGhvZCA9IE5hdGl2ZVByb3RvdHlwZVtLRVldO1xuICAgIHJlZGVmaW5lKE5hdGl2ZVByb3RvdHlwZSwgS0VZLFxuICAgICAgS0VZID09ICdhZGQnID8gZnVuY3Rpb24gYWRkKHZhbHVlKSB7XG4gICAgICAgIG5hdGl2ZU1ldGhvZC5jYWxsKHRoaXMsIHZhbHVlID09PSAwID8gMCA6IHZhbHVlKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9IDogS0VZID09ICdkZWxldGUnID8gZnVuY3Rpb24gKGtleSkge1xuICAgICAgICByZXR1cm4gSVNfV0VBSyAmJiAhaXNPYmplY3Qoa2V5KSA/IGZhbHNlIDogbmF0aXZlTWV0aG9kLmNhbGwodGhpcywga2V5ID09PSAwID8gMCA6IGtleSk7XG4gICAgICB9IDogS0VZID09ICdnZXQnID8gZnVuY3Rpb24gZ2V0KGtleSkge1xuICAgICAgICByZXR1cm4gSVNfV0VBSyAmJiAhaXNPYmplY3Qoa2V5KSA/IHVuZGVmaW5lZCA6IG5hdGl2ZU1ldGhvZC5jYWxsKHRoaXMsIGtleSA9PT0gMCA/IDAgOiBrZXkpO1xuICAgICAgfSA6IEtFWSA9PSAnaGFzJyA/IGZ1bmN0aW9uIGhhcyhrZXkpIHtcbiAgICAgICAgcmV0dXJuIElTX1dFQUsgJiYgIWlzT2JqZWN0KGtleSkgPyBmYWxzZSA6IG5hdGl2ZU1ldGhvZC5jYWxsKHRoaXMsIGtleSA9PT0gMCA/IDAgOiBrZXkpO1xuICAgICAgfSA6IGZ1bmN0aW9uIHNldChrZXksIHZhbHVlKSB7XG4gICAgICAgIG5hdGl2ZU1ldGhvZC5jYWxsKHRoaXMsIGtleSA9PT0gMCA/IDAgOiBrZXksIHZhbHVlKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgKTtcbiAgfTtcblxuICB2YXIgUkVQTEFDRSA9IGlzRm9yY2VkKFxuICAgIENPTlNUUlVDVE9SX05BTUUsXG4gICAgdHlwZW9mIE5hdGl2ZUNvbnN0cnVjdG9yICE9ICdmdW5jdGlvbicgfHwgIShJU19XRUFLIHx8IE5hdGl2ZVByb3RvdHlwZS5mb3JFYWNoICYmICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgICBuZXcgTmF0aXZlQ29uc3RydWN0b3IoKS5lbnRyaWVzKCkubmV4dCgpO1xuICAgIH0pKVxuICApO1xuXG4gIGlmIChSRVBMQUNFKSB7XG4gICAgLy8gY3JlYXRlIGNvbGxlY3Rpb24gY29uc3RydWN0b3JcbiAgICBDb25zdHJ1Y3RvciA9IGNvbW1vbi5nZXRDb25zdHJ1Y3Rvcih3cmFwcGVyLCBDT05TVFJVQ1RPUl9OQU1FLCBJU19NQVAsIEFEREVSKTtcbiAgICBJbnRlcm5hbE1ldGFkYXRhTW9kdWxlLlJFUVVJUkVEID0gdHJ1ZTtcbiAgfSBlbHNlIGlmIChpc0ZvcmNlZChDT05TVFJVQ1RPUl9OQU1FLCB0cnVlKSkge1xuICAgIHZhciBpbnN0YW5jZSA9IG5ldyBDb25zdHJ1Y3RvcigpO1xuICAgIC8vIGVhcmx5IGltcGxlbWVudGF0aW9ucyBub3Qgc3VwcG9ydHMgY2hhaW5pbmdcbiAgICB2YXIgSEFTTlRfQ0hBSU5JTkcgPSBpbnN0YW5jZVtBRERFUl0oSVNfV0VBSyA/IHt9IDogLTAsIDEpICE9IGluc3RhbmNlO1xuICAgIC8vIFY4IH4gQ2hyb21pdW0gNDAtIHdlYWstY29sbGVjdGlvbnMgdGhyb3dzIG9uIHByaW1pdGl2ZXMsIGJ1dCBzaG91bGQgcmV0dXJuIGZhbHNlXG4gICAgdmFyIFRIUk9XU19PTl9QUklNSVRJVkVTID0gZmFpbHMoZnVuY3Rpb24gKCkgeyBpbnN0YW5jZS5oYXMoMSk7IH0pO1xuICAgIC8vIG1vc3QgZWFybHkgaW1wbGVtZW50YXRpb25zIGRvZXNuJ3Qgc3VwcG9ydHMgaXRlcmFibGVzLCBtb3N0IG1vZGVybiAtIG5vdCBjbG9zZSBpdCBjb3JyZWN0bHlcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3IC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gICAgdmFyIEFDQ0VQVF9JVEVSQUJMRVMgPSBjaGVja0NvcnJlY3RuZXNzT2ZJdGVyYXRpb24oZnVuY3Rpb24gKGl0ZXJhYmxlKSB7IG5ldyBOYXRpdmVDb25zdHJ1Y3RvcihpdGVyYWJsZSk7IH0pO1xuICAgIC8vIGZvciBlYXJseSBpbXBsZW1lbnRhdGlvbnMgLTAgYW5kICswIG5vdCB0aGUgc2FtZVxuICAgIHZhciBCVUdHWV9aRVJPID0gIUlTX1dFQUsgJiYgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICAgLy8gVjggfiBDaHJvbWl1bSA0Mi0gZmFpbHMgb25seSB3aXRoIDUrIGVsZW1lbnRzXG4gICAgICB2YXIgJGluc3RhbmNlID0gbmV3IE5hdGl2ZUNvbnN0cnVjdG9yKCk7XG4gICAgICB2YXIgaW5kZXggPSA1O1xuICAgICAgd2hpbGUgKGluZGV4LS0pICRpbnN0YW5jZVtBRERFUl0oaW5kZXgsIGluZGV4KTtcbiAgICAgIHJldHVybiAhJGluc3RhbmNlLmhhcygtMCk7XG4gICAgfSk7XG5cbiAgICBpZiAoIUFDQ0VQVF9JVEVSQUJMRVMpIHtcbiAgICAgIENvbnN0cnVjdG9yID0gd3JhcHBlcihmdW5jdGlvbiAoZHVtbXksIGl0ZXJhYmxlKSB7XG4gICAgICAgIGFuSW5zdGFuY2UoZHVtbXksIENvbnN0cnVjdG9yLCBDT05TVFJVQ1RPUl9OQU1FKTtcbiAgICAgICAgdmFyIHRoYXQgPSBpbmhlcml0SWZSZXF1aXJlZChuZXcgTmF0aXZlQ29uc3RydWN0b3IoKSwgZHVtbXksIENvbnN0cnVjdG9yKTtcbiAgICAgICAgaWYgKGl0ZXJhYmxlICE9IHVuZGVmaW5lZCkgaXRlcmF0ZShpdGVyYWJsZSwgdGhhdFtBRERFUl0sIHsgdGhhdDogdGhhdCwgQVNfRU5UUklFUzogSVNfTUFQIH0pO1xuICAgICAgICByZXR1cm4gdGhhdDtcbiAgICAgIH0pO1xuICAgICAgQ29uc3RydWN0b3IucHJvdG90eXBlID0gTmF0aXZlUHJvdG90eXBlO1xuICAgICAgTmF0aXZlUHJvdG90eXBlLmNvbnN0cnVjdG9yID0gQ29uc3RydWN0b3I7XG4gICAgfVxuXG4gICAgaWYgKFRIUk9XU19PTl9QUklNSVRJVkVTIHx8IEJVR0dZX1pFUk8pIHtcbiAgICAgIGZpeE1ldGhvZCgnZGVsZXRlJyk7XG4gICAgICBmaXhNZXRob2QoJ2hhcycpO1xuICAgICAgSVNfTUFQICYmIGZpeE1ldGhvZCgnZ2V0Jyk7XG4gICAgfVxuXG4gICAgaWYgKEJVR0dZX1pFUk8gfHwgSEFTTlRfQ0hBSU5JTkcpIGZpeE1ldGhvZChBRERFUik7XG5cbiAgICAvLyB3ZWFrIGNvbGxlY3Rpb25zIHNob3VsZCBub3QgY29udGFpbnMgLmNsZWFyIG1ldGhvZFxuICAgIGlmIChJU19XRUFLICYmIE5hdGl2ZVByb3RvdHlwZS5jbGVhcikgZGVsZXRlIE5hdGl2ZVByb3RvdHlwZS5jbGVhcjtcbiAgfVxuXG4gIGV4cG9ydGVkW0NPTlNUUlVDVE9SX05BTUVdID0gQ29uc3RydWN0b3I7XG4gICQoeyBnbG9iYWw6IHRydWUsIGZvcmNlZDogQ29uc3RydWN0b3IgIT0gTmF0aXZlQ29uc3RydWN0b3IgfSwgZXhwb3J0ZWQpO1xuXG4gIHNldFRvU3RyaW5nVGFnKENvbnN0cnVjdG9yLCBDT05TVFJVQ1RPUl9OQU1FKTtcblxuICBpZiAoIUlTX1dFQUspIGNvbW1vbi5zZXRTdHJvbmcoQ29uc3RydWN0b3IsIENPTlNUUlVDVE9SX05BTUUsIElTX01BUCk7XG5cbiAgcmV0dXJuIENvbnN0cnVjdG9yO1xufTtcbiIsInZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgb3duS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vd24ta2V5cycpO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0YXJnZXQsIHNvdXJjZSkge1xuICB2YXIga2V5cyA9IG93bktleXMoc291cmNlKTtcbiAgdmFyIGRlZmluZVByb3BlcnR5ID0gZGVmaW5lUHJvcGVydHlNb2R1bGUuZjtcbiAgdmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZS5mO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICBpZiAoIWhhcyh0YXJnZXQsIGtleSkpIGRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTtcbiAgfVxufTtcbiIsInZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIE1BVENIID0gd2VsbEtub3duU3ltYm9sKCdtYXRjaCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChNRVRIT0RfTkFNRSkge1xuICB2YXIgcmVnZXhwID0gLy4vO1xuICB0cnkge1xuICAgICcvLi8nW01FVEhPRF9OQU1FXShyZWdleHApO1xuICB9IGNhdGNoIChlcnJvcjEpIHtcbiAgICB0cnkge1xuICAgICAgcmVnZXhwW01BVENIXSA9IGZhbHNlO1xuICAgICAgcmV0dXJuICcvLi8nW01FVEhPRF9OQU1FXShyZWdleHApO1xuICAgIH0gY2F0Y2ggKGVycm9yMikgeyAvKiBlbXB0eSAqLyB9XG4gIH0gcmV0dXJuIGZhbHNlO1xufTtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEYoKSB7IC8qIGVtcHR5ICovIH1cbiAgRi5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBudWxsO1xuICByZXR1cm4gT2JqZWN0LmdldFByb3RvdHlwZU9mKG5ldyBGKCkpICE9PSBGLnByb3RvdHlwZTtcbn0pO1xuIiwidmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG5cbnZhciBxdW90ID0gL1wiL2c7XG5cbi8vIEIuMi4zLjIuMSBDcmVhdGVIVE1MKHN0cmluZywgdGFnLCBhdHRyaWJ1dGUsIHZhbHVlKVxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1jcmVhdGVodG1sXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChzdHJpbmcsIHRhZywgYXR0cmlidXRlLCB2YWx1ZSkge1xuICB2YXIgUyA9IFN0cmluZyhyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKHN0cmluZykpO1xuICB2YXIgcDEgPSAnPCcgKyB0YWc7XG4gIGlmIChhdHRyaWJ1dGUgIT09ICcnKSBwMSArPSAnICcgKyBhdHRyaWJ1dGUgKyAnPVwiJyArIFN0cmluZyh2YWx1ZSkucmVwbGFjZShxdW90LCAnJnF1b3Q7JykgKyAnXCInO1xuICByZXR1cm4gcDEgKyAnPicgKyBTICsgJzwvJyArIHRhZyArICc+Jztcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgSXRlcmF0b3JQcm90b3R5cGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0b3JzLWNvcmUnKS5JdGVyYXRvclByb3RvdHlwZTtcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWNyZWF0ZScpO1xudmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvcicpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9ycycpO1xuXG52YXIgcmV0dXJuVGhpcyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEl0ZXJhdG9yQ29uc3RydWN0b3IsIE5BTUUsIG5leHQpIHtcbiAgdmFyIFRPX1NUUklOR19UQUcgPSBOQU1FICsgJyBJdGVyYXRvcic7XG4gIEl0ZXJhdG9yQ29uc3RydWN0b3IucHJvdG90eXBlID0gY3JlYXRlKEl0ZXJhdG9yUHJvdG90eXBlLCB7IG5leHQ6IGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigxLCBuZXh0KSB9KTtcbiAgc2V0VG9TdHJpbmdUYWcoSXRlcmF0b3JDb25zdHJ1Y3RvciwgVE9fU1RSSU5HX1RBRywgZmFsc2UsIHRydWUpO1xuICBJdGVyYXRvcnNbVE9fU1RSSU5HX1RBR10gPSByZXR1cm5UaGlzO1xuICByZXR1cm4gSXRlcmF0b3JDb25zdHJ1Y3Rvcjtcbn07XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG52YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gREVTQ1JJUFRPUlMgPyBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIHJldHVybiBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mKG9iamVjdCwga2V5LCBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMSwgdmFsdWUpKTtcbn0gOiBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIG9iamVjdFtrZXldID0gdmFsdWU7XG4gIHJldHVybiBvYmplY3Q7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYml0bWFwLCB2YWx1ZSkge1xuICByZXR1cm4ge1xuICAgIGVudW1lcmFibGU6ICEoYml0bWFwICYgMSksXG4gICAgY29uZmlndXJhYmxlOiAhKGJpdG1hcCAmIDIpLFxuICAgIHdyaXRhYmxlOiAhKGJpdG1hcCAmIDQpLFxuICAgIHZhbHVlOiB2YWx1ZVxuICB9O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1wcmltaXRpdmUnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG52YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICB2YXIgcHJvcGVydHlLZXkgPSB0b1ByaW1pdGl2ZShrZXkpO1xuICBpZiAocHJvcGVydHlLZXkgaW4gb2JqZWN0KSBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mKG9iamVjdCwgcHJvcGVydHlLZXksIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigwLCB2YWx1ZSkpO1xuICBlbHNlIG9iamVjdFtwcm9wZXJ0eUtleV0gPSB2YWx1ZTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBwYWRTdGFydCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctcGFkJykuc3RhcnQ7XG5cbnZhciBhYnMgPSBNYXRoLmFicztcbnZhciBEYXRlUHJvdG90eXBlID0gRGF0ZS5wcm90b3R5cGU7XG52YXIgZ2V0VGltZSA9IERhdGVQcm90b3R5cGUuZ2V0VGltZTtcbnZhciBuYXRpdmVEYXRlVG9JU09TdHJpbmcgPSBEYXRlUHJvdG90eXBlLnRvSVNPU3RyaW5nO1xuXG4vLyBgRGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmdgIG1ldGhvZCBpbXBsZW1lbnRhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1kYXRlLnByb3RvdHlwZS50b2lzb3N0cmluZ1xuLy8gUGhhbnRvbUpTIC8gb2xkIFdlYktpdCBmYWlscyBoZXJlOlxubW9kdWxlLmV4cG9ydHMgPSAoZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gbmF0aXZlRGF0ZVRvSVNPU3RyaW5nLmNhbGwobmV3IERhdGUoLTVlMTMgLSAxKSkgIT0gJzAzODUtMDctMjVUMDc6MDY6MzkuOTk5Wic7XG59KSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICBuYXRpdmVEYXRlVG9JU09TdHJpbmcuY2FsbChuZXcgRGF0ZShOYU4pKTtcbn0pKSA/IGZ1bmN0aW9uIHRvSVNPU3RyaW5nKCkge1xuICBpZiAoIWlzRmluaXRlKGdldFRpbWUuY2FsbCh0aGlzKSkpIHRocm93IFJhbmdlRXJyb3IoJ0ludmFsaWQgdGltZSB2YWx1ZScpO1xuICB2YXIgZGF0ZSA9IHRoaXM7XG4gIHZhciB5ZWFyID0gZGF0ZS5nZXRVVENGdWxsWWVhcigpO1xuICB2YXIgbWlsbGlzZWNvbmRzID0gZGF0ZS5nZXRVVENNaWxsaXNlY29uZHMoKTtcbiAgdmFyIHNpZ24gPSB5ZWFyIDwgMCA/ICctJyA6IHllYXIgPiA5OTk5ID8gJysnIDogJyc7XG4gIHJldHVybiBzaWduICsgcGFkU3RhcnQoYWJzKHllYXIpLCBzaWduID8gNiA6IDQsIDApICtcbiAgICAnLScgKyBwYWRTdGFydChkYXRlLmdldFVUQ01vbnRoKCkgKyAxLCAyLCAwKSArXG4gICAgJy0nICsgcGFkU3RhcnQoZGF0ZS5nZXRVVENEYXRlKCksIDIsIDApICtcbiAgICAnVCcgKyBwYWRTdGFydChkYXRlLmdldFVUQ0hvdXJzKCksIDIsIDApICtcbiAgICAnOicgKyBwYWRTdGFydChkYXRlLmdldFVUQ01pbnV0ZXMoKSwgMiwgMCkgK1xuICAgICc6JyArIHBhZFN0YXJ0KGRhdGUuZ2V0VVRDU2Vjb25kcygpLCAyLCAwKSArXG4gICAgJy4nICsgcGFkU3RhcnQobWlsbGlzZWNvbmRzLCAzLCAwKSArXG4gICAgJ1onO1xufSA6IG5hdGl2ZURhdGVUb0lTT1N0cmluZztcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1wcmltaXRpdmUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaGludCkge1xuICBpZiAoaGludCAhPT0gJ3N0cmluZycgJiYgaGludCAhPT0gJ251bWJlcicgJiYgaGludCAhPT0gJ2RlZmF1bHQnKSB7XG4gICAgdGhyb3cgVHlwZUVycm9yKCdJbmNvcnJlY3QgaGludCcpO1xuICB9IHJldHVybiB0b1ByaW1pdGl2ZShhbk9iamVjdCh0aGlzKSwgaGludCAhPT0gJ251bWJlcicpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGNyZWF0ZUl0ZXJhdG9yQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLWl0ZXJhdG9yLWNvbnN0cnVjdG9yJyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1wcm90b3R5cGUtb2YnKTtcbnZhciBzZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qtc2V0LXByb3RvdHlwZS1vZicpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9ycycpO1xudmFyIEl0ZXJhdG9yc0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0b3JzLWNvcmUnKTtcblxudmFyIEl0ZXJhdG9yUHJvdG90eXBlID0gSXRlcmF0b3JzQ29yZS5JdGVyYXRvclByb3RvdHlwZTtcbnZhciBCVUdHWV9TQUZBUklfSVRFUkFUT1JTID0gSXRlcmF0b3JzQ29yZS5CVUdHWV9TQUZBUklfSVRFUkFUT1JTO1xudmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xudmFyIEtFWVMgPSAna2V5cyc7XG52YXIgVkFMVUVTID0gJ3ZhbHVlcyc7XG52YXIgRU5UUklFUyA9ICdlbnRyaWVzJztcblxudmFyIHJldHVyblRoaXMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChJdGVyYWJsZSwgTkFNRSwgSXRlcmF0b3JDb25zdHJ1Y3RvciwgbmV4dCwgREVGQVVMVCwgSVNfU0VULCBGT1JDRUQpIHtcbiAgY3JlYXRlSXRlcmF0b3JDb25zdHJ1Y3RvcihJdGVyYXRvckNvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KTtcblxuICB2YXIgZ2V0SXRlcmF0aW9uTWV0aG9kID0gZnVuY3Rpb24gKEtJTkQpIHtcbiAgICBpZiAoS0lORCA9PT0gREVGQVVMVCAmJiBkZWZhdWx0SXRlcmF0b3IpIHJldHVybiBkZWZhdWx0SXRlcmF0b3I7XG4gICAgaWYgKCFCVUdHWV9TQUZBUklfSVRFUkFUT1JTICYmIEtJTkQgaW4gSXRlcmFibGVQcm90b3R5cGUpIHJldHVybiBJdGVyYWJsZVByb3RvdHlwZVtLSU5EXTtcbiAgICBzd2l0Y2ggKEtJTkQpIHtcbiAgICAgIGNhc2UgS0VZUzogcmV0dXJuIGZ1bmN0aW9uIGtleXMoKSB7IHJldHVybiBuZXcgSXRlcmF0b3JDb25zdHJ1Y3Rvcih0aGlzLCBLSU5EKTsgfTtcbiAgICAgIGNhc2UgVkFMVUVTOiByZXR1cm4gZnVuY3Rpb24gdmFsdWVzKCkgeyByZXR1cm4gbmV3IEl0ZXJhdG9yQ29uc3RydWN0b3IodGhpcywgS0lORCk7IH07XG4gICAgICBjYXNlIEVOVFJJRVM6IHJldHVybiBmdW5jdGlvbiBlbnRyaWVzKCkgeyByZXR1cm4gbmV3IEl0ZXJhdG9yQ29uc3RydWN0b3IodGhpcywgS0lORCk7IH07XG4gICAgfSByZXR1cm4gZnVuY3Rpb24gKCkgeyByZXR1cm4gbmV3IEl0ZXJhdG9yQ29uc3RydWN0b3IodGhpcyk7IH07XG4gIH07XG5cbiAgdmFyIFRPX1NUUklOR19UQUcgPSBOQU1FICsgJyBJdGVyYXRvcic7XG4gIHZhciBJTkNPUlJFQ1RfVkFMVUVTX05BTUUgPSBmYWxzZTtcbiAgdmFyIEl0ZXJhYmxlUHJvdG90eXBlID0gSXRlcmFibGUucHJvdG90eXBlO1xuICB2YXIgbmF0aXZlSXRlcmF0b3IgPSBJdGVyYWJsZVByb3RvdHlwZVtJVEVSQVRPUl1cbiAgICB8fCBJdGVyYWJsZVByb3RvdHlwZVsnQEBpdGVyYXRvciddXG4gICAgfHwgREVGQVVMVCAmJiBJdGVyYWJsZVByb3RvdHlwZVtERUZBVUxUXTtcbiAgdmFyIGRlZmF1bHRJdGVyYXRvciA9ICFCVUdHWV9TQUZBUklfSVRFUkFUT1JTICYmIG5hdGl2ZUl0ZXJhdG9yIHx8IGdldEl0ZXJhdGlvbk1ldGhvZChERUZBVUxUKTtcbiAgdmFyIGFueU5hdGl2ZUl0ZXJhdG9yID0gTkFNRSA9PSAnQXJyYXknID8gSXRlcmFibGVQcm90b3R5cGUuZW50cmllcyB8fCBuYXRpdmVJdGVyYXRvciA6IG5hdGl2ZUl0ZXJhdG9yO1xuICB2YXIgQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlLCBtZXRob2RzLCBLRVk7XG5cbiAgLy8gZml4IG5hdGl2ZVxuICBpZiAoYW55TmF0aXZlSXRlcmF0b3IpIHtcbiAgICBDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZihhbnlOYXRpdmVJdGVyYXRvci5jYWxsKG5ldyBJdGVyYWJsZSgpKSk7XG4gICAgaWYgKEl0ZXJhdG9yUHJvdG90eXBlICE9PSBPYmplY3QucHJvdG90eXBlICYmIEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZS5uZXh0KSB7XG4gICAgICBpZiAoIUlTX1BVUkUgJiYgZ2V0UHJvdG90eXBlT2YoQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlKSAhPT0gSXRlcmF0b3JQcm90b3R5cGUpIHtcbiAgICAgICAgaWYgKHNldFByb3RvdHlwZU9mKSB7XG4gICAgICAgICAgc2V0UHJvdG90eXBlT2YoQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlLCBJdGVyYXRvclByb3RvdHlwZSk7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZVtJVEVSQVRPUl0gIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUsIElURVJBVE9SLCByZXR1cm5UaGlzKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gU2V0IEBAdG9TdHJpbmdUYWcgdG8gbmF0aXZlIGl0ZXJhdG9yc1xuICAgICAgc2V0VG9TdHJpbmdUYWcoQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlLCBUT19TVFJJTkdfVEFHLCB0cnVlLCB0cnVlKTtcbiAgICAgIGlmIChJU19QVVJFKSBJdGVyYXRvcnNbVE9fU1RSSU5HX1RBR10gPSByZXR1cm5UaGlzO1xuICAgIH1cbiAgfVxuXG4gIC8vIGZpeCBBcnJheSN7dmFsdWVzLCBAQGl0ZXJhdG9yfS5uYW1lIGluIFY4IC8gRkZcbiAgaWYgKERFRkFVTFQgPT0gVkFMVUVTICYmIG5hdGl2ZUl0ZXJhdG9yICYmIG5hdGl2ZUl0ZXJhdG9yLm5hbWUgIT09IFZBTFVFUykge1xuICAgIElOQ09SUkVDVF9WQUxVRVNfTkFNRSA9IHRydWU7XG4gICAgZGVmYXVsdEl0ZXJhdG9yID0gZnVuY3Rpb24gdmFsdWVzKCkgeyByZXR1cm4gbmF0aXZlSXRlcmF0b3IuY2FsbCh0aGlzKTsgfTtcbiAgfVxuXG4gIC8vIGRlZmluZSBpdGVyYXRvclxuICBpZiAoKCFJU19QVVJFIHx8IEZPUkNFRCkgJiYgSXRlcmFibGVQcm90b3R5cGVbSVRFUkFUT1JdICE9PSBkZWZhdWx0SXRlcmF0b3IpIHtcbiAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoSXRlcmFibGVQcm90b3R5cGUsIElURVJBVE9SLCBkZWZhdWx0SXRlcmF0b3IpO1xuICB9XG4gIEl0ZXJhdG9yc1tOQU1FXSA9IGRlZmF1bHRJdGVyYXRvcjtcblxuICAvLyBleHBvcnQgYWRkaXRpb25hbCBtZXRob2RzXG4gIGlmIChERUZBVUxUKSB7XG4gICAgbWV0aG9kcyA9IHtcbiAgICAgIHZhbHVlczogZ2V0SXRlcmF0aW9uTWV0aG9kKFZBTFVFUyksXG4gICAgICBrZXlzOiBJU19TRVQgPyBkZWZhdWx0SXRlcmF0b3IgOiBnZXRJdGVyYXRpb25NZXRob2QoS0VZUyksXG4gICAgICBlbnRyaWVzOiBnZXRJdGVyYXRpb25NZXRob2QoRU5UUklFUylcbiAgICB9O1xuICAgIGlmIChGT1JDRUQpIGZvciAoS0VZIGluIG1ldGhvZHMpIHtcbiAgICAgIGlmIChCVUdHWV9TQUZBUklfSVRFUkFUT1JTIHx8IElOQ09SUkVDVF9WQUxVRVNfTkFNRSB8fCAhKEtFWSBpbiBJdGVyYWJsZVByb3RvdHlwZSkpIHtcbiAgICAgICAgcmVkZWZpbmUoSXRlcmFibGVQcm90b3R5cGUsIEtFWSwgbWV0aG9kc1tLRVldKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgJCh7IHRhcmdldDogTkFNRSwgcHJvdG86IHRydWUsIGZvcmNlZDogQlVHR1lfU0FGQVJJX0lURVJBVE9SUyB8fCBJTkNPUlJFQ1RfVkFMVUVTX05BTUUgfSwgbWV0aG9kcyk7XG4gIH1cblxuICByZXR1cm4gbWV0aG9kcztcbn07XG4iLCJ2YXIgcGF0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9wYXRoJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIHdyYXBwZWRXZWxsS25vd25TeW1ib2xNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wtd3JhcHBlZCcpO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKS5mO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChOQU1FKSB7XG4gIHZhciBTeW1ib2wgPSBwYXRoLlN5bWJvbCB8fCAocGF0aC5TeW1ib2wgPSB7fSk7XG4gIGlmICghaGFzKFN5bWJvbCwgTkFNRSkpIGRlZmluZVByb3BlcnR5KFN5bWJvbCwgTkFNRSwge1xuICAgIHZhbHVlOiB3cmFwcGVkV2VsbEtub3duU3ltYm9sTW9kdWxlLmYoTkFNRSlcbiAgfSk7XG59O1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbi8vIERldGVjdCBJRTgncyBpbmNvbXBsZXRlIGRlZmluZVByb3BlcnR5IGltcGxlbWVudGF0aW9uXG5tb2R1bGUuZXhwb3J0cyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sIDEsIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9IH0pWzFdICE9IDc7XG59KTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG5cbnZhciBkb2N1bWVudCA9IGdsb2JhbC5kb2N1bWVudDtcbi8vIHR5cGVvZiBkb2N1bWVudC5jcmVhdGVFbGVtZW50IGlzICdvYmplY3QnIGluIG9sZCBJRVxudmFyIEVYSVNUUyA9IGlzT2JqZWN0KGRvY3VtZW50KSAmJiBpc09iamVjdChkb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIEVYSVNUUyA/IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoaXQpIDoge307XG59O1xuIiwiLy8gaXRlcmFibGUgRE9NIGNvbGxlY3Rpb25zXG4vLyBmbGFnIC0gYGl0ZXJhYmxlYCBpbnRlcmZhY2UgLSAnZW50cmllcycsICdrZXlzJywgJ3ZhbHVlcycsICdmb3JFYWNoJyBtZXRob2RzXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgQ1NTUnVsZUxpc3Q6IDAsXG4gIENTU1N0eWxlRGVjbGFyYXRpb246IDAsXG4gIENTU1ZhbHVlTGlzdDogMCxcbiAgQ2xpZW50UmVjdExpc3Q6IDAsXG4gIERPTVJlY3RMaXN0OiAwLFxuICBET01TdHJpbmdMaXN0OiAwLFxuICBET01Ub2tlbkxpc3Q6IDEsXG4gIERhdGFUcmFuc2Zlckl0ZW1MaXN0OiAwLFxuICBGaWxlTGlzdDogMCxcbiAgSFRNTEFsbENvbGxlY3Rpb246IDAsXG4gIEhUTUxDb2xsZWN0aW9uOiAwLFxuICBIVE1MRm9ybUVsZW1lbnQ6IDAsXG4gIEhUTUxTZWxlY3RFbGVtZW50OiAwLFxuICBNZWRpYUxpc3Q6IDAsXG4gIE1pbWVUeXBlQXJyYXk6IDAsXG4gIE5hbWVkTm9kZU1hcDogMCxcbiAgTm9kZUxpc3Q6IDEsXG4gIFBhaW50UmVxdWVzdExpc3Q6IDAsXG4gIFBsdWdpbjogMCxcbiAgUGx1Z2luQXJyYXk6IDAsXG4gIFNWR0xlbmd0aExpc3Q6IDAsXG4gIFNWR051bWJlckxpc3Q6IDAsXG4gIFNWR1BhdGhTZWdMaXN0OiAwLFxuICBTVkdQb2ludExpc3Q6IDAsXG4gIFNWR1N0cmluZ0xpc3Q6IDAsXG4gIFNWR1RyYW5zZm9ybUxpc3Q6IDAsXG4gIFNvdXJjZUJ1ZmZlckxpc3Q6IDAsXG4gIFN0eWxlU2hlZXRMaXN0OiAwLFxuICBUZXh0VHJhY2tDdWVMaXN0OiAwLFxuICBUZXh0VHJhY2tMaXN0OiAwLFxuICBUb3VjaExpc3Q6IDBcbn07XG4iLCJ2YXIgdXNlckFnZW50ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS11c2VyLWFnZW50Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gLyhpcGhvbmV8aXBvZHxpcGFkKS4qYXBwbGV3ZWJraXQvaS50ZXN0KHVzZXJBZ2VudCk7XG4iLCJ2YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mLXJhdycpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBjbGFzc29mKGdsb2JhbC5wcm9jZXNzKSA9PSAncHJvY2Vzcyc7XG4iLCJ2YXIgdXNlckFnZW50ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS11c2VyLWFnZW50Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gL3dlYjBzKD8hLipjaHJvbWUpL2kudGVzdCh1c2VyQWdlbnQpO1xuIiwidmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0QnVpbHRJbignbmF2aWdhdG9yJywgJ3VzZXJBZ2VudCcpIHx8ICcnO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciB1c2VyQWdlbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLXVzZXItYWdlbnQnKTtcblxudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcbnZhciB2ZXJzaW9ucyA9IHByb2Nlc3MgJiYgcHJvY2Vzcy52ZXJzaW9ucztcbnZhciB2OCA9IHZlcnNpb25zICYmIHZlcnNpb25zLnY4O1xudmFyIG1hdGNoLCB2ZXJzaW9uO1xuXG5pZiAodjgpIHtcbiAgbWF0Y2ggPSB2OC5zcGxpdCgnLicpO1xuICB2ZXJzaW9uID0gbWF0Y2hbMF0gKyBtYXRjaFsxXTtcbn0gZWxzZSBpZiAodXNlckFnZW50KSB7XG4gIG1hdGNoID0gdXNlckFnZW50Lm1hdGNoKC9FZGdlXFwvKFxcZCspLyk7XG4gIGlmICghbWF0Y2ggfHwgbWF0Y2hbMV0gPj0gNzQpIHtcbiAgICBtYXRjaCA9IHVzZXJBZ2VudC5tYXRjaCgvQ2hyb21lXFwvKFxcZCspLyk7XG4gICAgaWYgKG1hdGNoKSB2ZXJzaW9uID0gbWF0Y2hbMV07XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB2ZXJzaW9uICYmICt2ZXJzaW9uO1xuIiwiLy8gSUU4LSBkb24ndCBlbnVtIGJ1ZyBrZXlzXG5tb2R1bGUuZXhwb3J0cyA9IFtcbiAgJ2NvbnN0cnVjdG9yJyxcbiAgJ2hhc093blByb3BlcnR5JyxcbiAgJ2lzUHJvdG90eXBlT2YnLFxuICAncHJvcGVydHlJc0VudW1lcmFibGUnLFxuICAndG9Mb2NhbGVTdHJpbmcnLFxuICAndG9TdHJpbmcnLFxuICAndmFsdWVPZidcbl07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJykuZjtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUnKTtcbnZhciBzZXRHbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LWdsb2JhbCcpO1xudmFyIGNvcHlDb25zdHJ1Y3RvclByb3BlcnRpZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29weS1jb25zdHJ1Y3Rvci1wcm9wZXJ0aWVzJyk7XG52YXIgaXNGb3JjZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtZm9yY2VkJyk7XG5cbi8qXG4gIG9wdGlvbnMudGFyZ2V0ICAgICAgLSBuYW1lIG9mIHRoZSB0YXJnZXQgb2JqZWN0XG4gIG9wdGlvbnMuZ2xvYmFsICAgICAgLSB0YXJnZXQgaXMgdGhlIGdsb2JhbCBvYmplY3RcbiAgb3B0aW9ucy5zdGF0ICAgICAgICAtIGV4cG9ydCBhcyBzdGF0aWMgbWV0aG9kcyBvZiB0YXJnZXRcbiAgb3B0aW9ucy5wcm90byAgICAgICAtIGV4cG9ydCBhcyBwcm90b3R5cGUgbWV0aG9kcyBvZiB0YXJnZXRcbiAgb3B0aW9ucy5yZWFsICAgICAgICAtIHJlYWwgcHJvdG90eXBlIG1ldGhvZCBmb3IgdGhlIGBwdXJlYCB2ZXJzaW9uXG4gIG9wdGlvbnMuZm9yY2VkICAgICAgLSBleHBvcnQgZXZlbiBpZiB0aGUgbmF0aXZlIGZlYXR1cmUgaXMgYXZhaWxhYmxlXG4gIG9wdGlvbnMuYmluZCAgICAgICAgLSBiaW5kIG1ldGhvZHMgdG8gdGhlIHRhcmdldCwgcmVxdWlyZWQgZm9yIHRoZSBgcHVyZWAgdmVyc2lvblxuICBvcHRpb25zLndyYXAgICAgICAgIC0gd3JhcCBjb25zdHJ1Y3RvcnMgdG8gcHJldmVudGluZyBnbG9iYWwgcG9sbHV0aW9uLCByZXF1aXJlZCBmb3IgdGhlIGBwdXJlYCB2ZXJzaW9uXG4gIG9wdGlvbnMudW5zYWZlICAgICAgLSB1c2UgdGhlIHNpbXBsZSBhc3NpZ25tZW50IG9mIHByb3BlcnR5IGluc3RlYWQgb2YgZGVsZXRlICsgZGVmaW5lUHJvcGVydHlcbiAgb3B0aW9ucy5zaGFtICAgICAgICAtIGFkZCBhIGZsYWcgdG8gbm90IGNvbXBsZXRlbHkgZnVsbCBwb2x5ZmlsbHNcbiAgb3B0aW9ucy5lbnVtZXJhYmxlICAtIGV4cG9ydCBhcyBlbnVtZXJhYmxlIHByb3BlcnR5XG4gIG9wdGlvbnMubm9UYXJnZXRHZXQgLSBwcmV2ZW50IGNhbGxpbmcgYSBnZXR0ZXIgb24gdGFyZ2V0XG4qL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob3B0aW9ucywgc291cmNlKSB7XG4gIHZhciBUQVJHRVQgPSBvcHRpb25zLnRhcmdldDtcbiAgdmFyIEdMT0JBTCA9IG9wdGlvbnMuZ2xvYmFsO1xuICB2YXIgU1RBVElDID0gb3B0aW9ucy5zdGF0O1xuICB2YXIgRk9SQ0VELCB0YXJnZXQsIGtleSwgdGFyZ2V0UHJvcGVydHksIHNvdXJjZVByb3BlcnR5LCBkZXNjcmlwdG9yO1xuICBpZiAoR0xPQkFMKSB7XG4gICAgdGFyZ2V0ID0gZ2xvYmFsO1xuICB9IGVsc2UgaWYgKFNUQVRJQykge1xuICAgIHRhcmdldCA9IGdsb2JhbFtUQVJHRVRdIHx8IHNldEdsb2JhbChUQVJHRVQsIHt9KTtcbiAgfSBlbHNlIHtcbiAgICB0YXJnZXQgPSAoZ2xvYmFsW1RBUkdFVF0gfHwge30pLnByb3RvdHlwZTtcbiAgfVxuICBpZiAodGFyZ2V0KSBmb3IgKGtleSBpbiBzb3VyY2UpIHtcbiAgICBzb3VyY2VQcm9wZXJ0eSA9IHNvdXJjZVtrZXldO1xuICAgIGlmIChvcHRpb25zLm5vVGFyZ2V0R2V0KSB7XG4gICAgICBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KTtcbiAgICAgIHRhcmdldFByb3BlcnR5ID0gZGVzY3JpcHRvciAmJiBkZXNjcmlwdG9yLnZhbHVlO1xuICAgIH0gZWxzZSB0YXJnZXRQcm9wZXJ0eSA9IHRhcmdldFtrZXldO1xuICAgIEZPUkNFRCA9IGlzRm9yY2VkKEdMT0JBTCA/IGtleSA6IFRBUkdFVCArIChTVEFUSUMgPyAnLicgOiAnIycpICsga2V5LCBvcHRpb25zLmZvcmNlZCk7XG4gICAgLy8gY29udGFpbmVkIGluIHRhcmdldFxuICAgIGlmICghRk9SQ0VEICYmIHRhcmdldFByb3BlcnR5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmICh0eXBlb2Ygc291cmNlUHJvcGVydHkgPT09IHR5cGVvZiB0YXJnZXRQcm9wZXJ0eSkgY29udGludWU7XG4gICAgICBjb3B5Q29uc3RydWN0b3JQcm9wZXJ0aWVzKHNvdXJjZVByb3BlcnR5LCB0YXJnZXRQcm9wZXJ0eSk7XG4gICAgfVxuICAgIC8vIGFkZCBhIGZsYWcgdG8gbm90IGNvbXBsZXRlbHkgZnVsbCBwb2x5ZmlsbHNcbiAgICBpZiAob3B0aW9ucy5zaGFtIHx8ICh0YXJnZXRQcm9wZXJ0eSAmJiB0YXJnZXRQcm9wZXJ0eS5zaGFtKSkge1xuICAgICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KHNvdXJjZVByb3BlcnR5LCAnc2hhbScsIHRydWUpO1xuICAgIH1cbiAgICAvLyBleHRlbmQgZ2xvYmFsXG4gICAgcmVkZWZpbmUodGFyZ2V0LCBrZXksIHNvdXJjZVByb3BlcnR5LCBvcHRpb25zKTtcbiAgfVxufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gISFleGVjKCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG4vLyBUT0RPOiBSZW1vdmUgZnJvbSBgY29yZS1qc0A0YCBzaW5jZSBpdCdzIG1vdmVkIHRvIGVudHJ5IHBvaW50c1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5yZWdleHAuZXhlYycpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciByZWdleHBFeGVjID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC1leGVjJyk7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xuXG52YXIgU1BFQ0lFUyA9IHdlbGxLbm93blN5bWJvbCgnc3BlY2llcycpO1xuXG52YXIgUkVQTEFDRV9TVVBQT1JUU19OQU1FRF9HUk9VUFMgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyAjcmVwbGFjZSBuZWVkcyBidWlsdC1pbiBzdXBwb3J0IGZvciBuYW1lZCBncm91cHMuXG4gIC8vICNtYXRjaCB3b3JrcyBmaW5lIGJlY2F1c2UgaXQganVzdCByZXR1cm4gdGhlIGV4ZWMgcmVzdWx0cywgZXZlbiBpZiBpdCBoYXNcbiAgLy8gYSBcImdyb3BzXCIgcHJvcGVydHkuXG4gIHZhciByZSA9IC8uLztcbiAgcmUuZXhlYyA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgcmVzdWx0Lmdyb3VwcyA9IHsgYTogJzcnIH07XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbiAgcmV0dXJuICcnLnJlcGxhY2UocmUsICckPGE+JykgIT09ICc3Jztcbn0pO1xuXG4vLyBJRSA8PSAxMSByZXBsYWNlcyAkMCB3aXRoIHRoZSB3aG9sZSBtYXRjaCwgYXMgaWYgaXQgd2FzICQmXG4vLyBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy82MDI0NjY2L2dldHRpbmctaWUtdG8tcmVwbGFjZS1hLXJlZ2V4LXdpdGgtdGhlLWxpdGVyYWwtc3RyaW5nLTBcbnZhciBSRVBMQUNFX0tFRVBTXyQwID0gKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuICdhJy5yZXBsYWNlKC8uLywgJyQwJykgPT09ICckMCc7XG59KSgpO1xuXG52YXIgUkVQTEFDRSA9IHdlbGxLbm93blN5bWJvbCgncmVwbGFjZScpO1xuLy8gU2FmYXJpIDw9IDEzLjAuMyg/KSBzdWJzdGl0dXRlcyBudGggY2FwdHVyZSB3aGVyZSBuPm0gd2l0aCBhbiBlbXB0eSBzdHJpbmdcbnZhciBSRUdFWFBfUkVQTEFDRV9TVUJTVElUVVRFU19VTkRFRklORURfQ0FQVFVSRSA9IChmdW5jdGlvbiAoKSB7XG4gIGlmICgvLi9bUkVQTEFDRV0pIHtcbiAgICByZXR1cm4gLy4vW1JFUExBQ0VdKCdhJywgJyQwJykgPT09ICcnO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn0pKCk7XG5cbi8vIENocm9tZSA1MSBoYXMgYSBidWdneSBcInNwbGl0XCIgaW1wbGVtZW50YXRpb24gd2hlbiBSZWdFeHAjZXhlYyAhPT0gbmF0aXZlRXhlY1xuLy8gV2VleCBKUyBoYXMgZnJvemVuIGJ1aWx0LWluIHByb3RvdHlwZXMsIHNvIHVzZSB0cnkgLyBjYXRjaCB3cmFwcGVyXG52YXIgU1BMSVRfV09SS1NfV0lUSF9PVkVSV1JJVFRFTl9FWEVDID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlZ2V4cC9uby1lbXB0eS1ncm91cCAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xuICB2YXIgcmUgPSAvKD86KS87XG4gIHZhciBvcmlnaW5hbEV4ZWMgPSByZS5leGVjO1xuICByZS5leGVjID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gb3JpZ2luYWxFeGVjLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH07XG4gIHZhciByZXN1bHQgPSAnYWInLnNwbGl0KHJlKTtcbiAgcmV0dXJuIHJlc3VsdC5sZW5ndGggIT09IDIgfHwgcmVzdWx0WzBdICE9PSAnYScgfHwgcmVzdWx0WzFdICE9PSAnYic7XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZLCBsZW5ndGgsIGV4ZWMsIHNoYW0pIHtcbiAgdmFyIFNZTUJPTCA9IHdlbGxLbm93blN5bWJvbChLRVkpO1xuXG4gIHZhciBERUxFR0FURVNfVE9fU1lNQk9MID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBTdHJpbmcgbWV0aG9kcyBjYWxsIHN5bWJvbC1uYW1lZCBSZWdFcCBtZXRob2RzXG4gICAgdmFyIE8gPSB7fTtcbiAgICBPW1NZTUJPTF0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9O1xuICAgIHJldHVybiAnJ1tLRVldKE8pICE9IDc7XG4gIH0pO1xuXG4gIHZhciBERUxFR0FURVNfVE9fRVhFQyA9IERFTEVHQVRFU19UT19TWU1CT0wgJiYgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBTeW1ib2wtbmFtZWQgUmVnRXhwIG1ldGhvZHMgY2FsbCAuZXhlY1xuICAgIHZhciBleGVjQ2FsbGVkID0gZmFsc2U7XG4gICAgdmFyIHJlID0gL2EvO1xuXG4gICAgaWYgKEtFWSA9PT0gJ3NwbGl0Jykge1xuICAgICAgLy8gV2UgY2FuJ3QgdXNlIHJlYWwgcmVnZXggaGVyZSBzaW5jZSBpdCBjYXVzZXMgZGVvcHRpbWl6YXRpb25cbiAgICAgIC8vIGFuZCBzZXJpb3VzIHBlcmZvcm1hbmNlIGRlZ3JhZGF0aW9uIGluIFY4XG4gICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMzA2XG4gICAgICByZSA9IHt9O1xuICAgICAgLy8gUmVnRXhwW0BAc3BsaXRdIGRvZXNuJ3QgY2FsbCB0aGUgcmVnZXgncyBleGVjIG1ldGhvZCwgYnV0IGZpcnN0IGNyZWF0ZXNcbiAgICAgIC8vIGEgbmV3IG9uZS4gV2UgbmVlZCB0byByZXR1cm4gdGhlIHBhdGNoZWQgcmVnZXggd2hlbiBjcmVhdGluZyB0aGUgbmV3IG9uZS5cbiAgICAgIHJlLmNvbnN0cnVjdG9yID0ge307XG4gICAgICByZS5jb25zdHJ1Y3RvcltTUEVDSUVTXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlOyB9O1xuICAgICAgcmUuZmxhZ3MgPSAnJztcbiAgICAgIHJlW1NZTUJPTF0gPSAvLi9bU1lNQk9MXTtcbiAgICB9XG5cbiAgICByZS5leGVjID0gZnVuY3Rpb24gKCkgeyBleGVjQ2FsbGVkID0gdHJ1ZTsgcmV0dXJuIG51bGw7IH07XG5cbiAgICByZVtTWU1CT0xdKCcnKTtcbiAgICByZXR1cm4gIWV4ZWNDYWxsZWQ7XG4gIH0pO1xuXG4gIGlmIChcbiAgICAhREVMRUdBVEVTX1RPX1NZTUJPTCB8fFxuICAgICFERUxFR0FURVNfVE9fRVhFQyB8fFxuICAgIChLRVkgPT09ICdyZXBsYWNlJyAmJiAhKFxuICAgICAgUkVQTEFDRV9TVVBQT1JUU19OQU1FRF9HUk9VUFMgJiZcbiAgICAgIFJFUExBQ0VfS0VFUFNfJDAgJiZcbiAgICAgICFSRUdFWFBfUkVQTEFDRV9TVUJTVElUVVRFU19VTkRFRklORURfQ0FQVFVSRVxuICAgICkpIHx8XG4gICAgKEtFWSA9PT0gJ3NwbGl0JyAmJiAhU1BMSVRfV09SS1NfV0lUSF9PVkVSV1JJVFRFTl9FWEVDKVxuICApIHtcbiAgICB2YXIgbmF0aXZlUmVnRXhwTWV0aG9kID0gLy4vW1NZTUJPTF07XG4gICAgdmFyIG1ldGhvZHMgPSBleGVjKFNZTUJPTCwgJydbS0VZXSwgZnVuY3Rpb24gKG5hdGl2ZU1ldGhvZCwgcmVnZXhwLCBzdHIsIGFyZzIsIGZvcmNlU3RyaW5nTWV0aG9kKSB7XG4gICAgICBpZiAocmVnZXhwLmV4ZWMgPT09IHJlZ2V4cEV4ZWMpIHtcbiAgICAgICAgaWYgKERFTEVHQVRFU19UT19TWU1CT0wgJiYgIWZvcmNlU3RyaW5nTWV0aG9kKSB7XG4gICAgICAgICAgLy8gVGhlIG5hdGl2ZSBTdHJpbmcgbWV0aG9kIGFscmVhZHkgZGVsZWdhdGVzIHRvIEBAbWV0aG9kICh0aGlzXG4gICAgICAgICAgLy8gcG9seWZpbGxlZCBmdW5jdGlvbiksIGxlYXNpbmcgdG8gaW5maW5pdGUgcmVjdXJzaW9uLlxuICAgICAgICAgIC8vIFdlIGF2b2lkIGl0IGJ5IGRpcmVjdGx5IGNhbGxpbmcgdGhlIG5hdGl2ZSBAQG1ldGhvZCBtZXRob2QuXG4gICAgICAgICAgcmV0dXJuIHsgZG9uZTogdHJ1ZSwgdmFsdWU6IG5hdGl2ZVJlZ0V4cE1ldGhvZC5jYWxsKHJlZ2V4cCwgc3RyLCBhcmcyKSB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IGRvbmU6IHRydWUsIHZhbHVlOiBuYXRpdmVNZXRob2QuY2FsbChzdHIsIHJlZ2V4cCwgYXJnMikgfTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB7IGRvbmU6IGZhbHNlIH07XG4gICAgfSwge1xuICAgICAgUkVQTEFDRV9LRUVQU18kMDogUkVQTEFDRV9LRUVQU18kMCxcbiAgICAgIFJFR0VYUF9SRVBMQUNFX1NVQlNUSVRVVEVTX1VOREVGSU5FRF9DQVBUVVJFOiBSRUdFWFBfUkVQTEFDRV9TVUJTVElUVVRFU19VTkRFRklORURfQ0FQVFVSRVxuICAgIH0pO1xuICAgIHZhciBzdHJpbmdNZXRob2QgPSBtZXRob2RzWzBdO1xuICAgIHZhciByZWdleE1ldGhvZCA9IG1ldGhvZHNbMV07XG5cbiAgICByZWRlZmluZShTdHJpbmcucHJvdG90eXBlLCBLRVksIHN0cmluZ01ldGhvZCk7XG4gICAgcmVkZWZpbmUoUmVnRXhwLnByb3RvdHlwZSwgU1lNQk9MLCBsZW5ndGggPT0gMlxuICAgICAgLy8gMjEuMi41LjggUmVnRXhwLnByb3RvdHlwZVtAQHJlcGxhY2VdKHN0cmluZywgcmVwbGFjZVZhbHVlKVxuICAgICAgLy8gMjEuMi41LjExIFJlZ0V4cC5wcm90b3R5cGVbQEBzcGxpdF0oc3RyaW5nLCBsaW1pdClcbiAgICAgID8gZnVuY3Rpb24gKHN0cmluZywgYXJnKSB7IHJldHVybiByZWdleE1ldGhvZC5jYWxsKHN0cmluZywgdGhpcywgYXJnKTsgfVxuICAgICAgLy8gMjEuMi41LjYgUmVnRXhwLnByb3RvdHlwZVtAQG1hdGNoXShzdHJpbmcpXG4gICAgICAvLyAyMS4yLjUuOSBSZWdFeHAucHJvdG90eXBlW0BAc2VhcmNoXShzdHJpbmcpXG4gICAgICA6IGZ1bmN0aW9uIChzdHJpbmcpIHsgcmV0dXJuIHJlZ2V4TWV0aG9kLmNhbGwoc3RyaW5nLCB0aGlzKTsgfVxuICAgICk7XG4gIH1cblxuICBpZiAoc2hhbSkgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KFJlZ0V4cC5wcm90b3R5cGVbU1lNQk9MXSwgJ3NoYW0nLCB0cnVlKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1hcnJheScpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYmluZC1jb250ZXh0Jyk7XG5cbi8vIGBGbGF0dGVuSW50b0FycmF5YCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtZmxhdE1hcC8jc2VjLUZsYXR0ZW5JbnRvQXJyYXlcbnZhciBmbGF0dGVuSW50b0FycmF5ID0gZnVuY3Rpb24gKHRhcmdldCwgb3JpZ2luYWwsIHNvdXJjZSwgc291cmNlTGVuLCBzdGFydCwgZGVwdGgsIG1hcHBlciwgdGhpc0FyZykge1xuICB2YXIgdGFyZ2V0SW5kZXggPSBzdGFydDtcbiAgdmFyIHNvdXJjZUluZGV4ID0gMDtcbiAgdmFyIG1hcEZuID0gbWFwcGVyID8gYmluZChtYXBwZXIsIHRoaXNBcmcsIDMpIDogZmFsc2U7XG4gIHZhciBlbGVtZW50O1xuXG4gIHdoaWxlIChzb3VyY2VJbmRleCA8IHNvdXJjZUxlbikge1xuICAgIGlmIChzb3VyY2VJbmRleCBpbiBzb3VyY2UpIHtcbiAgICAgIGVsZW1lbnQgPSBtYXBGbiA/IG1hcEZuKHNvdXJjZVtzb3VyY2VJbmRleF0sIHNvdXJjZUluZGV4LCBvcmlnaW5hbCkgOiBzb3VyY2Vbc291cmNlSW5kZXhdO1xuXG4gICAgICBpZiAoZGVwdGggPiAwICYmIGlzQXJyYXkoZWxlbWVudCkpIHtcbiAgICAgICAgdGFyZ2V0SW5kZXggPSBmbGF0dGVuSW50b0FycmF5KHRhcmdldCwgb3JpZ2luYWwsIGVsZW1lbnQsIHRvTGVuZ3RoKGVsZW1lbnQubGVuZ3RoKSwgdGFyZ2V0SW5kZXgsIGRlcHRoIC0gMSkgLSAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHRhcmdldEluZGV4ID49IDB4MUZGRkZGRkZGRkZGRkYpIHRocm93IFR5cGVFcnJvcignRXhjZWVkIHRoZSBhY2NlcHRhYmxlIGFycmF5IGxlbmd0aCcpO1xuICAgICAgICB0YXJnZXRbdGFyZ2V0SW5kZXhdID0gZWxlbWVudDtcbiAgICAgIH1cblxuICAgICAgdGFyZ2V0SW5kZXgrKztcbiAgICB9XG4gICAgc291cmNlSW5kZXgrKztcbiAgfVxuICByZXR1cm4gdGFyZ2V0SW5kZXg7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZsYXR0ZW5JbnRvQXJyYXk7XG4iLCJ2YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gT2JqZWN0LmlzRXh0ZW5zaWJsZShPYmplY3QucHJldmVudEV4dGVuc2lvbnMoe30pKTtcbn0pO1xuIiwidmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWZ1bmN0aW9uJyk7XG5cbi8vIG9wdGlvbmFsIC8gc2ltcGxlIGNvbnRleHQgYmluZGluZ1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZm4sIHRoYXQsIGxlbmd0aCkge1xuICBhRnVuY3Rpb24oZm4pO1xuICBpZiAodGhhdCA9PT0gdW5kZWZpbmVkKSByZXR1cm4gZm47XG4gIHN3aXRjaCAobGVuZ3RoKSB7XG4gICAgY2FzZSAwOiByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCk7XG4gICAgfTtcbiAgICBjYXNlIDE6IHJldHVybiBmdW5jdGlvbiAoYSkge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSk7XG4gICAgfTtcbiAgICBjYXNlIDI6IHJldHVybiBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYik7XG4gICAgfTtcbiAgICBjYXNlIDM6IHJldHVybiBmdW5jdGlvbiAoYSwgYiwgYykge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYiwgYyk7XG4gICAgfTtcbiAgfVxuICByZXR1cm4gZnVuY3Rpb24gKC8qIC4uLmFyZ3MgKi8pIHtcbiAgICByZXR1cm4gZm4uYXBwbHkodGhhdCwgYXJndW1lbnRzKTtcbiAgfTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtZnVuY3Rpb24nKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcblxudmFyIHNsaWNlID0gW10uc2xpY2U7XG52YXIgZmFjdG9yaWVzID0ge307XG5cbnZhciBjb25zdHJ1Y3QgPSBmdW5jdGlvbiAoQywgYXJnc0xlbmd0aCwgYXJncykge1xuICBpZiAoIShhcmdzTGVuZ3RoIGluIGZhY3RvcmllcykpIHtcbiAgICBmb3IgKHZhciBsaXN0ID0gW10sIGkgPSAwOyBpIDwgYXJnc0xlbmd0aDsgaSsrKSBsaXN0W2ldID0gJ2FbJyArIGkgKyAnXSc7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jIC0tIHdlIGhhdmUgbm8gcHJvcGVyIGFsdGVybmF0aXZlcywgSUU4LSBvbmx5XG4gICAgZmFjdG9yaWVzW2FyZ3NMZW5ndGhdID0gRnVuY3Rpb24oJ0MsYScsICdyZXR1cm4gbmV3IEMoJyArIGxpc3Quam9pbignLCcpICsgJyknKTtcbiAgfSByZXR1cm4gZmFjdG9yaWVzW2FyZ3NMZW5ndGhdKEMsIGFyZ3MpO1xufTtcblxuLy8gYEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kYCBtZXRob2QgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtZnVuY3Rpb24ucHJvdG90eXBlLmJpbmRcbm1vZHVsZS5leHBvcnRzID0gRnVuY3Rpb24uYmluZCB8fCBmdW5jdGlvbiBiaW5kKHRoYXQgLyogLCAuLi5hcmdzICovKSB7XG4gIHZhciBmbiA9IGFGdW5jdGlvbih0aGlzKTtcbiAgdmFyIHBhcnRBcmdzID0gc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xuICB2YXIgYm91bmRGdW5jdGlvbiA9IGZ1bmN0aW9uIGJvdW5kKC8qIGFyZ3MuLi4gKi8pIHtcbiAgICB2YXIgYXJncyA9IHBhcnRBcmdzLmNvbmNhdChzbGljZS5jYWxsKGFyZ3VtZW50cykpO1xuICAgIHJldHVybiB0aGlzIGluc3RhbmNlb2YgYm91bmRGdW5jdGlvbiA/IGNvbnN0cnVjdChmbiwgYXJncy5sZW5ndGgsIGFyZ3MpIDogZm4uYXBwbHkodGhhdCwgYXJncyk7XG4gIH07XG4gIGlmIChpc09iamVjdChmbi5wcm90b3R5cGUpKSBib3VuZEZ1bmN0aW9uLnByb3RvdHlwZSA9IGZuLnByb3RvdHlwZTtcbiAgcmV0dXJuIGJvdW5kRnVuY3Rpb247XG59O1xuIiwidmFyIHBhdGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcGF0aCcpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcblxudmFyIGFGdW5jdGlvbiA9IGZ1bmN0aW9uICh2YXJpYWJsZSkge1xuICByZXR1cm4gdHlwZW9mIHZhcmlhYmxlID09ICdmdW5jdGlvbicgPyB2YXJpYWJsZSA6IHVuZGVmaW5lZDtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG5hbWVzcGFjZSwgbWV0aG9kKSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoIDwgMiA/IGFGdW5jdGlvbihwYXRoW25hbWVzcGFjZV0pIHx8IGFGdW5jdGlvbihnbG9iYWxbbmFtZXNwYWNlXSlcbiAgICA6IHBhdGhbbmFtZXNwYWNlXSAmJiBwYXRoW25hbWVzcGFjZV1bbWV0aG9kXSB8fCBnbG9iYWxbbmFtZXNwYWNlXSAmJiBnbG9iYWxbbmFtZXNwYWNlXVttZXRob2RdO1xufTtcbiIsInZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0b3JzJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBJVEVSQVRPUiA9IHdlbGxLbm93blN5bWJvbCgnaXRlcmF0b3InKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKGl0ICE9IHVuZGVmaW5lZCkgcmV0dXJuIGl0W0lURVJBVE9SXVxuICAgIHx8IGl0WydAQGl0ZXJhdG9yJ11cbiAgICB8fCBJdGVyYXRvcnNbY2xhc3NvZihpdCldO1xufTtcbiIsInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBnZXRJdGVyYXRvck1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtaXRlcmF0b3ItbWV0aG9kJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciBpdGVyYXRvck1ldGhvZCA9IGdldEl0ZXJhdG9yTWV0aG9kKGl0KTtcbiAgaWYgKHR5cGVvZiBpdGVyYXRvck1ldGhvZCAhPSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgVHlwZUVycm9yKFN0cmluZyhpdCkgKyAnIGlzIG5vdCBpdGVyYWJsZScpO1xuICB9IHJldHVybiBhbk9iamVjdChpdGVyYXRvck1ldGhvZC5jYWxsKGl0KSk7XG59O1xuIiwidmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xuXG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xudmFyIHJlcGxhY2UgPSAnJy5yZXBsYWNlO1xudmFyIFNVQlNUSVRVVElPTl9TWU1CT0xTID0gL1xcJChbJCYnYF18XFxkezEsMn18PFtePl0qPikvZztcbnZhciBTVUJTVElUVVRJT05fU1lNQk9MU19OT19OQU1FRCA9IC9cXCQoWyQmJ2BdfFxcZHsxLDJ9KS9nO1xuXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWdldHN1YnN0aXR1dGlvblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobWF0Y2hlZCwgc3RyLCBwb3NpdGlvbiwgY2FwdHVyZXMsIG5hbWVkQ2FwdHVyZXMsIHJlcGxhY2VtZW50KSB7XG4gIHZhciB0YWlsUG9zID0gcG9zaXRpb24gKyBtYXRjaGVkLmxlbmd0aDtcbiAgdmFyIG0gPSBjYXB0dXJlcy5sZW5ndGg7XG4gIHZhciBzeW1ib2xzID0gU1VCU1RJVFVUSU9OX1NZTUJPTFNfTk9fTkFNRUQ7XG4gIGlmIChuYW1lZENhcHR1cmVzICE9PSB1bmRlZmluZWQpIHtcbiAgICBuYW1lZENhcHR1cmVzID0gdG9PYmplY3QobmFtZWRDYXB0dXJlcyk7XG4gICAgc3ltYm9scyA9IFNVQlNUSVRVVElPTl9TWU1CT0xTO1xuICB9XG4gIHJldHVybiByZXBsYWNlLmNhbGwocmVwbGFjZW1lbnQsIHN5bWJvbHMsIGZ1bmN0aW9uIChtYXRjaCwgY2gpIHtcbiAgICB2YXIgY2FwdHVyZTtcbiAgICBzd2l0Y2ggKGNoLmNoYXJBdCgwKSkge1xuICAgICAgY2FzZSAnJCc6IHJldHVybiAnJCc7XG4gICAgICBjYXNlICcmJzogcmV0dXJuIG1hdGNoZWQ7XG4gICAgICBjYXNlICdgJzogcmV0dXJuIHN0ci5zbGljZSgwLCBwb3NpdGlvbik7XG4gICAgICBjYXNlIFwiJ1wiOiByZXR1cm4gc3RyLnNsaWNlKHRhaWxQb3MpO1xuICAgICAgY2FzZSAnPCc6XG4gICAgICAgIGNhcHR1cmUgPSBuYW1lZENhcHR1cmVzW2NoLnNsaWNlKDEsIC0xKV07XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDogLy8gXFxkXFxkP1xuICAgICAgICB2YXIgbiA9ICtjaDtcbiAgICAgICAgaWYgKG4gPT09IDApIHJldHVybiBtYXRjaDtcbiAgICAgICAgaWYgKG4gPiBtKSB7XG4gICAgICAgICAgdmFyIGYgPSBmbG9vcihuIC8gMTApO1xuICAgICAgICAgIGlmIChmID09PSAwKSByZXR1cm4gbWF0Y2g7XG4gICAgICAgICAgaWYgKGYgPD0gbSkgcmV0dXJuIGNhcHR1cmVzW2YgLSAxXSA9PT0gdW5kZWZpbmVkID8gY2guY2hhckF0KDEpIDogY2FwdHVyZXNbZiAtIDFdICsgY2guY2hhckF0KDEpO1xuICAgICAgICAgIHJldHVybiBtYXRjaDtcbiAgICAgICAgfVxuICAgICAgICBjYXB0dXJlID0gY2FwdHVyZXNbbiAtIDFdO1xuICAgIH1cbiAgICByZXR1cm4gY2FwdHVyZSA9PT0gdW5kZWZpbmVkID8gJycgOiBjYXB0dXJlO1xuICB9KTtcbn07XG4iLCJ2YXIgY2hlY2sgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ICYmIGl0Lk1hdGggPT0gTWF0aCAmJiBpdDtcbn07XG5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy84NiNpc3N1ZWNvbW1lbnQtMTE1NzU5MDI4XG5tb2R1bGUuZXhwb3J0cyA9XG4gIC8qIGdsb2JhbCBnbG9iYWxUaGlzIC0tIHNhZmUgKi9cbiAgY2hlY2sodHlwZW9mIGdsb2JhbFRoaXMgPT0gJ29iamVjdCcgJiYgZ2xvYmFsVGhpcykgfHxcbiAgY2hlY2sodHlwZW9mIHdpbmRvdyA9PSAnb2JqZWN0JyAmJiB3aW5kb3cpIHx8XG4gIGNoZWNrKHR5cGVvZiBzZWxmID09ICdvYmplY3QnICYmIHNlbGYpIHx8XG4gIGNoZWNrKHR5cGVvZiBnbG9iYWwgPT0gJ29iamVjdCcgJiYgZ2xvYmFsKSB8fFxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmMgLS0gZmFsbGJhY2tcbiAgKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0pKCkgfHwgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcbiIsInZhciBoYXNPd25Qcm9wZXJ0eSA9IHt9Lmhhc093blByb3BlcnR5O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwga2V5KSB7XG4gIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGl0LCBrZXkpO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0ge307XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gIHZhciBjb25zb2xlID0gZ2xvYmFsLmNvbnNvbGU7XG4gIGlmIChjb25zb2xlICYmIGNvbnNvbGUuZXJyb3IpIHtcbiAgICBhcmd1bWVudHMubGVuZ3RoID09PSAxID8gY29uc29sZS5lcnJvcihhKSA6IGNvbnNvbGUuZXJyb3IoYSwgYik7XG4gIH1cbn07XG4iLCJ2YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBnZXRCdWlsdEluKCdkb2N1bWVudCcsICdkb2N1bWVudEVsZW1lbnQnKTtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgY3JlYXRlRWxlbWVudCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kb2N1bWVudC1jcmVhdGUtZWxlbWVudCcpO1xuXG4vLyBUaGFuaydzIElFOCBmb3IgaGlzIGZ1bm55IGRlZmluZVByb3BlcnR5XG5tb2R1bGUuZXhwb3J0cyA9ICFERVNDUklQVE9SUyAmJiAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KGNyZWF0ZUVsZW1lbnQoJ2RpdicpLCAnYScsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH1cbiAgfSkuYSAhPSA3O1xufSk7XG4iLCIvLyBJRUVFNzU0IGNvbnZlcnNpb25zIGJhc2VkIG9uIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvaWVlZTc1NFxudmFyIGFicyA9IE1hdGguYWJzO1xudmFyIHBvdyA9IE1hdGgucG93O1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbnZhciBsb2cgPSBNYXRoLmxvZztcbnZhciBMTjIgPSBNYXRoLkxOMjtcblxudmFyIHBhY2sgPSBmdW5jdGlvbiAobnVtYmVyLCBtYW50aXNzYUxlbmd0aCwgYnl0ZXMpIHtcbiAgdmFyIGJ1ZmZlciA9IG5ldyBBcnJheShieXRlcyk7XG4gIHZhciBleHBvbmVudExlbmd0aCA9IGJ5dGVzICogOCAtIG1hbnRpc3NhTGVuZ3RoIC0gMTtcbiAgdmFyIGVNYXggPSAoMSA8PCBleHBvbmVudExlbmd0aCkgLSAxO1xuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDE7XG4gIHZhciBydCA9IG1hbnRpc3NhTGVuZ3RoID09PSAyMyA/IHBvdygyLCAtMjQpIC0gcG93KDIsIC03NykgOiAwO1xuICB2YXIgc2lnbiA9IG51bWJlciA8IDAgfHwgbnVtYmVyID09PSAwICYmIDEgLyBudW1iZXIgPCAwID8gMSA6IDA7XG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciBleHBvbmVudCwgbWFudGlzc2EsIGM7XG4gIG51bWJlciA9IGFicyhudW1iZXIpO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlIC0tIE5hTiBjaGVja1xuICBpZiAobnVtYmVyICE9IG51bWJlciB8fCBudW1iZXIgPT09IEluZmluaXR5KSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZSAtLSBOYU4gY2hlY2tcbiAgICBtYW50aXNzYSA9IG51bWJlciAhPSBudW1iZXIgPyAxIDogMDtcbiAgICBleHBvbmVudCA9IGVNYXg7XG4gIH0gZWxzZSB7XG4gICAgZXhwb25lbnQgPSBmbG9vcihsb2cobnVtYmVyKSAvIExOMik7XG4gICAgaWYgKG51bWJlciAqIChjID0gcG93KDIsIC1leHBvbmVudCkpIDwgMSkge1xuICAgICAgZXhwb25lbnQtLTtcbiAgICAgIGMgKj0gMjtcbiAgICB9XG4gICAgaWYgKGV4cG9uZW50ICsgZUJpYXMgPj0gMSkge1xuICAgICAgbnVtYmVyICs9IHJ0IC8gYztcbiAgICB9IGVsc2Uge1xuICAgICAgbnVtYmVyICs9IHJ0ICogcG93KDIsIDEgLSBlQmlhcyk7XG4gICAgfVxuICAgIGlmIChudW1iZXIgKiBjID49IDIpIHtcbiAgICAgIGV4cG9uZW50Kys7XG4gICAgICBjIC89IDI7XG4gICAgfVxuICAgIGlmIChleHBvbmVudCArIGVCaWFzID49IGVNYXgpIHtcbiAgICAgIG1hbnRpc3NhID0gMDtcbiAgICAgIGV4cG9uZW50ID0gZU1heDtcbiAgICB9IGVsc2UgaWYgKGV4cG9uZW50ICsgZUJpYXMgPj0gMSkge1xuICAgICAgbWFudGlzc2EgPSAobnVtYmVyICogYyAtIDEpICogcG93KDIsIG1hbnRpc3NhTGVuZ3RoKTtcbiAgICAgIGV4cG9uZW50ID0gZXhwb25lbnQgKyBlQmlhcztcbiAgICB9IGVsc2Uge1xuICAgICAgbWFudGlzc2EgPSBudW1iZXIgKiBwb3coMiwgZUJpYXMgLSAxKSAqIHBvdygyLCBtYW50aXNzYUxlbmd0aCk7XG4gICAgICBleHBvbmVudCA9IDA7XG4gICAgfVxuICB9XG4gIGZvciAoOyBtYW50aXNzYUxlbmd0aCA+PSA4OyBidWZmZXJbaW5kZXgrK10gPSBtYW50aXNzYSAmIDI1NSwgbWFudGlzc2EgLz0gMjU2LCBtYW50aXNzYUxlbmd0aCAtPSA4KTtcbiAgZXhwb25lbnQgPSBleHBvbmVudCA8PCBtYW50aXNzYUxlbmd0aCB8IG1hbnRpc3NhO1xuICBleHBvbmVudExlbmd0aCArPSBtYW50aXNzYUxlbmd0aDtcbiAgZm9yICg7IGV4cG9uZW50TGVuZ3RoID4gMDsgYnVmZmVyW2luZGV4KytdID0gZXhwb25lbnQgJiAyNTUsIGV4cG9uZW50IC89IDI1NiwgZXhwb25lbnRMZW5ndGggLT0gOCk7XG4gIGJ1ZmZlclstLWluZGV4XSB8PSBzaWduICogMTI4O1xuICByZXR1cm4gYnVmZmVyO1xufTtcblxudmFyIHVucGFjayA9IGZ1bmN0aW9uIChidWZmZXIsIG1hbnRpc3NhTGVuZ3RoKSB7XG4gIHZhciBieXRlcyA9IGJ1ZmZlci5sZW5ndGg7XG4gIHZhciBleHBvbmVudExlbmd0aCA9IGJ5dGVzICogOCAtIG1hbnRpc3NhTGVuZ3RoIC0gMTtcbiAgdmFyIGVNYXggPSAoMSA8PCBleHBvbmVudExlbmd0aCkgLSAxO1xuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDE7XG4gIHZhciBuQml0cyA9IGV4cG9uZW50TGVuZ3RoIC0gNztcbiAgdmFyIGluZGV4ID0gYnl0ZXMgLSAxO1xuICB2YXIgc2lnbiA9IGJ1ZmZlcltpbmRleC0tXTtcbiAgdmFyIGV4cG9uZW50ID0gc2lnbiAmIDEyNztcbiAgdmFyIG1hbnRpc3NhO1xuICBzaWduID4+PSA3O1xuICBmb3IgKDsgbkJpdHMgPiAwOyBleHBvbmVudCA9IGV4cG9uZW50ICogMjU2ICsgYnVmZmVyW2luZGV4XSwgaW5kZXgtLSwgbkJpdHMgLT0gOCk7XG4gIG1hbnRpc3NhID0gZXhwb25lbnQgJiAoMSA8PCAtbkJpdHMpIC0gMTtcbiAgZXhwb25lbnQgPj49IC1uQml0cztcbiAgbkJpdHMgKz0gbWFudGlzc2FMZW5ndGg7XG4gIGZvciAoOyBuQml0cyA+IDA7IG1hbnRpc3NhID0gbWFudGlzc2EgKiAyNTYgKyBidWZmZXJbaW5kZXhdLCBpbmRleC0tLCBuQml0cyAtPSA4KTtcbiAgaWYgKGV4cG9uZW50ID09PSAwKSB7XG4gICAgZXhwb25lbnQgPSAxIC0gZUJpYXM7XG4gIH0gZWxzZSBpZiAoZXhwb25lbnQgPT09IGVNYXgpIHtcbiAgICByZXR1cm4gbWFudGlzc2EgPyBOYU4gOiBzaWduID8gLUluZmluaXR5IDogSW5maW5pdHk7XG4gIH0gZWxzZSB7XG4gICAgbWFudGlzc2EgPSBtYW50aXNzYSArIHBvdygyLCBtYW50aXNzYUxlbmd0aCk7XG4gICAgZXhwb25lbnQgPSBleHBvbmVudCAtIGVCaWFzO1xuICB9IHJldHVybiAoc2lnbiA/IC0xIDogMSkgKiBtYW50aXNzYSAqIHBvdygyLCBleHBvbmVudCAtIG1hbnRpc3NhTGVuZ3RoKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBwYWNrOiBwYWNrLFxuICB1bnBhY2s6IHVucGFja1xufTtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZi1yYXcnKTtcblxudmFyIHNwbGl0ID0gJycuc3BsaXQ7XG5cbi8vIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgYW5kIG5vbi1lbnVtZXJhYmxlIG9sZCBWOCBzdHJpbmdzXG5tb2R1bGUuZXhwb3J0cyA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gdGhyb3dzIGFuIGVycm9yIGluIHJoaW5vLCBzZWUgaHR0cHM6Ly9naXRodWIuY29tL21vemlsbGEvcmhpbm8vaXNzdWVzLzM0NlxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zIC0tIHNhZmVcbiAgcmV0dXJuICFPYmplY3QoJ3onKS5wcm9wZXJ0eUlzRW51bWVyYWJsZSgwKTtcbn0pID8gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBjbGFzc29mKGl0KSA9PSAnU3RyaW5nJyA/IHNwbGl0LmNhbGwoaXQsICcnKSA6IE9iamVjdChpdCk7XG59IDogT2JqZWN0O1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIHNldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1zZXQtcHJvdG90eXBlLW9mJyk7XG5cbi8vIG1ha2VzIHN1YmNsYXNzaW5nIHdvcmsgY29ycmVjdCBmb3Igd3JhcHBlZCBidWlsdC1pbnNcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCR0aGlzLCBkdW1teSwgV3JhcHBlcikge1xuICB2YXIgTmV3VGFyZ2V0LCBOZXdUYXJnZXRQcm90b3R5cGU7XG4gIGlmIChcbiAgICAvLyBpdCBjYW4gd29yayBvbmx5IHdpdGggbmF0aXZlIGBzZXRQcm90b3R5cGVPZmBcbiAgICBzZXRQcm90b3R5cGVPZiAmJlxuICAgIC8vIHdlIGhhdmVuJ3QgY29tcGxldGVseSBjb3JyZWN0IHByZS1FUzYgd2F5IGZvciBnZXR0aW5nIGBuZXcudGFyZ2V0YCwgc28gdXNlIHRoaXNcbiAgICB0eXBlb2YgKE5ld1RhcmdldCA9IGR1bW15LmNvbnN0cnVjdG9yKSA9PSAnZnVuY3Rpb24nICYmXG4gICAgTmV3VGFyZ2V0ICE9PSBXcmFwcGVyICYmXG4gICAgaXNPYmplY3QoTmV3VGFyZ2V0UHJvdG90eXBlID0gTmV3VGFyZ2V0LnByb3RvdHlwZSkgJiZcbiAgICBOZXdUYXJnZXRQcm90b3R5cGUgIT09IFdyYXBwZXIucHJvdG90eXBlXG4gICkgc2V0UHJvdG90eXBlT2YoJHRoaXMsIE5ld1RhcmdldFByb3RvdHlwZSk7XG4gIHJldHVybiAkdGhpcztcbn07XG4iLCJ2YXIgc3RvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkLXN0b3JlJyk7XG5cbnZhciBmdW5jdGlvblRvU3RyaW5nID0gRnVuY3Rpb24udG9TdHJpbmc7XG5cbi8vIHRoaXMgaGVscGVyIGJyb2tlbiBpbiBgMy40LjEtMy40LjRgLCBzbyB3ZSBjYW4ndCB1c2UgYHNoYXJlZGAgaGVscGVyXG5pZiAodHlwZW9mIHN0b3JlLmluc3BlY3RTb3VyY2UgIT0gJ2Z1bmN0aW9uJykge1xuICBzdG9yZS5pbnNwZWN0U291cmNlID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uVG9TdHJpbmcuY2FsbChpdCk7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3RvcmUuaW5zcGVjdFNvdXJjZTtcbiIsInZhciBoaWRkZW5LZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hpZGRlbi1rZXlzJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKS5mO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy91aWQnKTtcbnZhciBGUkVFWklORyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mcmVlemluZycpO1xuXG52YXIgTUVUQURBVEEgPSB1aWQoJ21ldGEnKTtcbnZhciBpZCA9IDA7XG5cbnZhciBpc0V4dGVuc2libGUgPSBPYmplY3QuaXNFeHRlbnNpYmxlIHx8IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRydWU7XG59O1xuXG52YXIgc2V0TWV0YWRhdGEgPSBmdW5jdGlvbiAoaXQpIHtcbiAgZGVmaW5lUHJvcGVydHkoaXQsIE1FVEFEQVRBLCB7IHZhbHVlOiB7XG4gICAgb2JqZWN0SUQ6ICdPJyArICsraWQsIC8vIG9iamVjdCBJRFxuICAgIHdlYWtEYXRhOiB7fSAgICAgICAgICAvLyB3ZWFrIGNvbGxlY3Rpb25zIElEc1xuICB9IH0pO1xufTtcblxudmFyIGZhc3RLZXkgPSBmdW5jdGlvbiAoaXQsIGNyZWF0ZSkge1xuICAvLyByZXR1cm4gYSBwcmltaXRpdmUgd2l0aCBwcmVmaXhcbiAgaWYgKCFpc09iamVjdChpdCkpIHJldHVybiB0eXBlb2YgaXQgPT0gJ3N5bWJvbCcgPyBpdCA6ICh0eXBlb2YgaXQgPT0gJ3N0cmluZycgPyAnUycgOiAnUCcpICsgaXQ7XG4gIGlmICghaGFzKGl0LCBNRVRBREFUQSkpIHtcbiAgICAvLyBjYW4ndCBzZXQgbWV0YWRhdGEgdG8gdW5jYXVnaHQgZnJvemVuIG9iamVjdFxuICAgIGlmICghaXNFeHRlbnNpYmxlKGl0KSkgcmV0dXJuICdGJztcbiAgICAvLyBub3QgbmVjZXNzYXJ5IHRvIGFkZCBtZXRhZGF0YVxuICAgIGlmICghY3JlYXRlKSByZXR1cm4gJ0UnO1xuICAgIC8vIGFkZCBtaXNzaW5nIG1ldGFkYXRhXG4gICAgc2V0TWV0YWRhdGEoaXQpO1xuICAvLyByZXR1cm4gb2JqZWN0IElEXG4gIH0gcmV0dXJuIGl0W01FVEFEQVRBXS5vYmplY3RJRDtcbn07XG5cbnZhciBnZXRXZWFrRGF0YSA9IGZ1bmN0aW9uIChpdCwgY3JlYXRlKSB7XG4gIGlmICghaGFzKGl0LCBNRVRBREFUQSkpIHtcbiAgICAvLyBjYW4ndCBzZXQgbWV0YWRhdGEgdG8gdW5jYXVnaHQgZnJvemVuIG9iamVjdFxuICAgIGlmICghaXNFeHRlbnNpYmxlKGl0KSkgcmV0dXJuIHRydWU7XG4gICAgLy8gbm90IG5lY2Vzc2FyeSB0byBhZGQgbWV0YWRhdGFcbiAgICBpZiAoIWNyZWF0ZSkgcmV0dXJuIGZhbHNlO1xuICAgIC8vIGFkZCBtaXNzaW5nIG1ldGFkYXRhXG4gICAgc2V0TWV0YWRhdGEoaXQpO1xuICAvLyByZXR1cm4gdGhlIHN0b3JlIG9mIHdlYWsgY29sbGVjdGlvbnMgSURzXG4gIH0gcmV0dXJuIGl0W01FVEFEQVRBXS53ZWFrRGF0YTtcbn07XG5cbi8vIGFkZCBtZXRhZGF0YSBvbiBmcmVlemUtZmFtaWx5IG1ldGhvZHMgY2FsbGluZ1xudmFyIG9uRnJlZXplID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChGUkVFWklORyAmJiBtZXRhLlJFUVVJUkVEICYmIGlzRXh0ZW5zaWJsZShpdCkgJiYgIWhhcyhpdCwgTUVUQURBVEEpKSBzZXRNZXRhZGF0YShpdCk7XG4gIHJldHVybiBpdDtcbn07XG5cbnZhciBtZXRhID0gbW9kdWxlLmV4cG9ydHMgPSB7XG4gIFJFUVVJUkVEOiBmYWxzZSxcbiAgZmFzdEtleTogZmFzdEtleSxcbiAgZ2V0V2Vha0RhdGE6IGdldFdlYWtEYXRhLFxuICBvbkZyZWV6ZTogb25GcmVlemVcbn07XG5cbmhpZGRlbktleXNbTUVUQURBVEFdID0gdHJ1ZTtcbiIsInZhciBOQVRJVkVfV0VBS19NQVAgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmF0aXZlLXdlYWstbWFwJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcbnZhciBvYmplY3RIYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgc2hhcmVkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1zdG9yZScpO1xudmFyIHNoYXJlZEtleSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQta2V5Jyk7XG52YXIgaGlkZGVuS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oaWRkZW4ta2V5cycpO1xuXG52YXIgV2Vha01hcCA9IGdsb2JhbC5XZWFrTWFwO1xudmFyIHNldCwgZ2V0LCBoYXM7XG5cbnZhciBlbmZvcmNlID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBoYXMoaXQpID8gZ2V0KGl0KSA6IHNldChpdCwge30pO1xufTtcblxudmFyIGdldHRlckZvciA9IGZ1bmN0aW9uIChUWVBFKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoaXQpIHtcbiAgICB2YXIgc3RhdGU7XG4gICAgaWYgKCFpc09iamVjdChpdCkgfHwgKHN0YXRlID0gZ2V0KGl0KSkudHlwZSAhPT0gVFlQRSkge1xuICAgICAgdGhyb3cgVHlwZUVycm9yKCdJbmNvbXBhdGlibGUgcmVjZWl2ZXIsICcgKyBUWVBFICsgJyByZXF1aXJlZCcpO1xuICAgIH0gcmV0dXJuIHN0YXRlO1xuICB9O1xufTtcblxuaWYgKE5BVElWRV9XRUFLX01BUCkge1xuICB2YXIgc3RvcmUgPSBzaGFyZWQuc3RhdGUgfHwgKHNoYXJlZC5zdGF0ZSA9IG5ldyBXZWFrTWFwKCkpO1xuICB2YXIgd21nZXQgPSBzdG9yZS5nZXQ7XG4gIHZhciB3bWhhcyA9IHN0b3JlLmhhcztcbiAgdmFyIHdtc2V0ID0gc3RvcmUuc2V0O1xuICBzZXQgPSBmdW5jdGlvbiAoaXQsIG1ldGFkYXRhKSB7XG4gICAgbWV0YWRhdGEuZmFjYWRlID0gaXQ7XG4gICAgd21zZXQuY2FsbChzdG9yZSwgaXQsIG1ldGFkYXRhKTtcbiAgICByZXR1cm4gbWV0YWRhdGE7XG4gIH07XG4gIGdldCA9IGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiB3bWdldC5jYWxsKHN0b3JlLCBpdCkgfHwge307XG4gIH07XG4gIGhhcyA9IGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiB3bWhhcy5jYWxsKHN0b3JlLCBpdCk7XG4gIH07XG59IGVsc2Uge1xuICB2YXIgU1RBVEUgPSBzaGFyZWRLZXkoJ3N0YXRlJyk7XG4gIGhpZGRlbktleXNbU1RBVEVdID0gdHJ1ZTtcbiAgc2V0ID0gZnVuY3Rpb24gKGl0LCBtZXRhZGF0YSkge1xuICAgIG1ldGFkYXRhLmZhY2FkZSA9IGl0O1xuICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShpdCwgU1RBVEUsIG1ldGFkYXRhKTtcbiAgICByZXR1cm4gbWV0YWRhdGE7XG4gIH07XG4gIGdldCA9IGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiBvYmplY3RIYXMoaXQsIFNUQVRFKSA/IGl0W1NUQVRFXSA6IHt9O1xuICB9O1xuICBoYXMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICByZXR1cm4gb2JqZWN0SGFzKGl0LCBTVEFURSk7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBzZXQ6IHNldCxcbiAgZ2V0OiBnZXQsXG4gIGhhczogaGFzLFxuICBlbmZvcmNlOiBlbmZvcmNlLFxuICBnZXR0ZXJGb3I6IGdldHRlckZvclxufTtcbiIsInZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0b3JzJyk7XG5cbnZhciBJVEVSQVRPUiA9IHdlbGxLbm93blN5bWJvbCgnaXRlcmF0b3InKTtcbnZhciBBcnJheVByb3RvdHlwZSA9IEFycmF5LnByb3RvdHlwZTtcblxuLy8gY2hlY2sgb24gZGVmYXVsdCBBcnJheSBpdGVyYXRvclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ICE9PSB1bmRlZmluZWQgJiYgKEl0ZXJhdG9ycy5BcnJheSA9PT0gaXQgfHwgQXJyYXlQcm90b3R5cGVbSVRFUkFUT1JdID09PSBpdCk7XG59O1xuIiwidmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZi1yYXcnKTtcblxuLy8gYElzQXJyYXlgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1pc2FycmF5XG5tb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gaXNBcnJheShhcmcpIHtcbiAgcmV0dXJuIGNsYXNzb2YoYXJnKSA9PSAnQXJyYXknO1xufTtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG52YXIgcmVwbGFjZW1lbnQgPSAvI3xcXC5wcm90b3R5cGVcXC4vO1xuXG52YXIgaXNGb3JjZWQgPSBmdW5jdGlvbiAoZmVhdHVyZSwgZGV0ZWN0aW9uKSB7XG4gIHZhciB2YWx1ZSA9IGRhdGFbbm9ybWFsaXplKGZlYXR1cmUpXTtcbiAgcmV0dXJuIHZhbHVlID09IFBPTFlGSUxMID8gdHJ1ZVxuICAgIDogdmFsdWUgPT0gTkFUSVZFID8gZmFsc2VcbiAgICA6IHR5cGVvZiBkZXRlY3Rpb24gPT0gJ2Z1bmN0aW9uJyA/IGZhaWxzKGRldGVjdGlvbilcbiAgICA6ICEhZGV0ZWN0aW9uO1xufTtcblxudmFyIG5vcm1hbGl6ZSA9IGlzRm9yY2VkLm5vcm1hbGl6ZSA9IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgcmV0dXJuIFN0cmluZyhzdHJpbmcpLnJlcGxhY2UocmVwbGFjZW1lbnQsICcuJykudG9Mb3dlckNhc2UoKTtcbn07XG5cbnZhciBkYXRhID0gaXNGb3JjZWQuZGF0YSA9IHt9O1xudmFyIE5BVElWRSA9IGlzRm9yY2VkLk5BVElWRSA9ICdOJztcbnZhciBQT0xZRklMTCA9IGlzRm9yY2VkLlBPTFlGSUxMID0gJ1AnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGlzRm9yY2VkO1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xuXG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xuXG4vLyBgTnVtYmVyLmlzSW50ZWdlcmAgbWV0aG9kIGltcGxlbWVudGF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW51bWJlci5pc2ludGVnZXJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNJbnRlZ2VyKGl0KSB7XG4gIHJldHVybiAhaXNPYmplY3QoaXQpICYmIGlzRmluaXRlKGl0KSAmJiBmbG9vcihpdCkgPT09IGl0O1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0eXBlb2YgaXQgPT09ICdvYmplY3QnID8gaXQgIT09IG51bGwgOiB0eXBlb2YgaXQgPT09ICdmdW5jdGlvbic7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmYWxzZTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YtcmF3Jyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBNQVRDSCA9IHdlbGxLbm93blN5bWJvbCgnbWF0Y2gnKTtcblxuLy8gYElzUmVnRXhwYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtaXNyZWdleHBcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciBpc1JlZ0V4cDtcbiAgcmV0dXJuIGlzT2JqZWN0KGl0KSAmJiAoKGlzUmVnRXhwID0gaXRbTUFUQ0hdKSAhPT0gdW5kZWZpbmVkID8gISFpc1JlZ0V4cCA6IGNsYXNzb2YoaXQpID09ICdSZWdFeHAnKTtcbn07XG4iLCJ2YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgaXNBcnJheUl0ZXJhdG9yTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWFycmF5LWl0ZXJhdG9yLW1ldGhvZCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYmluZC1jb250ZXh0Jyk7XG52YXIgZ2V0SXRlcmF0b3JNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWl0ZXJhdG9yLW1ldGhvZCcpO1xudmFyIGl0ZXJhdG9yQ2xvc2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0b3ItY2xvc2UnKTtcblxudmFyIFJlc3VsdCA9IGZ1bmN0aW9uIChzdG9wcGVkLCByZXN1bHQpIHtcbiAgdGhpcy5zdG9wcGVkID0gc3RvcHBlZDtcbiAgdGhpcy5yZXN1bHQgPSByZXN1bHQ7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVyYWJsZSwgdW5ib3VuZEZ1bmN0aW9uLCBvcHRpb25zKSB7XG4gIHZhciB0aGF0ID0gb3B0aW9ucyAmJiBvcHRpb25zLnRoYXQ7XG4gIHZhciBBU19FTlRSSUVTID0gISEob3B0aW9ucyAmJiBvcHRpb25zLkFTX0VOVFJJRVMpO1xuICB2YXIgSVNfSVRFUkFUT1IgPSAhIShvcHRpb25zICYmIG9wdGlvbnMuSVNfSVRFUkFUT1IpO1xuICB2YXIgSU5URVJSVVBURUQgPSAhIShvcHRpb25zICYmIG9wdGlvbnMuSU5URVJSVVBURUQpO1xuICB2YXIgZm4gPSBiaW5kKHVuYm91bmRGdW5jdGlvbiwgdGhhdCwgMSArIEFTX0VOVFJJRVMgKyBJTlRFUlJVUFRFRCk7XG4gIHZhciBpdGVyYXRvciwgaXRlckZuLCBpbmRleCwgbGVuZ3RoLCByZXN1bHQsIG5leHQsIHN0ZXA7XG5cbiAgdmFyIHN0b3AgPSBmdW5jdGlvbiAoY29uZGl0aW9uKSB7XG4gICAgaWYgKGl0ZXJhdG9yKSBpdGVyYXRvckNsb3NlKGl0ZXJhdG9yKTtcbiAgICByZXR1cm4gbmV3IFJlc3VsdCh0cnVlLCBjb25kaXRpb24pO1xuICB9O1xuXG4gIHZhciBjYWxsRm4gPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICBpZiAoQVNfRU5UUklFUykge1xuICAgICAgYW5PYmplY3QodmFsdWUpO1xuICAgICAgcmV0dXJuIElOVEVSUlVQVEVEID8gZm4odmFsdWVbMF0sIHZhbHVlWzFdLCBzdG9wKSA6IGZuKHZhbHVlWzBdLCB2YWx1ZVsxXSk7XG4gICAgfSByZXR1cm4gSU5URVJSVVBURUQgPyBmbih2YWx1ZSwgc3RvcCkgOiBmbih2YWx1ZSk7XG4gIH07XG5cbiAgaWYgKElTX0lURVJBVE9SKSB7XG4gICAgaXRlcmF0b3IgPSBpdGVyYWJsZTtcbiAgfSBlbHNlIHtcbiAgICBpdGVyRm4gPSBnZXRJdGVyYXRvck1ldGhvZChpdGVyYWJsZSk7XG4gICAgaWYgKHR5cGVvZiBpdGVyRm4gIT0gJ2Z1bmN0aW9uJykgdGhyb3cgVHlwZUVycm9yKCdUYXJnZXQgaXMgbm90IGl0ZXJhYmxlJyk7XG4gICAgLy8gb3B0aW1pc2F0aW9uIGZvciBhcnJheSBpdGVyYXRvcnNcbiAgICBpZiAoaXNBcnJheUl0ZXJhdG9yTWV0aG9kKGl0ZXJGbikpIHtcbiAgICAgIGZvciAoaW5kZXggPSAwLCBsZW5ndGggPSB0b0xlbmd0aChpdGVyYWJsZS5sZW5ndGgpOyBsZW5ndGggPiBpbmRleDsgaW5kZXgrKykge1xuICAgICAgICByZXN1bHQgPSBjYWxsRm4oaXRlcmFibGVbaW5kZXhdKTtcbiAgICAgICAgaWYgKHJlc3VsdCAmJiByZXN1bHQgaW5zdGFuY2VvZiBSZXN1bHQpIHJldHVybiByZXN1bHQ7XG4gICAgICB9IHJldHVybiBuZXcgUmVzdWx0KGZhbHNlKTtcbiAgICB9XG4gICAgaXRlcmF0b3IgPSBpdGVyRm4uY2FsbChpdGVyYWJsZSk7XG4gIH1cblxuICBuZXh0ID0gaXRlcmF0b3IubmV4dDtcbiAgd2hpbGUgKCEoc3RlcCA9IG5leHQuY2FsbChpdGVyYXRvcikpLmRvbmUpIHtcbiAgICB0cnkge1xuICAgICAgcmVzdWx0ID0gY2FsbEZuKHN0ZXAudmFsdWUpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBpdGVyYXRvckNsb3NlKGl0ZXJhdG9yKTtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHJlc3VsdCA9PSAnb2JqZWN0JyAmJiByZXN1bHQgJiYgcmVzdWx0IGluc3RhbmNlb2YgUmVzdWx0KSByZXR1cm4gcmVzdWx0O1xuICB9IHJldHVybiBuZXcgUmVzdWx0KGZhbHNlKTtcbn07XG4iLCJ2YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZXJhdG9yKSB7XG4gIHZhciByZXR1cm5NZXRob2QgPSBpdGVyYXRvclsncmV0dXJuJ107XG4gIGlmIChyZXR1cm5NZXRob2QgIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBhbk9iamVjdChyZXR1cm5NZXRob2QuY2FsbChpdGVyYXRvcikpLnZhbHVlO1xuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1wcm90b3R5cGUtb2YnKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xuXG52YXIgSVRFUkFUT1IgPSB3ZWxsS25vd25TeW1ib2woJ2l0ZXJhdG9yJyk7XG52YXIgQlVHR1lfU0FGQVJJX0lURVJBVE9SUyA9IGZhbHNlO1xuXG52YXIgcmV0dXJuVGhpcyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH07XG5cbi8vIGAlSXRlcmF0b3JQcm90b3R5cGUlYCBvYmplY3Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJWl0ZXJhdG9ycHJvdG90eXBlJS1vYmplY3RcbnZhciBJdGVyYXRvclByb3RvdHlwZSwgUHJvdG90eXBlT2ZBcnJheUl0ZXJhdG9yUHJvdG90eXBlLCBhcnJheUl0ZXJhdG9yO1xuXG5pZiAoW10ua2V5cykge1xuICBhcnJheUl0ZXJhdG9yID0gW10ua2V5cygpO1xuICAvLyBTYWZhcmkgOCBoYXMgYnVnZ3kgaXRlcmF0b3JzIHcvbyBgbmV4dGBcbiAgaWYgKCEoJ25leHQnIGluIGFycmF5SXRlcmF0b3IpKSBCVUdHWV9TQUZBUklfSVRFUkFUT1JTID0gdHJ1ZTtcbiAgZWxzZSB7XG4gICAgUHJvdG90eXBlT2ZBcnJheUl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG90eXBlT2YoZ2V0UHJvdG90eXBlT2YoYXJyYXlJdGVyYXRvcikpO1xuICAgIGlmIChQcm90b3R5cGVPZkFycmF5SXRlcmF0b3JQcm90b3R5cGUgIT09IE9iamVjdC5wcm90b3R5cGUpIEl0ZXJhdG9yUHJvdG90eXBlID0gUHJvdG90eXBlT2ZBcnJheUl0ZXJhdG9yUHJvdG90eXBlO1xuICB9XG59XG5cbnZhciBORVdfSVRFUkFUT1JfUFJPVE9UWVBFID0gSXRlcmF0b3JQcm90b3R5cGUgPT0gdW5kZWZpbmVkIHx8IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgdmFyIHRlc3QgPSB7fTtcbiAgLy8gRkY0NC0gbGVnYWN5IGl0ZXJhdG9ycyBjYXNlXG4gIHJldHVybiBJdGVyYXRvclByb3RvdHlwZVtJVEVSQVRPUl0uY2FsbCh0ZXN0KSAhPT0gdGVzdDtcbn0pO1xuXG5pZiAoTkVXX0lURVJBVE9SX1BST1RPVFlQRSkgSXRlcmF0b3JQcm90b3R5cGUgPSB7fTtcblxuLy8gMjUuMS4yLjEuMSAlSXRlcmF0b3JQcm90b3R5cGUlW0BAaXRlcmF0b3JdKClcbmlmICgoIUlTX1BVUkUgfHwgTkVXX0lURVJBVE9SX1BST1RPVFlQRSkgJiYgIWhhcyhJdGVyYXRvclByb3RvdHlwZSwgSVRFUkFUT1IpKSB7XG4gIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShJdGVyYXRvclByb3RvdHlwZSwgSVRFUkFUT1IsIHJldHVyblRoaXMpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgSXRlcmF0b3JQcm90b3R5cGU6IEl0ZXJhdG9yUHJvdG90eXBlLFxuICBCVUdHWV9TQUZBUklfSVRFUkFUT1JTOiBCVUdHWV9TQUZBUklfSVRFUkFUT1JTXG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7fTtcbiIsInZhciBuYXRpdmVFeHBtMSA9IE1hdGguZXhwbTE7XG52YXIgZXhwID0gTWF0aC5leHA7XG5cbi8vIGBNYXRoLmV4cG0xYCBtZXRob2QgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWF0aC5leHBtMVxubW9kdWxlLmV4cG9ydHMgPSAoIW5hdGl2ZUV4cG0xXG4gIC8vIE9sZCBGRiBidWdcbiAgfHwgbmF0aXZlRXhwbTEoMTApID4gMjIwMjUuNDY1Nzk0ODA2NzE5IHx8IG5hdGl2ZUV4cG0xKDEwKSA8IDIyMDI1LjQ2NTc5NDgwNjcxNjUxNjhcbiAgLy8gVG9yIEJyb3dzZXIgYnVnXG4gIHx8IG5hdGl2ZUV4cG0xKC0yZS0xNykgIT0gLTJlLTE3XG4pID8gZnVuY3Rpb24gZXhwbTEoeCkge1xuICByZXR1cm4gKHggPSAreCkgPT0gMCA/IHggOiB4ID4gLTFlLTYgJiYgeCA8IDFlLTYgPyB4ICsgeCAqIHggLyAyIDogZXhwKHgpIC0gMTtcbn0gOiBuYXRpdmVFeHBtMTtcbiIsInZhciBzaWduID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL21hdGgtc2lnbicpO1xuXG52YXIgYWJzID0gTWF0aC5hYnM7XG52YXIgcG93ID0gTWF0aC5wb3c7XG52YXIgRVBTSUxPTiA9IHBvdygyLCAtNTIpO1xudmFyIEVQU0lMT04zMiA9IHBvdygyLCAtMjMpO1xudmFyIE1BWDMyID0gcG93KDIsIDEyNykgKiAoMiAtIEVQU0lMT04zMik7XG52YXIgTUlOMzIgPSBwb3coMiwgLTEyNik7XG5cbnZhciByb3VuZFRpZXNUb0V2ZW4gPSBmdW5jdGlvbiAobikge1xuICByZXR1cm4gbiArIDEgLyBFUFNJTE9OIC0gMSAvIEVQU0lMT047XG59O1xuXG4vLyBgTWF0aC5mcm91bmRgIG1ldGhvZCBpbXBsZW1lbnRhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1tYXRoLmZyb3VuZFxubW9kdWxlLmV4cG9ydHMgPSBNYXRoLmZyb3VuZCB8fCBmdW5jdGlvbiBmcm91bmQoeCkge1xuICB2YXIgJGFicyA9IGFicyh4KTtcbiAgdmFyICRzaWduID0gc2lnbih4KTtcbiAgdmFyIGEsIHJlc3VsdDtcbiAgaWYgKCRhYnMgPCBNSU4zMikgcmV0dXJuICRzaWduICogcm91bmRUaWVzVG9FdmVuKCRhYnMgLyBNSU4zMiAvIEVQU0lMT04zMikgKiBNSU4zMiAqIEVQU0lMT04zMjtcbiAgYSA9ICgxICsgRVBTSUxPTjMyIC8gRVBTSUxPTikgKiAkYWJzO1xuICByZXN1bHQgPSBhIC0gKGEgLSAkYWJzKTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZSAtLSBOYU4gY2hlY2tcbiAgaWYgKHJlc3VsdCA+IE1BWDMyIHx8IHJlc3VsdCAhPSByZXN1bHQpIHJldHVybiAkc2lnbiAqIEluZmluaXR5O1xuICByZXR1cm4gJHNpZ24gKiByZXN1bHQ7XG59O1xuIiwidmFyIGxvZyA9IE1hdGgubG9nO1xuXG4vLyBgTWF0aC5sb2cxcGAgbWV0aG9kIGltcGxlbWVudGF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW1hdGgubG9nMXBcbm1vZHVsZS5leHBvcnRzID0gTWF0aC5sb2cxcCB8fCBmdW5jdGlvbiBsb2cxcCh4KSB7XG4gIHJldHVybiAoeCA9ICt4KSA+IC0xZS04ICYmIHggPCAxZS04ID8geCAtIHggKiB4IC8gMiA6IGxvZygxICsgeCk7XG59O1xuIiwiLy8gYE1hdGguc2lnbmAgbWV0aG9kIGltcGxlbWVudGF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW1hdGguc2lnblxubW9kdWxlLmV4cG9ydHMgPSBNYXRoLnNpZ24gfHwgZnVuY3Rpb24gc2lnbih4KSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmUgLS0gTmFOIGNoZWNrXG4gIHJldHVybiAoeCA9ICt4KSA9PSAwIHx8IHggIT0geCA/IHggOiB4IDwgMCA/IC0xIDogMTtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJykuZjtcbnZhciBtYWNyb3Rhc2sgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdGFzaycpLnNldDtcbnZhciBJU19JT1MgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLWlzLWlvcycpO1xudmFyIElTX1dFQk9TX1dFQktJVCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtaXMtd2Vib3Mtd2Via2l0Jyk7XG52YXIgSVNfTk9ERSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtaXMtbm9kZScpO1xuXG52YXIgTXV0YXRpb25PYnNlcnZlciA9IGdsb2JhbC5NdXRhdGlvbk9ic2VydmVyIHx8IGdsb2JhbC5XZWJLaXRNdXRhdGlvbk9ic2VydmVyO1xudmFyIGRvY3VtZW50ID0gZ2xvYmFsLmRvY3VtZW50O1xudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcbnZhciBQcm9taXNlID0gZ2xvYmFsLlByb21pc2U7XG4vLyBOb2RlLmpzIDExIHNob3dzIEV4cGVyaW1lbnRhbFdhcm5pbmcgb24gZ2V0dGluZyBgcXVldWVNaWNyb3Rhc2tgXG52YXIgcXVldWVNaWNyb3Rhc2tEZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGdsb2JhbCwgJ3F1ZXVlTWljcm90YXNrJyk7XG52YXIgcXVldWVNaWNyb3Rhc2sgPSBxdWV1ZU1pY3JvdGFza0Rlc2NyaXB0b3IgJiYgcXVldWVNaWNyb3Rhc2tEZXNjcmlwdG9yLnZhbHVlO1xuXG52YXIgZmx1c2gsIGhlYWQsIGxhc3QsIG5vdGlmeSwgdG9nZ2xlLCBub2RlLCBwcm9taXNlLCB0aGVuO1xuXG4vLyBtb2Rlcm4gZW5naW5lcyBoYXZlIHF1ZXVlTWljcm90YXNrIG1ldGhvZFxuaWYgKCFxdWV1ZU1pY3JvdGFzaykge1xuICBmbHVzaCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcGFyZW50LCBmbjtcbiAgICBpZiAoSVNfTk9ERSAmJiAocGFyZW50ID0gcHJvY2Vzcy5kb21haW4pKSBwYXJlbnQuZXhpdCgpO1xuICAgIHdoaWxlIChoZWFkKSB7XG4gICAgICBmbiA9IGhlYWQuZm47XG4gICAgICBoZWFkID0gaGVhZC5uZXh0O1xuICAgICAgdHJ5IHtcbiAgICAgICAgZm4oKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGlmIChoZWFkKSBub3RpZnkoKTtcbiAgICAgICAgZWxzZSBsYXN0ID0gdW5kZWZpbmVkO1xuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgIH1cbiAgICB9IGxhc3QgPSB1bmRlZmluZWQ7XG4gICAgaWYgKHBhcmVudCkgcGFyZW50LmVudGVyKCk7XG4gIH07XG5cbiAgLy8gYnJvd3NlcnMgd2l0aCBNdXRhdGlvbk9ic2VydmVyLCBleGNlcHQgaU9TIC0gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzMzOVxuICAvLyBhbHNvIGV4Y2VwdCBXZWJPUyBXZWJraXQgaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzg5OFxuICBpZiAoIUlTX0lPUyAmJiAhSVNfTk9ERSAmJiAhSVNfV0VCT1NfV0VCS0lUICYmIE11dGF0aW9uT2JzZXJ2ZXIgJiYgZG9jdW1lbnQpIHtcbiAgICB0b2dnbGUgPSB0cnVlO1xuICAgIG5vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgnJyk7XG4gICAgbmV3IE11dGF0aW9uT2JzZXJ2ZXIoZmx1c2gpLm9ic2VydmUobm9kZSwgeyBjaGFyYWN0ZXJEYXRhOiB0cnVlIH0pO1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIG5vZGUuZGF0YSA9IHRvZ2dsZSA9ICF0b2dnbGU7XG4gICAgfTtcbiAgLy8gZW52aXJvbm1lbnRzIHdpdGggbWF5YmUgbm9uLWNvbXBsZXRlbHkgY29ycmVjdCwgYnV0IGV4aXN0ZW50IFByb21pc2VcbiAgfSBlbHNlIGlmIChQcm9taXNlICYmIFByb21pc2UucmVzb2x2ZSkge1xuICAgIC8vIFByb21pc2UucmVzb2x2ZSB3aXRob3V0IGFuIGFyZ3VtZW50IHRocm93cyBhbiBlcnJvciBpbiBMRyBXZWJPUyAyXG4gICAgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZSh1bmRlZmluZWQpO1xuICAgIHRoZW4gPSBwcm9taXNlLnRoZW47XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgdGhlbi5jYWxsKHByb21pc2UsIGZsdXNoKTtcbiAgICB9O1xuICAvLyBOb2RlLmpzIHdpdGhvdXQgcHJvbWlzZXNcbiAgfSBlbHNlIGlmIChJU19OT0RFKSB7XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgcHJvY2Vzcy5uZXh0VGljayhmbHVzaCk7XG4gICAgfTtcbiAgLy8gZm9yIG90aGVyIGVudmlyb25tZW50cyAtIG1hY3JvdGFzayBiYXNlZCBvbjpcbiAgLy8gLSBzZXRJbW1lZGlhdGVcbiAgLy8gLSBNZXNzYWdlQ2hhbm5lbFxuICAvLyAtIHdpbmRvdy5wb3N0TWVzc2FnXG4gIC8vIC0gb25yZWFkeXN0YXRlY2hhbmdlXG4gIC8vIC0gc2V0VGltZW91dFxuICB9IGVsc2Uge1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIHN0cmFuZ2UgSUUgKyB3ZWJwYWNrIGRldiBzZXJ2ZXIgYnVnIC0gdXNlIC5jYWxsKGdsb2JhbClcbiAgICAgIG1hY3JvdGFzay5jYWxsKGdsb2JhbCwgZmx1c2gpO1xuICAgIH07XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBxdWV1ZU1pY3JvdGFzayB8fCBmdW5jdGlvbiAoZm4pIHtcbiAgdmFyIHRhc2sgPSB7IGZuOiBmbiwgbmV4dDogdW5kZWZpbmVkIH07XG4gIGlmIChsYXN0KSBsYXN0Lm5leHQgPSB0YXNrO1xuICBpZiAoIWhlYWQpIHtcbiAgICBoZWFkID0gdGFzaztcbiAgICBub3RpZnkoKTtcbiAgfSBsYXN0ID0gdGFzaztcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGdsb2JhbC5Qcm9taXNlO1xuIiwidmFyIElTX05PREUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLWlzLW5vZGUnKTtcbnZhciBWOF9WRVJTSU9OID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS12OC12ZXJzaW9uJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAhIU9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgJiYgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLyogZ2xvYmFsIFN5bWJvbCAtLSByZXF1aXJlZCBmb3IgdGVzdGluZyAqL1xuICByZXR1cm4gIVN5bWJvbC5zaGFtICYmXG4gICAgLy8gQ2hyb21lIDM4IFN5bWJvbCBoYXMgaW5jb3JyZWN0IHRvU3RyaW5nIGNvbnZlcnNpb25cbiAgICAvLyBDaHJvbWUgMzgtNDAgc3ltYm9scyBhcmUgbm90IGluaGVyaXRlZCBmcm9tIERPTSBjb2xsZWN0aW9ucyBwcm90b3R5cGVzIHRvIGluc3RhbmNlc1xuICAgIChJU19OT0RFID8gVjhfVkVSU0lPTiA9PT0gMzggOiBWOF9WRVJTSU9OID4gMzcgJiYgVjhfVkVSU0lPTiA8IDQxKTtcbn0pO1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG5cbnZhciBJVEVSQVRPUiA9IHdlbGxLbm93blN5bWJvbCgnaXRlcmF0b3InKTtcblxubW9kdWxlLmV4cG9ydHMgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICB2YXIgdXJsID0gbmV3IFVSTCgnYj9hPTEmYj0yJmM9MycsICdodHRwOi8vYScpO1xuICB2YXIgc2VhcmNoUGFyYW1zID0gdXJsLnNlYXJjaFBhcmFtcztcbiAgdmFyIHJlc3VsdCA9ICcnO1xuICB1cmwucGF0aG5hbWUgPSAnYyUyMGQnO1xuICBzZWFyY2hQYXJhbXMuZm9yRWFjaChmdW5jdGlvbiAodmFsdWUsIGtleSkge1xuICAgIHNlYXJjaFBhcmFtc1snZGVsZXRlJ10oJ2InKTtcbiAgICByZXN1bHQgKz0ga2V5ICsgdmFsdWU7XG4gIH0pO1xuICByZXR1cm4gKElTX1BVUkUgJiYgIXVybC50b0pTT04pXG4gICAgfHwgIXNlYXJjaFBhcmFtcy5zb3J0XG4gICAgfHwgdXJsLmhyZWYgIT09ICdodHRwOi8vYS9jJTIwZD9hPTEmYz0zJ1xuICAgIHx8IHNlYXJjaFBhcmFtcy5nZXQoJ2MnKSAhPT0gJzMnXG4gICAgfHwgU3RyaW5nKG5ldyBVUkxTZWFyY2hQYXJhbXMoJz9hPTEnKSkgIT09ICdhPTEnXG4gICAgfHwgIXNlYXJjaFBhcmFtc1tJVEVSQVRPUl1cbiAgICAvLyB0aHJvd3MgaW4gRWRnZVxuICAgIHx8IG5ldyBVUkwoJ2h0dHBzOi8vYUBiJykudXNlcm5hbWUgIT09ICdhJ1xuICAgIHx8IG5ldyBVUkxTZWFyY2hQYXJhbXMobmV3IFVSTFNlYXJjaFBhcmFtcygnYT1iJykpLmdldCgnYScpICE9PSAnYidcbiAgICAvLyBub3QgcHVueWNvZGVkIGluIEVkZ2VcbiAgICB8fCBuZXcgVVJMKCdodHRwOi8v0YLQtdGB0YInKS5ob3N0ICE9PSAneG4tLWUxYXliYydcbiAgICAvLyBub3QgZXNjYXBlZCBpbiBDaHJvbWUgNjItXG4gICAgfHwgbmV3IFVSTCgnaHR0cDovL2Ej0LEnKS5oYXNoICE9PSAnIyVEMCVCMSdcbiAgICAvLyBmYWlscyBpbiBDaHJvbWUgNjYtXG4gICAgfHwgcmVzdWx0ICE9PSAnYTFjMydcbiAgICAvLyB0aHJvd3MgaW4gU2FmYXJpXG4gICAgfHwgbmV3IFVSTCgnaHR0cDovL3gnLCB1bmRlZmluZWQpLmhvc3QgIT09ICd4Jztcbn0pO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBpbnNwZWN0U291cmNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2luc3BlY3Qtc291cmNlJyk7XG5cbnZhciBXZWFrTWFwID0gZ2xvYmFsLldlYWtNYXA7XG5cbm1vZHVsZS5leHBvcnRzID0gdHlwZW9mIFdlYWtNYXAgPT09ICdmdW5jdGlvbicgJiYgL25hdGl2ZSBjb2RlLy50ZXN0KGluc3BlY3RTb3VyY2UoV2Vha01hcCkpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWZ1bmN0aW9uJyk7XG5cbnZhciBQcm9taXNlQ2FwYWJpbGl0eSA9IGZ1bmN0aW9uIChDKSB7XG4gIHZhciByZXNvbHZlLCByZWplY3Q7XG4gIHRoaXMucHJvbWlzZSA9IG5ldyBDKGZ1bmN0aW9uICgkJHJlc29sdmUsICQkcmVqZWN0KSB7XG4gICAgaWYgKHJlc29sdmUgIT09IHVuZGVmaW5lZCB8fCByZWplY3QgIT09IHVuZGVmaW5lZCkgdGhyb3cgVHlwZUVycm9yKCdCYWQgUHJvbWlzZSBjb25zdHJ1Y3RvcicpO1xuICAgIHJlc29sdmUgPSAkJHJlc29sdmU7XG4gICAgcmVqZWN0ID0gJCRyZWplY3Q7XG4gIH0pO1xuICB0aGlzLnJlc29sdmUgPSBhRnVuY3Rpb24ocmVzb2x2ZSk7XG4gIHRoaXMucmVqZWN0ID0gYUZ1bmN0aW9uKHJlamVjdCk7XG59O1xuXG4vLyAyNS40LjEuNSBOZXdQcm9taXNlQ2FwYWJpbGl0eShDKVxubW9kdWxlLmV4cG9ydHMuZiA9IGZ1bmN0aW9uIChDKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZUNhcGFiaWxpdHkoQyk7XG59O1xuIiwidmFyIGlzUmVnRXhwID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXJlZ2V4cCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXNSZWdFeHAoaXQpKSB7XG4gICAgdGhyb3cgVHlwZUVycm9yKFwiVGhlIG1ldGhvZCBkb2Vzbid0IGFjY2VwdCByZWd1bGFyIGV4cHJlc3Npb25zXCIpO1xuICB9IHJldHVybiBpdDtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xuXG52YXIgZ2xvYmFsSXNGaW5pdGUgPSBnbG9iYWwuaXNGaW5pdGU7XG5cbi8vIGBOdW1iZXIuaXNGaW5pdGVgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1udW1iZXIuaXNmaW5pdGVcbm1vZHVsZS5leHBvcnRzID0gTnVtYmVyLmlzRmluaXRlIHx8IGZ1bmN0aW9uIGlzRmluaXRlKGl0KSB7XG4gIHJldHVybiB0eXBlb2YgaXQgPT0gJ251bWJlcicgJiYgZ2xvYmFsSXNGaW5pdGUoaXQpO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgdHJpbSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctdHJpbScpLnRyaW07XG52YXIgd2hpdGVzcGFjZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2hpdGVzcGFjZXMnKTtcblxudmFyICRwYXJzZUZsb2F0ID0gZ2xvYmFsLnBhcnNlRmxvYXQ7XG52YXIgRk9SQ0VEID0gMSAvICRwYXJzZUZsb2F0KHdoaXRlc3BhY2VzICsgJy0wJykgIT09IC1JbmZpbml0eTtcblxuLy8gYHBhcnNlRmxvYXRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1wYXJzZWZsb2F0LXN0cmluZ1xubW9kdWxlLmV4cG9ydHMgPSBGT1JDRUQgPyBmdW5jdGlvbiBwYXJzZUZsb2F0KHN0cmluZykge1xuICB2YXIgdHJpbW1lZFN0cmluZyA9IHRyaW0oU3RyaW5nKHN0cmluZykpO1xuICB2YXIgcmVzdWx0ID0gJHBhcnNlRmxvYXQodHJpbW1lZFN0cmluZyk7XG4gIHJldHVybiByZXN1bHQgPT09IDAgJiYgdHJpbW1lZFN0cmluZy5jaGFyQXQoMCkgPT0gJy0nID8gLTAgOiByZXN1bHQ7XG59IDogJHBhcnNlRmxvYXQ7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHRyaW0gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLXRyaW0nKS50cmltO1xudmFyIHdoaXRlc3BhY2VzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3doaXRlc3BhY2VzJyk7XG5cbnZhciAkcGFyc2VJbnQgPSBnbG9iYWwucGFyc2VJbnQ7XG52YXIgaGV4ID0gL15bKy1dPzBbWHhdLztcbnZhciBGT1JDRUQgPSAkcGFyc2VJbnQod2hpdGVzcGFjZXMgKyAnMDgnKSAhPT0gOCB8fCAkcGFyc2VJbnQod2hpdGVzcGFjZXMgKyAnMHgxNicpICE9PSAyMjtcblxuLy8gYHBhcnNlSW50YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcGFyc2VpbnQtc3RyaW5nLXJhZGl4XG5tb2R1bGUuZXhwb3J0cyA9IEZPUkNFRCA/IGZ1bmN0aW9uIHBhcnNlSW50KHN0cmluZywgcmFkaXgpIHtcbiAgdmFyIFMgPSB0cmltKFN0cmluZyhzdHJpbmcpKTtcbiAgcmV0dXJuICRwYXJzZUludChTLCAocmFkaXggPj4+IDApIHx8IChoZXgudGVzdChTKSA/IDE2IDogMTApKTtcbn0gOiAkcGFyc2VJbnQ7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIG9iamVjdEtleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWtleXMnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktc3ltYm9scycpO1xudmFyIHByb3BlcnR5SXNFbnVtZXJhYmxlTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1wcm9wZXJ0eS1pcy1lbnVtZXJhYmxlJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbmRleGVkLW9iamVjdCcpO1xuXG52YXIgbmF0aXZlQXNzaWduID0gT2JqZWN0LmFzc2lnbjtcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcblxuLy8gYE9iamVjdC5hc3NpZ25gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuYXNzaWduXG5tb2R1bGUuZXhwb3J0cyA9ICFuYXRpdmVBc3NpZ24gfHwgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBzaG91bGQgaGF2ZSBjb3JyZWN0IG9yZGVyIG9mIG9wZXJhdGlvbnMgKEVkZ2UgYnVnKVxuICBpZiAoREVTQ1JJUFRPUlMgJiYgbmF0aXZlQXNzaWduKHsgYjogMSB9LCBuYXRpdmVBc3NpZ24oZGVmaW5lUHJvcGVydHkoe30sICdhJywge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICBkZWZpbmVQcm9wZXJ0eSh0aGlzLCAnYicsIHtcbiAgICAgICAgdmFsdWU6IDMsXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlXG4gICAgICB9KTtcbiAgICB9XG4gIH0pLCB7IGI6IDIgfSkpLmIgIT09IDEpIHJldHVybiB0cnVlO1xuICAvLyBzaG91bGQgd29yayB3aXRoIHN5bWJvbHMgYW5kIHNob3VsZCBoYXZlIGRldGVybWluaXN0aWMgcHJvcGVydHkgb3JkZXIgKFY4IGJ1ZylcbiAgdmFyIEEgPSB7fTtcbiAgdmFyIEIgPSB7fTtcbiAgLyogZ2xvYmFsIFN5bWJvbCAtLSByZXF1aXJlZCBmb3IgdGVzdGluZyAqL1xuICB2YXIgc3ltYm9sID0gU3ltYm9sKCk7XG4gIHZhciBhbHBoYWJldCA9ICdhYmNkZWZnaGlqa2xtbm9wcXJzdCc7XG4gIEFbc3ltYm9sXSA9IDc7XG4gIGFscGhhYmV0LnNwbGl0KCcnKS5mb3JFYWNoKGZ1bmN0aW9uIChjaHIpIHsgQltjaHJdID0gY2hyOyB9KTtcbiAgcmV0dXJuIG5hdGl2ZUFzc2lnbih7fSwgQSlbc3ltYm9sXSAhPSA3IHx8IG9iamVjdEtleXMobmF0aXZlQXNzaWduKHt9LCBCKSkuam9pbignJykgIT0gYWxwaGFiZXQ7XG59KSA/IGZ1bmN0aW9uIGFzc2lnbih0YXJnZXQsIHNvdXJjZSkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzIC0tIHJlcXVpcmVkIGZvciBgLmxlbmd0aGBcbiAgdmFyIFQgPSB0b09iamVjdCh0YXJnZXQpO1xuICB2YXIgYXJndW1lbnRzTGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgdmFyIGluZGV4ID0gMTtcbiAgdmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZS5mO1xuICB2YXIgcHJvcGVydHlJc0VudW1lcmFibGUgPSBwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZS5mO1xuICB3aGlsZSAoYXJndW1lbnRzTGVuZ3RoID4gaW5kZXgpIHtcbiAgICB2YXIgUyA9IEluZGV4ZWRPYmplY3QoYXJndW1lbnRzW2luZGV4KytdKTtcbiAgICB2YXIga2V5cyA9IGdldE93blByb3BlcnR5U3ltYm9scyA/IG9iamVjdEtleXMoUykuY29uY2F0KGdldE93blByb3BlcnR5U3ltYm9scyhTKSkgOiBvYmplY3RLZXlzKFMpO1xuICAgIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgICB2YXIgaiA9IDA7XG4gICAgdmFyIGtleTtcbiAgICB3aGlsZSAobGVuZ3RoID4gaikge1xuICAgICAga2V5ID0ga2V5c1tqKytdO1xuICAgICAgaWYgKCFERVNDUklQVE9SUyB8fCBwcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKFMsIGtleSkpIFRba2V5XSA9IFNba2V5XTtcbiAgICB9XG4gIH0gcmV0dXJuIFQ7XG59IDogbmF0aXZlQXNzaWduO1xuIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGRlZmluZVByb3BlcnRpZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0aWVzJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW51bS1idWcta2V5cycpO1xudmFyIGhpZGRlbktleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGlkZGVuLWtleXMnKTtcbnZhciBodG1sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2h0bWwnKTtcbnZhciBkb2N1bWVudENyZWF0ZUVsZW1lbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZG9jdW1lbnQtY3JlYXRlLWVsZW1lbnQnKTtcbnZhciBzaGFyZWRLZXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkLWtleScpO1xuXG52YXIgR1QgPSAnPic7XG52YXIgTFQgPSAnPCc7XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG52YXIgU0NSSVBUID0gJ3NjcmlwdCc7XG52YXIgSUVfUFJPVE8gPSBzaGFyZWRLZXkoJ0lFX1BST1RPJyk7XG5cbnZhciBFbXB0eUNvbnN0cnVjdG9yID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9O1xuXG52YXIgc2NyaXB0VGFnID0gZnVuY3Rpb24gKGNvbnRlbnQpIHtcbiAgcmV0dXJuIExUICsgU0NSSVBUICsgR1QgKyBjb250ZW50ICsgTFQgKyAnLycgKyBTQ1JJUFQgKyBHVDtcbn07XG5cbi8vIENyZWF0ZSBvYmplY3Qgd2l0aCBmYWtlIGBudWxsYCBwcm90b3R5cGU6IHVzZSBBY3RpdmVYIE9iamVjdCB3aXRoIGNsZWFyZWQgcHJvdG90eXBlXG52YXIgTnVsbFByb3RvT2JqZWN0VmlhQWN0aXZlWCA9IGZ1bmN0aW9uIChhY3RpdmVYRG9jdW1lbnQpIHtcbiAgYWN0aXZlWERvY3VtZW50LndyaXRlKHNjcmlwdFRhZygnJykpO1xuICBhY3RpdmVYRG9jdW1lbnQuY2xvc2UoKTtcbiAgdmFyIHRlbXAgPSBhY3RpdmVYRG9jdW1lbnQucGFyZW50V2luZG93Lk9iamVjdDtcbiAgYWN0aXZlWERvY3VtZW50ID0gbnVsbDsgLy8gYXZvaWQgbWVtb3J5IGxlYWtcbiAgcmV0dXJuIHRlbXA7XG59O1xuXG4vLyBDcmVhdGUgb2JqZWN0IHdpdGggZmFrZSBgbnVsbGAgcHJvdG90eXBlOiB1c2UgaWZyYW1lIE9iamVjdCB3aXRoIGNsZWFyZWQgcHJvdG90eXBlXG52YXIgTnVsbFByb3RvT2JqZWN0VmlhSUZyYW1lID0gZnVuY3Rpb24gKCkge1xuICAvLyBUaHJhc2gsIHdhc3RlIGFuZCBzb2RvbXk6IElFIEdDIGJ1Z1xuICB2YXIgaWZyYW1lID0gZG9jdW1lbnRDcmVhdGVFbGVtZW50KCdpZnJhbWUnKTtcbiAgdmFyIEpTID0gJ2phdmEnICsgU0NSSVBUICsgJzonO1xuICB2YXIgaWZyYW1lRG9jdW1lbnQ7XG4gIGlmcmFtZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICBodG1sLmFwcGVuZENoaWxkKGlmcmFtZSk7XG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy80NzVcbiAgaWZyYW1lLnNyYyA9IFN0cmluZyhKUyk7XG4gIGlmcmFtZURvY3VtZW50ID0gaWZyYW1lLmNvbnRlbnRXaW5kb3cuZG9jdW1lbnQ7XG4gIGlmcmFtZURvY3VtZW50Lm9wZW4oKTtcbiAgaWZyYW1lRG9jdW1lbnQud3JpdGUoc2NyaXB0VGFnKCdkb2N1bWVudC5GPU9iamVjdCcpKTtcbiAgaWZyYW1lRG9jdW1lbnQuY2xvc2UoKTtcbiAgcmV0dXJuIGlmcmFtZURvY3VtZW50LkY7XG59O1xuXG4vLyBDaGVjayBmb3IgZG9jdW1lbnQuZG9tYWluIGFuZCBhY3RpdmUgeCBzdXBwb3J0XG4vLyBObyBuZWVkIHRvIHVzZSBhY3RpdmUgeCBhcHByb2FjaCB3aGVuIGRvY3VtZW50LmRvbWFpbiBpcyBub3Qgc2V0XG4vLyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2VzLXNoaW1zL2VzNS1zaGltL2lzc3Vlcy8xNTBcbi8vIHZhcmlhdGlvbiBvZiBodHRwczovL2dpdGh1Yi5jb20va2l0Y2FtYnJpZGdlL2VzNS1zaGltL2NvbW1pdC80ZjczOGFjMDY2MzQ2XG4vLyBhdm9pZCBJRSBHQyBidWdcbnZhciBhY3RpdmVYRG9jdW1lbnQ7XG52YXIgTnVsbFByb3RvT2JqZWN0ID0gZnVuY3Rpb24gKCkge1xuICB0cnkge1xuICAgIC8qIGdsb2JhbCBBY3RpdmVYT2JqZWN0IC0tIG9sZCBJRSAqL1xuICAgIGFjdGl2ZVhEb2N1bWVudCA9IGRvY3VtZW50LmRvbWFpbiAmJiBuZXcgQWN0aXZlWE9iamVjdCgnaHRtbGZpbGUnKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogaWdub3JlICovIH1cbiAgTnVsbFByb3RvT2JqZWN0ID0gYWN0aXZlWERvY3VtZW50ID8gTnVsbFByb3RvT2JqZWN0VmlhQWN0aXZlWChhY3RpdmVYRG9jdW1lbnQpIDogTnVsbFByb3RvT2JqZWN0VmlhSUZyYW1lKCk7XG4gIHZhciBsZW5ndGggPSBlbnVtQnVnS2V5cy5sZW5ndGg7XG4gIHdoaWxlIChsZW5ndGgtLSkgZGVsZXRlIE51bGxQcm90b09iamVjdFtQUk9UT1RZUEVdW2VudW1CdWdLZXlzW2xlbmd0aF1dO1xuICByZXR1cm4gTnVsbFByb3RvT2JqZWN0KCk7XG59O1xuXG5oaWRkZW5LZXlzW0lFX1BST1RPXSA9IHRydWU7XG5cbi8vIGBPYmplY3QuY3JlYXRlYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmNyZWF0ZVxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuY3JlYXRlIHx8IGZ1bmN0aW9uIGNyZWF0ZShPLCBQcm9wZXJ0aWVzKSB7XG4gIHZhciByZXN1bHQ7XG4gIGlmIChPICE9PSBudWxsKSB7XG4gICAgRW1wdHlDb25zdHJ1Y3RvcltQUk9UT1RZUEVdID0gYW5PYmplY3QoTyk7XG4gICAgcmVzdWx0ID0gbmV3IEVtcHR5Q29uc3RydWN0b3IoKTtcbiAgICBFbXB0eUNvbnN0cnVjdG9yW1BST1RPVFlQRV0gPSBudWxsO1xuICAgIC8vIGFkZCBcIl9fcHJvdG9fX1wiIGZvciBPYmplY3QuZ2V0UHJvdG90eXBlT2YgcG9seWZpbGxcbiAgICByZXN1bHRbSUVfUFJPVE9dID0gTztcbiAgfSBlbHNlIHJlc3VsdCA9IE51bGxQcm90b09iamVjdCgpO1xuICByZXR1cm4gUHJvcGVydGllcyA9PT0gdW5kZWZpbmVkID8gcmVzdWx0IDogZGVmaW5lUHJvcGVydGllcyhyZXN1bHQsIFByb3BlcnRpZXMpO1xufTtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBvYmplY3RLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1rZXlzJyk7XG5cbi8vIGBPYmplY3QuZGVmaW5lUHJvcGVydGllc2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5kZWZpbmVwcm9wZXJ0aWVzXG5tb2R1bGUuZXhwb3J0cyA9IERFU0NSSVBUT1JTID8gT2JqZWN0LmRlZmluZVByb3BlcnRpZXMgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIHZhciBrZXlzID0gb2JqZWN0S2V5cyhQcm9wZXJ0aWVzKTtcbiAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIga2V5O1xuICB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIGRlZmluZVByb3BlcnR5TW9kdWxlLmYoTywga2V5ID0ga2V5c1tpbmRleCsrXSwgUHJvcGVydGllc1trZXldKTtcbiAgcmV0dXJuIE87XG59O1xuIiwidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgSUU4X0RPTV9ERUZJTkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaWU4LWRvbS1kZWZpbmUnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1wcmltaXRpdmUnKTtcblxudmFyIG5hdGl2ZURlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xuXG4vLyBgT2JqZWN0LmRlZmluZVByb3BlcnR5YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmRlZmluZXByb3BlcnR5XG5leHBvcnRzLmYgPSBERVNDUklQVE9SUyA/IG5hdGl2ZURlZmluZVByb3BlcnR5IDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcykge1xuICBhbk9iamVjdChPKTtcbiAgUCA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICBhbk9iamVjdChBdHRyaWJ1dGVzKTtcbiAgaWYgKElFOF9ET01fREVGSU5FKSB0cnkge1xuICAgIHJldHVybiBuYXRpdmVEZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuICBpZiAoJ2dldCcgaW4gQXR0cmlidXRlcyB8fCAnc2V0JyBpbiBBdHRyaWJ1dGVzKSB0aHJvdyBUeXBlRXJyb3IoJ0FjY2Vzc29ycyBub3Qgc3VwcG9ydGVkJyk7XG4gIGlmICgndmFsdWUnIGluIEF0dHJpYnV0ZXMpIE9bUF0gPSBBdHRyaWJ1dGVzLnZhbHVlO1xuICByZXR1cm4gTztcbn07XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtcHJvcGVydHktaXMtZW51bWVyYWJsZScpO1xudmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvcicpO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXByaW1pdGl2ZScpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciBJRThfRE9NX0RFRklORSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pZTgtZG9tLWRlZmluZScpO1xuXG52YXIgbmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcblxuLy8gYE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yXG5leHBvcnRzLmYgPSBERVNDUklQVE9SUyA/IG5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvciA6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKSB7XG4gIE8gPSB0b0luZGV4ZWRPYmplY3QoTyk7XG4gIFAgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgaWYgKElFOF9ET01fREVGSU5FKSB0cnkge1xuICAgIHJldHVybiBuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cbiAgaWYgKGhhcyhPLCBQKSkgcmV0dXJuIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcighcHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUuZi5jYWxsKE8sIFApLCBPW1BdKTtcbn07XG4iLCJ2YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgbmF0aXZlR2V0T3duUHJvcGVydHlOYW1lcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcycpLmY7XG5cbnZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG52YXIgd2luZG93TmFtZXMgPSB0eXBlb2Ygd2luZG93ID09ICdvYmplY3QnICYmIHdpbmRvdyAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lc1xuICA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHdpbmRvdykgOiBbXTtcblxudmFyIGdldFdpbmRvd05hbWVzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIG5hdGl2ZUdldE93blByb3BlcnR5TmFtZXMoaXQpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiB3aW5kb3dOYW1lcy5zbGljZSgpO1xuICB9XG59O1xuXG4vLyBmYWxsYmFjayBmb3IgSUUxMSBidWdneSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyB3aXRoIGlmcmFtZSBhbmQgd2luZG93XG5tb2R1bGUuZXhwb3J0cy5mID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhpdCkge1xuICByZXR1cm4gd2luZG93TmFtZXMgJiYgdG9TdHJpbmcuY2FsbChpdCkgPT0gJ1tvYmplY3QgV2luZG93XSdcbiAgICA/IGdldFdpbmRvd05hbWVzKGl0KVxuICAgIDogbmF0aXZlR2V0T3duUHJvcGVydHlOYW1lcyh0b0luZGV4ZWRPYmplY3QoaXQpKTtcbn07XG4iLCJ2YXIgaW50ZXJuYWxPYmplY3RLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1rZXlzLWludGVybmFsJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW51bS1idWcta2V5cycpO1xuXG52YXIgaGlkZGVuS2V5cyA9IGVudW1CdWdLZXlzLmNvbmNhdCgnbGVuZ3RoJywgJ3Byb3RvdHlwZScpO1xuXG4vLyBgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0b3ducHJvcGVydHluYW1lc1xuZXhwb3J0cy5mID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgfHwgZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhPKSB7XG4gIHJldHVybiBpbnRlcm5hbE9iamVjdEtleXMoTywgaGlkZGVuS2V5cyk7XG59O1xuIiwiZXhwb3J0cy5mID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbiIsInZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgc2hhcmVkS2V5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1rZXknKTtcbnZhciBDT1JSRUNUX1BST1RPVFlQRV9HRVRURVIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29ycmVjdC1wcm90b3R5cGUtZ2V0dGVyJyk7XG5cbnZhciBJRV9QUk9UTyA9IHNoYXJlZEtleSgnSUVfUFJPVE8nKTtcbnZhciBPYmplY3RQcm90b3R5cGUgPSBPYmplY3QucHJvdG90eXBlO1xuXG4vLyBgT2JqZWN0LmdldFByb3RvdHlwZU9mYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmdldHByb3RvdHlwZW9mXG5tb2R1bGUuZXhwb3J0cyA9IENPUlJFQ1RfUFJPVE9UWVBFX0dFVFRFUiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIChPKSB7XG4gIE8gPSB0b09iamVjdChPKTtcbiAgaWYgKGhhcyhPLCBJRV9QUk9UTykpIHJldHVybiBPW0lFX1BST1RPXTtcbiAgaWYgKHR5cGVvZiBPLmNvbnN0cnVjdG9yID09ICdmdW5jdGlvbicgJiYgTyBpbnN0YW5jZW9mIE8uY29uc3RydWN0b3IpIHtcbiAgICByZXR1cm4gTy5jb25zdHJ1Y3Rvci5wcm90b3R5cGU7XG4gIH0gcmV0dXJuIE8gaW5zdGFuY2VvZiBPYmplY3QgPyBPYmplY3RQcm90b3R5cGUgOiBudWxsO1xufTtcbiIsInZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgaW5kZXhPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pbmNsdWRlcycpLmluZGV4T2Y7XG52YXIgaGlkZGVuS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oaWRkZW4ta2V5cycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmplY3QsIG5hbWVzKSB7XG4gIHZhciBPID0gdG9JbmRleGVkT2JqZWN0KG9iamVjdCk7XG4gIHZhciBpID0gMDtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIga2V5O1xuICBmb3IgKGtleSBpbiBPKSAhaGFzKGhpZGRlbktleXMsIGtleSkgJiYgaGFzKE8sIGtleSkgJiYgcmVzdWx0LnB1c2goa2V5KTtcbiAgLy8gRG9uJ3QgZW51bSBidWcgJiBoaWRkZW4ga2V5c1xuICB3aGlsZSAobmFtZXMubGVuZ3RoID4gaSkgaWYgKGhhcyhPLCBrZXkgPSBuYW1lc1tpKytdKSkge1xuICAgIH5pbmRleE9mKHJlc3VsdCwga2V5KSB8fCByZXN1bHQucHVzaChrZXkpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwidmFyIGludGVybmFsT2JqZWN0S2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qta2V5cy1pbnRlcm5hbCcpO1xudmFyIGVudW1CdWdLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VudW0tYnVnLWtleXMnKTtcblxuLy8gYE9iamVjdC5rZXlzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmtleXNcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmtleXMgfHwgZnVuY3Rpb24ga2V5cyhPKSB7XG4gIHJldHVybiBpbnRlcm5hbE9iamVjdEtleXMoTywgZW51bUJ1Z0tleXMpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBuYXRpdmVQcm9wZXJ0eUlzRW51bWVyYWJsZSA9IHt9LnByb3BlcnR5SXNFbnVtZXJhYmxlO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG5cbi8vIE5hc2hvcm4gfiBKREs4IGJ1Z1xudmFyIE5BU0hPUk5fQlVHID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yICYmICFuYXRpdmVQcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHsgMTogMiB9LCAxKTtcblxuLy8gYE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGVgIG1ldGhvZCBpbXBsZW1lbnRhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QucHJvdG90eXBlLnByb3BlcnR5aXNlbnVtZXJhYmxlXG5leHBvcnRzLmYgPSBOQVNIT1JOX0JVRyA/IGZ1bmN0aW9uIHByb3BlcnR5SXNFbnVtZXJhYmxlKFYpIHtcbiAgdmFyIGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGhpcywgVik7XG4gIHJldHVybiAhIWRlc2NyaXB0b3IgJiYgZGVzY3JpcHRvci5lbnVtZXJhYmxlO1xufSA6IG5hdGl2ZVByb3BlcnR5SXNFbnVtZXJhYmxlO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG4vLyBGb3JjZWQgcmVwbGFjZW1lbnQgb2JqZWN0IHByb3RvdHlwZSBhY2Nlc3NvcnMgbWV0aG9kc1xubW9kdWxlLmV4cG9ydHMgPSBJU19QVVJFIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHZhciBrZXkgPSBNYXRoLnJhbmRvbSgpO1xuICAvLyBJbiBGRiB0aHJvd3Mgb25seSBkZWZpbmUgbWV0aG9kc1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWYsIG5vLXVzZWxlc3MtY2FsbCAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xuICBfX2RlZmluZVNldHRlcl9fLmNhbGwobnVsbCwga2V5LCBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0pO1xuICBkZWxldGUgZ2xvYmFsW2tleV07XG59KTtcbiIsIi8qIGVzbGludC1kaXNhYmxlIG5vLXByb3RvIC0tIHNhZmUgKi9cbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBhUG9zc2libGVQcm90b3R5cGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1wb3NzaWJsZS1wcm90b3R5cGUnKTtcblxuLy8gYE9iamVjdC5zZXRQcm90b3R5cGVPZmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5zZXRwcm90b3R5cGVvZlxuLy8gV29ya3Mgd2l0aCBfX3Byb3RvX18gb25seS4gT2xkIHY4IGNhbid0IHdvcmsgd2l0aCBudWxsIHByb3RvIG9iamVjdHMuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCAoJ19fcHJvdG9fXycgaW4ge30gPyBmdW5jdGlvbiAoKSB7XG4gIHZhciBDT1JSRUNUX1NFVFRFUiA9IGZhbHNlO1xuICB2YXIgdGVzdCA9IHt9O1xuICB2YXIgc2V0dGVyO1xuICB0cnkge1xuICAgIHNldHRlciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoT2JqZWN0LnByb3RvdHlwZSwgJ19fcHJvdG9fXycpLnNldDtcbiAgICBzZXR0ZXIuY2FsbCh0ZXN0LCBbXSk7XG4gICAgQ09SUkVDVF9TRVRURVIgPSB0ZXN0IGluc3RhbmNlb2YgQXJyYXk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cbiAgcmV0dXJuIGZ1bmN0aW9uIHNldFByb3RvdHlwZU9mKE8sIHByb3RvKSB7XG4gICAgYW5PYmplY3QoTyk7XG4gICAgYVBvc3NpYmxlUHJvdG90eXBlKHByb3RvKTtcbiAgICBpZiAoQ09SUkVDVF9TRVRURVIpIHNldHRlci5jYWxsKE8sIHByb3RvKTtcbiAgICBlbHNlIE8uX19wcm90b19fID0gcHJvdG87XG4gICAgcmV0dXJuIE87XG4gIH07XG59KCkgOiB1bmRlZmluZWQpO1xuIiwidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgb2JqZWN0S2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qta2V5cycpO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIHByb3BlcnR5SXNFbnVtZXJhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1wcm9wZXJ0eS1pcy1lbnVtZXJhYmxlJykuZjtcblxuLy8gYE9iamVjdC57IGVudHJpZXMsIHZhbHVlcyB9YCBtZXRob2RzIGltcGxlbWVudGF0aW9uXG52YXIgY3JlYXRlTWV0aG9kID0gZnVuY3Rpb24gKFRPX0VOVFJJRVMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChpdCkge1xuICAgIHZhciBPID0gdG9JbmRleGVkT2JqZWN0KGl0KTtcbiAgICB2YXIga2V5cyA9IG9iamVjdEtleXMoTyk7XG4gICAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgdmFyIGtleTtcbiAgICB3aGlsZSAobGVuZ3RoID4gaSkge1xuICAgICAga2V5ID0ga2V5c1tpKytdO1xuICAgICAgaWYgKCFERVNDUklQVE9SUyB8fCBwcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKE8sIGtleSkpIHtcbiAgICAgICAgcmVzdWx0LnB1c2goVE9fRU5UUklFUyA/IFtrZXksIE9ba2V5XV0gOiBPW2tleV0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIC8vIGBPYmplY3QuZW50cmllc2AgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmVudHJpZXNcbiAgZW50cmllczogY3JlYXRlTWV0aG9kKHRydWUpLFxuICAvLyBgT2JqZWN0LnZhbHVlc2AgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LnZhbHVlc1xuICB2YWx1ZXM6IGNyZWF0ZU1ldGhvZChmYWxzZSlcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgVE9fU1RSSU5HX1RBR19TVVBQT1JUID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZy10YWctc3VwcG9ydCcpO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZicpO1xuXG4vLyBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ2AgbWV0aG9kIGltcGxlbWVudGF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmdcbm1vZHVsZS5leHBvcnRzID0gVE9fU1RSSU5HX1RBR19TVVBQT1JUID8ge30udG9TdHJpbmcgOiBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgcmV0dXJuICdbb2JqZWN0ICcgKyBjbGFzc29mKHRoaXMpICsgJ10nO1xufTtcbiIsInZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIGdldE93blByb3BlcnR5TmFtZXNNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktc3ltYm9scycpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xuXG4vLyBhbGwgb2JqZWN0IGtleXMsIGluY2x1ZGVzIG5vbi1lbnVtZXJhYmxlIGFuZCBzeW1ib2xzXG5tb2R1bGUuZXhwb3J0cyA9IGdldEJ1aWx0SW4oJ1JlZmxlY3QnLCAnb3duS2V5cycpIHx8IGZ1bmN0aW9uIG93bktleXMoaXQpIHtcbiAgdmFyIGtleXMgPSBnZXRPd25Qcm9wZXJ0eU5hbWVzTW9kdWxlLmYoYW5PYmplY3QoaXQpKTtcbiAgdmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZS5mO1xuICByZXR1cm4gZ2V0T3duUHJvcGVydHlTeW1ib2xzID8ga2V5cy5jb25jYXQoZ2V0T3duUHJvcGVydHlTeW1ib2xzKGl0KSkgOiBrZXlzO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZ2xvYmFsO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYykge1xuICB0cnkge1xuICAgIHJldHVybiB7IGVycm9yOiBmYWxzZSwgdmFsdWU6IGV4ZWMoKSB9O1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiB7IGVycm9yOiB0cnVlLCB2YWx1ZTogZXJyb3IgfTtcbiAgfVxufTtcbiIsInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uZXctcHJvbWlzZS1jYXBhYmlsaXR5Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEMsIHgpIHtcbiAgYW5PYmplY3QoQyk7XG4gIGlmIChpc09iamVjdCh4KSAmJiB4LmNvbnN0cnVjdG9yID09PSBDKSByZXR1cm4geDtcbiAgdmFyIHByb21pc2VDYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkuZihDKTtcbiAgdmFyIHJlc29sdmUgPSBwcm9taXNlQ2FwYWJpbGl0eS5yZXNvbHZlO1xuICByZXNvbHZlKHgpO1xuICByZXR1cm4gcHJvbWlzZUNhcGFiaWxpdHkucHJvbWlzZTtcbn07XG4iLCJ2YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGFyZ2V0LCBzcmMsIG9wdGlvbnMpIHtcbiAgZm9yICh2YXIga2V5IGluIHNyYykgcmVkZWZpbmUodGFyZ2V0LCBrZXksIHNyY1trZXldLCBvcHRpb25zKTtcbiAgcmV0dXJuIHRhcmdldDtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgc2V0R2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC1nbG9iYWwnKTtcbnZhciBpbnNwZWN0U291cmNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2luc3BlY3Qtc291cmNlJyk7XG52YXIgSW50ZXJuYWxTdGF0ZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZScpO1xuXG52YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0O1xudmFyIGVuZm9yY2VJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5lbmZvcmNlO1xudmFyIFRFTVBMQVRFID0gU3RyaW5nKFN0cmluZykuc3BsaXQoJ1N0cmluZycpO1xuXG4obW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTywga2V5LCB2YWx1ZSwgb3B0aW9ucykge1xuICB2YXIgdW5zYWZlID0gb3B0aW9ucyA/ICEhb3B0aW9ucy51bnNhZmUgOiBmYWxzZTtcbiAgdmFyIHNpbXBsZSA9IG9wdGlvbnMgPyAhIW9wdGlvbnMuZW51bWVyYWJsZSA6IGZhbHNlO1xuICB2YXIgbm9UYXJnZXRHZXQgPSBvcHRpb25zID8gISFvcHRpb25zLm5vVGFyZ2V0R2V0IDogZmFsc2U7XG4gIHZhciBzdGF0ZTtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnZnVuY3Rpb24nKSB7XG4gICAgaWYgKHR5cGVvZiBrZXkgPT0gJ3N0cmluZycgJiYgIWhhcyh2YWx1ZSwgJ25hbWUnKSkge1xuICAgICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KHZhbHVlLCAnbmFtZScsIGtleSk7XG4gICAgfVxuICAgIHN0YXRlID0gZW5mb3JjZUludGVybmFsU3RhdGUodmFsdWUpO1xuICAgIGlmICghc3RhdGUuc291cmNlKSB7XG4gICAgICBzdGF0ZS5zb3VyY2UgPSBURU1QTEFURS5qb2luKHR5cGVvZiBrZXkgPT0gJ3N0cmluZycgPyBrZXkgOiAnJyk7XG4gICAgfVxuICB9XG4gIGlmIChPID09PSBnbG9iYWwpIHtcbiAgICBpZiAoc2ltcGxlKSBPW2tleV0gPSB2YWx1ZTtcbiAgICBlbHNlIHNldEdsb2JhbChrZXksIHZhbHVlKTtcbiAgICByZXR1cm47XG4gIH0gZWxzZSBpZiAoIXVuc2FmZSkge1xuICAgIGRlbGV0ZSBPW2tleV07XG4gIH0gZWxzZSBpZiAoIW5vVGFyZ2V0R2V0ICYmIE9ba2V5XSkge1xuICAgIHNpbXBsZSA9IHRydWU7XG4gIH1cbiAgaWYgKHNpbXBsZSkgT1trZXldID0gdmFsdWU7XG4gIGVsc2UgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KE8sIGtleSwgdmFsdWUpO1xuLy8gYWRkIGZha2UgRnVuY3Rpb24jdG9TdHJpbmcgZm9yIGNvcnJlY3Qgd29yayB3cmFwcGVkIG1ldGhvZHMgLyBjb25zdHJ1Y3RvcnMgd2l0aCBtZXRob2RzIGxpa2UgTG9EYXNoIGlzTmF0aXZlXG59KShGdW5jdGlvbi5wcm90b3R5cGUsICd0b1N0cmluZycsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICByZXR1cm4gdHlwZW9mIHRoaXMgPT0gJ2Z1bmN0aW9uJyAmJiBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpLnNvdXJjZSB8fCBpbnNwZWN0U291cmNlKHRoaXMpO1xufSk7XG4iLCJ2YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4vY2xhc3NvZi1yYXcnKTtcbnZhciByZWdleHBFeGVjID0gcmVxdWlyZSgnLi9yZWdleHAtZXhlYycpO1xuXG4vLyBgUmVnRXhwRXhlY2AgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXJlZ2V4cGV4ZWNcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFIsIFMpIHtcbiAgdmFyIGV4ZWMgPSBSLmV4ZWM7XG4gIGlmICh0eXBlb2YgZXhlYyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHZhciByZXN1bHQgPSBleGVjLmNhbGwoUiwgUyk7XG4gICAgaWYgKHR5cGVvZiByZXN1bHQgIT09ICdvYmplY3QnKSB7XG4gICAgICB0aHJvdyBUeXBlRXJyb3IoJ1JlZ0V4cCBleGVjIG1ldGhvZCByZXR1cm5lZCBzb21ldGhpbmcgb3RoZXIgdGhhbiBhbiBPYmplY3Qgb3IgbnVsbCcpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgaWYgKGNsYXNzb2YoUikgIT09ICdSZWdFeHAnKSB7XG4gICAgdGhyb3cgVHlwZUVycm9yKCdSZWdFeHAjZXhlYyBjYWxsZWQgb24gaW5jb21wYXRpYmxlIHJlY2VpdmVyJyk7XG4gIH1cblxuICByZXR1cm4gcmVnZXhwRXhlYy5jYWxsKFIsIFMpO1xufTtcblxuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHJlZ2V4cEZsYWdzID0gcmVxdWlyZSgnLi9yZWdleHAtZmxhZ3MnKTtcbnZhciBzdGlja3lIZWxwZXJzID0gcmVxdWlyZSgnLi9yZWdleHAtc3RpY2t5LWhlbHBlcnMnKTtcblxudmFyIG5hdGl2ZUV4ZWMgPSBSZWdFeHAucHJvdG90eXBlLmV4ZWM7XG4vLyBUaGlzIGFsd2F5cyByZWZlcnMgdG8gdGhlIG5hdGl2ZSBpbXBsZW1lbnRhdGlvbiwgYmVjYXVzZSB0aGVcbi8vIFN0cmluZyNyZXBsYWNlIHBvbHlmaWxsIHVzZXMgLi9maXgtcmVnZXhwLXdlbGwta25vd24tc3ltYm9sLWxvZ2ljLmpzLFxuLy8gd2hpY2ggbG9hZHMgdGhpcyBmaWxlIGJlZm9yZSBwYXRjaGluZyB0aGUgbWV0aG9kLlxudmFyIG5hdGl2ZVJlcGxhY2UgPSBTdHJpbmcucHJvdG90eXBlLnJlcGxhY2U7XG5cbnZhciBwYXRjaGVkRXhlYyA9IG5hdGl2ZUV4ZWM7XG5cbnZhciBVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkcgPSAoZnVuY3Rpb24gKCkge1xuICB2YXIgcmUxID0gL2EvO1xuICB2YXIgcmUyID0gL2IqL2c7XG4gIG5hdGl2ZUV4ZWMuY2FsbChyZTEsICdhJyk7XG4gIG5hdGl2ZUV4ZWMuY2FsbChyZTIsICdhJyk7XG4gIHJldHVybiByZTEubGFzdEluZGV4ICE9PSAwIHx8IHJlMi5sYXN0SW5kZXggIT09IDA7XG59KSgpO1xuXG52YXIgVU5TVVBQT1JURURfWSA9IHN0aWNreUhlbHBlcnMuVU5TVVBQT1JURURfWSB8fCBzdGlja3lIZWxwZXJzLkJST0tFTl9DQVJFVDtcblxuLy8gbm9ucGFydGljaXBhdGluZyBjYXB0dXJpbmcgZ3JvdXAsIGNvcGllZCBmcm9tIGVzNS1zaGltJ3MgU3RyaW5nI3NwbGl0IHBhdGNoLlxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlZ2V4cC9uby1hc3NlcnRpb24tY2FwdHVyaW5nLWdyb3VwLCByZWdleHAvbm8tZW1wdHktZ3JvdXAgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbnZhciBOUENHX0lOQ0xVREVEID0gLygpPz8vLmV4ZWMoJycpWzFdICE9PSB1bmRlZmluZWQ7XG5cbnZhciBQQVRDSCA9IFVQREFURVNfTEFTVF9JTkRFWF9XUk9ORyB8fCBOUENHX0lOQ0xVREVEIHx8IFVOU1VQUE9SVEVEX1k7XG5cbmlmIChQQVRDSCkge1xuICBwYXRjaGVkRXhlYyA9IGZ1bmN0aW9uIGV4ZWMoc3RyKSB7XG4gICAgdmFyIHJlID0gdGhpcztcbiAgICB2YXIgbGFzdEluZGV4LCByZUNvcHksIG1hdGNoLCBpO1xuICAgIHZhciBzdGlja3kgPSBVTlNVUFBPUlRFRF9ZICYmIHJlLnN0aWNreTtcbiAgICB2YXIgZmxhZ3MgPSByZWdleHBGbGFncy5jYWxsKHJlKTtcbiAgICB2YXIgc291cmNlID0gcmUuc291cmNlO1xuICAgIHZhciBjaGFyc0FkZGVkID0gMDtcbiAgICB2YXIgc3RyQ29weSA9IHN0cjtcblxuICAgIGlmIChzdGlja3kpIHtcbiAgICAgIGZsYWdzID0gZmxhZ3MucmVwbGFjZSgneScsICcnKTtcbiAgICAgIGlmIChmbGFncy5pbmRleE9mKCdnJykgPT09IC0xKSB7XG4gICAgICAgIGZsYWdzICs9ICdnJztcbiAgICAgIH1cblxuICAgICAgc3RyQ29weSA9IFN0cmluZyhzdHIpLnNsaWNlKHJlLmxhc3RJbmRleCk7XG4gICAgICAvLyBTdXBwb3J0IGFuY2hvcmVkIHN0aWNreSBiZWhhdmlvci5cbiAgICAgIGlmIChyZS5sYXN0SW5kZXggPiAwICYmICghcmUubXVsdGlsaW5lIHx8IHJlLm11bHRpbGluZSAmJiBzdHJbcmUubGFzdEluZGV4IC0gMV0gIT09ICdcXG4nKSkge1xuICAgICAgICBzb3VyY2UgPSAnKD86ICcgKyBzb3VyY2UgKyAnKSc7XG4gICAgICAgIHN0ckNvcHkgPSAnICcgKyBzdHJDb3B5O1xuICAgICAgICBjaGFyc0FkZGVkKys7XG4gICAgICB9XG4gICAgICAvLyBeKD8gKyByeCArICkgaXMgbmVlZGVkLCBpbiBjb21iaW5hdGlvbiB3aXRoIHNvbWUgc3RyIHNsaWNpbmcsIHRvXG4gICAgICAvLyBzaW11bGF0ZSB0aGUgJ3knIGZsYWcuXG4gICAgICByZUNvcHkgPSBuZXcgUmVnRXhwKCdeKD86JyArIHNvdXJjZSArICcpJywgZmxhZ3MpO1xuICAgIH1cblxuICAgIGlmIChOUENHX0lOQ0xVREVEKSB7XG4gICAgICByZUNvcHkgPSBuZXcgUmVnRXhwKCdeJyArIHNvdXJjZSArICckKD8hXFxcXHMpJywgZmxhZ3MpO1xuICAgIH1cbiAgICBpZiAoVVBEQVRFU19MQVNUX0lOREVYX1dST05HKSBsYXN0SW5kZXggPSByZS5sYXN0SW5kZXg7XG5cbiAgICBtYXRjaCA9IG5hdGl2ZUV4ZWMuY2FsbChzdGlja3kgPyByZUNvcHkgOiByZSwgc3RyQ29weSk7XG5cbiAgICBpZiAoc3RpY2t5KSB7XG4gICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgbWF0Y2guaW5wdXQgPSBtYXRjaC5pbnB1dC5zbGljZShjaGFyc0FkZGVkKTtcbiAgICAgICAgbWF0Y2hbMF0gPSBtYXRjaFswXS5zbGljZShjaGFyc0FkZGVkKTtcbiAgICAgICAgbWF0Y2guaW5kZXggPSByZS5sYXN0SW5kZXg7XG4gICAgICAgIHJlLmxhc3RJbmRleCArPSBtYXRjaFswXS5sZW5ndGg7XG4gICAgICB9IGVsc2UgcmUubGFzdEluZGV4ID0gMDtcbiAgICB9IGVsc2UgaWYgKFVQREFURVNfTEFTVF9JTkRFWF9XUk9ORyAmJiBtYXRjaCkge1xuICAgICAgcmUubGFzdEluZGV4ID0gcmUuZ2xvYmFsID8gbWF0Y2guaW5kZXggKyBtYXRjaFswXS5sZW5ndGggOiBsYXN0SW5kZXg7XG4gICAgfVxuICAgIGlmIChOUENHX0lOQ0xVREVEICYmIG1hdGNoICYmIG1hdGNoLmxlbmd0aCA+IDEpIHtcbiAgICAgIC8vIEZpeCBicm93c2VycyB3aG9zZSBgZXhlY2AgbWV0aG9kcyBkb24ndCBjb25zaXN0ZW50bHkgcmV0dXJuIGB1bmRlZmluZWRgXG4gICAgICAvLyBmb3IgTlBDRywgbGlrZSBJRTguIE5PVEU6IFRoaXMgZG9lc24nIHdvcmsgZm9yIC8oLj8pPy9cbiAgICAgIG5hdGl2ZVJlcGxhY2UuY2FsbChtYXRjaFswXSwgcmVDb3B5LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZvciAoaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoIC0gMjsgaSsrKSB7XG4gICAgICAgICAgaWYgKGFyZ3VtZW50c1tpXSA9PT0gdW5kZWZpbmVkKSBtYXRjaFtpXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1hdGNoO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHBhdGNoZWRFeGVjO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xuXG4vLyBgUmVnRXhwLnByb3RvdHlwZS5mbGFnc2AgZ2V0dGVyIGltcGxlbWVudGF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWdldC1yZWdleHAucHJvdG90eXBlLmZsYWdzXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHRoYXQgPSBhbk9iamVjdCh0aGlzKTtcbiAgdmFyIHJlc3VsdCA9ICcnO1xuICBpZiAodGhhdC5nbG9iYWwpIHJlc3VsdCArPSAnZyc7XG4gIGlmICh0aGF0Lmlnbm9yZUNhc2UpIHJlc3VsdCArPSAnaSc7XG4gIGlmICh0aGF0Lm11bHRpbGluZSkgcmVzdWx0ICs9ICdtJztcbiAgaWYgKHRoYXQuZG90QWxsKSByZXN1bHQgKz0gJ3MnO1xuICBpZiAodGhhdC51bmljb2RlKSByZXN1bHQgKz0gJ3UnO1xuICBpZiAodGhhdC5zdGlja3kpIHJlc3VsdCArPSAneSc7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL2ZhaWxzJyk7XG5cbi8vIGJhYmVsLW1pbmlmeSB0cmFuc3BpbGVzIFJlZ0V4cCgnYScsICd5JykgLT4gL2EveSBhbmQgaXQgY2F1c2VzIFN5bnRheEVycm9yLFxuLy8gc28gd2UgdXNlIGFuIGludGVybWVkaWF0ZSBmdW5jdGlvbi5cbmZ1bmN0aW9uIFJFKHMsIGYpIHtcbiAgcmV0dXJuIFJlZ0V4cChzLCBmKTtcbn1cblxuZXhwb3J0cy5VTlNVUFBPUlRFRF9ZID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBiYWJlbC1taW5pZnkgdHJhbnNwaWxlcyBSZWdFeHAoJ2EnLCAneScpIC0+IC9hL3kgYW5kIGl0IGNhdXNlcyBTeW50YXhFcnJvclxuICB2YXIgcmUgPSBSRSgnYScsICd5Jyk7XG4gIHJlLmxhc3RJbmRleCA9IDI7XG4gIHJldHVybiByZS5leGVjKCdhYmNkJykgIT0gbnVsbDtcbn0pO1xuXG5leHBvcnRzLkJST0tFTl9DQVJFVCA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9NzczNjg3XG4gIHZhciByZSA9IFJFKCdecicsICdneScpO1xuICByZS5sYXN0SW5kZXggPSAyO1xuICByZXR1cm4gcmUuZXhlYygnc3RyJykgIT0gbnVsbDtcbn0pO1xuIiwiLy8gYFJlcXVpcmVPYmplY3RDb2VyY2libGVgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1yZXF1aXJlb2JqZWN0Y29lcmNpYmxlXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXQgPT0gdW5kZWZpbmVkKSB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjYWxsIG1ldGhvZCBvbiBcIiArIGl0KTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsIi8vIGBTYW1lVmFsdWVgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zYW1ldmFsdWVcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmlzIHx8IGZ1bmN0aW9uIGlzKHgsIHkpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZSAtLSBOYU4gY2hlY2tcbiAgcmV0dXJuIHggPT09IHkgPyB4ICE9PSAwIHx8IDEgLyB4ID09PSAxIC8geSA6IHggIT0geCAmJiB5ICE9IHk7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgdHJ5IHtcbiAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoZ2xvYmFsLCBrZXksIHZhbHVlKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBnbG9iYWxba2V5XSA9IHZhbHVlO1xuICB9IHJldHVybiB2YWx1ZTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcblxudmFyIFNQRUNJRVMgPSB3ZWxsS25vd25TeW1ib2woJ3NwZWNpZXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQ09OU1RSVUNUT1JfTkFNRSkge1xuICB2YXIgQ29uc3RydWN0b3IgPSBnZXRCdWlsdEluKENPTlNUUlVDVE9SX05BTUUpO1xuICB2YXIgZGVmaW5lUHJvcGVydHkgPSBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mO1xuXG4gIGlmIChERVNDUklQVE9SUyAmJiBDb25zdHJ1Y3RvciAmJiAhQ29uc3RydWN0b3JbU1BFQ0lFU10pIHtcbiAgICBkZWZpbmVQcm9wZXJ0eShDb25zdHJ1Y3RvciwgU1BFQ0lFUywge1xuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9XG4gICAgfSk7XG4gIH1cbn07XG4iLCJ2YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpLmY7XG52YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgVE9fU1RSSU5HX1RBRyA9IHdlbGxLbm93blN5bWJvbCgndG9TdHJpbmdUYWcnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIFRBRywgU1RBVElDKSB7XG4gIGlmIChpdCAmJiAhaGFzKGl0ID0gU1RBVElDID8gaXQgOiBpdC5wcm90b3R5cGUsIFRPX1NUUklOR19UQUcpKSB7XG4gICAgZGVmaW5lUHJvcGVydHkoaXQsIFRPX1NUUklOR19UQUcsIHsgY29uZmlndXJhYmxlOiB0cnVlLCB2YWx1ZTogVEFHIH0pO1xuICB9XG59O1xuIiwidmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdWlkJyk7XG5cbnZhciBrZXlzID0gc2hhcmVkKCdrZXlzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4ga2V5c1trZXldIHx8IChrZXlzW2tleV0gPSB1aWQoa2V5KSk7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBzZXRHbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LWdsb2JhbCcpO1xuXG52YXIgU0hBUkVEID0gJ19fY29yZS1qc19zaGFyZWRfXyc7XG52YXIgc3RvcmUgPSBnbG9iYWxbU0hBUkVEXSB8fCBzZXRHbG9iYWwoU0hBUkVELCB7fSk7XG5cbm1vZHVsZS5leHBvcnRzID0gc3RvcmU7XG4iLCJ2YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG52YXIgc3RvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkLXN0b3JlJyk7XG5cbihtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gIHJldHVybiBzdG9yZVtrZXldIHx8IChzdG9yZVtrZXldID0gdmFsdWUgIT09IHVuZGVmaW5lZCA/IHZhbHVlIDoge30pO1xufSkoJ3ZlcnNpb25zJywgW10pLnB1c2goe1xuICB2ZXJzaW9uOiAnMy45LjEnLFxuICBtb2RlOiBJU19QVVJFID8gJ3B1cmUnIDogJ2dsb2JhbCcsXG4gIGNvcHlyaWdodDogJ8KpIDIwMjEgRGVuaXMgUHVzaGthcmV2ICh6bG9pcm9jay5ydSknXG59KTtcbiIsInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1mdW5jdGlvbicpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgU1BFQ0lFUyA9IHdlbGxLbm93blN5bWJvbCgnc3BlY2llcycpO1xuXG4vLyBgU3BlY2llc0NvbnN0cnVjdG9yYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3BlY2llc2NvbnN0cnVjdG9yXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChPLCBkZWZhdWx0Q29uc3RydWN0b3IpIHtcbiAgdmFyIEMgPSBhbk9iamVjdChPKS5jb25zdHJ1Y3RvcjtcbiAgdmFyIFM7XG4gIHJldHVybiBDID09PSB1bmRlZmluZWQgfHwgKFMgPSBhbk9iamVjdChDKVtTUEVDSUVTXSkgPT0gdW5kZWZpbmVkID8gZGVmYXVsdENvbnN0cnVjdG9yIDogYUZ1bmN0aW9uKFMpO1xufTtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG4vLyBjaGVjayB0aGUgZXhpc3RlbmNlIG9mIGEgbWV0aG9kLCBsb3dlcmNhc2Vcbi8vIG9mIGEgdGFnIGFuZCBlc2NhcGluZyBxdW90ZXMgaW4gYXJndW1lbnRzXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChNRVRIT0RfTkFNRSkge1xuICByZXR1cm4gZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIHZhciB0ZXN0ID0gJydbTUVUSE9EX05BTUVdKCdcIicpO1xuICAgIHJldHVybiB0ZXN0ICE9PSB0ZXN0LnRvTG93ZXJDYXNlKCkgfHwgdGVzdC5zcGxpdCgnXCInKS5sZW5ndGggPiAzO1xuICB9KTtcbn07XG4iLCJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWludGVnZXInKTtcbnZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS57IGNvZGVQb2ludEF0LCBhdCB9YCBtZXRob2RzIGltcGxlbWVudGF0aW9uXG52YXIgY3JlYXRlTWV0aG9kID0gZnVuY3Rpb24gKENPTlZFUlRfVE9fU1RSSU5HKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIHBvcykge1xuICAgIHZhciBTID0gU3RyaW5nKHJlcXVpcmVPYmplY3RDb2VyY2libGUoJHRoaXMpKTtcbiAgICB2YXIgcG9zaXRpb24gPSB0b0ludGVnZXIocG9zKTtcbiAgICB2YXIgc2l6ZSA9IFMubGVuZ3RoO1xuICAgIHZhciBmaXJzdCwgc2Vjb25kO1xuICAgIGlmIChwb3NpdGlvbiA8IDAgfHwgcG9zaXRpb24gPj0gc2l6ZSkgcmV0dXJuIENPTlZFUlRfVE9fU1RSSU5HID8gJycgOiB1bmRlZmluZWQ7XG4gICAgZmlyc3QgPSBTLmNoYXJDb2RlQXQocG9zaXRpb24pO1xuICAgIHJldHVybiBmaXJzdCA8IDB4RDgwMCB8fCBmaXJzdCA+IDB4REJGRiB8fCBwb3NpdGlvbiArIDEgPT09IHNpemVcbiAgICAgIHx8IChzZWNvbmQgPSBTLmNoYXJDb2RlQXQocG9zaXRpb24gKyAxKSkgPCAweERDMDAgfHwgc2Vjb25kID4gMHhERkZGXG4gICAgICAgID8gQ09OVkVSVF9UT19TVFJJTkcgPyBTLmNoYXJBdChwb3NpdGlvbikgOiBmaXJzdFxuICAgICAgICA6IENPTlZFUlRfVE9fU1RSSU5HID8gUy5zbGljZShwb3NpdGlvbiwgcG9zaXRpb24gKyAyKSA6IChmaXJzdCAtIDB4RDgwMCA8PCAxMCkgKyAoc2Vjb25kIC0gMHhEQzAwKSArIDB4MTAwMDA7XG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgLy8gYFN0cmluZy5wcm90b3R5cGUuY29kZVBvaW50QXRgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUuY29kZXBvaW50YXRcbiAgY29kZUF0OiBjcmVhdGVNZXRob2QoZmFsc2UpLFxuICAvLyBgU3RyaW5nLnByb3RvdHlwZS5hdGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9tYXRoaWFzYnluZW5zL1N0cmluZy5wcm90b3R5cGUuYXRcbiAgY2hhckF0OiBjcmVhdGVNZXRob2QodHJ1ZSlcbn07XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMjgwXG52YXIgdXNlckFnZW50ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS11c2VyLWFnZW50Jyk7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSB1bmljb3JuL25vLXVuc2FmZS1yZWdleCAtLSBzYWZlXG5tb2R1bGUuZXhwb3J0cyA9IC9WZXJzaW9uXFwvMTBcXC5cXGQrKFxcLlxcZCspPyggTW9iaWxlXFwvXFx3Kyk/IFNhZmFyaVxcLy8udGVzdCh1c2VyQWdlbnQpO1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtc3RyaW5nLXBhZC1zdGFydC1lbmRcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciByZXBlYXQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLXJlcGVhdCcpO1xudmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG5cbnZhciBjZWlsID0gTWF0aC5jZWlsO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS57IHBhZFN0YXJ0LCBwYWRFbmQgfWAgbWV0aG9kcyBpbXBsZW1lbnRhdGlvblxudmFyIGNyZWF0ZU1ldGhvZCA9IGZ1bmN0aW9uIChJU19FTkQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgbWF4TGVuZ3RoLCBmaWxsU3RyaW5nKSB7XG4gICAgdmFyIFMgPSBTdHJpbmcocmVxdWlyZU9iamVjdENvZXJjaWJsZSgkdGhpcykpO1xuICAgIHZhciBzdHJpbmdMZW5ndGggPSBTLmxlbmd0aDtcbiAgICB2YXIgZmlsbFN0ciA9IGZpbGxTdHJpbmcgPT09IHVuZGVmaW5lZCA/ICcgJyA6IFN0cmluZyhmaWxsU3RyaW5nKTtcbiAgICB2YXIgaW50TWF4TGVuZ3RoID0gdG9MZW5ndGgobWF4TGVuZ3RoKTtcbiAgICB2YXIgZmlsbExlbiwgc3RyaW5nRmlsbGVyO1xuICAgIGlmIChpbnRNYXhMZW5ndGggPD0gc3RyaW5nTGVuZ3RoIHx8IGZpbGxTdHIgPT0gJycpIHJldHVybiBTO1xuICAgIGZpbGxMZW4gPSBpbnRNYXhMZW5ndGggLSBzdHJpbmdMZW5ndGg7XG4gICAgc3RyaW5nRmlsbGVyID0gcmVwZWF0LmNhbGwoZmlsbFN0ciwgY2VpbChmaWxsTGVuIC8gZmlsbFN0ci5sZW5ndGgpKTtcbiAgICBpZiAoc3RyaW5nRmlsbGVyLmxlbmd0aCA+IGZpbGxMZW4pIHN0cmluZ0ZpbGxlciA9IHN0cmluZ0ZpbGxlci5zbGljZSgwLCBmaWxsTGVuKTtcbiAgICByZXR1cm4gSVNfRU5EID8gUyArIHN0cmluZ0ZpbGxlciA6IHN0cmluZ0ZpbGxlciArIFM7XG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgLy8gYFN0cmluZy5wcm90b3R5cGUucGFkU3RhcnRgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUucGFkc3RhcnRcbiAgc3RhcnQ6IGNyZWF0ZU1ldGhvZChmYWxzZSksXG4gIC8vIGBTdHJpbmcucHJvdG90eXBlLnBhZEVuZGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5wYWRlbmRcbiAgZW5kOiBjcmVhdGVNZXRob2QodHJ1ZSlcbn07XG4iLCIndXNlIHN0cmljdCc7XG4vLyBiYXNlZCBvbiBodHRwczovL2dpdGh1Yi5jb20vYmVzdGllanMvcHVueWNvZGUuanMvYmxvYi9tYXN0ZXIvcHVueWNvZGUuanNcbnZhciBtYXhJbnQgPSAyMTQ3NDgzNjQ3OyAvLyBha2EuIDB4N0ZGRkZGRkYgb3IgMl4zMS0xXG52YXIgYmFzZSA9IDM2O1xudmFyIHRNaW4gPSAxO1xudmFyIHRNYXggPSAyNjtcbnZhciBza2V3ID0gMzg7XG52YXIgZGFtcCA9IDcwMDtcbnZhciBpbml0aWFsQmlhcyA9IDcyO1xudmFyIGluaXRpYWxOID0gMTI4OyAvLyAweDgwXG52YXIgZGVsaW1pdGVyID0gJy0nOyAvLyAnXFx4MkQnXG52YXIgcmVnZXhOb25BU0NJSSA9IC9bXlxcMC1cXHUwMDdFXS87IC8vIG5vbi1BU0NJSSBjaGFyc1xudmFyIHJlZ2V4U2VwYXJhdG9ycyA9IC9bLlxcdTMwMDJcXHVGRjBFXFx1RkY2MV0vZzsgLy8gUkZDIDM0OTAgc2VwYXJhdG9yc1xudmFyIE9WRVJGTE9XX0VSUk9SID0gJ092ZXJmbG93OiBpbnB1dCBuZWVkcyB3aWRlciBpbnRlZ2VycyB0byBwcm9jZXNzJztcbnZhciBiYXNlTWludXNUTWluID0gYmFzZSAtIHRNaW47XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xudmFyIHN0cmluZ0Zyb21DaGFyQ29kZSA9IFN0cmluZy5mcm9tQ2hhckNvZGU7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBjb250YWluaW5nIHRoZSBudW1lcmljIGNvZGUgcG9pbnRzIG9mIGVhY2ggVW5pY29kZVxuICogY2hhcmFjdGVyIGluIHRoZSBzdHJpbmcuIFdoaWxlIEphdmFTY3JpcHQgdXNlcyBVQ1MtMiBpbnRlcm5hbGx5LFxuICogdGhpcyBmdW5jdGlvbiB3aWxsIGNvbnZlcnQgYSBwYWlyIG9mIHN1cnJvZ2F0ZSBoYWx2ZXMgKGVhY2ggb2Ygd2hpY2hcbiAqIFVDUy0yIGV4cG9zZXMgYXMgc2VwYXJhdGUgY2hhcmFjdGVycykgaW50byBhIHNpbmdsZSBjb2RlIHBvaW50LFxuICogbWF0Y2hpbmcgVVRGLTE2LlxuICovXG52YXIgdWNzMmRlY29kZSA9IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgdmFyIG91dHB1dCA9IFtdO1xuICB2YXIgY291bnRlciA9IDA7XG4gIHZhciBsZW5ndGggPSBzdHJpbmcubGVuZ3RoO1xuICB3aGlsZSAoY291bnRlciA8IGxlbmd0aCkge1xuICAgIHZhciB2YWx1ZSA9IHN0cmluZy5jaGFyQ29kZUF0KGNvdW50ZXIrKyk7XG4gICAgaWYgKHZhbHVlID49IDB4RDgwMCAmJiB2YWx1ZSA8PSAweERCRkYgJiYgY291bnRlciA8IGxlbmd0aCkge1xuICAgICAgLy8gSXQncyBhIGhpZ2ggc3Vycm9nYXRlLCBhbmQgdGhlcmUgaXMgYSBuZXh0IGNoYXJhY3Rlci5cbiAgICAgIHZhciBleHRyYSA9IHN0cmluZy5jaGFyQ29kZUF0KGNvdW50ZXIrKyk7XG4gICAgICBpZiAoKGV4dHJhICYgMHhGQzAwKSA9PSAweERDMDApIHsgLy8gTG93IHN1cnJvZ2F0ZS5cbiAgICAgICAgb3V0cHV0LnB1c2goKCh2YWx1ZSAmIDB4M0ZGKSA8PCAxMCkgKyAoZXh0cmEgJiAweDNGRikgKyAweDEwMDAwKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEl0J3MgYW4gdW5tYXRjaGVkIHN1cnJvZ2F0ZTsgb25seSBhcHBlbmQgdGhpcyBjb2RlIHVuaXQsIGluIGNhc2UgdGhlXG4gICAgICAgIC8vIG5leHQgY29kZSB1bml0IGlzIHRoZSBoaWdoIHN1cnJvZ2F0ZSBvZiBhIHN1cnJvZ2F0ZSBwYWlyLlxuICAgICAgICBvdXRwdXQucHVzaCh2YWx1ZSk7XG4gICAgICAgIGNvdW50ZXItLTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgb3V0cHV0LnB1c2godmFsdWUpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gb3V0cHV0O1xufTtcblxuLyoqXG4gKiBDb252ZXJ0cyBhIGRpZ2l0L2ludGVnZXIgaW50byBhIGJhc2ljIGNvZGUgcG9pbnQuXG4gKi9cbnZhciBkaWdpdFRvQmFzaWMgPSBmdW5jdGlvbiAoZGlnaXQpIHtcbiAgLy8gIDAuLjI1IG1hcCB0byBBU0NJSSBhLi56IG9yIEEuLlpcbiAgLy8gMjYuLjM1IG1hcCB0byBBU0NJSSAwLi45XG4gIHJldHVybiBkaWdpdCArIDIyICsgNzUgKiAoZGlnaXQgPCAyNik7XG59O1xuXG4vKipcbiAqIEJpYXMgYWRhcHRhdGlvbiBmdW5jdGlvbiBhcyBwZXIgc2VjdGlvbiAzLjQgb2YgUkZDIDM0OTIuXG4gKiBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjMzQ5MiNzZWN0aW9uLTMuNFxuICovXG52YXIgYWRhcHQgPSBmdW5jdGlvbiAoZGVsdGEsIG51bVBvaW50cywgZmlyc3RUaW1lKSB7XG4gIHZhciBrID0gMDtcbiAgZGVsdGEgPSBmaXJzdFRpbWUgPyBmbG9vcihkZWx0YSAvIGRhbXApIDogZGVsdGEgPj4gMTtcbiAgZGVsdGEgKz0gZmxvb3IoZGVsdGEgLyBudW1Qb2ludHMpO1xuICBmb3IgKDsgZGVsdGEgPiBiYXNlTWludXNUTWluICogdE1heCA+PiAxOyBrICs9IGJhc2UpIHtcbiAgICBkZWx0YSA9IGZsb29yKGRlbHRhIC8gYmFzZU1pbnVzVE1pbik7XG4gIH1cbiAgcmV0dXJuIGZsb29yKGsgKyAoYmFzZU1pbnVzVE1pbiArIDEpICogZGVsdGEgLyAoZGVsdGEgKyBza2V3KSk7XG59O1xuXG4vKipcbiAqIENvbnZlcnRzIGEgc3RyaW5nIG9mIFVuaWNvZGUgc3ltYm9scyAoZS5nLiBhIGRvbWFpbiBuYW1lIGxhYmVsKSB0byBhXG4gKiBQdW55Y29kZSBzdHJpbmcgb2YgQVNDSUktb25seSBzeW1ib2xzLlxuICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbWF4LXN0YXRlbWVudHMgLS0gVE9ET1xudmFyIGVuY29kZSA9IGZ1bmN0aW9uIChpbnB1dCkge1xuICB2YXIgb3V0cHV0ID0gW107XG5cbiAgLy8gQ29udmVydCB0aGUgaW5wdXQgaW4gVUNTLTIgdG8gYW4gYXJyYXkgb2YgVW5pY29kZSBjb2RlIHBvaW50cy5cbiAgaW5wdXQgPSB1Y3MyZGVjb2RlKGlucHV0KTtcblxuICAvLyBDYWNoZSB0aGUgbGVuZ3RoLlxuICB2YXIgaW5wdXRMZW5ndGggPSBpbnB1dC5sZW5ndGg7XG5cbiAgLy8gSW5pdGlhbGl6ZSB0aGUgc3RhdGUuXG4gIHZhciBuID0gaW5pdGlhbE47XG4gIHZhciBkZWx0YSA9IDA7XG4gIHZhciBiaWFzID0gaW5pdGlhbEJpYXM7XG4gIHZhciBpLCBjdXJyZW50VmFsdWU7XG5cbiAgLy8gSGFuZGxlIHRoZSBiYXNpYyBjb2RlIHBvaW50cy5cbiAgZm9yIChpID0gMDsgaSA8IGlucHV0Lmxlbmd0aDsgaSsrKSB7XG4gICAgY3VycmVudFZhbHVlID0gaW5wdXRbaV07XG4gICAgaWYgKGN1cnJlbnRWYWx1ZSA8IDB4ODApIHtcbiAgICAgIG91dHB1dC5wdXNoKHN0cmluZ0Zyb21DaGFyQ29kZShjdXJyZW50VmFsdWUpKTtcbiAgICB9XG4gIH1cblxuICB2YXIgYmFzaWNMZW5ndGggPSBvdXRwdXQubGVuZ3RoOyAvLyBudW1iZXIgb2YgYmFzaWMgY29kZSBwb2ludHMuXG4gIHZhciBoYW5kbGVkQ1BDb3VudCA9IGJhc2ljTGVuZ3RoOyAvLyBudW1iZXIgb2YgY29kZSBwb2ludHMgdGhhdCBoYXZlIGJlZW4gaGFuZGxlZDtcblxuICAvLyBGaW5pc2ggdGhlIGJhc2ljIHN0cmluZyB3aXRoIGEgZGVsaW1pdGVyIHVubGVzcyBpdCdzIGVtcHR5LlxuICBpZiAoYmFzaWNMZW5ndGgpIHtcbiAgICBvdXRwdXQucHVzaChkZWxpbWl0ZXIpO1xuICB9XG5cbiAgLy8gTWFpbiBlbmNvZGluZyBsb29wOlxuICB3aGlsZSAoaGFuZGxlZENQQ291bnQgPCBpbnB1dExlbmd0aCkge1xuICAgIC8vIEFsbCBub24tYmFzaWMgY29kZSBwb2ludHMgPCBuIGhhdmUgYmVlbiBoYW5kbGVkIGFscmVhZHkuIEZpbmQgdGhlIG5leHQgbGFyZ2VyIG9uZTpcbiAgICB2YXIgbSA9IG1heEludDtcbiAgICBmb3IgKGkgPSAwOyBpIDwgaW5wdXQubGVuZ3RoOyBpKyspIHtcbiAgICAgIGN1cnJlbnRWYWx1ZSA9IGlucHV0W2ldO1xuICAgICAgaWYgKGN1cnJlbnRWYWx1ZSA+PSBuICYmIGN1cnJlbnRWYWx1ZSA8IG0pIHtcbiAgICAgICAgbSA9IGN1cnJlbnRWYWx1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBJbmNyZWFzZSBgZGVsdGFgIGVub3VnaCB0byBhZHZhbmNlIHRoZSBkZWNvZGVyJ3MgPG4saT4gc3RhdGUgdG8gPG0sMD4sIGJ1dCBndWFyZCBhZ2FpbnN0IG92ZXJmbG93LlxuICAgIHZhciBoYW5kbGVkQ1BDb3VudFBsdXNPbmUgPSBoYW5kbGVkQ1BDb3VudCArIDE7XG4gICAgaWYgKG0gLSBuID4gZmxvb3IoKG1heEludCAtIGRlbHRhKSAvIGhhbmRsZWRDUENvdW50UGx1c09uZSkpIHtcbiAgICAgIHRocm93IFJhbmdlRXJyb3IoT1ZFUkZMT1dfRVJST1IpO1xuICAgIH1cblxuICAgIGRlbHRhICs9IChtIC0gbikgKiBoYW5kbGVkQ1BDb3VudFBsdXNPbmU7XG4gICAgbiA9IG07XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgaW5wdXQubGVuZ3RoOyBpKyspIHtcbiAgICAgIGN1cnJlbnRWYWx1ZSA9IGlucHV0W2ldO1xuICAgICAgaWYgKGN1cnJlbnRWYWx1ZSA8IG4gJiYgKytkZWx0YSA+IG1heEludCkge1xuICAgICAgICB0aHJvdyBSYW5nZUVycm9yKE9WRVJGTE9XX0VSUk9SKTtcbiAgICAgIH1cbiAgICAgIGlmIChjdXJyZW50VmFsdWUgPT0gbikge1xuICAgICAgICAvLyBSZXByZXNlbnQgZGVsdGEgYXMgYSBnZW5lcmFsaXplZCB2YXJpYWJsZS1sZW5ndGggaW50ZWdlci5cbiAgICAgICAgdmFyIHEgPSBkZWx0YTtcbiAgICAgICAgZm9yICh2YXIgayA9IGJhc2U7IC8qIG5vIGNvbmRpdGlvbiAqLzsgayArPSBiYXNlKSB7XG4gICAgICAgICAgdmFyIHQgPSBrIDw9IGJpYXMgPyB0TWluIDogKGsgPj0gYmlhcyArIHRNYXggPyB0TWF4IDogayAtIGJpYXMpO1xuICAgICAgICAgIGlmIChxIDwgdCkgYnJlYWs7XG4gICAgICAgICAgdmFyIHFNaW51c1QgPSBxIC0gdDtcbiAgICAgICAgICB2YXIgYmFzZU1pbnVzVCA9IGJhc2UgLSB0O1xuICAgICAgICAgIG91dHB1dC5wdXNoKHN0cmluZ0Zyb21DaGFyQ29kZShkaWdpdFRvQmFzaWModCArIHFNaW51c1QgJSBiYXNlTWludXNUKSkpO1xuICAgICAgICAgIHEgPSBmbG9vcihxTWludXNUIC8gYmFzZU1pbnVzVCk7XG4gICAgICAgIH1cblxuICAgICAgICBvdXRwdXQucHVzaChzdHJpbmdGcm9tQ2hhckNvZGUoZGlnaXRUb0Jhc2ljKHEpKSk7XG4gICAgICAgIGJpYXMgPSBhZGFwdChkZWx0YSwgaGFuZGxlZENQQ291bnRQbHVzT25lLCBoYW5kbGVkQ1BDb3VudCA9PSBiYXNpY0xlbmd0aCk7XG4gICAgICAgIGRlbHRhID0gMDtcbiAgICAgICAgKytoYW5kbGVkQ1BDb3VudDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICArK2RlbHRhO1xuICAgICsrbjtcbiAgfVxuICByZXR1cm4gb3V0cHV0LmpvaW4oJycpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgdmFyIGVuY29kZWQgPSBbXTtcbiAgdmFyIGxhYmVscyA9IGlucHV0LnRvTG93ZXJDYXNlKCkucmVwbGFjZShyZWdleFNlcGFyYXRvcnMsICdcXHUwMDJFJykuc3BsaXQoJy4nKTtcbiAgdmFyIGksIGxhYmVsO1xuICBmb3IgKGkgPSAwOyBpIDwgbGFiZWxzLmxlbmd0aDsgaSsrKSB7XG4gICAgbGFiZWwgPSBsYWJlbHNbaV07XG4gICAgZW5jb2RlZC5wdXNoKHJlZ2V4Tm9uQVNDSUkudGVzdChsYWJlbCkgPyAneG4tLScgKyBlbmNvZGUobGFiZWwpIDogbGFiZWwpO1xuICB9XG4gIHJldHVybiBlbmNvZGVkLmpvaW4oJy4nKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWludGVnZXInKTtcbnZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS5yZXBlYXRgIG1ldGhvZCBpbXBsZW1lbnRhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnJlcGVhdFxubW9kdWxlLmV4cG9ydHMgPSAnJy5yZXBlYXQgfHwgZnVuY3Rpb24gcmVwZWF0KGNvdW50KSB7XG4gIHZhciBzdHIgPSBTdHJpbmcocmVxdWlyZU9iamVjdENvZXJjaWJsZSh0aGlzKSk7XG4gIHZhciByZXN1bHQgPSAnJztcbiAgdmFyIG4gPSB0b0ludGVnZXIoY291bnQpO1xuICBpZiAobiA8IDAgfHwgbiA9PSBJbmZpbml0eSkgdGhyb3cgUmFuZ2VFcnJvcignV3JvbmcgbnVtYmVyIG9mIHJlcGV0aXRpb25zJyk7XG4gIGZvciAoO24gPiAwOyAobiA+Pj49IDEpICYmIChzdHIgKz0gc3RyKSkgaWYgKG4gJiAxKSByZXN1bHQgKz0gc3RyO1xuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIHdoaXRlc3BhY2VzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3doaXRlc3BhY2VzJyk7XG5cbnZhciBub24gPSAnXFx1MjAwQlxcdTAwODVcXHUxODBFJztcblxuLy8gY2hlY2sgdGhhdCBhIG1ldGhvZCB3b3JrcyB3aXRoIHRoZSBjb3JyZWN0IGxpc3Rcbi8vIG9mIHdoaXRlc3BhY2VzIGFuZCBoYXMgYSBjb3JyZWN0IG5hbWVcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE1FVEhPRF9OQU1FKSB7XG4gIHJldHVybiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICEhd2hpdGVzcGFjZXNbTUVUSE9EX05BTUVdKCkgfHwgbm9uW01FVEhPRF9OQU1FXSgpICE9IG5vbiB8fCB3aGl0ZXNwYWNlc1tNRVRIT0RfTkFNRV0ubmFtZSAhPT0gTUVUSE9EX05BTUU7XG4gIH0pO1xufTtcbiIsInZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xudmFyIHdoaXRlc3BhY2VzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3doaXRlc3BhY2VzJyk7XG5cbnZhciB3aGl0ZXNwYWNlID0gJ1snICsgd2hpdGVzcGFjZXMgKyAnXSc7XG52YXIgbHRyaW0gPSBSZWdFeHAoJ14nICsgd2hpdGVzcGFjZSArIHdoaXRlc3BhY2UgKyAnKicpO1xudmFyIHJ0cmltID0gUmVnRXhwKHdoaXRlc3BhY2UgKyB3aGl0ZXNwYWNlICsgJyokJyk7XG5cbi8vIGBTdHJpbmcucHJvdG90eXBlLnsgdHJpbSwgdHJpbVN0YXJ0LCB0cmltRW5kLCB0cmltTGVmdCwgdHJpbVJpZ2h0IH1gIG1ldGhvZHMgaW1wbGVtZW50YXRpb25cbnZhciBjcmVhdGVNZXRob2QgPSBmdW5jdGlvbiAoVFlQRSkge1xuICByZXR1cm4gZnVuY3Rpb24gKCR0aGlzKSB7XG4gICAgdmFyIHN0cmluZyA9IFN0cmluZyhyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKCR0aGlzKSk7XG4gICAgaWYgKFRZUEUgJiAxKSBzdHJpbmcgPSBzdHJpbmcucmVwbGFjZShsdHJpbSwgJycpO1xuICAgIGlmIChUWVBFICYgMikgc3RyaW5nID0gc3RyaW5nLnJlcGxhY2UocnRyaW0sICcnKTtcbiAgICByZXR1cm4gc3RyaW5nO1xuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIC8vIGBTdHJpbmcucHJvdG90eXBlLnsgdHJpbUxlZnQsIHRyaW1TdGFydCB9YCBtZXRob2RzXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS50cmltc3RhcnRcbiAgc3RhcnQ6IGNyZWF0ZU1ldGhvZCgxKSxcbiAgLy8gYFN0cmluZy5wcm90b3R5cGUueyB0cmltUmlnaHQsIHRyaW1FbmQgfWAgbWV0aG9kc1xuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUudHJpbWVuZFxuICBlbmQ6IGNyZWF0ZU1ldGhvZCgyKSxcbiAgLy8gYFN0cmluZy5wcm90b3R5cGUudHJpbWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS50cmltXG4gIHRyaW06IGNyZWF0ZU1ldGhvZCgzKVxufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dCcpO1xudmFyIGh0bWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaHRtbCcpO1xudmFyIGNyZWF0ZUVsZW1lbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZG9jdW1lbnQtY3JlYXRlLWVsZW1lbnQnKTtcbnZhciBJU19JT1MgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLWlzLWlvcycpO1xudmFyIElTX05PREUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLWlzLW5vZGUnKTtcblxudmFyIGxvY2F0aW9uID0gZ2xvYmFsLmxvY2F0aW9uO1xudmFyIHNldCA9IGdsb2JhbC5zZXRJbW1lZGlhdGU7XG52YXIgY2xlYXIgPSBnbG9iYWwuY2xlYXJJbW1lZGlhdGU7XG52YXIgcHJvY2VzcyA9IGdsb2JhbC5wcm9jZXNzO1xudmFyIE1lc3NhZ2VDaGFubmVsID0gZ2xvYmFsLk1lc3NhZ2VDaGFubmVsO1xudmFyIERpc3BhdGNoID0gZ2xvYmFsLkRpc3BhdGNoO1xudmFyIGNvdW50ZXIgPSAwO1xudmFyIHF1ZXVlID0ge307XG52YXIgT05SRUFEWVNUQVRFQ0hBTkdFID0gJ29ucmVhZHlzdGF0ZWNoYW5nZSc7XG52YXIgZGVmZXIsIGNoYW5uZWwsIHBvcnQ7XG5cbnZhciBydW4gPSBmdW5jdGlvbiAoaWQpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb3RvdHlwZS1idWlsdGlucyAtLSBzYWZlXG4gIGlmIChxdWV1ZS5oYXNPd25Qcm9wZXJ0eShpZCkpIHtcbiAgICB2YXIgZm4gPSBxdWV1ZVtpZF07XG4gICAgZGVsZXRlIHF1ZXVlW2lkXTtcbiAgICBmbigpO1xuICB9XG59O1xuXG52YXIgcnVubmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcnVuKGlkKTtcbiAgfTtcbn07XG5cbnZhciBsaXN0ZW5lciA9IGZ1bmN0aW9uIChldmVudCkge1xuICBydW4oZXZlbnQuZGF0YSk7XG59O1xuXG52YXIgcG9zdCA9IGZ1bmN0aW9uIChpZCkge1xuICAvLyBvbGQgZW5naW5lcyBoYXZlIG5vdCBsb2NhdGlvbi5vcmlnaW5cbiAgZ2xvYmFsLnBvc3RNZXNzYWdlKGlkICsgJycsIGxvY2F0aW9uLnByb3RvY29sICsgJy8vJyArIGxvY2F0aW9uLmhvc3QpO1xufTtcblxuLy8gTm9kZS5qcyAwLjkrICYgSUUxMCsgaGFzIHNldEltbWVkaWF0ZSwgb3RoZXJ3aXNlOlxuaWYgKCFzZXQgfHwgIWNsZWFyKSB7XG4gIHNldCA9IGZ1bmN0aW9uIHNldEltbWVkaWF0ZShmbikge1xuICAgIHZhciBhcmdzID0gW107XG4gICAgdmFyIGkgPSAxO1xuICAgIHdoaWxlIChhcmd1bWVudHMubGVuZ3RoID4gaSkgYXJncy5wdXNoKGFyZ3VtZW50c1tpKytdKTtcbiAgICBxdWV1ZVsrK2NvdW50ZXJdID0gZnVuY3Rpb24gKCkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jIC0tIHNwZWMgcmVxdWlyZW1lbnRcbiAgICAgICh0eXBlb2YgZm4gPT0gJ2Z1bmN0aW9uJyA/IGZuIDogRnVuY3Rpb24oZm4pKS5hcHBseSh1bmRlZmluZWQsIGFyZ3MpO1xuICAgIH07XG4gICAgZGVmZXIoY291bnRlcik7XG4gICAgcmV0dXJuIGNvdW50ZXI7XG4gIH07XG4gIGNsZWFyID0gZnVuY3Rpb24gY2xlYXJJbW1lZGlhdGUoaWQpIHtcbiAgICBkZWxldGUgcXVldWVbaWRdO1xuICB9O1xuICAvLyBOb2RlLmpzIDAuOC1cbiAgaWYgKElTX05PREUpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgcHJvY2Vzcy5uZXh0VGljayhydW5uZXIoaWQpKTtcbiAgICB9O1xuICAvLyBTcGhlcmUgKEpTIGdhbWUgZW5naW5lKSBEaXNwYXRjaCBBUElcbiAgfSBlbHNlIGlmIChEaXNwYXRjaCAmJiBEaXNwYXRjaC5ub3cpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgRGlzcGF0Y2gubm93KHJ1bm5lcihpZCkpO1xuICAgIH07XG4gIC8vIEJyb3dzZXJzIHdpdGggTWVzc2FnZUNoYW5uZWwsIGluY2x1ZGVzIFdlYldvcmtlcnNcbiAgLy8gZXhjZXB0IGlPUyAtIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy82MjRcbiAgfSBlbHNlIGlmIChNZXNzYWdlQ2hhbm5lbCAmJiAhSVNfSU9TKSB7XG4gICAgY2hhbm5lbCA9IG5ldyBNZXNzYWdlQ2hhbm5lbCgpO1xuICAgIHBvcnQgPSBjaGFubmVsLnBvcnQyO1xuICAgIGNoYW5uZWwucG9ydDEub25tZXNzYWdlID0gbGlzdGVuZXI7XG4gICAgZGVmZXIgPSBiaW5kKHBvcnQucG9zdE1lc3NhZ2UsIHBvcnQsIDEpO1xuICAvLyBCcm93c2VycyB3aXRoIHBvc3RNZXNzYWdlLCBza2lwIFdlYldvcmtlcnNcbiAgLy8gSUU4IGhhcyBwb3N0TWVzc2FnZSwgYnV0IGl0J3Mgc3luYyAmIHR5cGVvZiBpdHMgcG9zdE1lc3NhZ2UgaXMgJ29iamVjdCdcbiAgfSBlbHNlIGlmIChcbiAgICBnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lciAmJlxuICAgIHR5cGVvZiBwb3N0TWVzc2FnZSA9PSAnZnVuY3Rpb24nICYmXG4gICAgIWdsb2JhbC5pbXBvcnRTY3JpcHRzICYmXG4gICAgbG9jYXRpb24gJiYgbG9jYXRpb24ucHJvdG9jb2wgIT09ICdmaWxlOicgJiZcbiAgICAhZmFpbHMocG9zdClcbiAgKSB7XG4gICAgZGVmZXIgPSBwb3N0O1xuICAgIGdsb2JhbC5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgbGlzdGVuZXIsIGZhbHNlKTtcbiAgLy8gSUU4LVxuICB9IGVsc2UgaWYgKE9OUkVBRFlTVEFURUNIQU5HRSBpbiBjcmVhdGVFbGVtZW50KCdzY3JpcHQnKSkge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBodG1sLmFwcGVuZENoaWxkKGNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpKVtPTlJFQURZU1RBVEVDSEFOR0VdID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBodG1sLnJlbW92ZUNoaWxkKHRoaXMpO1xuICAgICAgICBydW4oaWQpO1xuICAgICAgfTtcbiAgICB9O1xuICAvLyBSZXN0IG9sZCBicm93c2Vyc1xuICB9IGVsc2Uge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBzZXRUaW1lb3V0KHJ1bm5lcihpZCksIDApO1xuICAgIH07XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNldDogc2V0LFxuICBjbGVhcjogY2xlYXJcbn07XG4iLCJ2YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mLXJhdycpO1xuXG4vLyBgdGhpc051bWJlclZhbHVlYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtdGhpc251bWJlcnZhbHVlXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICBpZiAodHlwZW9mIHZhbHVlICE9ICdudW1iZXInICYmIGNsYXNzb2YodmFsdWUpICE9ICdOdW1iZXInKSB7XG4gICAgdGhyb3cgVHlwZUVycm9yKCdJbmNvcnJlY3QgaW52b2NhdGlvbicpO1xuICB9XG4gIHJldHVybiArdmFsdWU7XG59O1xuIiwidmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbnRlZ2VyJyk7XG5cbnZhciBtYXggPSBNYXRoLm1heDtcbnZhciBtaW4gPSBNYXRoLm1pbjtcblxuLy8gSGVscGVyIGZvciBhIHBvcHVsYXIgcmVwZWF0aW5nIGNhc2Ugb2YgdGhlIHNwZWM6XG4vLyBMZXQgaW50ZWdlciBiZSA/IFRvSW50ZWdlcihpbmRleCkuXG4vLyBJZiBpbnRlZ2VyIDwgMCwgbGV0IHJlc3VsdCBiZSBtYXgoKGxlbmd0aCArIGludGVnZXIpLCAwKTsgZWxzZSBsZXQgcmVzdWx0IGJlIG1pbihpbnRlZ2VyLCBsZW5ndGgpLlxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaW5kZXgsIGxlbmd0aCkge1xuICB2YXIgaW50ZWdlciA9IHRvSW50ZWdlcihpbmRleCk7XG4gIHJldHVybiBpbnRlZ2VyIDwgMCA/IG1heChpbnRlZ2VyICsgbGVuZ3RoLCAwKSA6IG1pbihpbnRlZ2VyLCBsZW5ndGgpO1xufTtcbiIsInZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW50ZWdlcicpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xuXG4vLyBgVG9JbmRleGAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXRvaW5kZXhcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpdCA9PT0gdW5kZWZpbmVkKSByZXR1cm4gMDtcbiAgdmFyIG51bWJlciA9IHRvSW50ZWdlcihpdCk7XG4gIHZhciBsZW5ndGggPSB0b0xlbmd0aChudW1iZXIpO1xuICBpZiAobnVtYmVyICE9PSBsZW5ndGgpIHRocm93IFJhbmdlRXJyb3IoJ1dyb25nIGxlbmd0aCBvciBpbmRleCcpO1xuICByZXR1cm4gbGVuZ3RoO1xufTtcbiIsIi8vIHRvT2JqZWN0IHdpdGggZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBzdHJpbmdzXG52YXIgSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbmRleGVkLW9iamVjdCcpO1xudmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBJbmRleGVkT2JqZWN0KHJlcXVpcmVPYmplY3RDb2VyY2libGUoaXQpKTtcbn07XG4iLCJ2YXIgY2VpbCA9IE1hdGguY2VpbDtcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG5cbi8vIGBUb0ludGVnZXJgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy10b2ludGVnZXJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIHJldHVybiBpc05hTihhcmd1bWVudCA9ICthcmd1bWVudCkgPyAwIDogKGFyZ3VtZW50ID4gMCA/IGZsb29yIDogY2VpbCkoYXJndW1lbnQpO1xufTtcbiIsInZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW50ZWdlcicpO1xuXG52YXIgbWluID0gTWF0aC5taW47XG5cbi8vIGBUb0xlbmd0aGAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXRvbGVuZ3RoXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICByZXR1cm4gYXJndW1lbnQgPiAwID8gbWluKHRvSW50ZWdlcihhcmd1bWVudCksIDB4MUZGRkZGRkZGRkZGRkYpIDogMDsgLy8gMiAqKiA1MyAtIDEgPT0gOTAwNzE5OTI1NDc0MDk5MVxufTtcbiIsInZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xuXG4vLyBgVG9PYmplY3RgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy10b29iamVjdFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgcmV0dXJuIE9iamVjdChyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKGFyZ3VtZW50KSk7XG59O1xuIiwidmFyIHRvUG9zaXRpdmVJbnRlZ2VyID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXBvc2l0aXZlLWludGVnZXInKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIEJZVEVTKSB7XG4gIHZhciBvZmZzZXQgPSB0b1Bvc2l0aXZlSW50ZWdlcihpdCk7XG4gIGlmIChvZmZzZXQgJSBCWVRFUykgdGhyb3cgUmFuZ2VFcnJvcignV3Jvbmcgb2Zmc2V0Jyk7XG4gIHJldHVybiBvZmZzZXQ7XG59O1xuIiwidmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbnRlZ2VyJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciByZXN1bHQgPSB0b0ludGVnZXIoaXQpO1xuICBpZiAocmVzdWx0IDwgMCkgdGhyb3cgUmFuZ2VFcnJvcihcIlRoZSBhcmd1bWVudCBjYW4ndCBiZSBsZXNzIHRoYW4gMFwiKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG5cbi8vIGBUb1ByaW1pdGl2ZWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXRvcHJpbWl0aXZlXG4vLyBpbnN0ZWFkIG9mIHRoZSBFUzYgc3BlYyB2ZXJzaW9uLCB3ZSBkaWRuJ3QgaW1wbGVtZW50IEBAdG9QcmltaXRpdmUgY2FzZVxuLy8gYW5kIHRoZSBzZWNvbmQgYXJndW1lbnQgLSBmbGFnIC0gcHJlZmVycmVkIHR5cGUgaXMgYSBzdHJpbmdcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGlucHV0LCBQUkVGRVJSRURfU1RSSU5HKSB7XG4gIGlmICghaXNPYmplY3QoaW5wdXQpKSByZXR1cm4gaW5wdXQ7XG4gIHZhciBmbiwgdmFsO1xuICBpZiAoUFJFRkVSUkVEX1NUUklORyAmJiB0eXBlb2YgKGZuID0gaW5wdXQudG9TdHJpbmcpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaW5wdXQpKSkgcmV0dXJuIHZhbDtcbiAgaWYgKHR5cGVvZiAoZm4gPSBpbnB1dC52YWx1ZU9mKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGlucHV0KSkpIHJldHVybiB2YWw7XG4gIGlmICghUFJFRkVSUkVEX1NUUklORyAmJiB0eXBlb2YgKGZuID0gaW5wdXQudG9TdHJpbmcpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaW5wdXQpKSkgcmV0dXJuIHZhbDtcbiAgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY29udmVydCBvYmplY3QgdG8gcHJpbWl0aXZlIHZhbHVlXCIpO1xufTtcbiIsInZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIFRPX1NUUklOR19UQUcgPSB3ZWxsS25vd25TeW1ib2woJ3RvU3RyaW5nVGFnJyk7XG52YXIgdGVzdCA9IHt9O1xuXG50ZXN0W1RPX1NUUklOR19UQUddID0gJ3onO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFN0cmluZyh0ZXN0KSA9PT0gJ1tvYmplY3Qgel0nO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgVFlQRURfQVJSQVlTX0NPTlNUUlVDVE9SU19SRVFVSVJFU19XUkFQUEVSUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90eXBlZC1hcnJheS1jb25zdHJ1Y3RvcnMtcmVxdWlyZS13cmFwcGVycycpO1xudmFyIEFycmF5QnVmZmVyVmlld0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLXZpZXctY29yZScpO1xudmFyIEFycmF5QnVmZmVyTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlcicpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4taW5zdGFuY2UnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG52YXIgdG9JbmRleCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleCcpO1xudmFyIHRvT2Zmc2V0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9mZnNldCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXByaW1pdGl2ZScpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWNyZWF0ZScpO1xudmFyIHNldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1zZXQtcHJvdG90eXBlLW9mJyk7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcycpLmY7XG52YXIgdHlwZWRBcnJheUZyb20gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdHlwZWQtYXJyYXktZnJvbScpO1xudmFyIGZvckVhY2ggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uJykuZm9yRWFjaDtcbnZhciBzZXRTcGVjaWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC1zcGVjaWVzJyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG52YXIgSW50ZXJuYWxTdGF0ZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZScpO1xudmFyIGluaGVyaXRJZlJlcXVpcmVkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2luaGVyaXQtaWYtcmVxdWlyZWQnKTtcblxudmFyIGdldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldDtcbnZhciBzZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5zZXQ7XG52YXIgbmF0aXZlRGVmaW5lUHJvcGVydHkgPSBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mO1xudmFyIG5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZS5mO1xudmFyIHJvdW5kID0gTWF0aC5yb3VuZDtcbnZhciBSYW5nZUVycm9yID0gZ2xvYmFsLlJhbmdlRXJyb3I7XG52YXIgQXJyYXlCdWZmZXIgPSBBcnJheUJ1ZmZlck1vZHVsZS5BcnJheUJ1ZmZlcjtcbnZhciBEYXRhVmlldyA9IEFycmF5QnVmZmVyTW9kdWxlLkRhdGFWaWV3O1xudmFyIE5BVElWRV9BUlJBWV9CVUZGRVJfVklFV1MgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLk5BVElWRV9BUlJBWV9CVUZGRVJfVklFV1M7XG52YXIgVFlQRURfQVJSQVlfVEFHID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5UWVBFRF9BUlJBWV9UQUc7XG52YXIgVHlwZWRBcnJheSA9IEFycmF5QnVmZmVyVmlld0NvcmUuVHlwZWRBcnJheTtcbnZhciBUeXBlZEFycmF5UHJvdG90eXBlID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5UeXBlZEFycmF5UHJvdG90eXBlO1xudmFyIGFUeXBlZEFycmF5Q29uc3RydWN0b3IgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmFUeXBlZEFycmF5Q29uc3RydWN0b3I7XG52YXIgaXNUeXBlZEFycmF5ID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5pc1R5cGVkQXJyYXk7XG52YXIgQllURVNfUEVSX0VMRU1FTlQgPSAnQllURVNfUEVSX0VMRU1FTlQnO1xudmFyIFdST05HX0xFTkdUSCA9ICdXcm9uZyBsZW5ndGgnO1xuXG52YXIgZnJvbUxpc3QgPSBmdW5jdGlvbiAoQywgbGlzdCkge1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgbGVuZ3RoID0gbGlzdC5sZW5ndGg7XG4gIHZhciByZXN1bHQgPSBuZXcgKGFUeXBlZEFycmF5Q29uc3RydWN0b3IoQykpKGxlbmd0aCk7XG4gIHdoaWxlIChsZW5ndGggPiBpbmRleCkgcmVzdWx0W2luZGV4XSA9IGxpc3RbaW5kZXgrK107XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG52YXIgYWRkR2V0dGVyID0gZnVuY3Rpb24gKGl0LCBrZXkpIHtcbiAgbmF0aXZlRGVmaW5lUHJvcGVydHkoaXQsIGtleSwgeyBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKVtrZXldO1xuICB9IH0pO1xufTtcblxudmFyIGlzQXJyYXlCdWZmZXIgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIGtsYXNzO1xuICByZXR1cm4gaXQgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlciB8fCAoa2xhc3MgPSBjbGFzc29mKGl0KSkgPT0gJ0FycmF5QnVmZmVyJyB8fCBrbGFzcyA9PSAnU2hhcmVkQXJyYXlCdWZmZXInO1xufTtcblxudmFyIGlzVHlwZWRBcnJheUluZGV4ID0gZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7XG4gIHJldHVybiBpc1R5cGVkQXJyYXkodGFyZ2V0KVxuICAgICYmIHR5cGVvZiBrZXkgIT0gJ3N5bWJvbCdcbiAgICAmJiBrZXkgaW4gdGFyZ2V0XG4gICAgJiYgU3RyaW5nKCtrZXkpID09IFN0cmluZyhrZXkpO1xufTtcblxudmFyIHdyYXBwZWRHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIHtcbiAgcmV0dXJuIGlzVHlwZWRBcnJheUluZGV4KHRhcmdldCwga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKSlcbiAgICA/IGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigyLCB0YXJnZXRba2V5XSlcbiAgICA6IG5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSk7XG59O1xuXG52YXIgd3JhcHBlZERlZmluZVByb3BlcnR5ID0gZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIGRlc2NyaXB0b3IpIHtcbiAgaWYgKGlzVHlwZWRBcnJheUluZGV4KHRhcmdldCwga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKSlcbiAgICAmJiBpc09iamVjdChkZXNjcmlwdG9yKVxuICAgICYmIGhhcyhkZXNjcmlwdG9yLCAndmFsdWUnKVxuICAgICYmICFoYXMoZGVzY3JpcHRvciwgJ2dldCcpXG4gICAgJiYgIWhhcyhkZXNjcmlwdG9yLCAnc2V0JylcbiAgICAvLyBUT0RPOiBhZGQgdmFsaWRhdGlvbiBkZXNjcmlwdG9yIHcvbyBjYWxsaW5nIGFjY2Vzc29yc1xuICAgICYmICFkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZVxuICAgICYmICghaGFzKGRlc2NyaXB0b3IsICd3cml0YWJsZScpIHx8IGRlc2NyaXB0b3Iud3JpdGFibGUpXG4gICAgJiYgKCFoYXMoZGVzY3JpcHRvciwgJ2VudW1lcmFibGUnKSB8fCBkZXNjcmlwdG9yLmVudW1lcmFibGUpXG4gICkge1xuICAgIHRhcmdldFtrZXldID0gZGVzY3JpcHRvci52YWx1ZTtcbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9IHJldHVybiBuYXRpdmVEZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgZGVzY3JpcHRvcik7XG59O1xuXG5pZiAoREVTQ1JJUFRPUlMpIHtcbiAgaWYgKCFOQVRJVkVfQVJSQVlfQlVGRkVSX1ZJRVdTKSB7XG4gICAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlLmYgPSB3cmFwcGVkR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuICAgIGRlZmluZVByb3BlcnR5TW9kdWxlLmYgPSB3cmFwcGVkRGVmaW5lUHJvcGVydHk7XG4gICAgYWRkR2V0dGVyKFR5cGVkQXJyYXlQcm90b3R5cGUsICdidWZmZXInKTtcbiAgICBhZGRHZXR0ZXIoVHlwZWRBcnJheVByb3RvdHlwZSwgJ2J5dGVPZmZzZXQnKTtcbiAgICBhZGRHZXR0ZXIoVHlwZWRBcnJheVByb3RvdHlwZSwgJ2J5dGVMZW5ndGgnKTtcbiAgICBhZGRHZXR0ZXIoVHlwZWRBcnJheVByb3RvdHlwZSwgJ2xlbmd0aCcpO1xuICB9XG5cbiAgJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogIU5BVElWRV9BUlJBWV9CVUZGRVJfVklFV1MgfSwge1xuICAgIGdldE93blByb3BlcnR5RGVzY3JpcHRvcjogd3JhcHBlZEdldE93blByb3BlcnR5RGVzY3JpcHRvcixcbiAgICBkZWZpbmVQcm9wZXJ0eTogd3JhcHBlZERlZmluZVByb3BlcnR5XG4gIH0pO1xuXG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFRZUEUsIHdyYXBwZXIsIENMQU1QRUQpIHtcbiAgICB2YXIgQllURVMgPSBUWVBFLm1hdGNoKC9cXGQrJC8pWzBdIC8gODtcbiAgICB2YXIgQ09OU1RSVUNUT1JfTkFNRSA9IFRZUEUgKyAoQ0xBTVBFRCA/ICdDbGFtcGVkJyA6ICcnKSArICdBcnJheSc7XG4gICAgdmFyIEdFVFRFUiA9ICdnZXQnICsgVFlQRTtcbiAgICB2YXIgU0VUVEVSID0gJ3NldCcgKyBUWVBFO1xuICAgIHZhciBOYXRpdmVUeXBlZEFycmF5Q29uc3RydWN0b3IgPSBnbG9iYWxbQ09OU1RSVUNUT1JfTkFNRV07XG4gICAgdmFyIFR5cGVkQXJyYXlDb25zdHJ1Y3RvciA9IE5hdGl2ZVR5cGVkQXJyYXlDb25zdHJ1Y3RvcjtcbiAgICB2YXIgVHlwZWRBcnJheUNvbnN0cnVjdG9yUHJvdG90eXBlID0gVHlwZWRBcnJheUNvbnN0cnVjdG9yICYmIFR5cGVkQXJyYXlDb25zdHJ1Y3Rvci5wcm90b3R5cGU7XG4gICAgdmFyIGV4cG9ydGVkID0ge307XG5cbiAgICB2YXIgZ2V0dGVyID0gZnVuY3Rpb24gKHRoYXQsIGluZGV4KSB7XG4gICAgICB2YXIgZGF0YSA9IGdldEludGVybmFsU3RhdGUodGhhdCk7XG4gICAgICByZXR1cm4gZGF0YS52aWV3W0dFVFRFUl0oaW5kZXggKiBCWVRFUyArIGRhdGEuYnl0ZU9mZnNldCwgdHJ1ZSk7XG4gICAgfTtcblxuICAgIHZhciBzZXR0ZXIgPSBmdW5jdGlvbiAodGhhdCwgaW5kZXgsIHZhbHVlKSB7XG4gICAgICB2YXIgZGF0YSA9IGdldEludGVybmFsU3RhdGUodGhhdCk7XG4gICAgICBpZiAoQ0xBTVBFRCkgdmFsdWUgPSAodmFsdWUgPSByb3VuZCh2YWx1ZSkpIDwgMCA/IDAgOiB2YWx1ZSA+IDB4RkYgPyAweEZGIDogdmFsdWUgJiAweEZGO1xuICAgICAgZGF0YS52aWV3W1NFVFRFUl0oaW5kZXggKiBCWVRFUyArIGRhdGEuYnl0ZU9mZnNldCwgdmFsdWUsIHRydWUpO1xuICAgIH07XG5cbiAgICB2YXIgYWRkRWxlbWVudCA9IGZ1bmN0aW9uICh0aGF0LCBpbmRleCkge1xuICAgICAgbmF0aXZlRGVmaW5lUHJvcGVydHkodGhhdCwgaW5kZXgsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIGdldHRlcih0aGlzLCBpbmRleCk7XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuIHNldHRlcih0aGlzLCBpbmRleCwgdmFsdWUpO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlXG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgaWYgKCFOQVRJVkVfQVJSQVlfQlVGRkVSX1ZJRVdTKSB7XG4gICAgICBUeXBlZEFycmF5Q29uc3RydWN0b3IgPSB3cmFwcGVyKGZ1bmN0aW9uICh0aGF0LCBkYXRhLCBvZmZzZXQsICRsZW5ndGgpIHtcbiAgICAgICAgYW5JbnN0YW5jZSh0aGF0LCBUeXBlZEFycmF5Q29uc3RydWN0b3IsIENPTlNUUlVDVE9SX05BTUUpO1xuICAgICAgICB2YXIgaW5kZXggPSAwO1xuICAgICAgICB2YXIgYnl0ZU9mZnNldCA9IDA7XG4gICAgICAgIHZhciBidWZmZXIsIGJ5dGVMZW5ndGgsIGxlbmd0aDtcbiAgICAgICAgaWYgKCFpc09iamVjdChkYXRhKSkge1xuICAgICAgICAgIGxlbmd0aCA9IHRvSW5kZXgoZGF0YSk7XG4gICAgICAgICAgYnl0ZUxlbmd0aCA9IGxlbmd0aCAqIEJZVEVTO1xuICAgICAgICAgIGJ1ZmZlciA9IG5ldyBBcnJheUJ1ZmZlcihieXRlTGVuZ3RoKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc0FycmF5QnVmZmVyKGRhdGEpKSB7XG4gICAgICAgICAgYnVmZmVyID0gZGF0YTtcbiAgICAgICAgICBieXRlT2Zmc2V0ID0gdG9PZmZzZXQob2Zmc2V0LCBCWVRFUyk7XG4gICAgICAgICAgdmFyICRsZW4gPSBkYXRhLmJ5dGVMZW5ndGg7XG4gICAgICAgICAgaWYgKCRsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaWYgKCRsZW4gJSBCWVRFUykgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpO1xuICAgICAgICAgICAgYnl0ZUxlbmd0aCA9ICRsZW4gLSBieXRlT2Zmc2V0O1xuICAgICAgICAgICAgaWYgKGJ5dGVMZW5ndGggPCAwKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGJ5dGVMZW5ndGggPSB0b0xlbmd0aCgkbGVuZ3RoKSAqIEJZVEVTO1xuICAgICAgICAgICAgaWYgKGJ5dGVMZW5ndGggKyBieXRlT2Zmc2V0ID4gJGxlbikgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBsZW5ndGggPSBieXRlTGVuZ3RoIC8gQllURVM7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNUeXBlZEFycmF5KGRhdGEpKSB7XG4gICAgICAgICAgcmV0dXJuIGZyb21MaXN0KFR5cGVkQXJyYXlDb25zdHJ1Y3RvciwgZGF0YSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIHR5cGVkQXJyYXlGcm9tLmNhbGwoVHlwZWRBcnJheUNvbnN0cnVjdG9yLCBkYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBzZXRJbnRlcm5hbFN0YXRlKHRoYXQsIHtcbiAgICAgICAgICBidWZmZXI6IGJ1ZmZlcixcbiAgICAgICAgICBieXRlT2Zmc2V0OiBieXRlT2Zmc2V0LFxuICAgICAgICAgIGJ5dGVMZW5ndGg6IGJ5dGVMZW5ndGgsXG4gICAgICAgICAgbGVuZ3RoOiBsZW5ndGgsXG4gICAgICAgICAgdmlldzogbmV3IERhdGFWaWV3KGJ1ZmZlcilcbiAgICAgICAgfSk7XG4gICAgICAgIHdoaWxlIChpbmRleCA8IGxlbmd0aCkgYWRkRWxlbWVudCh0aGF0LCBpbmRleCsrKTtcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoc2V0UHJvdG90eXBlT2YpIHNldFByb3RvdHlwZU9mKFR5cGVkQXJyYXlDb25zdHJ1Y3RvciwgVHlwZWRBcnJheSk7XG4gICAgICBUeXBlZEFycmF5Q29uc3RydWN0b3JQcm90b3R5cGUgPSBUeXBlZEFycmF5Q29uc3RydWN0b3IucHJvdG90eXBlID0gY3JlYXRlKFR5cGVkQXJyYXlQcm90b3R5cGUpO1xuICAgIH0gZWxzZSBpZiAoVFlQRURfQVJSQVlTX0NPTlNUUlVDVE9SU19SRVFVSVJFU19XUkFQUEVSUykge1xuICAgICAgVHlwZWRBcnJheUNvbnN0cnVjdG9yID0gd3JhcHBlcihmdW5jdGlvbiAoZHVtbXksIGRhdGEsIHR5cGVkQXJyYXlPZmZzZXQsICRsZW5ndGgpIHtcbiAgICAgICAgYW5JbnN0YW5jZShkdW1teSwgVHlwZWRBcnJheUNvbnN0cnVjdG9yLCBDT05TVFJVQ1RPUl9OQU1FKTtcbiAgICAgICAgcmV0dXJuIGluaGVyaXRJZlJlcXVpcmVkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBpZiAoIWlzT2JqZWN0KGRhdGEpKSByZXR1cm4gbmV3IE5hdGl2ZVR5cGVkQXJyYXlDb25zdHJ1Y3Rvcih0b0luZGV4KGRhdGEpKTtcbiAgICAgICAgICBpZiAoaXNBcnJheUJ1ZmZlcihkYXRhKSkgcmV0dXJuICRsZW5ndGggIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgPyBuZXcgTmF0aXZlVHlwZWRBcnJheUNvbnN0cnVjdG9yKGRhdGEsIHRvT2Zmc2V0KHR5cGVkQXJyYXlPZmZzZXQsIEJZVEVTKSwgJGxlbmd0aClcbiAgICAgICAgICAgIDogdHlwZWRBcnJheU9mZnNldCAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgID8gbmV3IE5hdGl2ZVR5cGVkQXJyYXlDb25zdHJ1Y3RvcihkYXRhLCB0b09mZnNldCh0eXBlZEFycmF5T2Zmc2V0LCBCWVRFUykpXG4gICAgICAgICAgICAgIDogbmV3IE5hdGl2ZVR5cGVkQXJyYXlDb25zdHJ1Y3RvcihkYXRhKTtcbiAgICAgICAgICBpZiAoaXNUeXBlZEFycmF5KGRhdGEpKSByZXR1cm4gZnJvbUxpc3QoVHlwZWRBcnJheUNvbnN0cnVjdG9yLCBkYXRhKTtcbiAgICAgICAgICByZXR1cm4gdHlwZWRBcnJheUZyb20uY2FsbChUeXBlZEFycmF5Q29uc3RydWN0b3IsIGRhdGEpO1xuICAgICAgICB9KCksIGR1bW15LCBUeXBlZEFycmF5Q29uc3RydWN0b3IpO1xuICAgICAgfSk7XG5cbiAgICAgIGlmIChzZXRQcm90b3R5cGVPZikgc2V0UHJvdG90eXBlT2YoVHlwZWRBcnJheUNvbnN0cnVjdG9yLCBUeXBlZEFycmF5KTtcbiAgICAgIGZvckVhY2goZ2V0T3duUHJvcGVydHlOYW1lcyhOYXRpdmVUeXBlZEFycmF5Q29uc3RydWN0b3IpLCBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIGlmICghKGtleSBpbiBUeXBlZEFycmF5Q29uc3RydWN0b3IpKSB7XG4gICAgICAgICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KFR5cGVkQXJyYXlDb25zdHJ1Y3Rvciwga2V5LCBOYXRpdmVUeXBlZEFycmF5Q29uc3RydWN0b3Jba2V5XSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgVHlwZWRBcnJheUNvbnN0cnVjdG9yLnByb3RvdHlwZSA9IFR5cGVkQXJyYXlDb25zdHJ1Y3RvclByb3RvdHlwZTtcbiAgICB9XG5cbiAgICBpZiAoVHlwZWRBcnJheUNvbnN0cnVjdG9yUHJvdG90eXBlLmNvbnN0cnVjdG9yICE9PSBUeXBlZEFycmF5Q29uc3RydWN0b3IpIHtcbiAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShUeXBlZEFycmF5Q29uc3RydWN0b3JQcm90b3R5cGUsICdjb25zdHJ1Y3RvcicsIFR5cGVkQXJyYXlDb25zdHJ1Y3Rvcik7XG4gICAgfVxuXG4gICAgaWYgKFRZUEVEX0FSUkFZX1RBRykge1xuICAgICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KFR5cGVkQXJyYXlDb25zdHJ1Y3RvclByb3RvdHlwZSwgVFlQRURfQVJSQVlfVEFHLCBDT05TVFJVQ1RPUl9OQU1FKTtcbiAgICB9XG5cbiAgICBleHBvcnRlZFtDT05TVFJVQ1RPUl9OQU1FXSA9IFR5cGVkQXJyYXlDb25zdHJ1Y3RvcjtcblxuICAgICQoe1xuICAgICAgZ2xvYmFsOiB0cnVlLCBmb3JjZWQ6IFR5cGVkQXJyYXlDb25zdHJ1Y3RvciAhPSBOYXRpdmVUeXBlZEFycmF5Q29uc3RydWN0b3IsIHNoYW06ICFOQVRJVkVfQVJSQVlfQlVGRkVSX1ZJRVdTXG4gICAgfSwgZXhwb3J0ZWQpO1xuXG4gICAgaWYgKCEoQllURVNfUEVSX0VMRU1FTlQgaW4gVHlwZWRBcnJheUNvbnN0cnVjdG9yKSkge1xuICAgICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KFR5cGVkQXJyYXlDb25zdHJ1Y3RvciwgQllURVNfUEVSX0VMRU1FTlQsIEJZVEVTKTtcbiAgICB9XG5cbiAgICBpZiAoIShCWVRFU19QRVJfRUxFTUVOVCBpbiBUeXBlZEFycmF5Q29uc3RydWN0b3JQcm90b3R5cGUpKSB7XG4gICAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoVHlwZWRBcnJheUNvbnN0cnVjdG9yUHJvdG90eXBlLCBCWVRFU19QRVJfRUxFTUVOVCwgQllURVMpO1xuICAgIH1cblxuICAgIHNldFNwZWNpZXMoQ09OU1RSVUNUT1JfTkFNRSk7XG4gIH07XG59IGVsc2UgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH07XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBuby1uZXcgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmcgKi9cbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBjaGVja0NvcnJlY3RuZXNzT2ZJdGVyYXRpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2hlY2stY29ycmVjdG5lc3Mtb2YtaXRlcmF0aW9uJyk7XG52YXIgTkFUSVZFX0FSUkFZX0JVRkZFUl9WSUVXUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlJykuTkFUSVZFX0FSUkFZX0JVRkZFUl9WSUVXUztcblxudmFyIEFycmF5QnVmZmVyID0gZ2xvYmFsLkFycmF5QnVmZmVyO1xudmFyIEludDhBcnJheSA9IGdsb2JhbC5JbnQ4QXJyYXk7XG5cbm1vZHVsZS5leHBvcnRzID0gIU5BVElWRV9BUlJBWV9CVUZGRVJfVklFV1MgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgSW50OEFycmF5KDEpO1xufSkgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgbmV3IEludDhBcnJheSgtMSk7XG59KSB8fCAhY2hlY2tDb3JyZWN0bmVzc09mSXRlcmF0aW9uKGZ1bmN0aW9uIChpdGVyYWJsZSkge1xuICBuZXcgSW50OEFycmF5KCk7XG4gIG5ldyBJbnQ4QXJyYXkobnVsbCk7XG4gIG5ldyBJbnQ4QXJyYXkoMS41KTtcbiAgbmV3IEludDhBcnJheShpdGVyYWJsZSk7XG59LCB0cnVlKSB8fCBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIFNhZmFyaSAoMTErKSBidWcgLSBhIHJlYXNvbiB3aHkgZXZlbiBTYWZhcmkgMTMgc2hvdWxkIGxvYWQgYSB0eXBlZCBhcnJheSBwb2x5ZmlsbFxuICByZXR1cm4gbmV3IEludDhBcnJheShuZXcgQXJyYXlCdWZmZXIoMiksIDEsIHVuZGVmaW5lZCkubGVuZ3RoICE9PSAxO1xufSk7XG4iLCJ2YXIgYVR5cGVkQXJyYXlDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlJykuYVR5cGVkQXJyYXlDb25zdHJ1Y3RvcjtcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpbnN0YW5jZSwgbGlzdCkge1xuICB2YXIgQyA9IHNwZWNpZXNDb25zdHJ1Y3RvcihpbnN0YW5jZSwgaW5zdGFuY2UuY29uc3RydWN0b3IpO1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgbGVuZ3RoID0gbGlzdC5sZW5ndGg7XG4gIHZhciByZXN1bHQgPSBuZXcgKGFUeXBlZEFycmF5Q29uc3RydWN0b3IoQykpKGxlbmd0aCk7XG4gIHdoaWxlIChsZW5ndGggPiBpbmRleCkgcmVzdWx0W2luZGV4XSA9IGxpc3RbaW5kZXgrK107XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwidmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xudmFyIGdldEl0ZXJhdG9yTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1pdGVyYXRvci1tZXRob2QnKTtcbnZhciBpc0FycmF5SXRlcmF0b3JNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtYXJyYXktaXRlcmF0b3ItbWV0aG9kJyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLWNvbnRleHQnKTtcbnZhciBhVHlwZWRBcnJheUNvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci12aWV3LWNvcmUnKS5hVHlwZWRBcnJheUNvbnN0cnVjdG9yO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGZyb20oc291cmNlIC8qICwgbWFwZm4sIHRoaXNBcmcgKi8pIHtcbiAgdmFyIE8gPSB0b09iamVjdChzb3VyY2UpO1xuICB2YXIgYXJndW1lbnRzTGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgdmFyIG1hcGZuID0gYXJndW1lbnRzTGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZDtcbiAgdmFyIG1hcHBpbmcgPSBtYXBmbiAhPT0gdW5kZWZpbmVkO1xuICB2YXIgaXRlcmF0b3JNZXRob2QgPSBnZXRJdGVyYXRvck1ldGhvZChPKTtcbiAgdmFyIGksIGxlbmd0aCwgcmVzdWx0LCBzdGVwLCBpdGVyYXRvciwgbmV4dDtcbiAgaWYgKGl0ZXJhdG9yTWV0aG9kICE9IHVuZGVmaW5lZCAmJiAhaXNBcnJheUl0ZXJhdG9yTWV0aG9kKGl0ZXJhdG9yTWV0aG9kKSkge1xuICAgIGl0ZXJhdG9yID0gaXRlcmF0b3JNZXRob2QuY2FsbChPKTtcbiAgICBuZXh0ID0gaXRlcmF0b3IubmV4dDtcbiAgICBPID0gW107XG4gICAgd2hpbGUgKCEoc3RlcCA9IG5leHQuY2FsbChpdGVyYXRvcikpLmRvbmUpIHtcbiAgICAgIE8ucHVzaChzdGVwLnZhbHVlKTtcbiAgICB9XG4gIH1cbiAgaWYgKG1hcHBpbmcgJiYgYXJndW1lbnRzTGVuZ3RoID4gMikge1xuICAgIG1hcGZuID0gYmluZChtYXBmbiwgYXJndW1lbnRzWzJdLCAyKTtcbiAgfVxuICBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gIHJlc3VsdCA9IG5ldyAoYVR5cGVkQXJyYXlDb25zdHJ1Y3Rvcih0aGlzKSkobGVuZ3RoKTtcbiAgZm9yIChpID0gMDsgbGVuZ3RoID4gaTsgaSsrKSB7XG4gICAgcmVzdWx0W2ldID0gbWFwcGluZyA/IG1hcGZuKE9baV0sIGkpIDogT1tpXTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsInZhciBpZCA9IDA7XG52YXIgcG9zdGZpeCA9IE1hdGgucmFuZG9tKCk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4gJ1N5bWJvbCgnICsgU3RyaW5nKGtleSA9PT0gdW5kZWZpbmVkID8gJycgOiBrZXkpICsgJylfJyArICgrK2lkICsgcG9zdGZpeCkudG9TdHJpbmcoMzYpO1xufTtcbiIsInZhciBOQVRJVkVfU1lNQk9MID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25hdGl2ZS1zeW1ib2wnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBOQVRJVkVfU1lNQk9MXG4gIC8qIGdsb2JhbCBTeW1ib2wgLS0gc2FmZSAqL1xuICAmJiAhU3ltYm9sLnNoYW1cbiAgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PSAnc3ltYm9sJztcbiIsInZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxuZXhwb3J0cy5mID0gd2VsbEtub3duU3ltYm9sO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBzaGFyZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy91aWQnKTtcbnZhciBOQVRJVkVfU1lNQk9MID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25hdGl2ZS1zeW1ib2wnKTtcbnZhciBVU0VfU1lNQk9MX0FTX1VJRCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy91c2Utc3ltYm9sLWFzLXVpZCcpO1xuXG52YXIgV2VsbEtub3duU3ltYm9sc1N0b3JlID0gc2hhcmVkKCd3a3MnKTtcbnZhciBTeW1ib2wgPSBnbG9iYWwuU3ltYm9sO1xudmFyIGNyZWF0ZVdlbGxLbm93blN5bWJvbCA9IFVTRV9TWU1CT0xfQVNfVUlEID8gU3ltYm9sIDogU3ltYm9sICYmIFN5bWJvbC53aXRob3V0U2V0dGVyIHx8IHVpZDtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobmFtZSkge1xuICBpZiAoIWhhcyhXZWxsS25vd25TeW1ib2xzU3RvcmUsIG5hbWUpIHx8ICEoTkFUSVZFX1NZTUJPTCB8fCB0eXBlb2YgV2VsbEtub3duU3ltYm9sc1N0b3JlW25hbWVdID09ICdzdHJpbmcnKSkge1xuICAgIGlmIChOQVRJVkVfU1lNQk9MICYmIGhhcyhTeW1ib2wsIG5hbWUpKSB7XG4gICAgICBXZWxsS25vd25TeW1ib2xzU3RvcmVbbmFtZV0gPSBTeW1ib2xbbmFtZV07XG4gICAgfSBlbHNlIHtcbiAgICAgIFdlbGxLbm93blN5bWJvbHNTdG9yZVtuYW1lXSA9IGNyZWF0ZVdlbGxLbm93blN5bWJvbCgnU3ltYm9sLicgKyBuYW1lKTtcbiAgICB9XG4gIH0gcmV0dXJuIFdlbGxLbm93blN5bWJvbHNTdG9yZVtuYW1lXTtcbn07XG4iLCIvLyBhIHN0cmluZyBvZiBhbGwgdmFsaWQgdW5pY29kZSB3aGl0ZXNwYWNlc1xubW9kdWxlLmV4cG9ydHMgPSAnXFx1MDAwOVxcdTAwMEFcXHUwMDBCXFx1MDAwQ1xcdTAwMERcXHUwMDIwXFx1MDBBMFxcdTE2ODBcXHUyMDAwXFx1MjAwMVxcdTIwMDInICtcbiAgJ1xcdTIwMDNcXHUyMDA0XFx1MjAwNVxcdTIwMDZcXHUyMDA3XFx1MjAwOFxcdTIwMDlcXHUyMDBBXFx1MjAyRlxcdTIwNUZcXHUzMDAwXFx1MjAyOFxcdTIwMjlcXHVGRUZGJztcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtcHJvdG90eXBlLW9mJyk7XG52YXIgc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXNldC1wcm90b3R5cGUtb2YnKTtcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWNyZWF0ZScpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcbnZhciBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnZhciBpdGVyYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdGUnKTtcblxudmFyICRBZ2dyZWdhdGVFcnJvciA9IGZ1bmN0aW9uIEFnZ3JlZ2F0ZUVycm9yKGVycm9ycywgbWVzc2FnZSkge1xuICB2YXIgdGhhdCA9IHRoaXM7XG4gIGlmICghKHRoYXQgaW5zdGFuY2VvZiAkQWdncmVnYXRlRXJyb3IpKSByZXR1cm4gbmV3ICRBZ2dyZWdhdGVFcnJvcihlcnJvcnMsIG1lc3NhZ2UpO1xuICBpZiAoc2V0UHJvdG90eXBlT2YpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgdW5pY29ybi9lcnJvci1tZXNzYWdlIC0tIGV4cGVjdGVkXG4gICAgdGhhdCA9IHNldFByb3RvdHlwZU9mKG5ldyBFcnJvcih1bmRlZmluZWQpLCBnZXRQcm90b3R5cGVPZih0aGF0KSk7XG4gIH1cbiAgaWYgKG1lc3NhZ2UgIT09IHVuZGVmaW5lZCkgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KHRoYXQsICdtZXNzYWdlJywgU3RyaW5nKG1lc3NhZ2UpKTtcbiAgdmFyIGVycm9yc0FycmF5ID0gW107XG4gIGl0ZXJhdGUoZXJyb3JzLCBlcnJvcnNBcnJheS5wdXNoLCB7IHRoYXQ6IGVycm9yc0FycmF5IH0pO1xuICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkodGhhdCwgJ2Vycm9ycycsIGVycm9yc0FycmF5KTtcbiAgcmV0dXJuIHRoYXQ7XG59O1xuXG4kQWdncmVnYXRlRXJyb3IucHJvdG90eXBlID0gY3JlYXRlKEVycm9yLnByb3RvdHlwZSwge1xuICBjb25zdHJ1Y3RvcjogY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDUsICRBZ2dyZWdhdGVFcnJvciksXG4gIG1lc3NhZ2U6IGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcig1LCAnJyksXG4gIG5hbWU6IGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcig1LCAnQWdncmVnYXRlRXJyb3InKVxufSk7XG5cbi8vIGBBZ2dyZWdhdGVFcnJvcmAgY29uc3RydWN0b3Jcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYWdncmVnYXRlLWVycm9yLWNvbnN0cnVjdG9yXG4kKHsgZ2xvYmFsOiB0cnVlIH0sIHtcbiAgQWdncmVnYXRlRXJyb3I6ICRBZ2dyZWdhdGVFcnJvclxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgYXJyYXlCdWZmZXJNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyJyk7XG52YXIgc2V0U3BlY2llcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtc3BlY2llcycpO1xuXG52YXIgQVJSQVlfQlVGRkVSID0gJ0FycmF5QnVmZmVyJztcbnZhciBBcnJheUJ1ZmZlciA9IGFycmF5QnVmZmVyTW9kdWxlW0FSUkFZX0JVRkZFUl07XG52YXIgTmF0aXZlQXJyYXlCdWZmZXIgPSBnbG9iYWxbQVJSQVlfQlVGRkVSXTtcblxuLy8gYEFycmF5QnVmZmVyYCBjb25zdHJ1Y3RvclxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheWJ1ZmZlci1jb25zdHJ1Y3RvclxuJCh7IGdsb2JhbDogdHJ1ZSwgZm9yY2VkOiBOYXRpdmVBcnJheUJ1ZmZlciAhPT0gQXJyYXlCdWZmZXIgfSwge1xuICBBcnJheUJ1ZmZlcjogQXJyYXlCdWZmZXJcbn0pO1xuXG5zZXRTcGVjaWVzKEFSUkFZX0JVRkZFUik7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBBcnJheUJ1ZmZlclZpZXdDb3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci12aWV3LWNvcmUnKTtcblxudmFyIE5BVElWRV9BUlJBWV9CVUZGRVJfVklFV1MgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLk5BVElWRV9BUlJBWV9CVUZGRVJfVklFV1M7XG5cbi8vIGBBcnJheUJ1ZmZlci5pc1ZpZXdgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheWJ1ZmZlci5pc3ZpZXdcbiQoeyB0YXJnZXQ6ICdBcnJheUJ1ZmZlcicsIHN0YXQ6IHRydWUsIGZvcmNlZDogIU5BVElWRV9BUlJBWV9CVUZGRVJfVklFV1MgfSwge1xuICBpc1ZpZXc6IEFycmF5QnVmZmVyVmlld0NvcmUuaXNWaWV3XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgQXJyYXlCdWZmZXJNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NwZWNpZXMtY29uc3RydWN0b3InKTtcblxudmFyIEFycmF5QnVmZmVyID0gQXJyYXlCdWZmZXJNb2R1bGUuQXJyYXlCdWZmZXI7XG52YXIgRGF0YVZpZXcgPSBBcnJheUJ1ZmZlck1vZHVsZS5EYXRhVmlldztcbnZhciBuYXRpdmVBcnJheUJ1ZmZlclNsaWNlID0gQXJyYXlCdWZmZXIucHJvdG90eXBlLnNsaWNlO1xuXG52YXIgSU5DT1JSRUNUX1NMSUNFID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gIW5ldyBBcnJheUJ1ZmZlcigyKS5zbGljZSgxLCB1bmRlZmluZWQpLmJ5dGVMZW5ndGg7XG59KTtcblxuLy8gYEFycmF5QnVmZmVyLnByb3RvdHlwZS5zbGljZWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5YnVmZmVyLnByb3RvdHlwZS5zbGljZVxuJCh7IHRhcmdldDogJ0FycmF5QnVmZmVyJywgcHJvdG86IHRydWUsIHVuc2FmZTogdHJ1ZSwgZm9yY2VkOiBJTkNPUlJFQ1RfU0xJQ0UgfSwge1xuICBzbGljZTogZnVuY3Rpb24gc2xpY2Uoc3RhcnQsIGVuZCkge1xuICAgIGlmIChuYXRpdmVBcnJheUJ1ZmZlclNsaWNlICE9PSB1bmRlZmluZWQgJiYgZW5kID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBuYXRpdmVBcnJheUJ1ZmZlclNsaWNlLmNhbGwoYW5PYmplY3QodGhpcyksIHN0YXJ0KTsgLy8gRkYgZml4XG4gICAgfVxuICAgIHZhciBsZW5ndGggPSBhbk9iamVjdCh0aGlzKS5ieXRlTGVuZ3RoO1xuICAgIHZhciBmaXJzdCA9IHRvQWJzb2x1dGVJbmRleChzdGFydCwgbGVuZ3RoKTtcbiAgICB2YXIgZmluID0gdG9BYnNvbHV0ZUluZGV4KGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuZ3RoIDogZW5kLCBsZW5ndGgpO1xuICAgIHZhciByZXN1bHQgPSBuZXcgKHNwZWNpZXNDb25zdHJ1Y3Rvcih0aGlzLCBBcnJheUJ1ZmZlcikpKHRvTGVuZ3RoKGZpbiAtIGZpcnN0KSk7XG4gICAgdmFyIHZpZXdTb3VyY2UgPSBuZXcgRGF0YVZpZXcodGhpcyk7XG4gICAgdmFyIHZpZXdUYXJnZXQgPSBuZXcgRGF0YVZpZXcocmVzdWx0KTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHdoaWxlIChmaXJzdCA8IGZpbikge1xuICAgICAgdmlld1RhcmdldC5zZXRVaW50OChpbmRleCsrLCB2aWV3U291cmNlLmdldFVpbnQ4KGZpcnN0KyspKTtcbiAgICB9IHJldHVybiByZXN1bHQ7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWFycmF5Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5Jyk7XG52YXIgYXJyYXlTcGVjaWVzQ3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LXNwZWNpZXMtY3JlYXRlJyk7XG52YXIgYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1tZXRob2QtaGFzLXNwZWNpZXMtc3VwcG9ydCcpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIFY4X1ZFUlNJT04gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLXY4LXZlcnNpb24nKTtcblxudmFyIElTX0NPTkNBVF9TUFJFQURBQkxFID0gd2VsbEtub3duU3ltYm9sKCdpc0NvbmNhdFNwcmVhZGFibGUnKTtcbnZhciBNQVhfU0FGRV9JTlRFR0VSID0gMHgxRkZGRkZGRkZGRkZGRjtcbnZhciBNQVhJTVVNX0FMTE9XRURfSU5ERVhfRVhDRUVERUQgPSAnTWF4aW11bSBhbGxvd2VkIGluZGV4IGV4Y2VlZGVkJztcblxuLy8gV2UgY2FuJ3QgdXNlIHRoaXMgZmVhdHVyZSBkZXRlY3Rpb24gaW4gVjggc2luY2UgaXQgY2F1c2VzXG4vLyBkZW9wdGltaXphdGlvbiBhbmQgc2VyaW91cyBwZXJmb3JtYW5jZSBkZWdyYWRhdGlvblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzY3OVxudmFyIElTX0NPTkNBVF9TUFJFQURBQkxFX1NVUFBPUlQgPSBWOF9WRVJTSU9OID49IDUxIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHZhciBhcnJheSA9IFtdO1xuICBhcnJheVtJU19DT05DQVRfU1BSRUFEQUJMRV0gPSBmYWxzZTtcbiAgcmV0dXJuIGFycmF5LmNvbmNhdCgpWzBdICE9PSBhcnJheTtcbn0pO1xuXG52YXIgU1BFQ0lFU19TVVBQT1JUID0gYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCgnY29uY2F0Jyk7XG5cbnZhciBpc0NvbmNhdFNwcmVhZGFibGUgPSBmdW5jdGlvbiAoTykge1xuICBpZiAoIWlzT2JqZWN0KE8pKSByZXR1cm4gZmFsc2U7XG4gIHZhciBzcHJlYWRhYmxlID0gT1tJU19DT05DQVRfU1BSRUFEQUJMRV07XG4gIHJldHVybiBzcHJlYWRhYmxlICE9PSB1bmRlZmluZWQgPyAhIXNwcmVhZGFibGUgOiBpc0FycmF5KE8pO1xufTtcblxudmFyIEZPUkNFRCA9ICFJU19DT05DQVRfU1BSRUFEQUJMRV9TVVBQT1JUIHx8ICFTUEVDSUVTX1NVUFBPUlQ7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuY29uY2F0YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmNvbmNhdFxuLy8gd2l0aCBhZGRpbmcgc3VwcG9ydCBvZiBAQGlzQ29uY2F0U3ByZWFkYWJsZSBhbmQgQEBzcGVjaWVzXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBGT1JDRUQgfSwge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnMgLS0gcmVxdWlyZWQgZm9yIGAubGVuZ3RoYFxuICBjb25jYXQ6IGZ1bmN0aW9uIGNvbmNhdChhcmcpIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICAgIHZhciBBID0gYXJyYXlTcGVjaWVzQ3JlYXRlKE8sIDApO1xuICAgIHZhciBuID0gMDtcbiAgICB2YXIgaSwgaywgbGVuZ3RoLCBsZW4sIEU7XG4gICAgZm9yIChpID0gLTEsIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgRSA9IGkgPT09IC0xID8gTyA6IGFyZ3VtZW50c1tpXTtcbiAgICAgIGlmIChpc0NvbmNhdFNwcmVhZGFibGUoRSkpIHtcbiAgICAgICAgbGVuID0gdG9MZW5ndGgoRS5sZW5ndGgpO1xuICAgICAgICBpZiAobiArIGxlbiA+IE1BWF9TQUZFX0lOVEVHRVIpIHRocm93IFR5cGVFcnJvcihNQVhJTVVNX0FMTE9XRURfSU5ERVhfRVhDRUVERUQpO1xuICAgICAgICBmb3IgKGsgPSAwOyBrIDwgbGVuOyBrKyssIG4rKykgaWYgKGsgaW4gRSkgY3JlYXRlUHJvcGVydHkoQSwgbiwgRVtrXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAobiA+PSBNQVhfU0FGRV9JTlRFR0VSKSB0aHJvdyBUeXBlRXJyb3IoTUFYSU1VTV9BTExPV0VEX0lOREVYX0VYQ0VFREVEKTtcbiAgICAgICAgY3JlYXRlUHJvcGVydHkoQSwgbisrLCBFKTtcbiAgICAgIH1cbiAgICB9XG4gICAgQS5sZW5ndGggPSBuO1xuICAgIHJldHVybiBBO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGNvcHlXaXRoaW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktY29weS13aXRoaW4nKTtcbnZhciBhZGRUb1Vuc2NvcGFibGVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FkZC10by11bnNjb3BhYmxlcycpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLmNvcHlXaXRoaW5gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuY29weXdpdGhpblxuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUgfSwge1xuICBjb3B5V2l0aGluOiBjb3B5V2l0aGluXG59KTtcblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUtQEB1bnNjb3BhYmxlc1xuYWRkVG9VbnNjb3BhYmxlcygnY29weVdpdGhpbicpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgJGV2ZXJ5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWl0ZXJhdGlvbicpLmV2ZXJ5O1xudmFyIGFycmF5TWV0aG9kSXNTdHJpY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWlzLXN0cmljdCcpO1xuXG52YXIgU1RSSUNUX01FVEhPRCA9IGFycmF5TWV0aG9kSXNTdHJpY3QoJ2V2ZXJ5Jyk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuZXZlcnlgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZXZlcnlcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6ICFTVFJJQ1RfTUVUSE9EIH0sIHtcbiAgZXZlcnk6IGZ1bmN0aW9uIGV2ZXJ5KGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgcmV0dXJuICRldmVyeSh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZmlsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1maWxsJyk7XG52YXIgYWRkVG9VbnNjb3BhYmxlcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hZGQtdG8tdW5zY29wYWJsZXMnKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5maWxsYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZpbGxcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlIH0sIHtcbiAgZmlsbDogZmlsbFxufSk7XG5cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLUBAdW5zY29wYWJsZXNcbmFkZFRvVW5zY29wYWJsZXMoJ2ZpbGwnKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyICRmaWx0ZXIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uJykuZmlsdGVyO1xudmFyIGFycmF5TWV0aG9kSGFzU3BlY2llc1N1cHBvcnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWhhcy1zcGVjaWVzLXN1cHBvcnQnKTtcblxudmFyIEhBU19TUEVDSUVTX1NVUFBPUlQgPSBhcnJheU1ldGhvZEhhc1NwZWNpZXNTdXBwb3J0KCdmaWx0ZXInKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5maWx0ZXJgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZmlsdGVyXG4vLyB3aXRoIGFkZGluZyBzdXBwb3J0IG9mIEBAc3BlY2llc1xuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogIUhBU19TUEVDSUVTX1NVUFBPUlQgfSwge1xuICBmaWx0ZXI6IGZ1bmN0aW9uIGZpbHRlcihjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHJldHVybiAkZmlsdGVyKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciAkZmluZEluZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWl0ZXJhdGlvbicpLmZpbmRJbmRleDtcbnZhciBhZGRUb1Vuc2NvcGFibGVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FkZC10by11bnNjb3BhYmxlcycpO1xuXG52YXIgRklORF9JTkRFWCA9ICdmaW5kSW5kZXgnO1xudmFyIFNLSVBTX0hPTEVTID0gdHJ1ZTtcblxuLy8gU2hvdWxkbid0IHNraXAgaG9sZXNcbmlmIChGSU5EX0lOREVYIGluIFtdKSBBcnJheSgxKVtGSU5EX0lOREVYXShmdW5jdGlvbiAoKSB7IFNLSVBTX0hPTEVTID0gZmFsc2U7IH0pO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLmZpbmRJbmRleGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5maW5kaW5kZXhcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IFNLSVBTX0hPTEVTIH0sIHtcbiAgZmluZEluZGV4OiBmdW5jdGlvbiBmaW5kSW5kZXgoY2FsbGJhY2tmbiAvKiAsIHRoYXQgPSB1bmRlZmluZWQgKi8pIHtcbiAgICByZXR1cm4gJGZpbmRJbmRleCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xuXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS1AQHVuc2NvcGFibGVzXG5hZGRUb1Vuc2NvcGFibGVzKEZJTkRfSU5ERVgpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgJGZpbmQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uJykuZmluZDtcbnZhciBhZGRUb1Vuc2NvcGFibGVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FkZC10by11bnNjb3BhYmxlcycpO1xuXG52YXIgRklORCA9ICdmaW5kJztcbnZhciBTS0lQU19IT0xFUyA9IHRydWU7XG5cbi8vIFNob3VsZG4ndCBza2lwIGhvbGVzXG5pZiAoRklORCBpbiBbXSkgQXJyYXkoMSlbRklORF0oZnVuY3Rpb24gKCkgeyBTS0lQU19IT0xFUyA9IGZhbHNlOyB9KTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5maW5kYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZpbmRcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IFNLSVBTX0hPTEVTIH0sIHtcbiAgZmluZDogZnVuY3Rpb24gZmluZChjYWxsYmFja2ZuIC8qICwgdGhhdCA9IHVuZGVmaW5lZCAqLykge1xuICAgIHJldHVybiAkZmluZCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xuXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS1AQHVuc2NvcGFibGVzXG5hZGRUb1Vuc2NvcGFibGVzKEZJTkQpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZmxhdHRlbkludG9BcnJheSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mbGF0dGVuLWludG8tYXJyYXknKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1mdW5jdGlvbicpO1xudmFyIGFycmF5U3BlY2llc0NyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1zcGVjaWVzLWNyZWF0ZScpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLmZsYXRNYXBgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZmxhdG1hcFxuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUgfSwge1xuICBmbGF0TWFwOiBmdW5jdGlvbiBmbGF0TWFwKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgICB2YXIgc291cmNlTGVuID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgIHZhciBBO1xuICAgIGFGdW5jdGlvbihjYWxsYmFja2ZuKTtcbiAgICBBID0gYXJyYXlTcGVjaWVzQ3JlYXRlKE8sIDApO1xuICAgIEEubGVuZ3RoID0gZmxhdHRlbkludG9BcnJheShBLCBPLCBPLCBzb3VyY2VMZW4sIDAsIDEsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICByZXR1cm4gQTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBmbGF0dGVuSW50b0FycmF5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZsYXR0ZW4taW50by1hcnJheScpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbnRlZ2VyJyk7XG52YXIgYXJyYXlTcGVjaWVzQ3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LXNwZWNpZXMtY3JlYXRlJyk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuZmxhdGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5mbGF0XG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSB9LCB7XG4gIGZsYXQ6IGZ1bmN0aW9uIGZsYXQoLyogZGVwdGhBcmcgPSAxICovKSB7XG4gICAgdmFyIGRlcHRoQXJnID0gYXJndW1lbnRzLmxlbmd0aCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZDtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICAgIHZhciBzb3VyY2VMZW4gPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgdmFyIEEgPSBhcnJheVNwZWNpZXNDcmVhdGUoTywgMCk7XG4gICAgQS5sZW5ndGggPSBmbGF0dGVuSW50b0FycmF5KEEsIE8sIE8sIHNvdXJjZUxlbiwgMCwgZGVwdGhBcmcgPT09IHVuZGVmaW5lZCA/IDEgOiB0b0ludGVnZXIoZGVwdGhBcmcpKTtcbiAgICByZXR1cm4gQTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBmb3JFYWNoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWZvci1lYWNoJyk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuZm9yRWFjaGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5mb3JlYWNoXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBbXS5mb3JFYWNoICE9IGZvckVhY2ggfSwge1xuICBmb3JFYWNoOiBmb3JFYWNoXG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGZyb20gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktZnJvbScpO1xudmFyIGNoZWNrQ29ycmVjdG5lc3NPZkl0ZXJhdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jaGVjay1jb3JyZWN0bmVzcy1vZi1pdGVyYXRpb24nKTtcblxudmFyIElOQ09SUkVDVF9JVEVSQVRJT04gPSAhY2hlY2tDb3JyZWN0bmVzc09mSXRlcmF0aW9uKGZ1bmN0aW9uIChpdGVyYWJsZSkge1xuICBBcnJheS5mcm9tKGl0ZXJhYmxlKTtcbn0pO1xuXG4vLyBgQXJyYXkuZnJvbWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LmZyb21cbiQoeyB0YXJnZXQ6ICdBcnJheScsIHN0YXQ6IHRydWUsIGZvcmNlZDogSU5DT1JSRUNUX0lURVJBVElPTiB9LCB7XG4gIGZyb206IGZyb21cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgJGluY2x1ZGVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWluY2x1ZGVzJykuaW5jbHVkZXM7XG52YXIgYWRkVG9VbnNjb3BhYmxlcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hZGQtdG8tdW5zY29wYWJsZXMnKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5pbmNsdWRlc2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5pbmNsdWRlc1xuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUgfSwge1xuICBpbmNsdWRlczogZnVuY3Rpb24gaW5jbHVkZXMoZWwgLyogLCBmcm9tSW5kZXggPSAwICovKSB7XG4gICAgcmV0dXJuICRpbmNsdWRlcyh0aGlzLCBlbCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUtQEB1bnNjb3BhYmxlc1xuYWRkVG9VbnNjb3BhYmxlcygnaW5jbHVkZXMnKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyICRpbmRleE9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWluY2x1ZGVzJykuaW5kZXhPZjtcbnZhciBhcnJheU1ldGhvZElzU3RyaWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1pcy1zdHJpY3QnKTtcblxudmFyIG5hdGl2ZUluZGV4T2YgPSBbXS5pbmRleE9mO1xuXG52YXIgTkVHQVRJVkVfWkVSTyA9ICEhbmF0aXZlSW5kZXhPZiAmJiAxIC8gWzFdLmluZGV4T2YoMSwgLTApIDwgMDtcbnZhciBTVFJJQ1RfTUVUSE9EID0gYXJyYXlNZXRob2RJc1N0cmljdCgnaW5kZXhPZicpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLmluZGV4T2ZgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuaW5kZXhvZlxuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogTkVHQVRJVkVfWkVSTyB8fCAhU1RSSUNUX01FVEhPRCB9LCB7XG4gIGluZGV4T2Y6IGZ1bmN0aW9uIGluZGV4T2Yoc2VhcmNoRWxlbWVudCAvKiAsIGZyb21JbmRleCA9IDAgKi8pIHtcbiAgICByZXR1cm4gTkVHQVRJVkVfWkVST1xuICAgICAgLy8gY29udmVydCAtMCB0byArMFxuICAgICAgPyBuYXRpdmVJbmRleE9mLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgMFxuICAgICAgOiAkaW5kZXhPZih0aGlzLCBzZWFyY2hFbGVtZW50LCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1hcnJheScpO1xuXG4vLyBgQXJyYXkuaXNBcnJheWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LmlzYXJyYXlcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHN0YXQ6IHRydWUgfSwge1xuICBpc0FycmF5OiBpc0FycmF5XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciBhZGRUb1Vuc2NvcGFibGVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FkZC10by11bnNjb3BhYmxlcycpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvcnMnKTtcbnZhciBJbnRlcm5hbFN0YXRlTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlJyk7XG52YXIgZGVmaW5lSXRlcmF0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLWl0ZXJhdG9yJyk7XG5cbnZhciBBUlJBWV9JVEVSQVRPUiA9ICdBcnJheSBJdGVyYXRvcic7XG52YXIgc2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuc2V0O1xudmFyIGdldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldHRlckZvcihBUlJBWV9JVEVSQVRPUik7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuZW50cmllc2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5lbnRyaWVzXG4vLyBgQXJyYXkucHJvdG90eXBlLmtleXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUua2V5c1xuLy8gYEFycmF5LnByb3RvdHlwZS52YWx1ZXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUudmFsdWVzXG4vLyBgQXJyYXkucHJvdG90eXBlW0BAaXRlcmF0b3JdYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLUBAaXRlcmF0b3Jcbi8vIGBDcmVhdGVBcnJheUl0ZXJhdG9yYCBpbnRlcm5hbCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtY3JlYXRlYXJyYXlpdGVyYXRvclxubW9kdWxlLmV4cG9ydHMgPSBkZWZpbmVJdGVyYXRvcihBcnJheSwgJ0FycmF5JywgZnVuY3Rpb24gKGl0ZXJhdGVkLCBraW5kKSB7XG4gIHNldEludGVybmFsU3RhdGUodGhpcywge1xuICAgIHR5cGU6IEFSUkFZX0lURVJBVE9SLFxuICAgIHRhcmdldDogdG9JbmRleGVkT2JqZWN0KGl0ZXJhdGVkKSwgLy8gdGFyZ2V0XG4gICAgaW5kZXg6IDAsICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBuZXh0IGluZGV4XG4gICAga2luZDoga2luZCAgICAgICAgICAgICAgICAgICAgICAgICAvLyBraW5kXG4gIH0pO1xuLy8gYCVBcnJheUl0ZXJhdG9yUHJvdG90eXBlJS5uZXh0YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJWFycmF5aXRlcmF0b3Jwcm90b3R5cGUlLm5leHRcbn0sIGZ1bmN0aW9uICgpIHtcbiAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKTtcbiAgdmFyIHRhcmdldCA9IHN0YXRlLnRhcmdldDtcbiAgdmFyIGtpbmQgPSBzdGF0ZS5raW5kO1xuICB2YXIgaW5kZXggPSBzdGF0ZS5pbmRleCsrO1xuICBpZiAoIXRhcmdldCB8fCBpbmRleCA+PSB0YXJnZXQubGVuZ3RoKSB7XG4gICAgc3RhdGUudGFyZ2V0ID0gdW5kZWZpbmVkO1xuICAgIHJldHVybiB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfTtcbiAgfVxuICBpZiAoa2luZCA9PSAna2V5cycpIHJldHVybiB7IHZhbHVlOiBpbmRleCwgZG9uZTogZmFsc2UgfTtcbiAgaWYgKGtpbmQgPT0gJ3ZhbHVlcycpIHJldHVybiB7IHZhbHVlOiB0YXJnZXRbaW5kZXhdLCBkb25lOiBmYWxzZSB9O1xuICByZXR1cm4geyB2YWx1ZTogW2luZGV4LCB0YXJnZXRbaW5kZXhdXSwgZG9uZTogZmFsc2UgfTtcbn0sICd2YWx1ZXMnKTtcblxuLy8gYXJndW1lbnRzTGlzdFtAQGl0ZXJhdG9yXSBpcyAlQXJyYXlQcm90b192YWx1ZXMlXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWNyZWF0ZXVubWFwcGVkYXJndW1lbnRzb2JqZWN0XG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWNyZWF0ZW1hcHBlZGFyZ3VtZW50c29iamVjdFxuSXRlcmF0b3JzLkFyZ3VtZW50cyA9IEl0ZXJhdG9ycy5BcnJheTtcblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUtQEB1bnNjb3BhYmxlc1xuYWRkVG9VbnNjb3BhYmxlcygna2V5cycpO1xuYWRkVG9VbnNjb3BhYmxlcygndmFsdWVzJyk7XG5hZGRUb1Vuc2NvcGFibGVzKCdlbnRyaWVzJyk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBJbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2luZGV4ZWQtb2JqZWN0Jyk7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgYXJyYXlNZXRob2RJc1N0cmljdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1tZXRob2QtaXMtc3RyaWN0Jyk7XG5cbnZhciBuYXRpdmVKb2luID0gW10uam9pbjtcblxudmFyIEVTM19TVFJJTkdTID0gSW5kZXhlZE9iamVjdCAhPSBPYmplY3Q7XG52YXIgU1RSSUNUX01FVEhPRCA9IGFycmF5TWV0aG9kSXNTdHJpY3QoJ2pvaW4nLCAnLCcpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLmpvaW5gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuam9pblxuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogRVMzX1NUUklOR1MgfHwgIVNUUklDVF9NRVRIT0QgfSwge1xuICBqb2luOiBmdW5jdGlvbiBqb2luKHNlcGFyYXRvcikge1xuICAgIHJldHVybiBuYXRpdmVKb2luLmNhbGwodG9JbmRleGVkT2JqZWN0KHRoaXMpLCBzZXBhcmF0b3IgPT09IHVuZGVmaW5lZCA/ICcsJyA6IHNlcGFyYXRvcik7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgbGFzdEluZGV4T2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbGFzdC1pbmRleC1vZicpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLmxhc3RJbmRleE9mYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmxhc3RpbmRleG9mXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBsYXN0SW5kZXhPZiAhPT0gW10ubGFzdEluZGV4T2YgfSwge1xuICBsYXN0SW5kZXhPZjogbGFzdEluZGV4T2Zcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgJG1hcCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pdGVyYXRpb24nKS5tYXA7XG52YXIgYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1tZXRob2QtaGFzLXNwZWNpZXMtc3VwcG9ydCcpO1xuXG52YXIgSEFTX1NQRUNJRVNfU1VQUE9SVCA9IGFycmF5TWV0aG9kSGFzU3BlY2llc1N1cHBvcnQoJ21hcCcpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLm1hcGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5tYXBcbi8vIHdpdGggYWRkaW5nIHN1cHBvcnQgb2YgQEBzcGVjaWVzXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiAhSEFTX1NQRUNJRVNfU1VQUE9SVCB9LCB7XG4gIG1hcDogZnVuY3Rpb24gbWFwKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgcmV0dXJuICRtYXAodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5Jyk7XG5cbnZhciBJU05UX0dFTkVSSUMgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEYoKSB7IC8qIGVtcHR5ICovIH1cbiAgcmV0dXJuICEoQXJyYXkub2YuY2FsbChGKSBpbnN0YW5jZW9mIEYpO1xufSk7XG5cbi8vIGBBcnJheS5vZmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5Lm9mXG4vLyBXZWJLaXQgQXJyYXkub2YgaXNuJ3QgZ2VuZXJpY1xuJCh7IHRhcmdldDogJ0FycmF5Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBJU05UX0dFTkVSSUMgfSwge1xuICBvZjogZnVuY3Rpb24gb2YoLyogLi4uYXJncyAqLykge1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIGFyZ3VtZW50c0xlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIHJlc3VsdCA9IG5ldyAodHlwZW9mIHRoaXMgPT0gJ2Z1bmN0aW9uJyA/IHRoaXMgOiBBcnJheSkoYXJndW1lbnRzTGVuZ3RoKTtcbiAgICB3aGlsZSAoYXJndW1lbnRzTGVuZ3RoID4gaW5kZXgpIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwgaW5kZXgsIGFyZ3VtZW50c1tpbmRleCsrXSk7XG4gICAgcmVzdWx0Lmxlbmd0aCA9IGFyZ3VtZW50c0xlbmd0aDtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyICRyZWR1Y2VSaWdodCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1yZWR1Y2UnKS5yaWdodDtcbnZhciBhcnJheU1ldGhvZElzU3RyaWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1pcy1zdHJpY3QnKTtcbnZhciBDSFJPTUVfVkVSU0lPTiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtdjgtdmVyc2lvbicpO1xudmFyIElTX05PREUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLWlzLW5vZGUnKTtcblxudmFyIFNUUklDVF9NRVRIT0QgPSBhcnJheU1ldGhvZElzU3RyaWN0KCdyZWR1Y2VSaWdodCcpO1xuLy8gQ2hyb21lIDgwLTgyIGhhcyBhIGNyaXRpY2FsIGJ1Z1xuLy8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9MTA0OTk4MlxudmFyIENIUk9NRV9CVUcgPSAhSVNfTk9ERSAmJiBDSFJPTUVfVkVSU0lPTiA+IDc5ICYmIENIUk9NRV9WRVJTSU9OIDwgODM7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUucmVkdWNlUmlnaHRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUucmVkdWNlcmlnaHRcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6ICFTVFJJQ1RfTUVUSE9EIHx8IENIUk9NRV9CVUcgfSwge1xuICByZWR1Y2VSaWdodDogZnVuY3Rpb24gcmVkdWNlUmlnaHQoY2FsbGJhY2tmbiAvKiAsIGluaXRpYWxWYWx1ZSAqLykge1xuICAgIHJldHVybiAkcmVkdWNlUmlnaHQodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyICRyZWR1Y2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktcmVkdWNlJykubGVmdDtcbnZhciBhcnJheU1ldGhvZElzU3RyaWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1pcy1zdHJpY3QnKTtcbnZhciBDSFJPTUVfVkVSU0lPTiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtdjgtdmVyc2lvbicpO1xudmFyIElTX05PREUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLWlzLW5vZGUnKTtcblxudmFyIFNUUklDVF9NRVRIT0QgPSBhcnJheU1ldGhvZElzU3RyaWN0KCdyZWR1Y2UnKTtcbi8vIENocm9tZSA4MC04MiBoYXMgYSBjcml0aWNhbCBidWdcbi8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTEwNDk5ODJcbnZhciBDSFJPTUVfQlVHID0gIUlTX05PREUgJiYgQ0hST01FX1ZFUlNJT04gPiA3OSAmJiBDSFJPTUVfVkVSU0lPTiA8IDgzO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLnJlZHVjZWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5yZWR1Y2VcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6ICFTVFJJQ1RfTUVUSE9EIHx8IENIUk9NRV9CVUcgfSwge1xuICByZWR1Y2U6IGZ1bmN0aW9uIHJlZHVjZShjYWxsYmFja2ZuIC8qICwgaW5pdGlhbFZhbHVlICovKSB7XG4gICAgcmV0dXJuICRyZWR1Y2UodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtYXJyYXknKTtcblxudmFyIG5hdGl2ZVJldmVyc2UgPSBbXS5yZXZlcnNlO1xudmFyIHRlc3QgPSBbMSwgMl07XG5cbi8vIGBBcnJheS5wcm90b3R5cGUucmV2ZXJzZWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5yZXZlcnNlXG4vLyBmaXggZm9yIFNhZmFyaSAxMi4wIGJ1Z1xuLy8gaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTE4ODc5NFxuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogU3RyaW5nKHRlc3QpID09PSBTdHJpbmcodGVzdC5yZXZlcnNlKCkpIH0sIHtcbiAgcmV2ZXJzZTogZnVuY3Rpb24gcmV2ZXJzZSgpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1hc3NpZ24gLS0gZGlydHkgaGFja1xuICAgIGlmIChpc0FycmF5KHRoaXMpKSB0aGlzLmxlbmd0aCA9IHRoaXMubGVuZ3RoO1xuICAgIHJldHVybiBuYXRpdmVSZXZlcnNlLmNhbGwodGhpcyk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1hcnJheScpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1hYnNvbHV0ZS1pbmRleCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIGNyZWF0ZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eScpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIGFycmF5TWV0aG9kSGFzU3BlY2llc1N1cHBvcnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWhhcy1zcGVjaWVzLXN1cHBvcnQnKTtcblxudmFyIEhBU19TUEVDSUVTX1NVUFBPUlQgPSBhcnJheU1ldGhvZEhhc1NwZWNpZXNTdXBwb3J0KCdzbGljZScpO1xuXG52YXIgU1BFQ0lFUyA9IHdlbGxLbm93blN5bWJvbCgnc3BlY2llcycpO1xudmFyIG5hdGl2ZVNsaWNlID0gW10uc2xpY2U7XG52YXIgbWF4ID0gTWF0aC5tYXg7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuc2xpY2VgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuc2xpY2Vcbi8vIGZhbGxiYWNrIGZvciBub3QgYXJyYXktbGlrZSBFUzMgc3RyaW5ncyBhbmQgRE9NIG9iamVjdHNcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6ICFIQVNfU1BFQ0lFU19TVVBQT1JUIH0sIHtcbiAgc2xpY2U6IGZ1bmN0aW9uIHNsaWNlKHN0YXJ0LCBlbmQpIHtcbiAgICB2YXIgTyA9IHRvSW5kZXhlZE9iamVjdCh0aGlzKTtcbiAgICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgIHZhciBrID0gdG9BYnNvbHV0ZUluZGV4KHN0YXJ0LCBsZW5ndGgpO1xuICAgIHZhciBmaW4gPSB0b0Fic29sdXRlSW5kZXgoZW5kID09PSB1bmRlZmluZWQgPyBsZW5ndGggOiBlbmQsIGxlbmd0aCk7XG4gICAgLy8gaW5saW5lIGBBcnJheVNwZWNpZXNDcmVhdGVgIGZvciB1c2FnZSBuYXRpdmUgYEFycmF5I3NsaWNlYCB3aGVyZSBpdCdzIHBvc3NpYmxlXG4gICAgdmFyIENvbnN0cnVjdG9yLCByZXN1bHQsIG47XG4gICAgaWYgKGlzQXJyYXkoTykpIHtcbiAgICAgIENvbnN0cnVjdG9yID0gTy5jb25zdHJ1Y3RvcjtcbiAgICAgIC8vIGNyb3NzLXJlYWxtIGZhbGxiYWNrXG4gICAgICBpZiAodHlwZW9mIENvbnN0cnVjdG9yID09ICdmdW5jdGlvbicgJiYgKENvbnN0cnVjdG9yID09PSBBcnJheSB8fCBpc0FycmF5KENvbnN0cnVjdG9yLnByb3RvdHlwZSkpKSB7XG4gICAgICAgIENvbnN0cnVjdG9yID0gdW5kZWZpbmVkO1xuICAgICAgfSBlbHNlIGlmIChpc09iamVjdChDb25zdHJ1Y3RvcikpIHtcbiAgICAgICAgQ29uc3RydWN0b3IgPSBDb25zdHJ1Y3RvcltTUEVDSUVTXTtcbiAgICAgICAgaWYgKENvbnN0cnVjdG9yID09PSBudWxsKSBDb25zdHJ1Y3RvciA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIGlmIChDb25zdHJ1Y3RvciA9PT0gQXJyYXkgfHwgQ29uc3RydWN0b3IgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gbmF0aXZlU2xpY2UuY2FsbChPLCBrLCBmaW4pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXN1bHQgPSBuZXcgKENvbnN0cnVjdG9yID09PSB1bmRlZmluZWQgPyBBcnJheSA6IENvbnN0cnVjdG9yKShtYXgoZmluIC0gaywgMCkpO1xuICAgIGZvciAobiA9IDA7IGsgPCBmaW47IGsrKywgbisrKSBpZiAoayBpbiBPKSBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIG4sIE9ba10pO1xuICAgIHJlc3VsdC5sZW5ndGggPSBuO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgJHNvbWUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uJykuc29tZTtcbnZhciBhcnJheU1ldGhvZElzU3RyaWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1pcy1zdHJpY3QnKTtcblxudmFyIFNUUklDVF9NRVRIT0QgPSBhcnJheU1ldGhvZElzU3RyaWN0KCdzb21lJyk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuc29tZWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5zb21lXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiAhU1RSSUNUX01FVEhPRCB9LCB7XG4gIHNvbWU6IGZ1bmN0aW9uIHNvbWUoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICByZXR1cm4gJHNvbWUodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWZ1bmN0aW9uJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBhcnJheU1ldGhvZElzU3RyaWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1pcy1zdHJpY3QnKTtcblxudmFyIHRlc3QgPSBbXTtcbnZhciBuYXRpdmVTb3J0ID0gdGVzdC5zb3J0O1xuXG4vLyBJRTgtXG52YXIgRkFJTFNfT05fVU5ERUZJTkVEID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICB0ZXN0LnNvcnQodW5kZWZpbmVkKTtcbn0pO1xuLy8gVjggYnVnXG52YXIgRkFJTFNfT05fTlVMTCA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgdGVzdC5zb3J0KG51bGwpO1xufSk7XG4vLyBPbGQgV2ViS2l0XG52YXIgU1RSSUNUX01FVEhPRCA9IGFycmF5TWV0aG9kSXNTdHJpY3QoJ3NvcnQnKTtcblxudmFyIEZPUkNFRCA9IEZBSUxTX09OX1VOREVGSU5FRCB8fCAhRkFJTFNfT05fTlVMTCB8fCAhU1RSSUNUX01FVEhPRDtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5zb3J0YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLnNvcnRcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IEZPUkNFRCB9LCB7XG4gIHNvcnQ6IGZ1bmN0aW9uIHNvcnQoY29tcGFyZWZuKSB7XG4gICAgcmV0dXJuIGNvbXBhcmVmbiA9PT0gdW5kZWZpbmVkXG4gICAgICA/IG5hdGl2ZVNvcnQuY2FsbCh0b09iamVjdCh0aGlzKSlcbiAgICAgIDogbmF0aXZlU29ydC5jYWxsKHRvT2JqZWN0KHRoaXMpLCBhRnVuY3Rpb24oY29tcGFyZWZuKSk7XG4gIH1cbn0pO1xuIiwidmFyIHNldFNwZWNpZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXNwZWNpZXMnKTtcblxuLy8gYEFycmF5W0BAc3BlY2llc11gIGdldHRlclxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1nZXQtYXJyYXktQEBzcGVjaWVzXG5zZXRTcGVjaWVzKCdBcnJheScpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWludGVnZXInKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciBhcnJheVNwZWNpZXNDcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktc3BlY2llcy1jcmVhdGUnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHknKTtcbnZhciBhcnJheU1ldGhvZEhhc1NwZWNpZXNTdXBwb3J0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1oYXMtc3BlY2llcy1zdXBwb3J0Jyk7XG5cbnZhciBIQVNfU1BFQ0lFU19TVVBQT1JUID0gYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCgnc3BsaWNlJyk7XG5cbnZhciBtYXggPSBNYXRoLm1heDtcbnZhciBtaW4gPSBNYXRoLm1pbjtcbnZhciBNQVhfU0FGRV9JTlRFR0VSID0gMHgxRkZGRkZGRkZGRkZGRjtcbnZhciBNQVhJTVVNX0FMTE9XRURfTEVOR1RIX0VYQ0VFREVEID0gJ01heGltdW0gYWxsb3dlZCBsZW5ndGggZXhjZWVkZWQnO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLnNwbGljZWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5zcGxpY2Vcbi8vIHdpdGggYWRkaW5nIHN1cHBvcnQgb2YgQEBzcGVjaWVzXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiAhSEFTX1NQRUNJRVNfU1VQUE9SVCB9LCB7XG4gIHNwbGljZTogZnVuY3Rpb24gc3BsaWNlKHN0YXJ0LCBkZWxldGVDb3VudCAvKiAsIC4uLml0ZW1zICovKSB7XG4gICAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgICB2YXIgbGVuID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgIHZhciBhY3R1YWxTdGFydCA9IHRvQWJzb2x1dGVJbmRleChzdGFydCwgbGVuKTtcbiAgICB2YXIgYXJndW1lbnRzTGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgaW5zZXJ0Q291bnQsIGFjdHVhbERlbGV0ZUNvdW50LCBBLCBrLCBmcm9tLCB0bztcbiAgICBpZiAoYXJndW1lbnRzTGVuZ3RoID09PSAwKSB7XG4gICAgICBpbnNlcnRDb3VudCA9IGFjdHVhbERlbGV0ZUNvdW50ID0gMDtcbiAgICB9IGVsc2UgaWYgKGFyZ3VtZW50c0xlbmd0aCA9PT0gMSkge1xuICAgICAgaW5zZXJ0Q291bnQgPSAwO1xuICAgICAgYWN0dWFsRGVsZXRlQ291bnQgPSBsZW4gLSBhY3R1YWxTdGFydDtcbiAgICB9IGVsc2Uge1xuICAgICAgaW5zZXJ0Q291bnQgPSBhcmd1bWVudHNMZW5ndGggLSAyO1xuICAgICAgYWN0dWFsRGVsZXRlQ291bnQgPSBtaW4obWF4KHRvSW50ZWdlcihkZWxldGVDb3VudCksIDApLCBsZW4gLSBhY3R1YWxTdGFydCk7XG4gICAgfVxuICAgIGlmIChsZW4gKyBpbnNlcnRDb3VudCAtIGFjdHVhbERlbGV0ZUNvdW50ID4gTUFYX1NBRkVfSU5URUdFUikge1xuICAgICAgdGhyb3cgVHlwZUVycm9yKE1BWElNVU1fQUxMT1dFRF9MRU5HVEhfRVhDRUVERUQpO1xuICAgIH1cbiAgICBBID0gYXJyYXlTcGVjaWVzQ3JlYXRlKE8sIGFjdHVhbERlbGV0ZUNvdW50KTtcbiAgICBmb3IgKGsgPSAwOyBrIDwgYWN0dWFsRGVsZXRlQ291bnQ7IGsrKykge1xuICAgICAgZnJvbSA9IGFjdHVhbFN0YXJ0ICsgaztcbiAgICAgIGlmIChmcm9tIGluIE8pIGNyZWF0ZVByb3BlcnR5KEEsIGssIE9bZnJvbV0pO1xuICAgIH1cbiAgICBBLmxlbmd0aCA9IGFjdHVhbERlbGV0ZUNvdW50O1xuICAgIGlmIChpbnNlcnRDb3VudCA8IGFjdHVhbERlbGV0ZUNvdW50KSB7XG4gICAgICBmb3IgKGsgPSBhY3R1YWxTdGFydDsgayA8IGxlbiAtIGFjdHVhbERlbGV0ZUNvdW50OyBrKyspIHtcbiAgICAgICAgZnJvbSA9IGsgKyBhY3R1YWxEZWxldGVDb3VudDtcbiAgICAgICAgdG8gPSBrICsgaW5zZXJ0Q291bnQ7XG4gICAgICAgIGlmIChmcm9tIGluIE8pIE9bdG9dID0gT1tmcm9tXTtcbiAgICAgICAgZWxzZSBkZWxldGUgT1t0b107XG4gICAgICB9XG4gICAgICBmb3IgKGsgPSBsZW47IGsgPiBsZW4gLSBhY3R1YWxEZWxldGVDb3VudCArIGluc2VydENvdW50OyBrLS0pIGRlbGV0ZSBPW2sgLSAxXTtcbiAgICB9IGVsc2UgaWYgKGluc2VydENvdW50ID4gYWN0dWFsRGVsZXRlQ291bnQpIHtcbiAgICAgIGZvciAoayA9IGxlbiAtIGFjdHVhbERlbGV0ZUNvdW50OyBrID4gYWN0dWFsU3RhcnQ7IGstLSkge1xuICAgICAgICBmcm9tID0gayArIGFjdHVhbERlbGV0ZUNvdW50IC0gMTtcbiAgICAgICAgdG8gPSBrICsgaW5zZXJ0Q291bnQgLSAxO1xuICAgICAgICBpZiAoZnJvbSBpbiBPKSBPW3RvXSA9IE9bZnJvbV07XG4gICAgICAgIGVsc2UgZGVsZXRlIE9bdG9dO1xuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKGsgPSAwOyBrIDwgaW5zZXJ0Q291bnQ7IGsrKykge1xuICAgICAgT1trICsgYWN0dWFsU3RhcnRdID0gYXJndW1lbnRzW2sgKyAyXTtcbiAgICB9XG4gICAgTy5sZW5ndGggPSBsZW4gLSBhY3R1YWxEZWxldGVDb3VudCArIGluc2VydENvdW50O1xuICAgIHJldHVybiBBO1xuICB9XG59KTtcbiIsIi8vIHRoaXMgbWV0aG9kIHdhcyBhZGRlZCB0byB1bnNjb3BhYmxlcyBhZnRlciBpbXBsZW1lbnRhdGlvblxuLy8gaW4gcG9wdWxhciBlbmdpbmVzLCBzbyBpdCdzIG1vdmVkIHRvIGEgc2VwYXJhdGUgbW9kdWxlXG52YXIgYWRkVG9VbnNjb3BhYmxlcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hZGQtdG8tdW5zY29wYWJsZXMnKTtcblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUtQEB1bnNjb3BhYmxlc1xuYWRkVG9VbnNjb3BhYmxlcygnZmxhdE1hcCcpO1xuIiwiLy8gdGhpcyBtZXRob2Qgd2FzIGFkZGVkIHRvIHVuc2NvcGFibGVzIGFmdGVyIGltcGxlbWVudGF0aW9uXG4vLyBpbiBwb3B1bGFyIGVuZ2luZXMsIHNvIGl0J3MgbW92ZWQgdG8gYSBzZXBhcmF0ZSBtb2R1bGVcbnZhciBhZGRUb1Vuc2NvcGFibGVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FkZC10by11bnNjb3BhYmxlcycpO1xuXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS1AQHVuc2NvcGFibGVzXG5hZGRUb1Vuc2NvcGFibGVzKCdmbGF0Jyk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBBcnJheUJ1ZmZlck1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXInKTtcbnZhciBOQVRJVkVfQVJSQVlfQlVGRkVSID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci1uYXRpdmUnKTtcblxuLy8gYERhdGFWaWV3YCBjb25zdHJ1Y3RvclxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1kYXRhdmlldy1jb25zdHJ1Y3RvclxuJCh7IGdsb2JhbDogdHJ1ZSwgZm9yY2VkOiAhTkFUSVZFX0FSUkFZX0JVRkZFUiB9LCB7XG4gIERhdGFWaWV3OiBBcnJheUJ1ZmZlck1vZHVsZS5EYXRhVmlld1xufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcblxuLy8gYERhdGUubm93YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtZGF0ZS5ub3dcbiQoeyB0YXJnZXQ6ICdEYXRlJywgc3RhdDogdHJ1ZSB9LCB7XG4gIG5vdzogZnVuY3Rpb24gbm93KCkge1xuICAgIHJldHVybiBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciB0b0lTT1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kYXRlLXRvLWlzby1zdHJpbmcnKTtcblxuLy8gYERhdGUucHJvdG90eXBlLnRvSVNPU3RyaW5nYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtZGF0ZS5wcm90b3R5cGUudG9pc29zdHJpbmdcbi8vIFBoYW50b21KUyAvIG9sZCBXZWJLaXQgaGFzIGEgYnJva2VuIGltcGxlbWVudGF0aW9uc1xuJCh7IHRhcmdldDogJ0RhdGUnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBEYXRlLnByb3RvdHlwZS50b0lTT1N0cmluZyAhPT0gdG9JU09TdHJpbmcgfSwge1xuICB0b0lTT1N0cmluZzogdG9JU09TdHJpbmdcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1wcmltaXRpdmUnKTtcblxudmFyIEZPUkNFRCA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIG5ldyBEYXRlKE5hTikudG9KU09OKCkgIT09IG51bGxcbiAgICB8fCBEYXRlLnByb3RvdHlwZS50b0pTT04uY2FsbCh7IHRvSVNPU3RyaW5nOiBmdW5jdGlvbiAoKSB7IHJldHVybiAxOyB9IH0pICE9PSAxO1xufSk7XG5cbi8vIGBEYXRlLnByb3RvdHlwZS50b0pTT05gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1kYXRlLnByb3RvdHlwZS50b2pzb25cbiQoeyB0YXJnZXQ6ICdEYXRlJywgcHJvdG86IHRydWUsIGZvcmNlZDogRk9SQ0VEIH0sIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzIC0tIHJlcXVpcmVkIGZvciBgLmxlbmd0aGBcbiAgdG9KU09OOiBmdW5jdGlvbiB0b0pTT04oa2V5KSB7XG4gICAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgICB2YXIgcHYgPSB0b1ByaW1pdGl2ZShPKTtcbiAgICByZXR1cm4gdHlwZW9mIHB2ID09ICdudW1iZXInICYmICFpc0Zpbml0ZShwdikgPyBudWxsIDogTy50b0lTT1N0cmluZygpO1xuICB9XG59KTtcbiIsInZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG52YXIgZGF0ZVRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RhdGUtdG8tcHJpbWl0aXZlJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBUT19QUklNSVRJVkUgPSB3ZWxsS25vd25TeW1ib2woJ3RvUHJpbWl0aXZlJyk7XG52YXIgRGF0ZVByb3RvdHlwZSA9IERhdGUucHJvdG90eXBlO1xuXG4vLyBgRGF0ZS5wcm90b3R5cGVbQEB0b1ByaW1pdGl2ZV1gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1kYXRlLnByb3RvdHlwZS1AQHRvcHJpbWl0aXZlXG5pZiAoIShUT19QUklNSVRJVkUgaW4gRGF0ZVByb3RvdHlwZSkpIHtcbiAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KERhdGVQcm90b3R5cGUsIFRPX1BSSU1JVElWRSwgZGF0ZVRvUHJpbWl0aXZlKTtcbn1cbiIsInZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xuXG52YXIgRGF0ZVByb3RvdHlwZSA9IERhdGUucHJvdG90eXBlO1xudmFyIElOVkFMSURfREFURSA9ICdJbnZhbGlkIERhdGUnO1xudmFyIFRPX1NUUklORyA9ICd0b1N0cmluZyc7XG52YXIgbmF0aXZlRGF0ZVRvU3RyaW5nID0gRGF0ZVByb3RvdHlwZVtUT19TVFJJTkddO1xudmFyIGdldFRpbWUgPSBEYXRlUHJvdG90eXBlLmdldFRpbWU7XG5cbi8vIGBEYXRlLnByb3RvdHlwZS50b1N0cmluZ2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWRhdGUucHJvdG90eXBlLnRvc3RyaW5nXG5pZiAobmV3IERhdGUoTmFOKSArICcnICE9IElOVkFMSURfREFURSkge1xuICByZWRlZmluZShEYXRlUHJvdG90eXBlLCBUT19TVFJJTkcsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHZhciB2YWx1ZSA9IGdldFRpbWUuY2FsbCh0aGlzKTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlIC0tIE5hTiBjaGVja1xuICAgIHJldHVybiB2YWx1ZSA9PT0gdmFsdWUgPyBuYXRpdmVEYXRlVG9TdHJpbmcuY2FsbCh0aGlzKSA6IElOVkFMSURfREFURTtcbiAgfSk7XG59XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQnKTtcblxuLy8gYEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtZnVuY3Rpb24ucHJvdG90eXBlLmJpbmRcbiQoeyB0YXJnZXQ6ICdGdW5jdGlvbicsIHByb3RvOiB0cnVlIH0sIHtcbiAgYmluZDogYmluZFxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtcHJvdG90eXBlLW9mJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBIQVNfSU5TVEFOQ0UgPSB3ZWxsS25vd25TeW1ib2woJ2hhc0luc3RhbmNlJyk7XG52YXIgRnVuY3Rpb25Qcm90b3R5cGUgPSBGdW5jdGlvbi5wcm90b3R5cGU7XG5cbi8vIGBGdW5jdGlvbi5wcm90b3R5cGVbQEBoYXNJbnN0YW5jZV1gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1mdW5jdGlvbi5wcm90b3R5cGUtQEBoYXNpbnN0YW5jZVxuaWYgKCEoSEFTX0lOU1RBTkNFIGluIEZ1bmN0aW9uUHJvdG90eXBlKSkge1xuICBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mKEZ1bmN0aW9uUHJvdG90eXBlLCBIQVNfSU5TVEFOQ0UsIHsgdmFsdWU6IGZ1bmN0aW9uIChPKSB7XG4gICAgaWYgKHR5cGVvZiB0aGlzICE9ICdmdW5jdGlvbicgfHwgIWlzT2JqZWN0KE8pKSByZXR1cm4gZmFsc2U7XG4gICAgaWYgKCFpc09iamVjdCh0aGlzLnByb3RvdHlwZSkpIHJldHVybiBPIGluc3RhbmNlb2YgdGhpcztcbiAgICAvLyBmb3IgZW52aXJvbm1lbnQgdy9vIG5hdGl2ZSBgQEBoYXNJbnN0YW5jZWAgbG9naWMgZW5vdWdoIGBpbnN0YW5jZW9mYCwgYnV0IGFkZCB0aGlzOlxuICAgIHdoaWxlIChPID0gZ2V0UHJvdG90eXBlT2YoTykpIGlmICh0aGlzLnByb3RvdHlwZSA9PT0gTykgcmV0dXJuIHRydWU7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9IH0pO1xufVxuIiwidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpLmY7XG5cbnZhciBGdW5jdGlvblByb3RvdHlwZSA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcbnZhciBGdW5jdGlvblByb3RvdHlwZVRvU3RyaW5nID0gRnVuY3Rpb25Qcm90b3R5cGUudG9TdHJpbmc7XG52YXIgbmFtZVJFID0gL15cXHMqZnVuY3Rpb24gKFteIChdKikvO1xudmFyIE5BTUUgPSAnbmFtZSc7XG5cbi8vIEZ1bmN0aW9uIGluc3RhbmNlcyBgLm5hbWVgIHByb3BlcnR5XG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWZ1bmN0aW9uLWluc3RhbmNlcy1uYW1lXG5pZiAoREVTQ1JJUFRPUlMgJiYgIShOQU1FIGluIEZ1bmN0aW9uUHJvdG90eXBlKSkge1xuICBkZWZpbmVQcm9wZXJ0eShGdW5jdGlvblByb3RvdHlwZSwgTkFNRSwge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBGdW5jdGlvblByb3RvdHlwZVRvU3RyaW5nLmNhbGwodGhpcykubWF0Y2gobmFtZVJFKVsxXTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xufVxuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xuXG4vLyBgZ2xvYmFsVGhpc2Agb2JqZWN0XG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWdsb2JhbHRoaXNcbiQoeyBnbG9iYWw6IHRydWUgfSwge1xuICBnbG9iYWxUaGlzOiBnbG9iYWxcbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG52YXIgJHN0cmluZ2lmeSA9IGdldEJ1aWx0SW4oJ0pTT04nLCAnc3RyaW5naWZ5Jyk7XG52YXIgcmUgPSAvW1xcdUQ4MDAtXFx1REZGRl0vZztcbnZhciBsb3cgPSAvXltcXHVEODAwLVxcdURCRkZdJC87XG52YXIgaGkgPSAvXltcXHVEQzAwLVxcdURGRkZdJC87XG5cbnZhciBmaXggPSBmdW5jdGlvbiAobWF0Y2gsIG9mZnNldCwgc3RyaW5nKSB7XG4gIHZhciBwcmV2ID0gc3RyaW5nLmNoYXJBdChvZmZzZXQgLSAxKTtcbiAgdmFyIG5leHQgPSBzdHJpbmcuY2hhckF0KG9mZnNldCArIDEpO1xuICBpZiAoKGxvdy50ZXN0KG1hdGNoKSAmJiAhaGkudGVzdChuZXh0KSkgfHwgKGhpLnRlc3QobWF0Y2gpICYmICFsb3cudGVzdChwcmV2KSkpIHtcbiAgICByZXR1cm4gJ1xcXFx1JyArIG1hdGNoLmNoYXJDb2RlQXQoMCkudG9TdHJpbmcoMTYpO1xuICB9IHJldHVybiBtYXRjaDtcbn07XG5cbnZhciBGT1JDRUQgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAkc3RyaW5naWZ5KCdcXHVERjA2XFx1RDgzNCcpICE9PSAnXCJcXFxcdWRmMDZcXFxcdWQ4MzRcIidcbiAgICB8fCAkc3RyaW5naWZ5KCdcXHVERUFEJykgIT09ICdcIlxcXFx1ZGVhZFwiJztcbn0pO1xuXG5pZiAoJHN0cmluZ2lmeSkge1xuICAvLyBgSlNPTi5zdHJpbmdpZnlgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWpzb24uc3RyaW5naWZ5XG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXdlbGwtZm9ybWVkLXN0cmluZ2lmeVxuICAkKHsgdGFyZ2V0OiAnSlNPTicsIHN0YXQ6IHRydWUsIGZvcmNlZDogRk9SQ0VEIH0sIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnMgLS0gcmVxdWlyZWQgZm9yIGAubGVuZ3RoYFxuICAgIHN0cmluZ2lmeTogZnVuY3Rpb24gc3RyaW5naWZ5KGl0LCByZXBsYWNlciwgc3BhY2UpIHtcbiAgICAgIHZhciByZXN1bHQgPSAkc3RyaW5naWZ5LmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gICAgICByZXR1cm4gdHlwZW9mIHJlc3VsdCA9PSAnc3RyaW5nJyA/IHJlc3VsdC5yZXBsYWNlKHJlLCBmaXgpIDogcmVzdWx0O1xuICAgIH1cbiAgfSk7XG59XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC10by1zdHJpbmctdGFnJyk7XG5cbi8vIEpTT05bQEB0b1N0cmluZ1RhZ10gcHJvcGVydHlcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtanNvbi1AQHRvc3RyaW5ndGFnXG5zZXRUb1N0cmluZ1RhZyhnbG9iYWwuSlNPTiwgJ0pTT04nLCB0cnVlKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBjb2xsZWN0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NvbGxlY3Rpb24nKTtcbnZhciBjb2xsZWN0aW9uU3Ryb25nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NvbGxlY3Rpb24tc3Ryb25nJyk7XG5cbi8vIGBNYXBgIGNvbnN0cnVjdG9yXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW1hcC1vYmplY3RzXG5tb2R1bGUuZXhwb3J0cyA9IGNvbGxlY3Rpb24oJ01hcCcsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBNYXAoKSB7IHJldHVybiBpbml0KHRoaXMsIGFyZ3VtZW50cy5sZW5ndGggPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpOyB9O1xufSwgY29sbGVjdGlvblN0cm9uZyk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBsb2cxcCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9tYXRoLWxvZzFwJyk7XG5cbnZhciBuYXRpdmVBY29zaCA9IE1hdGguYWNvc2g7XG52YXIgbG9nID0gTWF0aC5sb2c7XG52YXIgc3FydCA9IE1hdGguc3FydDtcbnZhciBMTjIgPSBNYXRoLkxOMjtcblxudmFyIEZPUkNFRCA9ICFuYXRpdmVBY29zaFxuICAvLyBWOCBidWc6IGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zNTA5XG4gIHx8IE1hdGguZmxvb3IobmF0aXZlQWNvc2goTnVtYmVyLk1BWF9WQUxVRSkpICE9IDcxMFxuICAvLyBUb3IgQnJvd3NlciBidWc6IE1hdGguYWNvc2goSW5maW5pdHkpIC0+IE5hTlxuICB8fCBuYXRpdmVBY29zaChJbmZpbml0eSkgIT0gSW5maW5pdHk7XG5cbi8vIGBNYXRoLmFjb3NoYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWF0aC5hY29zaFxuJCh7IHRhcmdldDogJ01hdGgnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IEZPUkNFRCB9LCB7XG4gIGFjb3NoOiBmdW5jdGlvbiBhY29zaCh4KSB7XG4gICAgcmV0dXJuICh4ID0gK3gpIDwgMSA/IE5hTiA6IHggPiA5NDkwNjI2NS42MjQyNTE1NlxuICAgICAgPyBsb2coeCkgKyBMTjJcbiAgICAgIDogbG9nMXAoeCAtIDEgKyBzcXJ0KHggLSAxKSAqIHNxcnQoeCArIDEpKTtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcblxudmFyIG5hdGl2ZUFzaW5oID0gTWF0aC5hc2luaDtcbnZhciBsb2cgPSBNYXRoLmxvZztcbnZhciBzcXJ0ID0gTWF0aC5zcXJ0O1xuXG5mdW5jdGlvbiBhc2luaCh4KSB7XG4gIHJldHVybiAhaXNGaW5pdGUoeCA9ICt4KSB8fCB4ID09IDAgPyB4IDogeCA8IDAgPyAtYXNpbmgoLXgpIDogbG9nKHggKyBzcXJ0KHggKiB4ICsgMSkpO1xufVxuXG4vLyBgTWF0aC5hc2luaGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW1hdGguYXNpbmhcbi8vIFRvciBCcm93c2VyIGJ1ZzogTWF0aC5hc2luaCgwKSAtPiAtMFxuJCh7IHRhcmdldDogJ01hdGgnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6ICEobmF0aXZlQXNpbmggJiYgMSAvIG5hdGl2ZUFzaW5oKDApID4gMCkgfSwge1xuICBhc2luaDogYXNpbmhcbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG5cbnZhciBuYXRpdmVBdGFuaCA9IE1hdGguYXRhbmg7XG52YXIgbG9nID0gTWF0aC5sb2c7XG5cbi8vIGBNYXRoLmF0YW5oYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWF0aC5hdGFuaFxuLy8gVG9yIEJyb3dzZXIgYnVnOiBNYXRoLmF0YW5oKC0wKSAtPiAwXG4kKHsgdGFyZ2V0OiAnTWF0aCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogIShuYXRpdmVBdGFuaCAmJiAxIC8gbmF0aXZlQXRhbmgoLTApIDwgMCkgfSwge1xuICBhdGFuaDogZnVuY3Rpb24gYXRhbmgoeCkge1xuICAgIHJldHVybiAoeCA9ICt4KSA9PSAwID8geCA6IGxvZygoMSArIHgpIC8gKDEgLSB4KSkgLyAyO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIHNpZ24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbWF0aC1zaWduJyk7XG5cbnZhciBhYnMgPSBNYXRoLmFicztcbnZhciBwb3cgPSBNYXRoLnBvdztcblxuLy8gYE1hdGguY2JydGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW1hdGguY2JydFxuJCh7IHRhcmdldDogJ01hdGgnLCBzdGF0OiB0cnVlIH0sIHtcbiAgY2JydDogZnVuY3Rpb24gY2JydCh4KSB7XG4gICAgcmV0dXJuIHNpZ24oeCA9ICt4KSAqIHBvdyhhYnMoeCksIDEgLyAzKTtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcblxudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbnZhciBsb2cgPSBNYXRoLmxvZztcbnZhciBMT0cyRSA9IE1hdGguTE9HMkU7XG5cbi8vIGBNYXRoLmNsejMyYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWF0aC5jbHozMlxuJCh7IHRhcmdldDogJ01hdGgnLCBzdGF0OiB0cnVlIH0sIHtcbiAgY2x6MzI6IGZ1bmN0aW9uIGNsejMyKHgpIHtcbiAgICByZXR1cm4gKHggPj4+PSAwKSA/IDMxIC0gZmxvb3IobG9nKHggKyAwLjUpICogTE9HMkUpIDogMzI7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZXhwbTEgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbWF0aC1leHBtMScpO1xuXG52YXIgbmF0aXZlQ29zaCA9IE1hdGguY29zaDtcbnZhciBhYnMgPSBNYXRoLmFicztcbnZhciBFID0gTWF0aC5FO1xuXG4vLyBgTWF0aC5jb3NoYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWF0aC5jb3NoXG4kKHsgdGFyZ2V0OiAnTWF0aCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogIW5hdGl2ZUNvc2ggfHwgbmF0aXZlQ29zaCg3MTApID09PSBJbmZpbml0eSB9LCB7XG4gIGNvc2g6IGZ1bmN0aW9uIGNvc2goeCkge1xuICAgIHZhciB0ID0gZXhwbTEoYWJzKHgpIC0gMSkgKyAxO1xuICAgIHJldHVybiAodCArIDEgLyAodCAqIEUgKiBFKSkgKiAoRSAvIDIpO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGV4cG0xID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL21hdGgtZXhwbTEnKTtcblxuLy8gYE1hdGguZXhwbTFgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1tYXRoLmV4cG0xXG4kKHsgdGFyZ2V0OiAnTWF0aCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogZXhwbTEgIT0gTWF0aC5leHBtMSB9LCB7IGV4cG0xOiBleHBtMSB9KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGZyb3VuZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9tYXRoLWZyb3VuZCcpO1xuXG4vLyBgTWF0aC5mcm91bmRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1tYXRoLmZyb3VuZFxuJCh7IHRhcmdldDogJ01hdGgnLCBzdGF0OiB0cnVlIH0sIHsgZnJvdW5kOiBmcm91bmQgfSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcblxudmFyICRoeXBvdCA9IE1hdGguaHlwb3Q7XG52YXIgYWJzID0gTWF0aC5hYnM7XG52YXIgc3FydCA9IE1hdGguc3FydDtcblxuLy8gQ2hyb21lIDc3IGJ1Z1xuLy8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9OTU0NlxudmFyIEJVR0dZID0gISEkaHlwb3QgJiYgJGh5cG90KEluZmluaXR5LCBOYU4pICE9PSBJbmZpbml0eTtcblxuLy8gYE1hdGguaHlwb3RgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1tYXRoLmh5cG90XG4kKHsgdGFyZ2V0OiAnTWF0aCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogQlVHR1kgfSwge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnMgLS0gcmVxdWlyZWQgZm9yIGAubGVuZ3RoYFxuICBoeXBvdDogZnVuY3Rpb24gaHlwb3QodmFsdWUxLCB2YWx1ZTIpIHtcbiAgICB2YXIgc3VtID0gMDtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciBsYXJnID0gMDtcbiAgICB2YXIgYXJnLCBkaXY7XG4gICAgd2hpbGUgKGkgPCBhTGVuKSB7XG4gICAgICBhcmcgPSBhYnMoYXJndW1lbnRzW2krK10pO1xuICAgICAgaWYgKGxhcmcgPCBhcmcpIHtcbiAgICAgICAgZGl2ID0gbGFyZyAvIGFyZztcbiAgICAgICAgc3VtID0gc3VtICogZGl2ICogZGl2ICsgMTtcbiAgICAgICAgbGFyZyA9IGFyZztcbiAgICAgIH0gZWxzZSBpZiAoYXJnID4gMCkge1xuICAgICAgICBkaXYgPSBhcmcgLyBsYXJnO1xuICAgICAgICBzdW0gKz0gZGl2ICogZGl2O1xuICAgICAgfSBlbHNlIHN1bSArPSBhcmc7XG4gICAgfVxuICAgIHJldHVybiBsYXJnID09PSBJbmZpbml0eSA/IEluZmluaXR5IDogbGFyZyAqIHNxcnQoc3VtKTtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG52YXIgbmF0aXZlSW11bCA9IE1hdGguaW11bDtcblxudmFyIEZPUkNFRCA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIG5hdGl2ZUltdWwoMHhGRkZGRkZGRiwgNSkgIT0gLTUgfHwgbmF0aXZlSW11bC5sZW5ndGggIT0gMjtcbn0pO1xuXG4vLyBgTWF0aC5pbXVsYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWF0aC5pbXVsXG4vLyBzb21lIFdlYktpdCB2ZXJzaW9ucyBmYWlscyB3aXRoIGJpZyBudW1iZXJzLCBzb21lIGhhcyB3cm9uZyBhcml0eVxuJCh7IHRhcmdldDogJ01hdGgnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IEZPUkNFRCB9LCB7XG4gIGltdWw6IGZ1bmN0aW9uIGltdWwoeCwgeSkge1xuICAgIHZhciBVSU5UMTYgPSAweEZGRkY7XG4gICAgdmFyIHhuID0gK3g7XG4gICAgdmFyIHluID0gK3k7XG4gICAgdmFyIHhsID0gVUlOVDE2ICYgeG47XG4gICAgdmFyIHlsID0gVUlOVDE2ICYgeW47XG4gICAgcmV0dXJuIDAgfCB4bCAqIHlsICsgKChVSU5UMTYgJiB4biA+Pj4gMTYpICogeWwgKyB4bCAqIChVSU5UMTYgJiB5biA+Pj4gMTYpIDw8IDE2ID4+PiAwKTtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcblxudmFyIGxvZyA9IE1hdGgubG9nO1xudmFyIExPRzEwRSA9IE1hdGguTE9HMTBFO1xuXG4vLyBgTWF0aC5sb2cxMGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW1hdGgubG9nMTBcbiQoeyB0YXJnZXQ6ICdNYXRoJywgc3RhdDogdHJ1ZSB9LCB7XG4gIGxvZzEwOiBmdW5jdGlvbiBsb2cxMCh4KSB7XG4gICAgcmV0dXJuIGxvZyh4KSAqIExPRzEwRTtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBsb2cxcCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9tYXRoLWxvZzFwJyk7XG5cbi8vIGBNYXRoLmxvZzFwYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWF0aC5sb2cxcFxuJCh7IHRhcmdldDogJ01hdGgnLCBzdGF0OiB0cnVlIH0sIHsgbG9nMXA6IGxvZzFwIH0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG5cbnZhciBsb2cgPSBNYXRoLmxvZztcbnZhciBMTjIgPSBNYXRoLkxOMjtcblxuLy8gYE1hdGgubG9nMmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW1hdGgubG9nMlxuJCh7IHRhcmdldDogJ01hdGgnLCBzdGF0OiB0cnVlIH0sIHtcbiAgbG9nMjogZnVuY3Rpb24gbG9nMih4KSB7XG4gICAgcmV0dXJuIGxvZyh4KSAvIExOMjtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBzaWduID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL21hdGgtc2lnbicpO1xuXG4vLyBgTWF0aC5zaWduYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWF0aC5zaWduXG4kKHsgdGFyZ2V0OiAnTWF0aCcsIHN0YXQ6IHRydWUgfSwge1xuICBzaWduOiBzaWduXG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgZXhwbTEgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbWF0aC1leHBtMScpO1xuXG52YXIgYWJzID0gTWF0aC5hYnM7XG52YXIgZXhwID0gTWF0aC5leHA7XG52YXIgRSA9IE1hdGguRTtcblxudmFyIEZPUkNFRCA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIE1hdGguc2luaCgtMmUtMTcpICE9IC0yZS0xNztcbn0pO1xuXG4vLyBgTWF0aC5zaW5oYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWF0aC5zaW5oXG4vLyBWOCBuZWFyIENocm9taXVtIDM4IGhhcyBhIHByb2JsZW0gd2l0aCB2ZXJ5IHNtYWxsIG51bWJlcnNcbiQoeyB0YXJnZXQ6ICdNYXRoJywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBGT1JDRUQgfSwge1xuICBzaW5oOiBmdW5jdGlvbiBzaW5oKHgpIHtcbiAgICByZXR1cm4gYWJzKHggPSAreCkgPCAxID8gKGV4cG0xKHgpIC0gZXhwbTEoLXgpKSAvIDIgOiAoZXhwKHggLSAxKSAtIGV4cCgteCAtIDEpKSAqIChFIC8gMik7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZXhwbTEgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbWF0aC1leHBtMScpO1xuXG52YXIgZXhwID0gTWF0aC5leHA7XG5cbi8vIGBNYXRoLnRhbmhgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1tYXRoLnRhbmhcbiQoeyB0YXJnZXQ6ICdNYXRoJywgc3RhdDogdHJ1ZSB9LCB7XG4gIHRhbmg6IGZ1bmN0aW9uIHRhbmgoeCkge1xuICAgIHZhciBhID0gZXhwbTEoeCA9ICt4KTtcbiAgICB2YXIgYiA9IGV4cG0xKC14KTtcbiAgICByZXR1cm4gYSA9PSBJbmZpbml0eSA/IDEgOiBiID09IEluZmluaXR5ID8gLTEgOiAoYSAtIGIpIC8gKGV4cCh4KSArIGV4cCgteCkpO1xuICB9XG59KTtcbiIsInZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtdG8tc3RyaW5nLXRhZycpO1xuXG4vLyBNYXRoW0BAdG9TdHJpbmdUYWddIHByb3BlcnR5XG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW1hdGgtQEB0b3N0cmluZ3RhZ1xuc2V0VG9TdHJpbmdUYWcoTWF0aCwgJ01hdGgnLCB0cnVlKTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xuXG52YXIgY2VpbCA9IE1hdGguY2VpbDtcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG5cbi8vIGBNYXRoLnRydW5jYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWF0aC50cnVuY1xuJCh7IHRhcmdldDogJ01hdGgnLCBzdGF0OiB0cnVlIH0sIHtcbiAgdHJ1bmM6IGZ1bmN0aW9uIHRydW5jKGl0KSB7XG4gICAgcmV0dXJuIChpdCA+IDAgPyBmbG9vciA6IGNlaWwpKGl0KTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgaXNGb3JjZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtZm9yY2VkJyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mLXJhdycpO1xudmFyIGluaGVyaXRJZlJlcXVpcmVkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2luaGVyaXQtaWYtcmVxdWlyZWQnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1wcmltaXRpdmUnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtY3JlYXRlJyk7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcycpLmY7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKS5mO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKS5mO1xudmFyIHRyaW0gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLXRyaW0nKS50cmltO1xuXG52YXIgTlVNQkVSID0gJ051bWJlcic7XG52YXIgTmF0aXZlTnVtYmVyID0gZ2xvYmFsW05VTUJFUl07XG52YXIgTnVtYmVyUHJvdG90eXBlID0gTmF0aXZlTnVtYmVyLnByb3RvdHlwZTtcblxuLy8gT3BlcmEgfjEyIGhhcyBicm9rZW4gT2JqZWN0I3RvU3RyaW5nXG52YXIgQlJPS0VOX0NMQVNTT0YgPSBjbGFzc29mKGNyZWF0ZShOdW1iZXJQcm90b3R5cGUpKSA9PSBOVU1CRVI7XG5cbi8vIGBUb051bWJlcmAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXRvbnVtYmVyXG52YXIgdG9OdW1iZXIgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgdmFyIGl0ID0gdG9QcmltaXRpdmUoYXJndW1lbnQsIGZhbHNlKTtcbiAgdmFyIGZpcnN0LCB0aGlyZCwgcmFkaXgsIG1heENvZGUsIGRpZ2l0cywgbGVuZ3RoLCBpbmRleCwgY29kZTtcbiAgaWYgKHR5cGVvZiBpdCA9PSAnc3RyaW5nJyAmJiBpdC5sZW5ndGggPiAyKSB7XG4gICAgaXQgPSB0cmltKGl0KTtcbiAgICBmaXJzdCA9IGl0LmNoYXJDb2RlQXQoMCk7XG4gICAgaWYgKGZpcnN0ID09PSA0MyB8fCBmaXJzdCA9PT0gNDUpIHtcbiAgICAgIHRoaXJkID0gaXQuY2hhckNvZGVBdCgyKTtcbiAgICAgIGlmICh0aGlyZCA9PT0gODggfHwgdGhpcmQgPT09IDEyMCkgcmV0dXJuIE5hTjsgLy8gTnVtYmVyKCcrMHgxJykgc2hvdWxkIGJlIE5hTiwgb2xkIFY4IGZpeFxuICAgIH0gZWxzZSBpZiAoZmlyc3QgPT09IDQ4KSB7XG4gICAgICBzd2l0Y2ggKGl0LmNoYXJDb2RlQXQoMSkpIHtcbiAgICAgICAgY2FzZSA2NjogY2FzZSA5ODogcmFkaXggPSAyOyBtYXhDb2RlID0gNDk7IGJyZWFrOyAvLyBmYXN0IGVxdWFsIG9mIC9eMGJbMDFdKyQvaVxuICAgICAgICBjYXNlIDc5OiBjYXNlIDExMTogcmFkaXggPSA4OyBtYXhDb2RlID0gNTU7IGJyZWFrOyAvLyBmYXN0IGVxdWFsIG9mIC9eMG9bMC03XSskL2lcbiAgICAgICAgZGVmYXVsdDogcmV0dXJuICtpdDtcbiAgICAgIH1cbiAgICAgIGRpZ2l0cyA9IGl0LnNsaWNlKDIpO1xuICAgICAgbGVuZ3RoID0gZGlnaXRzLmxlbmd0aDtcbiAgICAgIGZvciAoaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICBjb2RlID0gZGlnaXRzLmNoYXJDb2RlQXQoaW5kZXgpO1xuICAgICAgICAvLyBwYXJzZUludCBwYXJzZXMgYSBzdHJpbmcgdG8gYSBmaXJzdCB1bmF2YWlsYWJsZSBzeW1ib2xcbiAgICAgICAgLy8gYnV0IFRvTnVtYmVyIHNob3VsZCByZXR1cm4gTmFOIGlmIGEgc3RyaW5nIGNvbnRhaW5zIHVuYXZhaWxhYmxlIHN5bWJvbHNcbiAgICAgICAgaWYgKGNvZGUgPCA0OCB8fCBjb2RlID4gbWF4Q29kZSkgcmV0dXJuIE5hTjtcbiAgICAgIH0gcmV0dXJuIHBhcnNlSW50KGRpZ2l0cywgcmFkaXgpO1xuICAgIH1cbiAgfSByZXR1cm4gK2l0O1xufTtcblxuLy8gYE51bWJlcmAgY29uc3RydWN0b3Jcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbnVtYmVyLWNvbnN0cnVjdG9yXG5pZiAoaXNGb3JjZWQoTlVNQkVSLCAhTmF0aXZlTnVtYmVyKCcgMG8xJykgfHwgIU5hdGl2ZU51bWJlcignMGIxJykgfHwgTmF0aXZlTnVtYmVyKCcrMHgxJykpKSB7XG4gIHZhciBOdW1iZXJXcmFwcGVyID0gZnVuY3Rpb24gTnVtYmVyKHZhbHVlKSB7XG4gICAgdmFyIGl0ID0gYXJndW1lbnRzLmxlbmd0aCA8IDEgPyAwIDogdmFsdWU7XG4gICAgdmFyIGR1bW15ID0gdGhpcztcbiAgICByZXR1cm4gZHVtbXkgaW5zdGFuY2VvZiBOdW1iZXJXcmFwcGVyXG4gICAgICAvLyBjaGVjayBvbiAxLi5jb25zdHJ1Y3Rvcihmb28pIGNhc2VcbiAgICAgICYmIChCUk9LRU5fQ0xBU1NPRiA/IGZhaWxzKGZ1bmN0aW9uICgpIHsgTnVtYmVyUHJvdG90eXBlLnZhbHVlT2YuY2FsbChkdW1teSk7IH0pIDogY2xhc3NvZihkdW1teSkgIT0gTlVNQkVSKVxuICAgICAgICA/IGluaGVyaXRJZlJlcXVpcmVkKG5ldyBOYXRpdmVOdW1iZXIodG9OdW1iZXIoaXQpKSwgZHVtbXksIE51bWJlcldyYXBwZXIpIDogdG9OdW1iZXIoaXQpO1xuICB9O1xuICBmb3IgKHZhciBrZXlzID0gREVTQ1JJUFRPUlMgPyBnZXRPd25Qcm9wZXJ0eU5hbWVzKE5hdGl2ZU51bWJlcikgOiAoXG4gICAgLy8gRVMzOlxuICAgICdNQVhfVkFMVUUsTUlOX1ZBTFVFLE5hTixORUdBVElWRV9JTkZJTklUWSxQT1NJVElWRV9JTkZJTklUWSwnICtcbiAgICAvLyBFUzIwMTUgKGluIGNhc2UsIGlmIG1vZHVsZXMgd2l0aCBFUzIwMTUgTnVtYmVyIHN0YXRpY3MgcmVxdWlyZWQgYmVmb3JlKTpcbiAgICAnRVBTSUxPTixpc0Zpbml0ZSxpc0ludGVnZXIsaXNOYU4saXNTYWZlSW50ZWdlcixNQVhfU0FGRV9JTlRFR0VSLCcgK1xuICAgICdNSU5fU0FGRV9JTlRFR0VSLHBhcnNlRmxvYXQscGFyc2VJbnQsaXNJbnRlZ2VyLCcgK1xuICAgIC8vIEVTTmV4dFxuICAgICdmcm9tU3RyaW5nLHJhbmdlJ1xuICApLnNwbGl0KCcsJyksIGogPSAwLCBrZXk7IGtleXMubGVuZ3RoID4gajsgaisrKSB7XG4gICAgaWYgKGhhcyhOYXRpdmVOdW1iZXIsIGtleSA9IGtleXNbal0pICYmICFoYXMoTnVtYmVyV3JhcHBlciwga2V5KSkge1xuICAgICAgZGVmaW5lUHJvcGVydHkoTnVtYmVyV3JhcHBlciwga2V5LCBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTmF0aXZlTnVtYmVyLCBrZXkpKTtcbiAgICB9XG4gIH1cbiAgTnVtYmVyV3JhcHBlci5wcm90b3R5cGUgPSBOdW1iZXJQcm90b3R5cGU7XG4gIE51bWJlclByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IE51bWJlcldyYXBwZXI7XG4gIHJlZGVmaW5lKGdsb2JhbCwgTlVNQkVSLCBOdW1iZXJXcmFwcGVyKTtcbn1cbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xuXG4vLyBgTnVtYmVyLkVQU0lMT05gIGNvbnN0YW50XG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW51bWJlci5lcHNpbG9uXG4kKHsgdGFyZ2V0OiAnTnVtYmVyJywgc3RhdDogdHJ1ZSB9LCB7XG4gIEVQU0lMT046IE1hdGgucG93KDIsIC01Milcbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgbnVtYmVySXNGaW5pdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbnVtYmVyLWlzLWZpbml0ZScpO1xuXG4vLyBgTnVtYmVyLmlzRmluaXRlYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbnVtYmVyLmlzZmluaXRlXG4kKHsgdGFyZ2V0OiAnTnVtYmVyJywgc3RhdDogdHJ1ZSB9LCB7IGlzRmluaXRlOiBudW1iZXJJc0Zpbml0ZSB9KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGlzSW50ZWdlciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1pbnRlZ2VyJyk7XG5cbi8vIGBOdW1iZXIuaXNJbnRlZ2VyYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbnVtYmVyLmlzaW50ZWdlclxuJCh7IHRhcmdldDogJ051bWJlcicsIHN0YXQ6IHRydWUgfSwge1xuICBpc0ludGVnZXI6IGlzSW50ZWdlclxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcblxuLy8gYE51bWJlci5pc05hTmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW51bWJlci5pc25hblxuJCh7IHRhcmdldDogJ051bWJlcicsIHN0YXQ6IHRydWUgfSwge1xuICBpc05hTjogZnVuY3Rpb24gaXNOYU4obnVtYmVyKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZSAtLSBOYU4gY2hlY2tcbiAgICByZXR1cm4gbnVtYmVyICE9IG51bWJlcjtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBpc0ludGVnZXIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtaW50ZWdlcicpO1xuXG52YXIgYWJzID0gTWF0aC5hYnM7XG5cbi8vIGBOdW1iZXIuaXNTYWZlSW50ZWdlcmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW51bWJlci5pc3NhZmVpbnRlZ2VyXG4kKHsgdGFyZ2V0OiAnTnVtYmVyJywgc3RhdDogdHJ1ZSB9LCB7XG4gIGlzU2FmZUludGVnZXI6IGZ1bmN0aW9uIGlzU2FmZUludGVnZXIobnVtYmVyKSB7XG4gICAgcmV0dXJuIGlzSW50ZWdlcihudW1iZXIpICYmIGFicyhudW1iZXIpIDw9IDB4MUZGRkZGRkZGRkZGRkY7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG5cbi8vIGBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUmAgY29uc3RhbnRcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbnVtYmVyLm1heF9zYWZlX2ludGVnZXJcbiQoeyB0YXJnZXQ6ICdOdW1iZXInLCBzdGF0OiB0cnVlIH0sIHtcbiAgTUFYX1NBRkVfSU5URUdFUjogMHgxRkZGRkZGRkZGRkZGRlxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcblxuLy8gYE51bWJlci5NSU5fU0FGRV9JTlRFR0VSYCBjb25zdGFudFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1udW1iZXIubWluX3NhZmVfaW50ZWdlclxuJCh7IHRhcmdldDogJ051bWJlcicsIHN0YXQ6IHRydWUgfSwge1xuICBNSU5fU0FGRV9JTlRFR0VSOiAtMHgxRkZGRkZGRkZGRkZGRlxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBwYXJzZUZsb2F0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL251bWJlci1wYXJzZS1mbG9hdCcpO1xuXG4vLyBgTnVtYmVyLnBhcnNlRmxvYXRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1udW1iZXIucGFyc2VGbG9hdFxuJCh7IHRhcmdldDogJ051bWJlcicsIHN0YXQ6IHRydWUsIGZvcmNlZDogTnVtYmVyLnBhcnNlRmxvYXQgIT0gcGFyc2VGbG9hdCB9LCB7XG4gIHBhcnNlRmxvYXQ6IHBhcnNlRmxvYXRcbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgcGFyc2VJbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbnVtYmVyLXBhcnNlLWludCcpO1xuXG4vLyBgTnVtYmVyLnBhcnNlSW50YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbnVtYmVyLnBhcnNlaW50XG4kKHsgdGFyZ2V0OiAnTnVtYmVyJywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBOdW1iZXIucGFyc2VJbnQgIT0gcGFyc2VJbnQgfSwge1xuICBwYXJzZUludDogcGFyc2VJbnRcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWludGVnZXInKTtcbnZhciB0aGlzTnVtYmVyVmFsdWUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdGhpcy1udW1iZXItdmFsdWUnKTtcbnZhciByZXBlYXQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLXJlcGVhdCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbnZhciBuYXRpdmVUb0ZpeGVkID0gMS4wLnRvRml4ZWQ7XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xuXG52YXIgcG93ID0gZnVuY3Rpb24gKHgsIG4sIGFjYykge1xuICByZXR1cm4gbiA9PT0gMCA/IGFjYyA6IG4gJSAyID09PSAxID8gcG93KHgsIG4gLSAxLCBhY2MgKiB4KSA6IHBvdyh4ICogeCwgbiAvIDIsIGFjYyk7XG59O1xuXG52YXIgbG9nID0gZnVuY3Rpb24gKHgpIHtcbiAgdmFyIG4gPSAwO1xuICB2YXIgeDIgPSB4O1xuICB3aGlsZSAoeDIgPj0gNDA5Nikge1xuICAgIG4gKz0gMTI7XG4gICAgeDIgLz0gNDA5NjtcbiAgfVxuICB3aGlsZSAoeDIgPj0gMikge1xuICAgIG4gKz0gMTtcbiAgICB4MiAvPSAyO1xuICB9IHJldHVybiBuO1xufTtcblxudmFyIG11bHRpcGx5ID0gZnVuY3Rpb24gKGRhdGEsIG4sIGMpIHtcbiAgdmFyIGluZGV4ID0gLTE7XG4gIHZhciBjMiA9IGM7XG4gIHdoaWxlICgrK2luZGV4IDwgNikge1xuICAgIGMyICs9IG4gKiBkYXRhW2luZGV4XTtcbiAgICBkYXRhW2luZGV4XSA9IGMyICUgMWU3O1xuICAgIGMyID0gZmxvb3IoYzIgLyAxZTcpO1xuICB9XG59O1xuXG52YXIgZGl2aWRlID0gZnVuY3Rpb24gKGRhdGEsIG4pIHtcbiAgdmFyIGluZGV4ID0gNjtcbiAgdmFyIGMgPSAwO1xuICB3aGlsZSAoLS1pbmRleCA+PSAwKSB7XG4gICAgYyArPSBkYXRhW2luZGV4XTtcbiAgICBkYXRhW2luZGV4XSA9IGZsb29yKGMgLyBuKTtcbiAgICBjID0gKGMgJSBuKSAqIDFlNztcbiAgfVxufTtcblxudmFyIGRhdGFUb1N0cmluZyA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIHZhciBpbmRleCA9IDY7XG4gIHZhciBzID0gJyc7XG4gIHdoaWxlICgtLWluZGV4ID49IDApIHtcbiAgICBpZiAocyAhPT0gJycgfHwgaW5kZXggPT09IDAgfHwgZGF0YVtpbmRleF0gIT09IDApIHtcbiAgICAgIHZhciB0ID0gU3RyaW5nKGRhdGFbaW5kZXhdKTtcbiAgICAgIHMgPSBzID09PSAnJyA/IHQgOiBzICsgcmVwZWF0LmNhbGwoJzAnLCA3IC0gdC5sZW5ndGgpICsgdDtcbiAgICB9XG4gIH0gcmV0dXJuIHM7XG59O1xuXG52YXIgRk9SQ0VEID0gbmF0aXZlVG9GaXhlZCAmJiAoXG4gIDAuMDAwMDgudG9GaXhlZCgzKSAhPT0gJzAuMDAwJyB8fFxuICAwLjkudG9GaXhlZCgwKSAhPT0gJzEnIHx8XG4gIDEuMjU1LnRvRml4ZWQoMikgIT09ICcxLjI1JyB8fFxuICAxMDAwMDAwMDAwMDAwMDAwMTI4LjAudG9GaXhlZCgwKSAhPT0gJzEwMDAwMDAwMDAwMDAwMDAxMjgnXG4pIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIFY4IH4gQW5kcm9pZCA0LjMtXG4gIG5hdGl2ZVRvRml4ZWQuY2FsbCh7fSk7XG59KTtcblxuLy8gYE51bWJlci5wcm90b3R5cGUudG9GaXhlZGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW51bWJlci5wcm90b3R5cGUudG9maXhlZFxuJCh7IHRhcmdldDogJ051bWJlcicsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IEZPUkNFRCB9LCB7XG4gIHRvRml4ZWQ6IGZ1bmN0aW9uIHRvRml4ZWQoZnJhY3Rpb25EaWdpdHMpIHtcbiAgICB2YXIgbnVtYmVyID0gdGhpc051bWJlclZhbHVlKHRoaXMpO1xuICAgIHZhciBmcmFjdERpZ2l0cyA9IHRvSW50ZWdlcihmcmFjdGlvbkRpZ2l0cyk7XG4gICAgdmFyIGRhdGEgPSBbMCwgMCwgMCwgMCwgMCwgMF07XG4gICAgdmFyIHNpZ24gPSAnJztcbiAgICB2YXIgcmVzdWx0ID0gJzAnO1xuICAgIHZhciBlLCB6LCBqLCBrO1xuXG4gICAgaWYgKGZyYWN0RGlnaXRzIDwgMCB8fCBmcmFjdERpZ2l0cyA+IDIwKSB0aHJvdyBSYW5nZUVycm9yKCdJbmNvcnJlY3QgZnJhY3Rpb24gZGlnaXRzJyk7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZSAtLSBOYU4gY2hlY2tcbiAgICBpZiAobnVtYmVyICE9IG51bWJlcikgcmV0dXJuICdOYU4nO1xuICAgIGlmIChudW1iZXIgPD0gLTFlMjEgfHwgbnVtYmVyID49IDFlMjEpIHJldHVybiBTdHJpbmcobnVtYmVyKTtcbiAgICBpZiAobnVtYmVyIDwgMCkge1xuICAgICAgc2lnbiA9ICctJztcbiAgICAgIG51bWJlciA9IC1udW1iZXI7XG4gICAgfVxuICAgIGlmIChudW1iZXIgPiAxZS0yMSkge1xuICAgICAgZSA9IGxvZyhudW1iZXIgKiBwb3coMiwgNjksIDEpKSAtIDY5O1xuICAgICAgeiA9IGUgPCAwID8gbnVtYmVyICogcG93KDIsIC1lLCAxKSA6IG51bWJlciAvIHBvdygyLCBlLCAxKTtcbiAgICAgIHogKj0gMHgxMDAwMDAwMDAwMDAwMDtcbiAgICAgIGUgPSA1MiAtIGU7XG4gICAgICBpZiAoZSA+IDApIHtcbiAgICAgICAgbXVsdGlwbHkoZGF0YSwgMCwgeik7XG4gICAgICAgIGogPSBmcmFjdERpZ2l0cztcbiAgICAgICAgd2hpbGUgKGogPj0gNykge1xuICAgICAgICAgIG11bHRpcGx5KGRhdGEsIDFlNywgMCk7XG4gICAgICAgICAgaiAtPSA3O1xuICAgICAgICB9XG4gICAgICAgIG11bHRpcGx5KGRhdGEsIHBvdygxMCwgaiwgMSksIDApO1xuICAgICAgICBqID0gZSAtIDE7XG4gICAgICAgIHdoaWxlIChqID49IDIzKSB7XG4gICAgICAgICAgZGl2aWRlKGRhdGEsIDEgPDwgMjMpO1xuICAgICAgICAgIGogLT0gMjM7XG4gICAgICAgIH1cbiAgICAgICAgZGl2aWRlKGRhdGEsIDEgPDwgaik7XG4gICAgICAgIG11bHRpcGx5KGRhdGEsIDEsIDEpO1xuICAgICAgICBkaXZpZGUoZGF0YSwgMik7XG4gICAgICAgIHJlc3VsdCA9IGRhdGFUb1N0cmluZyhkYXRhKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG11bHRpcGx5KGRhdGEsIDAsIHopO1xuICAgICAgICBtdWx0aXBseShkYXRhLCAxIDw8IC1lLCAwKTtcbiAgICAgICAgcmVzdWx0ID0gZGF0YVRvU3RyaW5nKGRhdGEpICsgcmVwZWF0LmNhbGwoJzAnLCBmcmFjdERpZ2l0cyk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChmcmFjdERpZ2l0cyA+IDApIHtcbiAgICAgIGsgPSByZXN1bHQubGVuZ3RoO1xuICAgICAgcmVzdWx0ID0gc2lnbiArIChrIDw9IGZyYWN0RGlnaXRzXG4gICAgICAgID8gJzAuJyArIHJlcGVhdC5jYWxsKCcwJywgZnJhY3REaWdpdHMgLSBrKSArIHJlc3VsdFxuICAgICAgICA6IHJlc3VsdC5zbGljZSgwLCBrIC0gZnJhY3REaWdpdHMpICsgJy4nICsgcmVzdWx0LnNsaWNlKGsgLSBmcmFjdERpZ2l0cykpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHQgPSBzaWduICsgcmVzdWx0O1xuICAgIH0gcmV0dXJuIHJlc3VsdDtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIHRoaXNOdW1iZXJWYWx1ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90aGlzLW51bWJlci12YWx1ZScpO1xuXG52YXIgbmF0aXZlVG9QcmVjaXNpb24gPSAxLjAudG9QcmVjaXNpb247XG5cbnZhciBGT1JDRUQgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIElFNy1cbiAgcmV0dXJuIG5hdGl2ZVRvUHJlY2lzaW9uLmNhbGwoMSwgdW5kZWZpbmVkKSAhPT0gJzEnO1xufSkgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gVjggfiBBbmRyb2lkIDQuMy1cbiAgbmF0aXZlVG9QcmVjaXNpb24uY2FsbCh7fSk7XG59KTtcblxuLy8gYE51bWJlci5wcm90b3R5cGUudG9QcmVjaXNpb25gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1udW1iZXIucHJvdG90eXBlLnRvcHJlY2lzaW9uXG4kKHsgdGFyZ2V0OiAnTnVtYmVyJywgcHJvdG86IHRydWUsIGZvcmNlZDogRk9SQ0VEIH0sIHtcbiAgdG9QcmVjaXNpb246IGZ1bmN0aW9uIHRvUHJlY2lzaW9uKHByZWNpc2lvbikge1xuICAgIHJldHVybiBwcmVjaXNpb24gPT09IHVuZGVmaW5lZFxuICAgICAgPyBuYXRpdmVUb1ByZWNpc2lvbi5jYWxsKHRoaXNOdW1iZXJWYWx1ZSh0aGlzKSlcbiAgICAgIDogbmF0aXZlVG9QcmVjaXNpb24uY2FsbCh0aGlzTnVtYmVyVmFsdWUodGhpcyksIHByZWNpc2lvbik7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgYXNzaWduID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1hc3NpZ24nKTtcblxuLy8gYE9iamVjdC5hc3NpZ25gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuYXNzaWduXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBPYmplY3QuYXNzaWduICE9PSBhc3NpZ24gfSwge1xuICBhc3NpZ246IGFzc2lnblxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtY3JlYXRlJyk7XG5cbi8vIGBPYmplY3QuY3JlYXRlYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmNyZWF0ZVxuJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUsIHNoYW06ICFERVNDUklQVE9SUyB9LCB7XG4gIGNyZWF0ZTogY3JlYXRlXG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgRk9SQ0VEID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1wcm90b3R5cGUtYWNjZXNzb3JzLWZvcmNlZCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWZ1bmN0aW9uJyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xuXG4vLyBgT2JqZWN0LnByb3RvdHlwZS5fX2RlZmluZUdldHRlcl9fYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LnByb3RvdHlwZS5fX2RlZmluZUdldHRlcl9fXG5pZiAoREVTQ1JJUFRPUlMpIHtcbiAgJCh7IHRhcmdldDogJ09iamVjdCcsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IEZPUkNFRCB9LCB7XG4gICAgX19kZWZpbmVHZXR0ZXJfXzogZnVuY3Rpb24gX19kZWZpbmVHZXR0ZXJfXyhQLCBnZXR0ZXIpIHtcbiAgICAgIGRlZmluZVByb3BlcnR5TW9kdWxlLmYodG9PYmplY3QodGhpcyksIFAsIHsgZ2V0OiBhRnVuY3Rpb24oZ2V0dGVyKSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0pO1xuICAgIH1cbiAgfSk7XG59XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGRlZmluZVByb3BlcnRpZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0aWVzJyk7XG5cbi8vIGBPYmplY3QuZGVmaW5lUHJvcGVydGllc2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5kZWZpbmVwcm9wZXJ0aWVzXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiAhREVTQ1JJUFRPUlMsIHNoYW06ICFERVNDUklQVE9SUyB9LCB7XG4gIGRlZmluZVByb3BlcnRpZXM6IGRlZmluZVByb3BlcnRpZXNcbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBvYmplY3REZWZpbmVQcm9wZXJ0eU1vZGlsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG5cbi8vIGBPYmplY3QuZGVmaW5lUHJvcGVydHlgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZGVmaW5lcHJvcGVydHlcbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6ICFERVNDUklQVE9SUywgc2hhbTogIURFU0NSSVBUT1JTIH0sIHtcbiAgZGVmaW5lUHJvcGVydHk6IG9iamVjdERlZmluZVByb3BlcnR5TW9kaWxlLmZcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBGT1JDRUQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXByb3RvdHlwZS1hY2Nlc3NvcnMtZm9yY2VkJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtZnVuY3Rpb24nKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG5cbi8vIGBPYmplY3QucHJvdG90eXBlLl9fZGVmaW5lU2V0dGVyX19gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QucHJvdG90eXBlLl9fZGVmaW5lU2V0dGVyX19cbmlmIChERVNDUklQVE9SUykge1xuICAkKHsgdGFyZ2V0OiAnT2JqZWN0JywgcHJvdG86IHRydWUsIGZvcmNlZDogRk9SQ0VEIH0sIHtcbiAgICBfX2RlZmluZVNldHRlcl9fOiBmdW5jdGlvbiBfX2RlZmluZVNldHRlcl9fKFAsIHNldHRlcikge1xuICAgICAgZGVmaW5lUHJvcGVydHlNb2R1bGUuZih0b09iamVjdCh0aGlzKSwgUCwgeyBzZXQ6IGFGdW5jdGlvbihzZXR0ZXIpLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSk7XG4gICAgfVxuICB9KTtcbn1cbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyICRlbnRyaWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC10by1hcnJheScpLmVudHJpZXM7XG5cbi8vIGBPYmplY3QuZW50cmllc2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5lbnRyaWVzXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSB9LCB7XG4gIGVudHJpZXM6IGZ1bmN0aW9uIGVudHJpZXMoTykge1xuICAgIHJldHVybiAkZW50cmllcyhPKTtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBGUkVFWklORyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mcmVlemluZycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgb25GcmVlemUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtbWV0YWRhdGEnKS5vbkZyZWV6ZTtcblxudmFyIG5hdGl2ZUZyZWV6ZSA9IE9iamVjdC5mcmVlemU7XG52YXIgRkFJTFNfT05fUFJJTUlUSVZFUyA9IGZhaWxzKGZ1bmN0aW9uICgpIHsgbmF0aXZlRnJlZXplKDEpOyB9KTtcblxuLy8gYE9iamVjdC5mcmVlemVgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZnJlZXplXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBGQUlMU19PTl9QUklNSVRJVkVTLCBzaGFtOiAhRlJFRVpJTkcgfSwge1xuICBmcmVlemU6IGZ1bmN0aW9uIGZyZWV6ZShpdCkge1xuICAgIHJldHVybiBuYXRpdmVGcmVlemUgJiYgaXNPYmplY3QoaXQpID8gbmF0aXZlRnJlZXplKG9uRnJlZXplKGl0KSkgOiBpdDtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBpdGVyYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdGUnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHknKTtcblxuLy8gYE9iamVjdC5mcm9tRW50cmllc2AgbWV0aG9kXG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1vYmplY3QtZnJvbS1lbnRyaWVzXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSB9LCB7XG4gIGZyb21FbnRyaWVzOiBmdW5jdGlvbiBmcm9tRW50cmllcyhpdGVyYWJsZSkge1xuICAgIHZhciBvYmogPSB7fTtcbiAgICBpdGVyYXRlKGl0ZXJhYmxlLCBmdW5jdGlvbiAoaywgdikge1xuICAgICAgY3JlYXRlUHJvcGVydHkob2JqLCBrLCB2KTtcbiAgICB9LCB7IEFTX0VOVFJJRVM6IHRydWUgfSk7XG4gICAgcmV0dXJuIG9iajtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIG5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJykuZjtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xuXG52YXIgRkFJTFNfT05fUFJJTUlUSVZFUyA9IGZhaWxzKGZ1bmN0aW9uICgpIHsgbmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKDEpOyB9KTtcbnZhciBGT1JDRUQgPSAhREVTQ1JJUFRPUlMgfHwgRkFJTFNfT05fUFJJTUlUSVZFUztcblxuLy8gYE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBGT1JDRUQsIHNoYW06ICFERVNDUklQVE9SUyB9LCB7XG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvcjogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGl0LCBrZXkpIHtcbiAgICByZXR1cm4gbmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRvSW5kZXhlZE9iamVjdChpdCksIGtleSk7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBvd25LZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL293bi1rZXlzJyk7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnZhciBjcmVhdGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHknKTtcblxuLy8gYE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmdldG93bnByb3BlcnR5ZGVzY3JpcHRvcnNcbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlLCBzaGFtOiAhREVTQ1JJUFRPUlMgfSwge1xuICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKG9iamVjdCkge1xuICAgIHZhciBPID0gdG9JbmRleGVkT2JqZWN0KG9iamVjdCk7XG4gICAgdmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZS5mO1xuICAgIHZhciBrZXlzID0gb3duS2V5cyhPKTtcbiAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIga2V5LCBkZXNjcmlwdG9yO1xuICAgIHdoaWxlIChrZXlzLmxlbmd0aCA+IGluZGV4KSB7XG4gICAgICBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIGtleSA9IGtleXNbaW5kZXgrK10pO1xuICAgICAgaWYgKGRlc2NyaXB0b3IgIT09IHVuZGVmaW5lZCkgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBrZXksIGRlc2NyaXB0b3IpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgbmF0aXZlR2V0T3duUHJvcGVydHlOYW1lcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcy1leHRlcm5hbCcpLmY7XG5cbnZhciBGQUlMU19PTl9QUklNSVRJVkVTID0gZmFpbHMoZnVuY3Rpb24gKCkgeyByZXR1cm4gIU9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKDEpOyB9KTtcblxuLy8gYE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmdldG93bnByb3BlcnR5bmFtZXNcbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IEZBSUxTX09OX1BSSU1JVElWRVMgfSwge1xuICBnZXRPd25Qcm9wZXJ0eU5hbWVzOiBuYXRpdmVHZXRPd25Qcm9wZXJ0eU5hbWVzXG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgbmF0aXZlR2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1wcm90b3R5cGUtb2YnKTtcbnZhciBDT1JSRUNUX1BST1RPVFlQRV9HRVRURVIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29ycmVjdC1wcm90b3R5cGUtZ2V0dGVyJyk7XG5cbnZhciBGQUlMU19PTl9QUklNSVRJVkVTID0gZmFpbHMoZnVuY3Rpb24gKCkgeyBuYXRpdmVHZXRQcm90b3R5cGVPZigxKTsgfSk7XG5cbi8vIGBPYmplY3QuZ2V0UHJvdG90eXBlT2ZgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0cHJvdG90eXBlb2ZcbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IEZBSUxTX09OX1BSSU1JVElWRVMsIHNoYW06ICFDT1JSRUNUX1BST1RPVFlQRV9HRVRURVIgfSwge1xuICBnZXRQcm90b3R5cGVPZjogZnVuY3Rpb24gZ2V0UHJvdG90eXBlT2YoaXQpIHtcbiAgICByZXR1cm4gbmF0aXZlR2V0UHJvdG90eXBlT2YodG9PYmplY3QoaXQpKTtcbiAgfVxufSk7XG5cbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG5cbnZhciBuYXRpdmVJc0V4dGVuc2libGUgPSBPYmplY3QuaXNFeHRlbnNpYmxlO1xudmFyIEZBSUxTX09OX1BSSU1JVElWRVMgPSBmYWlscyhmdW5jdGlvbiAoKSB7IG5hdGl2ZUlzRXh0ZW5zaWJsZSgxKTsgfSk7XG5cbi8vIGBPYmplY3QuaXNFeHRlbnNpYmxlYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmlzZXh0ZW5zaWJsZVxuJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogRkFJTFNfT05fUFJJTUlUSVZFUyB9LCB7XG4gIGlzRXh0ZW5zaWJsZTogZnVuY3Rpb24gaXNFeHRlbnNpYmxlKGl0KSB7XG4gICAgcmV0dXJuIGlzT2JqZWN0KGl0KSA/IG5hdGl2ZUlzRXh0ZW5zaWJsZSA/IG5hdGl2ZUlzRXh0ZW5zaWJsZShpdCkgOiB0cnVlIDogZmFsc2U7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcblxudmFyIG5hdGl2ZUlzRnJvemVuID0gT2JqZWN0LmlzRnJvemVuO1xudmFyIEZBSUxTX09OX1BSSU1JVElWRVMgPSBmYWlscyhmdW5jdGlvbiAoKSB7IG5hdGl2ZUlzRnJvemVuKDEpOyB9KTtcblxuLy8gYE9iamVjdC5pc0Zyb3plbmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5pc2Zyb3plblxuJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogRkFJTFNfT05fUFJJTUlUSVZFUyB9LCB7XG4gIGlzRnJvemVuOiBmdW5jdGlvbiBpc0Zyb3plbihpdCkge1xuICAgIHJldHVybiBpc09iamVjdChpdCkgPyBuYXRpdmVJc0Zyb3plbiA/IG5hdGl2ZUlzRnJvemVuKGl0KSA6IGZhbHNlIDogdHJ1ZTtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xuXG52YXIgbmF0aXZlSXNTZWFsZWQgPSBPYmplY3QuaXNTZWFsZWQ7XG52YXIgRkFJTFNfT05fUFJJTUlUSVZFUyA9IGZhaWxzKGZ1bmN0aW9uICgpIHsgbmF0aXZlSXNTZWFsZWQoMSk7IH0pO1xuXG4vLyBgT2JqZWN0LmlzU2VhbGVkYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0Lmlzc2VhbGVkXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBGQUlMU19PTl9QUklNSVRJVkVTIH0sIHtcbiAgaXNTZWFsZWQ6IGZ1bmN0aW9uIGlzU2VhbGVkKGl0KSB7XG4gICAgcmV0dXJuIGlzT2JqZWN0KGl0KSA/IG5hdGl2ZUlzU2VhbGVkID8gbmF0aXZlSXNTZWFsZWQoaXQpIDogZmFsc2UgOiB0cnVlO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NhbWUtdmFsdWUnKTtcblxuLy8gYE9iamVjdC5pc2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5pc1xuJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUgfSwge1xuICBpczogaXNcbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgbmF0aXZlS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qta2V5cycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbnZhciBGQUlMU19PTl9QUklNSVRJVkVTID0gZmFpbHMoZnVuY3Rpb24gKCkgeyBuYXRpdmVLZXlzKDEpOyB9KTtcblxuLy8gYE9iamVjdC5rZXlzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmtleXNcbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IEZBSUxTX09OX1BSSU1JVElWRVMgfSwge1xuICBrZXlzOiBmdW5jdGlvbiBrZXlzKGl0KSB7XG4gICAgcmV0dXJuIG5hdGl2ZUtleXModG9PYmplY3QoaXQpKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIEZPUkNFRCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtcHJvdG90eXBlLWFjY2Vzc29ycy1mb3JjZWQnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1wcmltaXRpdmUnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LXByb3RvdHlwZS1vZicpO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJykuZjtcblxuLy8gYE9iamVjdC5wcm90b3R5cGUuX19sb29rdXBHZXR0ZXJfX2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5wcm90b3R5cGUuX19sb29rdXBHZXR0ZXJfX1xuaWYgKERFU0NSSVBUT1JTKSB7XG4gICQoeyB0YXJnZXQ6ICdPYmplY3QnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBGT1JDRUQgfSwge1xuICAgIF9fbG9va3VwR2V0dGVyX186IGZ1bmN0aW9uIF9fbG9va3VwR2V0dGVyX18oUCkge1xuICAgICAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgICAgIHZhciBrZXkgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgICAgIHZhciBkZXNjO1xuICAgICAgZG8ge1xuICAgICAgICBpZiAoZGVzYyA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBrZXkpKSByZXR1cm4gZGVzYy5nZXQ7XG4gICAgICB9IHdoaWxlIChPID0gZ2V0UHJvdG90eXBlT2YoTykpO1xuICAgIH1cbiAgfSk7XG59XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIEZPUkNFRCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtcHJvdG90eXBlLWFjY2Vzc29ycy1mb3JjZWQnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1wcmltaXRpdmUnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LXByb3RvdHlwZS1vZicpO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJykuZjtcblxuLy8gYE9iamVjdC5wcm90b3R5cGUuX19sb29rdXBTZXR0ZXJfX2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5wcm90b3R5cGUuX19sb29rdXBTZXR0ZXJfX1xuaWYgKERFU0NSSVBUT1JTKSB7XG4gICQoeyB0YXJnZXQ6ICdPYmplY3QnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBGT1JDRUQgfSwge1xuICAgIF9fbG9va3VwU2V0dGVyX186IGZ1bmN0aW9uIF9fbG9va3VwU2V0dGVyX18oUCkge1xuICAgICAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgICAgIHZhciBrZXkgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgICAgIHZhciBkZXNjO1xuICAgICAgZG8ge1xuICAgICAgICBpZiAoZGVzYyA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBrZXkpKSByZXR1cm4gZGVzYy5zZXQ7XG4gICAgICB9IHdoaWxlIChPID0gZ2V0UHJvdG90eXBlT2YoTykpO1xuICAgIH1cbiAgfSk7XG59XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBvbkZyZWV6ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1tZXRhZGF0YScpLm9uRnJlZXplO1xudmFyIEZSRUVaSU5HID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZyZWV6aW5nJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxudmFyIG5hdGl2ZVByZXZlbnRFeHRlbnNpb25zID0gT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zO1xudmFyIEZBSUxTX09OX1BSSU1JVElWRVMgPSBmYWlscyhmdW5jdGlvbiAoKSB7IG5hdGl2ZVByZXZlbnRFeHRlbnNpb25zKDEpOyB9KTtcblxuLy8gYE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9uc2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5wcmV2ZW50ZXh0ZW5zaW9uc1xuJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogRkFJTFNfT05fUFJJTUlUSVZFUywgc2hhbTogIUZSRUVaSU5HIH0sIHtcbiAgcHJldmVudEV4dGVuc2lvbnM6IGZ1bmN0aW9uIHByZXZlbnRFeHRlbnNpb25zKGl0KSB7XG4gICAgcmV0dXJuIG5hdGl2ZVByZXZlbnRFeHRlbnNpb25zICYmIGlzT2JqZWN0KGl0KSA/IG5hdGl2ZVByZXZlbnRFeHRlbnNpb25zKG9uRnJlZXplKGl0KSkgOiBpdDtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBvbkZyZWV6ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1tZXRhZGF0YScpLm9uRnJlZXplO1xudmFyIEZSRUVaSU5HID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZyZWV6aW5nJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxudmFyIG5hdGl2ZVNlYWwgPSBPYmplY3Quc2VhbDtcbnZhciBGQUlMU19PTl9QUklNSVRJVkVTID0gZmFpbHMoZnVuY3Rpb24gKCkgeyBuYXRpdmVTZWFsKDEpOyB9KTtcblxuLy8gYE9iamVjdC5zZWFsYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LnNlYWxcbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IEZBSUxTX09OX1BSSU1JVElWRVMsIHNoYW06ICFGUkVFWklORyB9LCB7XG4gIHNlYWw6IGZ1bmN0aW9uIHNlYWwoaXQpIHtcbiAgICByZXR1cm4gbmF0aXZlU2VhbCAmJiBpc09iamVjdChpdCkgPyBuYXRpdmVTZWFsKG9uRnJlZXplKGl0KSkgOiBpdDtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBzZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qtc2V0LXByb3RvdHlwZS1vZicpO1xuXG4vLyBgT2JqZWN0LnNldFByb3RvdHlwZU9mYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LnNldHByb3RvdHlwZW9mXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSB9LCB7XG4gIHNldFByb3RvdHlwZU9mOiBzZXRQcm90b3R5cGVPZlxufSk7XG4iLCJ2YXIgVE9fU1RSSU5HX1RBR19TVVBQT1JUID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZy10YWctc3VwcG9ydCcpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lJyk7XG52YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXRvLXN0cmluZycpO1xuXG4vLyBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmdcbmlmICghVE9fU1RSSU5HX1RBR19TVVBQT1JUKSB7XG4gIHJlZGVmaW5lKE9iamVjdC5wcm90b3R5cGUsICd0b1N0cmluZycsIHRvU3RyaW5nLCB7IHVuc2FmZTogdHJ1ZSB9KTtcbn1cbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyICR2YWx1ZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXRvLWFycmF5JykudmFsdWVzO1xuXG4vLyBgT2JqZWN0LnZhbHVlc2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC52YWx1ZXNcbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlIH0sIHtcbiAgdmFsdWVzOiBmdW5jdGlvbiB2YWx1ZXMoTykge1xuICAgIHJldHVybiAkdmFsdWVzKE8pO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIHBhcnNlRmxvYXRJbXBsZW1lbnRhdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9udW1iZXItcGFyc2UtZmxvYXQnKTtcblxuLy8gYHBhcnNlRmxvYXRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1wYXJzZWZsb2F0LXN0cmluZ1xuJCh7IGdsb2JhbDogdHJ1ZSwgZm9yY2VkOiBwYXJzZUZsb2F0ICE9IHBhcnNlRmxvYXRJbXBsZW1lbnRhdGlvbiB9LCB7XG4gIHBhcnNlRmxvYXQ6IHBhcnNlRmxvYXRJbXBsZW1lbnRhdGlvblxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBwYXJzZUludEltcGxlbWVudGF0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL251bWJlci1wYXJzZS1pbnQnKTtcblxuLy8gYHBhcnNlSW50YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcGFyc2VpbnQtc3RyaW5nLXJhZGl4XG4kKHsgZ2xvYmFsOiB0cnVlLCBmb3JjZWQ6IHBhcnNlSW50ICE9IHBhcnNlSW50SW1wbGVtZW50YXRpb24gfSwge1xuICBwYXJzZUludDogcGFyc2VJbnRJbXBsZW1lbnRhdGlvblxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1mdW5jdGlvbicpO1xudmFyIG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25ldy1wcm9taXNlLWNhcGFiaWxpdHknKTtcbnZhciBwZXJmb3JtID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3BlcmZvcm0nKTtcbnZhciBpdGVyYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdGUnKTtcblxuLy8gYFByb21pc2UuYWxsU2V0dGxlZGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXByb21pc2UuYWxsc2V0dGxlZFxuJCh7IHRhcmdldDogJ1Byb21pc2UnLCBzdGF0OiB0cnVlIH0sIHtcbiAgYWxsU2V0dGxlZDogZnVuY3Rpb24gYWxsU2V0dGxlZChpdGVyYWJsZSkge1xuICAgIHZhciBDID0gdGhpcztcbiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlLmYoQyk7XG4gICAgdmFyIHJlc29sdmUgPSBjYXBhYmlsaXR5LnJlc29sdmU7XG4gICAgdmFyIHJlamVjdCA9IGNhcGFiaWxpdHkucmVqZWN0O1xuICAgIHZhciByZXN1bHQgPSBwZXJmb3JtKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBwcm9taXNlUmVzb2x2ZSA9IGFGdW5jdGlvbihDLnJlc29sdmUpO1xuICAgICAgdmFyIHZhbHVlcyA9IFtdO1xuICAgICAgdmFyIGNvdW50ZXIgPSAwO1xuICAgICAgdmFyIHJlbWFpbmluZyA9IDE7XG4gICAgICBpdGVyYXRlKGl0ZXJhYmxlLCBmdW5jdGlvbiAocHJvbWlzZSkge1xuICAgICAgICB2YXIgaW5kZXggPSBjb3VudGVyKys7XG4gICAgICAgIHZhciBhbHJlYWR5Q2FsbGVkID0gZmFsc2U7XG4gICAgICAgIHZhbHVlcy5wdXNoKHVuZGVmaW5lZCk7XG4gICAgICAgIHJlbWFpbmluZysrO1xuICAgICAgICBwcm9taXNlUmVzb2x2ZS5jYWxsKEMsIHByb21pc2UpLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgaWYgKGFscmVhZHlDYWxsZWQpIHJldHVybjtcbiAgICAgICAgICBhbHJlYWR5Q2FsbGVkID0gdHJ1ZTtcbiAgICAgICAgICB2YWx1ZXNbaW5kZXhdID0geyBzdGF0dXM6ICdmdWxmaWxsZWQnLCB2YWx1ZTogdmFsdWUgfTtcbiAgICAgICAgICAtLXJlbWFpbmluZyB8fCByZXNvbHZlKHZhbHVlcyk7XG4gICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgIGlmIChhbHJlYWR5Q2FsbGVkKSByZXR1cm47XG4gICAgICAgICAgYWxyZWFkeUNhbGxlZCA9IHRydWU7XG4gICAgICAgICAgdmFsdWVzW2luZGV4XSA9IHsgc3RhdHVzOiAncmVqZWN0ZWQnLCByZWFzb246IGVycm9yIH07XG4gICAgICAgICAgLS1yZW1haW5pbmcgfHwgcmVzb2x2ZSh2YWx1ZXMpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgICAgLS1yZW1haW5pbmcgfHwgcmVzb2x2ZSh2YWx1ZXMpO1xuICAgIH0pO1xuICAgIGlmIChyZXN1bHQuZXJyb3IpIHJlamVjdChyZXN1bHQudmFsdWUpO1xuICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtZnVuY3Rpb24nKTtcbnZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25ldy1wcm9taXNlLWNhcGFiaWxpdHknKTtcbnZhciBwZXJmb3JtID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3BlcmZvcm0nKTtcbnZhciBpdGVyYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdGUnKTtcblxudmFyIFBST01JU0VfQU5ZX0VSUk9SID0gJ05vIG9uZSBwcm9taXNlIHJlc29sdmVkJztcblxuLy8gYFByb21pc2UuYW55YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcHJvbWlzZS5hbnlcbiQoeyB0YXJnZXQ6ICdQcm9taXNlJywgc3RhdDogdHJ1ZSB9LCB7XG4gIGFueTogZnVuY3Rpb24gYW55KGl0ZXJhYmxlKSB7XG4gICAgdmFyIEMgPSB0aGlzO1xuICAgIHZhciBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUuZihDKTtcbiAgICB2YXIgcmVzb2x2ZSA9IGNhcGFiaWxpdHkucmVzb2x2ZTtcbiAgICB2YXIgcmVqZWN0ID0gY2FwYWJpbGl0eS5yZWplY3Q7XG4gICAgdmFyIHJlc3VsdCA9IHBlcmZvcm0oZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHByb21pc2VSZXNvbHZlID0gYUZ1bmN0aW9uKEMucmVzb2x2ZSk7XG4gICAgICB2YXIgZXJyb3JzID0gW107XG4gICAgICB2YXIgY291bnRlciA9IDA7XG4gICAgICB2YXIgcmVtYWluaW5nID0gMTtcbiAgICAgIHZhciBhbHJlYWR5UmVzb2x2ZWQgPSBmYWxzZTtcbiAgICAgIGl0ZXJhdGUoaXRlcmFibGUsIGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gICAgICAgIHZhciBpbmRleCA9IGNvdW50ZXIrKztcbiAgICAgICAgdmFyIGFscmVhZHlSZWplY3RlZCA9IGZhbHNlO1xuICAgICAgICBlcnJvcnMucHVzaCh1bmRlZmluZWQpO1xuICAgICAgICByZW1haW5pbmcrKztcbiAgICAgICAgcHJvbWlzZVJlc29sdmUuY2FsbChDLCBwcm9taXNlKS50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgIGlmIChhbHJlYWR5UmVqZWN0ZWQgfHwgYWxyZWFkeVJlc29sdmVkKSByZXR1cm47XG4gICAgICAgICAgYWxyZWFkeVJlc29sdmVkID0gdHJ1ZTtcbiAgICAgICAgICByZXNvbHZlKHZhbHVlKTtcbiAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgaWYgKGFscmVhZHlSZWplY3RlZCB8fCBhbHJlYWR5UmVzb2x2ZWQpIHJldHVybjtcbiAgICAgICAgICBhbHJlYWR5UmVqZWN0ZWQgPSB0cnVlO1xuICAgICAgICAgIGVycm9yc1tpbmRleF0gPSBlcnJvcjtcbiAgICAgICAgICAtLXJlbWFpbmluZyB8fCByZWplY3QobmV3IChnZXRCdWlsdEluKCdBZ2dyZWdhdGVFcnJvcicpKShlcnJvcnMsIFBST01JU0VfQU5ZX0VSUk9SKSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgICAtLXJlbWFpbmluZyB8fCByZWplY3QobmV3IChnZXRCdWlsdEluKCdBZ2dyZWdhdGVFcnJvcicpKShlcnJvcnMsIFBST01JU0VfQU5ZX0VSUk9SKSk7XG4gICAgfSk7XG4gICAgaWYgKHJlc3VsdC5lcnJvcikgcmVqZWN0KHJlc3VsdC52YWx1ZSk7XG4gICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcbnZhciBOYXRpdmVQcm9taXNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25hdGl2ZS1wcm9taXNlLWNvbnN0cnVjdG9yJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG52YXIgcHJvbWlzZVJlc29sdmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcHJvbWlzZS1yZXNvbHZlJyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUnKTtcblxuLy8gU2FmYXJpIGJ1ZyBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MjAwODI5XG52YXIgTk9OX0dFTkVSSUMgPSAhIU5hdGl2ZVByb21pc2UgJiYgZmFpbHMoZnVuY3Rpb24gKCkge1xuICBOYXRpdmVQcm9taXNlLnByb3RvdHlwZVsnZmluYWxseSddLmNhbGwoeyB0aGVuOiBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0gfSwgZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9KTtcbn0pO1xuXG4vLyBgUHJvbWlzZS5wcm90b3R5cGUuZmluYWxseWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXByb21pc2UucHJvdG90eXBlLmZpbmFsbHlcbiQoeyB0YXJnZXQ6ICdQcm9taXNlJywgcHJvdG86IHRydWUsIHJlYWw6IHRydWUsIGZvcmNlZDogTk9OX0dFTkVSSUMgfSwge1xuICAnZmluYWxseSc6IGZ1bmN0aW9uIChvbkZpbmFsbHkpIHtcbiAgICB2YXIgQyA9IHNwZWNpZXNDb25zdHJ1Y3Rvcih0aGlzLCBnZXRCdWlsdEluKCdQcm9taXNlJykpO1xuICAgIHZhciBpc0Z1bmN0aW9uID0gdHlwZW9mIG9uRmluYWxseSA9PSAnZnVuY3Rpb24nO1xuICAgIHJldHVybiB0aGlzLnRoZW4oXG4gICAgICBpc0Z1bmN0aW9uID8gZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgcmV0dXJuIHByb21pc2VSZXNvbHZlKEMsIG9uRmluYWxseSgpKS50aGVuKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHg7IH0pO1xuICAgICAgfSA6IG9uRmluYWxseSxcbiAgICAgIGlzRnVuY3Rpb24gPyBmdW5jdGlvbiAoZSkge1xuICAgICAgICByZXR1cm4gcHJvbWlzZVJlc29sdmUoQywgb25GaW5hbGx5KCkpLnRoZW4oZnVuY3Rpb24gKCkgeyB0aHJvdyBlOyB9KTtcbiAgICAgIH0gOiBvbkZpbmFsbHlcbiAgICApO1xuICB9XG59KTtcblxuLy8gcGF0Y2ggbmF0aXZlIFByb21pc2UucHJvdG90eXBlIGZvciBuYXRpdmUgYXN5bmMgZnVuY3Rpb25zXG5pZiAoIUlTX1BVUkUgJiYgdHlwZW9mIE5hdGl2ZVByb21pc2UgPT0gJ2Z1bmN0aW9uJyAmJiAhTmF0aXZlUHJvbWlzZS5wcm90b3R5cGVbJ2ZpbmFsbHknXSkge1xuICByZWRlZmluZShOYXRpdmVQcm9taXNlLnByb3RvdHlwZSwgJ2ZpbmFsbHknLCBnZXRCdWlsdEluKCdQcm9taXNlJykucHJvdG90eXBlWydmaW5hbGx5J10pO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG52YXIgTmF0aXZlUHJvbWlzZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uYXRpdmUtcHJvbWlzZS1jb25zdHJ1Y3RvcicpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lJyk7XG52YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUtYWxsJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBzZXRTcGVjaWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC1zcGVjaWVzJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtZnVuY3Rpb24nKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLWluc3RhbmNlJyk7XG52YXIgaW5zcGVjdFNvdXJjZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnNwZWN0LXNvdXJjZScpO1xudmFyIGl0ZXJhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0ZScpO1xudmFyIGNoZWNrQ29ycmVjdG5lc3NPZkl0ZXJhdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jaGVjay1jb3JyZWN0bmVzcy1vZi1pdGVyYXRpb24nKTtcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xudmFyIHRhc2sgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdGFzaycpLnNldDtcbnZhciBtaWNyb3Rhc2sgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbWljcm90YXNrJyk7XG52YXIgcHJvbWlzZVJlc29sdmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcHJvbWlzZS1yZXNvbHZlJyk7XG52YXIgaG9zdFJlcG9ydEVycm9ycyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9ob3N0LXJlcG9ydC1lcnJvcnMnKTtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uZXctcHJvbWlzZS1jYXBhYmlsaXR5Jyk7XG52YXIgcGVyZm9ybSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9wZXJmb3JtJyk7XG52YXIgSW50ZXJuYWxTdGF0ZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZScpO1xudmFyIGlzRm9yY2VkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWZvcmNlZCcpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIElTX05PREUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLWlzLW5vZGUnKTtcbnZhciBWOF9WRVJTSU9OID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS12OC12ZXJzaW9uJyk7XG5cbnZhciBTUEVDSUVTID0gd2VsbEtub3duU3ltYm9sKCdzcGVjaWVzJyk7XG52YXIgUFJPTUlTRSA9ICdQcm9taXNlJztcbnZhciBnZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXQ7XG52YXIgc2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuc2V0O1xudmFyIGdldEludGVybmFsUHJvbWlzZVN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXR0ZXJGb3IoUFJPTUlTRSk7XG52YXIgUHJvbWlzZUNvbnN0cnVjdG9yID0gTmF0aXZlUHJvbWlzZTtcbnZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xudmFyIGRvY3VtZW50ID0gZ2xvYmFsLmRvY3VtZW50O1xudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcbnZhciAkZmV0Y2ggPSBnZXRCdWlsdEluKCdmZXRjaCcpO1xudmFyIG5ld1Byb21pc2VDYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUuZjtcbnZhciBuZXdHZW5lcmljUHJvbWlzZUNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eTtcbnZhciBESVNQQVRDSF9FVkVOVCA9ICEhKGRvY3VtZW50ICYmIGRvY3VtZW50LmNyZWF0ZUV2ZW50ICYmIGdsb2JhbC5kaXNwYXRjaEV2ZW50KTtcbnZhciBOQVRJVkVfUkVKRUNUSU9OX0VWRU5UID0gdHlwZW9mIFByb21pc2VSZWplY3Rpb25FdmVudCA9PSAnZnVuY3Rpb24nO1xudmFyIFVOSEFORExFRF9SRUpFQ1RJT04gPSAndW5oYW5kbGVkcmVqZWN0aW9uJztcbnZhciBSRUpFQ1RJT05fSEFORExFRCA9ICdyZWplY3Rpb25oYW5kbGVkJztcbnZhciBQRU5ESU5HID0gMDtcbnZhciBGVUxGSUxMRUQgPSAxO1xudmFyIFJFSkVDVEVEID0gMjtcbnZhciBIQU5ETEVEID0gMTtcbnZhciBVTkhBTkRMRUQgPSAyO1xudmFyIEludGVybmFsLCBPd25Qcm9taXNlQ2FwYWJpbGl0eSwgUHJvbWlzZVdyYXBwZXIsIG5hdGl2ZVRoZW47XG5cbnZhciBGT1JDRUQgPSBpc0ZvcmNlZChQUk9NSVNFLCBmdW5jdGlvbiAoKSB7XG4gIHZhciBHTE9CQUxfQ09SRV9KU19QUk9NSVNFID0gaW5zcGVjdFNvdXJjZShQcm9taXNlQ29uc3RydWN0b3IpICE9PSBTdHJpbmcoUHJvbWlzZUNvbnN0cnVjdG9yKTtcbiAgaWYgKCFHTE9CQUxfQ09SRV9KU19QUk9NSVNFKSB7XG4gICAgLy8gVjggNi42IChOb2RlIDEwIGFuZCBDaHJvbWUgNjYpIGhhdmUgYSBidWcgd2l0aCByZXNvbHZpbmcgY3VzdG9tIHRoZW5hYmxlc1xuICAgIC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTgzMDU2NVxuICAgIC8vIFdlIGNhbid0IGRldGVjdCBpdCBzeW5jaHJvbm91c2x5LCBzbyBqdXN0IGNoZWNrIHZlcnNpb25zXG4gICAgaWYgKFY4X1ZFUlNJT04gPT09IDY2KSByZXR1cm4gdHJ1ZTtcbiAgICAvLyBVbmhhbmRsZWQgcmVqZWN0aW9ucyB0cmFja2luZyBzdXBwb3J0LCBOb2RlSlMgUHJvbWlzZSB3aXRob3V0IGl0IGZhaWxzIEBAc3BlY2llcyB0ZXN0XG4gICAgaWYgKCFJU19OT0RFICYmICFOQVRJVkVfUkVKRUNUSU9OX0VWRU5UKSByZXR1cm4gdHJ1ZTtcbiAgfVxuICAvLyBXZSBuZWVkIFByb21pc2UjZmluYWxseSBpbiB0aGUgcHVyZSB2ZXJzaW9uIGZvciBwcmV2ZW50aW5nIHByb3RvdHlwZSBwb2xsdXRpb25cbiAgaWYgKElTX1BVUkUgJiYgIVByb21pc2VDb25zdHJ1Y3Rvci5wcm90b3R5cGVbJ2ZpbmFsbHknXSkgcmV0dXJuIHRydWU7XG4gIC8vIFdlIGNhbid0IHVzZSBAQHNwZWNpZXMgZmVhdHVyZSBkZXRlY3Rpb24gaW4gVjggc2luY2UgaXQgY2F1c2VzXG4gIC8vIGRlb3B0aW1pemF0aW9uIGFuZCBwZXJmb3JtYW5jZSBkZWdyYWRhdGlvblxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvNjc5XG4gIGlmIChWOF9WRVJTSU9OID49IDUxICYmIC9uYXRpdmUgY29kZS8udGVzdChQcm9taXNlQ29uc3RydWN0b3IpKSByZXR1cm4gZmFsc2U7XG4gIC8vIERldGVjdCBjb3JyZWN0bmVzcyBvZiBzdWJjbGFzc2luZyB3aXRoIEBAc3BlY2llcyBzdXBwb3J0XG4gIHZhciBwcm9taXNlID0gUHJvbWlzZUNvbnN0cnVjdG9yLnJlc29sdmUoMSk7XG4gIHZhciBGYWtlUHJvbWlzZSA9IGZ1bmN0aW9uIChleGVjKSB7XG4gICAgZXhlYyhmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0sIGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSk7XG4gIH07XG4gIHZhciBjb25zdHJ1Y3RvciA9IHByb21pc2UuY29uc3RydWN0b3IgPSB7fTtcbiAgY29uc3RydWN0b3JbU1BFQ0lFU10gPSBGYWtlUHJvbWlzZTtcbiAgcmV0dXJuICEocHJvbWlzZS50aGVuKGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSkgaW5zdGFuY2VvZiBGYWtlUHJvbWlzZSk7XG59KTtcblxudmFyIElOQ09SUkVDVF9JVEVSQVRJT04gPSBGT1JDRUQgfHwgIWNoZWNrQ29ycmVjdG5lc3NPZkl0ZXJhdGlvbihmdW5jdGlvbiAoaXRlcmFibGUpIHtcbiAgUHJvbWlzZUNvbnN0cnVjdG9yLmFsbChpdGVyYWJsZSlbJ2NhdGNoJ10oZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9KTtcbn0pO1xuXG4vLyBoZWxwZXJzXG52YXIgaXNUaGVuYWJsZSA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgdGhlbjtcbiAgcmV0dXJuIGlzT2JqZWN0KGl0KSAmJiB0eXBlb2YgKHRoZW4gPSBpdC50aGVuKSA9PSAnZnVuY3Rpb24nID8gdGhlbiA6IGZhbHNlO1xufTtcblxudmFyIG5vdGlmeSA9IGZ1bmN0aW9uIChzdGF0ZSwgaXNSZWplY3QpIHtcbiAgaWYgKHN0YXRlLm5vdGlmaWVkKSByZXR1cm47XG4gIHN0YXRlLm5vdGlmaWVkID0gdHJ1ZTtcbiAgdmFyIGNoYWluID0gc3RhdGUucmVhY3Rpb25zO1xuICBtaWNyb3Rhc2soZnVuY3Rpb24gKCkge1xuICAgIHZhciB2YWx1ZSA9IHN0YXRlLnZhbHVlO1xuICAgIHZhciBvayA9IHN0YXRlLnN0YXRlID09IEZVTEZJTExFRDtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIC8vIHZhcmlhYmxlIGxlbmd0aCAtIGNhbid0IHVzZSBmb3JFYWNoXG4gICAgd2hpbGUgKGNoYWluLmxlbmd0aCA+IGluZGV4KSB7XG4gICAgICB2YXIgcmVhY3Rpb24gPSBjaGFpbltpbmRleCsrXTtcbiAgICAgIHZhciBoYW5kbGVyID0gb2sgPyByZWFjdGlvbi5vayA6IHJlYWN0aW9uLmZhaWw7XG4gICAgICB2YXIgcmVzb2x2ZSA9IHJlYWN0aW9uLnJlc29sdmU7XG4gICAgICB2YXIgcmVqZWN0ID0gcmVhY3Rpb24ucmVqZWN0O1xuICAgICAgdmFyIGRvbWFpbiA9IHJlYWN0aW9uLmRvbWFpbjtcbiAgICAgIHZhciByZXN1bHQsIHRoZW4sIGV4aXRlZDtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmIChoYW5kbGVyKSB7XG4gICAgICAgICAgaWYgKCFvaykge1xuICAgICAgICAgICAgaWYgKHN0YXRlLnJlamVjdGlvbiA9PT0gVU5IQU5ETEVEKSBvbkhhbmRsZVVuaGFuZGxlZChzdGF0ZSk7XG4gICAgICAgICAgICBzdGF0ZS5yZWplY3Rpb24gPSBIQU5ETEVEO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaGFuZGxlciA9PT0gdHJ1ZSkgcmVzdWx0ID0gdmFsdWU7XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAoZG9tYWluKSBkb21haW4uZW50ZXIoKTtcbiAgICAgICAgICAgIHJlc3VsdCA9IGhhbmRsZXIodmFsdWUpOyAvLyBjYW4gdGhyb3dcbiAgICAgICAgICAgIGlmIChkb21haW4pIHtcbiAgICAgICAgICAgICAgZG9tYWluLmV4aXQoKTtcbiAgICAgICAgICAgICAgZXhpdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHJlc3VsdCA9PT0gcmVhY3Rpb24ucHJvbWlzZSkge1xuICAgICAgICAgICAgcmVqZWN0KFR5cGVFcnJvcignUHJvbWlzZS1jaGFpbiBjeWNsZScpKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHRoZW4gPSBpc1RoZW5hYmxlKHJlc3VsdCkpIHtcbiAgICAgICAgICAgIHRoZW4uY2FsbChyZXN1bHQsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSBlbHNlIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgfSBlbHNlIHJlamVjdCh2YWx1ZSk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBpZiAoZG9tYWluICYmICFleGl0ZWQpIGRvbWFpbi5leGl0KCk7XG4gICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICB9XG4gICAgfVxuICAgIHN0YXRlLnJlYWN0aW9ucyA9IFtdO1xuICAgIHN0YXRlLm5vdGlmaWVkID0gZmFsc2U7XG4gICAgaWYgKGlzUmVqZWN0ICYmICFzdGF0ZS5yZWplY3Rpb24pIG9uVW5oYW5kbGVkKHN0YXRlKTtcbiAgfSk7XG59O1xuXG52YXIgZGlzcGF0Y2hFdmVudCA9IGZ1bmN0aW9uIChuYW1lLCBwcm9taXNlLCByZWFzb24pIHtcbiAgdmFyIGV2ZW50LCBoYW5kbGVyO1xuICBpZiAoRElTUEFUQ0hfRVZFTlQpIHtcbiAgICBldmVudCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdFdmVudCcpO1xuICAgIGV2ZW50LnByb21pc2UgPSBwcm9taXNlO1xuICAgIGV2ZW50LnJlYXNvbiA9IHJlYXNvbjtcbiAgICBldmVudC5pbml0RXZlbnQobmFtZSwgZmFsc2UsIHRydWUpO1xuICAgIGdsb2JhbC5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbiAgfSBlbHNlIGV2ZW50ID0geyBwcm9taXNlOiBwcm9taXNlLCByZWFzb246IHJlYXNvbiB9O1xuICBpZiAoIU5BVElWRV9SRUpFQ1RJT05fRVZFTlQgJiYgKGhhbmRsZXIgPSBnbG9iYWxbJ29uJyArIG5hbWVdKSkgaGFuZGxlcihldmVudCk7XG4gIGVsc2UgaWYgKG5hbWUgPT09IFVOSEFORExFRF9SRUpFQ1RJT04pIGhvc3RSZXBvcnRFcnJvcnMoJ1VuaGFuZGxlZCBwcm9taXNlIHJlamVjdGlvbicsIHJlYXNvbik7XG59O1xuXG52YXIgb25VbmhhbmRsZWQgPSBmdW5jdGlvbiAoc3RhdGUpIHtcbiAgdGFzay5jYWxsKGdsb2JhbCwgZnVuY3Rpb24gKCkge1xuICAgIHZhciBwcm9taXNlID0gc3RhdGUuZmFjYWRlO1xuICAgIHZhciB2YWx1ZSA9IHN0YXRlLnZhbHVlO1xuICAgIHZhciBJU19VTkhBTkRMRUQgPSBpc1VuaGFuZGxlZChzdGF0ZSk7XG4gICAgdmFyIHJlc3VsdDtcbiAgICBpZiAoSVNfVU5IQU5ETEVEKSB7XG4gICAgICByZXN1bHQgPSBwZXJmb3JtKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKElTX05PREUpIHtcbiAgICAgICAgICBwcm9jZXNzLmVtaXQoJ3VuaGFuZGxlZFJlamVjdGlvbicsIHZhbHVlLCBwcm9taXNlKTtcbiAgICAgICAgfSBlbHNlIGRpc3BhdGNoRXZlbnQoVU5IQU5ETEVEX1JFSkVDVElPTiwgcHJvbWlzZSwgdmFsdWUpO1xuICAgICAgfSk7XG4gICAgICAvLyBCcm93c2VycyBzaG91bGQgbm90IHRyaWdnZXIgYHJlamVjdGlvbkhhbmRsZWRgIGV2ZW50IGlmIGl0IHdhcyBoYW5kbGVkIGhlcmUsIE5vZGVKUyAtIHNob3VsZFxuICAgICAgc3RhdGUucmVqZWN0aW9uID0gSVNfTk9ERSB8fCBpc1VuaGFuZGxlZChzdGF0ZSkgPyBVTkhBTkRMRUQgOiBIQU5ETEVEO1xuICAgICAgaWYgKHJlc3VsdC5lcnJvcikgdGhyb3cgcmVzdWx0LnZhbHVlO1xuICAgIH1cbiAgfSk7XG59O1xuXG52YXIgaXNVbmhhbmRsZWQgPSBmdW5jdGlvbiAoc3RhdGUpIHtcbiAgcmV0dXJuIHN0YXRlLnJlamVjdGlvbiAhPT0gSEFORExFRCAmJiAhc3RhdGUucGFyZW50O1xufTtcblxudmFyIG9uSGFuZGxlVW5oYW5kbGVkID0gZnVuY3Rpb24gKHN0YXRlKSB7XG4gIHRhc2suY2FsbChnbG9iYWwsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcHJvbWlzZSA9IHN0YXRlLmZhY2FkZTtcbiAgICBpZiAoSVNfTk9ERSkge1xuICAgICAgcHJvY2Vzcy5lbWl0KCdyZWplY3Rpb25IYW5kbGVkJywgcHJvbWlzZSk7XG4gICAgfSBlbHNlIGRpc3BhdGNoRXZlbnQoUkVKRUNUSU9OX0hBTkRMRUQsIHByb21pc2UsIHN0YXRlLnZhbHVlKTtcbiAgfSk7XG59O1xuXG52YXIgYmluZCA9IGZ1bmN0aW9uIChmbiwgc3RhdGUsIHVud3JhcCkge1xuICByZXR1cm4gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgZm4oc3RhdGUsIHZhbHVlLCB1bndyYXApO1xuICB9O1xufTtcblxudmFyIGludGVybmFsUmVqZWN0ID0gZnVuY3Rpb24gKHN0YXRlLCB2YWx1ZSwgdW53cmFwKSB7XG4gIGlmIChzdGF0ZS5kb25lKSByZXR1cm47XG4gIHN0YXRlLmRvbmUgPSB0cnVlO1xuICBpZiAodW53cmFwKSBzdGF0ZSA9IHVud3JhcDtcbiAgc3RhdGUudmFsdWUgPSB2YWx1ZTtcbiAgc3RhdGUuc3RhdGUgPSBSRUpFQ1RFRDtcbiAgbm90aWZ5KHN0YXRlLCB0cnVlKTtcbn07XG5cbnZhciBpbnRlcm5hbFJlc29sdmUgPSBmdW5jdGlvbiAoc3RhdGUsIHZhbHVlLCB1bndyYXApIHtcbiAgaWYgKHN0YXRlLmRvbmUpIHJldHVybjtcbiAgc3RhdGUuZG9uZSA9IHRydWU7XG4gIGlmICh1bndyYXApIHN0YXRlID0gdW53cmFwO1xuICB0cnkge1xuICAgIGlmIChzdGF0ZS5mYWNhZGUgPT09IHZhbHVlKSB0aHJvdyBUeXBlRXJyb3IoXCJQcm9taXNlIGNhbid0IGJlIHJlc29sdmVkIGl0c2VsZlwiKTtcbiAgICB2YXIgdGhlbiA9IGlzVGhlbmFibGUodmFsdWUpO1xuICAgIGlmICh0aGVuKSB7XG4gICAgICBtaWNyb3Rhc2soZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgd3JhcHBlciA9IHsgZG9uZTogZmFsc2UgfTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB0aGVuLmNhbGwodmFsdWUsXG4gICAgICAgICAgICBiaW5kKGludGVybmFsUmVzb2x2ZSwgd3JhcHBlciwgc3RhdGUpLFxuICAgICAgICAgICAgYmluZChpbnRlcm5hbFJlamVjdCwgd3JhcHBlciwgc3RhdGUpXG4gICAgICAgICAgKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICBpbnRlcm5hbFJlamVjdCh3cmFwcGVyLCBlcnJvciwgc3RhdGUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RhdGUudmFsdWUgPSB2YWx1ZTtcbiAgICAgIHN0YXRlLnN0YXRlID0gRlVMRklMTEVEO1xuICAgICAgbm90aWZ5KHN0YXRlLCBmYWxzZSk7XG4gICAgfVxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGludGVybmFsUmVqZWN0KHsgZG9uZTogZmFsc2UgfSwgZXJyb3IsIHN0YXRlKTtcbiAgfVxufTtcblxuLy8gY29uc3RydWN0b3IgcG9seWZpbGxcbmlmIChGT1JDRUQpIHtcbiAgLy8gMjUuNC4zLjEgUHJvbWlzZShleGVjdXRvcilcbiAgUHJvbWlzZUNvbnN0cnVjdG9yID0gZnVuY3Rpb24gUHJvbWlzZShleGVjdXRvcikge1xuICAgIGFuSW5zdGFuY2UodGhpcywgUHJvbWlzZUNvbnN0cnVjdG9yLCBQUk9NSVNFKTtcbiAgICBhRnVuY3Rpb24oZXhlY3V0b3IpO1xuICAgIEludGVybmFsLmNhbGwodGhpcyk7XG4gICAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKTtcbiAgICB0cnkge1xuICAgICAgZXhlY3V0b3IoYmluZChpbnRlcm5hbFJlc29sdmUsIHN0YXRlKSwgYmluZChpbnRlcm5hbFJlamVjdCwgc3RhdGUpKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgaW50ZXJuYWxSZWplY3Qoc3RhdGUsIGVycm9yKTtcbiAgICB9XG4gIH07XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFycyAtLSByZXF1aXJlZCBmb3IgYC5sZW5ndGhgXG4gIEludGVybmFsID0gZnVuY3Rpb24gUHJvbWlzZShleGVjdXRvcikge1xuICAgIHNldEludGVybmFsU3RhdGUodGhpcywge1xuICAgICAgdHlwZTogUFJPTUlTRSxcbiAgICAgIGRvbmU6IGZhbHNlLFxuICAgICAgbm90aWZpZWQ6IGZhbHNlLFxuICAgICAgcGFyZW50OiBmYWxzZSxcbiAgICAgIHJlYWN0aW9uczogW10sXG4gICAgICByZWplY3Rpb246IGZhbHNlLFxuICAgICAgc3RhdGU6IFBFTkRJTkcsXG4gICAgICB2YWx1ZTogdW5kZWZpbmVkXG4gICAgfSk7XG4gIH07XG4gIEludGVybmFsLnByb3RvdHlwZSA9IHJlZGVmaW5lQWxsKFByb21pc2VDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHtcbiAgICAvLyBgUHJvbWlzZS5wcm90b3R5cGUudGhlbmAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1wcm9taXNlLnByb3RvdHlwZS50aGVuXG4gICAgdGhlbjogZnVuY3Rpb24gdGhlbihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCkge1xuICAgICAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxQcm9taXNlU3RhdGUodGhpcyk7XG4gICAgICB2YXIgcmVhY3Rpb24gPSBuZXdQcm9taXNlQ2FwYWJpbGl0eShzcGVjaWVzQ29uc3RydWN0b3IodGhpcywgUHJvbWlzZUNvbnN0cnVjdG9yKSk7XG4gICAgICByZWFjdGlvbi5vayA9IHR5cGVvZiBvbkZ1bGZpbGxlZCA9PSAnZnVuY3Rpb24nID8gb25GdWxmaWxsZWQgOiB0cnVlO1xuICAgICAgcmVhY3Rpb24uZmFpbCA9IHR5cGVvZiBvblJlamVjdGVkID09ICdmdW5jdGlvbicgJiYgb25SZWplY3RlZDtcbiAgICAgIHJlYWN0aW9uLmRvbWFpbiA9IElTX05PREUgPyBwcm9jZXNzLmRvbWFpbiA6IHVuZGVmaW5lZDtcbiAgICAgIHN0YXRlLnBhcmVudCA9IHRydWU7XG4gICAgICBzdGF0ZS5yZWFjdGlvbnMucHVzaChyZWFjdGlvbik7XG4gICAgICBpZiAoc3RhdGUuc3RhdGUgIT0gUEVORElORykgbm90aWZ5KHN0YXRlLCBmYWxzZSk7XG4gICAgICByZXR1cm4gcmVhY3Rpb24ucHJvbWlzZTtcbiAgICB9LFxuICAgIC8vIGBQcm9taXNlLnByb3RvdHlwZS5jYXRjaGAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1wcm9taXNlLnByb3RvdHlwZS5jYXRjaFxuICAgICdjYXRjaCc6IGZ1bmN0aW9uIChvblJlamVjdGVkKSB7XG4gICAgICByZXR1cm4gdGhpcy50aGVuKHVuZGVmaW5lZCwgb25SZWplY3RlZCk7XG4gICAgfVxuICB9KTtcbiAgT3duUHJvbWlzZUNhcGFiaWxpdHkgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHByb21pc2UgPSBuZXcgSW50ZXJuYWwoKTtcbiAgICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHByb21pc2UpO1xuICAgIHRoaXMucHJvbWlzZSA9IHByb21pc2U7XG4gICAgdGhpcy5yZXNvbHZlID0gYmluZChpbnRlcm5hbFJlc29sdmUsIHN0YXRlKTtcbiAgICB0aGlzLnJlamVjdCA9IGJpbmQoaW50ZXJuYWxSZWplY3QsIHN0YXRlKTtcbiAgfTtcbiAgbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUuZiA9IG5ld1Byb21pc2VDYXBhYmlsaXR5ID0gZnVuY3Rpb24gKEMpIHtcbiAgICByZXR1cm4gQyA9PT0gUHJvbWlzZUNvbnN0cnVjdG9yIHx8IEMgPT09IFByb21pc2VXcmFwcGVyXG4gICAgICA/IG5ldyBPd25Qcm9taXNlQ2FwYWJpbGl0eShDKVxuICAgICAgOiBuZXdHZW5lcmljUHJvbWlzZUNhcGFiaWxpdHkoQyk7XG4gIH07XG5cbiAgaWYgKCFJU19QVVJFICYmIHR5cGVvZiBOYXRpdmVQcm9taXNlID09ICdmdW5jdGlvbicpIHtcbiAgICBuYXRpdmVUaGVuID0gTmF0aXZlUHJvbWlzZS5wcm90b3R5cGUudGhlbjtcblxuICAgIC8vIHdyYXAgbmF0aXZlIFByb21pc2UjdGhlbiBmb3IgbmF0aXZlIGFzeW5jIGZ1bmN0aW9uc1xuICAgIHJlZGVmaW5lKE5hdGl2ZVByb21pc2UucHJvdG90eXBlLCAndGhlbicsIGZ1bmN0aW9uIHRoZW4ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpIHtcbiAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZUNvbnN0cnVjdG9yKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgbmF0aXZlVGhlbi5jYWxsKHRoYXQsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICB9KS50aGVuKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKTtcbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvNjQwXG4gICAgfSwgeyB1bnNhZmU6IHRydWUgfSk7XG5cbiAgICAvLyB3cmFwIGZldGNoIHJlc3VsdFxuICAgIGlmICh0eXBlb2YgJGZldGNoID09ICdmdW5jdGlvbicpICQoeyBnbG9iYWw6IHRydWUsIGVudW1lcmFibGU6IHRydWUsIGZvcmNlZDogdHJ1ZSB9LCB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnMgLS0gcmVxdWlyZWQgZm9yIGAubGVuZ3RoYFxuICAgICAgZmV0Y2g6IGZ1bmN0aW9uIGZldGNoKGlucHV0IC8qICwgaW5pdCAqLykge1xuICAgICAgICByZXR1cm4gcHJvbWlzZVJlc29sdmUoUHJvbWlzZUNvbnN0cnVjdG9yLCAkZmV0Y2guYXBwbHkoZ2xvYmFsLCBhcmd1bWVudHMpKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufVxuXG4kKHsgZ2xvYmFsOiB0cnVlLCB3cmFwOiB0cnVlLCBmb3JjZWQ6IEZPUkNFRCB9LCB7XG4gIFByb21pc2U6IFByb21pc2VDb25zdHJ1Y3RvclxufSk7XG5cbnNldFRvU3RyaW5nVGFnKFByb21pc2VDb25zdHJ1Y3RvciwgUFJPTUlTRSwgZmFsc2UsIHRydWUpO1xuc2V0U3BlY2llcyhQUk9NSVNFKTtcblxuUHJvbWlzZVdyYXBwZXIgPSBnZXRCdWlsdEluKFBST01JU0UpO1xuXG4vLyBzdGF0aWNzXG4kKHsgdGFyZ2V0OiBQUk9NSVNFLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IEZPUkNFRCB9LCB7XG4gIC8vIGBQcm9taXNlLnJlamVjdGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcHJvbWlzZS5yZWplY3RcbiAgcmVqZWN0OiBmdW5jdGlvbiByZWplY3Qocikge1xuICAgIHZhciBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkodGhpcyk7XG4gICAgY2FwYWJpbGl0eS5yZWplY3QuY2FsbCh1bmRlZmluZWQsIHIpO1xuICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7XG4gIH1cbn0pO1xuXG4kKHsgdGFyZ2V0OiBQUk9NSVNFLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IElTX1BVUkUgfHwgRk9SQ0VEIH0sIHtcbiAgLy8gYFByb21pc2UucmVzb2x2ZWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcHJvbWlzZS5yZXNvbHZlXG4gIHJlc29sdmU6IGZ1bmN0aW9uIHJlc29sdmUoeCkge1xuICAgIHJldHVybiBwcm9taXNlUmVzb2x2ZShJU19QVVJFICYmIHRoaXMgPT09IFByb21pc2VXcmFwcGVyID8gUHJvbWlzZUNvbnN0cnVjdG9yIDogdGhpcywgeCk7XG4gIH1cbn0pO1xuXG4kKHsgdGFyZ2V0OiBQUk9NSVNFLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IElOQ09SUkVDVF9JVEVSQVRJT04gfSwge1xuICAvLyBgUHJvbWlzZS5hbGxgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXByb21pc2UuYWxsXG4gIGFsbDogZnVuY3Rpb24gYWxsKGl0ZXJhYmxlKSB7XG4gICAgdmFyIEMgPSB0aGlzO1xuICAgIHZhciBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkoQyk7XG4gICAgdmFyIHJlc29sdmUgPSBjYXBhYmlsaXR5LnJlc29sdmU7XG4gICAgdmFyIHJlamVjdCA9IGNhcGFiaWxpdHkucmVqZWN0O1xuICAgIHZhciByZXN1bHQgPSBwZXJmb3JtKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciAkcHJvbWlzZVJlc29sdmUgPSBhRnVuY3Rpb24oQy5yZXNvbHZlKTtcbiAgICAgIHZhciB2YWx1ZXMgPSBbXTtcbiAgICAgIHZhciBjb3VudGVyID0gMDtcbiAgICAgIHZhciByZW1haW5pbmcgPSAxO1xuICAgICAgaXRlcmF0ZShpdGVyYWJsZSwgZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gY291bnRlcisrO1xuICAgICAgICB2YXIgYWxyZWFkeUNhbGxlZCA9IGZhbHNlO1xuICAgICAgICB2YWx1ZXMucHVzaCh1bmRlZmluZWQpO1xuICAgICAgICByZW1haW5pbmcrKztcbiAgICAgICAgJHByb21pc2VSZXNvbHZlLmNhbGwoQywgcHJvbWlzZSkudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICBpZiAoYWxyZWFkeUNhbGxlZCkgcmV0dXJuO1xuICAgICAgICAgIGFscmVhZHlDYWxsZWQgPSB0cnVlO1xuICAgICAgICAgIHZhbHVlc1tpbmRleF0gPSB2YWx1ZTtcbiAgICAgICAgICAtLXJlbWFpbmluZyB8fCByZXNvbHZlKHZhbHVlcyk7XG4gICAgICAgIH0sIHJlamVjdCk7XG4gICAgICB9KTtcbiAgICAgIC0tcmVtYWluaW5nIHx8IHJlc29sdmUodmFsdWVzKTtcbiAgICB9KTtcbiAgICBpZiAocmVzdWx0LmVycm9yKSByZWplY3QocmVzdWx0LnZhbHVlKTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9LFxuICAvLyBgUHJvbWlzZS5yYWNlYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1wcm9taXNlLnJhY2VcbiAgcmFjZTogZnVuY3Rpb24gcmFjZShpdGVyYWJsZSkge1xuICAgIHZhciBDID0gdGhpcztcbiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KEMpO1xuICAgIHZhciByZWplY3QgPSBjYXBhYmlsaXR5LnJlamVjdDtcbiAgICB2YXIgcmVzdWx0ID0gcGVyZm9ybShmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgJHByb21pc2VSZXNvbHZlID0gYUZ1bmN0aW9uKEMucmVzb2x2ZSk7XG4gICAgICBpdGVyYXRlKGl0ZXJhYmxlLCBmdW5jdGlvbiAocHJvbWlzZSkge1xuICAgICAgICAkcHJvbWlzZVJlc29sdmUuY2FsbChDLCBwcm9taXNlKS50aGVuKGNhcGFiaWxpdHkucmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIGlmIChyZXN1bHQuZXJyb3IpIHJlamVjdChyZXN1bHQudmFsdWUpO1xuICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1mdW5jdGlvbicpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbnZhciBuYXRpdmVBcHBseSA9IGdldEJ1aWx0SW4oJ1JlZmxlY3QnLCAnYXBwbHknKTtcbnZhciBmdW5jdGlvbkFwcGx5ID0gRnVuY3Rpb24uYXBwbHk7XG5cbi8vIE1TIEVkZ2UgYXJndW1lbnRzTGlzdCBhcmd1bWVudCBpcyBvcHRpb25hbFxudmFyIE9QVElPTkFMX0FSR1VNRU5UU19MSVNUID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgbmF0aXZlQXBwbHkoZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9KTtcbn0pO1xuXG4vLyBgUmVmbGVjdC5hcHBseWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXJlZmxlY3QuYXBwbHlcbiQoeyB0YXJnZXQ6ICdSZWZsZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBPUFRJT05BTF9BUkdVTUVOVFNfTElTVCB9LCB7XG4gIGFwcGx5OiBmdW5jdGlvbiBhcHBseSh0YXJnZXQsIHRoaXNBcmd1bWVudCwgYXJndW1lbnRzTGlzdCkge1xuICAgIGFGdW5jdGlvbih0YXJnZXQpO1xuICAgIGFuT2JqZWN0KGFyZ3VtZW50c0xpc3QpO1xuICAgIHJldHVybiBuYXRpdmVBcHBseVxuICAgICAgPyBuYXRpdmVBcHBseSh0YXJnZXQsIHRoaXNBcmd1bWVudCwgYXJndW1lbnRzTGlzdClcbiAgICAgIDogZnVuY3Rpb25BcHBseS5jYWxsKHRhcmdldCwgdGhpc0FyZ3VtZW50LCBhcmd1bWVudHNMaXN0KTtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWZ1bmN0aW9uJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1jcmVhdGUnKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG52YXIgbmF0aXZlQ29uc3RydWN0ID0gZ2V0QnVpbHRJbignUmVmbGVjdCcsICdjb25zdHJ1Y3QnKTtcblxuLy8gYFJlZmxlY3QuY29uc3RydWN0YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcmVmbGVjdC5jb25zdHJ1Y3Rcbi8vIE1TIEVkZ2Ugc3VwcG9ydHMgb25seSAyIGFyZ3VtZW50cyBhbmQgYXJndW1lbnRzTGlzdCBhcmd1bWVudCBpcyBvcHRpb25hbFxuLy8gRkYgTmlnaHRseSBzZXRzIHRoaXJkIGFyZ3VtZW50IGFzIGBuZXcudGFyZ2V0YCwgYnV0IGRvZXMgbm90IGNyZWF0ZSBgdGhpc2AgZnJvbSBpdFxudmFyIE5FV19UQVJHRVRfQlVHID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBGKCkgeyAvKiBlbXB0eSAqLyB9XG4gIHJldHVybiAhKG5hdGl2ZUNvbnN0cnVjdChmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0sIFtdLCBGKSBpbnN0YW5jZW9mIEYpO1xufSk7XG52YXIgQVJHU19CVUcgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICBuYXRpdmVDb25zdHJ1Y3QoZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9KTtcbn0pO1xudmFyIEZPUkNFRCA9IE5FV19UQVJHRVRfQlVHIHx8IEFSR1NfQlVHO1xuXG4kKHsgdGFyZ2V0OiAnUmVmbGVjdCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogRk9SQ0VELCBzaGFtOiBGT1JDRUQgfSwge1xuICBjb25zdHJ1Y3Q6IGZ1bmN0aW9uIGNvbnN0cnVjdChUYXJnZXQsIGFyZ3MgLyogLCBuZXdUYXJnZXQgKi8pIHtcbiAgICBhRnVuY3Rpb24oVGFyZ2V0KTtcbiAgICBhbk9iamVjdChhcmdzKTtcbiAgICB2YXIgbmV3VGFyZ2V0ID0gYXJndW1lbnRzLmxlbmd0aCA8IDMgPyBUYXJnZXQgOiBhRnVuY3Rpb24oYXJndW1lbnRzWzJdKTtcbiAgICBpZiAoQVJHU19CVUcgJiYgIU5FV19UQVJHRVRfQlVHKSByZXR1cm4gbmF0aXZlQ29uc3RydWN0KFRhcmdldCwgYXJncywgbmV3VGFyZ2V0KTtcbiAgICBpZiAoVGFyZ2V0ID09IG5ld1RhcmdldCkge1xuICAgICAgLy8gdy9vIGFsdGVyZWQgbmV3VGFyZ2V0LCBvcHRpbWl6YXRpb24gZm9yIDAtNCBhcmd1bWVudHNcbiAgICAgIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICAgICAgY2FzZSAwOiByZXR1cm4gbmV3IFRhcmdldCgpO1xuICAgICAgICBjYXNlIDE6IHJldHVybiBuZXcgVGFyZ2V0KGFyZ3NbMF0pO1xuICAgICAgICBjYXNlIDI6IHJldHVybiBuZXcgVGFyZ2V0KGFyZ3NbMF0sIGFyZ3NbMV0pO1xuICAgICAgICBjYXNlIDM6IHJldHVybiBuZXcgVGFyZ2V0KGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgICAgICBjYXNlIDQ6IHJldHVybiBuZXcgVGFyZ2V0KGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10pO1xuICAgICAgfVxuICAgICAgLy8gdy9vIGFsdGVyZWQgbmV3VGFyZ2V0LCBsb3Qgb2YgYXJndW1lbnRzIGNhc2VcbiAgICAgIHZhciAkYXJncyA9IFtudWxsXTtcbiAgICAgICRhcmdzLnB1c2guYXBwbHkoJGFyZ3MsIGFyZ3MpO1xuICAgICAgcmV0dXJuIG5ldyAoYmluZC5hcHBseShUYXJnZXQsICRhcmdzKSkoKTtcbiAgICB9XG4gICAgLy8gd2l0aCBhbHRlcmVkIG5ld1RhcmdldCwgbm90IHN1cHBvcnQgYnVpbHQtaW4gY29uc3RydWN0b3JzXG4gICAgdmFyIHByb3RvID0gbmV3VGFyZ2V0LnByb3RvdHlwZTtcbiAgICB2YXIgaW5zdGFuY2UgPSBjcmVhdGUoaXNPYmplY3QocHJvdG8pID8gcHJvdG8gOiBPYmplY3QucHJvdG90eXBlKTtcbiAgICB2YXIgcmVzdWx0ID0gRnVuY3Rpb24uYXBwbHkuY2FsbChUYXJnZXQsIGluc3RhbmNlLCBhcmdzKTtcbiAgICByZXR1cm4gaXNPYmplY3QocmVzdWx0KSA/IHJlc3VsdCA6IGluc3RhbmNlO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tcHJpbWl0aXZlJyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbi8vIE1TIEVkZ2UgaGFzIGJyb2tlbiBSZWZsZWN0LmRlZmluZVByb3BlcnR5IC0gdGhyb3dpbmcgaW5zdGVhZCBvZiByZXR1cm5pbmcgZmFsc2VcbnZhciBFUlJPUl9JTlNURUFEX09GX0ZBTFNFID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvKiBnbG9iYWwgUmVmbGVjdCAtLSByZXF1aXJlZCBmb3IgdGVzdGluZyAqL1xuICBSZWZsZWN0LmRlZmluZVByb3BlcnR5KGRlZmluZVByb3BlcnR5TW9kdWxlLmYoe30sIDEsIHsgdmFsdWU6IDEgfSksIDEsIHsgdmFsdWU6IDIgfSk7XG59KTtcblxuLy8gYFJlZmxlY3QuZGVmaW5lUHJvcGVydHlgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1yZWZsZWN0LmRlZmluZXByb3BlcnR5XG4kKHsgdGFyZ2V0OiAnUmVmbGVjdCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogRVJST1JfSU5TVEVBRF9PRl9GQUxTRSwgc2hhbTogIURFU0NSSVBUT1JTIH0sIHtcbiAgZGVmaW5lUHJvcGVydHk6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHlLZXksIGF0dHJpYnV0ZXMpIHtcbiAgICBhbk9iamVjdCh0YXJnZXQpO1xuICAgIHZhciBrZXkgPSB0b1ByaW1pdGl2ZShwcm9wZXJ0eUtleSwgdHJ1ZSk7XG4gICAgYW5PYmplY3QoYXR0cmlidXRlcyk7XG4gICAgdHJ5IHtcbiAgICAgIGRlZmluZVByb3BlcnR5TW9kdWxlLmYodGFyZ2V0LCBrZXksIGF0dHJpYnV0ZXMpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKS5mO1xuXG4vLyBgUmVmbGVjdC5kZWxldGVQcm9wZXJ0eWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXJlZmxlY3QuZGVsZXRlcHJvcGVydHlcbiQoeyB0YXJnZXQ6ICdSZWZsZWN0Jywgc3RhdDogdHJ1ZSB9LCB7XG4gIGRlbGV0ZVByb3BlcnR5OiBmdW5jdGlvbiBkZWxldGVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5S2V5KSB7XG4gICAgdmFyIGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoYW5PYmplY3QodGFyZ2V0KSwgcHJvcGVydHlLZXkpO1xuICAgIHJldHVybiBkZXNjcmlwdG9yICYmICFkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA/IGZhbHNlIDogZGVsZXRlIHRhcmdldFtwcm9wZXJ0eUtleV07XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpO1xuXG4vLyBgUmVmbGVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1yZWZsZWN0LmdldG93bnByb3BlcnR5ZGVzY3JpcHRvclxuJCh7IHRhcmdldDogJ1JlZmxlY3QnLCBzdGF0OiB0cnVlLCBzaGFtOiAhREVTQ1JJUFRPUlMgfSwge1xuICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIHByb3BlcnR5S2V5KSB7XG4gICAgcmV0dXJuIGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZS5mKGFuT2JqZWN0KHRhcmdldCksIHByb3BlcnR5S2V5KTtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBvYmplY3RHZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LXByb3RvdHlwZS1vZicpO1xudmFyIENPUlJFQ1RfUFJPVE9UWVBFX0dFVFRFUiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jb3JyZWN0LXByb3RvdHlwZS1nZXR0ZXInKTtcblxuLy8gYFJlZmxlY3QuZ2V0UHJvdG90eXBlT2ZgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1yZWZsZWN0LmdldHByb3RvdHlwZW9mXG4kKHsgdGFyZ2V0OiAnUmVmbGVjdCcsIHN0YXQ6IHRydWUsIHNoYW06ICFDT1JSRUNUX1BST1RPVFlQRV9HRVRURVIgfSwge1xuICBnZXRQcm90b3R5cGVPZjogZnVuY3Rpb24gZ2V0UHJvdG90eXBlT2YodGFyZ2V0KSB7XG4gICAgcmV0dXJuIG9iamVjdEdldFByb3RvdHlwZU9mKGFuT2JqZWN0KHRhcmdldCkpO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtcHJvdG90eXBlLW9mJyk7XG5cbi8vIGBSZWZsZWN0LmdldGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXJlZmxlY3QuZ2V0XG5mdW5jdGlvbiBnZXQodGFyZ2V0LCBwcm9wZXJ0eUtleSAvKiAsIHJlY2VpdmVyICovKSB7XG4gIHZhciByZWNlaXZlciA9IGFyZ3VtZW50cy5sZW5ndGggPCAzID8gdGFyZ2V0IDogYXJndW1lbnRzWzJdO1xuICB2YXIgZGVzY3JpcHRvciwgcHJvdG90eXBlO1xuICBpZiAoYW5PYmplY3QodGFyZ2V0KSA9PT0gcmVjZWl2ZXIpIHJldHVybiB0YXJnZXRbcHJvcGVydHlLZXldO1xuICBpZiAoZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZS5mKHRhcmdldCwgcHJvcGVydHlLZXkpKSByZXR1cm4gaGFzKGRlc2NyaXB0b3IsICd2YWx1ZScpXG4gICAgPyBkZXNjcmlwdG9yLnZhbHVlXG4gICAgOiBkZXNjcmlwdG9yLmdldCA9PT0gdW5kZWZpbmVkXG4gICAgICA/IHVuZGVmaW5lZFxuICAgICAgOiBkZXNjcmlwdG9yLmdldC5jYWxsKHJlY2VpdmVyKTtcbiAgaWYgKGlzT2JqZWN0KHByb3RvdHlwZSA9IGdldFByb3RvdHlwZU9mKHRhcmdldCkpKSByZXR1cm4gZ2V0KHByb3RvdHlwZSwgcHJvcGVydHlLZXksIHJlY2VpdmVyKTtcbn1cblxuJCh7IHRhcmdldDogJ1JlZmxlY3QnLCBzdGF0OiB0cnVlIH0sIHtcbiAgZ2V0OiBnZXRcbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG5cbi8vIGBSZWZsZWN0Lmhhc2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXJlZmxlY3QuaGFzXG4kKHsgdGFyZ2V0OiAnUmVmbGVjdCcsIHN0YXQ6IHRydWUgfSwge1xuICBoYXM6IGZ1bmN0aW9uIGhhcyh0YXJnZXQsIHByb3BlcnR5S2V5KSB7XG4gICAgcmV0dXJuIHByb3BlcnR5S2V5IGluIHRhcmdldDtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcblxudmFyIG9iamVjdElzRXh0ZW5zaWJsZSA9IE9iamVjdC5pc0V4dGVuc2libGU7XG5cbi8vIGBSZWZsZWN0LmlzRXh0ZW5zaWJsZWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXJlZmxlY3QuaXNleHRlbnNpYmxlXG4kKHsgdGFyZ2V0OiAnUmVmbGVjdCcsIHN0YXQ6IHRydWUgfSwge1xuICBpc0V4dGVuc2libGU6IGZ1bmN0aW9uIGlzRXh0ZW5zaWJsZSh0YXJnZXQpIHtcbiAgICBhbk9iamVjdCh0YXJnZXQpO1xuICAgIHJldHVybiBvYmplY3RJc0V4dGVuc2libGUgPyBvYmplY3RJc0V4dGVuc2libGUodGFyZ2V0KSA6IHRydWU7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgb3duS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vd24ta2V5cycpO1xuXG4vLyBgUmVmbGVjdC5vd25LZXlzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcmVmbGVjdC5vd25rZXlzXG4kKHsgdGFyZ2V0OiAnUmVmbGVjdCcsIHN0YXQ6IHRydWUgfSwge1xuICBvd25LZXlzOiBvd25LZXlzXG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgRlJFRVpJTkcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnJlZXppbmcnKTtcblxuLy8gYFJlZmxlY3QucHJldmVudEV4dGVuc2lvbnNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1yZWZsZWN0LnByZXZlbnRleHRlbnNpb25zXG4kKHsgdGFyZ2V0OiAnUmVmbGVjdCcsIHN0YXQ6IHRydWUsIHNoYW06ICFGUkVFWklORyB9LCB7XG4gIHByZXZlbnRFeHRlbnNpb25zOiBmdW5jdGlvbiBwcmV2ZW50RXh0ZW5zaW9ucyh0YXJnZXQpIHtcbiAgICBhbk9iamVjdCh0YXJnZXQpO1xuICAgIHRyeSB7XG4gICAgICB2YXIgb2JqZWN0UHJldmVudEV4dGVuc2lvbnMgPSBnZXRCdWlsdEluKCdPYmplY3QnLCAncHJldmVudEV4dGVuc2lvbnMnKTtcbiAgICAgIGlmIChvYmplY3RQcmV2ZW50RXh0ZW5zaW9ucykgb2JqZWN0UHJldmVudEV4dGVuc2lvbnModGFyZ2V0KTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGFQb3NzaWJsZVByb3RvdHlwZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLXBvc3NpYmxlLXByb3RvdHlwZScpO1xudmFyIG9iamVjdFNldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1zZXQtcHJvdG90eXBlLW9mJyk7XG5cbi8vIGBSZWZsZWN0LnNldFByb3RvdHlwZU9mYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcmVmbGVjdC5zZXRwcm90b3R5cGVvZlxuaWYgKG9iamVjdFNldFByb3RvdHlwZU9mKSAkKHsgdGFyZ2V0OiAnUmVmbGVjdCcsIHN0YXQ6IHRydWUgfSwge1xuICBzZXRQcm90b3R5cGVPZjogZnVuY3Rpb24gc2V0UHJvdG90eXBlT2YodGFyZ2V0LCBwcm90bykge1xuICAgIGFuT2JqZWN0KHRhcmdldCk7XG4gICAgYVBvc3NpYmxlUHJvdG90eXBlKHByb3RvKTtcbiAgICB0cnkge1xuICAgICAgb2JqZWN0U2V0UHJvdG90eXBlT2YodGFyZ2V0LCBwcm90byk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LXByb3RvdHlwZS1vZicpO1xudmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvcicpO1xuXG4vLyBgUmVmbGVjdC5zZXRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1yZWZsZWN0LnNldFxuZnVuY3Rpb24gc2V0KHRhcmdldCwgcHJvcGVydHlLZXksIFYgLyogLCByZWNlaXZlciAqLykge1xuICB2YXIgcmVjZWl2ZXIgPSBhcmd1bWVudHMubGVuZ3RoIDwgNCA/IHRhcmdldCA6IGFyZ3VtZW50c1szXTtcbiAgdmFyIG93bkRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUuZihhbk9iamVjdCh0YXJnZXQpLCBwcm9wZXJ0eUtleSk7XG4gIHZhciBleGlzdGluZ0Rlc2NyaXB0b3IsIHByb3RvdHlwZTtcbiAgaWYgKCFvd25EZXNjcmlwdG9yKSB7XG4gICAgaWYgKGlzT2JqZWN0KHByb3RvdHlwZSA9IGdldFByb3RvdHlwZU9mKHRhcmdldCkpKSB7XG4gICAgICByZXR1cm4gc2V0KHByb3RvdHlwZSwgcHJvcGVydHlLZXksIFYsIHJlY2VpdmVyKTtcbiAgICB9XG4gICAgb3duRGVzY3JpcHRvciA9IGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigwKTtcbiAgfVxuICBpZiAoaGFzKG93bkRlc2NyaXB0b3IsICd2YWx1ZScpKSB7XG4gICAgaWYgKG93bkRlc2NyaXB0b3Iud3JpdGFibGUgPT09IGZhbHNlIHx8ICFpc09iamVjdChyZWNlaXZlcikpIHJldHVybiBmYWxzZTtcbiAgICBpZiAoZXhpc3RpbmdEZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlLmYocmVjZWl2ZXIsIHByb3BlcnR5S2V5KSkge1xuICAgICAgaWYgKGV4aXN0aW5nRGVzY3JpcHRvci5nZXQgfHwgZXhpc3RpbmdEZXNjcmlwdG9yLnNldCB8fCBleGlzdGluZ0Rlc2NyaXB0b3Iud3JpdGFibGUgPT09IGZhbHNlKSByZXR1cm4gZmFsc2U7XG4gICAgICBleGlzdGluZ0Rlc2NyaXB0b3IudmFsdWUgPSBWO1xuICAgICAgZGVmaW5lUHJvcGVydHlNb2R1bGUuZihyZWNlaXZlciwgcHJvcGVydHlLZXksIGV4aXN0aW5nRGVzY3JpcHRvcik7XG4gICAgfSBlbHNlIGRlZmluZVByb3BlcnR5TW9kdWxlLmYocmVjZWl2ZXIsIHByb3BlcnR5S2V5LCBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMCwgVikpO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHJldHVybiBvd25EZXNjcmlwdG9yLnNldCA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiAob3duRGVzY3JpcHRvci5zZXQuY2FsbChyZWNlaXZlciwgViksIHRydWUpO1xufVxuXG4vLyBNUyBFZGdlIDE3LTE4IFJlZmxlY3Quc2V0IGFsbG93cyBzZXR0aW5nIHRoZSBwcm9wZXJ0eSB0byBvYmplY3Rcbi8vIHdpdGggbm9uLXdyaXRhYmxlIHByb3BlcnR5IG9uIHRoZSBwcm90b3R5cGVcbnZhciBNU19FREdFX0JVRyA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgdmFyIENvbnN0cnVjdG9yID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9O1xuICB2YXIgb2JqZWN0ID0gZGVmaW5lUHJvcGVydHlNb2R1bGUuZihuZXcgQ29uc3RydWN0b3IoKSwgJ2EnLCB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9KTtcbiAgLyogZ2xvYmFsIFJlZmxlY3QgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmcgKi9cbiAgcmV0dXJuIFJlZmxlY3Quc2V0KENvbnN0cnVjdG9yLnByb3RvdHlwZSwgJ2EnLCAxLCBvYmplY3QpICE9PSBmYWxzZTtcbn0pO1xuXG4kKHsgdGFyZ2V0OiAnUmVmbGVjdCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogTVNfRURHRV9CVUcgfSwge1xuICBzZXQ6IHNldFxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXRvLXN0cmluZy10YWcnKTtcblxuJCh7IGdsb2JhbDogdHJ1ZSB9LCB7IFJlZmxlY3Q6IHt9IH0pO1xuXG4vLyBSZWZsZWN0W0BAdG9TdHJpbmdUYWddIHByb3BlcnR5XG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXJlZmxlY3QtQEB0b3N0cmluZ3RhZ1xuc2V0VG9TdHJpbmdUYWcoZ2xvYmFsLlJlZmxlY3QsICdSZWZsZWN0JywgdHJ1ZSk7XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgaXNGb3JjZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtZm9yY2VkJyk7XG52YXIgaW5oZXJpdElmUmVxdWlyZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5oZXJpdC1pZi1yZXF1aXJlZCcpO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKS5mO1xudmFyIGdldE93blByb3BlcnR5TmFtZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMnKS5mO1xudmFyIGlzUmVnRXhwID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXJlZ2V4cCcpO1xudmFyIGdldEZsYWdzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC1mbGFncycpO1xudmFyIHN0aWNreUhlbHBlcnMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLXN0aWNreS1oZWxwZXJzJyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIHNldEludGVybmFsU3RhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKS5zZXQ7XG52YXIgc2V0U3BlY2llcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtc3BlY2llcycpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgTUFUQ0ggPSB3ZWxsS25vd25TeW1ib2woJ21hdGNoJyk7XG52YXIgTmF0aXZlUmVnRXhwID0gZ2xvYmFsLlJlZ0V4cDtcbnZhciBSZWdFeHBQcm90b3R5cGUgPSBOYXRpdmVSZWdFeHAucHJvdG90eXBlO1xudmFyIHJlMSA9IC9hL2c7XG52YXIgcmUyID0gL2EvZztcblxuLy8gXCJuZXdcIiBzaG91bGQgY3JlYXRlIGEgbmV3IG9iamVjdCwgb2xkIHdlYmtpdCBidWdcbnZhciBDT1JSRUNUX05FVyA9IG5ldyBOYXRpdmVSZWdFeHAocmUxKSAhPT0gcmUxO1xuXG52YXIgVU5TVVBQT1JURURfWSA9IHN0aWNreUhlbHBlcnMuVU5TVVBQT1JURURfWTtcblxudmFyIEZPUkNFRCA9IERFU0NSSVBUT1JTICYmIGlzRm9yY2VkKCdSZWdFeHAnLCAoIUNPUlJFQ1RfTkVXIHx8IFVOU1VQUE9SVEVEX1kgfHwgZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZTJbTUFUQ0hdID0gZmFsc2U7XG4gIC8vIFJlZ0V4cCBjb25zdHJ1Y3RvciBjYW4gYWx0ZXIgZmxhZ3MgYW5kIElzUmVnRXhwIHdvcmtzIGNvcnJlY3Qgd2l0aCBAQG1hdGNoXG4gIHJldHVybiBOYXRpdmVSZWdFeHAocmUxKSAhPSByZTEgfHwgTmF0aXZlUmVnRXhwKHJlMikgPT0gcmUyIHx8IE5hdGl2ZVJlZ0V4cChyZTEsICdpJykgIT0gJy9hL2knO1xufSkpKTtcblxuLy8gYFJlZ0V4cGAgY29uc3RydWN0b3Jcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcmVnZXhwLWNvbnN0cnVjdG9yXG5pZiAoRk9SQ0VEKSB7XG4gIHZhciBSZWdFeHBXcmFwcGVyID0gZnVuY3Rpb24gUmVnRXhwKHBhdHRlcm4sIGZsYWdzKSB7XG4gICAgdmFyIHRoaXNJc1JlZ0V4cCA9IHRoaXMgaW5zdGFuY2VvZiBSZWdFeHBXcmFwcGVyO1xuICAgIHZhciBwYXR0ZXJuSXNSZWdFeHAgPSBpc1JlZ0V4cChwYXR0ZXJuKTtcbiAgICB2YXIgZmxhZ3NBcmVVbmRlZmluZWQgPSBmbGFncyA9PT0gdW5kZWZpbmVkO1xuICAgIHZhciBzdGlja3k7XG5cbiAgICBpZiAoIXRoaXNJc1JlZ0V4cCAmJiBwYXR0ZXJuSXNSZWdFeHAgJiYgcGF0dGVybi5jb25zdHJ1Y3RvciA9PT0gUmVnRXhwV3JhcHBlciAmJiBmbGFnc0FyZVVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIHBhdHRlcm47XG4gICAgfVxuXG4gICAgaWYgKENPUlJFQ1RfTkVXKSB7XG4gICAgICBpZiAocGF0dGVybklzUmVnRXhwICYmICFmbGFnc0FyZVVuZGVmaW5lZCkgcGF0dGVybiA9IHBhdHRlcm4uc291cmNlO1xuICAgIH0gZWxzZSBpZiAocGF0dGVybiBpbnN0YW5jZW9mIFJlZ0V4cFdyYXBwZXIpIHtcbiAgICAgIGlmIChmbGFnc0FyZVVuZGVmaW5lZCkgZmxhZ3MgPSBnZXRGbGFncy5jYWxsKHBhdHRlcm4pO1xuICAgICAgcGF0dGVybiA9IHBhdHRlcm4uc291cmNlO1xuICAgIH1cblxuICAgIGlmIChVTlNVUFBPUlRFRF9ZKSB7XG4gICAgICBzdGlja3kgPSAhIWZsYWdzICYmIGZsYWdzLmluZGV4T2YoJ3knKSA+IC0xO1xuICAgICAgaWYgKHN0aWNreSkgZmxhZ3MgPSBmbGFncy5yZXBsYWNlKC95L2csICcnKTtcbiAgICB9XG5cbiAgICB2YXIgcmVzdWx0ID0gaW5oZXJpdElmUmVxdWlyZWQoXG4gICAgICBDT1JSRUNUX05FVyA/IG5ldyBOYXRpdmVSZWdFeHAocGF0dGVybiwgZmxhZ3MpIDogTmF0aXZlUmVnRXhwKHBhdHRlcm4sIGZsYWdzKSxcbiAgICAgIHRoaXNJc1JlZ0V4cCA/IHRoaXMgOiBSZWdFeHBQcm90b3R5cGUsXG4gICAgICBSZWdFeHBXcmFwcGVyXG4gICAgKTtcblxuICAgIGlmIChVTlNVUFBPUlRFRF9ZICYmIHN0aWNreSkgc2V0SW50ZXJuYWxTdGF0ZShyZXN1bHQsIHsgc3RpY2t5OiBzdGlja3kgfSk7XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuICB2YXIgcHJveHkgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAga2V5IGluIFJlZ0V4cFdyYXBwZXIgfHwgZGVmaW5lUHJvcGVydHkoUmVnRXhwV3JhcHBlciwga2V5LCB7XG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIE5hdGl2ZVJlZ0V4cFtrZXldOyB9LFxuICAgICAgc2V0OiBmdW5jdGlvbiAoaXQpIHsgTmF0aXZlUmVnRXhwW2tleV0gPSBpdDsgfVxuICAgIH0pO1xuICB9O1xuICB2YXIga2V5cyA9IGdldE93blByb3BlcnR5TmFtZXMoTmF0aXZlUmVnRXhwKTtcbiAgdmFyIGluZGV4ID0gMDtcbiAgd2hpbGUgKGtleXMubGVuZ3RoID4gaW5kZXgpIHByb3h5KGtleXNbaW5kZXgrK10pO1xuICBSZWdFeHBQcm90b3R5cGUuY29uc3RydWN0b3IgPSBSZWdFeHBXcmFwcGVyO1xuICBSZWdFeHBXcmFwcGVyLnByb3RvdHlwZSA9IFJlZ0V4cFByb3RvdHlwZTtcbiAgcmVkZWZpbmUoZ2xvYmFsLCAnUmVnRXhwJywgUmVnRXhwV3JhcHBlcik7XG59XG5cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtZ2V0LXJlZ2V4cC1AQHNwZWNpZXNcbnNldFNwZWNpZXMoJ1JlZ0V4cCcpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZXhlYyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWdleHAtZXhlYycpO1xuXG4vLyBgUmVnRXhwLnByb3RvdHlwZS5leGVjYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcmVnZXhwLnByb3RvdHlwZS5leGVjXG4kKHsgdGFyZ2V0OiAnUmVnRXhwJywgcHJvdG86IHRydWUsIGZvcmNlZDogLy4vLmV4ZWMgIT09IGV4ZWMgfSwge1xuICBleGVjOiBleGVjXG59KTtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIG9iamVjdERlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcbnZhciByZWdFeHBGbGFncyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWdleHAtZmxhZ3MnKTtcbnZhciBVTlNVUFBPUlRFRF9ZID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC1zdGlja3ktaGVscGVycycpLlVOU1VQUE9SVEVEX1k7XG5cbi8vIGBSZWdFeHAucHJvdG90eXBlLmZsYWdzYCBnZXR0ZXJcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtZ2V0LXJlZ2V4cC5wcm90b3R5cGUuZmxhZ3NcbmlmIChERVNDUklQVE9SUyAmJiAoLy4vZy5mbGFncyAhPSAnZycgfHwgVU5TVVBQT1JURURfWSkpIHtcbiAgb2JqZWN0RGVmaW5lUHJvcGVydHlNb2R1bGUuZihSZWdFeHAucHJvdG90eXBlLCAnZmxhZ3MnLCB7XG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGdldDogcmVnRXhwRmxhZ3NcbiAgfSk7XG59XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBVTlNVUFBPUlRFRF9ZID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC1zdGlja3ktaGVscGVycycpLlVOU1VQUE9SVEVEX1k7XG52YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpLmY7XG52YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZScpLmdldDtcbnZhciBSZWdFeHBQcm90b3R5cGUgPSBSZWdFeHAucHJvdG90eXBlO1xuXG4vLyBgUmVnRXhwLnByb3RvdHlwZS5zdGlja3lgIGdldHRlclxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1nZXQtcmVnZXhwLnByb3RvdHlwZS5zdGlja3lcbmlmIChERVNDUklQVE9SUyAmJiBVTlNVUFBPUlRFRF9ZKSB7XG4gIGRlZmluZVByb3BlcnR5KFJlZ0V4cC5wcm90b3R5cGUsICdzdGlja3knLCB7XG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKHRoaXMgPT09IFJlZ0V4cFByb3RvdHlwZSkgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgIC8vIFdlIGNhbid0IHVzZSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldHRlckZvciBiZWNhdXNlXG4gICAgICAvLyB3ZSBkb24ndCBhZGQgbWV0YWRhdGEgZm9yIHJlZ2V4cHMgY3JlYXRlZCBieSBhIGxpdGVyYWwuXG4gICAgICBpZiAodGhpcyBpbnN0YW5jZW9mIFJlZ0V4cCkge1xuICAgICAgICByZXR1cm4gISFnZXRJbnRlcm5hbFN0YXRlKHRoaXMpLnN0aWNreTtcbiAgICAgIH1cbiAgICAgIHRocm93IFR5cGVFcnJvcignSW5jb21wYXRpYmxlIHJlY2VpdmVyLCBSZWdFeHAgcmVxdWlyZWQnKTtcbiAgICB9XG4gIH0pO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gVE9ETzogUmVtb3ZlIGZyb20gYGNvcmUtanNANGAgc2luY2UgaXQncyBtb3ZlZCB0byBlbnRyeSBwb2ludHNcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMucmVnZXhwLmV4ZWMnKTtcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xuXG52YXIgREVMRUdBVEVTX1RPX0VYRUMgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBleGVjQ2FsbGVkID0gZmFsc2U7XG4gIHZhciByZSA9IC9bYWNdLztcbiAgcmUuZXhlYyA9IGZ1bmN0aW9uICgpIHtcbiAgICBleGVjQ2FsbGVkID0gdHJ1ZTtcbiAgICByZXR1cm4gLy4vLmV4ZWMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfTtcbiAgcmV0dXJuIHJlLnRlc3QoJ2FiYycpID09PSB0cnVlICYmIGV4ZWNDYWxsZWQ7XG59KCk7XG5cbnZhciBuYXRpdmVUZXN0ID0gLy4vLnRlc3Q7XG5cbi8vIGBSZWdFeHAucHJvdG90eXBlLnRlc3RgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1yZWdleHAucHJvdG90eXBlLnRlc3RcbiQoeyB0YXJnZXQ6ICdSZWdFeHAnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiAhREVMRUdBVEVTX1RPX0VYRUMgfSwge1xuICB0ZXN0OiBmdW5jdGlvbiAoc3RyKSB7XG4gICAgaWYgKHR5cGVvZiB0aGlzLmV4ZWMgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJldHVybiBuYXRpdmVUZXN0LmNhbGwodGhpcywgc3RyKTtcbiAgICB9XG4gICAgdmFyIHJlc3VsdCA9IHRoaXMuZXhlYyhzdHIpO1xuICAgIGlmIChyZXN1bHQgIT09IG51bGwgJiYgIWlzT2JqZWN0KHJlc3VsdCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignUmVnRXhwIGV4ZWMgbWV0aG9kIHJldHVybmVkIHNvbWV0aGluZyBvdGhlciB0aGFuIGFuIE9iamVjdCBvciBudWxsJyk7XG4gICAgfVxuICAgIHJldHVybiAhIXJlc3VsdDtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGZsYWdzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC1mbGFncycpO1xuXG52YXIgVE9fU1RSSU5HID0gJ3RvU3RyaW5nJztcbnZhciBSZWdFeHBQcm90b3R5cGUgPSBSZWdFeHAucHJvdG90eXBlO1xudmFyIG5hdGl2ZVRvU3RyaW5nID0gUmVnRXhwUHJvdG90eXBlW1RPX1NUUklOR107XG5cbnZhciBOT1RfR0VORVJJQyA9IGZhaWxzKGZ1bmN0aW9uICgpIHsgcmV0dXJuIG5hdGl2ZVRvU3RyaW5nLmNhbGwoeyBzb3VyY2U6ICdhJywgZmxhZ3M6ICdiJyB9KSAhPSAnL2EvYic7IH0pO1xuLy8gRkY0NC0gUmVnRXhwI3RvU3RyaW5nIGhhcyBhIHdyb25nIG5hbWVcbnZhciBJTkNPUlJFQ1RfTkFNRSA9IG5hdGl2ZVRvU3RyaW5nLm5hbWUgIT0gVE9fU1RSSU5HO1xuXG4vLyBgUmVnRXhwLnByb3RvdHlwZS50b1N0cmluZ2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXJlZ2V4cC5wcm90b3R5cGUudG9zdHJpbmdcbmlmIChOT1RfR0VORVJJQyB8fCBJTkNPUlJFQ1RfTkFNRSkge1xuICByZWRlZmluZShSZWdFeHAucHJvdG90eXBlLCBUT19TVFJJTkcsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHZhciBSID0gYW5PYmplY3QodGhpcyk7XG4gICAgdmFyIHAgPSBTdHJpbmcoUi5zb3VyY2UpO1xuICAgIHZhciByZiA9IFIuZmxhZ3M7XG4gICAgdmFyIGYgPSBTdHJpbmcocmYgPT09IHVuZGVmaW5lZCAmJiBSIGluc3RhbmNlb2YgUmVnRXhwICYmICEoJ2ZsYWdzJyBpbiBSZWdFeHBQcm90b3R5cGUpID8gZmxhZ3MuY2FsbChSKSA6IHJmKTtcbiAgICByZXR1cm4gJy8nICsgcCArICcvJyArIGY7XG4gIH0sIHsgdW5zYWZlOiB0cnVlIH0pO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGNvbGxlY3Rpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29sbGVjdGlvbicpO1xudmFyIGNvbGxlY3Rpb25TdHJvbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29sbGVjdGlvbi1zdHJvbmcnKTtcblxuLy8gYFNldGAgY29uc3RydWN0b3Jcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc2V0LW9iamVjdHNcbm1vZHVsZS5leHBvcnRzID0gY29sbGVjdGlvbignU2V0JywgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFNldCgpIHsgcmV0dXJuIGluaXQodGhpcywgYXJndW1lbnRzLmxlbmd0aCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCk7IH07XG59LCBjb2xsZWN0aW9uU3Ryb25nKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGNyZWF0ZUhUTUwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLWh0bWwnKTtcbnZhciBmb3JjZWRTdHJpbmdIVE1MTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy1odG1sLWZvcmNlZCcpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS5hbmNob3JgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLmFuY2hvclxuJCh7IHRhcmdldDogJ1N0cmluZycsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IGZvcmNlZFN0cmluZ0hUTUxNZXRob2QoJ2FuY2hvcicpIH0sIHtcbiAgYW5jaG9yOiBmdW5jdGlvbiBhbmNob3IobmFtZSkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdhJywgJ25hbWUnLCBuYW1lKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBjcmVhdGVIVE1MID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1odG1sJyk7XG52YXIgZm9yY2VkU3RyaW5nSFRNTE1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctaHRtbC1mb3JjZWQnKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUuYmlnYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5iaWdcbiQoeyB0YXJnZXQ6ICdTdHJpbmcnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBmb3JjZWRTdHJpbmdIVE1MTWV0aG9kKCdiaWcnKSB9LCB7XG4gIGJpZzogZnVuY3Rpb24gYmlnKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdiaWcnLCAnJywgJycpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGNyZWF0ZUhUTUwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLWh0bWwnKTtcbnZhciBmb3JjZWRTdHJpbmdIVE1MTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy1odG1sLWZvcmNlZCcpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS5ibGlua2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUuYmxpbmtcbiQoeyB0YXJnZXQ6ICdTdHJpbmcnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBmb3JjZWRTdHJpbmdIVE1MTWV0aG9kKCdibGluaycpIH0sIHtcbiAgYmxpbms6IGZ1bmN0aW9uIGJsaW5rKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdibGluaycsICcnLCAnJyk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgY3JlYXRlSFRNTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtaHRtbCcpO1xudmFyIGZvcmNlZFN0cmluZ0hUTUxNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLWh0bWwtZm9yY2VkJyk7XG5cbi8vIGBTdHJpbmcucHJvdG90eXBlLmJvbGRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLmJvbGRcbiQoeyB0YXJnZXQ6ICdTdHJpbmcnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBmb3JjZWRTdHJpbmdIVE1MTWV0aG9kKCdib2xkJykgfSwge1xuICBib2xkOiBmdW5jdGlvbiBib2xkKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdiJywgJycsICcnKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBjb2RlQXQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLW11bHRpYnl0ZScpLmNvZGVBdDtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUuY29kZVBvaW50QXRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLmNvZGVwb2ludGF0XG4kKHsgdGFyZ2V0OiAnU3RyaW5nJywgcHJvdG86IHRydWUgfSwge1xuICBjb2RlUG9pbnRBdDogZnVuY3Rpb24gY29kZVBvaW50QXQocG9zKSB7XG4gICAgcmV0dXJuIGNvZGVBdCh0aGlzLCBwb3MpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJykuZjtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciBub3RBUmVnRXhwID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25vdC1hLXJlZ2V4cCcpO1xudmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG52YXIgY29ycmVjdElzUmVnRXhwTG9naWMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29ycmVjdC1pcy1yZWdleHAtbG9naWMnKTtcbnZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcblxudmFyIG5hdGl2ZUVuZHNXaXRoID0gJycuZW5kc1dpdGg7XG52YXIgbWluID0gTWF0aC5taW47XG5cbnZhciBDT1JSRUNUX0lTX1JFR0VYUF9MT0dJQyA9IGNvcnJlY3RJc1JlZ0V4cExvZ2ljKCdlbmRzV2l0aCcpO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvcHVsbC83MDJcbnZhciBNRE5fUE9MWUZJTExfQlVHID0gIUlTX1BVUkUgJiYgIUNPUlJFQ1RfSVNfUkVHRVhQX0xPR0lDICYmICEhZnVuY3Rpb24gKCkge1xuICB2YXIgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihTdHJpbmcucHJvdG90eXBlLCAnZW5kc1dpdGgnKTtcbiAgcmV0dXJuIGRlc2NyaXB0b3IgJiYgIWRlc2NyaXB0b3Iud3JpdGFibGU7XG59KCk7XG5cbi8vIGBTdHJpbmcucHJvdG90eXBlLmVuZHNXaXRoYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5lbmRzd2l0aFxuJCh7IHRhcmdldDogJ1N0cmluZycsIHByb3RvOiB0cnVlLCBmb3JjZWQ6ICFNRE5fUE9MWUZJTExfQlVHICYmICFDT1JSRUNUX0lTX1JFR0VYUF9MT0dJQyB9LCB7XG4gIGVuZHNXaXRoOiBmdW5jdGlvbiBlbmRzV2l0aChzZWFyY2hTdHJpbmcgLyogLCBlbmRQb3NpdGlvbiA9IEBsZW5ndGggKi8pIHtcbiAgICB2YXIgdGhhdCA9IFN0cmluZyhyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKHRoaXMpKTtcbiAgICBub3RBUmVnRXhwKHNlYXJjaFN0cmluZyk7XG4gICAgdmFyIGVuZFBvc2l0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XG4gICAgdmFyIGxlbiA9IHRvTGVuZ3RoKHRoYXQubGVuZ3RoKTtcbiAgICB2YXIgZW5kID0gZW5kUG9zaXRpb24gPT09IHVuZGVmaW5lZCA/IGxlbiA6IG1pbih0b0xlbmd0aChlbmRQb3NpdGlvbiksIGxlbik7XG4gICAgdmFyIHNlYXJjaCA9IFN0cmluZyhzZWFyY2hTdHJpbmcpO1xuICAgIHJldHVybiBuYXRpdmVFbmRzV2l0aFxuICAgICAgPyBuYXRpdmVFbmRzV2l0aC5jYWxsKHRoYXQsIHNlYXJjaCwgZW5kKVxuICAgICAgOiB0aGF0LnNsaWNlKGVuZCAtIHNlYXJjaC5sZW5ndGgsIGVuZCkgPT09IHNlYXJjaDtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBjcmVhdGVIVE1MID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1odG1sJyk7XG52YXIgZm9yY2VkU3RyaW5nSFRNTE1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctaHRtbC1mb3JjZWQnKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUuZml4ZWRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLmZpeGVkXG4kKHsgdGFyZ2V0OiAnU3RyaW5nJywgcHJvdG86IHRydWUsIGZvcmNlZDogZm9yY2VkU3RyaW5nSFRNTE1ldGhvZCgnZml4ZWQnKSB9LCB7XG4gIGZpeGVkOiBmdW5jdGlvbiBmaXhlZCgpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAndHQnLCAnJywgJycpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGNyZWF0ZUhUTUwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLWh0bWwnKTtcbnZhciBmb3JjZWRTdHJpbmdIVE1MTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy1odG1sLWZvcmNlZCcpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS5mb250Y29sb3JgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLmZvbnRjb2xvclxuJCh7IHRhcmdldDogJ1N0cmluZycsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IGZvcmNlZFN0cmluZ0hUTUxNZXRob2QoJ2ZvbnRjb2xvcicpIH0sIHtcbiAgZm9udGNvbG9yOiBmdW5jdGlvbiBmb250Y29sb3IoY29sb3IpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnZm9udCcsICdjb2xvcicsIGNvbG9yKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBjcmVhdGVIVE1MID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1odG1sJyk7XG52YXIgZm9yY2VkU3RyaW5nSFRNTE1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctaHRtbC1mb3JjZWQnKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUuZm9udHNpemVgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLmZvbnRzaXplXG4kKHsgdGFyZ2V0OiAnU3RyaW5nJywgcHJvdG86IHRydWUsIGZvcmNlZDogZm9yY2VkU3RyaW5nSFRNTE1ldGhvZCgnZm9udHNpemUnKSB9LCB7XG4gIGZvbnRzaXplOiBmdW5jdGlvbiBmb250c2l6ZShzaXplKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2ZvbnQnLCAnc2l6ZScsIHNpemUpO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1hYnNvbHV0ZS1pbmRleCcpO1xuXG52YXIgZnJvbUNoYXJDb2RlID0gU3RyaW5nLmZyb21DaGFyQ29kZTtcbnZhciBuYXRpdmVGcm9tQ29kZVBvaW50ID0gU3RyaW5nLmZyb21Db2RlUG9pbnQ7XG5cbi8vIGxlbmd0aCBzaG91bGQgYmUgMSwgb2xkIEZGIHByb2JsZW1cbnZhciBJTkNPUlJFQ1RfTEVOR1RIID0gISFuYXRpdmVGcm9tQ29kZVBvaW50ICYmIG5hdGl2ZUZyb21Db2RlUG9pbnQubGVuZ3RoICE9IDE7XG5cbi8vIGBTdHJpbmcuZnJvbUNvZGVQb2ludGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5mcm9tY29kZXBvaW50XG4kKHsgdGFyZ2V0OiAnU3RyaW5nJywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBJTkNPUlJFQ1RfTEVOR1RIIH0sIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzIC0tIHJlcXVpcmVkIGZvciBgLmxlbmd0aGBcbiAgZnJvbUNvZGVQb2ludDogZnVuY3Rpb24gZnJvbUNvZGVQb2ludCh4KSB7XG4gICAgdmFyIGVsZW1lbnRzID0gW107XG4gICAgdmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBjb2RlO1xuICAgIHdoaWxlIChsZW5ndGggPiBpKSB7XG4gICAgICBjb2RlID0gK2FyZ3VtZW50c1tpKytdO1xuICAgICAgaWYgKHRvQWJzb2x1dGVJbmRleChjb2RlLCAweDEwRkZGRikgIT09IGNvZGUpIHRocm93IFJhbmdlRXJyb3IoY29kZSArICcgaXMgbm90IGEgdmFsaWQgY29kZSBwb2ludCcpO1xuICAgICAgZWxlbWVudHMucHVzaChjb2RlIDwgMHgxMDAwMFxuICAgICAgICA/IGZyb21DaGFyQ29kZShjb2RlKVxuICAgICAgICA6IGZyb21DaGFyQ29kZSgoKGNvZGUgLT0gMHgxMDAwMCkgPj4gMTApICsgMHhEODAwLCBjb2RlICUgMHg0MDAgKyAweERDMDApXG4gICAgICApO1xuICAgIH0gcmV0dXJuIGVsZW1lbnRzLmpvaW4oJycpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIG5vdEFSZWdFeHAgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbm90LWEtcmVnZXhwJyk7XG52YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcbnZhciBjb3JyZWN0SXNSZWdFeHBMb2dpYyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jb3JyZWN0LWlzLXJlZ2V4cC1sb2dpYycpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS5pbmNsdWRlc2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUuaW5jbHVkZXNcbiQoeyB0YXJnZXQ6ICdTdHJpbmcnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiAhY29ycmVjdElzUmVnRXhwTG9naWMoJ2luY2x1ZGVzJykgfSwge1xuICBpbmNsdWRlczogZnVuY3Rpb24gaW5jbHVkZXMoc2VhcmNoU3RyaW5nIC8qICwgcG9zaXRpb24gPSAwICovKSB7XG4gICAgcmV0dXJuICEhflN0cmluZyhyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKHRoaXMpKVxuICAgICAgLmluZGV4T2Yobm90QVJlZ0V4cChzZWFyY2hTdHJpbmcpLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgY3JlYXRlSFRNTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtaHRtbCcpO1xudmFyIGZvcmNlZFN0cmluZ0hUTUxNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLWh0bWwtZm9yY2VkJyk7XG5cbi8vIGBTdHJpbmcucHJvdG90eXBlLml0YWxpY3NgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLml0YWxpY3NcbiQoeyB0YXJnZXQ6ICdTdHJpbmcnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBmb3JjZWRTdHJpbmdIVE1MTWV0aG9kKCdpdGFsaWNzJykgfSwge1xuICBpdGFsaWNzOiBmdW5jdGlvbiBpdGFsaWNzKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdpJywgJycsICcnKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgY2hhckF0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy1tdWx0aWJ5dGUnKS5jaGFyQXQ7XG52YXIgSW50ZXJuYWxTdGF0ZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZScpO1xudmFyIGRlZmluZUl0ZXJhdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS1pdGVyYXRvcicpO1xuXG52YXIgU1RSSU5HX0lURVJBVE9SID0gJ1N0cmluZyBJdGVyYXRvcic7XG52YXIgc2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuc2V0O1xudmFyIGdldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldHRlckZvcihTVFJJTkdfSVRFUkFUT1IpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZVtAQGl0ZXJhdG9yXWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUtQEBpdGVyYXRvclxuZGVmaW5lSXRlcmF0b3IoU3RyaW5nLCAnU3RyaW5nJywgZnVuY3Rpb24gKGl0ZXJhdGVkKSB7XG4gIHNldEludGVybmFsU3RhdGUodGhpcywge1xuICAgIHR5cGU6IFNUUklOR19JVEVSQVRPUixcbiAgICBzdHJpbmc6IFN0cmluZyhpdGVyYXRlZCksXG4gICAgaW5kZXg6IDBcbiAgfSk7XG4vLyBgJVN0cmluZ0l0ZXJhdG9yUHJvdG90eXBlJS5uZXh0YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJXN0cmluZ2l0ZXJhdG9ycHJvdG90eXBlJS5uZXh0XG59LCBmdW5jdGlvbiBuZXh0KCkge1xuICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpO1xuICB2YXIgc3RyaW5nID0gc3RhdGUuc3RyaW5nO1xuICB2YXIgaW5kZXggPSBzdGF0ZS5pbmRleDtcbiAgdmFyIHBvaW50O1xuICBpZiAoaW5kZXggPj0gc3RyaW5nLmxlbmd0aCkgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICBwb2ludCA9IGNoYXJBdChzdHJpbmcsIGluZGV4KTtcbiAgc3RhdGUuaW5kZXggKz0gcG9pbnQubGVuZ3RoO1xuICByZXR1cm4geyB2YWx1ZTogcG9pbnQsIGRvbmU6IGZhbHNlIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGNyZWF0ZUhUTUwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLWh0bWwnKTtcbnZhciBmb3JjZWRTdHJpbmdIVE1MTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy1odG1sLWZvcmNlZCcpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS5saW5rYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5saW5rXG4kKHsgdGFyZ2V0OiAnU3RyaW5nJywgcHJvdG86IHRydWUsIGZvcmNlZDogZm9yY2VkU3RyaW5nSFRNTE1ldGhvZCgnbGluaycpIH0sIHtcbiAgbGluazogZnVuY3Rpb24gbGluayh1cmwpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnYScsICdocmVmJywgdXJsKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBjcmVhdGVJdGVyYXRvckNvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1pdGVyYXRvci1jb25zdHJ1Y3RvcicpO1xudmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtZnVuY3Rpb24nKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YtcmF3Jyk7XG52YXIgaXNSZWdFeHAgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcmVnZXhwJyk7XG52YXIgZ2V0UmVnRXhwRmxhZ3MgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLWZsYWdzJyk7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NwZWNpZXMtY29uc3RydWN0b3InKTtcbnZhciBhZHZhbmNlU3RyaW5nSW5kZXggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYWR2YW5jZS1zdHJpbmctaW5kZXgnKTtcbnZhciBJbnRlcm5hbFN0YXRlTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlJyk7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG5cbnZhciBNQVRDSF9BTEwgPSB3ZWxsS25vd25TeW1ib2woJ21hdGNoQWxsJyk7XG52YXIgUkVHRVhQX1NUUklORyA9ICdSZWdFeHAgU3RyaW5nJztcbnZhciBSRUdFWFBfU1RSSU5HX0lURVJBVE9SID0gUkVHRVhQX1NUUklORyArICcgSXRlcmF0b3InO1xudmFyIHNldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLnNldDtcbnZhciBnZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXR0ZXJGb3IoUkVHRVhQX1NUUklOR19JVEVSQVRPUik7XG52YXIgUmVnRXhwUHJvdG90eXBlID0gUmVnRXhwLnByb3RvdHlwZTtcbnZhciByZWdFeHBCdWlsdGluRXhlYyA9IFJlZ0V4cFByb3RvdHlwZS5leGVjO1xudmFyIG5hdGl2ZU1hdGNoQWxsID0gJycubWF0Y2hBbGw7XG5cbnZhciBXT1JLU19XSVRIX05PTl9HTE9CQUxfUkVHRVggPSAhIW5hdGl2ZU1hdGNoQWxsICYmICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICdhJy5tYXRjaEFsbCgvLi8pO1xufSk7XG5cbnZhciByZWdFeHBFeGVjID0gZnVuY3Rpb24gKFIsIFMpIHtcbiAgdmFyIGV4ZWMgPSBSLmV4ZWM7XG4gIHZhciByZXN1bHQ7XG4gIGlmICh0eXBlb2YgZXhlYyA9PSAnZnVuY3Rpb24nKSB7XG4gICAgcmVzdWx0ID0gZXhlYy5jYWxsKFIsIFMpO1xuICAgIGlmICh0eXBlb2YgcmVzdWx0ICE9ICdvYmplY3QnKSB0aHJvdyBUeXBlRXJyb3IoJ0luY29ycmVjdCBleGVjIHJlc3VsdCcpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH0gcmV0dXJuIHJlZ0V4cEJ1aWx0aW5FeGVjLmNhbGwoUiwgUyk7XG59O1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbWF4LWxlbiAtLSBpZ25vcmVcbnZhciAkUmVnRXhwU3RyaW5nSXRlcmF0b3IgPSBjcmVhdGVJdGVyYXRvckNvbnN0cnVjdG9yKGZ1bmN0aW9uIFJlZ0V4cFN0cmluZ0l0ZXJhdG9yKHJlZ2V4cCwgc3RyaW5nLCBnbG9iYWwsIGZ1bGxVbmljb2RlKSB7XG4gIHNldEludGVybmFsU3RhdGUodGhpcywge1xuICAgIHR5cGU6IFJFR0VYUF9TVFJJTkdfSVRFUkFUT1IsXG4gICAgcmVnZXhwOiByZWdleHAsXG4gICAgc3RyaW5nOiBzdHJpbmcsXG4gICAgZ2xvYmFsOiBnbG9iYWwsXG4gICAgdW5pY29kZTogZnVsbFVuaWNvZGUsXG4gICAgZG9uZTogZmFsc2VcbiAgfSk7XG59LCBSRUdFWFBfU1RSSU5HLCBmdW5jdGlvbiBuZXh0KCkge1xuICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpO1xuICBpZiAoc3RhdGUuZG9uZSkgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICB2YXIgUiA9IHN0YXRlLnJlZ2V4cDtcbiAgdmFyIFMgPSBzdGF0ZS5zdHJpbmc7XG4gIHZhciBtYXRjaCA9IHJlZ0V4cEV4ZWMoUiwgUyk7XG4gIGlmIChtYXRjaCA9PT0gbnVsbCkgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogc3RhdGUuZG9uZSA9IHRydWUgfTtcbiAgaWYgKHN0YXRlLmdsb2JhbCkge1xuICAgIGlmIChTdHJpbmcobWF0Y2hbMF0pID09ICcnKSBSLmxhc3RJbmRleCA9IGFkdmFuY2VTdHJpbmdJbmRleChTLCB0b0xlbmd0aChSLmxhc3RJbmRleCksIHN0YXRlLnVuaWNvZGUpO1xuICAgIHJldHVybiB7IHZhbHVlOiBtYXRjaCwgZG9uZTogZmFsc2UgfTtcbiAgfVxuICBzdGF0ZS5kb25lID0gdHJ1ZTtcbiAgcmV0dXJuIHsgdmFsdWU6IG1hdGNoLCBkb25lOiBmYWxzZSB9O1xufSk7XG5cbnZhciAkbWF0Y2hBbGwgPSBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gIHZhciBSID0gYW5PYmplY3QodGhpcyk7XG4gIHZhciBTID0gU3RyaW5nKHN0cmluZyk7XG4gIHZhciBDLCBmbGFnc1ZhbHVlLCBmbGFncywgbWF0Y2hlciwgZ2xvYmFsLCBmdWxsVW5pY29kZTtcbiAgQyA9IHNwZWNpZXNDb25zdHJ1Y3RvcihSLCBSZWdFeHApO1xuICBmbGFnc1ZhbHVlID0gUi5mbGFncztcbiAgaWYgKGZsYWdzVmFsdWUgPT09IHVuZGVmaW5lZCAmJiBSIGluc3RhbmNlb2YgUmVnRXhwICYmICEoJ2ZsYWdzJyBpbiBSZWdFeHBQcm90b3R5cGUpKSB7XG4gICAgZmxhZ3NWYWx1ZSA9IGdldFJlZ0V4cEZsYWdzLmNhbGwoUik7XG4gIH1cbiAgZmxhZ3MgPSBmbGFnc1ZhbHVlID09PSB1bmRlZmluZWQgPyAnJyA6IFN0cmluZyhmbGFnc1ZhbHVlKTtcbiAgbWF0Y2hlciA9IG5ldyBDKEMgPT09IFJlZ0V4cCA/IFIuc291cmNlIDogUiwgZmxhZ3MpO1xuICBnbG9iYWwgPSAhIX5mbGFncy5pbmRleE9mKCdnJyk7XG4gIGZ1bGxVbmljb2RlID0gISF+ZmxhZ3MuaW5kZXhPZigndScpO1xuICBtYXRjaGVyLmxhc3RJbmRleCA9IHRvTGVuZ3RoKFIubGFzdEluZGV4KTtcbiAgcmV0dXJuIG5ldyAkUmVnRXhwU3RyaW5nSXRlcmF0b3IobWF0Y2hlciwgUywgZ2xvYmFsLCBmdWxsVW5pY29kZSk7XG59O1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS5tYXRjaEFsbGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUubWF0Y2hhbGxcbiQoeyB0YXJnZXQ6ICdTdHJpbmcnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBXT1JLU19XSVRIX05PTl9HTE9CQUxfUkVHRVggfSwge1xuICBtYXRjaEFsbDogZnVuY3Rpb24gbWF0Y2hBbGwocmVnZXhwKSB7XG4gICAgdmFyIE8gPSByZXF1aXJlT2JqZWN0Q29lcmNpYmxlKHRoaXMpO1xuICAgIHZhciBmbGFncywgUywgbWF0Y2hlciwgcng7XG4gICAgaWYgKHJlZ2V4cCAhPSBudWxsKSB7XG4gICAgICBpZiAoaXNSZWdFeHAocmVnZXhwKSkge1xuICAgICAgICBmbGFncyA9IFN0cmluZyhyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKCdmbGFncycgaW4gUmVnRXhwUHJvdG90eXBlXG4gICAgICAgICAgPyByZWdleHAuZmxhZ3NcbiAgICAgICAgICA6IGdldFJlZ0V4cEZsYWdzLmNhbGwocmVnZXhwKVxuICAgICAgICApKTtcbiAgICAgICAgaWYgKCF+ZmxhZ3MuaW5kZXhPZignZycpKSB0aHJvdyBUeXBlRXJyb3IoJ2AubWF0Y2hBbGxgIGRvZXMgbm90IGFsbG93IG5vbi1nbG9iYWwgcmVnZXhlcycpO1xuICAgICAgfVxuICAgICAgaWYgKFdPUktTX1dJVEhfTk9OX0dMT0JBTF9SRUdFWCkgcmV0dXJuIG5hdGl2ZU1hdGNoQWxsLmFwcGx5KE8sIGFyZ3VtZW50cyk7XG4gICAgICBtYXRjaGVyID0gcmVnZXhwW01BVENIX0FMTF07XG4gICAgICBpZiAobWF0Y2hlciA9PT0gdW5kZWZpbmVkICYmIElTX1BVUkUgJiYgY2xhc3NvZihyZWdleHApID09ICdSZWdFeHAnKSBtYXRjaGVyID0gJG1hdGNoQWxsO1xuICAgICAgaWYgKG1hdGNoZXIgIT0gbnVsbCkgcmV0dXJuIGFGdW5jdGlvbihtYXRjaGVyKS5jYWxsKHJlZ2V4cCwgTyk7XG4gICAgfSBlbHNlIGlmIChXT1JLU19XSVRIX05PTl9HTE9CQUxfUkVHRVgpIHJldHVybiBuYXRpdmVNYXRjaEFsbC5hcHBseShPLCBhcmd1bWVudHMpO1xuICAgIFMgPSBTdHJpbmcoTyk7XG4gICAgcnggPSBuZXcgUmVnRXhwKHJlZ2V4cCwgJ2cnKTtcbiAgICByZXR1cm4gSVNfUFVSRSA/ICRtYXRjaEFsbC5jYWxsKHJ4LCBTKSA6IHJ4W01BVENIX0FMTF0oUyk7XG4gIH1cbn0pO1xuXG5JU19QVVJFIHx8IE1BVENIX0FMTCBpbiBSZWdFeHBQcm90b3R5cGUgfHwgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KFJlZ0V4cFByb3RvdHlwZSwgTUFUQ0hfQUxMLCAkbWF0Y2hBbGwpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGZpeFJlZ0V4cFdlbGxLbm93blN5bWJvbExvZ2ljID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZpeC1yZWdleHAtd2VsbC1rbm93bi1zeW1ib2wtbG9naWMnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xudmFyIGFkdmFuY2VTdHJpbmdJbmRleCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hZHZhbmNlLXN0cmluZy1pbmRleCcpO1xudmFyIHJlZ0V4cEV4ZWMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLWV4ZWMtYWJzdHJhY3QnKTtcblxuLy8gQEBtYXRjaCBsb2dpY1xuZml4UmVnRXhwV2VsbEtub3duU3ltYm9sTG9naWMoJ21hdGNoJywgMSwgZnVuY3Rpb24gKE1BVENILCBuYXRpdmVNYXRjaCwgbWF5YmVDYWxsTmF0aXZlKSB7XG4gIHJldHVybiBbXG4gICAgLy8gYFN0cmluZy5wcm90b3R5cGUubWF0Y2hgIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5tYXRjaFxuICAgIGZ1bmN0aW9uIG1hdGNoKHJlZ2V4cCkge1xuICAgICAgdmFyIE8gPSByZXF1aXJlT2JqZWN0Q29lcmNpYmxlKHRoaXMpO1xuICAgICAgdmFyIG1hdGNoZXIgPSByZWdleHAgPT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogcmVnZXhwW01BVENIXTtcbiAgICAgIHJldHVybiBtYXRjaGVyICE9PSB1bmRlZmluZWQgPyBtYXRjaGVyLmNhbGwocmVnZXhwLCBPKSA6IG5ldyBSZWdFeHAocmVnZXhwKVtNQVRDSF0oU3RyaW5nKE8pKTtcbiAgICB9LFxuICAgIC8vIGBSZWdFeHAucHJvdG90eXBlW0BAbWF0Y2hdYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXJlZ2V4cC5wcm90b3R5cGUtQEBtYXRjaFxuICAgIGZ1bmN0aW9uIChyZWdleHApIHtcbiAgICAgIHZhciByZXMgPSBtYXliZUNhbGxOYXRpdmUobmF0aXZlTWF0Y2gsIHJlZ2V4cCwgdGhpcyk7XG4gICAgICBpZiAocmVzLmRvbmUpIHJldHVybiByZXMudmFsdWU7XG5cbiAgICAgIHZhciByeCA9IGFuT2JqZWN0KHJlZ2V4cCk7XG4gICAgICB2YXIgUyA9IFN0cmluZyh0aGlzKTtcblxuICAgICAgaWYgKCFyeC5nbG9iYWwpIHJldHVybiByZWdFeHBFeGVjKHJ4LCBTKTtcblxuICAgICAgdmFyIGZ1bGxVbmljb2RlID0gcngudW5pY29kZTtcbiAgICAgIHJ4Lmxhc3RJbmRleCA9IDA7XG4gICAgICB2YXIgQSA9IFtdO1xuICAgICAgdmFyIG4gPSAwO1xuICAgICAgdmFyIHJlc3VsdDtcbiAgICAgIHdoaWxlICgocmVzdWx0ID0gcmVnRXhwRXhlYyhyeCwgUykpICE9PSBudWxsKSB7XG4gICAgICAgIHZhciBtYXRjaFN0ciA9IFN0cmluZyhyZXN1bHRbMF0pO1xuICAgICAgICBBW25dID0gbWF0Y2hTdHI7XG4gICAgICAgIGlmIChtYXRjaFN0ciA9PT0gJycpIHJ4Lmxhc3RJbmRleCA9IGFkdmFuY2VTdHJpbmdJbmRleChTLCB0b0xlbmd0aChyeC5sYXN0SW5kZXgpLCBmdWxsVW5pY29kZSk7XG4gICAgICAgIG4rKztcbiAgICAgIH1cbiAgICAgIHJldHVybiBuID09PSAwID8gbnVsbCA6IEE7XG4gICAgfVxuICBdO1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciAkcGFkRW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy1wYWQnKS5lbmQ7XG52YXIgV0VCS0lUX0JVRyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctcGFkLXdlYmtpdC1idWcnKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUucGFkRW5kYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5wYWRlbmRcbiQoeyB0YXJnZXQ6ICdTdHJpbmcnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBXRUJLSVRfQlVHIH0sIHtcbiAgcGFkRW5kOiBmdW5jdGlvbiBwYWRFbmQobWF4TGVuZ3RoIC8qICwgZmlsbFN0cmluZyA9ICcgJyAqLykge1xuICAgIHJldHVybiAkcGFkRW5kKHRoaXMsIG1heExlbmd0aCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyICRwYWRTdGFydCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctcGFkJykuc3RhcnQ7XG52YXIgV0VCS0lUX0JVRyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctcGFkLXdlYmtpdC1idWcnKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUucGFkU3RhcnRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnBhZHN0YXJ0XG4kKHsgdGFyZ2V0OiAnU3RyaW5nJywgcHJvdG86IHRydWUsIGZvcmNlZDogV0VCS0lUX0JVRyB9LCB7XG4gIHBhZFN0YXJ0OiBmdW5jdGlvbiBwYWRTdGFydChtYXhMZW5ndGggLyogLCBmaWxsU3RyaW5nID0gJyAnICovKSB7XG4gICAgcmV0dXJuICRwYWRTdGFydCh0aGlzLCBtYXhMZW5ndGgsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcblxuLy8gYFN0cmluZy5yYXdgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucmF3XG4kKHsgdGFyZ2V0OiAnU3RyaW5nJywgc3RhdDogdHJ1ZSB9LCB7XG4gIHJhdzogZnVuY3Rpb24gcmF3KHRlbXBsYXRlKSB7XG4gICAgdmFyIHJhd1RlbXBsYXRlID0gdG9JbmRleGVkT2JqZWN0KHRlbXBsYXRlLnJhdyk7XG4gICAgdmFyIGxpdGVyYWxTZWdtZW50cyA9IHRvTGVuZ3RoKHJhd1RlbXBsYXRlLmxlbmd0aCk7XG4gICAgdmFyIGFyZ3VtZW50c0xlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIGVsZW1lbnRzID0gW107XG4gICAgdmFyIGkgPSAwO1xuICAgIHdoaWxlIChsaXRlcmFsU2VnbWVudHMgPiBpKSB7XG4gICAgICBlbGVtZW50cy5wdXNoKFN0cmluZyhyYXdUZW1wbGF0ZVtpKytdKSk7XG4gICAgICBpZiAoaSA8IGFyZ3VtZW50c0xlbmd0aCkgZWxlbWVudHMucHVzaChTdHJpbmcoYXJndW1lbnRzW2ldKSk7XG4gICAgfSByZXR1cm4gZWxlbWVudHMuam9pbignJyk7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgcmVwZWF0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy1yZXBlYXQnKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUucmVwZWF0YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5yZXBlYXRcbiQoeyB0YXJnZXQ6ICdTdHJpbmcnLCBwcm90bzogdHJ1ZSB9LCB7XG4gIHJlcGVhdDogcmVwZWF0XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG52YXIgaXNSZWdFeHAgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcmVnZXhwJyk7XG52YXIgZ2V0UmVnRXhwRmxhZ3MgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLWZsYWdzJyk7XG52YXIgZ2V0U3Vic3RpdHV0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1zdWJzdGl0dXRpb24nKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcblxudmFyIFJFUExBQ0UgPSB3ZWxsS25vd25TeW1ib2woJ3JlcGxhY2UnKTtcbnZhciBSZWdFeHBQcm90b3R5cGUgPSBSZWdFeHAucHJvdG90eXBlO1xudmFyIG1heCA9IE1hdGgubWF4O1xuXG52YXIgc3RyaW5nSW5kZXhPZiA9IGZ1bmN0aW9uIChzdHJpbmcsIHNlYXJjaFZhbHVlLCBmcm9tSW5kZXgpIHtcbiAgaWYgKGZyb21JbmRleCA+IHN0cmluZy5sZW5ndGgpIHJldHVybiAtMTtcbiAgaWYgKHNlYXJjaFZhbHVlID09PSAnJykgcmV0dXJuIGZyb21JbmRleDtcbiAgcmV0dXJuIHN0cmluZy5pbmRleE9mKHNlYXJjaFZhbHVlLCBmcm9tSW5kZXgpO1xufTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUucmVwbGFjZUFsbGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUucmVwbGFjZWFsbFxuJCh7IHRhcmdldDogJ1N0cmluZycsIHByb3RvOiB0cnVlIH0sIHtcbiAgcmVwbGFjZUFsbDogZnVuY3Rpb24gcmVwbGFjZUFsbChzZWFyY2hWYWx1ZSwgcmVwbGFjZVZhbHVlKSB7XG4gICAgdmFyIE8gPSByZXF1aXJlT2JqZWN0Q29lcmNpYmxlKHRoaXMpO1xuICAgIHZhciBJU19SRUdfRVhQLCBmbGFncywgcmVwbGFjZXIsIHN0cmluZywgc2VhcmNoU3RyaW5nLCBmdW5jdGlvbmFsUmVwbGFjZSwgc2VhcmNoTGVuZ3RoLCBhZHZhbmNlQnksIHJlcGxhY2VtZW50O1xuICAgIHZhciBwb3NpdGlvbiA9IDA7XG4gICAgdmFyIGVuZE9mTGFzdE1hdGNoID0gMDtcbiAgICB2YXIgcmVzdWx0ID0gJyc7XG4gICAgaWYgKHNlYXJjaFZhbHVlICE9IG51bGwpIHtcbiAgICAgIElTX1JFR19FWFAgPSBpc1JlZ0V4cChzZWFyY2hWYWx1ZSk7XG4gICAgICBpZiAoSVNfUkVHX0VYUCkge1xuICAgICAgICBmbGFncyA9IFN0cmluZyhyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKCdmbGFncycgaW4gUmVnRXhwUHJvdG90eXBlXG4gICAgICAgICAgPyBzZWFyY2hWYWx1ZS5mbGFnc1xuICAgICAgICAgIDogZ2V0UmVnRXhwRmxhZ3MuY2FsbChzZWFyY2hWYWx1ZSlcbiAgICAgICAgKSk7XG4gICAgICAgIGlmICghfmZsYWdzLmluZGV4T2YoJ2cnKSkgdGhyb3cgVHlwZUVycm9yKCdgLnJlcGxhY2VBbGxgIGRvZXMgbm90IGFsbG93IG5vbi1nbG9iYWwgcmVnZXhlcycpO1xuICAgICAgfVxuICAgICAgcmVwbGFjZXIgPSBzZWFyY2hWYWx1ZVtSRVBMQUNFXTtcbiAgICAgIGlmIChyZXBsYWNlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiByZXBsYWNlci5jYWxsKHNlYXJjaFZhbHVlLCBPLCByZXBsYWNlVmFsdWUpO1xuICAgICAgfSBlbHNlIGlmIChJU19QVVJFICYmIElTX1JFR19FWFApIHtcbiAgICAgICAgcmV0dXJuIFN0cmluZyhPKS5yZXBsYWNlKHNlYXJjaFZhbHVlLCByZXBsYWNlVmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgICBzdHJpbmcgPSBTdHJpbmcoTyk7XG4gICAgc2VhcmNoU3RyaW5nID0gU3RyaW5nKHNlYXJjaFZhbHVlKTtcbiAgICBmdW5jdGlvbmFsUmVwbGFjZSA9IHR5cGVvZiByZXBsYWNlVmFsdWUgPT09ICdmdW5jdGlvbic7XG4gICAgaWYgKCFmdW5jdGlvbmFsUmVwbGFjZSkgcmVwbGFjZVZhbHVlID0gU3RyaW5nKHJlcGxhY2VWYWx1ZSk7XG4gICAgc2VhcmNoTGVuZ3RoID0gc2VhcmNoU3RyaW5nLmxlbmd0aDtcbiAgICBhZHZhbmNlQnkgPSBtYXgoMSwgc2VhcmNoTGVuZ3RoKTtcbiAgICBwb3NpdGlvbiA9IHN0cmluZ0luZGV4T2Yoc3RyaW5nLCBzZWFyY2hTdHJpbmcsIDApO1xuICAgIHdoaWxlIChwb3NpdGlvbiAhPT0gLTEpIHtcbiAgICAgIGlmIChmdW5jdGlvbmFsUmVwbGFjZSkge1xuICAgICAgICByZXBsYWNlbWVudCA9IFN0cmluZyhyZXBsYWNlVmFsdWUoc2VhcmNoU3RyaW5nLCBwb3NpdGlvbiwgc3RyaW5nKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXBsYWNlbWVudCA9IGdldFN1YnN0aXR1dGlvbihzZWFyY2hTdHJpbmcsIHN0cmluZywgcG9zaXRpb24sIFtdLCB1bmRlZmluZWQsIHJlcGxhY2VWYWx1ZSk7XG4gICAgICB9XG4gICAgICByZXN1bHQgKz0gc3RyaW5nLnNsaWNlKGVuZE9mTGFzdE1hdGNoLCBwb3NpdGlvbikgKyByZXBsYWNlbWVudDtcbiAgICAgIGVuZE9mTGFzdE1hdGNoID0gcG9zaXRpb24gKyBzZWFyY2hMZW5ndGg7XG4gICAgICBwb3NpdGlvbiA9IHN0cmluZ0luZGV4T2Yoc3RyaW5nLCBzZWFyY2hTdHJpbmcsIHBvc2l0aW9uICsgYWR2YW5jZUJ5KTtcbiAgICB9XG4gICAgaWYgKGVuZE9mTGFzdE1hdGNoIDwgc3RyaW5nLmxlbmd0aCkge1xuICAgICAgcmVzdWx0ICs9IHN0cmluZy5zbGljZShlbmRPZkxhc3RNYXRjaCk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGZpeFJlZ0V4cFdlbGxLbm93blN5bWJvbExvZ2ljID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZpeC1yZWdleHAtd2VsbC1rbm93bi1zeW1ib2wtbG9naWMnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW50ZWdlcicpO1xudmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG52YXIgYWR2YW5jZVN0cmluZ0luZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FkdmFuY2Utc3RyaW5nLWluZGV4Jyk7XG52YXIgZ2V0U3Vic3RpdHV0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1zdWJzdGl0dXRpb24nKTtcbnZhciByZWdFeHBFeGVjID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC1leGVjLWFic3RyYWN0Jyk7XG5cbnZhciBtYXggPSBNYXRoLm1heDtcbnZhciBtaW4gPSBNYXRoLm1pbjtcblxudmFyIG1heWJlVG9TdHJpbmcgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ID09PSB1bmRlZmluZWQgPyBpdCA6IFN0cmluZyhpdCk7XG59O1xuXG4vLyBAQHJlcGxhY2UgbG9naWNcbmZpeFJlZ0V4cFdlbGxLbm93blN5bWJvbExvZ2ljKCdyZXBsYWNlJywgMiwgZnVuY3Rpb24gKFJFUExBQ0UsIG5hdGl2ZVJlcGxhY2UsIG1heWJlQ2FsbE5hdGl2ZSwgcmVhc29uKSB7XG4gIHZhciBSRUdFWFBfUkVQTEFDRV9TVUJTVElUVVRFU19VTkRFRklORURfQ0FQVFVSRSA9IHJlYXNvbi5SRUdFWFBfUkVQTEFDRV9TVUJTVElUVVRFU19VTkRFRklORURfQ0FQVFVSRTtcbiAgdmFyIFJFUExBQ0VfS0VFUFNfJDAgPSByZWFzb24uUkVQTEFDRV9LRUVQU18kMDtcbiAgdmFyIFVOU0FGRV9TVUJTVElUVVRFID0gUkVHRVhQX1JFUExBQ0VfU1VCU1RJVFVURVNfVU5ERUZJTkVEX0NBUFRVUkUgPyAnJCcgOiAnJDAnO1xuXG4gIHJldHVybiBbXG4gICAgLy8gYFN0cmluZy5wcm90b3R5cGUucmVwbGFjZWAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnJlcGxhY2VcbiAgICBmdW5jdGlvbiByZXBsYWNlKHNlYXJjaFZhbHVlLCByZXBsYWNlVmFsdWUpIHtcbiAgICAgIHZhciBPID0gcmVxdWlyZU9iamVjdENvZXJjaWJsZSh0aGlzKTtcbiAgICAgIHZhciByZXBsYWNlciA9IHNlYXJjaFZhbHVlID09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IHNlYXJjaFZhbHVlW1JFUExBQ0VdO1xuICAgICAgcmV0dXJuIHJlcGxhY2VyICE9PSB1bmRlZmluZWRcbiAgICAgICAgPyByZXBsYWNlci5jYWxsKHNlYXJjaFZhbHVlLCBPLCByZXBsYWNlVmFsdWUpXG4gICAgICAgIDogbmF0aXZlUmVwbGFjZS5jYWxsKFN0cmluZyhPKSwgc2VhcmNoVmFsdWUsIHJlcGxhY2VWYWx1ZSk7XG4gICAgfSxcbiAgICAvLyBgUmVnRXhwLnByb3RvdHlwZVtAQHJlcGxhY2VdYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXJlZ2V4cC5wcm90b3R5cGUtQEByZXBsYWNlXG4gICAgZnVuY3Rpb24gKHJlZ2V4cCwgcmVwbGFjZVZhbHVlKSB7XG4gICAgICBpZiAoXG4gICAgICAgICghUkVHRVhQX1JFUExBQ0VfU1VCU1RJVFVURVNfVU5ERUZJTkVEX0NBUFRVUkUgJiYgUkVQTEFDRV9LRUVQU18kMCkgfHxcbiAgICAgICAgKHR5cGVvZiByZXBsYWNlVmFsdWUgPT09ICdzdHJpbmcnICYmIHJlcGxhY2VWYWx1ZS5pbmRleE9mKFVOU0FGRV9TVUJTVElUVVRFKSA9PT0gLTEpXG4gICAgICApIHtcbiAgICAgICAgdmFyIHJlcyA9IG1heWJlQ2FsbE5hdGl2ZShuYXRpdmVSZXBsYWNlLCByZWdleHAsIHRoaXMsIHJlcGxhY2VWYWx1ZSk7XG4gICAgICAgIGlmIChyZXMuZG9uZSkgcmV0dXJuIHJlcy52YWx1ZTtcbiAgICAgIH1cblxuICAgICAgdmFyIHJ4ID0gYW5PYmplY3QocmVnZXhwKTtcbiAgICAgIHZhciBTID0gU3RyaW5nKHRoaXMpO1xuXG4gICAgICB2YXIgZnVuY3Rpb25hbFJlcGxhY2UgPSB0eXBlb2YgcmVwbGFjZVZhbHVlID09PSAnZnVuY3Rpb24nO1xuICAgICAgaWYgKCFmdW5jdGlvbmFsUmVwbGFjZSkgcmVwbGFjZVZhbHVlID0gU3RyaW5nKHJlcGxhY2VWYWx1ZSk7XG5cbiAgICAgIHZhciBnbG9iYWwgPSByeC5nbG9iYWw7XG4gICAgICBpZiAoZ2xvYmFsKSB7XG4gICAgICAgIHZhciBmdWxsVW5pY29kZSA9IHJ4LnVuaWNvZGU7XG4gICAgICAgIHJ4Lmxhc3RJbmRleCA9IDA7XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0cyA9IFtdO1xuICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHJlZ0V4cEV4ZWMocngsIFMpO1xuICAgICAgICBpZiAocmVzdWx0ID09PSBudWxsKSBicmVhaztcblxuICAgICAgICByZXN1bHRzLnB1c2gocmVzdWx0KTtcbiAgICAgICAgaWYgKCFnbG9iYWwpIGJyZWFrO1xuXG4gICAgICAgIHZhciBtYXRjaFN0ciA9IFN0cmluZyhyZXN1bHRbMF0pO1xuICAgICAgICBpZiAobWF0Y2hTdHIgPT09ICcnKSByeC5sYXN0SW5kZXggPSBhZHZhbmNlU3RyaW5nSW5kZXgoUywgdG9MZW5ndGgocngubGFzdEluZGV4KSwgZnVsbFVuaWNvZGUpO1xuICAgICAgfVxuXG4gICAgICB2YXIgYWNjdW11bGF0ZWRSZXN1bHQgPSAnJztcbiAgICAgIHZhciBuZXh0U291cmNlUG9zaXRpb24gPSAwO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZXN1bHRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHJlc3VsdCA9IHJlc3VsdHNbaV07XG5cbiAgICAgICAgdmFyIG1hdGNoZWQgPSBTdHJpbmcocmVzdWx0WzBdKTtcbiAgICAgICAgdmFyIHBvc2l0aW9uID0gbWF4KG1pbih0b0ludGVnZXIocmVzdWx0LmluZGV4KSwgUy5sZW5ndGgpLCAwKTtcbiAgICAgICAgdmFyIGNhcHR1cmVzID0gW107XG4gICAgICAgIC8vIE5PVEU6IFRoaXMgaXMgZXF1aXZhbGVudCB0b1xuICAgICAgICAvLyAgIGNhcHR1cmVzID0gcmVzdWx0LnNsaWNlKDEpLm1hcChtYXliZVRvU3RyaW5nKVxuICAgICAgICAvLyBidXQgZm9yIHNvbWUgcmVhc29uIGBuYXRpdmVTbGljZS5jYWxsKHJlc3VsdCwgMSwgcmVzdWx0Lmxlbmd0aClgIChjYWxsZWQgaW5cbiAgICAgICAgLy8gdGhlIHNsaWNlIHBvbHlmaWxsIHdoZW4gc2xpY2luZyBuYXRpdmUgYXJyYXlzKSBcImRvZXNuJ3Qgd29ya1wiIGluIHNhZmFyaSA5IGFuZFxuICAgICAgICAvLyBjYXVzZXMgYSBjcmFzaCAoaHR0cHM6Ly9wYXN0ZWJpbi5jb20vTjIxUXplUUEpIHdoZW4gdHJ5aW5nIHRvIGRlYnVnIGl0LlxuICAgICAgICBmb3IgKHZhciBqID0gMTsgaiA8IHJlc3VsdC5sZW5ndGg7IGorKykgY2FwdHVyZXMucHVzaChtYXliZVRvU3RyaW5nKHJlc3VsdFtqXSkpO1xuICAgICAgICB2YXIgbmFtZWRDYXB0dXJlcyA9IHJlc3VsdC5ncm91cHM7XG4gICAgICAgIGlmIChmdW5jdGlvbmFsUmVwbGFjZSkge1xuICAgICAgICAgIHZhciByZXBsYWNlckFyZ3MgPSBbbWF0Y2hlZF0uY29uY2F0KGNhcHR1cmVzLCBwb3NpdGlvbiwgUyk7XG4gICAgICAgICAgaWYgKG5hbWVkQ2FwdHVyZXMgIT09IHVuZGVmaW5lZCkgcmVwbGFjZXJBcmdzLnB1c2gobmFtZWRDYXB0dXJlcyk7XG4gICAgICAgICAgdmFyIHJlcGxhY2VtZW50ID0gU3RyaW5nKHJlcGxhY2VWYWx1ZS5hcHBseSh1bmRlZmluZWQsIHJlcGxhY2VyQXJncykpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlcGxhY2VtZW50ID0gZ2V0U3Vic3RpdHV0aW9uKG1hdGNoZWQsIFMsIHBvc2l0aW9uLCBjYXB0dXJlcywgbmFtZWRDYXB0dXJlcywgcmVwbGFjZVZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocG9zaXRpb24gPj0gbmV4dFNvdXJjZVBvc2l0aW9uKSB7XG4gICAgICAgICAgYWNjdW11bGF0ZWRSZXN1bHQgKz0gUy5zbGljZShuZXh0U291cmNlUG9zaXRpb24sIHBvc2l0aW9uKSArIHJlcGxhY2VtZW50O1xuICAgICAgICAgIG5leHRTb3VyY2VQb3NpdGlvbiA9IHBvc2l0aW9uICsgbWF0Y2hlZC5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBhY2N1bXVsYXRlZFJlc3VsdCArIFMuc2xpY2UobmV4dFNvdXJjZVBvc2l0aW9uKTtcbiAgICB9XG4gIF07XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBmaXhSZWdFeHBXZWxsS25vd25TeW1ib2xMb2dpYyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9maXgtcmVnZXhwLXdlbGwta25vd24tc3ltYm9sLWxvZ2ljJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcbnZhciBzYW1lVmFsdWUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2FtZS12YWx1ZScpO1xudmFyIHJlZ0V4cEV4ZWMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLWV4ZWMtYWJzdHJhY3QnKTtcblxuLy8gQEBzZWFyY2ggbG9naWNcbmZpeFJlZ0V4cFdlbGxLbm93blN5bWJvbExvZ2ljKCdzZWFyY2gnLCAxLCBmdW5jdGlvbiAoU0VBUkNILCBuYXRpdmVTZWFyY2gsIG1heWJlQ2FsbE5hdGl2ZSkge1xuICByZXR1cm4gW1xuICAgIC8vIGBTdHJpbmcucHJvdG90eXBlLnNlYXJjaGAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnNlYXJjaFxuICAgIGZ1bmN0aW9uIHNlYXJjaChyZWdleHApIHtcbiAgICAgIHZhciBPID0gcmVxdWlyZU9iamVjdENvZXJjaWJsZSh0aGlzKTtcbiAgICAgIHZhciBzZWFyY2hlciA9IHJlZ2V4cCA9PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiByZWdleHBbU0VBUkNIXTtcbiAgICAgIHJldHVybiBzZWFyY2hlciAhPT0gdW5kZWZpbmVkID8gc2VhcmNoZXIuY2FsbChyZWdleHAsIE8pIDogbmV3IFJlZ0V4cChyZWdleHApW1NFQVJDSF0oU3RyaW5nKE8pKTtcbiAgICB9LFxuICAgIC8vIGBSZWdFeHAucHJvdG90eXBlW0BAc2VhcmNoXWAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1yZWdleHAucHJvdG90eXBlLUBAc2VhcmNoXG4gICAgZnVuY3Rpb24gKHJlZ2V4cCkge1xuICAgICAgdmFyIHJlcyA9IG1heWJlQ2FsbE5hdGl2ZShuYXRpdmVTZWFyY2gsIHJlZ2V4cCwgdGhpcyk7XG4gICAgICBpZiAocmVzLmRvbmUpIHJldHVybiByZXMudmFsdWU7XG5cbiAgICAgIHZhciByeCA9IGFuT2JqZWN0KHJlZ2V4cCk7XG4gICAgICB2YXIgUyA9IFN0cmluZyh0aGlzKTtcblxuICAgICAgdmFyIHByZXZpb3VzTGFzdEluZGV4ID0gcngubGFzdEluZGV4O1xuICAgICAgaWYgKCFzYW1lVmFsdWUocHJldmlvdXNMYXN0SW5kZXgsIDApKSByeC5sYXN0SW5kZXggPSAwO1xuICAgICAgdmFyIHJlc3VsdCA9IHJlZ0V4cEV4ZWMocngsIFMpO1xuICAgICAgaWYgKCFzYW1lVmFsdWUocngubGFzdEluZGV4LCBwcmV2aW91c0xhc3RJbmRleCkpIHJ4Lmxhc3RJbmRleCA9IHByZXZpb3VzTGFzdEluZGV4O1xuICAgICAgcmV0dXJuIHJlc3VsdCA9PT0gbnVsbCA/IC0xIDogcmVzdWx0LmluZGV4O1xuICAgIH1cbiAgXTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgY3JlYXRlSFRNTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtaHRtbCcpO1xudmFyIGZvcmNlZFN0cmluZ0hUTUxNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLWh0bWwtZm9yY2VkJyk7XG5cbi8vIGBTdHJpbmcucHJvdG90eXBlLnNtYWxsYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5zbWFsbFxuJCh7IHRhcmdldDogJ1N0cmluZycsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IGZvcmNlZFN0cmluZ0hUTUxNZXRob2QoJ3NtYWxsJykgfSwge1xuICBzbWFsbDogZnVuY3Rpb24gc21hbGwoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ3NtYWxsJywgJycsICcnKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZml4UmVnRXhwV2VsbEtub3duU3ltYm9sTG9naWMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZml4LXJlZ2V4cC13ZWxsLWtub3duLXN5bWJvbC1sb2dpYycpO1xudmFyIGlzUmVnRXhwID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXJlZ2V4cCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NwZWNpZXMtY29uc3RydWN0b3InKTtcbnZhciBhZHZhbmNlU3RyaW5nSW5kZXggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYWR2YW5jZS1zdHJpbmctaW5kZXgnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciBjYWxsUmVnRXhwRXhlYyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWdleHAtZXhlYy1hYnN0cmFjdCcpO1xudmFyIHJlZ2V4cEV4ZWMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLWV4ZWMnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG52YXIgYXJyYXlQdXNoID0gW10ucHVzaDtcbnZhciBtaW4gPSBNYXRoLm1pbjtcbnZhciBNQVhfVUlOVDMyID0gMHhGRkZGRkZGRjtcblxuLy8gYmFiZWwtbWluaWZ5IHRyYW5zcGlsZXMgUmVnRXhwKCd4JywgJ3knKSAtPiAveC95IGFuZCBpdCBjYXVzZXMgU3ludGF4RXJyb3JcbnZhciBTVVBQT1JUU19ZID0gIWZhaWxzKGZ1bmN0aW9uICgpIHsgcmV0dXJuICFSZWdFeHAoTUFYX1VJTlQzMiwgJ3knKTsgfSk7XG5cbi8vIEBAc3BsaXQgbG9naWNcbmZpeFJlZ0V4cFdlbGxLbm93blN5bWJvbExvZ2ljKCdzcGxpdCcsIDIsIGZ1bmN0aW9uIChTUExJVCwgbmF0aXZlU3BsaXQsIG1heWJlQ2FsbE5hdGl2ZSkge1xuICB2YXIgaW50ZXJuYWxTcGxpdDtcbiAgaWYgKFxuICAgICdhYmJjJy5zcGxpdCgvKGIpKi8pWzFdID09ICdjJyB8fFxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWdleHAvbm8tZW1wdHktZ3JvdXAgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbiAgICAndGVzdCcuc3BsaXQoLyg/OikvLCAtMSkubGVuZ3RoICE9IDQgfHxcbiAgICAnYWInLnNwbGl0KC8oPzphYikqLykubGVuZ3RoICE9IDIgfHxcbiAgICAnLicuc3BsaXQoLyguPykoLj8pLykubGVuZ3RoICE9IDQgfHxcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVnZXhwL25vLWFzc2VydGlvbi1jYXB0dXJpbmctZ3JvdXAsIHJlZ2V4cC9uby1lbXB0eS1ncm91cCAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xuICAgICcuJy5zcGxpdCgvKCkoKS8pLmxlbmd0aCA+IDEgfHxcbiAgICAnJy5zcGxpdCgvLj8vKS5sZW5ndGhcbiAgKSB7XG4gICAgLy8gYmFzZWQgb24gZXM1LXNoaW0gaW1wbGVtZW50YXRpb24sIG5lZWQgdG8gcmV3b3JrIGl0XG4gICAgaW50ZXJuYWxTcGxpdCA9IGZ1bmN0aW9uIChzZXBhcmF0b3IsIGxpbWl0KSB7XG4gICAgICB2YXIgc3RyaW5nID0gU3RyaW5nKHJlcXVpcmVPYmplY3RDb2VyY2libGUodGhpcykpO1xuICAgICAgdmFyIGxpbSA9IGxpbWl0ID09PSB1bmRlZmluZWQgPyBNQVhfVUlOVDMyIDogbGltaXQgPj4+IDA7XG4gICAgICBpZiAobGltID09PSAwKSByZXR1cm4gW107XG4gICAgICBpZiAoc2VwYXJhdG9yID09PSB1bmRlZmluZWQpIHJldHVybiBbc3RyaW5nXTtcbiAgICAgIC8vIElmIGBzZXBhcmF0b3JgIGlzIG5vdCBhIHJlZ2V4LCB1c2UgbmF0aXZlIHNwbGl0XG4gICAgICBpZiAoIWlzUmVnRXhwKHNlcGFyYXRvcikpIHtcbiAgICAgICAgcmV0dXJuIG5hdGl2ZVNwbGl0LmNhbGwoc3RyaW5nLCBzZXBhcmF0b3IsIGxpbSk7XG4gICAgICB9XG4gICAgICB2YXIgb3V0cHV0ID0gW107XG4gICAgICB2YXIgZmxhZ3MgPSAoc2VwYXJhdG9yLmlnbm9yZUNhc2UgPyAnaScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKHNlcGFyYXRvci5tdWx0aWxpbmUgPyAnbScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKHNlcGFyYXRvci51bmljb2RlID8gJ3UnIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChzZXBhcmF0b3Iuc3RpY2t5ID8gJ3knIDogJycpO1xuICAgICAgdmFyIGxhc3RMYXN0SW5kZXggPSAwO1xuICAgICAgLy8gTWFrZSBgZ2xvYmFsYCBhbmQgYXZvaWQgYGxhc3RJbmRleGAgaXNzdWVzIGJ5IHdvcmtpbmcgd2l0aCBhIGNvcHlcbiAgICAgIHZhciBzZXBhcmF0b3JDb3B5ID0gbmV3IFJlZ0V4cChzZXBhcmF0b3Iuc291cmNlLCBmbGFncyArICdnJyk7XG4gICAgICB2YXIgbWF0Y2gsIGxhc3RJbmRleCwgbGFzdExlbmd0aDtcbiAgICAgIHdoaWxlIChtYXRjaCA9IHJlZ2V4cEV4ZWMuY2FsbChzZXBhcmF0b3JDb3B5LCBzdHJpbmcpKSB7XG4gICAgICAgIGxhc3RJbmRleCA9IHNlcGFyYXRvckNvcHkubGFzdEluZGV4O1xuICAgICAgICBpZiAobGFzdEluZGV4ID4gbGFzdExhc3RJbmRleCkge1xuICAgICAgICAgIG91dHB1dC5wdXNoKHN0cmluZy5zbGljZShsYXN0TGFzdEluZGV4LCBtYXRjaC5pbmRleCkpO1xuICAgICAgICAgIGlmIChtYXRjaC5sZW5ndGggPiAxICYmIG1hdGNoLmluZGV4IDwgc3RyaW5nLmxlbmd0aCkgYXJyYXlQdXNoLmFwcGx5KG91dHB1dCwgbWF0Y2guc2xpY2UoMSkpO1xuICAgICAgICAgIGxhc3RMZW5ndGggPSBtYXRjaFswXS5sZW5ndGg7XG4gICAgICAgICAgbGFzdExhc3RJbmRleCA9IGxhc3RJbmRleDtcbiAgICAgICAgICBpZiAob3V0cHV0Lmxlbmd0aCA+PSBsaW0pIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzZXBhcmF0b3JDb3B5Lmxhc3RJbmRleCA9PT0gbWF0Y2guaW5kZXgpIHNlcGFyYXRvckNvcHkubGFzdEluZGV4Kys7IC8vIEF2b2lkIGFuIGluZmluaXRlIGxvb3BcbiAgICAgIH1cbiAgICAgIGlmIChsYXN0TGFzdEluZGV4ID09PSBzdHJpbmcubGVuZ3RoKSB7XG4gICAgICAgIGlmIChsYXN0TGVuZ3RoIHx8ICFzZXBhcmF0b3JDb3B5LnRlc3QoJycpKSBvdXRwdXQucHVzaCgnJyk7XG4gICAgICB9IGVsc2Ugb3V0cHV0LnB1c2goc3RyaW5nLnNsaWNlKGxhc3RMYXN0SW5kZXgpKTtcbiAgICAgIHJldHVybiBvdXRwdXQubGVuZ3RoID4gbGltID8gb3V0cHV0LnNsaWNlKDAsIGxpbSkgOiBvdXRwdXQ7XG4gICAgfTtcbiAgLy8gQ2hha3JhLCBWOFxuICB9IGVsc2UgaWYgKCcwJy5zcGxpdCh1bmRlZmluZWQsIDApLmxlbmd0aCkge1xuICAgIGludGVybmFsU3BsaXQgPSBmdW5jdGlvbiAoc2VwYXJhdG9yLCBsaW1pdCkge1xuICAgICAgcmV0dXJuIHNlcGFyYXRvciA9PT0gdW5kZWZpbmVkICYmIGxpbWl0ID09PSAwID8gW10gOiBuYXRpdmVTcGxpdC5jYWxsKHRoaXMsIHNlcGFyYXRvciwgbGltaXQpO1xuICAgIH07XG4gIH0gZWxzZSBpbnRlcm5hbFNwbGl0ID0gbmF0aXZlU3BsaXQ7XG5cbiAgcmV0dXJuIFtcbiAgICAvLyBgU3RyaW5nLnByb3RvdHlwZS5zcGxpdGAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnNwbGl0XG4gICAgZnVuY3Rpb24gc3BsaXQoc2VwYXJhdG9yLCBsaW1pdCkge1xuICAgICAgdmFyIE8gPSByZXF1aXJlT2JqZWN0Q29lcmNpYmxlKHRoaXMpO1xuICAgICAgdmFyIHNwbGl0dGVyID0gc2VwYXJhdG9yID09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IHNlcGFyYXRvcltTUExJVF07XG4gICAgICByZXR1cm4gc3BsaXR0ZXIgIT09IHVuZGVmaW5lZFxuICAgICAgICA/IHNwbGl0dGVyLmNhbGwoc2VwYXJhdG9yLCBPLCBsaW1pdClcbiAgICAgICAgOiBpbnRlcm5hbFNwbGl0LmNhbGwoU3RyaW5nKE8pLCBzZXBhcmF0b3IsIGxpbWl0KTtcbiAgICB9LFxuICAgIC8vIGBSZWdFeHAucHJvdG90eXBlW0BAc3BsaXRdYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXJlZ2V4cC5wcm90b3R5cGUtQEBzcGxpdFxuICAgIC8vXG4gICAgLy8gTk9URTogVGhpcyBjYW5ub3QgYmUgcHJvcGVybHkgcG9seWZpbGxlZCBpbiBlbmdpbmVzIHRoYXQgZG9uJ3Qgc3VwcG9ydFxuICAgIC8vIHRoZSAneScgZmxhZy5cbiAgICBmdW5jdGlvbiAocmVnZXhwLCBsaW1pdCkge1xuICAgICAgdmFyIHJlcyA9IG1heWJlQ2FsbE5hdGl2ZShpbnRlcm5hbFNwbGl0LCByZWdleHAsIHRoaXMsIGxpbWl0LCBpbnRlcm5hbFNwbGl0ICE9PSBuYXRpdmVTcGxpdCk7XG4gICAgICBpZiAocmVzLmRvbmUpIHJldHVybiByZXMudmFsdWU7XG5cbiAgICAgIHZhciByeCA9IGFuT2JqZWN0KHJlZ2V4cCk7XG4gICAgICB2YXIgUyA9IFN0cmluZyh0aGlzKTtcbiAgICAgIHZhciBDID0gc3BlY2llc0NvbnN0cnVjdG9yKHJ4LCBSZWdFeHApO1xuXG4gICAgICB2YXIgdW5pY29kZU1hdGNoaW5nID0gcngudW5pY29kZTtcbiAgICAgIHZhciBmbGFncyA9IChyeC5pZ25vcmVDYXNlID8gJ2knIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChyeC5tdWx0aWxpbmUgPyAnbScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKHJ4LnVuaWNvZGUgPyAndScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKFNVUFBPUlRTX1kgPyAneScgOiAnZycpO1xuXG4gICAgICAvLyBeKD8gKyByeCArICkgaXMgbmVlZGVkLCBpbiBjb21iaW5hdGlvbiB3aXRoIHNvbWUgUyBzbGljaW5nLCB0b1xuICAgICAgLy8gc2ltdWxhdGUgdGhlICd5JyBmbGFnLlxuICAgICAgdmFyIHNwbGl0dGVyID0gbmV3IEMoU1VQUE9SVFNfWSA/IHJ4IDogJ14oPzonICsgcnguc291cmNlICsgJyknLCBmbGFncyk7XG4gICAgICB2YXIgbGltID0gbGltaXQgPT09IHVuZGVmaW5lZCA/IE1BWF9VSU5UMzIgOiBsaW1pdCA+Pj4gMDtcbiAgICAgIGlmIChsaW0gPT09IDApIHJldHVybiBbXTtcbiAgICAgIGlmIChTLmxlbmd0aCA9PT0gMCkgcmV0dXJuIGNhbGxSZWdFeHBFeGVjKHNwbGl0dGVyLCBTKSA9PT0gbnVsbCA/IFtTXSA6IFtdO1xuICAgICAgdmFyIHAgPSAwO1xuICAgICAgdmFyIHEgPSAwO1xuICAgICAgdmFyIEEgPSBbXTtcbiAgICAgIHdoaWxlIChxIDwgUy5sZW5ndGgpIHtcbiAgICAgICAgc3BsaXR0ZXIubGFzdEluZGV4ID0gU1VQUE9SVFNfWSA/IHEgOiAwO1xuICAgICAgICB2YXIgeiA9IGNhbGxSZWdFeHBFeGVjKHNwbGl0dGVyLCBTVVBQT1JUU19ZID8gUyA6IFMuc2xpY2UocSkpO1xuICAgICAgICB2YXIgZTtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIHogPT09IG51bGwgfHxcbiAgICAgICAgICAoZSA9IG1pbih0b0xlbmd0aChzcGxpdHRlci5sYXN0SW5kZXggKyAoU1VQUE9SVFNfWSA/IDAgOiBxKSksIFMubGVuZ3RoKSkgPT09IHBcbiAgICAgICAgKSB7XG4gICAgICAgICAgcSA9IGFkdmFuY2VTdHJpbmdJbmRleChTLCBxLCB1bmljb2RlTWF0Y2hpbmcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIEEucHVzaChTLnNsaWNlKHAsIHEpKTtcbiAgICAgICAgICBpZiAoQS5sZW5ndGggPT09IGxpbSkgcmV0dXJuIEE7XG4gICAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPD0gei5sZW5ndGggLSAxOyBpKyspIHtcbiAgICAgICAgICAgIEEucHVzaCh6W2ldKTtcbiAgICAgICAgICAgIGlmIChBLmxlbmd0aCA9PT0gbGltKSByZXR1cm4gQTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcSA9IHAgPSBlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBBLnB1c2goUy5zbGljZShwKSk7XG4gICAgICByZXR1cm4gQTtcbiAgICB9XG4gIF07XG59LCAhU1VQUE9SVFNfWSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpLmY7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG52YXIgbm90QVJlZ0V4cCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9ub3QtYS1yZWdleHAnKTtcbnZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xudmFyIGNvcnJlY3RJc1JlZ0V4cExvZ2ljID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NvcnJlY3QtaXMtcmVnZXhwLWxvZ2ljJyk7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG5cbnZhciBuYXRpdmVTdGFydHNXaXRoID0gJycuc3RhcnRzV2l0aDtcbnZhciBtaW4gPSBNYXRoLm1pbjtcblxudmFyIENPUlJFQ1RfSVNfUkVHRVhQX0xPR0lDID0gY29ycmVjdElzUmVnRXhwTG9naWMoJ3N0YXJ0c1dpdGgnKTtcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL3B1bGwvNzAyXG52YXIgTUROX1BPTFlGSUxMX0JVRyA9ICFJU19QVVJFICYmICFDT1JSRUNUX0lTX1JFR0VYUF9MT0dJQyAmJiAhIWZ1bmN0aW9uICgpIHtcbiAgdmFyIGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoU3RyaW5nLnByb3RvdHlwZSwgJ3N0YXJ0c1dpdGgnKTtcbiAgcmV0dXJuIGRlc2NyaXB0b3IgJiYgIWRlc2NyaXB0b3Iud3JpdGFibGU7XG59KCk7XG5cbi8vIGBTdHJpbmcucHJvdG90eXBlLnN0YXJ0c1dpdGhgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnN0YXJ0c3dpdGhcbiQoeyB0YXJnZXQ6ICdTdHJpbmcnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiAhTUROX1BPTFlGSUxMX0JVRyAmJiAhQ09SUkVDVF9JU19SRUdFWFBfTE9HSUMgfSwge1xuICBzdGFydHNXaXRoOiBmdW5jdGlvbiBzdGFydHNXaXRoKHNlYXJjaFN0cmluZyAvKiAsIHBvc2l0aW9uID0gMCAqLykge1xuICAgIHZhciB0aGF0ID0gU3RyaW5nKHJlcXVpcmVPYmplY3RDb2VyY2libGUodGhpcykpO1xuICAgIG5vdEFSZWdFeHAoc2VhcmNoU3RyaW5nKTtcbiAgICB2YXIgaW5kZXggPSB0b0xlbmd0aChtaW4oYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIHRoYXQubGVuZ3RoKSk7XG4gICAgdmFyIHNlYXJjaCA9IFN0cmluZyhzZWFyY2hTdHJpbmcpO1xuICAgIHJldHVybiBuYXRpdmVTdGFydHNXaXRoXG4gICAgICA/IG5hdGl2ZVN0YXJ0c1dpdGguY2FsbCh0aGF0LCBzZWFyY2gsIGluZGV4KVxuICAgICAgOiB0aGF0LnNsaWNlKGluZGV4LCBpbmRleCArIHNlYXJjaC5sZW5ndGgpID09PSBzZWFyY2g7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgY3JlYXRlSFRNTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtaHRtbCcpO1xudmFyIGZvcmNlZFN0cmluZ0hUTUxNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLWh0bWwtZm9yY2VkJyk7XG5cbi8vIGBTdHJpbmcucHJvdG90eXBlLnN0cmlrZWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUuc3RyaWtlXG4kKHsgdGFyZ2V0OiAnU3RyaW5nJywgcHJvdG86IHRydWUsIGZvcmNlZDogZm9yY2VkU3RyaW5nSFRNTE1ldGhvZCgnc3RyaWtlJykgfSwge1xuICBzdHJpa2U6IGZ1bmN0aW9uIHN0cmlrZSgpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnc3RyaWtlJywgJycsICcnKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBjcmVhdGVIVE1MID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1odG1sJyk7XG52YXIgZm9yY2VkU3RyaW5nSFRNTE1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctaHRtbC1mb3JjZWQnKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUuc3ViYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5zdWJcbiQoeyB0YXJnZXQ6ICdTdHJpbmcnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBmb3JjZWRTdHJpbmdIVE1MTWV0aG9kKCdzdWInKSB9LCB7XG4gIHN1YjogZnVuY3Rpb24gc3ViKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdzdWInLCAnJywgJycpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGNyZWF0ZUhUTUwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLWh0bWwnKTtcbnZhciBmb3JjZWRTdHJpbmdIVE1MTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy1odG1sLWZvcmNlZCcpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS5zdXBgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnN1cFxuJCh7IHRhcmdldDogJ1N0cmluZycsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IGZvcmNlZFN0cmluZ0hUTUxNZXRob2QoJ3N1cCcpIH0sIHtcbiAgc3VwOiBmdW5jdGlvbiBzdXAoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ3N1cCcsICcnLCAnJyk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgJHRyaW1FbmQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLXRyaW0nKS5lbmQ7XG52YXIgZm9yY2VkU3RyaW5nVHJpbU1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctdHJpbS1mb3JjZWQnKTtcblxudmFyIEZPUkNFRCA9IGZvcmNlZFN0cmluZ1RyaW1NZXRob2QoJ3RyaW1FbmQnKTtcblxudmFyIHRyaW1FbmQgPSBGT1JDRUQgPyBmdW5jdGlvbiB0cmltRW5kKCkge1xuICByZXR1cm4gJHRyaW1FbmQodGhpcyk7XG59IDogJycudHJpbUVuZDtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUueyB0cmltRW5kLCB0cmltUmlnaHQgfWAgbWV0aG9kc1xuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnRyaW1lbmRcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNTdHJpbmcucHJvdG90eXBlLnRyaW1yaWdodFxuJCh7IHRhcmdldDogJ1N0cmluZycsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IEZPUkNFRCB9LCB7XG4gIHRyaW1FbmQ6IHRyaW1FbmQsXG4gIHRyaW1SaWdodDogdHJpbUVuZFxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciAkdHJpbVN0YXJ0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy10cmltJykuc3RhcnQ7XG52YXIgZm9yY2VkU3RyaW5nVHJpbU1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctdHJpbS1mb3JjZWQnKTtcblxudmFyIEZPUkNFRCA9IGZvcmNlZFN0cmluZ1RyaW1NZXRob2QoJ3RyaW1TdGFydCcpO1xuXG52YXIgdHJpbVN0YXJ0ID0gRk9SQ0VEID8gZnVuY3Rpb24gdHJpbVN0YXJ0KCkge1xuICByZXR1cm4gJHRyaW1TdGFydCh0aGlzKTtcbn0gOiAnJy50cmltU3RhcnQ7XG5cbi8vIGBTdHJpbmcucHJvdG90eXBlLnsgdHJpbVN0YXJ0LCB0cmltTGVmdCB9YCBtZXRob2RzXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUudHJpbXN0YXJ0XG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jU3RyaW5nLnByb3RvdHlwZS50cmltbGVmdFxuJCh7IHRhcmdldDogJ1N0cmluZycsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IEZPUkNFRCB9LCB7XG4gIHRyaW1TdGFydDogdHJpbVN0YXJ0LFxuICB0cmltTGVmdDogdHJpbVN0YXJ0XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyICR0cmltID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy10cmltJykudHJpbTtcbnZhciBmb3JjZWRTdHJpbmdUcmltTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy10cmltLWZvcmNlZCcpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS50cmltYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS50cmltXG4kKHsgdGFyZ2V0OiAnU3RyaW5nJywgcHJvdG86IHRydWUsIGZvcmNlZDogZm9yY2VkU3RyaW5nVHJpbU1ldGhvZCgndHJpbScpIH0sIHtcbiAgdHJpbTogZnVuY3Rpb24gdHJpbSgpIHtcbiAgICByZXR1cm4gJHRyaW0odGhpcyk7XG4gIH1cbn0pO1xuIiwidmFyIGRlZmluZVdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtd2VsbC1rbm93bi1zeW1ib2wnKTtcblxuLy8gYFN5bWJvbC5hc3luY0l0ZXJhdG9yYCB3ZWxsLWtub3duIHN5bWJvbFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zeW1ib2wuYXN5bmNpdGVyYXRvclxuZGVmaW5lV2VsbEtub3duU3ltYm9sKCdhc3luY0l0ZXJhdG9yJyk7XG4iLCIvLyBgU3ltYm9sLnByb3RvdHlwZS5kZXNjcmlwdGlvbmAgZ2V0dGVyXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN5bWJvbC5wcm90b3R5cGUuZGVzY3JpcHRpb25cbid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5JykuZjtcbnZhciBjb3B5Q29uc3RydWN0b3JQcm9wZXJ0aWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NvcHktY29uc3RydWN0b3ItcHJvcGVydGllcycpO1xuXG52YXIgTmF0aXZlU3ltYm9sID0gZ2xvYmFsLlN5bWJvbDtcblxuaWYgKERFU0NSSVBUT1JTICYmIHR5cGVvZiBOYXRpdmVTeW1ib2wgPT0gJ2Z1bmN0aW9uJyAmJiAoISgnZGVzY3JpcHRpb24nIGluIE5hdGl2ZVN5bWJvbC5wcm90b3R5cGUpIHx8XG4gIC8vIFNhZmFyaSAxMiBidWdcbiAgTmF0aXZlU3ltYm9sKCkuZGVzY3JpcHRpb24gIT09IHVuZGVmaW5lZFxuKSkge1xuICB2YXIgRW1wdHlTdHJpbmdEZXNjcmlwdGlvblN0b3JlID0ge307XG4gIC8vIHdyYXAgU3ltYm9sIGNvbnN0cnVjdG9yIGZvciBjb3JyZWN0IHdvcmsgd2l0aCB1bmRlZmluZWQgZGVzY3JpcHRpb25cbiAgdmFyIFN5bWJvbFdyYXBwZXIgPSBmdW5jdGlvbiBTeW1ib2woKSB7XG4gICAgdmFyIGRlc2NyaXB0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA8IDEgfHwgYXJndW1lbnRzWzBdID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiBTdHJpbmcoYXJndW1lbnRzWzBdKTtcbiAgICB2YXIgcmVzdWx0ID0gdGhpcyBpbnN0YW5jZW9mIFN5bWJvbFdyYXBwZXJcbiAgICAgID8gbmV3IE5hdGl2ZVN5bWJvbChkZXNjcmlwdGlvbilcbiAgICAgIC8vIGluIEVkZ2UgMTMsIFN0cmluZyhTeW1ib2wodW5kZWZpbmVkKSkgPT09ICdTeW1ib2wodW5kZWZpbmVkKSdcbiAgICAgIDogZGVzY3JpcHRpb24gPT09IHVuZGVmaW5lZCA/IE5hdGl2ZVN5bWJvbCgpIDogTmF0aXZlU3ltYm9sKGRlc2NyaXB0aW9uKTtcbiAgICBpZiAoZGVzY3JpcHRpb24gPT09ICcnKSBFbXB0eVN0cmluZ0Rlc2NyaXB0aW9uU3RvcmVbcmVzdWx0XSA9IHRydWU7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbiAgY29weUNvbnN0cnVjdG9yUHJvcGVydGllcyhTeW1ib2xXcmFwcGVyLCBOYXRpdmVTeW1ib2wpO1xuICB2YXIgc3ltYm9sUHJvdG90eXBlID0gU3ltYm9sV3JhcHBlci5wcm90b3R5cGUgPSBOYXRpdmVTeW1ib2wucHJvdG90eXBlO1xuICBzeW1ib2xQcm90b3R5cGUuY29uc3RydWN0b3IgPSBTeW1ib2xXcmFwcGVyO1xuXG4gIHZhciBzeW1ib2xUb1N0cmluZyA9IHN5bWJvbFByb3RvdHlwZS50b1N0cmluZztcbiAgdmFyIG5hdGl2ZSA9IFN0cmluZyhOYXRpdmVTeW1ib2woJ3Rlc3QnKSkgPT0gJ1N5bWJvbCh0ZXN0KSc7XG4gIHZhciByZWdleHAgPSAvXlN5bWJvbFxcKCguKilcXClbXildKyQvO1xuICBkZWZpbmVQcm9wZXJ0eShzeW1ib2xQcm90b3R5cGUsICdkZXNjcmlwdGlvbicsIHtcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiBkZXNjcmlwdGlvbigpIHtcbiAgICAgIHZhciBzeW1ib2wgPSBpc09iamVjdCh0aGlzKSA/IHRoaXMudmFsdWVPZigpIDogdGhpcztcbiAgICAgIHZhciBzdHJpbmcgPSBzeW1ib2xUb1N0cmluZy5jYWxsKHN5bWJvbCk7XG4gICAgICBpZiAoaGFzKEVtcHR5U3RyaW5nRGVzY3JpcHRpb25TdG9yZSwgc3ltYm9sKSkgcmV0dXJuICcnO1xuICAgICAgdmFyIGRlc2MgPSBuYXRpdmUgPyBzdHJpbmcuc2xpY2UoNywgLTEpIDogc3RyaW5nLnJlcGxhY2UocmVnZXhwLCAnJDEnKTtcbiAgICAgIHJldHVybiBkZXNjID09PSAnJyA/IHVuZGVmaW5lZCA6IGRlc2M7XG4gICAgfVxuICB9KTtcblxuICAkKHsgZ2xvYmFsOiB0cnVlLCBmb3JjZWQ6IHRydWUgfSwge1xuICAgIFN5bWJvbDogU3ltYm9sV3JhcHBlclxuICB9KTtcbn1cbiIsInZhciBkZWZpbmVXZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLXdlbGwta25vd24tc3ltYm9sJyk7XG5cbi8vIGBTeW1ib2wuaGFzSW5zdGFuY2VgIHdlbGwta25vd24gc3ltYm9sXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN5bWJvbC5oYXNpbnN0YW5jZVxuZGVmaW5lV2VsbEtub3duU3ltYm9sKCdoYXNJbnN0YW5jZScpO1xuIiwidmFyIGRlZmluZVdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtd2VsbC1rbm93bi1zeW1ib2wnKTtcblxuLy8gYFN5bWJvbC5pc0NvbmNhdFNwcmVhZGFibGVgIHdlbGwta25vd24gc3ltYm9sXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN5bWJvbC5pc2NvbmNhdHNwcmVhZGFibGVcbmRlZmluZVdlbGxLbm93blN5bWJvbCgnaXNDb25jYXRTcHJlYWRhYmxlJyk7XG4iLCJ2YXIgZGVmaW5lV2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS13ZWxsLWtub3duLXN5bWJvbCcpO1xuXG4vLyBgU3ltYm9sLml0ZXJhdG9yYCB3ZWxsLWtub3duIHN5bWJvbFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zeW1ib2wuaXRlcmF0b3JcbmRlZmluZVdlbGxLbm93blN5bWJvbCgnaXRlcmF0b3InKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgTkFUSVZFX1NZTUJPTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uYXRpdmUtc3ltYm9sJyk7XG52YXIgVVNFX1NZTUJPTF9BU19VSUQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdXNlLXN5bWJvbC1hcy11aWQnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWFycmF5Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tcHJpbWl0aXZlJyk7XG52YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG52YXIgbmF0aXZlT2JqZWN0Q3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1jcmVhdGUnKTtcbnZhciBvYmplY3RLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1rZXlzJyk7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lc01vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcycpO1xudmFyIGdldE93blByb3BlcnR5TmFtZXNFeHRlcm5hbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcy1leHRlcm5hbCcpO1xudmFyIGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1zeW1ib2xzJyk7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG52YXIgcHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXByb3BlcnR5LWlzLWVudW1lcmFibGUnKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUnKTtcbnZhciBzaGFyZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkJyk7XG52YXIgc2hhcmVkS2V5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1rZXknKTtcbnZhciBoaWRkZW5LZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hpZGRlbi1rZXlzJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3VpZCcpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIHdyYXBwZWRXZWxsS25vd25TeW1ib2xNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wtd3JhcHBlZCcpO1xudmFyIGRlZmluZVdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcbnZhciAkZm9yRWFjaCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pdGVyYXRpb24nKS5mb3JFYWNoO1xuXG52YXIgSElEREVOID0gc2hhcmVkS2V5KCdoaWRkZW4nKTtcbnZhciBTWU1CT0wgPSAnU3ltYm9sJztcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcbnZhciBUT19QUklNSVRJVkUgPSB3ZWxsS25vd25TeW1ib2woJ3RvUHJpbWl0aXZlJyk7XG52YXIgc2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuc2V0O1xudmFyIGdldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldHRlckZvcihTWU1CT0wpO1xudmFyIE9iamVjdFByb3RvdHlwZSA9IE9iamVjdFtQUk9UT1RZUEVdO1xudmFyICRTeW1ib2wgPSBnbG9iYWwuU3ltYm9sO1xudmFyICRzdHJpbmdpZnkgPSBnZXRCdWlsdEluKCdKU09OJywgJ3N0cmluZ2lmeScpO1xudmFyIG5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZS5mO1xudmFyIG5hdGl2ZURlZmluZVByb3BlcnR5ID0gZGVmaW5lUHJvcGVydHlNb2R1bGUuZjtcbnZhciBuYXRpdmVHZXRPd25Qcm9wZXJ0eU5hbWVzID0gZ2V0T3duUHJvcGVydHlOYW1lc0V4dGVybmFsLmY7XG52YXIgbmF0aXZlUHJvcGVydHlJc0VudW1lcmFibGUgPSBwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZS5mO1xudmFyIEFsbFN5bWJvbHMgPSBzaGFyZWQoJ3N5bWJvbHMnKTtcbnZhciBPYmplY3RQcm90b3R5cGVTeW1ib2xzID0gc2hhcmVkKCdvcC1zeW1ib2xzJyk7XG52YXIgU3RyaW5nVG9TeW1ib2xSZWdpc3RyeSA9IHNoYXJlZCgnc3RyaW5nLXRvLXN5bWJvbC1yZWdpc3RyeScpO1xudmFyIFN5bWJvbFRvU3RyaW5nUmVnaXN0cnkgPSBzaGFyZWQoJ3N5bWJvbC10by1zdHJpbmctcmVnaXN0cnknKTtcbnZhciBXZWxsS25vd25TeW1ib2xzU3RvcmUgPSBzaGFyZWQoJ3drcycpO1xudmFyIFFPYmplY3QgPSBnbG9iYWwuUU9iamVjdDtcbi8vIERvbid0IHVzZSBzZXR0ZXJzIGluIFF0IFNjcmlwdCwgaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzE3M1xudmFyIFVTRV9TRVRURVIgPSAhUU9iamVjdCB8fCAhUU9iamVjdFtQUk9UT1RZUEVdIHx8ICFRT2JqZWN0W1BST1RPVFlQRV0uZmluZENoaWxkO1xuXG4vLyBmYWxsYmFjayBmb3Igb2xkIEFuZHJvaWQsIGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvdjgvaXNzdWVzL2RldGFpbD9pZD02ODdcbnZhciBzZXRTeW1ib2xEZXNjcmlwdG9yID0gREVTQ1JJUFRPUlMgJiYgZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gbmF0aXZlT2JqZWN0Q3JlYXRlKG5hdGl2ZURlZmluZVByb3BlcnR5KHt9LCAnYScsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG5hdGl2ZURlZmluZVByb3BlcnR5KHRoaXMsICdhJywgeyB2YWx1ZTogNyB9KS5hOyB9XG4gIH0pKS5hICE9IDc7XG59KSA/IGZ1bmN0aW9uIChPLCBQLCBBdHRyaWJ1dGVzKSB7XG4gIHZhciBPYmplY3RQcm90b3R5cGVEZXNjcmlwdG9yID0gbmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE9iamVjdFByb3RvdHlwZSwgUCk7XG4gIGlmIChPYmplY3RQcm90b3R5cGVEZXNjcmlwdG9yKSBkZWxldGUgT2JqZWN0UHJvdG90eXBlW1BdO1xuICBuYXRpdmVEZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKTtcbiAgaWYgKE9iamVjdFByb3RvdHlwZURlc2NyaXB0b3IgJiYgTyAhPT0gT2JqZWN0UHJvdG90eXBlKSB7XG4gICAgbmF0aXZlRGVmaW5lUHJvcGVydHkoT2JqZWN0UHJvdG90eXBlLCBQLCBPYmplY3RQcm90b3R5cGVEZXNjcmlwdG9yKTtcbiAgfVxufSA6IG5hdGl2ZURlZmluZVByb3BlcnR5O1xuXG52YXIgd3JhcCA9IGZ1bmN0aW9uICh0YWcsIGRlc2NyaXB0aW9uKSB7XG4gIHZhciBzeW1ib2wgPSBBbGxTeW1ib2xzW3RhZ10gPSBuYXRpdmVPYmplY3RDcmVhdGUoJFN5bWJvbFtQUk9UT1RZUEVdKTtcbiAgc2V0SW50ZXJuYWxTdGF0ZShzeW1ib2wsIHtcbiAgICB0eXBlOiBTWU1CT0wsXG4gICAgdGFnOiB0YWcsXG4gICAgZGVzY3JpcHRpb246IGRlc2NyaXB0aW9uXG4gIH0pO1xuICBpZiAoIURFU0NSSVBUT1JTKSBzeW1ib2wuZGVzY3JpcHRpb24gPSBkZXNjcmlwdGlvbjtcbiAgcmV0dXJuIHN5bWJvbDtcbn07XG5cbnZhciBpc1N5bWJvbCA9IFVTRV9TWU1CT0xfQVNfVUlEID8gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0eXBlb2YgaXQgPT0gJ3N5bWJvbCc7XG59IDogZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBPYmplY3QoaXQpIGluc3RhbmNlb2YgJFN5bWJvbDtcbn07XG5cbnZhciAkZGVmaW5lUHJvcGVydHkgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKSB7XG4gIGlmIChPID09PSBPYmplY3RQcm90b3R5cGUpICRkZWZpbmVQcm9wZXJ0eShPYmplY3RQcm90b3R5cGVTeW1ib2xzLCBQLCBBdHRyaWJ1dGVzKTtcbiAgYW5PYmplY3QoTyk7XG4gIHZhciBrZXkgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgYW5PYmplY3QoQXR0cmlidXRlcyk7XG4gIGlmIChoYXMoQWxsU3ltYm9scywga2V5KSkge1xuICAgIGlmICghQXR0cmlidXRlcy5lbnVtZXJhYmxlKSB7XG4gICAgICBpZiAoIWhhcyhPLCBISURERU4pKSBuYXRpdmVEZWZpbmVQcm9wZXJ0eShPLCBISURERU4sIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigxLCB7fSkpO1xuICAgICAgT1tISURERU5dW2tleV0gPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoaGFzKE8sIEhJRERFTikgJiYgT1tISURERU5dW2tleV0pIE9bSElEREVOXVtrZXldID0gZmFsc2U7XG4gICAgICBBdHRyaWJ1dGVzID0gbmF0aXZlT2JqZWN0Q3JlYXRlKEF0dHJpYnV0ZXMsIHsgZW51bWVyYWJsZTogY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDAsIGZhbHNlKSB9KTtcbiAgICB9IHJldHVybiBzZXRTeW1ib2xEZXNjcmlwdG9yKE8sIGtleSwgQXR0cmlidXRlcyk7XG4gIH0gcmV0dXJuIG5hdGl2ZURlZmluZVByb3BlcnR5KE8sIGtleSwgQXR0cmlidXRlcyk7XG59O1xuXG52YXIgJGRlZmluZVByb3BlcnRpZXMgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIHZhciBwcm9wZXJ0aWVzID0gdG9JbmRleGVkT2JqZWN0KFByb3BlcnRpZXMpO1xuICB2YXIga2V5cyA9IG9iamVjdEtleXMocHJvcGVydGllcykuY29uY2F0KCRnZXRPd25Qcm9wZXJ0eVN5bWJvbHMocHJvcGVydGllcykpO1xuICAkZm9yRWFjaChrZXlzLCBmdW5jdGlvbiAoa2V5KSB7XG4gICAgaWYgKCFERVNDUklQVE9SUyB8fCAkcHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChwcm9wZXJ0aWVzLCBrZXkpKSAkZGVmaW5lUHJvcGVydHkoTywga2V5LCBwcm9wZXJ0aWVzW2tleV0pO1xuICB9KTtcbiAgcmV0dXJuIE87XG59O1xuXG52YXIgJGNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShPLCBQcm9wZXJ0aWVzKSB7XG4gIHJldHVybiBQcm9wZXJ0aWVzID09PSB1bmRlZmluZWQgPyBuYXRpdmVPYmplY3RDcmVhdGUoTykgOiAkZGVmaW5lUHJvcGVydGllcyhuYXRpdmVPYmplY3RDcmVhdGUoTyksIFByb3BlcnRpZXMpO1xufTtcblxudmFyICRwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IGZ1bmN0aW9uIHByb3BlcnR5SXNFbnVtZXJhYmxlKFYpIHtcbiAgdmFyIFAgPSB0b1ByaW1pdGl2ZShWLCB0cnVlKTtcbiAgdmFyIGVudW1lcmFibGUgPSBuYXRpdmVQcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHRoaXMsIFApO1xuICBpZiAodGhpcyA9PT0gT2JqZWN0UHJvdG90eXBlICYmIGhhcyhBbGxTeW1ib2xzLCBQKSAmJiAhaGFzKE9iamVjdFByb3RvdHlwZVN5bWJvbHMsIFApKSByZXR1cm4gZmFsc2U7XG4gIHJldHVybiBlbnVtZXJhYmxlIHx8ICFoYXModGhpcywgUCkgfHwgIWhhcyhBbGxTeW1ib2xzLCBQKSB8fCBoYXModGhpcywgSElEREVOKSAmJiB0aGlzW0hJRERFTl1bUF0gPyBlbnVtZXJhYmxlIDogdHJ1ZTtcbn07XG5cbnZhciAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApIHtcbiAgdmFyIGl0ID0gdG9JbmRleGVkT2JqZWN0KE8pO1xuICB2YXIga2V5ID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGlmIChpdCA9PT0gT2JqZWN0UHJvdG90eXBlICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICFoYXMoT2JqZWN0UHJvdG90eXBlU3ltYm9scywga2V5KSkgcmV0dXJuO1xuICB2YXIgZGVzY3JpcHRvciA9IG5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvcihpdCwga2V5KTtcbiAgaWYgKGRlc2NyaXB0b3IgJiYgaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIShoYXMoaXQsIEhJRERFTikgJiYgaXRbSElEREVOXVtrZXldKSkge1xuICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IHRydWU7XG4gIH1cbiAgcmV0dXJuIGRlc2NyaXB0b3I7XG59O1xuXG52YXIgJGdldE93blByb3BlcnR5TmFtZXMgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKE8pIHtcbiAgdmFyIG5hbWVzID0gbmF0aXZlR2V0T3duUHJvcGVydHlOYW1lcyh0b0luZGV4ZWRPYmplY3QoTykpO1xuICB2YXIgcmVzdWx0ID0gW107XG4gICRmb3JFYWNoKG5hbWVzLCBmdW5jdGlvbiAoa2V5KSB7XG4gICAgaWYgKCFoYXMoQWxsU3ltYm9scywga2V5KSAmJiAhaGFzKGhpZGRlbktleXMsIGtleSkpIHJlc3VsdC5wdXNoKGtleSk7XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufTtcblxudmFyICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoTykge1xuICB2YXIgSVNfT0JKRUNUX1BST1RPVFlQRSA9IE8gPT09IE9iamVjdFByb3RvdHlwZTtcbiAgdmFyIG5hbWVzID0gbmF0aXZlR2V0T3duUHJvcGVydHlOYW1lcyhJU19PQkpFQ1RfUFJPVE9UWVBFID8gT2JqZWN0UHJvdG90eXBlU3ltYm9scyA6IHRvSW5kZXhlZE9iamVjdChPKSk7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgJGZvckVhY2gobmFtZXMsIGZ1bmN0aW9uIChrZXkpIHtcbiAgICBpZiAoaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgKCFJU19PQkpFQ1RfUFJPVE9UWVBFIHx8IGhhcyhPYmplY3RQcm90b3R5cGUsIGtleSkpKSB7XG4gICAgICByZXN1bHQucHVzaChBbGxTeW1ib2xzW2tleV0pO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG4vLyBgU3ltYm9sYCBjb25zdHJ1Y3RvclxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zeW1ib2wtY29uc3RydWN0b3JcbmlmICghTkFUSVZFX1NZTUJPTCkge1xuICAkU3ltYm9sID0gZnVuY3Rpb24gU3ltYm9sKCkge1xuICAgIGlmICh0aGlzIGluc3RhbmNlb2YgJFN5bWJvbCkgdGhyb3cgVHlwZUVycm9yKCdTeW1ib2wgaXMgbm90IGEgY29uc3RydWN0b3InKTtcbiAgICB2YXIgZGVzY3JpcHRpb24gPSAhYXJndW1lbnRzLmxlbmd0aCB8fCBhcmd1bWVudHNbMF0gPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IFN0cmluZyhhcmd1bWVudHNbMF0pO1xuICAgIHZhciB0YWcgPSB1aWQoZGVzY3JpcHRpb24pO1xuICAgIHZhciBzZXR0ZXIgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIGlmICh0aGlzID09PSBPYmplY3RQcm90b3R5cGUpIHNldHRlci5jYWxsKE9iamVjdFByb3RvdHlwZVN5bWJvbHMsIHZhbHVlKTtcbiAgICAgIGlmIChoYXModGhpcywgSElEREVOKSAmJiBoYXModGhpc1tISURERU5dLCB0YWcpKSB0aGlzW0hJRERFTl1bdGFnXSA9IGZhbHNlO1xuICAgICAgc2V0U3ltYm9sRGVzY3JpcHRvcih0aGlzLCB0YWcsIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigxLCB2YWx1ZSkpO1xuICAgIH07XG4gICAgaWYgKERFU0NSSVBUT1JTICYmIFVTRV9TRVRURVIpIHNldFN5bWJvbERlc2NyaXB0b3IoT2JqZWN0UHJvdG90eXBlLCB0YWcsIHsgY29uZmlndXJhYmxlOiB0cnVlLCBzZXQ6IHNldHRlciB9KTtcbiAgICByZXR1cm4gd3JhcCh0YWcsIGRlc2NyaXB0aW9uKTtcbiAgfTtcblxuICByZWRlZmluZSgkU3ltYm9sW1BST1RPVFlQRV0sICd0b1N0cmluZycsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpLnRhZztcbiAgfSk7XG5cbiAgcmVkZWZpbmUoJFN5bWJvbCwgJ3dpdGhvdXRTZXR0ZXInLCBmdW5jdGlvbiAoZGVzY3JpcHRpb24pIHtcbiAgICByZXR1cm4gd3JhcCh1aWQoZGVzY3JpcHRpb24pLCBkZXNjcmlwdGlvbik7XG4gIH0pO1xuXG4gIHByb3BlcnR5SXNFbnVtZXJhYmxlTW9kdWxlLmYgPSAkcHJvcGVydHlJc0VudW1lcmFibGU7XG4gIGRlZmluZVByb3BlcnR5TW9kdWxlLmYgPSAkZGVmaW5lUHJvcGVydHk7XG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZS5mID0gJGdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbiAgZ2V0T3duUHJvcGVydHlOYW1lc01vZHVsZS5mID0gZ2V0T3duUHJvcGVydHlOYW1lc0V4dGVybmFsLmYgPSAkZ2V0T3duUHJvcGVydHlOYW1lcztcbiAgZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlLmYgPSAkZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuXG4gIHdyYXBwZWRXZWxsS25vd25TeW1ib2xNb2R1bGUuZiA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgcmV0dXJuIHdyYXAod2VsbEtub3duU3ltYm9sKG5hbWUpLCBuYW1lKTtcbiAgfTtcblxuICBpZiAoREVTQ1JJUFRPUlMpIHtcbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1TeW1ib2wtZGVzY3JpcHRpb25cbiAgICBuYXRpdmVEZWZpbmVQcm9wZXJ0eSgkU3ltYm9sW1BST1RPVFlQRV0sICdkZXNjcmlwdGlvbicsIHtcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIGdldDogZnVuY3Rpb24gZGVzY3JpcHRpb24oKSB7XG4gICAgICAgIHJldHVybiBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpLmRlc2NyaXB0aW9uO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGlmICghSVNfUFVSRSkge1xuICAgICAgcmVkZWZpbmUoT2JqZWN0UHJvdG90eXBlLCAncHJvcGVydHlJc0VudW1lcmFibGUnLCAkcHJvcGVydHlJc0VudW1lcmFibGUsIHsgdW5zYWZlOiB0cnVlIH0pO1xuICAgIH1cbiAgfVxufVxuXG4kKHsgZ2xvYmFsOiB0cnVlLCB3cmFwOiB0cnVlLCBmb3JjZWQ6ICFOQVRJVkVfU1lNQk9MLCBzaGFtOiAhTkFUSVZFX1NZTUJPTCB9LCB7XG4gIFN5bWJvbDogJFN5bWJvbFxufSk7XG5cbiRmb3JFYWNoKG9iamVjdEtleXMoV2VsbEtub3duU3ltYm9sc1N0b3JlKSwgZnVuY3Rpb24gKG5hbWUpIHtcbiAgZGVmaW5lV2VsbEtub3duU3ltYm9sKG5hbWUpO1xufSk7XG5cbiQoeyB0YXJnZXQ6IFNZTUJPTCwgc3RhdDogdHJ1ZSwgZm9yY2VkOiAhTkFUSVZFX1NZTUJPTCB9LCB7XG4gIC8vIGBTeW1ib2wuZm9yYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zeW1ib2wuZm9yXG4gICdmb3InOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgdmFyIHN0cmluZyA9IFN0cmluZyhrZXkpO1xuICAgIGlmIChoYXMoU3RyaW5nVG9TeW1ib2xSZWdpc3RyeSwgc3RyaW5nKSkgcmV0dXJuIFN0cmluZ1RvU3ltYm9sUmVnaXN0cnlbc3RyaW5nXTtcbiAgICB2YXIgc3ltYm9sID0gJFN5bWJvbChzdHJpbmcpO1xuICAgIFN0cmluZ1RvU3ltYm9sUmVnaXN0cnlbc3RyaW5nXSA9IHN5bWJvbDtcbiAgICBTeW1ib2xUb1N0cmluZ1JlZ2lzdHJ5W3N5bWJvbF0gPSBzdHJpbmc7XG4gICAgcmV0dXJuIHN5bWJvbDtcbiAgfSxcbiAgLy8gYFN5bWJvbC5rZXlGb3JgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN5bWJvbC5rZXlmb3JcbiAga2V5Rm9yOiBmdW5jdGlvbiBrZXlGb3Ioc3ltKSB7XG4gICAgaWYgKCFpc1N5bWJvbChzeW0pKSB0aHJvdyBUeXBlRXJyb3Ioc3ltICsgJyBpcyBub3QgYSBzeW1ib2wnKTtcbiAgICBpZiAoaGFzKFN5bWJvbFRvU3RyaW5nUmVnaXN0cnksIHN5bSkpIHJldHVybiBTeW1ib2xUb1N0cmluZ1JlZ2lzdHJ5W3N5bV07XG4gIH0sXG4gIHVzZVNldHRlcjogZnVuY3Rpb24gKCkgeyBVU0VfU0VUVEVSID0gdHJ1ZTsgfSxcbiAgdXNlU2ltcGxlOiBmdW5jdGlvbiAoKSB7IFVTRV9TRVRURVIgPSBmYWxzZTsgfVxufSk7XG5cbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6ICFOQVRJVkVfU1lNQk9MLCBzaGFtOiAhREVTQ1JJUFRPUlMgfSwge1xuICAvLyBgT2JqZWN0LmNyZWF0ZWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmNyZWF0ZVxuICBjcmVhdGU6ICRjcmVhdGUsXG4gIC8vIGBPYmplY3QuZGVmaW5lUHJvcGVydHlgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5kZWZpbmVwcm9wZXJ0eVxuICBkZWZpbmVQcm9wZXJ0eTogJGRlZmluZVByb3BlcnR5LFxuICAvLyBgT2JqZWN0LmRlZmluZVByb3BlcnRpZXNgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5kZWZpbmVwcm9wZXJ0aWVzXG4gIGRlZmluZVByb3BlcnRpZXM6ICRkZWZpbmVQcm9wZXJ0aWVzLFxuICAvLyBgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcmAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmdldG93bnByb3BlcnR5ZGVzY3JpcHRvcnNcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yXG59KTtcblxuJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogIU5BVElWRV9TWU1CT0wgfSwge1xuICAvLyBgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXNgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5nZXRvd25wcm9wZXJ0eW5hbWVzXG4gIGdldE93blByb3BlcnR5TmFtZXM6ICRnZXRPd25Qcm9wZXJ0eU5hbWVzLFxuICAvLyBgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9sc2AgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmdldG93bnByb3BlcnR5c3ltYm9sc1xuICBnZXRPd25Qcm9wZXJ0eVN5bWJvbHM6ICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHNcbn0pO1xuXG4vLyBDaHJvbWUgMzggYW5kIDM5IGBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzYCBmYWlscyBvbiBwcmltaXRpdmVzXG4vLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zNDQzXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBmYWlscyhmdW5jdGlvbiAoKSB7IGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZS5mKDEpOyB9KSB9LCB7XG4gIGdldE93blByb3BlcnR5U3ltYm9sczogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGl0KSB7XG4gICAgcmV0dXJuIGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZS5mKHRvT2JqZWN0KGl0KSk7XG4gIH1cbn0pO1xuXG4vLyBgSlNPTi5zdHJpbmdpZnlgIG1ldGhvZCBiZWhhdmlvciB3aXRoIHN5bWJvbHNcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtanNvbi5zdHJpbmdpZnlcbmlmICgkc3RyaW5naWZ5KSB7XG4gIHZhciBGT1JDRURfSlNPTl9TVFJJTkdJRlkgPSAhTkFUSVZFX1NZTUJPTCB8fCBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHN5bWJvbCA9ICRTeW1ib2woKTtcbiAgICAvLyBNUyBFZGdlIGNvbnZlcnRzIHN5bWJvbCB2YWx1ZXMgdG8gSlNPTiBhcyB7fVxuICAgIHJldHVybiAkc3RyaW5naWZ5KFtzeW1ib2xdKSAhPSAnW251bGxdJ1xuICAgICAgLy8gV2ViS2l0IGNvbnZlcnRzIHN5bWJvbCB2YWx1ZXMgdG8gSlNPTiBhcyBudWxsXG4gICAgICB8fCAkc3RyaW5naWZ5KHsgYTogc3ltYm9sIH0pICE9ICd7fSdcbiAgICAgIC8vIFY4IHRocm93cyBvbiBib3hlZCBzeW1ib2xzXG4gICAgICB8fCAkc3RyaW5naWZ5KE9iamVjdChzeW1ib2wpKSAhPSAne30nO1xuICB9KTtcblxuICAkKHsgdGFyZ2V0OiAnSlNPTicsIHN0YXQ6IHRydWUsIGZvcmNlZDogRk9SQ0VEX0pTT05fU1RSSU5HSUZZIH0sIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnMgLS0gcmVxdWlyZWQgZm9yIGAubGVuZ3RoYFxuICAgIHN0cmluZ2lmeTogZnVuY3Rpb24gc3RyaW5naWZ5KGl0LCByZXBsYWNlciwgc3BhY2UpIHtcbiAgICAgIHZhciBhcmdzID0gW2l0XTtcbiAgICAgIHZhciBpbmRleCA9IDE7XG4gICAgICB2YXIgJHJlcGxhY2VyO1xuICAgICAgd2hpbGUgKGFyZ3VtZW50cy5sZW5ndGggPiBpbmRleCkgYXJncy5wdXNoKGFyZ3VtZW50c1tpbmRleCsrXSk7XG4gICAgICAkcmVwbGFjZXIgPSByZXBsYWNlcjtcbiAgICAgIGlmICghaXNPYmplY3QocmVwbGFjZXIpICYmIGl0ID09PSB1bmRlZmluZWQgfHwgaXNTeW1ib2woaXQpKSByZXR1cm47IC8vIElFOCByZXR1cm5zIHN0cmluZyBvbiB1bmRlZmluZWRcbiAgICAgIGlmICghaXNBcnJheShyZXBsYWNlcikpIHJlcGxhY2VyID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiAkcmVwbGFjZXIgPT0gJ2Z1bmN0aW9uJykgdmFsdWUgPSAkcmVwbGFjZXIuY2FsbCh0aGlzLCBrZXksIHZhbHVlKTtcbiAgICAgICAgaWYgKCFpc1N5bWJvbCh2YWx1ZSkpIHJldHVybiB2YWx1ZTtcbiAgICAgIH07XG4gICAgICBhcmdzWzFdID0gcmVwbGFjZXI7XG4gICAgICByZXR1cm4gJHN0cmluZ2lmeS5hcHBseShudWxsLCBhcmdzKTtcbiAgICB9XG4gIH0pO1xufVxuXG4vLyBgU3ltYm9sLnByb3RvdHlwZVtAQHRvUHJpbWl0aXZlXWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN5bWJvbC5wcm90b3R5cGUtQEB0b3ByaW1pdGl2ZVxuaWYgKCEkU3ltYm9sW1BST1RPVFlQRV1bVE9fUFJJTUlUSVZFXSkge1xuICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoJFN5bWJvbFtQUk9UT1RZUEVdLCBUT19QUklNSVRJVkUsICRTeW1ib2xbUFJPVE9UWVBFXS52YWx1ZU9mKTtcbn1cbi8vIGBTeW1ib2wucHJvdG90eXBlW0BAdG9TdHJpbmdUYWddYCBwcm9wZXJ0eVxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zeW1ib2wucHJvdG90eXBlLUBAdG9zdHJpbmd0YWdcbnNldFRvU3RyaW5nVGFnKCRTeW1ib2wsIFNZTUJPTCk7XG5cbmhpZGRlbktleXNbSElEREVOXSA9IHRydWU7XG4iLCJ2YXIgZGVmaW5lV2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS13ZWxsLWtub3duLXN5bWJvbCcpO1xuXG4vLyBgU3ltYm9sLm1hdGNoQWxsYCB3ZWxsLWtub3duIHN5bWJvbFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zeW1ib2wubWF0Y2hhbGxcbmRlZmluZVdlbGxLbm93blN5bWJvbCgnbWF0Y2hBbGwnKTtcbiIsInZhciBkZWZpbmVXZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLXdlbGwta25vd24tc3ltYm9sJyk7XG5cbi8vIGBTeW1ib2wubWF0Y2hgIHdlbGwta25vd24gc3ltYm9sXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN5bWJvbC5tYXRjaFxuZGVmaW5lV2VsbEtub3duU3ltYm9sKCdtYXRjaCcpO1xuIiwidmFyIGRlZmluZVdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtd2VsbC1rbm93bi1zeW1ib2wnKTtcblxuLy8gYFN5bWJvbC5yZXBsYWNlYCB3ZWxsLWtub3duIHN5bWJvbFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zeW1ib2wucmVwbGFjZVxuZGVmaW5lV2VsbEtub3duU3ltYm9sKCdyZXBsYWNlJyk7XG4iLCJ2YXIgZGVmaW5lV2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS13ZWxsLWtub3duLXN5bWJvbCcpO1xuXG4vLyBgU3ltYm9sLnNlYXJjaGAgd2VsbC1rbm93biBzeW1ib2xcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3ltYm9sLnNlYXJjaFxuZGVmaW5lV2VsbEtub3duU3ltYm9sKCdzZWFyY2gnKTtcbiIsInZhciBkZWZpbmVXZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLXdlbGwta25vd24tc3ltYm9sJyk7XG5cbi8vIGBTeW1ib2wuc3BlY2llc2Agd2VsbC1rbm93biBzeW1ib2xcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3ltYm9sLnNwZWNpZXNcbmRlZmluZVdlbGxLbm93blN5bWJvbCgnc3BlY2llcycpO1xuIiwidmFyIGRlZmluZVdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtd2VsbC1rbm93bi1zeW1ib2wnKTtcblxuLy8gYFN5bWJvbC5zcGxpdGAgd2VsbC1rbm93biBzeW1ib2xcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3ltYm9sLnNwbGl0XG5kZWZpbmVXZWxsS25vd25TeW1ib2woJ3NwbGl0Jyk7XG4iLCJ2YXIgZGVmaW5lV2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS13ZWxsLWtub3duLXN5bWJvbCcpO1xuXG4vLyBgU3ltYm9sLnRvUHJpbWl0aXZlYCB3ZWxsLWtub3duIHN5bWJvbFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zeW1ib2wudG9wcmltaXRpdmVcbmRlZmluZVdlbGxLbm93blN5bWJvbCgndG9QcmltaXRpdmUnKTtcbiIsInZhciBkZWZpbmVXZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLXdlbGwta25vd24tc3ltYm9sJyk7XG5cbi8vIGBTeW1ib2wudG9TdHJpbmdUYWdgIHdlbGwta25vd24gc3ltYm9sXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN5bWJvbC50b3N0cmluZ3RhZ1xuZGVmaW5lV2VsbEtub3duU3ltYm9sKCd0b1N0cmluZ1RhZycpO1xuIiwidmFyIGRlZmluZVdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtd2VsbC1rbm93bi1zeW1ib2wnKTtcblxuLy8gYFN5bWJvbC51bnNjb3BhYmxlc2Agd2VsbC1rbm93biBzeW1ib2xcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3ltYm9sLnVuc2NvcGFibGVzXG5kZWZpbmVXZWxsS25vd25TeW1ib2woJ3Vuc2NvcGFibGVzJyk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgQXJyYXlCdWZmZXJWaWV3Q29yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlJyk7XG52YXIgJGNvcHlXaXRoaW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktY29weS13aXRoaW4nKTtcblxudmFyIGFUeXBlZEFycmF5ID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5hVHlwZWRBcnJheTtcbnZhciBleHBvcnRUeXBlZEFycmF5TWV0aG9kID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5leHBvcnRUeXBlZEFycmF5TWV0aG9kO1xuXG4vLyBgJVR5cGVkQXJyYXklLnByb3RvdHlwZS5jb3B5V2l0aGluYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJXR5cGVkYXJyYXklLnByb3RvdHlwZS5jb3B5d2l0aGluXG5leHBvcnRUeXBlZEFycmF5TWV0aG9kKCdjb3B5V2l0aGluJywgZnVuY3Rpb24gY29weVdpdGhpbih0YXJnZXQsIHN0YXJ0IC8qICwgZW5kICovKSB7XG4gIHJldHVybiAkY29weVdpdGhpbi5jYWxsKGFUeXBlZEFycmF5KHRoaXMpLCB0YXJnZXQsIHN0YXJ0LCBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZCk7XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBBcnJheUJ1ZmZlclZpZXdDb3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci12aWV3LWNvcmUnKTtcbnZhciAkZXZlcnkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uJykuZXZlcnk7XG5cbnZhciBhVHlwZWRBcnJheSA9IEFycmF5QnVmZmVyVmlld0NvcmUuYVR5cGVkQXJyYXk7XG52YXIgZXhwb3J0VHlwZWRBcnJheU1ldGhvZCA9IEFycmF5QnVmZmVyVmlld0NvcmUuZXhwb3J0VHlwZWRBcnJheU1ldGhvZDtcblxuLy8gYCVUeXBlZEFycmF5JS5wcm90b3R5cGUuZXZlcnlgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0ldHlwZWRhcnJheSUucHJvdG90eXBlLmV2ZXJ5XG5leHBvcnRUeXBlZEFycmF5TWV0aG9kKCdldmVyeScsIGZ1bmN0aW9uIGV2ZXJ5KGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gIHJldHVybiAkZXZlcnkoYVR5cGVkQXJyYXkodGhpcyksIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIEFycmF5QnVmZmVyVmlld0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLXZpZXctY29yZScpO1xudmFyICRmaWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWZpbGwnKTtcblxudmFyIGFUeXBlZEFycmF5ID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5hVHlwZWRBcnJheTtcbnZhciBleHBvcnRUeXBlZEFycmF5TWV0aG9kID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5leHBvcnRUeXBlZEFycmF5TWV0aG9kO1xuXG4vLyBgJVR5cGVkQXJyYXklLnByb3RvdHlwZS5maWxsYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJXR5cGVkYXJyYXklLnByb3RvdHlwZS5maWxsXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnMgLS0gcmVxdWlyZWQgZm9yIGAubGVuZ3RoYFxuZXhwb3J0VHlwZWRBcnJheU1ldGhvZCgnZmlsbCcsIGZ1bmN0aW9uIGZpbGwodmFsdWUgLyogLCBzdGFydCwgZW5kICovKSB7XG4gIHJldHVybiAkZmlsbC5hcHBseShhVHlwZWRBcnJheSh0aGlzKSwgYXJndW1lbnRzKTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIEFycmF5QnVmZmVyVmlld0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLXZpZXctY29yZScpO1xudmFyICRmaWx0ZXIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uJykuZmlsdGVyO1xudmFyIGZyb21TcGVjaWVzQW5kTGlzdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90eXBlZC1hcnJheS1mcm9tLXNwZWNpZXMtYW5kLWxpc3QnKTtcblxudmFyIGFUeXBlZEFycmF5ID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5hVHlwZWRBcnJheTtcbnZhciBleHBvcnRUeXBlZEFycmF5TWV0aG9kID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5leHBvcnRUeXBlZEFycmF5TWV0aG9kO1xuXG4vLyBgJVR5cGVkQXJyYXklLnByb3RvdHlwZS5maWx0ZXJgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0ldHlwZWRhcnJheSUucHJvdG90eXBlLmZpbHRlclxuZXhwb3J0VHlwZWRBcnJheU1ldGhvZCgnZmlsdGVyJywgZnVuY3Rpb24gZmlsdGVyKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gIHZhciBsaXN0ID0gJGZpbHRlcihhVHlwZWRBcnJheSh0aGlzKSwgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICByZXR1cm4gZnJvbVNwZWNpZXNBbmRMaXN0KHRoaXMsIGxpc3QpO1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgQXJyYXlCdWZmZXJWaWV3Q29yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlJyk7XG52YXIgJGZpbmRJbmRleCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pdGVyYXRpb24nKS5maW5kSW5kZXg7XG5cbnZhciBhVHlwZWRBcnJheSA9IEFycmF5QnVmZmVyVmlld0NvcmUuYVR5cGVkQXJyYXk7XG52YXIgZXhwb3J0VHlwZWRBcnJheU1ldGhvZCA9IEFycmF5QnVmZmVyVmlld0NvcmUuZXhwb3J0VHlwZWRBcnJheU1ldGhvZDtcblxuLy8gYCVUeXBlZEFycmF5JS5wcm90b3R5cGUuZmluZEluZGV4YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJXR5cGVkYXJyYXklLnByb3RvdHlwZS5maW5kaW5kZXhcbmV4cG9ydFR5cGVkQXJyYXlNZXRob2QoJ2ZpbmRJbmRleCcsIGZ1bmN0aW9uIGZpbmRJbmRleChwcmVkaWNhdGUgLyogLCB0aGlzQXJnICovKSB7XG4gIHJldHVybiAkZmluZEluZGV4KGFUeXBlZEFycmF5KHRoaXMpLCBwcmVkaWNhdGUsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIEFycmF5QnVmZmVyVmlld0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLXZpZXctY29yZScpO1xudmFyICRmaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWl0ZXJhdGlvbicpLmZpbmQ7XG5cbnZhciBhVHlwZWRBcnJheSA9IEFycmF5QnVmZmVyVmlld0NvcmUuYVR5cGVkQXJyYXk7XG52YXIgZXhwb3J0VHlwZWRBcnJheU1ldGhvZCA9IEFycmF5QnVmZmVyVmlld0NvcmUuZXhwb3J0VHlwZWRBcnJheU1ldGhvZDtcblxuLy8gYCVUeXBlZEFycmF5JS5wcm90b3R5cGUuZmluZGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLSV0eXBlZGFycmF5JS5wcm90b3R5cGUuZmluZFxuZXhwb3J0VHlwZWRBcnJheU1ldGhvZCgnZmluZCcsIGZ1bmN0aW9uIGZpbmQocHJlZGljYXRlIC8qICwgdGhpc0FyZyAqLykge1xuICByZXR1cm4gJGZpbmQoYVR5cGVkQXJyYXkodGhpcyksIHByZWRpY2F0ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xufSk7XG4iLCJ2YXIgY3JlYXRlVHlwZWRBcnJheUNvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3R5cGVkLWFycmF5LWNvbnN0cnVjdG9yJyk7XG5cbi8vIGBGbG9hdDMyQXJyYXlgIGNvbnN0cnVjdG9yXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXR5cGVkYXJyYXktb2JqZWN0c1xuY3JlYXRlVHlwZWRBcnJheUNvbnN0cnVjdG9yKCdGbG9hdDMyJywgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIEZsb2F0MzJBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJ2YXIgY3JlYXRlVHlwZWRBcnJheUNvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3R5cGVkLWFycmF5LWNvbnN0cnVjdG9yJyk7XG5cbi8vIGBGbG9hdDY0QXJyYXlgIGNvbnN0cnVjdG9yXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXR5cGVkYXJyYXktb2JqZWN0c1xuY3JlYXRlVHlwZWRBcnJheUNvbnN0cnVjdG9yKCdGbG9hdDY0JywgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIEZsb2F0NjRBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgQXJyYXlCdWZmZXJWaWV3Q29yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlJyk7XG52YXIgJGZvckVhY2ggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uJykuZm9yRWFjaDtcblxudmFyIGFUeXBlZEFycmF5ID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5hVHlwZWRBcnJheTtcbnZhciBleHBvcnRUeXBlZEFycmF5TWV0aG9kID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5leHBvcnRUeXBlZEFycmF5TWV0aG9kO1xuXG4vLyBgJVR5cGVkQXJyYXklLnByb3RvdHlwZS5mb3JFYWNoYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJXR5cGVkYXJyYXklLnByb3RvdHlwZS5mb3JlYWNoXG5leHBvcnRUeXBlZEFycmF5TWV0aG9kKCdmb3JFYWNoJywgZnVuY3Rpb24gZm9yRWFjaChjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAkZm9yRWFjaChhVHlwZWRBcnJheSh0aGlzKSwgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgVFlQRURfQVJSQVlTX0NPTlNUUlVDVE9SU19SRVFVSVJFU19XUkFQUEVSUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90eXBlZC1hcnJheS1jb25zdHJ1Y3RvcnMtcmVxdWlyZS13cmFwcGVycycpO1xudmFyIGV4cG9ydFR5cGVkQXJyYXlTdGF0aWNNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLXZpZXctY29yZScpLmV4cG9ydFR5cGVkQXJyYXlTdGF0aWNNZXRob2Q7XG52YXIgdHlwZWRBcnJheUZyb20gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdHlwZWQtYXJyYXktZnJvbScpO1xuXG4vLyBgJVR5cGVkQXJyYXklLmZyb21gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0ldHlwZWRhcnJheSUuZnJvbVxuZXhwb3J0VHlwZWRBcnJheVN0YXRpY01ldGhvZCgnZnJvbScsIHR5cGVkQXJyYXlGcm9tLCBUWVBFRF9BUlJBWVNfQ09OU1RSVUNUT1JTX1JFUVVJUkVTX1dSQVBQRVJTKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBBcnJheUJ1ZmZlclZpZXdDb3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci12aWV3LWNvcmUnKTtcbnZhciAkaW5jbHVkZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaW5jbHVkZXMnKS5pbmNsdWRlcztcblxudmFyIGFUeXBlZEFycmF5ID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5hVHlwZWRBcnJheTtcbnZhciBleHBvcnRUeXBlZEFycmF5TWV0aG9kID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5leHBvcnRUeXBlZEFycmF5TWV0aG9kO1xuXG4vLyBgJVR5cGVkQXJyYXklLnByb3RvdHlwZS5pbmNsdWRlc2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLSV0eXBlZGFycmF5JS5wcm90b3R5cGUuaW5jbHVkZXNcbmV4cG9ydFR5cGVkQXJyYXlNZXRob2QoJ2luY2x1ZGVzJywgZnVuY3Rpb24gaW5jbHVkZXMoc2VhcmNoRWxlbWVudCAvKiAsIGZyb21JbmRleCAqLykge1xuICByZXR1cm4gJGluY2x1ZGVzKGFUeXBlZEFycmF5KHRoaXMpLCBzZWFyY2hFbGVtZW50LCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBBcnJheUJ1ZmZlclZpZXdDb3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci12aWV3LWNvcmUnKTtcbnZhciAkaW5kZXhPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pbmNsdWRlcycpLmluZGV4T2Y7XG5cbnZhciBhVHlwZWRBcnJheSA9IEFycmF5QnVmZmVyVmlld0NvcmUuYVR5cGVkQXJyYXk7XG52YXIgZXhwb3J0VHlwZWRBcnJheU1ldGhvZCA9IEFycmF5QnVmZmVyVmlld0NvcmUuZXhwb3J0VHlwZWRBcnJheU1ldGhvZDtcblxuLy8gYCVUeXBlZEFycmF5JS5wcm90b3R5cGUuaW5kZXhPZmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLSV0eXBlZGFycmF5JS5wcm90b3R5cGUuaW5kZXhvZlxuZXhwb3J0VHlwZWRBcnJheU1ldGhvZCgnaW5kZXhPZicsIGZ1bmN0aW9uIGluZGV4T2Yoc2VhcmNoRWxlbWVudCAvKiAsIGZyb21JbmRleCAqLykge1xuICByZXR1cm4gJGluZGV4T2YoYVR5cGVkQXJyYXkodGhpcyksIHNlYXJjaEVsZW1lbnQsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbn0pO1xuIiwidmFyIGNyZWF0ZVR5cGVkQXJyYXlDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90eXBlZC1hcnJheS1jb25zdHJ1Y3RvcicpO1xuXG4vLyBgSW50MTZBcnJheWAgY29uc3RydWN0b3Jcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtdHlwZWRhcnJheS1vYmplY3RzXG5jcmVhdGVUeXBlZEFycmF5Q29uc3RydWN0b3IoJ0ludDE2JywgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIEludDE2QXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuIiwidmFyIGNyZWF0ZVR5cGVkQXJyYXlDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90eXBlZC1hcnJheS1jb25zdHJ1Y3RvcicpO1xuXG4vLyBgSW50MzJBcnJheWAgY29uc3RydWN0b3Jcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtdHlwZWRhcnJheS1vYmplY3RzXG5jcmVhdGVUeXBlZEFycmF5Q29uc3RydWN0b3IoJ0ludDMyJywgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIEludDMyQXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuIiwidmFyIGNyZWF0ZVR5cGVkQXJyYXlDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90eXBlZC1hcnJheS1jb25zdHJ1Y3RvcicpO1xuXG4vLyBgSW50OEFycmF5YCBjb25zdHJ1Y3RvclxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy10eXBlZGFycmF5LW9iamVjdHNcbmNyZWF0ZVR5cGVkQXJyYXlDb25zdHJ1Y3RvcignSW50OCcsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBJbnQ4QXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBBcnJheUJ1ZmZlclZpZXdDb3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci12aWV3LWNvcmUnKTtcbnZhciBBcnJheUl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4uL21vZHVsZXMvZXMuYXJyYXkuaXRlcmF0b3InKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xudmFyIFVpbnQ4QXJyYXkgPSBnbG9iYWwuVWludDhBcnJheTtcbnZhciBhcnJheVZhbHVlcyA9IEFycmF5SXRlcmF0b3JzLnZhbHVlcztcbnZhciBhcnJheUtleXMgPSBBcnJheUl0ZXJhdG9ycy5rZXlzO1xudmFyIGFycmF5RW50cmllcyA9IEFycmF5SXRlcmF0b3JzLmVudHJpZXM7XG52YXIgYVR5cGVkQXJyYXkgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmFUeXBlZEFycmF5O1xudmFyIGV4cG9ydFR5cGVkQXJyYXlNZXRob2QgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmV4cG9ydFR5cGVkQXJyYXlNZXRob2Q7XG52YXIgbmF0aXZlVHlwZWRBcnJheUl0ZXJhdG9yID0gVWludDhBcnJheSAmJiBVaW50OEFycmF5LnByb3RvdHlwZVtJVEVSQVRPUl07XG5cbnZhciBDT1JSRUNUX0lURVJfTkFNRSA9ICEhbmF0aXZlVHlwZWRBcnJheUl0ZXJhdG9yXG4gICYmIChuYXRpdmVUeXBlZEFycmF5SXRlcmF0b3IubmFtZSA9PSAndmFsdWVzJyB8fCBuYXRpdmVUeXBlZEFycmF5SXRlcmF0b3IubmFtZSA9PSB1bmRlZmluZWQpO1xuXG52YXIgdHlwZWRBcnJheVZhbHVlcyA9IGZ1bmN0aW9uIHZhbHVlcygpIHtcbiAgcmV0dXJuIGFycmF5VmFsdWVzLmNhbGwoYVR5cGVkQXJyYXkodGhpcykpO1xufTtcblxuLy8gYCVUeXBlZEFycmF5JS5wcm90b3R5cGUuZW50cmllc2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLSV0eXBlZGFycmF5JS5wcm90b3R5cGUuZW50cmllc1xuZXhwb3J0VHlwZWRBcnJheU1ldGhvZCgnZW50cmllcycsIGZ1bmN0aW9uIGVudHJpZXMoKSB7XG4gIHJldHVybiBhcnJheUVudHJpZXMuY2FsbChhVHlwZWRBcnJheSh0aGlzKSk7XG59KTtcbi8vIGAlVHlwZWRBcnJheSUucHJvdG90eXBlLmtleXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0ldHlwZWRhcnJheSUucHJvdG90eXBlLmtleXNcbmV4cG9ydFR5cGVkQXJyYXlNZXRob2QoJ2tleXMnLCBmdW5jdGlvbiBrZXlzKCkge1xuICByZXR1cm4gYXJyYXlLZXlzLmNhbGwoYVR5cGVkQXJyYXkodGhpcykpO1xufSk7XG4vLyBgJVR5cGVkQXJyYXklLnByb3RvdHlwZS52YWx1ZXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0ldHlwZWRhcnJheSUucHJvdG90eXBlLnZhbHVlc1xuZXhwb3J0VHlwZWRBcnJheU1ldGhvZCgndmFsdWVzJywgdHlwZWRBcnJheVZhbHVlcywgIUNPUlJFQ1RfSVRFUl9OQU1FKTtcbi8vIGAlVHlwZWRBcnJheSUucHJvdG90eXBlW0BAaXRlcmF0b3JdYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJXR5cGVkYXJyYXklLnByb3RvdHlwZS1AQGl0ZXJhdG9yXG5leHBvcnRUeXBlZEFycmF5TWV0aG9kKElURVJBVE9SLCB0eXBlZEFycmF5VmFsdWVzLCAhQ09SUkVDVF9JVEVSX05BTUUpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIEFycmF5QnVmZmVyVmlld0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLXZpZXctY29yZScpO1xuXG52YXIgYVR5cGVkQXJyYXkgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmFUeXBlZEFycmF5O1xudmFyIGV4cG9ydFR5cGVkQXJyYXlNZXRob2QgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmV4cG9ydFR5cGVkQXJyYXlNZXRob2Q7XG52YXIgJGpvaW4gPSBbXS5qb2luO1xuXG4vLyBgJVR5cGVkQXJyYXklLnByb3RvdHlwZS5qb2luYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJXR5cGVkYXJyYXklLnByb3RvdHlwZS5qb2luXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnMgLS0gcmVxdWlyZWQgZm9yIGAubGVuZ3RoYFxuZXhwb3J0VHlwZWRBcnJheU1ldGhvZCgnam9pbicsIGZ1bmN0aW9uIGpvaW4oc2VwYXJhdG9yKSB7XG4gIHJldHVybiAkam9pbi5hcHBseShhVHlwZWRBcnJheSh0aGlzKSwgYXJndW1lbnRzKTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIEFycmF5QnVmZmVyVmlld0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLXZpZXctY29yZScpO1xudmFyICRsYXN0SW5kZXhPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1sYXN0LWluZGV4LW9mJyk7XG5cbnZhciBhVHlwZWRBcnJheSA9IEFycmF5QnVmZmVyVmlld0NvcmUuYVR5cGVkQXJyYXk7XG52YXIgZXhwb3J0VHlwZWRBcnJheU1ldGhvZCA9IEFycmF5QnVmZmVyVmlld0NvcmUuZXhwb3J0VHlwZWRBcnJheU1ldGhvZDtcblxuLy8gYCVUeXBlZEFycmF5JS5wcm90b3R5cGUubGFzdEluZGV4T2ZgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0ldHlwZWRhcnJheSUucHJvdG90eXBlLmxhc3RpbmRleG9mXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnMgLS0gcmVxdWlyZWQgZm9yIGAubGVuZ3RoYFxuZXhwb3J0VHlwZWRBcnJheU1ldGhvZCgnbGFzdEluZGV4T2YnLCBmdW5jdGlvbiBsYXN0SW5kZXhPZihzZWFyY2hFbGVtZW50IC8qICwgZnJvbUluZGV4ICovKSB7XG4gIHJldHVybiAkbGFzdEluZGV4T2YuYXBwbHkoYVR5cGVkQXJyYXkodGhpcyksIGFyZ3VtZW50cyk7XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBBcnJheUJ1ZmZlclZpZXdDb3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci12aWV3LWNvcmUnKTtcbnZhciAkbWFwID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWl0ZXJhdGlvbicpLm1hcDtcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xuXG52YXIgYVR5cGVkQXJyYXkgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmFUeXBlZEFycmF5O1xudmFyIGFUeXBlZEFycmF5Q29uc3RydWN0b3IgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmFUeXBlZEFycmF5Q29uc3RydWN0b3I7XG52YXIgZXhwb3J0VHlwZWRBcnJheU1ldGhvZCA9IEFycmF5QnVmZmVyVmlld0NvcmUuZXhwb3J0VHlwZWRBcnJheU1ldGhvZDtcblxuLy8gYCVUeXBlZEFycmF5JS5wcm90b3R5cGUubWFwYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJXR5cGVkYXJyYXklLnByb3RvdHlwZS5tYXBcbmV4cG9ydFR5cGVkQXJyYXlNZXRob2QoJ21hcCcsIGZ1bmN0aW9uIG1hcChtYXBmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgcmV0dXJuICRtYXAoYVR5cGVkQXJyYXkodGhpcyksIG1hcGZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgZnVuY3Rpb24gKE8sIGxlbmd0aCkge1xuICAgIHJldHVybiBuZXcgKGFUeXBlZEFycmF5Q29uc3RydWN0b3Ioc3BlY2llc0NvbnN0cnVjdG9yKE8sIE8uY29uc3RydWN0b3IpKSkobGVuZ3RoKTtcbiAgfSk7XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBBcnJheUJ1ZmZlclZpZXdDb3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci12aWV3LWNvcmUnKTtcbnZhciBUWVBFRF9BUlJBWVNfQ09OU1RSVUNUT1JTX1JFUVVJUkVTX1dSQVBQRVJTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3R5cGVkLWFycmF5LWNvbnN0cnVjdG9ycy1yZXF1aXJlLXdyYXBwZXJzJyk7XG5cbnZhciBhVHlwZWRBcnJheUNvbnN0cnVjdG9yID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5hVHlwZWRBcnJheUNvbnN0cnVjdG9yO1xudmFyIGV4cG9ydFR5cGVkQXJyYXlTdGF0aWNNZXRob2QgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmV4cG9ydFR5cGVkQXJyYXlTdGF0aWNNZXRob2Q7XG5cbi8vIGAlVHlwZWRBcnJheSUub2ZgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0ldHlwZWRhcnJheSUub2ZcbmV4cG9ydFR5cGVkQXJyYXlTdGF0aWNNZXRob2QoJ29mJywgZnVuY3Rpb24gb2YoLyogLi4uaXRlbXMgKi8pIHtcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gIHZhciByZXN1bHQgPSBuZXcgKGFUeXBlZEFycmF5Q29uc3RydWN0b3IodGhpcykpKGxlbmd0aCk7XG4gIHdoaWxlIChsZW5ndGggPiBpbmRleCkgcmVzdWx0W2luZGV4XSA9IGFyZ3VtZW50c1tpbmRleCsrXTtcbiAgcmV0dXJuIHJlc3VsdDtcbn0sIFRZUEVEX0FSUkFZU19DT05TVFJVQ1RPUlNfUkVRVUlSRVNfV1JBUFBFUlMpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIEFycmF5QnVmZmVyVmlld0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLXZpZXctY29yZScpO1xudmFyICRyZWR1Y2VSaWdodCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1yZWR1Y2UnKS5yaWdodDtcblxudmFyIGFUeXBlZEFycmF5ID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5hVHlwZWRBcnJheTtcbnZhciBleHBvcnRUeXBlZEFycmF5TWV0aG9kID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5leHBvcnRUeXBlZEFycmF5TWV0aG9kO1xuXG4vLyBgJVR5cGVkQXJyYXklLnByb3RvdHlwZS5yZWR1Y2VSaWNodGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLSV0eXBlZGFycmF5JS5wcm90b3R5cGUucmVkdWNlcmlnaHRcbmV4cG9ydFR5cGVkQXJyYXlNZXRob2QoJ3JlZHVjZVJpZ2h0JywgZnVuY3Rpb24gcmVkdWNlUmlnaHQoY2FsbGJhY2tmbiAvKiAsIGluaXRpYWxWYWx1ZSAqLykge1xuICByZXR1cm4gJHJlZHVjZVJpZ2h0KGFUeXBlZEFycmF5KHRoaXMpLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBBcnJheUJ1ZmZlclZpZXdDb3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci12aWV3LWNvcmUnKTtcbnZhciAkcmVkdWNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LXJlZHVjZScpLmxlZnQ7XG5cbnZhciBhVHlwZWRBcnJheSA9IEFycmF5QnVmZmVyVmlld0NvcmUuYVR5cGVkQXJyYXk7XG52YXIgZXhwb3J0VHlwZWRBcnJheU1ldGhvZCA9IEFycmF5QnVmZmVyVmlld0NvcmUuZXhwb3J0VHlwZWRBcnJheU1ldGhvZDtcblxuLy8gYCVUeXBlZEFycmF5JS5wcm90b3R5cGUucmVkdWNlYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJXR5cGVkYXJyYXklLnByb3RvdHlwZS5yZWR1Y2VcbmV4cG9ydFR5cGVkQXJyYXlNZXRob2QoJ3JlZHVjZScsIGZ1bmN0aW9uIHJlZHVjZShjYWxsYmFja2ZuIC8qICwgaW5pdGlhbFZhbHVlICovKSB7XG4gIHJldHVybiAkcmVkdWNlKGFUeXBlZEFycmF5KHRoaXMpLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBBcnJheUJ1ZmZlclZpZXdDb3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci12aWV3LWNvcmUnKTtcblxudmFyIGFUeXBlZEFycmF5ID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5hVHlwZWRBcnJheTtcbnZhciBleHBvcnRUeXBlZEFycmF5TWV0aG9kID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5leHBvcnRUeXBlZEFycmF5TWV0aG9kO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcblxuLy8gYCVUeXBlZEFycmF5JS5wcm90b3R5cGUucmV2ZXJzZWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLSV0eXBlZGFycmF5JS5wcm90b3R5cGUucmV2ZXJzZVxuZXhwb3J0VHlwZWRBcnJheU1ldGhvZCgncmV2ZXJzZScsIGZ1bmN0aW9uIHJldmVyc2UoKSB7XG4gIHZhciB0aGF0ID0gdGhpcztcbiAgdmFyIGxlbmd0aCA9IGFUeXBlZEFycmF5KHRoYXQpLmxlbmd0aDtcbiAgdmFyIG1pZGRsZSA9IGZsb29yKGxlbmd0aCAvIDIpO1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgdmFsdWU7XG4gIHdoaWxlIChpbmRleCA8IG1pZGRsZSkge1xuICAgIHZhbHVlID0gdGhhdFtpbmRleF07XG4gICAgdGhhdFtpbmRleCsrXSA9IHRoYXRbLS1sZW5ndGhdO1xuICAgIHRoYXRbbGVuZ3RoXSA9IHZhbHVlO1xuICB9IHJldHVybiB0aGF0O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgQXJyYXlCdWZmZXJWaWV3Q29yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlJyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG52YXIgdG9PZmZzZXQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2Zmc2V0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxudmFyIGFUeXBlZEFycmF5ID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5hVHlwZWRBcnJheTtcbnZhciBleHBvcnRUeXBlZEFycmF5TWV0aG9kID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5leHBvcnRUeXBlZEFycmF5TWV0aG9kO1xuXG52YXIgRk9SQ0VEID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvKiBnbG9iYWwgSW50OEFycmF5IC0tIHNhZmUgKi9cbiAgbmV3IEludDhBcnJheSgxKS5zZXQoe30pO1xufSk7XG5cbi8vIGAlVHlwZWRBcnJheSUucHJvdG90eXBlLnNldGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLSV0eXBlZGFycmF5JS5wcm90b3R5cGUuc2V0XG5leHBvcnRUeXBlZEFycmF5TWV0aG9kKCdzZXQnLCBmdW5jdGlvbiBzZXQoYXJyYXlMaWtlIC8qICwgb2Zmc2V0ICovKSB7XG4gIGFUeXBlZEFycmF5KHRoaXMpO1xuICB2YXIgb2Zmc2V0ID0gdG9PZmZzZXQoYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIDEpO1xuICB2YXIgbGVuZ3RoID0gdGhpcy5sZW5ndGg7XG4gIHZhciBzcmMgPSB0b09iamVjdChhcnJheUxpa2UpO1xuICB2YXIgbGVuID0gdG9MZW5ndGgoc3JjLmxlbmd0aCk7XG4gIHZhciBpbmRleCA9IDA7XG4gIGlmIChsZW4gKyBvZmZzZXQgPiBsZW5ndGgpIHRocm93IFJhbmdlRXJyb3IoJ1dyb25nIGxlbmd0aCcpO1xuICB3aGlsZSAoaW5kZXggPCBsZW4pIHRoaXNbb2Zmc2V0ICsgaW5kZXhdID0gc3JjW2luZGV4KytdO1xufSwgRk9SQ0VEKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBBcnJheUJ1ZmZlclZpZXdDb3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci12aWV3LWNvcmUnKTtcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbnZhciBhVHlwZWRBcnJheSA9IEFycmF5QnVmZmVyVmlld0NvcmUuYVR5cGVkQXJyYXk7XG52YXIgYVR5cGVkQXJyYXlDb25zdHJ1Y3RvciA9IEFycmF5QnVmZmVyVmlld0NvcmUuYVR5cGVkQXJyYXlDb25zdHJ1Y3RvcjtcbnZhciBleHBvcnRUeXBlZEFycmF5TWV0aG9kID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5leHBvcnRUeXBlZEFycmF5TWV0aG9kO1xudmFyICRzbGljZSA9IFtdLnNsaWNlO1xuXG52YXIgRk9SQ0VEID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvKiBnbG9iYWwgSW50OEFycmF5IC0tIHNhZmUgKi9cbiAgbmV3IEludDhBcnJheSgxKS5zbGljZSgpO1xufSk7XG5cbi8vIGAlVHlwZWRBcnJheSUucHJvdG90eXBlLnNsaWNlYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJXR5cGVkYXJyYXklLnByb3RvdHlwZS5zbGljZVxuZXhwb3J0VHlwZWRBcnJheU1ldGhvZCgnc2xpY2UnLCBmdW5jdGlvbiBzbGljZShzdGFydCwgZW5kKSB7XG4gIHZhciBsaXN0ID0gJHNsaWNlLmNhbGwoYVR5cGVkQXJyYXkodGhpcyksIHN0YXJ0LCBlbmQpO1xuICB2YXIgQyA9IHNwZWNpZXNDb25zdHJ1Y3Rvcih0aGlzLCB0aGlzLmNvbnN0cnVjdG9yKTtcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGxlbmd0aCA9IGxpc3QubGVuZ3RoO1xuICB2YXIgcmVzdWx0ID0gbmV3IChhVHlwZWRBcnJheUNvbnN0cnVjdG9yKEMpKShsZW5ndGgpO1xuICB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIHJlc3VsdFtpbmRleF0gPSBsaXN0W2luZGV4KytdO1xuICByZXR1cm4gcmVzdWx0O1xufSwgRk9SQ0VEKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBBcnJheUJ1ZmZlclZpZXdDb3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci12aWV3LWNvcmUnKTtcbnZhciAkc29tZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pdGVyYXRpb24nKS5zb21lO1xuXG52YXIgYVR5cGVkQXJyYXkgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmFUeXBlZEFycmF5O1xudmFyIGV4cG9ydFR5cGVkQXJyYXlNZXRob2QgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmV4cG9ydFR5cGVkQXJyYXlNZXRob2Q7XG5cbi8vIGAlVHlwZWRBcnJheSUucHJvdG90eXBlLnNvbWVgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0ldHlwZWRhcnJheSUucHJvdG90eXBlLnNvbWVcbmV4cG9ydFR5cGVkQXJyYXlNZXRob2QoJ3NvbWUnLCBmdW5jdGlvbiBzb21lKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gIHJldHVybiAkc29tZShhVHlwZWRBcnJheSh0aGlzKSwgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgQXJyYXlCdWZmZXJWaWV3Q29yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlJyk7XG5cbnZhciBhVHlwZWRBcnJheSA9IEFycmF5QnVmZmVyVmlld0NvcmUuYVR5cGVkQXJyYXk7XG52YXIgZXhwb3J0VHlwZWRBcnJheU1ldGhvZCA9IEFycmF5QnVmZmVyVmlld0NvcmUuZXhwb3J0VHlwZWRBcnJheU1ldGhvZDtcbnZhciAkc29ydCA9IFtdLnNvcnQ7XG5cbi8vIGAlVHlwZWRBcnJheSUucHJvdG90eXBlLnNvcnRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0ldHlwZWRhcnJheSUucHJvdG90eXBlLnNvcnRcbmV4cG9ydFR5cGVkQXJyYXlNZXRob2QoJ3NvcnQnLCBmdW5jdGlvbiBzb3J0KGNvbXBhcmVmbikge1xuICByZXR1cm4gJHNvcnQuY2FsbChhVHlwZWRBcnJheSh0aGlzKSwgY29tcGFyZWZuKTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIEFycmF5QnVmZmVyVmlld0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLXZpZXctY29yZScpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1hYnNvbHV0ZS1pbmRleCcpO1xudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG5cbnZhciBhVHlwZWRBcnJheSA9IEFycmF5QnVmZmVyVmlld0NvcmUuYVR5cGVkQXJyYXk7XG52YXIgZXhwb3J0VHlwZWRBcnJheU1ldGhvZCA9IEFycmF5QnVmZmVyVmlld0NvcmUuZXhwb3J0VHlwZWRBcnJheU1ldGhvZDtcblxuLy8gYCVUeXBlZEFycmF5JS5wcm90b3R5cGUuc3ViYXJyYXlgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0ldHlwZWRhcnJheSUucHJvdG90eXBlLnN1YmFycmF5XG5leHBvcnRUeXBlZEFycmF5TWV0aG9kKCdzdWJhcnJheScsIGZ1bmN0aW9uIHN1YmFycmF5KGJlZ2luLCBlbmQpIHtcbiAgdmFyIE8gPSBhVHlwZWRBcnJheSh0aGlzKTtcbiAgdmFyIGxlbmd0aCA9IE8ubGVuZ3RoO1xuICB2YXIgYmVnaW5JbmRleCA9IHRvQWJzb2x1dGVJbmRleChiZWdpbiwgbGVuZ3RoKTtcbiAgcmV0dXJuIG5ldyAoc3BlY2llc0NvbnN0cnVjdG9yKE8sIE8uY29uc3RydWN0b3IpKShcbiAgICBPLmJ1ZmZlcixcbiAgICBPLmJ5dGVPZmZzZXQgKyBiZWdpbkluZGV4ICogTy5CWVRFU19QRVJfRUxFTUVOVCxcbiAgICB0b0xlbmd0aCgoZW5kID09PSB1bmRlZmluZWQgPyBsZW5ndGggOiB0b0Fic29sdXRlSW5kZXgoZW5kLCBsZW5ndGgpKSAtIGJlZ2luSW5kZXgpXG4gICk7XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgQXJyYXlCdWZmZXJWaWV3Q29yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxudmFyIEludDhBcnJheSA9IGdsb2JhbC5JbnQ4QXJyYXk7XG52YXIgYVR5cGVkQXJyYXkgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmFUeXBlZEFycmF5O1xudmFyIGV4cG9ydFR5cGVkQXJyYXlNZXRob2QgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmV4cG9ydFR5cGVkQXJyYXlNZXRob2Q7XG52YXIgJHRvTG9jYWxlU3RyaW5nID0gW10udG9Mb2NhbGVTdHJpbmc7XG52YXIgJHNsaWNlID0gW10uc2xpY2U7XG5cbi8vIGlPUyBTYWZhcmkgNi54IGZhaWxzIGhlcmVcbnZhciBUT19MT0NBTEVfU1RSSU5HX0JVRyA9ICEhSW50OEFycmF5ICYmIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgJHRvTG9jYWxlU3RyaW5nLmNhbGwobmV3IEludDhBcnJheSgxKSk7XG59KTtcblxudmFyIEZPUkNFRCA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIFsxLCAyXS50b0xvY2FsZVN0cmluZygpICE9IG5ldyBJbnQ4QXJyYXkoWzEsIDJdKS50b0xvY2FsZVN0cmluZygpO1xufSkgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgSW50OEFycmF5LnByb3RvdHlwZS50b0xvY2FsZVN0cmluZy5jYWxsKFsxLCAyXSk7XG59KTtcblxuLy8gYCVUeXBlZEFycmF5JS5wcm90b3R5cGUudG9Mb2NhbGVTdHJpbmdgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0ldHlwZWRhcnJheSUucHJvdG90eXBlLnRvbG9jYWxlc3RyaW5nXG5leHBvcnRUeXBlZEFycmF5TWV0aG9kKCd0b0xvY2FsZVN0cmluZycsIGZ1bmN0aW9uIHRvTG9jYWxlU3RyaW5nKCkge1xuICByZXR1cm4gJHRvTG9jYWxlU3RyaW5nLmFwcGx5KFRPX0xPQ0FMRV9TVFJJTkdfQlVHID8gJHNsaWNlLmNhbGwoYVR5cGVkQXJyYXkodGhpcykpIDogYVR5cGVkQXJyYXkodGhpcyksIGFyZ3VtZW50cyk7XG59LCBGT1JDRUQpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGV4cG9ydFR5cGVkQXJyYXlNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLXZpZXctY29yZScpLmV4cG9ydFR5cGVkQXJyYXlNZXRob2Q7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG5cbnZhciBVaW50OEFycmF5ID0gZ2xvYmFsLlVpbnQ4QXJyYXk7XG52YXIgVWludDhBcnJheVByb3RvdHlwZSA9IFVpbnQ4QXJyYXkgJiYgVWludDhBcnJheS5wcm90b3R5cGUgfHwge307XG52YXIgYXJyYXlUb1N0cmluZyA9IFtdLnRvU3RyaW5nO1xudmFyIGFycmF5Sm9pbiA9IFtdLmpvaW47XG5cbmlmIChmYWlscyhmdW5jdGlvbiAoKSB7IGFycmF5VG9TdHJpbmcuY2FsbCh7fSk7IH0pKSB7XG4gIGFycmF5VG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gYXJyYXlKb2luLmNhbGwodGhpcyk7XG4gIH07XG59XG5cbnZhciBJU19OT1RfQVJSQVlfTUVUSE9EID0gVWludDhBcnJheVByb3RvdHlwZS50b1N0cmluZyAhPSBhcnJheVRvU3RyaW5nO1xuXG4vLyBgJVR5cGVkQXJyYXklLnByb3RvdHlwZS50b1N0cmluZ2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLSV0eXBlZGFycmF5JS5wcm90b3R5cGUudG9zdHJpbmdcbmV4cG9ydFR5cGVkQXJyYXlNZXRob2QoJ3RvU3RyaW5nJywgYXJyYXlUb1N0cmluZywgSVNfTk9UX0FSUkFZX01FVEhPRCk7XG4iLCJ2YXIgY3JlYXRlVHlwZWRBcnJheUNvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3R5cGVkLWFycmF5LWNvbnN0cnVjdG9yJyk7XG5cbi8vIGBVaW50MTZBcnJheWAgY29uc3RydWN0b3Jcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtdHlwZWRhcnJheS1vYmplY3RzXG5jcmVhdGVUeXBlZEFycmF5Q29uc3RydWN0b3IoJ1VpbnQxNicsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBVaW50MTZBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJ2YXIgY3JlYXRlVHlwZWRBcnJheUNvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3R5cGVkLWFycmF5LWNvbnN0cnVjdG9yJyk7XG5cbi8vIGBVaW50MzJBcnJheWAgY29uc3RydWN0b3Jcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtdHlwZWRhcnJheS1vYmplY3RzXG5jcmVhdGVUeXBlZEFycmF5Q29uc3RydWN0b3IoJ1VpbnQzMicsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBVaW50MzJBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJ2YXIgY3JlYXRlVHlwZWRBcnJheUNvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3R5cGVkLWFycmF5LWNvbnN0cnVjdG9yJyk7XG5cbi8vIGBVaW50OEFycmF5YCBjb25zdHJ1Y3RvclxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy10eXBlZGFycmF5LW9iamVjdHNcbmNyZWF0ZVR5cGVkQXJyYXlDb25zdHJ1Y3RvcignVWludDgnLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gVWludDhBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJ2YXIgY3JlYXRlVHlwZWRBcnJheUNvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3R5cGVkLWFycmF5LWNvbnN0cnVjdG9yJyk7XG5cbi8vIGBVaW50OENsYW1wZWRBcnJheWAgY29uc3RydWN0b3Jcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtdHlwZWRhcnJheS1vYmplY3RzXG5jcmVhdGVUeXBlZEFycmF5Q29uc3RydWN0b3IoJ1VpbnQ4JywgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFVpbnQ4Q2xhbXBlZEFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59LCB0cnVlKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUtYWxsJyk7XG52YXIgSW50ZXJuYWxNZXRhZGF0YU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1tZXRhZGF0YScpO1xudmFyIGNvbGxlY3Rpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29sbGVjdGlvbicpO1xudmFyIGNvbGxlY3Rpb25XZWFrID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NvbGxlY3Rpb24td2VhaycpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGVuZm9yY2VJdGVybmFsU3RhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKS5lbmZvcmNlO1xudmFyIE5BVElWRV9XRUFLX01BUCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uYXRpdmUtd2Vhay1tYXAnKTtcblxudmFyIElTX0lFMTEgPSAhZ2xvYmFsLkFjdGl2ZVhPYmplY3QgJiYgJ0FjdGl2ZVhPYmplY3QnIGluIGdsb2JhbDtcbnZhciBpc0V4dGVuc2libGUgPSBPYmplY3QuaXNFeHRlbnNpYmxlO1xudmFyIEludGVybmFsV2Vha01hcDtcblxudmFyIHdyYXBwZXIgPSBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gV2Vha01hcCgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBhcmd1bWVudHMubGVuZ3RoID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTtcbiAgfTtcbn07XG5cbi8vIGBXZWFrTWFwYCBjb25zdHJ1Y3RvclxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy13ZWFrbWFwLWNvbnN0cnVjdG9yXG52YXIgJFdlYWtNYXAgPSBtb2R1bGUuZXhwb3J0cyA9IGNvbGxlY3Rpb24oJ1dlYWtNYXAnLCB3cmFwcGVyLCBjb2xsZWN0aW9uV2Vhayk7XG5cbi8vIElFMTEgV2Vha01hcCBmcm96ZW4ga2V5cyBmaXhcbi8vIFdlIGNhbid0IHVzZSBmZWF0dXJlIGRldGVjdGlvbiBiZWNhdXNlIGl0IGNyYXNoIHNvbWUgb2xkIElFIGJ1aWxkc1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzQ4NVxuaWYgKE5BVElWRV9XRUFLX01BUCAmJiBJU19JRTExKSB7XG4gIEludGVybmFsV2Vha01hcCA9IGNvbGxlY3Rpb25XZWFrLmdldENvbnN0cnVjdG9yKHdyYXBwZXIsICdXZWFrTWFwJywgdHJ1ZSk7XG4gIEludGVybmFsTWV0YWRhdGFNb2R1bGUuUkVRVUlSRUQgPSB0cnVlO1xuICB2YXIgV2Vha01hcFByb3RvdHlwZSA9ICRXZWFrTWFwLnByb3RvdHlwZTtcbiAgdmFyIG5hdGl2ZURlbGV0ZSA9IFdlYWtNYXBQcm90b3R5cGVbJ2RlbGV0ZSddO1xuICB2YXIgbmF0aXZlSGFzID0gV2Vha01hcFByb3RvdHlwZS5oYXM7XG4gIHZhciBuYXRpdmVHZXQgPSBXZWFrTWFwUHJvdG90eXBlLmdldDtcbiAgdmFyIG5hdGl2ZVNldCA9IFdlYWtNYXBQcm90b3R5cGUuc2V0O1xuICByZWRlZmluZUFsbChXZWFrTWFwUHJvdG90eXBlLCB7XG4gICAgJ2RlbGV0ZSc6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIGlmIChpc09iamVjdChrZXkpICYmICFpc0V4dGVuc2libGUoa2V5KSkge1xuICAgICAgICB2YXIgc3RhdGUgPSBlbmZvcmNlSXRlcm5hbFN0YXRlKHRoaXMpO1xuICAgICAgICBpZiAoIXN0YXRlLmZyb3plbikgc3RhdGUuZnJvemVuID0gbmV3IEludGVybmFsV2Vha01hcCgpO1xuICAgICAgICByZXR1cm4gbmF0aXZlRGVsZXRlLmNhbGwodGhpcywga2V5KSB8fCBzdGF0ZS5mcm96ZW5bJ2RlbGV0ZSddKGtleSk7XG4gICAgICB9IHJldHVybiBuYXRpdmVEZWxldGUuY2FsbCh0aGlzLCBrZXkpO1xuICAgIH0sXG4gICAgaGFzOiBmdW5jdGlvbiBoYXMoa2V5KSB7XG4gICAgICBpZiAoaXNPYmplY3Qoa2V5KSAmJiAhaXNFeHRlbnNpYmxlKGtleSkpIHtcbiAgICAgICAgdmFyIHN0YXRlID0gZW5mb3JjZUl0ZXJuYWxTdGF0ZSh0aGlzKTtcbiAgICAgICAgaWYgKCFzdGF0ZS5mcm96ZW4pIHN0YXRlLmZyb3plbiA9IG5ldyBJbnRlcm5hbFdlYWtNYXAoKTtcbiAgICAgICAgcmV0dXJuIG5hdGl2ZUhhcy5jYWxsKHRoaXMsIGtleSkgfHwgc3RhdGUuZnJvemVuLmhhcyhrZXkpO1xuICAgICAgfSByZXR1cm4gbmF0aXZlSGFzLmNhbGwodGhpcywga2V5KTtcbiAgICB9LFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KGtleSkge1xuICAgICAgaWYgKGlzT2JqZWN0KGtleSkgJiYgIWlzRXh0ZW5zaWJsZShrZXkpKSB7XG4gICAgICAgIHZhciBzdGF0ZSA9IGVuZm9yY2VJdGVybmFsU3RhdGUodGhpcyk7XG4gICAgICAgIGlmICghc3RhdGUuZnJvemVuKSBzdGF0ZS5mcm96ZW4gPSBuZXcgSW50ZXJuYWxXZWFrTWFwKCk7XG4gICAgICAgIHJldHVybiBuYXRpdmVIYXMuY2FsbCh0aGlzLCBrZXkpID8gbmF0aXZlR2V0LmNhbGwodGhpcywga2V5KSA6IHN0YXRlLmZyb3plbi5nZXQoa2V5KTtcbiAgICAgIH0gcmV0dXJuIG5hdGl2ZUdldC5jYWxsKHRoaXMsIGtleSk7XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIHNldChrZXksIHZhbHVlKSB7XG4gICAgICBpZiAoaXNPYmplY3Qoa2V5KSAmJiAhaXNFeHRlbnNpYmxlKGtleSkpIHtcbiAgICAgICAgdmFyIHN0YXRlID0gZW5mb3JjZUl0ZXJuYWxTdGF0ZSh0aGlzKTtcbiAgICAgICAgaWYgKCFzdGF0ZS5mcm96ZW4pIHN0YXRlLmZyb3plbiA9IG5ldyBJbnRlcm5hbFdlYWtNYXAoKTtcbiAgICAgICAgbmF0aXZlSGFzLmNhbGwodGhpcywga2V5KSA/IG5hdGl2ZVNldC5jYWxsKHRoaXMsIGtleSwgdmFsdWUpIDogc3RhdGUuZnJvemVuLnNldChrZXksIHZhbHVlKTtcbiAgICAgIH0gZWxzZSBuYXRpdmVTZXQuY2FsbCh0aGlzLCBrZXksIHZhbHVlKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgfSk7XG59XG4iLCIndXNlIHN0cmljdCc7XG52YXIgY29sbGVjdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jb2xsZWN0aW9uJyk7XG52YXIgY29sbGVjdGlvbldlYWsgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29sbGVjdGlvbi13ZWFrJyk7XG5cbi8vIGBXZWFrU2V0YCBjb25zdHJ1Y3RvclxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy13ZWFrc2V0LWNvbnN0cnVjdG9yXG5jb2xsZWN0aW9uKCdXZWFrU2V0JywgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFdlYWtTZXQoKSB7IHJldHVybiBpbml0KHRoaXMsIGFyZ3VtZW50cy5sZW5ndGggPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpOyB9O1xufSwgY29sbGVjdGlvbldlYWspO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBET01JdGVyYWJsZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZG9tLWl0ZXJhYmxlcycpO1xudmFyIGZvckVhY2ggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktZm9yLWVhY2gnKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG5cbmZvciAodmFyIENPTExFQ1RJT05fTkFNRSBpbiBET01JdGVyYWJsZXMpIHtcbiAgdmFyIENvbGxlY3Rpb24gPSBnbG9iYWxbQ09MTEVDVElPTl9OQU1FXTtcbiAgdmFyIENvbGxlY3Rpb25Qcm90b3R5cGUgPSBDb2xsZWN0aW9uICYmIENvbGxlY3Rpb24ucHJvdG90eXBlO1xuICAvLyBzb21lIENocm9tZSB2ZXJzaW9ucyBoYXZlIG5vbi1jb25maWd1cmFibGUgbWV0aG9kcyBvbiBET01Ub2tlbkxpc3RcbiAgaWYgKENvbGxlY3Rpb25Qcm90b3R5cGUgJiYgQ29sbGVjdGlvblByb3RvdHlwZS5mb3JFYWNoICE9PSBmb3JFYWNoKSB0cnkge1xuICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShDb2xsZWN0aW9uUHJvdG90eXBlLCAnZm9yRWFjaCcsIGZvckVhY2gpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIENvbGxlY3Rpb25Qcm90b3R5cGUuZm9yRWFjaCA9IGZvckVhY2g7XG4gIH1cbn1cbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgRE9NSXRlcmFibGVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RvbS1pdGVyYWJsZXMnKTtcbnZhciBBcnJheUl0ZXJhdG9yTWV0aG9kcyA9IHJlcXVpcmUoJy4uL21vZHVsZXMvZXMuYXJyYXkuaXRlcmF0b3InKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBJVEVSQVRPUiA9IHdlbGxLbm93blN5bWJvbCgnaXRlcmF0b3InKTtcbnZhciBUT19TVFJJTkdfVEFHID0gd2VsbEtub3duU3ltYm9sKCd0b1N0cmluZ1RhZycpO1xudmFyIEFycmF5VmFsdWVzID0gQXJyYXlJdGVyYXRvck1ldGhvZHMudmFsdWVzO1xuXG5mb3IgKHZhciBDT0xMRUNUSU9OX05BTUUgaW4gRE9NSXRlcmFibGVzKSB7XG4gIHZhciBDb2xsZWN0aW9uID0gZ2xvYmFsW0NPTExFQ1RJT05fTkFNRV07XG4gIHZhciBDb2xsZWN0aW9uUHJvdG90eXBlID0gQ29sbGVjdGlvbiAmJiBDb2xsZWN0aW9uLnByb3RvdHlwZTtcbiAgaWYgKENvbGxlY3Rpb25Qcm90b3R5cGUpIHtcbiAgICAvLyBzb21lIENocm9tZSB2ZXJzaW9ucyBoYXZlIG5vbi1jb25maWd1cmFibGUgbWV0aG9kcyBvbiBET01Ub2tlbkxpc3RcbiAgICBpZiAoQ29sbGVjdGlvblByb3RvdHlwZVtJVEVSQVRPUl0gIT09IEFycmF5VmFsdWVzKSB0cnkge1xuICAgICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KENvbGxlY3Rpb25Qcm90b3R5cGUsIElURVJBVE9SLCBBcnJheVZhbHVlcyk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIENvbGxlY3Rpb25Qcm90b3R5cGVbSVRFUkFUT1JdID0gQXJyYXlWYWx1ZXM7XG4gICAgfVxuICAgIGlmICghQ29sbGVjdGlvblByb3RvdHlwZVtUT19TVFJJTkdfVEFHXSkge1xuICAgICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KENvbGxlY3Rpb25Qcm90b3R5cGUsIFRPX1NUUklOR19UQUcsIENPTExFQ1RJT05fTkFNRSk7XG4gICAgfVxuICAgIGlmIChET01JdGVyYWJsZXNbQ09MTEVDVElPTl9OQU1FXSkgZm9yICh2YXIgTUVUSE9EX05BTUUgaW4gQXJyYXlJdGVyYXRvck1ldGhvZHMpIHtcbiAgICAgIC8vIHNvbWUgQ2hyb21lIHZlcnNpb25zIGhhdmUgbm9uLWNvbmZpZ3VyYWJsZSBtZXRob2RzIG9uIERPTVRva2VuTGlzdFxuICAgICAgaWYgKENvbGxlY3Rpb25Qcm90b3R5cGVbTUVUSE9EX05BTUVdICE9PSBBcnJheUl0ZXJhdG9yTWV0aG9kc1tNRVRIT0RfTkFNRV0pIHRyeSB7XG4gICAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShDb2xsZWN0aW9uUHJvdG90eXBlLCBNRVRIT0RfTkFNRSwgQXJyYXlJdGVyYXRvck1ldGhvZHNbTUVUSE9EX05BTUVdKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIENvbGxlY3Rpb25Qcm90b3R5cGVbTUVUSE9EX05BTUVdID0gQXJyYXlJdGVyYXRvck1ldGhvZHNbTUVUSE9EX05BTUVdO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHRhc2sgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdGFzaycpO1xuXG52YXIgRk9SQ0VEID0gIWdsb2JhbC5zZXRJbW1lZGlhdGUgfHwgIWdsb2JhbC5jbGVhckltbWVkaWF0ZTtcblxuLy8gaHR0cDovL3czYy5naXRodWIuaW8vc2V0SW1tZWRpYXRlL1xuJCh7IGdsb2JhbDogdHJ1ZSwgYmluZDogdHJ1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgZm9yY2VkOiBGT1JDRUQgfSwge1xuICAvLyBgc2V0SW1tZWRpYXRlYCBtZXRob2RcbiAgLy8gaHR0cDovL3czYy5naXRodWIuaW8vc2V0SW1tZWRpYXRlLyNzaS1zZXRJbW1lZGlhdGVcbiAgc2V0SW1tZWRpYXRlOiB0YXNrLnNldCxcbiAgLy8gYGNsZWFySW1tZWRpYXRlYCBtZXRob2RcbiAgLy8gaHR0cDovL3czYy5naXRodWIuaW8vc2V0SW1tZWRpYXRlLyNzaS1jbGVhckltbWVkaWF0ZVxuICBjbGVhckltbWVkaWF0ZTogdGFzay5jbGVhclxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgbWljcm90YXNrID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL21pY3JvdGFzaycpO1xudmFyIElTX05PREUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLWlzLW5vZGUnKTtcblxudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcblxuLy8gYHF1ZXVlTWljcm90YXNrYCBtZXRob2Rcbi8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3RpbWVycy1hbmQtdXNlci1wcm9tcHRzLmh0bWwjZG9tLXF1ZXVlbWljcm90YXNrXG4kKHsgZ2xvYmFsOiB0cnVlLCBlbnVtZXJhYmxlOiB0cnVlLCBub1RhcmdldEdldDogdHJ1ZSB9LCB7XG4gIHF1ZXVlTWljcm90YXNrOiBmdW5jdGlvbiBxdWV1ZU1pY3JvdGFzayhmbikge1xuICAgIHZhciBkb21haW4gPSBJU19OT0RFICYmIHByb2Nlc3MuZG9tYWluO1xuICAgIG1pY3JvdGFzayhkb21haW4gPyBkb21haW4uYmluZChmbikgOiBmbik7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHVzZXJBZ2VudCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtdXNlci1hZ2VudCcpO1xuXG52YXIgc2xpY2UgPSBbXS5zbGljZTtcbnZhciBNU0lFID0gL01TSUUgLlxcLi8udGVzdCh1c2VyQWdlbnQpOyAvLyA8LSBkaXJ0eSBpZTktIGNoZWNrXG5cbnZhciB3cmFwID0gZnVuY3Rpb24gKHNjaGVkdWxlcikge1xuICByZXR1cm4gZnVuY3Rpb24gKGhhbmRsZXIsIHRpbWVvdXQgLyogLCAuLi5hcmd1bWVudHMgKi8pIHtcbiAgICB2YXIgYm91bmRBcmdzID0gYXJndW1lbnRzLmxlbmd0aCA+IDI7XG4gICAgdmFyIGFyZ3MgPSBib3VuZEFyZ3MgPyBzbGljZS5jYWxsKGFyZ3VtZW50cywgMikgOiB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIHNjaGVkdWxlcihib3VuZEFyZ3MgPyBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmMgLS0gc3BlYyByZXF1aXJlbWVudFxuICAgICAgKHR5cGVvZiBoYW5kbGVyID09ICdmdW5jdGlvbicgPyBoYW5kbGVyIDogRnVuY3Rpb24oaGFuZGxlcikpLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIH0gOiBoYW5kbGVyLCB0aW1lb3V0KTtcbiAgfTtcbn07XG5cbi8vIGllOS0gc2V0VGltZW91dCAmIHNldEludGVydmFsIGFkZGl0aW9uYWwgcGFyYW1ldGVycyBmaXhcbi8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3RpbWVycy1hbmQtdXNlci1wcm9tcHRzLmh0bWwjdGltZXJzXG4kKHsgZ2xvYmFsOiB0cnVlLCBiaW5kOiB0cnVlLCBmb3JjZWQ6IE1TSUUgfSwge1xuICAvLyBgc2V0VGltZW91dGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3RpbWVycy1hbmQtdXNlci1wcm9tcHRzLmh0bWwjZG9tLXNldHRpbWVvdXRcbiAgc2V0VGltZW91dDogd3JhcChnbG9iYWwuc2V0VGltZW91dCksXG4gIC8vIGBzZXRJbnRlcnZhbGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3RpbWVycy1hbmQtdXNlci1wcm9tcHRzLmh0bWwjZG9tLXNldGludGVydmFsXG4gIHNldEludGVydmFsOiB3cmFwKGdsb2JhbC5zZXRJbnRlcnZhbClcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gVE9ETzogaW4gY29yZS1qc0A0LCBtb3ZlIC9tb2R1bGVzLyBkZXBlbmRlbmNpZXMgdG8gcHVibGljIGVudHJpZXMgZm9yIGJldHRlciBvcHRpbWl6YXRpb24gYnkgdG9vbHMgbGlrZSBgcHJlc2V0LWVudmBcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuYXJyYXkuaXRlcmF0b3InKTtcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG52YXIgVVNFX05BVElWRV9VUkwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmF0aXZlLXVybCcpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lJyk7XG52YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUtYWxsJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBjcmVhdGVJdGVyYXRvckNvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1pdGVyYXRvci1jb25zdHJ1Y3RvcicpO1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLWluc3RhbmNlJyk7XG52YXIgaGFzT3duID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYmluZC1jb250ZXh0Jyk7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1jcmVhdGUnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnZhciBnZXRJdGVyYXRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtaXRlcmF0b3InKTtcbnZhciBnZXRJdGVyYXRvck1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtaXRlcmF0b3ItbWV0aG9kJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciAkZmV0Y2ggPSBnZXRCdWlsdEluKCdmZXRjaCcpO1xudmFyIEhlYWRlcnMgPSBnZXRCdWlsdEluKCdIZWFkZXJzJyk7XG52YXIgSVRFUkFUT1IgPSB3ZWxsS25vd25TeW1ib2woJ2l0ZXJhdG9yJyk7XG52YXIgVVJMX1NFQVJDSF9QQVJBTVMgPSAnVVJMU2VhcmNoUGFyYW1zJztcbnZhciBVUkxfU0VBUkNIX1BBUkFNU19JVEVSQVRPUiA9IFVSTF9TRUFSQ0hfUEFSQU1TICsgJ0l0ZXJhdG9yJztcbnZhciBzZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5zZXQ7XG52YXIgZ2V0SW50ZXJuYWxQYXJhbXNTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0dGVyRm9yKFVSTF9TRUFSQ0hfUEFSQU1TKTtcbnZhciBnZXRJbnRlcm5hbEl0ZXJhdG9yU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldHRlckZvcihVUkxfU0VBUkNIX1BBUkFNU19JVEVSQVRPUik7XG5cbnZhciBwbHVzID0gL1xcKy9nO1xudmFyIHNlcXVlbmNlcyA9IEFycmF5KDQpO1xuXG52YXIgcGVyY2VudFNlcXVlbmNlID0gZnVuY3Rpb24gKGJ5dGVzKSB7XG4gIHJldHVybiBzZXF1ZW5jZXNbYnl0ZXMgLSAxXSB8fCAoc2VxdWVuY2VzW2J5dGVzIC0gMV0gPSBSZWdFeHAoJygoPzolW1xcXFxkYS1mXXsyfSl7JyArIGJ5dGVzICsgJ30pJywgJ2dpJykpO1xufTtcblxudmFyIHBlcmNlbnREZWNvZGUgPSBmdW5jdGlvbiAoc2VxdWVuY2UpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KHNlcXVlbmNlKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4gc2VxdWVuY2U7XG4gIH1cbn07XG5cbnZhciBkZXNlcmlhbGl6ZSA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgcmVzdWx0ID0gaXQucmVwbGFjZShwbHVzLCAnICcpO1xuICB2YXIgYnl0ZXMgPSA0O1xuICB0cnkge1xuICAgIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQocmVzdWx0KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICB3aGlsZSAoYnl0ZXMpIHtcbiAgICAgIHJlc3VsdCA9IHJlc3VsdC5yZXBsYWNlKHBlcmNlbnRTZXF1ZW5jZShieXRlcy0tKSwgcGVyY2VudERlY29kZSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn07XG5cbnZhciBmaW5kID0gL1shJygpfl18JTIwL2c7XG5cbnZhciByZXBsYWNlID0ge1xuICAnISc6ICclMjEnLFxuICBcIidcIjogJyUyNycsXG4gICcoJzogJyUyOCcsXG4gICcpJzogJyUyOScsXG4gICd+JzogJyU3RScsXG4gICclMjAnOiAnKydcbn07XG5cbnZhciByZXBsYWNlciA9IGZ1bmN0aW9uIChtYXRjaCkge1xuICByZXR1cm4gcmVwbGFjZVttYXRjaF07XG59O1xuXG52YXIgc2VyaWFsaXplID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQoaXQpLnJlcGxhY2UoZmluZCwgcmVwbGFjZXIpO1xufTtcblxudmFyIHBhcnNlU2VhcmNoUGFyYW1zID0gZnVuY3Rpb24gKHJlc3VsdCwgcXVlcnkpIHtcbiAgaWYgKHF1ZXJ5KSB7XG4gICAgdmFyIGF0dHJpYnV0ZXMgPSBxdWVyeS5zcGxpdCgnJicpO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIGF0dHJpYnV0ZSwgZW50cnk7XG4gICAgd2hpbGUgKGluZGV4IDwgYXR0cmlidXRlcy5sZW5ndGgpIHtcbiAgICAgIGF0dHJpYnV0ZSA9IGF0dHJpYnV0ZXNbaW5kZXgrK107XG4gICAgICBpZiAoYXR0cmlidXRlLmxlbmd0aCkge1xuICAgICAgICBlbnRyeSA9IGF0dHJpYnV0ZS5zcGxpdCgnPScpO1xuICAgICAgICByZXN1bHQucHVzaCh7XG4gICAgICAgICAga2V5OiBkZXNlcmlhbGl6ZShlbnRyeS5zaGlmdCgpKSxcbiAgICAgICAgICB2YWx1ZTogZGVzZXJpYWxpemUoZW50cnkuam9pbignPScpKVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5cbnZhciB1cGRhdGVTZWFyY2hQYXJhbXMgPSBmdW5jdGlvbiAocXVlcnkpIHtcbiAgdGhpcy5lbnRyaWVzLmxlbmd0aCA9IDA7XG4gIHBhcnNlU2VhcmNoUGFyYW1zKHRoaXMuZW50cmllcywgcXVlcnkpO1xufTtcblxudmFyIHZhbGlkYXRlQXJndW1lbnRzTGVuZ3RoID0gZnVuY3Rpb24gKHBhc3NlZCwgcmVxdWlyZWQpIHtcbiAgaWYgKHBhc3NlZCA8IHJlcXVpcmVkKSB0aHJvdyBUeXBlRXJyb3IoJ05vdCBlbm91Z2ggYXJndW1lbnRzJyk7XG59O1xuXG52YXIgVVJMU2VhcmNoUGFyYW1zSXRlcmF0b3IgPSBjcmVhdGVJdGVyYXRvckNvbnN0cnVjdG9yKGZ1bmN0aW9uIEl0ZXJhdG9yKHBhcmFtcywga2luZCkge1xuICBzZXRJbnRlcm5hbFN0YXRlKHRoaXMsIHtcbiAgICB0eXBlOiBVUkxfU0VBUkNIX1BBUkFNU19JVEVSQVRPUixcbiAgICBpdGVyYXRvcjogZ2V0SXRlcmF0b3IoZ2V0SW50ZXJuYWxQYXJhbXNTdGF0ZShwYXJhbXMpLmVudHJpZXMpLFxuICAgIGtpbmQ6IGtpbmRcbiAgfSk7XG59LCAnSXRlcmF0b3InLCBmdW5jdGlvbiBuZXh0KCkge1xuICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbEl0ZXJhdG9yU3RhdGUodGhpcyk7XG4gIHZhciBraW5kID0gc3RhdGUua2luZDtcbiAgdmFyIHN0ZXAgPSBzdGF0ZS5pdGVyYXRvci5uZXh0KCk7XG4gIHZhciBlbnRyeSA9IHN0ZXAudmFsdWU7XG4gIGlmICghc3RlcC5kb25lKSB7XG4gICAgc3RlcC52YWx1ZSA9IGtpbmQgPT09ICdrZXlzJyA/IGVudHJ5LmtleSA6IGtpbmQgPT09ICd2YWx1ZXMnID8gZW50cnkudmFsdWUgOiBbZW50cnkua2V5LCBlbnRyeS52YWx1ZV07XG4gIH0gcmV0dXJuIHN0ZXA7XG59KTtcblxuLy8gYFVSTFNlYXJjaFBhcmFtc2AgY29uc3RydWN0b3Jcbi8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jaW50ZXJmYWNlLXVybHNlYXJjaHBhcmFtc1xudmFyIFVSTFNlYXJjaFBhcmFtc0NvbnN0cnVjdG9yID0gZnVuY3Rpb24gVVJMU2VhcmNoUGFyYW1zKC8qIGluaXQgKi8pIHtcbiAgYW5JbnN0YW5jZSh0aGlzLCBVUkxTZWFyY2hQYXJhbXNDb25zdHJ1Y3RvciwgVVJMX1NFQVJDSF9QQVJBTVMpO1xuICB2YXIgaW5pdCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkO1xuICB2YXIgdGhhdCA9IHRoaXM7XG4gIHZhciBlbnRyaWVzID0gW107XG4gIHZhciBpdGVyYXRvck1ldGhvZCwgaXRlcmF0b3IsIG5leHQsIHN0ZXAsIGVudHJ5SXRlcmF0b3IsIGVudHJ5TmV4dCwgZmlyc3QsIHNlY29uZCwga2V5O1xuXG4gIHNldEludGVybmFsU3RhdGUodGhhdCwge1xuICAgIHR5cGU6IFVSTF9TRUFSQ0hfUEFSQU1TLFxuICAgIGVudHJpZXM6IGVudHJpZXMsXG4gICAgdXBkYXRlVVJMOiBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0sXG4gICAgdXBkYXRlU2VhcmNoUGFyYW1zOiB1cGRhdGVTZWFyY2hQYXJhbXNcbiAgfSk7XG5cbiAgaWYgKGluaXQgIT09IHVuZGVmaW5lZCkge1xuICAgIGlmIChpc09iamVjdChpbml0KSkge1xuICAgICAgaXRlcmF0b3JNZXRob2QgPSBnZXRJdGVyYXRvck1ldGhvZChpbml0KTtcbiAgICAgIGlmICh0eXBlb2YgaXRlcmF0b3JNZXRob2QgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgaXRlcmF0b3IgPSBpdGVyYXRvck1ldGhvZC5jYWxsKGluaXQpO1xuICAgICAgICBuZXh0ID0gaXRlcmF0b3IubmV4dDtcbiAgICAgICAgd2hpbGUgKCEoc3RlcCA9IG5leHQuY2FsbChpdGVyYXRvcikpLmRvbmUpIHtcbiAgICAgICAgICBlbnRyeUl0ZXJhdG9yID0gZ2V0SXRlcmF0b3IoYW5PYmplY3Qoc3RlcC52YWx1ZSkpO1xuICAgICAgICAgIGVudHJ5TmV4dCA9IGVudHJ5SXRlcmF0b3IubmV4dDtcbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAoZmlyc3QgPSBlbnRyeU5leHQuY2FsbChlbnRyeUl0ZXJhdG9yKSkuZG9uZSB8fFxuICAgICAgICAgICAgKHNlY29uZCA9IGVudHJ5TmV4dC5jYWxsKGVudHJ5SXRlcmF0b3IpKS5kb25lIHx8XG4gICAgICAgICAgICAhZW50cnlOZXh0LmNhbGwoZW50cnlJdGVyYXRvcikuZG9uZVxuICAgICAgICAgICkgdGhyb3cgVHlwZUVycm9yKCdFeHBlY3RlZCBzZXF1ZW5jZSB3aXRoIGxlbmd0aCAyJyk7XG4gICAgICAgICAgZW50cmllcy5wdXNoKHsga2V5OiBmaXJzdC52YWx1ZSArICcnLCB2YWx1ZTogc2Vjb25kLnZhbHVlICsgJycgfSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBmb3IgKGtleSBpbiBpbml0KSBpZiAoaGFzT3duKGluaXQsIGtleSkpIGVudHJpZXMucHVzaCh7IGtleToga2V5LCB2YWx1ZTogaW5pdFtrZXldICsgJycgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHBhcnNlU2VhcmNoUGFyYW1zKGVudHJpZXMsIHR5cGVvZiBpbml0ID09PSAnc3RyaW5nJyA/IGluaXQuY2hhckF0KDApID09PSAnPycgPyBpbml0LnNsaWNlKDEpIDogaW5pdCA6IGluaXQgKyAnJyk7XG4gICAgfVxuICB9XG59O1xuXG52YXIgVVJMU2VhcmNoUGFyYW1zUHJvdG90eXBlID0gVVJMU2VhcmNoUGFyYW1zQ29uc3RydWN0b3IucHJvdG90eXBlO1xuXG5yZWRlZmluZUFsbChVUkxTZWFyY2hQYXJhbXNQcm90b3R5cGUsIHtcbiAgLy8gYFVSTFNlYXJjaFBhcmFtcy5wcm90b3R5cGUuYXBwZW5kYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsc2VhcmNocGFyYW1zLWFwcGVuZFxuICBhcHBlbmQ6IGZ1bmN0aW9uIGFwcGVuZChuYW1lLCB2YWx1ZSkge1xuICAgIHZhbGlkYXRlQXJndW1lbnRzTGVuZ3RoKGFyZ3VtZW50cy5sZW5ndGgsIDIpO1xuICAgIHZhciBzdGF0ZSA9IGdldEludGVybmFsUGFyYW1zU3RhdGUodGhpcyk7XG4gICAgc3RhdGUuZW50cmllcy5wdXNoKHsga2V5OiBuYW1lICsgJycsIHZhbHVlOiB2YWx1ZSArICcnIH0pO1xuICAgIHN0YXRlLnVwZGF0ZVVSTCgpO1xuICB9LFxuICAvLyBgVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZS5kZWxldGVgIG1ldGhvZFxuICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmxzZWFyY2hwYXJhbXMtZGVsZXRlXG4gICdkZWxldGUnOiBmdW5jdGlvbiAobmFtZSkge1xuICAgIHZhbGlkYXRlQXJndW1lbnRzTGVuZ3RoKGFyZ3VtZW50cy5sZW5ndGgsIDEpO1xuICAgIHZhciBzdGF0ZSA9IGdldEludGVybmFsUGFyYW1zU3RhdGUodGhpcyk7XG4gICAgdmFyIGVudHJpZXMgPSBzdGF0ZS5lbnRyaWVzO1xuICAgIHZhciBrZXkgPSBuYW1lICsgJyc7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB3aGlsZSAoaW5kZXggPCBlbnRyaWVzLmxlbmd0aCkge1xuICAgICAgaWYgKGVudHJpZXNbaW5kZXhdLmtleSA9PT0ga2V5KSBlbnRyaWVzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICBlbHNlIGluZGV4Kys7XG4gICAgfVxuICAgIHN0YXRlLnVwZGF0ZVVSTCgpO1xuICB9LFxuICAvLyBgVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZS5nZXRgIG1ldGhvZFxuICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmxzZWFyY2hwYXJhbXMtZ2V0XG4gIGdldDogZnVuY3Rpb24gZ2V0KG5hbWUpIHtcbiAgICB2YWxpZGF0ZUFyZ3VtZW50c0xlbmd0aChhcmd1bWVudHMubGVuZ3RoLCAxKTtcbiAgICB2YXIgZW50cmllcyA9IGdldEludGVybmFsUGFyYW1zU3RhdGUodGhpcykuZW50cmllcztcbiAgICB2YXIga2V5ID0gbmFtZSArICcnO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgZm9yICg7IGluZGV4IDwgZW50cmllcy5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgIGlmIChlbnRyaWVzW2luZGV4XS5rZXkgPT09IGtleSkgcmV0dXJuIGVudHJpZXNbaW5kZXhdLnZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfSxcbiAgLy8gYFVSTFNlYXJjaFBhcmFtcy5wcm90b3R5cGUuZ2V0QWxsYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsc2VhcmNocGFyYW1zLWdldGFsbFxuICBnZXRBbGw6IGZ1bmN0aW9uIGdldEFsbChuYW1lKSB7XG4gICAgdmFsaWRhdGVBcmd1bWVudHNMZW5ndGgoYXJndW1lbnRzLmxlbmd0aCwgMSk7XG4gICAgdmFyIGVudHJpZXMgPSBnZXRJbnRlcm5hbFBhcmFtc1N0YXRlKHRoaXMpLmVudHJpZXM7XG4gICAgdmFyIGtleSA9IG5hbWUgKyAnJztcbiAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICBmb3IgKDsgaW5kZXggPCBlbnRyaWVzLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgaWYgKGVudHJpZXNbaW5kZXhdLmtleSA9PT0ga2V5KSByZXN1bHQucHVzaChlbnRyaWVzW2luZGV4XS52YWx1ZSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH0sXG4gIC8vIGBVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlLmhhc2AgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybHNlYXJjaHBhcmFtcy1oYXNcbiAgaGFzOiBmdW5jdGlvbiBoYXMobmFtZSkge1xuICAgIHZhbGlkYXRlQXJndW1lbnRzTGVuZ3RoKGFyZ3VtZW50cy5sZW5ndGgsIDEpO1xuICAgIHZhciBlbnRyaWVzID0gZ2V0SW50ZXJuYWxQYXJhbXNTdGF0ZSh0aGlzKS5lbnRyaWVzO1xuICAgIHZhciBrZXkgPSBuYW1lICsgJyc7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB3aGlsZSAoaW5kZXggPCBlbnRyaWVzLmxlbmd0aCkge1xuICAgICAgaWYgKGVudHJpZXNbaW5kZXgrK10ua2V5ID09PSBrZXkpIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH0sXG4gIC8vIGBVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlLnNldGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybHNlYXJjaHBhcmFtcy1zZXRcbiAgc2V0OiBmdW5jdGlvbiBzZXQobmFtZSwgdmFsdWUpIHtcbiAgICB2YWxpZGF0ZUFyZ3VtZW50c0xlbmd0aChhcmd1bWVudHMubGVuZ3RoLCAxKTtcbiAgICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFBhcmFtc1N0YXRlKHRoaXMpO1xuICAgIHZhciBlbnRyaWVzID0gc3RhdGUuZW50cmllcztcbiAgICB2YXIgZm91bmQgPSBmYWxzZTtcbiAgICB2YXIga2V5ID0gbmFtZSArICcnO1xuICAgIHZhciB2YWwgPSB2YWx1ZSArICcnO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIGVudHJ5O1xuICAgIGZvciAoOyBpbmRleCA8IGVudHJpZXMubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICBlbnRyeSA9IGVudHJpZXNbaW5kZXhdO1xuICAgICAgaWYgKGVudHJ5LmtleSA9PT0ga2V5KSB7XG4gICAgICAgIGlmIChmb3VuZCkgZW50cmllcy5zcGxpY2UoaW5kZXgtLSwgMSk7XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGZvdW5kID0gdHJ1ZTtcbiAgICAgICAgICBlbnRyeS52YWx1ZSA9IHZhbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoIWZvdW5kKSBlbnRyaWVzLnB1c2goeyBrZXk6IGtleSwgdmFsdWU6IHZhbCB9KTtcbiAgICBzdGF0ZS51cGRhdGVVUkwoKTtcbiAgfSxcbiAgLy8gYFVSTFNlYXJjaFBhcmFtcy5wcm90b3R5cGUuc29ydGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybHNlYXJjaHBhcmFtcy1zb3J0XG4gIHNvcnQ6IGZ1bmN0aW9uIHNvcnQoKSB7XG4gICAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxQYXJhbXNTdGF0ZSh0aGlzKTtcbiAgICB2YXIgZW50cmllcyA9IHN0YXRlLmVudHJpZXM7XG4gICAgLy8gQXJyYXkjc29ydCBpcyBub3Qgc3RhYmxlIGluIHNvbWUgZW5naW5lc1xuICAgIHZhciBzbGljZSA9IGVudHJpZXMuc2xpY2UoKTtcbiAgICB2YXIgZW50cnksIGVudHJpZXNJbmRleCwgc2xpY2VJbmRleDtcbiAgICBlbnRyaWVzLmxlbmd0aCA9IDA7XG4gICAgZm9yIChzbGljZUluZGV4ID0gMDsgc2xpY2VJbmRleCA8IHNsaWNlLmxlbmd0aDsgc2xpY2VJbmRleCsrKSB7XG4gICAgICBlbnRyeSA9IHNsaWNlW3NsaWNlSW5kZXhdO1xuICAgICAgZm9yIChlbnRyaWVzSW5kZXggPSAwOyBlbnRyaWVzSW5kZXggPCBzbGljZUluZGV4OyBlbnRyaWVzSW5kZXgrKykge1xuICAgICAgICBpZiAoZW50cmllc1tlbnRyaWVzSW5kZXhdLmtleSA+IGVudHJ5LmtleSkge1xuICAgICAgICAgIGVudHJpZXMuc3BsaWNlKGVudHJpZXNJbmRleCwgMCwgZW50cnkpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoZW50cmllc0luZGV4ID09PSBzbGljZUluZGV4KSBlbnRyaWVzLnB1c2goZW50cnkpO1xuICAgIH1cbiAgICBzdGF0ZS51cGRhdGVVUkwoKTtcbiAgfSxcbiAgLy8gYFVSTFNlYXJjaFBhcmFtcy5wcm90b3R5cGUuZm9yRWFjaGAgbWV0aG9kXG4gIGZvckVhY2g6IGZ1bmN0aW9uIGZvckVhY2goY2FsbGJhY2sgLyogLCB0aGlzQXJnICovKSB7XG4gICAgdmFyIGVudHJpZXMgPSBnZXRJbnRlcm5hbFBhcmFtc1N0YXRlKHRoaXMpLmVudHJpZXM7XG4gICAgdmFyIGJvdW5kRnVuY3Rpb24gPSBiaW5kKGNhbGxiYWNrLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgMyk7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgZW50cnk7XG4gICAgd2hpbGUgKGluZGV4IDwgZW50cmllcy5sZW5ndGgpIHtcbiAgICAgIGVudHJ5ID0gZW50cmllc1tpbmRleCsrXTtcbiAgICAgIGJvdW5kRnVuY3Rpb24oZW50cnkudmFsdWUsIGVudHJ5LmtleSwgdGhpcyk7XG4gICAgfVxuICB9LFxuICAvLyBgVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZS5rZXlzYCBtZXRob2RcbiAga2V5czogZnVuY3Rpb24ga2V5cygpIHtcbiAgICByZXR1cm4gbmV3IFVSTFNlYXJjaFBhcmFtc0l0ZXJhdG9yKHRoaXMsICdrZXlzJyk7XG4gIH0sXG4gIC8vIGBVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlLnZhbHVlc2AgbWV0aG9kXG4gIHZhbHVlczogZnVuY3Rpb24gdmFsdWVzKCkge1xuICAgIHJldHVybiBuZXcgVVJMU2VhcmNoUGFyYW1zSXRlcmF0b3IodGhpcywgJ3ZhbHVlcycpO1xuICB9LFxuICAvLyBgVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZS5lbnRyaWVzYCBtZXRob2RcbiAgZW50cmllczogZnVuY3Rpb24gZW50cmllcygpIHtcbiAgICByZXR1cm4gbmV3IFVSTFNlYXJjaFBhcmFtc0l0ZXJhdG9yKHRoaXMsICdlbnRyaWVzJyk7XG4gIH1cbn0sIHsgZW51bWVyYWJsZTogdHJ1ZSB9KTtcblxuLy8gYFVSTFNlYXJjaFBhcmFtcy5wcm90b3R5cGVbQEBpdGVyYXRvcl1gIG1ldGhvZFxucmVkZWZpbmUoVVJMU2VhcmNoUGFyYW1zUHJvdG90eXBlLCBJVEVSQVRPUiwgVVJMU2VhcmNoUGFyYW1zUHJvdG90eXBlLmVudHJpZXMpO1xuXG4vLyBgVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZS50b1N0cmluZ2AgbWV0aG9kXG4vLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI3VybHNlYXJjaHBhcmFtcy1zdHJpbmdpZmljYXRpb24tYmVoYXZpb3JcbnJlZGVmaW5lKFVSTFNlYXJjaFBhcmFtc1Byb3RvdHlwZSwgJ3RvU3RyaW5nJywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gIHZhciBlbnRyaWVzID0gZ2V0SW50ZXJuYWxQYXJhbXNTdGF0ZSh0aGlzKS5lbnRyaWVzO1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciBlbnRyeTtcbiAgd2hpbGUgKGluZGV4IDwgZW50cmllcy5sZW5ndGgpIHtcbiAgICBlbnRyeSA9IGVudHJpZXNbaW5kZXgrK107XG4gICAgcmVzdWx0LnB1c2goc2VyaWFsaXplKGVudHJ5LmtleSkgKyAnPScgKyBzZXJpYWxpemUoZW50cnkudmFsdWUpKTtcbiAgfSByZXR1cm4gcmVzdWx0LmpvaW4oJyYnKTtcbn0sIHsgZW51bWVyYWJsZTogdHJ1ZSB9KTtcblxuc2V0VG9TdHJpbmdUYWcoVVJMU2VhcmNoUGFyYW1zQ29uc3RydWN0b3IsIFVSTF9TRUFSQ0hfUEFSQU1TKTtcblxuJCh7IGdsb2JhbDogdHJ1ZSwgZm9yY2VkOiAhVVNFX05BVElWRV9VUkwgfSwge1xuICBVUkxTZWFyY2hQYXJhbXM6IFVSTFNlYXJjaFBhcmFtc0NvbnN0cnVjdG9yXG59KTtcblxuLy8gV3JhcCBgZmV0Y2hgIGZvciBjb3JyZWN0IHdvcmsgd2l0aCBwb2x5ZmlsbGVkIGBVUkxTZWFyY2hQYXJhbXNgXG4vLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvNjc0XG5pZiAoIVVTRV9OQVRJVkVfVVJMICYmIHR5cGVvZiAkZmV0Y2ggPT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgSGVhZGVycyA9PSAnZnVuY3Rpb24nKSB7XG4gICQoeyBnbG9iYWw6IHRydWUsIGVudW1lcmFibGU6IHRydWUsIGZvcmNlZDogdHJ1ZSB9LCB7XG4gICAgZmV0Y2g6IGZ1bmN0aW9uIGZldGNoKGlucHV0IC8qICwgaW5pdCAqLykge1xuICAgICAgdmFyIGFyZ3MgPSBbaW5wdXRdO1xuICAgICAgdmFyIGluaXQsIGJvZHksIGhlYWRlcnM7XG4gICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgaW5pdCA9IGFyZ3VtZW50c1sxXTtcbiAgICAgICAgaWYgKGlzT2JqZWN0KGluaXQpKSB7XG4gICAgICAgICAgYm9keSA9IGluaXQuYm9keTtcbiAgICAgICAgICBpZiAoY2xhc3NvZihib2R5KSA9PT0gVVJMX1NFQVJDSF9QQVJBTVMpIHtcbiAgICAgICAgICAgIGhlYWRlcnMgPSBpbml0LmhlYWRlcnMgPyBuZXcgSGVhZGVycyhpbml0LmhlYWRlcnMpIDogbmV3IEhlYWRlcnMoKTtcbiAgICAgICAgICAgIGlmICghaGVhZGVycy5oYXMoJ2NvbnRlbnQtdHlwZScpKSB7XG4gICAgICAgICAgICAgIGhlYWRlcnMuc2V0KCdjb250ZW50LXR5cGUnLCAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkO2NoYXJzZXQ9VVRGLTgnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGluaXQgPSBjcmVhdGUoaW5pdCwge1xuICAgICAgICAgICAgICBib2R5OiBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMCwgU3RyaW5nKGJvZHkpKSxcbiAgICAgICAgICAgICAgaGVhZGVyczogY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDAsIGhlYWRlcnMpXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYXJncy5wdXNoKGluaXQpO1xuICAgICAgfSByZXR1cm4gJGZldGNoLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIH1cbiAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBVUkxTZWFyY2hQYXJhbXM6IFVSTFNlYXJjaFBhcmFtc0NvbnN0cnVjdG9yLFxuICBnZXRTdGF0ZTogZ2V0SW50ZXJuYWxQYXJhbXNTdGF0ZVxufTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIFRPRE86IGluIGNvcmUtanNANCwgbW92ZSAvbW9kdWxlcy8gZGVwZW5kZW5jaWVzIHRvIHB1YmxpYyBlbnRyaWVzIGZvciBiZXR0ZXIgb3B0aW1pemF0aW9uIGJ5IHRvb2xzIGxpa2UgYHByZXNldC1lbnZgXG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN0cmluZy5pdGVyYXRvcicpO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBVU0VfTkFUSVZFX1VSTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uYXRpdmUtdXJsJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGRlZmluZVByb3BlcnRpZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0aWVzJyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUnKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLWluc3RhbmNlJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIGFzc2lnbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtYXNzaWduJyk7XG52YXIgYXJyYXlGcm9tID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWZyb20nKTtcbnZhciBjb2RlQXQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLW11bHRpYnl0ZScpLmNvZGVBdDtcbnZhciB0b0FTQ0lJID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy1wdW55Y29kZS10by1hc2NpaScpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgVVJMU2VhcmNoUGFyYW1zTW9kdWxlID0gcmVxdWlyZSgnLi4vbW9kdWxlcy93ZWIudXJsLXNlYXJjaC1wYXJhbXMnKTtcbnZhciBJbnRlcm5hbFN0YXRlTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlJyk7XG5cbnZhciBOYXRpdmVVUkwgPSBnbG9iYWwuVVJMO1xudmFyIFVSTFNlYXJjaFBhcmFtcyA9IFVSTFNlYXJjaFBhcmFtc01vZHVsZS5VUkxTZWFyY2hQYXJhbXM7XG52YXIgZ2V0SW50ZXJuYWxTZWFyY2hQYXJhbXNTdGF0ZSA9IFVSTFNlYXJjaFBhcmFtc01vZHVsZS5nZXRTdGF0ZTtcbnZhciBzZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5zZXQ7XG52YXIgZ2V0SW50ZXJuYWxVUkxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0dGVyRm9yKCdVUkwnKTtcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG52YXIgcG93ID0gTWF0aC5wb3c7XG5cbnZhciBJTlZBTElEX0FVVEhPUklUWSA9ICdJbnZhbGlkIGF1dGhvcml0eSc7XG52YXIgSU5WQUxJRF9TQ0hFTUUgPSAnSW52YWxpZCBzY2hlbWUnO1xudmFyIElOVkFMSURfSE9TVCA9ICdJbnZhbGlkIGhvc3QnO1xudmFyIElOVkFMSURfUE9SVCA9ICdJbnZhbGlkIHBvcnQnO1xuXG52YXIgQUxQSEEgPSAvW0EtWmEtel0vO1xudmFyIEFMUEhBTlVNRVJJQyA9IC9bXFxkKy0uQS1aYS16XS87XG52YXIgRElHSVQgPSAvXFxkLztcbnZhciBIRVhfU1RBUlQgPSAvXigweHwwWCkvO1xudmFyIE9DVCA9IC9eWzAtN10rJC87XG52YXIgREVDID0gL15cXGQrJC87XG52YXIgSEVYID0gL15bXFxkQS1GYS1mXSskLztcbi8qIGVzbGludC1kaXNhYmxlIG5vLWNvbnRyb2wtcmVnZXggLS0gc2FmZSAqL1xudmFyIEZPUkJJRERFTl9IT1NUX0NPREVfUE9JTlQgPSAvW1xcdTAwMDBcXHRcXHUwMDBBXFx1MDAwRCAjJS86P0BbXFxcXF1dLztcbnZhciBGT1JCSURERU5fSE9TVF9DT0RFX1BPSU5UX0VYQ0xVRElOR19QRVJDRU5UID0gL1tcXHUwMDAwXFx0XFx1MDAwQVxcdTAwMEQgIy86P0BbXFxcXF1dLztcbnZhciBMRUFESU5HX0FORF9UUkFJTElOR19DMF9DT05UUk9MX09SX1NQQUNFID0gL15bXFx1MDAwMC1cXHUwMDFGIF0rfFtcXHUwMDAwLVxcdTAwMUYgXSskL2c7XG52YXIgVEFCX0FORF9ORVdfTElORSA9IC9bXFx0XFx1MDAwQVxcdTAwMERdL2c7XG4vKiBlc2xpbnQtZW5hYmxlIG5vLWNvbnRyb2wtcmVnZXggLS0gc2FmZSAqL1xudmFyIEVPRjtcblxudmFyIHBhcnNlSG9zdCA9IGZ1bmN0aW9uICh1cmwsIGlucHV0KSB7XG4gIHZhciByZXN1bHQsIGNvZGVQb2ludHMsIGluZGV4O1xuICBpZiAoaW5wdXQuY2hhckF0KDApID09ICdbJykge1xuICAgIGlmIChpbnB1dC5jaGFyQXQoaW5wdXQubGVuZ3RoIC0gMSkgIT0gJ10nKSByZXR1cm4gSU5WQUxJRF9IT1NUO1xuICAgIHJlc3VsdCA9IHBhcnNlSVB2NihpbnB1dC5zbGljZSgxLCAtMSkpO1xuICAgIGlmICghcmVzdWx0KSByZXR1cm4gSU5WQUxJRF9IT1NUO1xuICAgIHVybC5ob3N0ID0gcmVzdWx0O1xuICAvLyBvcGFxdWUgaG9zdFxuICB9IGVsc2UgaWYgKCFpc1NwZWNpYWwodXJsKSkge1xuICAgIGlmIChGT1JCSURERU5fSE9TVF9DT0RFX1BPSU5UX0VYQ0xVRElOR19QRVJDRU5ULnRlc3QoaW5wdXQpKSByZXR1cm4gSU5WQUxJRF9IT1NUO1xuICAgIHJlc3VsdCA9ICcnO1xuICAgIGNvZGVQb2ludHMgPSBhcnJheUZyb20oaW5wdXQpO1xuICAgIGZvciAoaW5kZXggPSAwOyBpbmRleCA8IGNvZGVQb2ludHMubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICByZXN1bHQgKz0gcGVyY2VudEVuY29kZShjb2RlUG9pbnRzW2luZGV4XSwgQzBDb250cm9sUGVyY2VudEVuY29kZVNldCk7XG4gICAgfVxuICAgIHVybC5ob3N0ID0gcmVzdWx0O1xuICB9IGVsc2Uge1xuICAgIGlucHV0ID0gdG9BU0NJSShpbnB1dCk7XG4gICAgaWYgKEZPUkJJRERFTl9IT1NUX0NPREVfUE9JTlQudGVzdChpbnB1dCkpIHJldHVybiBJTlZBTElEX0hPU1Q7XG4gICAgcmVzdWx0ID0gcGFyc2VJUHY0KGlucHV0KTtcbiAgICBpZiAocmVzdWx0ID09PSBudWxsKSByZXR1cm4gSU5WQUxJRF9IT1NUO1xuICAgIHVybC5ob3N0ID0gcmVzdWx0O1xuICB9XG59O1xuXG52YXIgcGFyc2VJUHY0ID0gZnVuY3Rpb24gKGlucHV0KSB7XG4gIHZhciBwYXJ0cyA9IGlucHV0LnNwbGl0KCcuJyk7XG4gIHZhciBwYXJ0c0xlbmd0aCwgbnVtYmVycywgaW5kZXgsIHBhcnQsIHJhZGl4LCBudW1iZXIsIGlwdjQ7XG4gIGlmIChwYXJ0cy5sZW5ndGggJiYgcGFydHNbcGFydHMubGVuZ3RoIC0gMV0gPT0gJycpIHtcbiAgICBwYXJ0cy5wb3AoKTtcbiAgfVxuICBwYXJ0c0xlbmd0aCA9IHBhcnRzLmxlbmd0aDtcbiAgaWYgKHBhcnRzTGVuZ3RoID4gNCkgcmV0dXJuIGlucHV0O1xuICBudW1iZXJzID0gW107XG4gIGZvciAoaW5kZXggPSAwOyBpbmRleCA8IHBhcnRzTGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgcGFydCA9IHBhcnRzW2luZGV4XTtcbiAgICBpZiAocGFydCA9PSAnJykgcmV0dXJuIGlucHV0O1xuICAgIHJhZGl4ID0gMTA7XG4gICAgaWYgKHBhcnQubGVuZ3RoID4gMSAmJiBwYXJ0LmNoYXJBdCgwKSA9PSAnMCcpIHtcbiAgICAgIHJhZGl4ID0gSEVYX1NUQVJULnRlc3QocGFydCkgPyAxNiA6IDg7XG4gICAgICBwYXJ0ID0gcGFydC5zbGljZShyYWRpeCA9PSA4ID8gMSA6IDIpO1xuICAgIH1cbiAgICBpZiAocGFydCA9PT0gJycpIHtcbiAgICAgIG51bWJlciA9IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICghKHJhZGl4ID09IDEwID8gREVDIDogcmFkaXggPT0gOCA/IE9DVCA6IEhFWCkudGVzdChwYXJ0KSkgcmV0dXJuIGlucHV0O1xuICAgICAgbnVtYmVyID0gcGFyc2VJbnQocGFydCwgcmFkaXgpO1xuICAgIH1cbiAgICBudW1iZXJzLnB1c2gobnVtYmVyKTtcbiAgfVxuICBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCBwYXJ0c0xlbmd0aDsgaW5kZXgrKykge1xuICAgIG51bWJlciA9IG51bWJlcnNbaW5kZXhdO1xuICAgIGlmIChpbmRleCA9PSBwYXJ0c0xlbmd0aCAtIDEpIHtcbiAgICAgIGlmIChudW1iZXIgPj0gcG93KDI1NiwgNSAtIHBhcnRzTGVuZ3RoKSkgcmV0dXJuIG51bGw7XG4gICAgfSBlbHNlIGlmIChudW1iZXIgPiAyNTUpIHJldHVybiBudWxsO1xuICB9XG4gIGlwdjQgPSBudW1iZXJzLnBvcCgpO1xuICBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCBudW1iZXJzLmxlbmd0aDsgaW5kZXgrKykge1xuICAgIGlwdjQgKz0gbnVtYmVyc1tpbmRleF0gKiBwb3coMjU2LCAzIC0gaW5kZXgpO1xuICB9XG4gIHJldHVybiBpcHY0O1xufTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG1heC1zdGF0ZW1lbnRzIC0tIFRPRE9cbnZhciBwYXJzZUlQdjYgPSBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgdmFyIGFkZHJlc3MgPSBbMCwgMCwgMCwgMCwgMCwgMCwgMCwgMF07XG4gIHZhciBwaWVjZUluZGV4ID0gMDtcbiAgdmFyIGNvbXByZXNzID0gbnVsbDtcbiAgdmFyIHBvaW50ZXIgPSAwO1xuICB2YXIgdmFsdWUsIGxlbmd0aCwgbnVtYmVyc1NlZW4sIGlwdjRQaWVjZSwgbnVtYmVyLCBzd2Fwcywgc3dhcDtcblxuICB2YXIgY2hhciA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gaW5wdXQuY2hhckF0KHBvaW50ZXIpO1xuICB9O1xuXG4gIGlmIChjaGFyKCkgPT0gJzonKSB7XG4gICAgaWYgKGlucHV0LmNoYXJBdCgxKSAhPSAnOicpIHJldHVybjtcbiAgICBwb2ludGVyICs9IDI7XG4gICAgcGllY2VJbmRleCsrO1xuICAgIGNvbXByZXNzID0gcGllY2VJbmRleDtcbiAgfVxuICB3aGlsZSAoY2hhcigpKSB7XG4gICAgaWYgKHBpZWNlSW5kZXggPT0gOCkgcmV0dXJuO1xuICAgIGlmIChjaGFyKCkgPT0gJzonKSB7XG4gICAgICBpZiAoY29tcHJlc3MgIT09IG51bGwpIHJldHVybjtcbiAgICAgIHBvaW50ZXIrKztcbiAgICAgIHBpZWNlSW5kZXgrKztcbiAgICAgIGNvbXByZXNzID0gcGllY2VJbmRleDtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICB2YWx1ZSA9IGxlbmd0aCA9IDA7XG4gICAgd2hpbGUgKGxlbmd0aCA8IDQgJiYgSEVYLnRlc3QoY2hhcigpKSkge1xuICAgICAgdmFsdWUgPSB2YWx1ZSAqIDE2ICsgcGFyc2VJbnQoY2hhcigpLCAxNik7XG4gICAgICBwb2ludGVyKys7XG4gICAgICBsZW5ndGgrKztcbiAgICB9XG4gICAgaWYgKGNoYXIoKSA9PSAnLicpIHtcbiAgICAgIGlmIChsZW5ndGggPT0gMCkgcmV0dXJuO1xuICAgICAgcG9pbnRlciAtPSBsZW5ndGg7XG4gICAgICBpZiAocGllY2VJbmRleCA+IDYpIHJldHVybjtcbiAgICAgIG51bWJlcnNTZWVuID0gMDtcbiAgICAgIHdoaWxlIChjaGFyKCkpIHtcbiAgICAgICAgaXB2NFBpZWNlID0gbnVsbDtcbiAgICAgICAgaWYgKG51bWJlcnNTZWVuID4gMCkge1xuICAgICAgICAgIGlmIChjaGFyKCkgPT0gJy4nICYmIG51bWJlcnNTZWVuIDwgNCkgcG9pbnRlcisrO1xuICAgICAgICAgIGVsc2UgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICghRElHSVQudGVzdChjaGFyKCkpKSByZXR1cm47XG4gICAgICAgIHdoaWxlIChESUdJVC50ZXN0KGNoYXIoKSkpIHtcbiAgICAgICAgICBudW1iZXIgPSBwYXJzZUludChjaGFyKCksIDEwKTtcbiAgICAgICAgICBpZiAoaXB2NFBpZWNlID09PSBudWxsKSBpcHY0UGllY2UgPSBudW1iZXI7XG4gICAgICAgICAgZWxzZSBpZiAoaXB2NFBpZWNlID09IDApIHJldHVybjtcbiAgICAgICAgICBlbHNlIGlwdjRQaWVjZSA9IGlwdjRQaWVjZSAqIDEwICsgbnVtYmVyO1xuICAgICAgICAgIGlmIChpcHY0UGllY2UgPiAyNTUpIHJldHVybjtcbiAgICAgICAgICBwb2ludGVyKys7XG4gICAgICAgIH1cbiAgICAgICAgYWRkcmVzc1twaWVjZUluZGV4XSA9IGFkZHJlc3NbcGllY2VJbmRleF0gKiAyNTYgKyBpcHY0UGllY2U7XG4gICAgICAgIG51bWJlcnNTZWVuKys7XG4gICAgICAgIGlmIChudW1iZXJzU2VlbiA9PSAyIHx8IG51bWJlcnNTZWVuID09IDQpIHBpZWNlSW5kZXgrKztcbiAgICAgIH1cbiAgICAgIGlmIChudW1iZXJzU2VlbiAhPSA0KSByZXR1cm47XG4gICAgICBicmVhaztcbiAgICB9IGVsc2UgaWYgKGNoYXIoKSA9PSAnOicpIHtcbiAgICAgIHBvaW50ZXIrKztcbiAgICAgIGlmICghY2hhcigpKSByZXR1cm47XG4gICAgfSBlbHNlIGlmIChjaGFyKCkpIHJldHVybjtcbiAgICBhZGRyZXNzW3BpZWNlSW5kZXgrK10gPSB2YWx1ZTtcbiAgfVxuICBpZiAoY29tcHJlc3MgIT09IG51bGwpIHtcbiAgICBzd2FwcyA9IHBpZWNlSW5kZXggLSBjb21wcmVzcztcbiAgICBwaWVjZUluZGV4ID0gNztcbiAgICB3aGlsZSAocGllY2VJbmRleCAhPSAwICYmIHN3YXBzID4gMCkge1xuICAgICAgc3dhcCA9IGFkZHJlc3NbcGllY2VJbmRleF07XG4gICAgICBhZGRyZXNzW3BpZWNlSW5kZXgtLV0gPSBhZGRyZXNzW2NvbXByZXNzICsgc3dhcHMgLSAxXTtcbiAgICAgIGFkZHJlc3NbY29tcHJlc3MgKyAtLXN3YXBzXSA9IHN3YXA7XG4gICAgfVxuICB9IGVsc2UgaWYgKHBpZWNlSW5kZXggIT0gOCkgcmV0dXJuO1xuICByZXR1cm4gYWRkcmVzcztcbn07XG5cbnZhciBmaW5kTG9uZ2VzdFplcm9TZXF1ZW5jZSA9IGZ1bmN0aW9uIChpcHY2KSB7XG4gIHZhciBtYXhJbmRleCA9IG51bGw7XG4gIHZhciBtYXhMZW5ndGggPSAxO1xuICB2YXIgY3VyclN0YXJ0ID0gbnVsbDtcbiAgdmFyIGN1cnJMZW5ndGggPSAwO1xuICB2YXIgaW5kZXggPSAwO1xuICBmb3IgKDsgaW5kZXggPCA4OyBpbmRleCsrKSB7XG4gICAgaWYgKGlwdjZbaW5kZXhdICE9PSAwKSB7XG4gICAgICBpZiAoY3Vyckxlbmd0aCA+IG1heExlbmd0aCkge1xuICAgICAgICBtYXhJbmRleCA9IGN1cnJTdGFydDtcbiAgICAgICAgbWF4TGVuZ3RoID0gY3Vyckxlbmd0aDtcbiAgICAgIH1cbiAgICAgIGN1cnJTdGFydCA9IG51bGw7XG4gICAgICBjdXJyTGVuZ3RoID0gMDtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGN1cnJTdGFydCA9PT0gbnVsbCkgY3VyclN0YXJ0ID0gaW5kZXg7XG4gICAgICArK2N1cnJMZW5ndGg7XG4gICAgfVxuICB9XG4gIGlmIChjdXJyTGVuZ3RoID4gbWF4TGVuZ3RoKSB7XG4gICAgbWF4SW5kZXggPSBjdXJyU3RhcnQ7XG4gICAgbWF4TGVuZ3RoID0gY3Vyckxlbmd0aDtcbiAgfVxuICByZXR1cm4gbWF4SW5kZXg7XG59O1xuXG52YXIgc2VyaWFsaXplSG9zdCA9IGZ1bmN0aW9uIChob3N0KSB7XG4gIHZhciByZXN1bHQsIGluZGV4LCBjb21wcmVzcywgaWdub3JlMDtcbiAgLy8gaXB2NFxuICBpZiAodHlwZW9mIGhvc3QgPT0gJ251bWJlcicpIHtcbiAgICByZXN1bHQgPSBbXTtcbiAgICBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCA0OyBpbmRleCsrKSB7XG4gICAgICByZXN1bHQudW5zaGlmdChob3N0ICUgMjU2KTtcbiAgICAgIGhvc3QgPSBmbG9vcihob3N0IC8gMjU2KTtcbiAgICB9IHJldHVybiByZXN1bHQuam9pbignLicpO1xuICAvLyBpcHY2XG4gIH0gZWxzZSBpZiAodHlwZW9mIGhvc3QgPT0gJ29iamVjdCcpIHtcbiAgICByZXN1bHQgPSAnJztcbiAgICBjb21wcmVzcyA9IGZpbmRMb25nZXN0WmVyb1NlcXVlbmNlKGhvc3QpO1xuICAgIGZvciAoaW5kZXggPSAwOyBpbmRleCA8IDg7IGluZGV4KyspIHtcbiAgICAgIGlmIChpZ25vcmUwICYmIGhvc3RbaW5kZXhdID09PSAwKSBjb250aW51ZTtcbiAgICAgIGlmIChpZ25vcmUwKSBpZ25vcmUwID0gZmFsc2U7XG4gICAgICBpZiAoY29tcHJlc3MgPT09IGluZGV4KSB7XG4gICAgICAgIHJlc3VsdCArPSBpbmRleCA/ICc6JyA6ICc6Oic7XG4gICAgICAgIGlnbm9yZTAgPSB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzdWx0ICs9IGhvc3RbaW5kZXhdLnRvU3RyaW5nKDE2KTtcbiAgICAgICAgaWYgKGluZGV4IDwgNykgcmVzdWx0ICs9ICc6JztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuICdbJyArIHJlc3VsdCArICddJztcbiAgfSByZXR1cm4gaG9zdDtcbn07XG5cbnZhciBDMENvbnRyb2xQZXJjZW50RW5jb2RlU2V0ID0ge307XG52YXIgZnJhZ21lbnRQZXJjZW50RW5jb2RlU2V0ID0gYXNzaWduKHt9LCBDMENvbnRyb2xQZXJjZW50RW5jb2RlU2V0LCB7XG4gICcgJzogMSwgJ1wiJzogMSwgJzwnOiAxLCAnPic6IDEsICdgJzogMVxufSk7XG52YXIgcGF0aFBlcmNlbnRFbmNvZGVTZXQgPSBhc3NpZ24oe30sIGZyYWdtZW50UGVyY2VudEVuY29kZVNldCwge1xuICAnIyc6IDEsICc/JzogMSwgJ3snOiAxLCAnfSc6IDFcbn0pO1xudmFyIHVzZXJpbmZvUGVyY2VudEVuY29kZVNldCA9IGFzc2lnbih7fSwgcGF0aFBlcmNlbnRFbmNvZGVTZXQsIHtcbiAgJy8nOiAxLCAnOic6IDEsICc7JzogMSwgJz0nOiAxLCAnQCc6IDEsICdbJzogMSwgJ1xcXFwnOiAxLCAnXSc6IDEsICdeJzogMSwgJ3wnOiAxXG59KTtcblxudmFyIHBlcmNlbnRFbmNvZGUgPSBmdW5jdGlvbiAoY2hhciwgc2V0KSB7XG4gIHZhciBjb2RlID0gY29kZUF0KGNoYXIsIDApO1xuICByZXR1cm4gY29kZSA+IDB4MjAgJiYgY29kZSA8IDB4N0YgJiYgIWhhcyhzZXQsIGNoYXIpID8gY2hhciA6IGVuY29kZVVSSUNvbXBvbmVudChjaGFyKTtcbn07XG5cbnZhciBzcGVjaWFsU2NoZW1lcyA9IHtcbiAgZnRwOiAyMSxcbiAgZmlsZTogbnVsbCxcbiAgaHR0cDogODAsXG4gIGh0dHBzOiA0NDMsXG4gIHdzOiA4MCxcbiAgd3NzOiA0NDNcbn07XG5cbnZhciBpc1NwZWNpYWwgPSBmdW5jdGlvbiAodXJsKSB7XG4gIHJldHVybiBoYXMoc3BlY2lhbFNjaGVtZXMsIHVybC5zY2hlbWUpO1xufTtcblxudmFyIGluY2x1ZGVzQ3JlZGVudGlhbHMgPSBmdW5jdGlvbiAodXJsKSB7XG4gIHJldHVybiB1cmwudXNlcm5hbWUgIT0gJycgfHwgdXJsLnBhc3N3b3JkICE9ICcnO1xufTtcblxudmFyIGNhbm5vdEhhdmVVc2VybmFtZVBhc3N3b3JkUG9ydCA9IGZ1bmN0aW9uICh1cmwpIHtcbiAgcmV0dXJuICF1cmwuaG9zdCB8fCB1cmwuY2Fubm90QmVBQmFzZVVSTCB8fCB1cmwuc2NoZW1lID09ICdmaWxlJztcbn07XG5cbnZhciBpc1dpbmRvd3NEcml2ZUxldHRlciA9IGZ1bmN0aW9uIChzdHJpbmcsIG5vcm1hbGl6ZWQpIHtcbiAgdmFyIHNlY29uZDtcbiAgcmV0dXJuIHN0cmluZy5sZW5ndGggPT0gMiAmJiBBTFBIQS50ZXN0KHN0cmluZy5jaGFyQXQoMCkpXG4gICAgJiYgKChzZWNvbmQgPSBzdHJpbmcuY2hhckF0KDEpKSA9PSAnOicgfHwgKCFub3JtYWxpemVkICYmIHNlY29uZCA9PSAnfCcpKTtcbn07XG5cbnZhciBzdGFydHNXaXRoV2luZG93c0RyaXZlTGV0dGVyID0gZnVuY3Rpb24gKHN0cmluZykge1xuICB2YXIgdGhpcmQ7XG4gIHJldHVybiBzdHJpbmcubGVuZ3RoID4gMSAmJiBpc1dpbmRvd3NEcml2ZUxldHRlcihzdHJpbmcuc2xpY2UoMCwgMikpICYmIChcbiAgICBzdHJpbmcubGVuZ3RoID09IDIgfHxcbiAgICAoKHRoaXJkID0gc3RyaW5nLmNoYXJBdCgyKSkgPT09ICcvJyB8fCB0aGlyZCA9PT0gJ1xcXFwnIHx8IHRoaXJkID09PSAnPycgfHwgdGhpcmQgPT09ICcjJylcbiAgKTtcbn07XG5cbnZhciBzaG9ydGVuVVJMc1BhdGggPSBmdW5jdGlvbiAodXJsKSB7XG4gIHZhciBwYXRoID0gdXJsLnBhdGg7XG4gIHZhciBwYXRoU2l6ZSA9IHBhdGgubGVuZ3RoO1xuICBpZiAocGF0aFNpemUgJiYgKHVybC5zY2hlbWUgIT0gJ2ZpbGUnIHx8IHBhdGhTaXplICE9IDEgfHwgIWlzV2luZG93c0RyaXZlTGV0dGVyKHBhdGhbMF0sIHRydWUpKSkge1xuICAgIHBhdGgucG9wKCk7XG4gIH1cbn07XG5cbnZhciBpc1NpbmdsZURvdCA9IGZ1bmN0aW9uIChzZWdtZW50KSB7XG4gIHJldHVybiBzZWdtZW50ID09PSAnLicgfHwgc2VnbWVudC50b0xvd2VyQ2FzZSgpID09PSAnJTJlJztcbn07XG5cbnZhciBpc0RvdWJsZURvdCA9IGZ1bmN0aW9uIChzZWdtZW50KSB7XG4gIHNlZ21lbnQgPSBzZWdtZW50LnRvTG93ZXJDYXNlKCk7XG4gIHJldHVybiBzZWdtZW50ID09PSAnLi4nIHx8IHNlZ21lbnQgPT09ICclMmUuJyB8fCBzZWdtZW50ID09PSAnLiUyZScgfHwgc2VnbWVudCA9PT0gJyUyZSUyZSc7XG59O1xuXG4vLyBTdGF0ZXM6XG52YXIgU0NIRU1FX1NUQVJUID0ge307XG52YXIgU0NIRU1FID0ge307XG52YXIgTk9fU0NIRU1FID0ge307XG52YXIgU1BFQ0lBTF9SRUxBVElWRV9PUl9BVVRIT1JJVFkgPSB7fTtcbnZhciBQQVRIX09SX0FVVEhPUklUWSA9IHt9O1xudmFyIFJFTEFUSVZFID0ge307XG52YXIgUkVMQVRJVkVfU0xBU0ggPSB7fTtcbnZhciBTUEVDSUFMX0FVVEhPUklUWV9TTEFTSEVTID0ge307XG52YXIgU1BFQ0lBTF9BVVRIT1JJVFlfSUdOT1JFX1NMQVNIRVMgPSB7fTtcbnZhciBBVVRIT1JJVFkgPSB7fTtcbnZhciBIT1NUID0ge307XG52YXIgSE9TVE5BTUUgPSB7fTtcbnZhciBQT1JUID0ge307XG52YXIgRklMRSA9IHt9O1xudmFyIEZJTEVfU0xBU0ggPSB7fTtcbnZhciBGSUxFX0hPU1QgPSB7fTtcbnZhciBQQVRIX1NUQVJUID0ge307XG52YXIgUEFUSCA9IHt9O1xudmFyIENBTk5PVF9CRV9BX0JBU0VfVVJMX1BBVEggPSB7fTtcbnZhciBRVUVSWSA9IHt9O1xudmFyIEZSQUdNRU5UID0ge307XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBtYXgtc3RhdGVtZW50cyAtLSBUT0RPXG52YXIgcGFyc2VVUkwgPSBmdW5jdGlvbiAodXJsLCBpbnB1dCwgc3RhdGVPdmVycmlkZSwgYmFzZSkge1xuICB2YXIgc3RhdGUgPSBzdGF0ZU92ZXJyaWRlIHx8IFNDSEVNRV9TVEFSVDtcbiAgdmFyIHBvaW50ZXIgPSAwO1xuICB2YXIgYnVmZmVyID0gJyc7XG4gIHZhciBzZWVuQXQgPSBmYWxzZTtcbiAgdmFyIHNlZW5CcmFja2V0ID0gZmFsc2U7XG4gIHZhciBzZWVuUGFzc3dvcmRUb2tlbiA9IGZhbHNlO1xuICB2YXIgY29kZVBvaW50cywgY2hhciwgYnVmZmVyQ29kZVBvaW50cywgZmFpbHVyZTtcblxuICBpZiAoIXN0YXRlT3ZlcnJpZGUpIHtcbiAgICB1cmwuc2NoZW1lID0gJyc7XG4gICAgdXJsLnVzZXJuYW1lID0gJyc7XG4gICAgdXJsLnBhc3N3b3JkID0gJyc7XG4gICAgdXJsLmhvc3QgPSBudWxsO1xuICAgIHVybC5wb3J0ID0gbnVsbDtcbiAgICB1cmwucGF0aCA9IFtdO1xuICAgIHVybC5xdWVyeSA9IG51bGw7XG4gICAgdXJsLmZyYWdtZW50ID0gbnVsbDtcbiAgICB1cmwuY2Fubm90QmVBQmFzZVVSTCA9IGZhbHNlO1xuICAgIGlucHV0ID0gaW5wdXQucmVwbGFjZShMRUFESU5HX0FORF9UUkFJTElOR19DMF9DT05UUk9MX09SX1NQQUNFLCAnJyk7XG4gIH1cblxuICBpbnB1dCA9IGlucHV0LnJlcGxhY2UoVEFCX0FORF9ORVdfTElORSwgJycpO1xuXG4gIGNvZGVQb2ludHMgPSBhcnJheUZyb20oaW5wdXQpO1xuXG4gIHdoaWxlIChwb2ludGVyIDw9IGNvZGVQb2ludHMubGVuZ3RoKSB7XG4gICAgY2hhciA9IGNvZGVQb2ludHNbcG9pbnRlcl07XG4gICAgc3dpdGNoIChzdGF0ZSkge1xuICAgICAgY2FzZSBTQ0hFTUVfU1RBUlQ6XG4gICAgICAgIGlmIChjaGFyICYmIEFMUEhBLnRlc3QoY2hhcikpIHtcbiAgICAgICAgICBidWZmZXIgKz0gY2hhci50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgIHN0YXRlID0gU0NIRU1FO1xuICAgICAgICB9IGVsc2UgaWYgKCFzdGF0ZU92ZXJyaWRlKSB7XG4gICAgICAgICAgc3RhdGUgPSBOT19TQ0hFTUU7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH0gZWxzZSByZXR1cm4gSU5WQUxJRF9TQ0hFTUU7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIFNDSEVNRTpcbiAgICAgICAgaWYgKGNoYXIgJiYgKEFMUEhBTlVNRVJJQy50ZXN0KGNoYXIpIHx8IGNoYXIgPT0gJysnIHx8IGNoYXIgPT0gJy0nIHx8IGNoYXIgPT0gJy4nKSkge1xuICAgICAgICAgIGJ1ZmZlciArPSBjaGFyLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIH0gZWxzZSBpZiAoY2hhciA9PSAnOicpIHtcbiAgICAgICAgICBpZiAoc3RhdGVPdmVycmlkZSAmJiAoXG4gICAgICAgICAgICAoaXNTcGVjaWFsKHVybCkgIT0gaGFzKHNwZWNpYWxTY2hlbWVzLCBidWZmZXIpKSB8fFxuICAgICAgICAgICAgKGJ1ZmZlciA9PSAnZmlsZScgJiYgKGluY2x1ZGVzQ3JlZGVudGlhbHModXJsKSB8fCB1cmwucG9ydCAhPT0gbnVsbCkpIHx8XG4gICAgICAgICAgICAodXJsLnNjaGVtZSA9PSAnZmlsZScgJiYgIXVybC5ob3N0KVxuICAgICAgICAgICkpIHJldHVybjtcbiAgICAgICAgICB1cmwuc2NoZW1lID0gYnVmZmVyO1xuICAgICAgICAgIGlmIChzdGF0ZU92ZXJyaWRlKSB7XG4gICAgICAgICAgICBpZiAoaXNTcGVjaWFsKHVybCkgJiYgc3BlY2lhbFNjaGVtZXNbdXJsLnNjaGVtZV0gPT0gdXJsLnBvcnQpIHVybC5wb3J0ID0gbnVsbDtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnVmZmVyID0gJyc7XG4gICAgICAgICAgaWYgKHVybC5zY2hlbWUgPT0gJ2ZpbGUnKSB7XG4gICAgICAgICAgICBzdGF0ZSA9IEZJTEU7XG4gICAgICAgICAgfSBlbHNlIGlmIChpc1NwZWNpYWwodXJsKSAmJiBiYXNlICYmIGJhc2Uuc2NoZW1lID09IHVybC5zY2hlbWUpIHtcbiAgICAgICAgICAgIHN0YXRlID0gU1BFQ0lBTF9SRUxBVElWRV9PUl9BVVRIT1JJVFk7XG4gICAgICAgICAgfSBlbHNlIGlmIChpc1NwZWNpYWwodXJsKSkge1xuICAgICAgICAgICAgc3RhdGUgPSBTUEVDSUFMX0FVVEhPUklUWV9TTEFTSEVTO1xuICAgICAgICAgIH0gZWxzZSBpZiAoY29kZVBvaW50c1twb2ludGVyICsgMV0gPT0gJy8nKSB7XG4gICAgICAgICAgICBzdGF0ZSA9IFBBVEhfT1JfQVVUSE9SSVRZO1xuICAgICAgICAgICAgcG9pbnRlcisrO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB1cmwuY2Fubm90QmVBQmFzZVVSTCA9IHRydWU7XG4gICAgICAgICAgICB1cmwucGF0aC5wdXNoKCcnKTtcbiAgICAgICAgICAgIHN0YXRlID0gQ0FOTk9UX0JFX0FfQkFTRV9VUkxfUEFUSDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoIXN0YXRlT3ZlcnJpZGUpIHtcbiAgICAgICAgICBidWZmZXIgPSAnJztcbiAgICAgICAgICBzdGF0ZSA9IE5PX1NDSEVNRTtcbiAgICAgICAgICBwb2ludGVyID0gMDtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfSBlbHNlIHJldHVybiBJTlZBTElEX1NDSEVNRTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgTk9fU0NIRU1FOlxuICAgICAgICBpZiAoIWJhc2UgfHwgKGJhc2UuY2Fubm90QmVBQmFzZVVSTCAmJiBjaGFyICE9ICcjJykpIHJldHVybiBJTlZBTElEX1NDSEVNRTtcbiAgICAgICAgaWYgKGJhc2UuY2Fubm90QmVBQmFzZVVSTCAmJiBjaGFyID09ICcjJykge1xuICAgICAgICAgIHVybC5zY2hlbWUgPSBiYXNlLnNjaGVtZTtcbiAgICAgICAgICB1cmwucGF0aCA9IGJhc2UucGF0aC5zbGljZSgpO1xuICAgICAgICAgIHVybC5xdWVyeSA9IGJhc2UucXVlcnk7XG4gICAgICAgICAgdXJsLmZyYWdtZW50ID0gJyc7XG4gICAgICAgICAgdXJsLmNhbm5vdEJlQUJhc2VVUkwgPSB0cnVlO1xuICAgICAgICAgIHN0YXRlID0gRlJBR01FTlQ7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgc3RhdGUgPSBiYXNlLnNjaGVtZSA9PSAnZmlsZScgPyBGSUxFIDogUkVMQVRJVkU7XG4gICAgICAgIGNvbnRpbnVlO1xuXG4gICAgICBjYXNlIFNQRUNJQUxfUkVMQVRJVkVfT1JfQVVUSE9SSVRZOlxuICAgICAgICBpZiAoY2hhciA9PSAnLycgJiYgY29kZVBvaW50c1twb2ludGVyICsgMV0gPT0gJy8nKSB7XG4gICAgICAgICAgc3RhdGUgPSBTUEVDSUFMX0FVVEhPUklUWV9JR05PUkVfU0xBU0hFUztcbiAgICAgICAgICBwb2ludGVyKys7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3RhdGUgPSBSRUxBVElWRTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfSBicmVhaztcblxuICAgICAgY2FzZSBQQVRIX09SX0FVVEhPUklUWTpcbiAgICAgICAgaWYgKGNoYXIgPT0gJy8nKSB7XG4gICAgICAgICAgc3RhdGUgPSBBVVRIT1JJVFk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3RhdGUgPSBQQVRIO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgIGNhc2UgUkVMQVRJVkU6XG4gICAgICAgIHVybC5zY2hlbWUgPSBiYXNlLnNjaGVtZTtcbiAgICAgICAgaWYgKGNoYXIgPT0gRU9GKSB7XG4gICAgICAgICAgdXJsLnVzZXJuYW1lID0gYmFzZS51c2VybmFtZTtcbiAgICAgICAgICB1cmwucGFzc3dvcmQgPSBiYXNlLnBhc3N3b3JkO1xuICAgICAgICAgIHVybC5ob3N0ID0gYmFzZS5ob3N0O1xuICAgICAgICAgIHVybC5wb3J0ID0gYmFzZS5wb3J0O1xuICAgICAgICAgIHVybC5wYXRoID0gYmFzZS5wYXRoLnNsaWNlKCk7XG4gICAgICAgICAgdXJsLnF1ZXJ5ID0gYmFzZS5xdWVyeTtcbiAgICAgICAgfSBlbHNlIGlmIChjaGFyID09ICcvJyB8fCAoY2hhciA9PSAnXFxcXCcgJiYgaXNTcGVjaWFsKHVybCkpKSB7XG4gICAgICAgICAgc3RhdGUgPSBSRUxBVElWRV9TTEFTSDtcbiAgICAgICAgfSBlbHNlIGlmIChjaGFyID09ICc/Jykge1xuICAgICAgICAgIHVybC51c2VybmFtZSA9IGJhc2UudXNlcm5hbWU7XG4gICAgICAgICAgdXJsLnBhc3N3b3JkID0gYmFzZS5wYXNzd29yZDtcbiAgICAgICAgICB1cmwuaG9zdCA9IGJhc2UuaG9zdDtcbiAgICAgICAgICB1cmwucG9ydCA9IGJhc2UucG9ydDtcbiAgICAgICAgICB1cmwucGF0aCA9IGJhc2UucGF0aC5zbGljZSgpO1xuICAgICAgICAgIHVybC5xdWVyeSA9ICcnO1xuICAgICAgICAgIHN0YXRlID0gUVVFUlk7XG4gICAgICAgIH0gZWxzZSBpZiAoY2hhciA9PSAnIycpIHtcbiAgICAgICAgICB1cmwudXNlcm5hbWUgPSBiYXNlLnVzZXJuYW1lO1xuICAgICAgICAgIHVybC5wYXNzd29yZCA9IGJhc2UucGFzc3dvcmQ7XG4gICAgICAgICAgdXJsLmhvc3QgPSBiYXNlLmhvc3Q7XG4gICAgICAgICAgdXJsLnBvcnQgPSBiYXNlLnBvcnQ7XG4gICAgICAgICAgdXJsLnBhdGggPSBiYXNlLnBhdGguc2xpY2UoKTtcbiAgICAgICAgICB1cmwucXVlcnkgPSBiYXNlLnF1ZXJ5O1xuICAgICAgICAgIHVybC5mcmFnbWVudCA9ICcnO1xuICAgICAgICAgIHN0YXRlID0gRlJBR01FTlQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdXJsLnVzZXJuYW1lID0gYmFzZS51c2VybmFtZTtcbiAgICAgICAgICB1cmwucGFzc3dvcmQgPSBiYXNlLnBhc3N3b3JkO1xuICAgICAgICAgIHVybC5ob3N0ID0gYmFzZS5ob3N0O1xuICAgICAgICAgIHVybC5wb3J0ID0gYmFzZS5wb3J0O1xuICAgICAgICAgIHVybC5wYXRoID0gYmFzZS5wYXRoLnNsaWNlKCk7XG4gICAgICAgICAgdXJsLnBhdGgucG9wKCk7XG4gICAgICAgICAgc3RhdGUgPSBQQVRIO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9IGJyZWFrO1xuXG4gICAgICBjYXNlIFJFTEFUSVZFX1NMQVNIOlxuICAgICAgICBpZiAoaXNTcGVjaWFsKHVybCkgJiYgKGNoYXIgPT0gJy8nIHx8IGNoYXIgPT0gJ1xcXFwnKSkge1xuICAgICAgICAgIHN0YXRlID0gU1BFQ0lBTF9BVVRIT1JJVFlfSUdOT1JFX1NMQVNIRVM7XG4gICAgICAgIH0gZWxzZSBpZiAoY2hhciA9PSAnLycpIHtcbiAgICAgICAgICBzdGF0ZSA9IEFVVEhPUklUWTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB1cmwudXNlcm5hbWUgPSBiYXNlLnVzZXJuYW1lO1xuICAgICAgICAgIHVybC5wYXNzd29yZCA9IGJhc2UucGFzc3dvcmQ7XG4gICAgICAgICAgdXJsLmhvc3QgPSBiYXNlLmhvc3Q7XG4gICAgICAgICAgdXJsLnBvcnQgPSBiYXNlLnBvcnQ7XG4gICAgICAgICAgc3RhdGUgPSBQQVRIO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9IGJyZWFrO1xuXG4gICAgICBjYXNlIFNQRUNJQUxfQVVUSE9SSVRZX1NMQVNIRVM6XG4gICAgICAgIHN0YXRlID0gU1BFQ0lBTF9BVVRIT1JJVFlfSUdOT1JFX1NMQVNIRVM7XG4gICAgICAgIGlmIChjaGFyICE9ICcvJyB8fCBidWZmZXIuY2hhckF0KHBvaW50ZXIgKyAxKSAhPSAnLycpIGNvbnRpbnVlO1xuICAgICAgICBwb2ludGVyKys7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIFNQRUNJQUxfQVVUSE9SSVRZX0lHTk9SRV9TTEFTSEVTOlxuICAgICAgICBpZiAoY2hhciAhPSAnLycgJiYgY2hhciAhPSAnXFxcXCcpIHtcbiAgICAgICAgICBzdGF0ZSA9IEFVVEhPUklUWTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfSBicmVhaztcblxuICAgICAgY2FzZSBBVVRIT1JJVFk6XG4gICAgICAgIGlmIChjaGFyID09ICdAJykge1xuICAgICAgICAgIGlmIChzZWVuQXQpIGJ1ZmZlciA9ICclNDAnICsgYnVmZmVyO1xuICAgICAgICAgIHNlZW5BdCA9IHRydWU7XG4gICAgICAgICAgYnVmZmVyQ29kZVBvaW50cyA9IGFycmF5RnJvbShidWZmZXIpO1xuICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYnVmZmVyQ29kZVBvaW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGNvZGVQb2ludCA9IGJ1ZmZlckNvZGVQb2ludHNbaV07XG4gICAgICAgICAgICBpZiAoY29kZVBvaW50ID09ICc6JyAmJiAhc2VlblBhc3N3b3JkVG9rZW4pIHtcbiAgICAgICAgICAgICAgc2VlblBhc3N3b3JkVG9rZW4gPSB0cnVlO1xuICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBlbmNvZGVkQ29kZVBvaW50cyA9IHBlcmNlbnRFbmNvZGUoY29kZVBvaW50LCB1c2VyaW5mb1BlcmNlbnRFbmNvZGVTZXQpO1xuICAgICAgICAgICAgaWYgKHNlZW5QYXNzd29yZFRva2VuKSB1cmwucGFzc3dvcmQgKz0gZW5jb2RlZENvZGVQb2ludHM7XG4gICAgICAgICAgICBlbHNlIHVybC51c2VybmFtZSArPSBlbmNvZGVkQ29kZVBvaW50cztcbiAgICAgICAgICB9XG4gICAgICAgICAgYnVmZmVyID0gJyc7XG4gICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgY2hhciA9PSBFT0YgfHwgY2hhciA9PSAnLycgfHwgY2hhciA9PSAnPycgfHwgY2hhciA9PSAnIycgfHxcbiAgICAgICAgICAoY2hhciA9PSAnXFxcXCcgJiYgaXNTcGVjaWFsKHVybCkpXG4gICAgICAgICkge1xuICAgICAgICAgIGlmIChzZWVuQXQgJiYgYnVmZmVyID09ICcnKSByZXR1cm4gSU5WQUxJRF9BVVRIT1JJVFk7XG4gICAgICAgICAgcG9pbnRlciAtPSBhcnJheUZyb20oYnVmZmVyKS5sZW5ndGggKyAxO1xuICAgICAgICAgIGJ1ZmZlciA9ICcnO1xuICAgICAgICAgIHN0YXRlID0gSE9TVDtcbiAgICAgICAgfSBlbHNlIGJ1ZmZlciArPSBjaGFyO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBIT1NUOlxuICAgICAgY2FzZSBIT1NUTkFNRTpcbiAgICAgICAgaWYgKHN0YXRlT3ZlcnJpZGUgJiYgdXJsLnNjaGVtZSA9PSAnZmlsZScpIHtcbiAgICAgICAgICBzdGF0ZSA9IEZJTEVfSE9TVDtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfSBlbHNlIGlmIChjaGFyID09ICc6JyAmJiAhc2VlbkJyYWNrZXQpIHtcbiAgICAgICAgICBpZiAoYnVmZmVyID09ICcnKSByZXR1cm4gSU5WQUxJRF9IT1NUO1xuICAgICAgICAgIGZhaWx1cmUgPSBwYXJzZUhvc3QodXJsLCBidWZmZXIpO1xuICAgICAgICAgIGlmIChmYWlsdXJlKSByZXR1cm4gZmFpbHVyZTtcbiAgICAgICAgICBidWZmZXIgPSAnJztcbiAgICAgICAgICBzdGF0ZSA9IFBPUlQ7XG4gICAgICAgICAgaWYgKHN0YXRlT3ZlcnJpZGUgPT0gSE9TVE5BTUUpIHJldHVybjtcbiAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICBjaGFyID09IEVPRiB8fCBjaGFyID09ICcvJyB8fCBjaGFyID09ICc/JyB8fCBjaGFyID09ICcjJyB8fFxuICAgICAgICAgIChjaGFyID09ICdcXFxcJyAmJiBpc1NwZWNpYWwodXJsKSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgaWYgKGlzU3BlY2lhbCh1cmwpICYmIGJ1ZmZlciA9PSAnJykgcmV0dXJuIElOVkFMSURfSE9TVDtcbiAgICAgICAgICBpZiAoc3RhdGVPdmVycmlkZSAmJiBidWZmZXIgPT0gJycgJiYgKGluY2x1ZGVzQ3JlZGVudGlhbHModXJsKSB8fCB1cmwucG9ydCAhPT0gbnVsbCkpIHJldHVybjtcbiAgICAgICAgICBmYWlsdXJlID0gcGFyc2VIb3N0KHVybCwgYnVmZmVyKTtcbiAgICAgICAgICBpZiAoZmFpbHVyZSkgcmV0dXJuIGZhaWx1cmU7XG4gICAgICAgICAgYnVmZmVyID0gJyc7XG4gICAgICAgICAgc3RhdGUgPSBQQVRIX1NUQVJUO1xuICAgICAgICAgIGlmIChzdGF0ZU92ZXJyaWRlKSByZXR1cm47XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKGNoYXIgPT0gJ1snKSBzZWVuQnJhY2tldCA9IHRydWU7XG4gICAgICAgICAgZWxzZSBpZiAoY2hhciA9PSAnXScpIHNlZW5CcmFja2V0ID0gZmFsc2U7XG4gICAgICAgICAgYnVmZmVyICs9IGNoYXI7XG4gICAgICAgIH0gYnJlYWs7XG5cbiAgICAgIGNhc2UgUE9SVDpcbiAgICAgICAgaWYgKERJR0lULnRlc3QoY2hhcikpIHtcbiAgICAgICAgICBidWZmZXIgKz0gY2hhcjtcbiAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICBjaGFyID09IEVPRiB8fCBjaGFyID09ICcvJyB8fCBjaGFyID09ICc/JyB8fCBjaGFyID09ICcjJyB8fFxuICAgICAgICAgIChjaGFyID09ICdcXFxcJyAmJiBpc1NwZWNpYWwodXJsKSkgfHxcbiAgICAgICAgICBzdGF0ZU92ZXJyaWRlXG4gICAgICAgICkge1xuICAgICAgICAgIGlmIChidWZmZXIgIT0gJycpIHtcbiAgICAgICAgICAgIHZhciBwb3J0ID0gcGFyc2VJbnQoYnVmZmVyLCAxMCk7XG4gICAgICAgICAgICBpZiAocG9ydCA+IDB4RkZGRikgcmV0dXJuIElOVkFMSURfUE9SVDtcbiAgICAgICAgICAgIHVybC5wb3J0ID0gKGlzU3BlY2lhbCh1cmwpICYmIHBvcnQgPT09IHNwZWNpYWxTY2hlbWVzW3VybC5zY2hlbWVdKSA/IG51bGwgOiBwb3J0O1xuICAgICAgICAgICAgYnVmZmVyID0gJyc7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzdGF0ZU92ZXJyaWRlKSByZXR1cm47XG4gICAgICAgICAgc3RhdGUgPSBQQVRIX1NUQVJUO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9IGVsc2UgcmV0dXJuIElOVkFMSURfUE9SVDtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgRklMRTpcbiAgICAgICAgdXJsLnNjaGVtZSA9ICdmaWxlJztcbiAgICAgICAgaWYgKGNoYXIgPT0gJy8nIHx8IGNoYXIgPT0gJ1xcXFwnKSBzdGF0ZSA9IEZJTEVfU0xBU0g7XG4gICAgICAgIGVsc2UgaWYgKGJhc2UgJiYgYmFzZS5zY2hlbWUgPT0gJ2ZpbGUnKSB7XG4gICAgICAgICAgaWYgKGNoYXIgPT0gRU9GKSB7XG4gICAgICAgICAgICB1cmwuaG9zdCA9IGJhc2UuaG9zdDtcbiAgICAgICAgICAgIHVybC5wYXRoID0gYmFzZS5wYXRoLnNsaWNlKCk7XG4gICAgICAgICAgICB1cmwucXVlcnkgPSBiYXNlLnF1ZXJ5O1xuICAgICAgICAgIH0gZWxzZSBpZiAoY2hhciA9PSAnPycpIHtcbiAgICAgICAgICAgIHVybC5ob3N0ID0gYmFzZS5ob3N0O1xuICAgICAgICAgICAgdXJsLnBhdGggPSBiYXNlLnBhdGguc2xpY2UoKTtcbiAgICAgICAgICAgIHVybC5xdWVyeSA9ICcnO1xuICAgICAgICAgICAgc3RhdGUgPSBRVUVSWTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGNoYXIgPT0gJyMnKSB7XG4gICAgICAgICAgICB1cmwuaG9zdCA9IGJhc2UuaG9zdDtcbiAgICAgICAgICAgIHVybC5wYXRoID0gYmFzZS5wYXRoLnNsaWNlKCk7XG4gICAgICAgICAgICB1cmwucXVlcnkgPSBiYXNlLnF1ZXJ5O1xuICAgICAgICAgICAgdXJsLmZyYWdtZW50ID0gJyc7XG4gICAgICAgICAgICBzdGF0ZSA9IEZSQUdNRU5UO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoIXN0YXJ0c1dpdGhXaW5kb3dzRHJpdmVMZXR0ZXIoY29kZVBvaW50cy5zbGljZShwb2ludGVyKS5qb2luKCcnKSkpIHtcbiAgICAgICAgICAgICAgdXJsLmhvc3QgPSBiYXNlLmhvc3Q7XG4gICAgICAgICAgICAgIHVybC5wYXRoID0gYmFzZS5wYXRoLnNsaWNlKCk7XG4gICAgICAgICAgICAgIHNob3J0ZW5VUkxzUGF0aCh1cmwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3RhdGUgPSBQQVRIO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN0YXRlID0gUEFUSDtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfSBicmVhaztcblxuICAgICAgY2FzZSBGSUxFX1NMQVNIOlxuICAgICAgICBpZiAoY2hhciA9PSAnLycgfHwgY2hhciA9PSAnXFxcXCcpIHtcbiAgICAgICAgICBzdGF0ZSA9IEZJTEVfSE9TVDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBpZiAoYmFzZSAmJiBiYXNlLnNjaGVtZSA9PSAnZmlsZScgJiYgIXN0YXJ0c1dpdGhXaW5kb3dzRHJpdmVMZXR0ZXIoY29kZVBvaW50cy5zbGljZShwb2ludGVyKS5qb2luKCcnKSkpIHtcbiAgICAgICAgICBpZiAoaXNXaW5kb3dzRHJpdmVMZXR0ZXIoYmFzZS5wYXRoWzBdLCB0cnVlKSkgdXJsLnBhdGgucHVzaChiYXNlLnBhdGhbMF0pO1xuICAgICAgICAgIGVsc2UgdXJsLmhvc3QgPSBiYXNlLmhvc3Q7XG4gICAgICAgIH1cbiAgICAgICAgc3RhdGUgPSBQQVRIO1xuICAgICAgICBjb250aW51ZTtcblxuICAgICAgY2FzZSBGSUxFX0hPU1Q6XG4gICAgICAgIGlmIChjaGFyID09IEVPRiB8fCBjaGFyID09ICcvJyB8fCBjaGFyID09ICdcXFxcJyB8fCBjaGFyID09ICc/JyB8fCBjaGFyID09ICcjJykge1xuICAgICAgICAgIGlmICghc3RhdGVPdmVycmlkZSAmJiBpc1dpbmRvd3NEcml2ZUxldHRlcihidWZmZXIpKSB7XG4gICAgICAgICAgICBzdGF0ZSA9IFBBVEg7XG4gICAgICAgICAgfSBlbHNlIGlmIChidWZmZXIgPT0gJycpIHtcbiAgICAgICAgICAgIHVybC5ob3N0ID0gJyc7XG4gICAgICAgICAgICBpZiAoc3RhdGVPdmVycmlkZSkgcmV0dXJuO1xuICAgICAgICAgICAgc3RhdGUgPSBQQVRIX1NUQVJUO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmYWlsdXJlID0gcGFyc2VIb3N0KHVybCwgYnVmZmVyKTtcbiAgICAgICAgICAgIGlmIChmYWlsdXJlKSByZXR1cm4gZmFpbHVyZTtcbiAgICAgICAgICAgIGlmICh1cmwuaG9zdCA9PSAnbG9jYWxob3N0JykgdXJsLmhvc3QgPSAnJztcbiAgICAgICAgICAgIGlmIChzdGF0ZU92ZXJyaWRlKSByZXR1cm47XG4gICAgICAgICAgICBidWZmZXIgPSAnJztcbiAgICAgICAgICAgIHN0YXRlID0gUEFUSF9TVEFSVDtcbiAgICAgICAgICB9IGNvbnRpbnVlO1xuICAgICAgICB9IGVsc2UgYnVmZmVyICs9IGNoYXI7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIFBBVEhfU1RBUlQ6XG4gICAgICAgIGlmIChpc1NwZWNpYWwodXJsKSkge1xuICAgICAgICAgIHN0YXRlID0gUEFUSDtcbiAgICAgICAgICBpZiAoY2hhciAhPSAnLycgJiYgY2hhciAhPSAnXFxcXCcpIGNvbnRpbnVlO1xuICAgICAgICB9IGVsc2UgaWYgKCFzdGF0ZU92ZXJyaWRlICYmIGNoYXIgPT0gJz8nKSB7XG4gICAgICAgICAgdXJsLnF1ZXJ5ID0gJyc7XG4gICAgICAgICAgc3RhdGUgPSBRVUVSWTtcbiAgICAgICAgfSBlbHNlIGlmICghc3RhdGVPdmVycmlkZSAmJiBjaGFyID09ICcjJykge1xuICAgICAgICAgIHVybC5mcmFnbWVudCA9ICcnO1xuICAgICAgICAgIHN0YXRlID0gRlJBR01FTlQ7XG4gICAgICAgIH0gZWxzZSBpZiAoY2hhciAhPSBFT0YpIHtcbiAgICAgICAgICBzdGF0ZSA9IFBBVEg7XG4gICAgICAgICAgaWYgKGNoYXIgIT0gJy8nKSBjb250aW51ZTtcbiAgICAgICAgfSBicmVhaztcblxuICAgICAgY2FzZSBQQVRIOlxuICAgICAgICBpZiAoXG4gICAgICAgICAgY2hhciA9PSBFT0YgfHwgY2hhciA9PSAnLycgfHxcbiAgICAgICAgICAoY2hhciA9PSAnXFxcXCcgJiYgaXNTcGVjaWFsKHVybCkpIHx8XG4gICAgICAgICAgKCFzdGF0ZU92ZXJyaWRlICYmIChjaGFyID09ICc/JyB8fCBjaGFyID09ICcjJykpXG4gICAgICAgICkge1xuICAgICAgICAgIGlmIChpc0RvdWJsZURvdChidWZmZXIpKSB7XG4gICAgICAgICAgICBzaG9ydGVuVVJMc1BhdGgodXJsKTtcbiAgICAgICAgICAgIGlmIChjaGFyICE9ICcvJyAmJiAhKGNoYXIgPT0gJ1xcXFwnICYmIGlzU3BlY2lhbCh1cmwpKSkge1xuICAgICAgICAgICAgICB1cmwucGF0aC5wdXNoKCcnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgaWYgKGlzU2luZ2xlRG90KGJ1ZmZlcikpIHtcbiAgICAgICAgICAgIGlmIChjaGFyICE9ICcvJyAmJiAhKGNoYXIgPT0gJ1xcXFwnICYmIGlzU3BlY2lhbCh1cmwpKSkge1xuICAgICAgICAgICAgICB1cmwucGF0aC5wdXNoKCcnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKHVybC5zY2hlbWUgPT0gJ2ZpbGUnICYmICF1cmwucGF0aC5sZW5ndGggJiYgaXNXaW5kb3dzRHJpdmVMZXR0ZXIoYnVmZmVyKSkge1xuICAgICAgICAgICAgICBpZiAodXJsLmhvc3QpIHVybC5ob3N0ID0gJyc7XG4gICAgICAgICAgICAgIGJ1ZmZlciA9IGJ1ZmZlci5jaGFyQXQoMCkgKyAnOic7IC8vIG5vcm1hbGl6ZSB3aW5kb3dzIGRyaXZlIGxldHRlclxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdXJsLnBhdGgucHVzaChidWZmZXIpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBidWZmZXIgPSAnJztcbiAgICAgICAgICBpZiAodXJsLnNjaGVtZSA9PSAnZmlsZScgJiYgKGNoYXIgPT0gRU9GIHx8IGNoYXIgPT0gJz8nIHx8IGNoYXIgPT0gJyMnKSkge1xuICAgICAgICAgICAgd2hpbGUgKHVybC5wYXRoLmxlbmd0aCA+IDEgJiYgdXJsLnBhdGhbMF0gPT09ICcnKSB7XG4gICAgICAgICAgICAgIHVybC5wYXRoLnNoaWZ0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChjaGFyID09ICc/Jykge1xuICAgICAgICAgICAgdXJsLnF1ZXJ5ID0gJyc7XG4gICAgICAgICAgICBzdGF0ZSA9IFFVRVJZO1xuICAgICAgICAgIH0gZWxzZSBpZiAoY2hhciA9PSAnIycpIHtcbiAgICAgICAgICAgIHVybC5mcmFnbWVudCA9ICcnO1xuICAgICAgICAgICAgc3RhdGUgPSBGUkFHTUVOVDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYnVmZmVyICs9IHBlcmNlbnRFbmNvZGUoY2hhciwgcGF0aFBlcmNlbnRFbmNvZGVTZXQpO1xuICAgICAgICB9IGJyZWFrO1xuXG4gICAgICBjYXNlIENBTk5PVF9CRV9BX0JBU0VfVVJMX1BBVEg6XG4gICAgICAgIGlmIChjaGFyID09ICc/Jykge1xuICAgICAgICAgIHVybC5xdWVyeSA9ICcnO1xuICAgICAgICAgIHN0YXRlID0gUVVFUlk7XG4gICAgICAgIH0gZWxzZSBpZiAoY2hhciA9PSAnIycpIHtcbiAgICAgICAgICB1cmwuZnJhZ21lbnQgPSAnJztcbiAgICAgICAgICBzdGF0ZSA9IEZSQUdNRU5UO1xuICAgICAgICB9IGVsc2UgaWYgKGNoYXIgIT0gRU9GKSB7XG4gICAgICAgICAgdXJsLnBhdGhbMF0gKz0gcGVyY2VudEVuY29kZShjaGFyLCBDMENvbnRyb2xQZXJjZW50RW5jb2RlU2V0KTtcbiAgICAgICAgfSBicmVhaztcblxuICAgICAgY2FzZSBRVUVSWTpcbiAgICAgICAgaWYgKCFzdGF0ZU92ZXJyaWRlICYmIGNoYXIgPT0gJyMnKSB7XG4gICAgICAgICAgdXJsLmZyYWdtZW50ID0gJyc7XG4gICAgICAgICAgc3RhdGUgPSBGUkFHTUVOVDtcbiAgICAgICAgfSBlbHNlIGlmIChjaGFyICE9IEVPRikge1xuICAgICAgICAgIGlmIChjaGFyID09IFwiJ1wiICYmIGlzU3BlY2lhbCh1cmwpKSB1cmwucXVlcnkgKz0gJyUyNyc7XG4gICAgICAgICAgZWxzZSBpZiAoY2hhciA9PSAnIycpIHVybC5xdWVyeSArPSAnJTIzJztcbiAgICAgICAgICBlbHNlIHVybC5xdWVyeSArPSBwZXJjZW50RW5jb2RlKGNoYXIsIEMwQ29udHJvbFBlcmNlbnRFbmNvZGVTZXQpO1xuICAgICAgICB9IGJyZWFrO1xuXG4gICAgICBjYXNlIEZSQUdNRU5UOlxuICAgICAgICBpZiAoY2hhciAhPSBFT0YpIHVybC5mcmFnbWVudCArPSBwZXJjZW50RW5jb2RlKGNoYXIsIGZyYWdtZW50UGVyY2VudEVuY29kZVNldCk7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIHBvaW50ZXIrKztcbiAgfVxufTtcblxuLy8gYFVSTGAgY29uc3RydWN0b3Jcbi8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jdXJsLWNsYXNzXG52YXIgVVJMQ29uc3RydWN0b3IgPSBmdW5jdGlvbiBVUkwodXJsIC8qICwgYmFzZSAqLykge1xuICB2YXIgdGhhdCA9IGFuSW5zdGFuY2UodGhpcywgVVJMQ29uc3RydWN0b3IsICdVUkwnKTtcbiAgdmFyIGJhc2UgPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZDtcbiAgdmFyIHVybFN0cmluZyA9IFN0cmluZyh1cmwpO1xuICB2YXIgc3RhdGUgPSBzZXRJbnRlcm5hbFN0YXRlKHRoYXQsIHsgdHlwZTogJ1VSTCcgfSk7XG4gIHZhciBiYXNlU3RhdGUsIGZhaWx1cmU7XG4gIGlmIChiYXNlICE9PSB1bmRlZmluZWQpIHtcbiAgICBpZiAoYmFzZSBpbnN0YW5jZW9mIFVSTENvbnN0cnVjdG9yKSBiYXNlU3RhdGUgPSBnZXRJbnRlcm5hbFVSTFN0YXRlKGJhc2UpO1xuICAgIGVsc2Uge1xuICAgICAgZmFpbHVyZSA9IHBhcnNlVVJMKGJhc2VTdGF0ZSA9IHt9LCBTdHJpbmcoYmFzZSkpO1xuICAgICAgaWYgKGZhaWx1cmUpIHRocm93IFR5cGVFcnJvcihmYWlsdXJlKTtcbiAgICB9XG4gIH1cbiAgZmFpbHVyZSA9IHBhcnNlVVJMKHN0YXRlLCB1cmxTdHJpbmcsIG51bGwsIGJhc2VTdGF0ZSk7XG4gIGlmIChmYWlsdXJlKSB0aHJvdyBUeXBlRXJyb3IoZmFpbHVyZSk7XG4gIHZhciBzZWFyY2hQYXJhbXMgPSBzdGF0ZS5zZWFyY2hQYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKCk7XG4gIHZhciBzZWFyY2hQYXJhbXNTdGF0ZSA9IGdldEludGVybmFsU2VhcmNoUGFyYW1zU3RhdGUoc2VhcmNoUGFyYW1zKTtcbiAgc2VhcmNoUGFyYW1zU3RhdGUudXBkYXRlU2VhcmNoUGFyYW1zKHN0YXRlLnF1ZXJ5KTtcbiAgc2VhcmNoUGFyYW1zU3RhdGUudXBkYXRlVVJMID0gZnVuY3Rpb24gKCkge1xuICAgIHN0YXRlLnF1ZXJ5ID0gU3RyaW5nKHNlYXJjaFBhcmFtcykgfHwgbnVsbDtcbiAgfTtcbiAgaWYgKCFERVNDUklQVE9SUykge1xuICAgIHRoYXQuaHJlZiA9IHNlcmlhbGl6ZVVSTC5jYWxsKHRoYXQpO1xuICAgIHRoYXQub3JpZ2luID0gZ2V0T3JpZ2luLmNhbGwodGhhdCk7XG4gICAgdGhhdC5wcm90b2NvbCA9IGdldFByb3RvY29sLmNhbGwodGhhdCk7XG4gICAgdGhhdC51c2VybmFtZSA9IGdldFVzZXJuYW1lLmNhbGwodGhhdCk7XG4gICAgdGhhdC5wYXNzd29yZCA9IGdldFBhc3N3b3JkLmNhbGwodGhhdCk7XG4gICAgdGhhdC5ob3N0ID0gZ2V0SG9zdC5jYWxsKHRoYXQpO1xuICAgIHRoYXQuaG9zdG5hbWUgPSBnZXRIb3N0bmFtZS5jYWxsKHRoYXQpO1xuICAgIHRoYXQucG9ydCA9IGdldFBvcnQuY2FsbCh0aGF0KTtcbiAgICB0aGF0LnBhdGhuYW1lID0gZ2V0UGF0aG5hbWUuY2FsbCh0aGF0KTtcbiAgICB0aGF0LnNlYXJjaCA9IGdldFNlYXJjaC5jYWxsKHRoYXQpO1xuICAgIHRoYXQuc2VhcmNoUGFyYW1zID0gZ2V0U2VhcmNoUGFyYW1zLmNhbGwodGhhdCk7XG4gICAgdGhhdC5oYXNoID0gZ2V0SGFzaC5jYWxsKHRoYXQpO1xuICB9XG59O1xuXG52YXIgVVJMUHJvdG90eXBlID0gVVJMQ29uc3RydWN0b3IucHJvdG90eXBlO1xuXG52YXIgc2VyaWFsaXplVVJMID0gZnVuY3Rpb24gKCkge1xuICB2YXIgdXJsID0gZ2V0SW50ZXJuYWxVUkxTdGF0ZSh0aGlzKTtcbiAgdmFyIHNjaGVtZSA9IHVybC5zY2hlbWU7XG4gIHZhciB1c2VybmFtZSA9IHVybC51c2VybmFtZTtcbiAgdmFyIHBhc3N3b3JkID0gdXJsLnBhc3N3b3JkO1xuICB2YXIgaG9zdCA9IHVybC5ob3N0O1xuICB2YXIgcG9ydCA9IHVybC5wb3J0O1xuICB2YXIgcGF0aCA9IHVybC5wYXRoO1xuICB2YXIgcXVlcnkgPSB1cmwucXVlcnk7XG4gIHZhciBmcmFnbWVudCA9IHVybC5mcmFnbWVudDtcbiAgdmFyIG91dHB1dCA9IHNjaGVtZSArICc6JztcbiAgaWYgKGhvc3QgIT09IG51bGwpIHtcbiAgICBvdXRwdXQgKz0gJy8vJztcbiAgICBpZiAoaW5jbHVkZXNDcmVkZW50aWFscyh1cmwpKSB7XG4gICAgICBvdXRwdXQgKz0gdXNlcm5hbWUgKyAocGFzc3dvcmQgPyAnOicgKyBwYXNzd29yZCA6ICcnKSArICdAJztcbiAgICB9XG4gICAgb3V0cHV0ICs9IHNlcmlhbGl6ZUhvc3QoaG9zdCk7XG4gICAgaWYgKHBvcnQgIT09IG51bGwpIG91dHB1dCArPSAnOicgKyBwb3J0O1xuICB9IGVsc2UgaWYgKHNjaGVtZSA9PSAnZmlsZScpIG91dHB1dCArPSAnLy8nO1xuICBvdXRwdXQgKz0gdXJsLmNhbm5vdEJlQUJhc2VVUkwgPyBwYXRoWzBdIDogcGF0aC5sZW5ndGggPyAnLycgKyBwYXRoLmpvaW4oJy8nKSA6ICcnO1xuICBpZiAocXVlcnkgIT09IG51bGwpIG91dHB1dCArPSAnPycgKyBxdWVyeTtcbiAgaWYgKGZyYWdtZW50ICE9PSBudWxsKSBvdXRwdXQgKz0gJyMnICsgZnJhZ21lbnQ7XG4gIHJldHVybiBvdXRwdXQ7XG59O1xuXG52YXIgZ2V0T3JpZ2luID0gZnVuY3Rpb24gKCkge1xuICB2YXIgdXJsID0gZ2V0SW50ZXJuYWxVUkxTdGF0ZSh0aGlzKTtcbiAgdmFyIHNjaGVtZSA9IHVybC5zY2hlbWU7XG4gIHZhciBwb3J0ID0gdXJsLnBvcnQ7XG4gIGlmIChzY2hlbWUgPT0gJ2Jsb2InKSB0cnkge1xuICAgIHJldHVybiBuZXcgVVJMKHNjaGVtZS5wYXRoWzBdKS5vcmlnaW47XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuICdudWxsJztcbiAgfVxuICBpZiAoc2NoZW1lID09ICdmaWxlJyB8fCAhaXNTcGVjaWFsKHVybCkpIHJldHVybiAnbnVsbCc7XG4gIHJldHVybiBzY2hlbWUgKyAnOi8vJyArIHNlcmlhbGl6ZUhvc3QodXJsLmhvc3QpICsgKHBvcnQgIT09IG51bGwgPyAnOicgKyBwb3J0IDogJycpO1xufTtcblxudmFyIGdldFByb3RvY29sID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gZ2V0SW50ZXJuYWxVUkxTdGF0ZSh0aGlzKS5zY2hlbWUgKyAnOic7XG59O1xuXG52YXIgZ2V0VXNlcm5hbWUgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBnZXRJbnRlcm5hbFVSTFN0YXRlKHRoaXMpLnVzZXJuYW1lO1xufTtcblxudmFyIGdldFBhc3N3b3JkID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gZ2V0SW50ZXJuYWxVUkxTdGF0ZSh0aGlzKS5wYXNzd29yZDtcbn07XG5cbnZhciBnZXRIb3N0ID0gZnVuY3Rpb24gKCkge1xuICB2YXIgdXJsID0gZ2V0SW50ZXJuYWxVUkxTdGF0ZSh0aGlzKTtcbiAgdmFyIGhvc3QgPSB1cmwuaG9zdDtcbiAgdmFyIHBvcnQgPSB1cmwucG9ydDtcbiAgcmV0dXJuIGhvc3QgPT09IG51bGwgPyAnJ1xuICAgIDogcG9ydCA9PT0gbnVsbCA/IHNlcmlhbGl6ZUhvc3QoaG9zdClcbiAgICA6IHNlcmlhbGl6ZUhvc3QoaG9zdCkgKyAnOicgKyBwb3J0O1xufTtcblxudmFyIGdldEhvc3RuYW1lID0gZnVuY3Rpb24gKCkge1xuICB2YXIgaG9zdCA9IGdldEludGVybmFsVVJMU3RhdGUodGhpcykuaG9zdDtcbiAgcmV0dXJuIGhvc3QgPT09IG51bGwgPyAnJyA6IHNlcmlhbGl6ZUhvc3QoaG9zdCk7XG59O1xuXG52YXIgZ2V0UG9ydCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHBvcnQgPSBnZXRJbnRlcm5hbFVSTFN0YXRlKHRoaXMpLnBvcnQ7XG4gIHJldHVybiBwb3J0ID09PSBudWxsID8gJycgOiBTdHJpbmcocG9ydCk7XG59O1xuXG52YXIgZ2V0UGF0aG5hbWUgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciB1cmwgPSBnZXRJbnRlcm5hbFVSTFN0YXRlKHRoaXMpO1xuICB2YXIgcGF0aCA9IHVybC5wYXRoO1xuICByZXR1cm4gdXJsLmNhbm5vdEJlQUJhc2VVUkwgPyBwYXRoWzBdIDogcGF0aC5sZW5ndGggPyAnLycgKyBwYXRoLmpvaW4oJy8nKSA6ICcnO1xufTtcblxudmFyIGdldFNlYXJjaCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHF1ZXJ5ID0gZ2V0SW50ZXJuYWxVUkxTdGF0ZSh0aGlzKS5xdWVyeTtcbiAgcmV0dXJuIHF1ZXJ5ID8gJz8nICsgcXVlcnkgOiAnJztcbn07XG5cbnZhciBnZXRTZWFyY2hQYXJhbXMgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBnZXRJbnRlcm5hbFVSTFN0YXRlKHRoaXMpLnNlYXJjaFBhcmFtcztcbn07XG5cbnZhciBnZXRIYXNoID0gZnVuY3Rpb24gKCkge1xuICB2YXIgZnJhZ21lbnQgPSBnZXRJbnRlcm5hbFVSTFN0YXRlKHRoaXMpLmZyYWdtZW50O1xuICByZXR1cm4gZnJhZ21lbnQgPyAnIycgKyBmcmFnbWVudCA6ICcnO1xufTtcblxudmFyIGFjY2Vzc29yRGVzY3JpcHRvciA9IGZ1bmN0aW9uIChnZXR0ZXIsIHNldHRlcikge1xuICByZXR1cm4geyBnZXQ6IGdldHRlciwgc2V0OiBzZXR0ZXIsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgZW51bWVyYWJsZTogdHJ1ZSB9O1xufTtcblxuaWYgKERFU0NSSVBUT1JTKSB7XG4gIGRlZmluZVByb3BlcnRpZXMoVVJMUHJvdG90eXBlLCB7XG4gICAgLy8gYFVSTC5wcm90b3R5cGUuaHJlZmAgYWNjZXNzb3JzIHBhaXJcbiAgICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmwtaHJlZlxuICAgIGhyZWY6IGFjY2Vzc29yRGVzY3JpcHRvcihzZXJpYWxpemVVUkwsIGZ1bmN0aW9uIChocmVmKSB7XG4gICAgICB2YXIgdXJsID0gZ2V0SW50ZXJuYWxVUkxTdGF0ZSh0aGlzKTtcbiAgICAgIHZhciB1cmxTdHJpbmcgPSBTdHJpbmcoaHJlZik7XG4gICAgICB2YXIgZmFpbHVyZSA9IHBhcnNlVVJMKHVybCwgdXJsU3RyaW5nKTtcbiAgICAgIGlmIChmYWlsdXJlKSB0aHJvdyBUeXBlRXJyb3IoZmFpbHVyZSk7XG4gICAgICBnZXRJbnRlcm5hbFNlYXJjaFBhcmFtc1N0YXRlKHVybC5zZWFyY2hQYXJhbXMpLnVwZGF0ZVNlYXJjaFBhcmFtcyh1cmwucXVlcnkpO1xuICAgIH0pLFxuICAgIC8vIGBVUkwucHJvdG90eXBlLm9yaWdpbmAgZ2V0dGVyXG4gICAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsLW9yaWdpblxuICAgIG9yaWdpbjogYWNjZXNzb3JEZXNjcmlwdG9yKGdldE9yaWdpbiksXG4gICAgLy8gYFVSTC5wcm90b3R5cGUucHJvdG9jb2xgIGFjY2Vzc29ycyBwYWlyXG4gICAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsLXByb3RvY29sXG4gICAgcHJvdG9jb2w6IGFjY2Vzc29yRGVzY3JpcHRvcihnZXRQcm90b2NvbCwgZnVuY3Rpb24gKHByb3RvY29sKSB7XG4gICAgICB2YXIgdXJsID0gZ2V0SW50ZXJuYWxVUkxTdGF0ZSh0aGlzKTtcbiAgICAgIHBhcnNlVVJMKHVybCwgU3RyaW5nKHByb3RvY29sKSArICc6JywgU0NIRU1FX1NUQVJUKTtcbiAgICB9KSxcbiAgICAvLyBgVVJMLnByb3RvdHlwZS51c2VybmFtZWAgYWNjZXNzb3JzIHBhaXJcbiAgICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmwtdXNlcm5hbWVcbiAgICB1c2VybmFtZTogYWNjZXNzb3JEZXNjcmlwdG9yKGdldFVzZXJuYW1lLCBmdW5jdGlvbiAodXNlcm5hbWUpIHtcbiAgICAgIHZhciB1cmwgPSBnZXRJbnRlcm5hbFVSTFN0YXRlKHRoaXMpO1xuICAgICAgdmFyIGNvZGVQb2ludHMgPSBhcnJheUZyb20oU3RyaW5nKHVzZXJuYW1lKSk7XG4gICAgICBpZiAoY2Fubm90SGF2ZVVzZXJuYW1lUGFzc3dvcmRQb3J0KHVybCkpIHJldHVybjtcbiAgICAgIHVybC51c2VybmFtZSA9ICcnO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb2RlUG9pbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHVybC51c2VybmFtZSArPSBwZXJjZW50RW5jb2RlKGNvZGVQb2ludHNbaV0sIHVzZXJpbmZvUGVyY2VudEVuY29kZVNldCk7XG4gICAgICB9XG4gICAgfSksXG4gICAgLy8gYFVSTC5wcm90b3R5cGUucGFzc3dvcmRgIGFjY2Vzc29ycyBwYWlyXG4gICAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsLXBhc3N3b3JkXG4gICAgcGFzc3dvcmQ6IGFjY2Vzc29yRGVzY3JpcHRvcihnZXRQYXNzd29yZCwgZnVuY3Rpb24gKHBhc3N3b3JkKSB7XG4gICAgICB2YXIgdXJsID0gZ2V0SW50ZXJuYWxVUkxTdGF0ZSh0aGlzKTtcbiAgICAgIHZhciBjb2RlUG9pbnRzID0gYXJyYXlGcm9tKFN0cmluZyhwYXNzd29yZCkpO1xuICAgICAgaWYgKGNhbm5vdEhhdmVVc2VybmFtZVBhc3N3b3JkUG9ydCh1cmwpKSByZXR1cm47XG4gICAgICB1cmwucGFzc3dvcmQgPSAnJztcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29kZVBvaW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICB1cmwucGFzc3dvcmQgKz0gcGVyY2VudEVuY29kZShjb2RlUG9pbnRzW2ldLCB1c2VyaW5mb1BlcmNlbnRFbmNvZGVTZXQpO1xuICAgICAgfVxuICAgIH0pLFxuICAgIC8vIGBVUkwucHJvdG90eXBlLmhvc3RgIGFjY2Vzc29ycyBwYWlyXG4gICAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsLWhvc3RcbiAgICBob3N0OiBhY2Nlc3NvckRlc2NyaXB0b3IoZ2V0SG9zdCwgZnVuY3Rpb24gKGhvc3QpIHtcbiAgICAgIHZhciB1cmwgPSBnZXRJbnRlcm5hbFVSTFN0YXRlKHRoaXMpO1xuICAgICAgaWYgKHVybC5jYW5ub3RCZUFCYXNlVVJMKSByZXR1cm47XG4gICAgICBwYXJzZVVSTCh1cmwsIFN0cmluZyhob3N0KSwgSE9TVCk7XG4gICAgfSksXG4gICAgLy8gYFVSTC5wcm90b3R5cGUuaG9zdG5hbWVgIGFjY2Vzc29ycyBwYWlyXG4gICAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsLWhvc3RuYW1lXG4gICAgaG9zdG5hbWU6IGFjY2Vzc29yRGVzY3JpcHRvcihnZXRIb3N0bmFtZSwgZnVuY3Rpb24gKGhvc3RuYW1lKSB7XG4gICAgICB2YXIgdXJsID0gZ2V0SW50ZXJuYWxVUkxTdGF0ZSh0aGlzKTtcbiAgICAgIGlmICh1cmwuY2Fubm90QmVBQmFzZVVSTCkgcmV0dXJuO1xuICAgICAgcGFyc2VVUkwodXJsLCBTdHJpbmcoaG9zdG5hbWUpLCBIT1NUTkFNRSk7XG4gICAgfSksXG4gICAgLy8gYFVSTC5wcm90b3R5cGUucG9ydGAgYWNjZXNzb3JzIHBhaXJcbiAgICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmwtcG9ydFxuICAgIHBvcnQ6IGFjY2Vzc29yRGVzY3JpcHRvcihnZXRQb3J0LCBmdW5jdGlvbiAocG9ydCkge1xuICAgICAgdmFyIHVybCA9IGdldEludGVybmFsVVJMU3RhdGUodGhpcyk7XG4gICAgICBpZiAoY2Fubm90SGF2ZVVzZXJuYW1lUGFzc3dvcmRQb3J0KHVybCkpIHJldHVybjtcbiAgICAgIHBvcnQgPSBTdHJpbmcocG9ydCk7XG4gICAgICBpZiAocG9ydCA9PSAnJykgdXJsLnBvcnQgPSBudWxsO1xuICAgICAgZWxzZSBwYXJzZVVSTCh1cmwsIHBvcnQsIFBPUlQpO1xuICAgIH0pLFxuICAgIC8vIGBVUkwucHJvdG90eXBlLnBhdGhuYW1lYCBhY2Nlc3NvcnMgcGFpclxuICAgIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybC1wYXRobmFtZVxuICAgIHBhdGhuYW1lOiBhY2Nlc3NvckRlc2NyaXB0b3IoZ2V0UGF0aG5hbWUsIGZ1bmN0aW9uIChwYXRobmFtZSkge1xuICAgICAgdmFyIHVybCA9IGdldEludGVybmFsVVJMU3RhdGUodGhpcyk7XG4gICAgICBpZiAodXJsLmNhbm5vdEJlQUJhc2VVUkwpIHJldHVybjtcbiAgICAgIHVybC5wYXRoID0gW107XG4gICAgICBwYXJzZVVSTCh1cmwsIHBhdGhuYW1lICsgJycsIFBBVEhfU1RBUlQpO1xuICAgIH0pLFxuICAgIC8vIGBVUkwucHJvdG90eXBlLnNlYXJjaGAgYWNjZXNzb3JzIHBhaXJcbiAgICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmwtc2VhcmNoXG4gICAgc2VhcmNoOiBhY2Nlc3NvckRlc2NyaXB0b3IoZ2V0U2VhcmNoLCBmdW5jdGlvbiAoc2VhcmNoKSB7XG4gICAgICB2YXIgdXJsID0gZ2V0SW50ZXJuYWxVUkxTdGF0ZSh0aGlzKTtcbiAgICAgIHNlYXJjaCA9IFN0cmluZyhzZWFyY2gpO1xuICAgICAgaWYgKHNlYXJjaCA9PSAnJykge1xuICAgICAgICB1cmwucXVlcnkgPSBudWxsO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKCc/JyA9PSBzZWFyY2guY2hhckF0KDApKSBzZWFyY2ggPSBzZWFyY2guc2xpY2UoMSk7XG4gICAgICAgIHVybC5xdWVyeSA9ICcnO1xuICAgICAgICBwYXJzZVVSTCh1cmwsIHNlYXJjaCwgUVVFUlkpO1xuICAgICAgfVxuICAgICAgZ2V0SW50ZXJuYWxTZWFyY2hQYXJhbXNTdGF0ZSh1cmwuc2VhcmNoUGFyYW1zKS51cGRhdGVTZWFyY2hQYXJhbXModXJsLnF1ZXJ5KTtcbiAgICB9KSxcbiAgICAvLyBgVVJMLnByb3RvdHlwZS5zZWFyY2hQYXJhbXNgIGdldHRlclxuICAgIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybC1zZWFyY2hwYXJhbXNcbiAgICBzZWFyY2hQYXJhbXM6IGFjY2Vzc29yRGVzY3JpcHRvcihnZXRTZWFyY2hQYXJhbXMpLFxuICAgIC8vIGBVUkwucHJvdG90eXBlLmhhc2hgIGFjY2Vzc29ycyBwYWlyXG4gICAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsLWhhc2hcbiAgICBoYXNoOiBhY2Nlc3NvckRlc2NyaXB0b3IoZ2V0SGFzaCwgZnVuY3Rpb24gKGhhc2gpIHtcbiAgICAgIHZhciB1cmwgPSBnZXRJbnRlcm5hbFVSTFN0YXRlKHRoaXMpO1xuICAgICAgaGFzaCA9IFN0cmluZyhoYXNoKTtcbiAgICAgIGlmIChoYXNoID09ICcnKSB7XG4gICAgICAgIHVybC5mcmFnbWVudCA9IG51bGw7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmICgnIycgPT0gaGFzaC5jaGFyQXQoMCkpIGhhc2ggPSBoYXNoLnNsaWNlKDEpO1xuICAgICAgdXJsLmZyYWdtZW50ID0gJyc7XG4gICAgICBwYXJzZVVSTCh1cmwsIGhhc2gsIEZSQUdNRU5UKTtcbiAgICB9KVxuICB9KTtcbn1cblxuLy8gYFVSTC5wcm90b3R5cGUudG9KU09OYCBtZXRob2Rcbi8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybC10b2pzb25cbnJlZGVmaW5lKFVSTFByb3RvdHlwZSwgJ3RvSlNPTicsIGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgcmV0dXJuIHNlcmlhbGl6ZVVSTC5jYWxsKHRoaXMpO1xufSwgeyBlbnVtZXJhYmxlOiB0cnVlIH0pO1xuXG4vLyBgVVJMLnByb3RvdHlwZS50b1N0cmluZ2AgbWV0aG9kXG4vLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI1VSTC1zdHJpbmdpZmljYXRpb24tYmVoYXZpb3JcbnJlZGVmaW5lKFVSTFByb3RvdHlwZSwgJ3RvU3RyaW5nJywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gIHJldHVybiBzZXJpYWxpemVVUkwuY2FsbCh0aGlzKTtcbn0sIHsgZW51bWVyYWJsZTogdHJ1ZSB9KTtcblxuaWYgKE5hdGl2ZVVSTCkge1xuICB2YXIgbmF0aXZlQ3JlYXRlT2JqZWN0VVJMID0gTmF0aXZlVVJMLmNyZWF0ZU9iamVjdFVSTDtcbiAgdmFyIG5hdGl2ZVJldm9rZU9iamVjdFVSTCA9IE5hdGl2ZVVSTC5yZXZva2VPYmplY3RVUkw7XG4gIC8vIGBVUkwuY3JlYXRlT2JqZWN0VVJMYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1VSTC9jcmVhdGVPYmplY3RVUkxcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzIC0tIHJlcXVpcmVkIGZvciBgLmxlbmd0aGBcbiAgaWYgKG5hdGl2ZUNyZWF0ZU9iamVjdFVSTCkgcmVkZWZpbmUoVVJMQ29uc3RydWN0b3IsICdjcmVhdGVPYmplY3RVUkwnLCBmdW5jdGlvbiBjcmVhdGVPYmplY3RVUkwoYmxvYikge1xuICAgIHJldHVybiBuYXRpdmVDcmVhdGVPYmplY3RVUkwuYXBwbHkoTmF0aXZlVVJMLCBhcmd1bWVudHMpO1xuICB9KTtcbiAgLy8gYFVSTC5yZXZva2VPYmplY3RVUkxgIG1ldGhvZFxuICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvVVJML3Jldm9rZU9iamVjdFVSTFxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnMgLS0gcmVxdWlyZWQgZm9yIGAubGVuZ3RoYFxuICBpZiAobmF0aXZlUmV2b2tlT2JqZWN0VVJMKSByZWRlZmluZShVUkxDb25zdHJ1Y3RvciwgJ3Jldm9rZU9iamVjdFVSTCcsIGZ1bmN0aW9uIHJldm9rZU9iamVjdFVSTCh1cmwpIHtcbiAgICByZXR1cm4gbmF0aXZlUmV2b2tlT2JqZWN0VVJMLmFwcGx5KE5hdGl2ZVVSTCwgYXJndW1lbnRzKTtcbiAgfSk7XG59XG5cbnNldFRvU3RyaW5nVGFnKFVSTENvbnN0cnVjdG9yLCAnVVJMJyk7XG5cbiQoeyBnbG9iYWw6IHRydWUsIGZvcmNlZDogIVVTRV9OQVRJVkVfVVJMLCBzaGFtOiAhREVTQ1JJUFRPUlMgfSwge1xuICBVUkw6IFVSTENvbnN0cnVjdG9yXG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xuXG4vLyBgVVJMLnByb3RvdHlwZS50b0pTT05gIG1ldGhvZFxuLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsLXRvanNvblxuJCh7IHRhcmdldDogJ1VSTCcsIHByb3RvOiB0cnVlLCBlbnVtZXJhYmxlOiB0cnVlIH0sIHtcbiAgdG9KU09OOiBmdW5jdGlvbiB0b0pTT04oKSB7XG4gICAgcmV0dXJuIFVSTC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh0aGlzKTtcbiAgfVxufSk7XG4iLCJyZXF1aXJlKCcuLi9lcycpO1xucmVxdWlyZSgnLi4vd2ViJyk7XG52YXIgcGF0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9wYXRoJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gcGF0aDtcbiIsInJlcXVpcmUoJy4uL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5mb3ItZWFjaCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy93ZWIuZG9tLWNvbGxlY3Rpb25zLml0ZXJhdG9yJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL3dlYi5pbW1lZGlhdGUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvd2ViLnF1ZXVlLW1pY3JvdGFzaycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy93ZWIudGltZXJzJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL3dlYi51cmwnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvd2ViLnVybC50by1qc29uJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL3dlYi51cmwtc2VhcmNoLXBhcmFtcycpO1xudmFyIHBhdGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcGF0aCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHBhdGg7XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNC1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbnZhciBydW50aW1lID0gKGZ1bmN0aW9uIChleHBvcnRzKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gIHZhciBPcCA9IE9iamVjdC5wcm90b3R5cGU7XG4gIHZhciBoYXNPd24gPSBPcC5oYXNPd25Qcm9wZXJ0eTtcbiAgdmFyIHVuZGVmaW5lZDsgLy8gTW9yZSBjb21wcmVzc2libGUgdGhhbiB2b2lkIDAuXG4gIHZhciAkU3ltYm9sID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiID8gU3ltYm9sIDoge307XG4gIHZhciBpdGVyYXRvclN5bWJvbCA9ICRTeW1ib2wuaXRlcmF0b3IgfHwgXCJAQGl0ZXJhdG9yXCI7XG4gIHZhciBhc3luY0l0ZXJhdG9yU3ltYm9sID0gJFN5bWJvbC5hc3luY0l0ZXJhdG9yIHx8IFwiQEBhc3luY0l0ZXJhdG9yXCI7XG4gIHZhciB0b1N0cmluZ1RhZ1N5bWJvbCA9ICRTeW1ib2wudG9TdHJpbmdUYWcgfHwgXCJAQHRvU3RyaW5nVGFnXCI7XG5cbiAgZnVuY3Rpb24gZGVmaW5lKG9iaiwga2V5LCB2YWx1ZSkge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgcmV0dXJuIG9ialtrZXldO1xuICB9XG4gIHRyeSB7XG4gICAgLy8gSUUgOCBoYXMgYSBicm9rZW4gT2JqZWN0LmRlZmluZVByb3BlcnR5IHRoYXQgb25seSB3b3JrcyBvbiBET00gb2JqZWN0cy5cbiAgICBkZWZpbmUoe30sIFwiXCIpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBkZWZpbmUgPSBmdW5jdGlvbihvYmosIGtleSwgdmFsdWUpIHtcbiAgICAgIHJldHVybiBvYmpba2V5XSA9IHZhbHVlO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiB3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSB7XG4gICAgLy8gSWYgb3V0ZXJGbiBwcm92aWRlZCBhbmQgb3V0ZXJGbi5wcm90b3R5cGUgaXMgYSBHZW5lcmF0b3IsIHRoZW4gb3V0ZXJGbi5wcm90b3R5cGUgaW5zdGFuY2VvZiBHZW5lcmF0b3IuXG4gICAgdmFyIHByb3RvR2VuZXJhdG9yID0gb3V0ZXJGbiAmJiBvdXRlckZuLnByb3RvdHlwZSBpbnN0YW5jZW9mIEdlbmVyYXRvciA/IG91dGVyRm4gOiBHZW5lcmF0b3I7XG4gICAgdmFyIGdlbmVyYXRvciA9IE9iamVjdC5jcmVhdGUocHJvdG9HZW5lcmF0b3IucHJvdG90eXBlKTtcbiAgICB2YXIgY29udGV4dCA9IG5ldyBDb250ZXh0KHRyeUxvY3NMaXN0IHx8IFtdKTtcblxuICAgIC8vIFRoZSAuX2ludm9rZSBtZXRob2QgdW5pZmllcyB0aGUgaW1wbGVtZW50YXRpb25zIG9mIHRoZSAubmV4dCxcbiAgICAvLyAudGhyb3csIGFuZCAucmV0dXJuIG1ldGhvZHMuXG4gICAgZ2VuZXJhdG9yLl9pbnZva2UgPSBtYWtlSW52b2tlTWV0aG9kKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpO1xuXG4gICAgcmV0dXJuIGdlbmVyYXRvcjtcbiAgfVxuICBleHBvcnRzLndyYXAgPSB3cmFwO1xuXG4gIC8vIFRyeS9jYXRjaCBoZWxwZXIgdG8gbWluaW1pemUgZGVvcHRpbWl6YXRpb25zLiBSZXR1cm5zIGEgY29tcGxldGlvblxuICAvLyByZWNvcmQgbGlrZSBjb250ZXh0LnRyeUVudHJpZXNbaV0uY29tcGxldGlvbi4gVGhpcyBpbnRlcmZhY2UgY291bGRcbiAgLy8gaGF2ZSBiZWVuIChhbmQgd2FzIHByZXZpb3VzbHkpIGRlc2lnbmVkIHRvIHRha2UgYSBjbG9zdXJlIHRvIGJlXG4gIC8vIGludm9rZWQgd2l0aG91dCBhcmd1bWVudHMsIGJ1dCBpbiBhbGwgdGhlIGNhc2VzIHdlIGNhcmUgYWJvdXQgd2VcbiAgLy8gYWxyZWFkeSBoYXZlIGFuIGV4aXN0aW5nIG1ldGhvZCB3ZSB3YW50IHRvIGNhbGwsIHNvIHRoZXJlJ3Mgbm8gbmVlZFxuICAvLyB0byBjcmVhdGUgYSBuZXcgZnVuY3Rpb24gb2JqZWN0LiBXZSBjYW4gZXZlbiBnZXQgYXdheSB3aXRoIGFzc3VtaW5nXG4gIC8vIHRoZSBtZXRob2QgdGFrZXMgZXhhY3RseSBvbmUgYXJndW1lbnQsIHNpbmNlIHRoYXQgaGFwcGVucyB0byBiZSB0cnVlXG4gIC8vIGluIGV2ZXJ5IGNhc2UsIHNvIHdlIGRvbid0IGhhdmUgdG8gdG91Y2ggdGhlIGFyZ3VtZW50cyBvYmplY3QuIFRoZVxuICAvLyBvbmx5IGFkZGl0aW9uYWwgYWxsb2NhdGlvbiByZXF1aXJlZCBpcyB0aGUgY29tcGxldGlvbiByZWNvcmQsIHdoaWNoXG4gIC8vIGhhcyBhIHN0YWJsZSBzaGFwZSBhbmQgc28gaG9wZWZ1bGx5IHNob3VsZCBiZSBjaGVhcCB0byBhbGxvY2F0ZS5cbiAgZnVuY3Rpb24gdHJ5Q2F0Y2goZm4sIG9iaiwgYXJnKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiB7IHR5cGU6IFwibm9ybWFsXCIsIGFyZzogZm4uY2FsbChvYmosIGFyZykgfTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiB7IHR5cGU6IFwidGhyb3dcIiwgYXJnOiBlcnIgfTtcbiAgICB9XG4gIH1cblxuICB2YXIgR2VuU3RhdGVTdXNwZW5kZWRTdGFydCA9IFwic3VzcGVuZGVkU3RhcnRcIjtcbiAgdmFyIEdlblN0YXRlU3VzcGVuZGVkWWllbGQgPSBcInN1c3BlbmRlZFlpZWxkXCI7XG4gIHZhciBHZW5TdGF0ZUV4ZWN1dGluZyA9IFwiZXhlY3V0aW5nXCI7XG4gIHZhciBHZW5TdGF0ZUNvbXBsZXRlZCA9IFwiY29tcGxldGVkXCI7XG5cbiAgLy8gUmV0dXJuaW5nIHRoaXMgb2JqZWN0IGZyb20gdGhlIGlubmVyRm4gaGFzIHRoZSBzYW1lIGVmZmVjdCBhc1xuICAvLyBicmVha2luZyBvdXQgb2YgdGhlIGRpc3BhdGNoIHN3aXRjaCBzdGF0ZW1lbnQuXG4gIHZhciBDb250aW51ZVNlbnRpbmVsID0ge307XG5cbiAgLy8gRHVtbXkgY29uc3RydWN0b3IgZnVuY3Rpb25zIHRoYXQgd2UgdXNlIGFzIHRoZSAuY29uc3RydWN0b3IgYW5kXG4gIC8vIC5jb25zdHJ1Y3Rvci5wcm90b3R5cGUgcHJvcGVydGllcyBmb3IgZnVuY3Rpb25zIHRoYXQgcmV0dXJuIEdlbmVyYXRvclxuICAvLyBvYmplY3RzLiBGb3IgZnVsbCBzcGVjIGNvbXBsaWFuY2UsIHlvdSBtYXkgd2lzaCB0byBjb25maWd1cmUgeW91clxuICAvLyBtaW5pZmllciBub3QgdG8gbWFuZ2xlIHRoZSBuYW1lcyBvZiB0aGVzZSB0d28gZnVuY3Rpb25zLlxuICBmdW5jdGlvbiBHZW5lcmF0b3IoKSB7fVxuICBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvbigpIHt9XG4gIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKCkge31cblxuICAvLyBUaGlzIGlzIGEgcG9seWZpbGwgZm9yICVJdGVyYXRvclByb3RvdHlwZSUgZm9yIGVudmlyb25tZW50cyB0aGF0XG4gIC8vIGRvbid0IG5hdGl2ZWx5IHN1cHBvcnQgaXQuXG4gIHZhciBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xuICBJdGVyYXRvclByb3RvdHlwZVtpdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgdmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xuICB2YXIgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90byAmJiBnZXRQcm90byhnZXRQcm90byh2YWx1ZXMoW10pKSk7XG4gIGlmIChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSAmJlxuICAgICAgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgIT09IE9wICYmXG4gICAgICBoYXNPd24uY2FsbChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSwgaXRlcmF0b3JTeW1ib2wpKSB7XG4gICAgLy8gVGhpcyBlbnZpcm9ubWVudCBoYXMgYSBuYXRpdmUgJUl0ZXJhdG9yUHJvdG90eXBlJTsgdXNlIGl0IGluc3RlYWRcbiAgICAvLyBvZiB0aGUgcG9seWZpbGwuXG4gICAgSXRlcmF0b3JQcm90b3R5cGUgPSBOYXRpdmVJdGVyYXRvclByb3RvdHlwZTtcbiAgfVxuXG4gIHZhciBHcCA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLnByb3RvdHlwZSA9XG4gICAgR2VuZXJhdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUpO1xuICBHZW5lcmF0b3JGdW5jdGlvbi5wcm90b3R5cGUgPSBHcC5jb25zdHJ1Y3RvciA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlO1xuICBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEdlbmVyYXRvckZ1bmN0aW9uO1xuICBHZW5lcmF0b3JGdW5jdGlvbi5kaXNwbGF5TmFtZSA9IGRlZmluZShcbiAgICBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSxcbiAgICB0b1N0cmluZ1RhZ1N5bWJvbCxcbiAgICBcIkdlbmVyYXRvckZ1bmN0aW9uXCJcbiAgKTtcblxuICAvLyBIZWxwZXIgZm9yIGRlZmluaW5nIHRoZSAubmV4dCwgLnRocm93LCBhbmQgLnJldHVybiBtZXRob2RzIG9mIHRoZVxuICAvLyBJdGVyYXRvciBpbnRlcmZhY2UgaW4gdGVybXMgb2YgYSBzaW5nbGUgLl9pbnZva2UgbWV0aG9kLlxuICBmdW5jdGlvbiBkZWZpbmVJdGVyYXRvck1ldGhvZHMocHJvdG90eXBlKSB7XG4gICAgW1wibmV4dFwiLCBcInRocm93XCIsIFwicmV0dXJuXCJdLmZvckVhY2goZnVuY3Rpb24obWV0aG9kKSB7XG4gICAgICBkZWZpbmUocHJvdG90eXBlLCBtZXRob2QsIGZ1bmN0aW9uKGFyZykge1xuICAgICAgICByZXR1cm4gdGhpcy5faW52b2tlKG1ldGhvZCwgYXJnKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgZXhwb3J0cy5pc0dlbmVyYXRvckZ1bmN0aW9uID0gZnVuY3Rpb24oZ2VuRnVuKSB7XG4gICAgdmFyIGN0b3IgPSB0eXBlb2YgZ2VuRnVuID09PSBcImZ1bmN0aW9uXCIgJiYgZ2VuRnVuLmNvbnN0cnVjdG9yO1xuICAgIHJldHVybiBjdG9yXG4gICAgICA/IGN0b3IgPT09IEdlbmVyYXRvckZ1bmN0aW9uIHx8XG4gICAgICAgIC8vIEZvciB0aGUgbmF0aXZlIEdlbmVyYXRvckZ1bmN0aW9uIGNvbnN0cnVjdG9yLCB0aGUgYmVzdCB3ZSBjYW5cbiAgICAgICAgLy8gZG8gaXMgdG8gY2hlY2sgaXRzIC5uYW1lIHByb3BlcnR5LlxuICAgICAgICAoY3Rvci5kaXNwbGF5TmFtZSB8fCBjdG9yLm5hbWUpID09PSBcIkdlbmVyYXRvckZ1bmN0aW9uXCJcbiAgICAgIDogZmFsc2U7XG4gIH07XG5cbiAgZXhwb3J0cy5tYXJrID0gZnVuY3Rpb24oZ2VuRnVuKSB7XG4gICAgaWYgKE9iamVjdC5zZXRQcm90b3R5cGVPZikge1xuICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKGdlbkZ1biwgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBnZW5GdW4uX19wcm90b19fID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGU7XG4gICAgICBkZWZpbmUoZ2VuRnVuLCB0b1N0cmluZ1RhZ1N5bWJvbCwgXCJHZW5lcmF0b3JGdW5jdGlvblwiKTtcbiAgICB9XG4gICAgZ2VuRnVuLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoR3ApO1xuICAgIHJldHVybiBnZW5GdW47XG4gIH07XG5cbiAgLy8gV2l0aGluIHRoZSBib2R5IG9mIGFueSBhc3luYyBmdW5jdGlvbiwgYGF3YWl0IHhgIGlzIHRyYW5zZm9ybWVkIHRvXG4gIC8vIGB5aWVsZCByZWdlbmVyYXRvclJ1bnRpbWUuYXdyYXAoeClgLCBzbyB0aGF0IHRoZSBydW50aW1lIGNhbiB0ZXN0XG4gIC8vIGBoYXNPd24uY2FsbCh2YWx1ZSwgXCJfX2F3YWl0XCIpYCB0byBkZXRlcm1pbmUgaWYgdGhlIHlpZWxkZWQgdmFsdWUgaXNcbiAgLy8gbWVhbnQgdG8gYmUgYXdhaXRlZC5cbiAgZXhwb3J0cy5hd3JhcCA9IGZ1bmN0aW9uKGFyZykge1xuICAgIHJldHVybiB7IF9fYXdhaXQ6IGFyZyB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIEFzeW5jSXRlcmF0b3IoZ2VuZXJhdG9yLCBQcm9taXNlSW1wbCkge1xuICAgIGZ1bmN0aW9uIGludm9rZShtZXRob2QsIGFyZywgcmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2goZ2VuZXJhdG9yW21ldGhvZF0sIGdlbmVyYXRvciwgYXJnKTtcbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHJlamVjdChyZWNvcmQuYXJnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciByZXN1bHQgPSByZWNvcmQuYXJnO1xuICAgICAgICB2YXIgdmFsdWUgPSByZXN1bHQudmFsdWU7XG4gICAgICAgIGlmICh2YWx1ZSAmJlxuICAgICAgICAgICAgdHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiICYmXG4gICAgICAgICAgICBoYXNPd24uY2FsbCh2YWx1ZSwgXCJfX2F3YWl0XCIpKSB7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2VJbXBsLnJlc29sdmUodmFsdWUuX19hd2FpdCkudGhlbihmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgaW52b2tlKFwibmV4dFwiLCB2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgIGludm9rZShcInRocm93XCIsIGVyciwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBQcm9taXNlSW1wbC5yZXNvbHZlKHZhbHVlKS50aGVuKGZ1bmN0aW9uKHVud3JhcHBlZCkge1xuICAgICAgICAgIC8vIFdoZW4gYSB5aWVsZGVkIFByb21pc2UgaXMgcmVzb2x2ZWQsIGl0cyBmaW5hbCB2YWx1ZSBiZWNvbWVzXG4gICAgICAgICAgLy8gdGhlIC52YWx1ZSBvZiB0aGUgUHJvbWlzZTx7dmFsdWUsZG9uZX0+IHJlc3VsdCBmb3IgdGhlXG4gICAgICAgICAgLy8gY3VycmVudCBpdGVyYXRpb24uXG4gICAgICAgICAgcmVzdWx0LnZhbHVlID0gdW53cmFwcGVkO1xuICAgICAgICAgIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgfSwgZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgICAgICAvLyBJZiBhIHJlamVjdGVkIFByb21pc2Ugd2FzIHlpZWxkZWQsIHRocm93IHRoZSByZWplY3Rpb24gYmFja1xuICAgICAgICAgIC8vIGludG8gdGhlIGFzeW5jIGdlbmVyYXRvciBmdW5jdGlvbiBzbyBpdCBjYW4gYmUgaGFuZGxlZCB0aGVyZS5cbiAgICAgICAgICByZXR1cm4gaW52b2tlKFwidGhyb3dcIiwgZXJyb3IsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBwcmV2aW91c1Byb21pc2U7XG5cbiAgICBmdW5jdGlvbiBlbnF1ZXVlKG1ldGhvZCwgYXJnKSB7XG4gICAgICBmdW5jdGlvbiBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZygpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlSW1wbChmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICBpbnZva2UobWV0aG9kLCBhcmcsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcHJldmlvdXNQcm9taXNlID1cbiAgICAgICAgLy8gSWYgZW5xdWV1ZSBoYXMgYmVlbiBjYWxsZWQgYmVmb3JlLCB0aGVuIHdlIHdhbnQgdG8gd2FpdCB1bnRpbFxuICAgICAgICAvLyBhbGwgcHJldmlvdXMgUHJvbWlzZXMgaGF2ZSBiZWVuIHJlc29sdmVkIGJlZm9yZSBjYWxsaW5nIGludm9rZSxcbiAgICAgICAgLy8gc28gdGhhdCByZXN1bHRzIGFyZSBhbHdheXMgZGVsaXZlcmVkIGluIHRoZSBjb3JyZWN0IG9yZGVyLiBJZlxuICAgICAgICAvLyBlbnF1ZXVlIGhhcyBub3QgYmVlbiBjYWxsZWQgYmVmb3JlLCB0aGVuIGl0IGlzIGltcG9ydGFudCB0b1xuICAgICAgICAvLyBjYWxsIGludm9rZSBpbW1lZGlhdGVseSwgd2l0aG91dCB3YWl0aW5nIG9uIGEgY2FsbGJhY2sgdG8gZmlyZSxcbiAgICAgICAgLy8gc28gdGhhdCB0aGUgYXN5bmMgZ2VuZXJhdG9yIGZ1bmN0aW9uIGhhcyB0aGUgb3Bwb3J0dW5pdHkgdG8gZG9cbiAgICAgICAgLy8gYW55IG5lY2Vzc2FyeSBzZXR1cCBpbiBhIHByZWRpY3RhYmxlIHdheS4gVGhpcyBwcmVkaWN0YWJpbGl0eVxuICAgICAgICAvLyBpcyB3aHkgdGhlIFByb21pc2UgY29uc3RydWN0b3Igc3luY2hyb25vdXNseSBpbnZva2VzIGl0c1xuICAgICAgICAvLyBleGVjdXRvciBjYWxsYmFjaywgYW5kIHdoeSBhc3luYyBmdW5jdGlvbnMgc3luY2hyb25vdXNseVxuICAgICAgICAvLyBleGVjdXRlIGNvZGUgYmVmb3JlIHRoZSBmaXJzdCBhd2FpdC4gU2luY2Ugd2UgaW1wbGVtZW50IHNpbXBsZVxuICAgICAgICAvLyBhc3luYyBmdW5jdGlvbnMgaW4gdGVybXMgb2YgYXN5bmMgZ2VuZXJhdG9ycywgaXQgaXMgZXNwZWNpYWxseVxuICAgICAgICAvLyBpbXBvcnRhbnQgdG8gZ2V0IHRoaXMgcmlnaHQsIGV2ZW4gdGhvdWdoIGl0IHJlcXVpcmVzIGNhcmUuXG4gICAgICAgIHByZXZpb3VzUHJvbWlzZSA/IHByZXZpb3VzUHJvbWlzZS50aGVuKFxuICAgICAgICAgIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnLFxuICAgICAgICAgIC8vIEF2b2lkIHByb3BhZ2F0aW5nIGZhaWx1cmVzIHRvIFByb21pc2VzIHJldHVybmVkIGJ5IGxhdGVyXG4gICAgICAgICAgLy8gaW52b2NhdGlvbnMgb2YgdGhlIGl0ZXJhdG9yLlxuICAgICAgICAgIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnXG4gICAgICAgICkgOiBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZygpO1xuICAgIH1cblxuICAgIC8vIERlZmluZSB0aGUgdW5pZmllZCBoZWxwZXIgbWV0aG9kIHRoYXQgaXMgdXNlZCB0byBpbXBsZW1lbnQgLm5leHQsXG4gICAgLy8gLnRocm93LCBhbmQgLnJldHVybiAoc2VlIGRlZmluZUl0ZXJhdG9yTWV0aG9kcykuXG4gICAgdGhpcy5faW52b2tlID0gZW5xdWV1ZTtcbiAgfVxuXG4gIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhBc3luY0l0ZXJhdG9yLnByb3RvdHlwZSk7XG4gIEFzeW5jSXRlcmF0b3IucHJvdG90eXBlW2FzeW5jSXRlcmF0b3JTeW1ib2xdID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuICBleHBvcnRzLkFzeW5jSXRlcmF0b3IgPSBBc3luY0l0ZXJhdG9yO1xuXG4gIC8vIE5vdGUgdGhhdCBzaW1wbGUgYXN5bmMgZnVuY3Rpb25zIGFyZSBpbXBsZW1lbnRlZCBvbiB0b3Agb2ZcbiAgLy8gQXN5bmNJdGVyYXRvciBvYmplY3RzOyB0aGV5IGp1c3QgcmV0dXJuIGEgUHJvbWlzZSBmb3IgdGhlIHZhbHVlIG9mXG4gIC8vIHRoZSBmaW5hbCByZXN1bHQgcHJvZHVjZWQgYnkgdGhlIGl0ZXJhdG9yLlxuICBleHBvcnRzLmFzeW5jID0gZnVuY3Rpb24oaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QsIFByb21pc2VJbXBsKSB7XG4gICAgaWYgKFByb21pc2VJbXBsID09PSB2b2lkIDApIFByb21pc2VJbXBsID0gUHJvbWlzZTtcblxuICAgIHZhciBpdGVyID0gbmV3IEFzeW5jSXRlcmF0b3IoXG4gICAgICB3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSxcbiAgICAgIFByb21pc2VJbXBsXG4gICAgKTtcblxuICAgIHJldHVybiBleHBvcnRzLmlzR2VuZXJhdG9yRnVuY3Rpb24ob3V0ZXJGbilcbiAgICAgID8gaXRlciAvLyBJZiBvdXRlckZuIGlzIGEgZ2VuZXJhdG9yLCByZXR1cm4gdGhlIGZ1bGwgaXRlcmF0b3IuXG4gICAgICA6IGl0ZXIubmV4dCgpLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdC5kb25lID8gcmVzdWx0LnZhbHVlIDogaXRlci5uZXh0KCk7XG4gICAgICAgIH0pO1xuICB9O1xuXG4gIGZ1bmN0aW9uIG1ha2VJbnZva2VNZXRob2QoaW5uZXJGbiwgc2VsZiwgY29udGV4dCkge1xuICAgIHZhciBzdGF0ZSA9IEdlblN0YXRlU3VzcGVuZGVkU3RhcnQ7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gaW52b2tlKG1ldGhvZCwgYXJnKSB7XG4gICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlRXhlY3V0aW5nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IHJ1bm5pbmdcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVDb21wbGV0ZWQpIHtcbiAgICAgICAgaWYgKG1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgdGhyb3cgYXJnO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQmUgZm9yZ2l2aW5nLCBwZXIgMjUuMy4zLjMuMyBvZiB0aGUgc3BlYzpcbiAgICAgICAgLy8gaHR0cHM6Ly9wZW9wbGUubW96aWxsYS5vcmcvfmpvcmVuZG9yZmYvZXM2LWRyYWZ0Lmh0bWwjc2VjLWdlbmVyYXRvcnJlc3VtZVxuICAgICAgICByZXR1cm4gZG9uZVJlc3VsdCgpO1xuICAgICAgfVxuXG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IG1ldGhvZDtcbiAgICAgIGNvbnRleHQuYXJnID0gYXJnO1xuXG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICB2YXIgZGVsZWdhdGUgPSBjb250ZXh0LmRlbGVnYXRlO1xuICAgICAgICBpZiAoZGVsZWdhdGUpIHtcbiAgICAgICAgICB2YXIgZGVsZWdhdGVSZXN1bHQgPSBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KTtcbiAgICAgICAgICBpZiAoZGVsZWdhdGVSZXN1bHQpIHtcbiAgICAgICAgICAgIGlmIChkZWxlZ2F0ZVJlc3VsdCA9PT0gQ29udGludWVTZW50aW5lbCkgY29udGludWU7XG4gICAgICAgICAgICByZXR1cm4gZGVsZWdhdGVSZXN1bHQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcIm5leHRcIikge1xuICAgICAgICAgIC8vIFNldHRpbmcgY29udGV4dC5fc2VudCBmb3IgbGVnYWN5IHN1cHBvcnQgb2YgQmFiZWwnc1xuICAgICAgICAgIC8vIGZ1bmN0aW9uLnNlbnQgaW1wbGVtZW50YXRpb24uXG4gICAgICAgICAgY29udGV4dC5zZW50ID0gY29udGV4dC5fc2VudCA9IGNvbnRleHQuYXJnO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVTdXNwZW5kZWRTdGFydCkge1xuICAgICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUNvbXBsZXRlZDtcbiAgICAgICAgICAgIHRocm93IGNvbnRleHQuYXJnO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnRleHQuZGlzcGF0Y2hFeGNlcHRpb24oY29udGV4dC5hcmcpO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoY29udGV4dC5tZXRob2QgPT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgICBjb250ZXh0LmFicnVwdChcInJldHVyblwiLCBjb250ZXh0LmFyZyk7XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0ZSA9IEdlblN0YXRlRXhlY3V0aW5nO1xuXG4gICAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChpbm5lckZuLCBzZWxmLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcIm5vcm1hbFwiKSB7XG4gICAgICAgICAgLy8gSWYgYW4gZXhjZXB0aW9uIGlzIHRocm93biBmcm9tIGlubmVyRm4sIHdlIGxlYXZlIHN0YXRlID09PVxuICAgICAgICAgIC8vIEdlblN0YXRlRXhlY3V0aW5nIGFuZCBsb29wIGJhY2sgZm9yIGFub3RoZXIgaW52b2NhdGlvbi5cbiAgICAgICAgICBzdGF0ZSA9IGNvbnRleHQuZG9uZVxuICAgICAgICAgICAgPyBHZW5TdGF0ZUNvbXBsZXRlZFxuICAgICAgICAgICAgOiBHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkO1xuXG4gICAgICAgICAgaWYgKHJlY29yZC5hcmcgPT09IENvbnRpbnVlU2VudGluZWwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB2YWx1ZTogcmVjb3JkLmFyZyxcbiAgICAgICAgICAgIGRvbmU6IGNvbnRleHQuZG9uZVxuICAgICAgICAgIH07XG5cbiAgICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUNvbXBsZXRlZDtcbiAgICAgICAgICAvLyBEaXNwYXRjaCB0aGUgZXhjZXB0aW9uIGJ5IGxvb3BpbmcgYmFjayBhcm91bmQgdG8gdGhlXG4gICAgICAgICAgLy8gY29udGV4dC5kaXNwYXRjaEV4Y2VwdGlvbihjb250ZXh0LmFyZykgY2FsbCBhYm92ZS5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgLy8gQ2FsbCBkZWxlZ2F0ZS5pdGVyYXRvcltjb250ZXh0Lm1ldGhvZF0oY29udGV4dC5hcmcpIGFuZCBoYW5kbGUgdGhlXG4gIC8vIHJlc3VsdCwgZWl0aGVyIGJ5IHJldHVybmluZyBhIHsgdmFsdWUsIGRvbmUgfSByZXN1bHQgZnJvbSB0aGVcbiAgLy8gZGVsZWdhdGUgaXRlcmF0b3IsIG9yIGJ5IG1vZGlmeWluZyBjb250ZXh0Lm1ldGhvZCBhbmQgY29udGV4dC5hcmcsXG4gIC8vIHNldHRpbmcgY29udGV4dC5kZWxlZ2F0ZSB0byBudWxsLCBhbmQgcmV0dXJuaW5nIHRoZSBDb250aW51ZVNlbnRpbmVsLlxuICBmdW5jdGlvbiBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KSB7XG4gICAgdmFyIG1ldGhvZCA9IGRlbGVnYXRlLml0ZXJhdG9yW2NvbnRleHQubWV0aG9kXTtcbiAgICBpZiAobWV0aG9kID09PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIEEgLnRocm93IG9yIC5yZXR1cm4gd2hlbiB0aGUgZGVsZWdhdGUgaXRlcmF0b3IgaGFzIG5vIC50aHJvd1xuICAgICAgLy8gbWV0aG9kIGFsd2F5cyB0ZXJtaW5hdGVzIHRoZSB5aWVsZCogbG9vcC5cbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuXG4gICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAvLyBOb3RlOiBbXCJyZXR1cm5cIl0gbXVzdCBiZSB1c2VkIGZvciBFUzMgcGFyc2luZyBjb21wYXRpYmlsaXR5LlxuICAgICAgICBpZiAoZGVsZWdhdGUuaXRlcmF0b3JbXCJyZXR1cm5cIl0pIHtcbiAgICAgICAgICAvLyBJZiB0aGUgZGVsZWdhdGUgaXRlcmF0b3IgaGFzIGEgcmV0dXJuIG1ldGhvZCwgZ2l2ZSBpdCBhXG4gICAgICAgICAgLy8gY2hhbmNlIHRvIGNsZWFuIHVwLlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJyZXR1cm5cIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KTtcblxuICAgICAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgICAvLyBJZiBtYXliZUludm9rZURlbGVnYXRlKGNvbnRleHQpIGNoYW5nZWQgY29udGV4dC5tZXRob2QgZnJvbVxuICAgICAgICAgICAgLy8gXCJyZXR1cm5cIiB0byBcInRocm93XCIsIGxldCB0aGF0IG92ZXJyaWRlIHRoZSBUeXBlRXJyb3IgYmVsb3cuXG4gICAgICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgICAgY29udGV4dC5hcmcgPSBuZXcgVHlwZUVycm9yKFxuICAgICAgICAgIFwiVGhlIGl0ZXJhdG9yIGRvZXMgbm90IHByb3ZpZGUgYSAndGhyb3cnIG1ldGhvZFwiKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKG1ldGhvZCwgZGVsZWdhdGUuaXRlcmF0b3IsIGNvbnRleHQuYXJnKTtcblxuICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgIGNvbnRleHQuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgdmFyIGluZm8gPSByZWNvcmQuYXJnO1xuXG4gICAgaWYgKCEgaW5mbykge1xuICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICBjb250ZXh0LmFyZyA9IG5ldyBUeXBlRXJyb3IoXCJpdGVyYXRvciByZXN1bHQgaXMgbm90IGFuIG9iamVjdFwiKTtcbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgaWYgKGluZm8uZG9uZSkge1xuICAgICAgLy8gQXNzaWduIHRoZSByZXN1bHQgb2YgdGhlIGZpbmlzaGVkIGRlbGVnYXRlIHRvIHRoZSB0ZW1wb3JhcnlcbiAgICAgIC8vIHZhcmlhYmxlIHNwZWNpZmllZCBieSBkZWxlZ2F0ZS5yZXN1bHROYW1lIChzZWUgZGVsZWdhdGVZaWVsZCkuXG4gICAgICBjb250ZXh0W2RlbGVnYXRlLnJlc3VsdE5hbWVdID0gaW5mby52YWx1ZTtcblxuICAgICAgLy8gUmVzdW1lIGV4ZWN1dGlvbiBhdCB0aGUgZGVzaXJlZCBsb2NhdGlvbiAoc2VlIGRlbGVnYXRlWWllbGQpLlxuICAgICAgY29udGV4dC5uZXh0ID0gZGVsZWdhdGUubmV4dExvYztcblxuICAgICAgLy8gSWYgY29udGV4dC5tZXRob2Qgd2FzIFwidGhyb3dcIiBidXQgdGhlIGRlbGVnYXRlIGhhbmRsZWQgdGhlXG4gICAgICAvLyBleGNlcHRpb24sIGxldCB0aGUgb3V0ZXIgZ2VuZXJhdG9yIHByb2NlZWQgbm9ybWFsbHkuIElmXG4gICAgICAvLyBjb250ZXh0Lm1ldGhvZCB3YXMgXCJuZXh0XCIsIGZvcmdldCBjb250ZXh0LmFyZyBzaW5jZSBpdCBoYXMgYmVlblxuICAgICAgLy8gXCJjb25zdW1lZFwiIGJ5IHRoZSBkZWxlZ2F0ZSBpdGVyYXRvci4gSWYgY29udGV4dC5tZXRob2Qgd2FzXG4gICAgICAvLyBcInJldHVyblwiLCBhbGxvdyB0aGUgb3JpZ2luYWwgLnJldHVybiBjYWxsIHRvIGNvbnRpbnVlIGluIHRoZVxuICAgICAgLy8gb3V0ZXIgZ2VuZXJhdG9yLlxuICAgICAgaWYgKGNvbnRleHQubWV0aG9kICE9PSBcInJldHVyblwiKSB7XG4gICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFJlLXlpZWxkIHRoZSByZXN1bHQgcmV0dXJuZWQgYnkgdGhlIGRlbGVnYXRlIG1ldGhvZC5cbiAgICAgIHJldHVybiBpbmZvO1xuICAgIH1cblxuICAgIC8vIFRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBpcyBmaW5pc2hlZCwgc28gZm9yZ2V0IGl0IGFuZCBjb250aW51ZSB3aXRoXG4gICAgLy8gdGhlIG91dGVyIGdlbmVyYXRvci5cbiAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgfVxuXG4gIC8vIERlZmluZSBHZW5lcmF0b3IucHJvdG90eXBlLntuZXh0LHRocm93LHJldHVybn0gaW4gdGVybXMgb2YgdGhlXG4gIC8vIHVuaWZpZWQgLl9pbnZva2UgaGVscGVyIG1ldGhvZC5cbiAgZGVmaW5lSXRlcmF0b3JNZXRob2RzKEdwKTtcblxuICBkZWZpbmUoR3AsIHRvU3RyaW5nVGFnU3ltYm9sLCBcIkdlbmVyYXRvclwiKTtcblxuICAvLyBBIEdlbmVyYXRvciBzaG91bGQgYWx3YXlzIHJldHVybiBpdHNlbGYgYXMgdGhlIGl0ZXJhdG9yIG9iamVjdCB3aGVuIHRoZVxuICAvLyBAQGl0ZXJhdG9yIGZ1bmN0aW9uIGlzIGNhbGxlZCBvbiBpdC4gU29tZSBicm93c2VycycgaW1wbGVtZW50YXRpb25zIG9mIHRoZVxuICAvLyBpdGVyYXRvciBwcm90b3R5cGUgY2hhaW4gaW5jb3JyZWN0bHkgaW1wbGVtZW50IHRoaXMsIGNhdXNpbmcgdGhlIEdlbmVyYXRvclxuICAvLyBvYmplY3QgdG8gbm90IGJlIHJldHVybmVkIGZyb20gdGhpcyBjYWxsLiBUaGlzIGVuc3VyZXMgdGhhdCBkb2Vzbid0IGhhcHBlbi5cbiAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWdlbmVyYXRvci9pc3N1ZXMvMjc0IGZvciBtb3JlIGRldGFpbHMuXG4gIEdwW2l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEdwLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFwiW29iamVjdCBHZW5lcmF0b3JdXCI7XG4gIH07XG5cbiAgZnVuY3Rpb24gcHVzaFRyeUVudHJ5KGxvY3MpIHtcbiAgICB2YXIgZW50cnkgPSB7IHRyeUxvYzogbG9jc1swXSB9O1xuXG4gICAgaWYgKDEgaW4gbG9jcykge1xuICAgICAgZW50cnkuY2F0Y2hMb2MgPSBsb2NzWzFdO1xuICAgIH1cblxuICAgIGlmICgyIGluIGxvY3MpIHtcbiAgICAgIGVudHJ5LmZpbmFsbHlMb2MgPSBsb2NzWzJdO1xuICAgICAgZW50cnkuYWZ0ZXJMb2MgPSBsb2NzWzNdO1xuICAgIH1cblxuICAgIHRoaXMudHJ5RW50cmllcy5wdXNoKGVudHJ5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc2V0VHJ5RW50cnkoZW50cnkpIHtcbiAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbiB8fCB7fTtcbiAgICByZWNvcmQudHlwZSA9IFwibm9ybWFsXCI7XG4gICAgZGVsZXRlIHJlY29yZC5hcmc7XG4gICAgZW50cnkuY29tcGxldGlvbiA9IHJlY29yZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIENvbnRleHQodHJ5TG9jc0xpc3QpIHtcbiAgICAvLyBUaGUgcm9vdCBlbnRyeSBvYmplY3QgKGVmZmVjdGl2ZWx5IGEgdHJ5IHN0YXRlbWVudCB3aXRob3V0IGEgY2F0Y2hcbiAgICAvLyBvciBhIGZpbmFsbHkgYmxvY2spIGdpdmVzIHVzIGEgcGxhY2UgdG8gc3RvcmUgdmFsdWVzIHRocm93biBmcm9tXG4gICAgLy8gbG9jYXRpb25zIHdoZXJlIHRoZXJlIGlzIG5vIGVuY2xvc2luZyB0cnkgc3RhdGVtZW50LlxuICAgIHRoaXMudHJ5RW50cmllcyA9IFt7IHRyeUxvYzogXCJyb290XCIgfV07XG4gICAgdHJ5TG9jc0xpc3QuZm9yRWFjaChwdXNoVHJ5RW50cnksIHRoaXMpO1xuICAgIHRoaXMucmVzZXQodHJ1ZSk7XG4gIH1cblxuICBleHBvcnRzLmtleXMgPSBmdW5jdGlvbihvYmplY3QpIHtcbiAgICB2YXIga2V5cyA9IFtdO1xuICAgIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICAgIGtleXMucHVzaChrZXkpO1xuICAgIH1cbiAgICBrZXlzLnJldmVyc2UoKTtcblxuICAgIC8vIFJhdGhlciB0aGFuIHJldHVybmluZyBhbiBvYmplY3Qgd2l0aCBhIG5leHQgbWV0aG9kLCB3ZSBrZWVwXG4gICAgLy8gdGhpbmdzIHNpbXBsZSBhbmQgcmV0dXJuIHRoZSBuZXh0IGZ1bmN0aW9uIGl0c2VsZi5cbiAgICByZXR1cm4gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgIHdoaWxlIChrZXlzLmxlbmd0aCkge1xuICAgICAgICB2YXIga2V5ID0ga2V5cy5wb3AoKTtcbiAgICAgICAgaWYgKGtleSBpbiBvYmplY3QpIHtcbiAgICAgICAgICBuZXh0LnZhbHVlID0ga2V5O1xuICAgICAgICAgIG5leHQuZG9uZSA9IGZhbHNlO1xuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFRvIGF2b2lkIGNyZWF0aW5nIGFuIGFkZGl0aW9uYWwgb2JqZWN0LCB3ZSBqdXN0IGhhbmcgdGhlIC52YWx1ZVxuICAgICAgLy8gYW5kIC5kb25lIHByb3BlcnRpZXMgb2ZmIHRoZSBuZXh0IGZ1bmN0aW9uIG9iamVjdCBpdHNlbGYuIFRoaXNcbiAgICAgIC8vIGFsc28gZW5zdXJlcyB0aGF0IHRoZSBtaW5pZmllciB3aWxsIG5vdCBhbm9ueW1pemUgdGhlIGZ1bmN0aW9uLlxuICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcbiAgICAgIHJldHVybiBuZXh0O1xuICAgIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gdmFsdWVzKGl0ZXJhYmxlKSB7XG4gICAgaWYgKGl0ZXJhYmxlKSB7XG4gICAgICB2YXIgaXRlcmF0b3JNZXRob2QgPSBpdGVyYWJsZVtpdGVyYXRvclN5bWJvbF07XG4gICAgICBpZiAoaXRlcmF0b3JNZXRob2QpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhdG9yTWV0aG9kLmNhbGwoaXRlcmFibGUpO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGl0ZXJhYmxlLm5leHQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICByZXR1cm4gaXRlcmFibGU7XG4gICAgICB9XG5cbiAgICAgIGlmICghaXNOYU4oaXRlcmFibGUubGVuZ3RoKSkge1xuICAgICAgICB2YXIgaSA9IC0xLCBuZXh0ID0gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgICAgICB3aGlsZSAoKytpIDwgaXRlcmFibGUubGVuZ3RoKSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duLmNhbGwoaXRlcmFibGUsIGkpKSB7XG4gICAgICAgICAgICAgIG5leHQudmFsdWUgPSBpdGVyYWJsZVtpXTtcbiAgICAgICAgICAgICAgbmV4dC5kb25lID0gZmFsc2U7XG4gICAgICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIG5leHQudmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcblxuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBuZXh0Lm5leHQgPSBuZXh0O1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFJldHVybiBhbiBpdGVyYXRvciB3aXRoIG5vIHZhbHVlcy5cbiAgICByZXR1cm4geyBuZXh0OiBkb25lUmVzdWx0IH07XG4gIH1cbiAgZXhwb3J0cy52YWx1ZXMgPSB2YWx1ZXM7XG5cbiAgZnVuY3Rpb24gZG9uZVJlc3VsdCgpIHtcbiAgICByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gIH1cblxuICBDb250ZXh0LnByb3RvdHlwZSA9IHtcbiAgICBjb25zdHJ1Y3RvcjogQ29udGV4dCxcblxuICAgIHJlc2V0OiBmdW5jdGlvbihza2lwVGVtcFJlc2V0KSB7XG4gICAgICB0aGlzLnByZXYgPSAwO1xuICAgICAgdGhpcy5uZXh0ID0gMDtcbiAgICAgIC8vIFJlc2V0dGluZyBjb250ZXh0Ll9zZW50IGZvciBsZWdhY3kgc3VwcG9ydCBvZiBCYWJlbCdzXG4gICAgICAvLyBmdW5jdGlvbi5zZW50IGltcGxlbWVudGF0aW9uLlxuICAgICAgdGhpcy5zZW50ID0gdGhpcy5fc2VudCA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuZG9uZSA9IGZhbHNlO1xuICAgICAgdGhpcy5kZWxlZ2F0ZSA9IG51bGw7XG5cbiAgICAgIHRoaXMubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICB0aGlzLmFyZyA9IHVuZGVmaW5lZDtcblxuICAgICAgdGhpcy50cnlFbnRyaWVzLmZvckVhY2gocmVzZXRUcnlFbnRyeSk7XG5cbiAgICAgIGlmICghc2tpcFRlbXBSZXNldCkge1xuICAgICAgICBmb3IgKHZhciBuYW1lIGluIHRoaXMpIHtcbiAgICAgICAgICAvLyBOb3Qgc3VyZSBhYm91dCB0aGUgb3B0aW1hbCBvcmRlciBvZiB0aGVzZSBjb25kaXRpb25zOlxuICAgICAgICAgIGlmIChuYW1lLmNoYXJBdCgwKSA9PT0gXCJ0XCIgJiZcbiAgICAgICAgICAgICAgaGFzT3duLmNhbGwodGhpcywgbmFtZSkgJiZcbiAgICAgICAgICAgICAgIWlzTmFOKCtuYW1lLnNsaWNlKDEpKSkge1xuICAgICAgICAgICAgdGhpc1tuYW1lXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgc3RvcDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLmRvbmUgPSB0cnVlO1xuXG4gICAgICB2YXIgcm9vdEVudHJ5ID0gdGhpcy50cnlFbnRyaWVzWzBdO1xuICAgICAgdmFyIHJvb3RSZWNvcmQgPSByb290RW50cnkuY29tcGxldGlvbjtcbiAgICAgIGlmIChyb290UmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICB0aHJvdyByb290UmVjb3JkLmFyZztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMucnZhbDtcbiAgICB9LFxuXG4gICAgZGlzcGF0Y2hFeGNlcHRpb246IGZ1bmN0aW9uKGV4Y2VwdGlvbikge1xuICAgICAgaWYgKHRoaXMuZG9uZSkge1xuICAgICAgICB0aHJvdyBleGNlcHRpb247XG4gICAgICB9XG5cbiAgICAgIHZhciBjb250ZXh0ID0gdGhpcztcbiAgICAgIGZ1bmN0aW9uIGhhbmRsZShsb2MsIGNhdWdodCkge1xuICAgICAgICByZWNvcmQudHlwZSA9IFwidGhyb3dcIjtcbiAgICAgICAgcmVjb3JkLmFyZyA9IGV4Y2VwdGlvbjtcbiAgICAgICAgY29udGV4dC5uZXh0ID0gbG9jO1xuXG4gICAgICAgIGlmIChjYXVnaHQpIHtcbiAgICAgICAgICAvLyBJZiB0aGUgZGlzcGF0Y2hlZCBleGNlcHRpb24gd2FzIGNhdWdodCBieSBhIGNhdGNoIGJsb2NrLFxuICAgICAgICAgIC8vIHRoZW4gbGV0IHRoYXQgY2F0Y2ggYmxvY2sgaGFuZGxlIHRoZSBleGNlcHRpb24gbm9ybWFsbHkuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAhISBjYXVnaHQ7XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcblxuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSBcInJvb3RcIikge1xuICAgICAgICAgIC8vIEV4Y2VwdGlvbiB0aHJvd24gb3V0c2lkZSBvZiBhbnkgdHJ5IGJsb2NrIHRoYXQgY291bGQgaGFuZGxlXG4gICAgICAgICAgLy8gaXQsIHNvIHNldCB0aGUgY29tcGxldGlvbiB2YWx1ZSBvZiB0aGUgZW50aXJlIGZ1bmN0aW9uIHRvXG4gICAgICAgICAgLy8gdGhyb3cgdGhlIGV4Y2VwdGlvbi5cbiAgICAgICAgICByZXR1cm4gaGFuZGxlKFwiZW5kXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYpIHtcbiAgICAgICAgICB2YXIgaGFzQ2F0Y2ggPSBoYXNPd24uY2FsbChlbnRyeSwgXCJjYXRjaExvY1wiKTtcbiAgICAgICAgICB2YXIgaGFzRmluYWxseSA9IGhhc093bi5jYWxsKGVudHJ5LCBcImZpbmFsbHlMb2NcIik7XG5cbiAgICAgICAgICBpZiAoaGFzQ2F0Y2ggJiYgaGFzRmluYWxseSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsIHRydWUpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0NhdGNoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuY2F0Y2hMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5jYXRjaExvYywgdHJ1ZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0ZpbmFsbHkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwidHJ5IHN0YXRlbWVudCB3aXRob3V0IGNhdGNoIG9yIGZpbmFsbHlcIik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIGFicnVwdDogZnVuY3Rpb24odHlwZSwgYXJnKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYgJiZcbiAgICAgICAgICAgIGhhc093bi5jYWxsKGVudHJ5LCBcImZpbmFsbHlMb2NcIikgJiZcbiAgICAgICAgICAgIHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICB2YXIgZmluYWxseUVudHJ5ID0gZW50cnk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGZpbmFsbHlFbnRyeSAmJlxuICAgICAgICAgICh0eXBlID09PSBcImJyZWFrXCIgfHxcbiAgICAgICAgICAgdHlwZSA9PT0gXCJjb250aW51ZVwiKSAmJlxuICAgICAgICAgIGZpbmFsbHlFbnRyeS50cnlMb2MgPD0gYXJnICYmXG4gICAgICAgICAgYXJnIDw9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgIC8vIElnbm9yZSB0aGUgZmluYWxseSBlbnRyeSBpZiBjb250cm9sIGlzIG5vdCBqdW1waW5nIHRvIGFcbiAgICAgICAgLy8gbG9jYXRpb24gb3V0c2lkZSB0aGUgdHJ5L2NhdGNoIGJsb2NrLlxuICAgICAgICBmaW5hbGx5RW50cnkgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICB2YXIgcmVjb3JkID0gZmluYWxseUVudHJ5ID8gZmluYWxseUVudHJ5LmNvbXBsZXRpb24gOiB7fTtcbiAgICAgIHJlY29yZC50eXBlID0gdHlwZTtcbiAgICAgIHJlY29yZC5hcmcgPSBhcmc7XG5cbiAgICAgIGlmIChmaW5hbGx5RW50cnkpIHtcbiAgICAgICAgdGhpcy5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgdGhpcy5uZXh0ID0gZmluYWxseUVudHJ5LmZpbmFsbHlMb2M7XG4gICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5jb21wbGV0ZShyZWNvcmQpO1xuICAgIH0sXG5cbiAgICBjb21wbGV0ZTogZnVuY3Rpb24ocmVjb3JkLCBhZnRlckxvYykge1xuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgdGhyb3cgcmVjb3JkLmFyZztcbiAgICAgIH1cblxuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcImJyZWFrXCIgfHxcbiAgICAgICAgICByZWNvcmQudHlwZSA9PT0gXCJjb250aW51ZVwiKSB7XG4gICAgICAgIHRoaXMubmV4dCA9IHJlY29yZC5hcmc7XG4gICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcInJldHVyblwiKSB7XG4gICAgICAgIHRoaXMucnZhbCA9IHRoaXMuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgICAgdGhpcy5tZXRob2QgPSBcInJldHVyblwiO1xuICAgICAgICB0aGlzLm5leHQgPSBcImVuZFwiO1xuICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJub3JtYWxcIiAmJiBhZnRlckxvYykge1xuICAgICAgICB0aGlzLm5leHQgPSBhZnRlckxvYztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfSxcblxuICAgIGZpbmlzaDogZnVuY3Rpb24oZmluYWxseUxvYykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS5maW5hbGx5TG9jID09PSBmaW5hbGx5TG9jKSB7XG4gICAgICAgICAgdGhpcy5jb21wbGV0ZShlbnRyeS5jb21wbGV0aW9uLCBlbnRyeS5hZnRlckxvYyk7XG4gICAgICAgICAgcmVzZXRUcnlFbnRyeShlbnRyeSk7XG4gICAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgXCJjYXRjaFwiOiBmdW5jdGlvbih0cnlMb2MpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSB0cnlMb2MpIHtcbiAgICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcbiAgICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgICAgdmFyIHRocm93biA9IHJlY29yZC5hcmc7XG4gICAgICAgICAgICByZXNldFRyeUVudHJ5KGVudHJ5KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRocm93bjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUaGUgY29udGV4dC5jYXRjaCBtZXRob2QgbXVzdCBvbmx5IGJlIGNhbGxlZCB3aXRoIGEgbG9jYXRpb25cbiAgICAgIC8vIGFyZ3VtZW50IHRoYXQgY29ycmVzcG9uZHMgdG8gYSBrbm93biBjYXRjaCBibG9jay5cbiAgICAgIHRocm93IG5ldyBFcnJvcihcImlsbGVnYWwgY2F0Y2ggYXR0ZW1wdFwiKTtcbiAgICB9LFxuXG4gICAgZGVsZWdhdGVZaWVsZDogZnVuY3Rpb24oaXRlcmFibGUsIHJlc3VsdE5hbWUsIG5leHRMb2MpIHtcbiAgICAgIHRoaXMuZGVsZWdhdGUgPSB7XG4gICAgICAgIGl0ZXJhdG9yOiB2YWx1ZXMoaXRlcmFibGUpLFxuICAgICAgICByZXN1bHROYW1lOiByZXN1bHROYW1lLFxuICAgICAgICBuZXh0TG9jOiBuZXh0TG9jXG4gICAgICB9O1xuXG4gICAgICBpZiAodGhpcy5tZXRob2QgPT09IFwibmV4dFwiKSB7XG4gICAgICAgIC8vIERlbGliZXJhdGVseSBmb3JnZXQgdGhlIGxhc3Qgc2VudCB2YWx1ZSBzbyB0aGF0IHdlIGRvbid0XG4gICAgICAgIC8vIGFjY2lkZW50YWxseSBwYXNzIGl0IG9uIHRvIHRoZSBkZWxlZ2F0ZS5cbiAgICAgICAgdGhpcy5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cbiAgfTtcblxuICAvLyBSZWdhcmRsZXNzIG9mIHdoZXRoZXIgdGhpcyBzY3JpcHQgaXMgZXhlY3V0aW5nIGFzIGEgQ29tbW9uSlMgbW9kdWxlXG4gIC8vIG9yIG5vdCwgcmV0dXJuIHRoZSBydW50aW1lIG9iamVjdCBzbyB0aGF0IHdlIGNhbiBkZWNsYXJlIHRoZSB2YXJpYWJsZVxuICAvLyByZWdlbmVyYXRvclJ1bnRpbWUgaW4gdGhlIG91dGVyIHNjb3BlLCB3aGljaCBhbGxvd3MgdGhpcyBtb2R1bGUgdG8gYmVcbiAgLy8gaW5qZWN0ZWQgZWFzaWx5IGJ5IGBiaW4vcmVnZW5lcmF0b3IgLS1pbmNsdWRlLXJ1bnRpbWUgc2NyaXB0LmpzYC5cbiAgcmV0dXJuIGV4cG9ydHM7XG5cbn0oXG4gIC8vIElmIHRoaXMgc2NyaXB0IGlzIGV4ZWN1dGluZyBhcyBhIENvbW1vbkpTIG1vZHVsZSwgdXNlIG1vZHVsZS5leHBvcnRzXG4gIC8vIGFzIHRoZSByZWdlbmVyYXRvclJ1bnRpbWUgbmFtZXNwYWNlLiBPdGhlcndpc2UgY3JlYXRlIGEgbmV3IGVtcHR5XG4gIC8vIG9iamVjdC4gRWl0aGVyIHdheSwgdGhlIHJlc3VsdGluZyBvYmplY3Qgd2lsbCBiZSB1c2VkIHRvIGluaXRpYWxpemVcbiAgLy8gdGhlIHJlZ2VuZXJhdG9yUnVudGltZSB2YXJpYWJsZSBhdCB0aGUgdG9wIG9mIHRoaXMgZmlsZS5cbiAgdHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIiA/IG1vZHVsZS5leHBvcnRzIDoge31cbikpO1xuXG50cnkge1xuICByZWdlbmVyYXRvclJ1bnRpbWUgPSBydW50aW1lO1xufSBjYXRjaCAoYWNjaWRlbnRhbFN0cmljdE1vZGUpIHtcbiAgLy8gVGhpcyBtb2R1bGUgc2hvdWxkIG5vdCBiZSBydW5uaW5nIGluIHN0cmljdCBtb2RlLCBzbyB0aGUgYWJvdmVcbiAgLy8gYXNzaWdubWVudCBzaG91bGQgYWx3YXlzIHdvcmsgdW5sZXNzIHNvbWV0aGluZyBpcyBtaXNjb25maWd1cmVkLiBKdXN0XG4gIC8vIGluIGNhc2UgcnVudGltZS5qcyBhY2NpZGVudGFsbHkgcnVucyBpbiBzdHJpY3QgbW9kZSwgd2UgY2FuIGVzY2FwZVxuICAvLyBzdHJpY3QgbW9kZSB1c2luZyBhIGdsb2JhbCBGdW5jdGlvbiBjYWxsLiBUaGlzIGNvdWxkIGNvbmNlaXZhYmx5IGZhaWxcbiAgLy8gaWYgYSBDb250ZW50IFNlY3VyaXR5IFBvbGljeSBmb3JiaWRzIHVzaW5nIEZ1bmN0aW9uLCBidXQgaW4gdGhhdCBjYXNlXG4gIC8vIHRoZSBwcm9wZXIgc29sdXRpb24gaXMgdG8gZml4IHRoZSBhY2NpZGVudGFsIHN0cmljdCBtb2RlIHByb2JsZW0uIElmXG4gIC8vIHlvdSd2ZSBtaXNjb25maWd1cmVkIHlvdXIgYnVuZGxlciB0byBmb3JjZSBzdHJpY3QgbW9kZSBhbmQgYXBwbGllZCBhXG4gIC8vIENTUCB0byBmb3JiaWQgRnVuY3Rpb24sIGFuZCB5b3UncmUgbm90IHdpbGxpbmcgdG8gZml4IGVpdGhlciBvZiB0aG9zZVxuICAvLyBwcm9ibGVtcywgcGxlYXNlIGRldGFpbCB5b3VyIHVuaXF1ZSBwcmVkaWNhbWVudCBpbiBhIEdpdEh1YiBpc3N1ZS5cbiAgRnVuY3Rpb24oXCJyXCIsIFwicmVnZW5lcmF0b3JSdW50aW1lID0gclwiKShydW50aW1lKTtcbn1cbiIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdGlmKF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0pIHtcblx0XHRyZXR1cm4gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5nID0gKGZ1bmN0aW9uKCkge1xuXHRpZiAodHlwZW9mIGdsb2JhbFRoaXMgPT09ICdvYmplY3QnKSByZXR1cm4gZ2xvYmFsVGhpcztcblx0dHJ5IHtcblx0XHRyZXR1cm4gdGhpcyB8fCBuZXcgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdGlmICh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JykgcmV0dXJuIHdpbmRvdztcblx0fVxufSkoKTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiLy8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yID0gKGV4cG9ydHMpID0+IHtcblx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cdH1cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbn07IiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgRGF0YU5vZGUge1xuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwdWJsaWMgaWQ6IG51bWJlcixcbiAgICAgICAgcHVibGljIG5hbWU6IHN0cmluZyxcbiAgICAgICAgcHVibGljIGNoaWxkcmVuOiBEYXRhTm9kZVtdID0gW10sXG4gICAgICAgIHB1YmxpYyBjb3VudDogbnVtYmVyLFxuICAgICAgICBwdWJsaWMgc2VsZkNvdW50OiBudW1iZXIsXG4gICAgICAgIHB1YmxpYyBleHRyYTogYW55ID0ge31cbiAgICApIHt9XG59XG5cbi8qKlxuICogVGhlIHZpc3VhbGl6YXRpb25zIGFyZSBmbGV4aWJsZSBpbiB0aGUga2luZCBvZiBkYXRhIHRoYXQgdGhleSByZXF1aXJlLiBUaGlzIHR5cGUgaXMgdmVyeSBtdWNoIGxpa2UgYSBEYXRhTm9kZSwgYnV0XG4gKiBkb2VzIG5vdCBzcGVjaWZpY2FsbHkgcmVxdWlyZSBhbGwgdGhlIGRpZmZlcmVudCBpbmZvcm1hdGlvbiBmaWVsZHMuIFRoZSB2aXN1YWxpemF0aW9ucyB3aWxsIHByZXByb2Nlc3MgYWxsIGRhdGEgdGhhdFxuICogdGhleSBhcmUgZ2l2ZW4gYW5kIGNvbnZlcnQgaXQgaW50byByZWFsIERhdGFOb2RlJ3MgdGhhdCBkbyBjb250YWluIGFsbCB0aGUgcmVxdWlyZWQgZmllbGRzICh3aGljaCB3aWxsIGJlIGZpbGxlZCB3aXRoXG4gKiBwbGFjZWhvbGRlcnMgZHVyaW5nIHRoZSBjb252ZXJzaW9uIGlmIHRoZXkgYXJlIG5vdCBwcm92aWRlZCBieSB0aGUgdXNlcikuXG4gKi9cbmV4cG9ydCB0eXBlIERhdGFOb2RlTGlrZSA9IHtcbiAgICBjb3VudDogbnVtYmVyLFxuICAgIHNlbGZDb3VudDogbnVtYmVyLFxuICAgIGlkPzogbnVtYmVyLFxuICAgIG5hbWU/OiBzdHJpbmcsXG4gICAgY2hpbGRyZW4/OiBEYXRhTm9kZUxpa2VbXSxcbiAgICBleHRyYT86IGFueVxufVxuXG5cbiIsImZ1bmN0aW9uIG5vbmUoKSB7fVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZWxlY3Rvcikge1xuICByZXR1cm4gc2VsZWN0b3IgPT0gbnVsbCA/IG5vbmUgOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKTtcbiAgfTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIHR5cGVvZiB4ID09PSBcIm9iamVjdFwiICYmIFwibGVuZ3RoXCIgaW4geFxuICAgID8geCAvLyBBcnJheSwgVHlwZWRBcnJheSwgTm9kZUxpc3QsIGFycmF5LWxpa2VcbiAgICA6IEFycmF5LmZyb20oeCk7IC8vIE1hcCwgU2V0LCBpdGVyYWJsZSwgc3RyaW5nLCBvciBhbnl0aGluZyBlbHNlXG59XG4iLCJmdW5jdGlvbiBlbXB0eSgpIHtcbiAgcmV0dXJuIFtdO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZWxlY3Rvcikge1xuICByZXR1cm4gc2VsZWN0b3IgPT0gbnVsbCA/IGVtcHR5IDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMucXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvcik7XG4gIH07XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZWxlY3Rvcikge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMubWF0Y2hlcyhzZWxlY3Rvcik7XG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjaGlsZE1hdGNoZXIoc2VsZWN0b3IpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKG5vZGUpIHtcbiAgICByZXR1cm4gbm9kZS5tYXRjaGVzKHNlbGVjdG9yKTtcbiAgfTtcbn1cblxuIiwiaW1wb3J0IHtjaGlsZE1hdGNoZXJ9IGZyb20gXCIuLi9tYXRjaGVyLmpzXCI7XG5cbnZhciBmaW5kID0gQXJyYXkucHJvdG90eXBlLmZpbmQ7XG5cbmZ1bmN0aW9uIGNoaWxkRmluZChtYXRjaCkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGZpbmQuY2FsbCh0aGlzLmNoaWxkcmVuLCBtYXRjaCk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNoaWxkRmlyc3QoKSB7XG4gIHJldHVybiB0aGlzLmZpcnN0RWxlbWVudENoaWxkO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihtYXRjaCkge1xuICByZXR1cm4gdGhpcy5zZWxlY3QobWF0Y2ggPT0gbnVsbCA/IGNoaWxkRmlyc3RcbiAgICAgIDogY2hpbGRGaW5kKHR5cGVvZiBtYXRjaCA9PT0gXCJmdW5jdGlvblwiID8gbWF0Y2ggOiBjaGlsZE1hdGNoZXIobWF0Y2gpKSk7XG59XG4iLCJpbXBvcnQge2NoaWxkTWF0Y2hlcn0gZnJvbSBcIi4uL21hdGNoZXIuanNcIjtcblxudmFyIGZpbHRlciA9IEFycmF5LnByb3RvdHlwZS5maWx0ZXI7XG5cbmZ1bmN0aW9uIGNoaWxkcmVuKCkge1xuICByZXR1cm4gdGhpcy5jaGlsZHJlbjtcbn1cblxuZnVuY3Rpb24gY2hpbGRyZW5GaWx0ZXIobWF0Y2gpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBmaWx0ZXIuY2FsbCh0aGlzLmNoaWxkcmVuLCBtYXRjaCk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG1hdGNoKSB7XG4gIHJldHVybiB0aGlzLnNlbGVjdEFsbChtYXRjaCA9PSBudWxsID8gY2hpbGRyZW5cbiAgICAgIDogY2hpbGRyZW5GaWx0ZXIodHlwZW9mIG1hdGNoID09PSBcImZ1bmN0aW9uXCIgPyBtYXRjaCA6IGNoaWxkTWF0Y2hlcihtYXRjaCkpKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHVwZGF0ZSkge1xuICByZXR1cm4gbmV3IEFycmF5KHVwZGF0ZS5sZW5ndGgpO1xufVxuIiwiaW1wb3J0IHNwYXJzZSBmcm9tIFwiLi9zcGFyc2UuanNcIjtcbmltcG9ydCB7U2VsZWN0aW9ufSBmcm9tIFwiLi9pbmRleC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBTZWxlY3Rpb24odGhpcy5fZW50ZXIgfHwgdGhpcy5fZ3JvdXBzLm1hcChzcGFyc2UpLCB0aGlzLl9wYXJlbnRzKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIEVudGVyTm9kZShwYXJlbnQsIGRhdHVtKSB7XG4gIHRoaXMub3duZXJEb2N1bWVudCA9IHBhcmVudC5vd25lckRvY3VtZW50O1xuICB0aGlzLm5hbWVzcGFjZVVSSSA9IHBhcmVudC5uYW1lc3BhY2VVUkk7XG4gIHRoaXMuX25leHQgPSBudWxsO1xuICB0aGlzLl9wYXJlbnQgPSBwYXJlbnQ7XG4gIHRoaXMuX19kYXRhX18gPSBkYXR1bTtcbn1cblxuRW50ZXJOb2RlLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IEVudGVyTm9kZSxcbiAgYXBwZW5kQ2hpbGQ6IGZ1bmN0aW9uKGNoaWxkKSB7IHJldHVybiB0aGlzLl9wYXJlbnQuaW5zZXJ0QmVmb3JlKGNoaWxkLCB0aGlzLl9uZXh0KTsgfSxcbiAgaW5zZXJ0QmVmb3JlOiBmdW5jdGlvbihjaGlsZCwgbmV4dCkgeyByZXR1cm4gdGhpcy5fcGFyZW50Lmluc2VydEJlZm9yZShjaGlsZCwgbmV4dCk7IH0sXG4gIHF1ZXJ5U2VsZWN0b3I6IGZ1bmN0aW9uKHNlbGVjdG9yKSB7IHJldHVybiB0aGlzLl9wYXJlbnQucXVlcnlTZWxlY3RvcihzZWxlY3Rvcik7IH0sXG4gIHF1ZXJ5U2VsZWN0b3JBbGw6IGZ1bmN0aW9uKHNlbGVjdG9yKSB7IHJldHVybiB0aGlzLl9wYXJlbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvcik7IH1cbn07XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4geDtcbiAgfTtcbn1cbiIsImltcG9ydCB7U2VsZWN0aW9ufSBmcm9tIFwiLi9pbmRleC5qc1wiO1xuaW1wb3J0IHtFbnRlck5vZGV9IGZyb20gXCIuL2VudGVyLmpzXCI7XG5pbXBvcnQgYXJyYXkgZnJvbSBcIi4uL2FycmF5LmpzXCI7XG5pbXBvcnQgY29uc3RhbnQgZnJvbSBcIi4uL2NvbnN0YW50LmpzXCI7XG5cbmZ1bmN0aW9uIGJpbmRJbmRleChwYXJlbnQsIGdyb3VwLCBlbnRlciwgdXBkYXRlLCBleGl0LCBkYXRhKSB7XG4gIHZhciBpID0gMCxcbiAgICAgIG5vZGUsXG4gICAgICBncm91cExlbmd0aCA9IGdyb3VwLmxlbmd0aCxcbiAgICAgIGRhdGFMZW5ndGggPSBkYXRhLmxlbmd0aDtcblxuICAvLyBQdXQgYW55IG5vbi1udWxsIG5vZGVzIHRoYXQgZml0IGludG8gdXBkYXRlLlxuICAvLyBQdXQgYW55IG51bGwgbm9kZXMgaW50byBlbnRlci5cbiAgLy8gUHV0IGFueSByZW1haW5pbmcgZGF0YSBpbnRvIGVudGVyLlxuICBmb3IgKDsgaSA8IGRhdGFMZW5ndGg7ICsraSkge1xuICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcbiAgICAgIG5vZGUuX19kYXRhX18gPSBkYXRhW2ldO1xuICAgICAgdXBkYXRlW2ldID0gbm9kZTtcbiAgICB9IGVsc2Uge1xuICAgICAgZW50ZXJbaV0gPSBuZXcgRW50ZXJOb2RlKHBhcmVudCwgZGF0YVtpXSk7XG4gICAgfVxuICB9XG5cbiAgLy8gUHV0IGFueSBub24tbnVsbCBub2RlcyB0aGF0IGRvbuKAmXQgZml0IGludG8gZXhpdC5cbiAgZm9yICg7IGkgPCBncm91cExlbmd0aDsgKytpKSB7XG4gICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuICAgICAgZXhpdFtpXSA9IG5vZGU7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGJpbmRLZXkocGFyZW50LCBncm91cCwgZW50ZXIsIHVwZGF0ZSwgZXhpdCwgZGF0YSwga2V5KSB7XG4gIHZhciBpLFxuICAgICAgbm9kZSxcbiAgICAgIG5vZGVCeUtleVZhbHVlID0gbmV3IE1hcCxcbiAgICAgIGdyb3VwTGVuZ3RoID0gZ3JvdXAubGVuZ3RoLFxuICAgICAgZGF0YUxlbmd0aCA9IGRhdGEubGVuZ3RoLFxuICAgICAga2V5VmFsdWVzID0gbmV3IEFycmF5KGdyb3VwTGVuZ3RoKSxcbiAgICAgIGtleVZhbHVlO1xuXG4gIC8vIENvbXB1dGUgdGhlIGtleSBmb3IgZWFjaCBub2RlLlxuICAvLyBJZiBtdWx0aXBsZSBub2RlcyBoYXZlIHRoZSBzYW1lIGtleSwgdGhlIGR1cGxpY2F0ZXMgYXJlIGFkZGVkIHRvIGV4aXQuXG4gIGZvciAoaSA9IDA7IGkgPCBncm91cExlbmd0aDsgKytpKSB7XG4gICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuICAgICAga2V5VmFsdWVzW2ldID0ga2V5VmFsdWUgPSBrZXkuY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBncm91cCkgKyBcIlwiO1xuICAgICAgaWYgKG5vZGVCeUtleVZhbHVlLmhhcyhrZXlWYWx1ZSkpIHtcbiAgICAgICAgZXhpdFtpXSA9IG5vZGU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBub2RlQnlLZXlWYWx1ZS5zZXQoa2V5VmFsdWUsIG5vZGUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIENvbXB1dGUgdGhlIGtleSBmb3IgZWFjaCBkYXR1bS5cbiAgLy8gSWYgdGhlcmUgYSBub2RlIGFzc29jaWF0ZWQgd2l0aCB0aGlzIGtleSwgam9pbiBhbmQgYWRkIGl0IHRvIHVwZGF0ZS5cbiAgLy8gSWYgdGhlcmUgaXMgbm90IChvciB0aGUga2V5IGlzIGEgZHVwbGljYXRlKSwgYWRkIGl0IHRvIGVudGVyLlxuICBmb3IgKGkgPSAwOyBpIDwgZGF0YUxlbmd0aDsgKytpKSB7XG4gICAga2V5VmFsdWUgPSBrZXkuY2FsbChwYXJlbnQsIGRhdGFbaV0sIGksIGRhdGEpICsgXCJcIjtcbiAgICBpZiAobm9kZSA9IG5vZGVCeUtleVZhbHVlLmdldChrZXlWYWx1ZSkpIHtcbiAgICAgIHVwZGF0ZVtpXSA9IG5vZGU7XG4gICAgICBub2RlLl9fZGF0YV9fID0gZGF0YVtpXTtcbiAgICAgIG5vZGVCeUtleVZhbHVlLmRlbGV0ZShrZXlWYWx1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVudGVyW2ldID0gbmV3IEVudGVyTm9kZShwYXJlbnQsIGRhdGFbaV0pO1xuICAgIH1cbiAgfVxuXG4gIC8vIEFkZCBhbnkgcmVtYWluaW5nIG5vZGVzIHRoYXQgd2VyZSBub3QgYm91bmQgdG8gZGF0YSB0byBleGl0LlxuICBmb3IgKGkgPSAwOyBpIDwgZ3JvdXBMZW5ndGg7ICsraSkge1xuICAgIGlmICgobm9kZSA9IGdyb3VwW2ldKSAmJiAobm9kZUJ5S2V5VmFsdWUuZ2V0KGtleVZhbHVlc1tpXSkgPT09IG5vZGUpKSB7XG4gICAgICBleGl0W2ldID0gbm9kZTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gZGF0dW0obm9kZSkge1xuICByZXR1cm4gbm9kZS5fX2RhdGFfXztcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBBcnJheS5mcm9tKHRoaXMsIGRhdHVtKTtcblxuICB2YXIgYmluZCA9IGtleSA/IGJpbmRLZXkgOiBiaW5kSW5kZXgsXG4gICAgICBwYXJlbnRzID0gdGhpcy5fcGFyZW50cyxcbiAgICAgIGdyb3VwcyA9IHRoaXMuX2dyb3VwcztcblxuICBpZiAodHlwZW9mIHZhbHVlICE9PSBcImZ1bmN0aW9uXCIpIHZhbHVlID0gY29uc3RhbnQodmFsdWUpO1xuXG4gIGZvciAodmFyIG0gPSBncm91cHMubGVuZ3RoLCB1cGRhdGUgPSBuZXcgQXJyYXkobSksIGVudGVyID0gbmV3IEFycmF5KG0pLCBleGl0ID0gbmV3IEFycmF5KG0pLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIHZhciBwYXJlbnQgPSBwYXJlbnRzW2pdLFxuICAgICAgICBncm91cCA9IGdyb3Vwc1tqXSxcbiAgICAgICAgZ3JvdXBMZW5ndGggPSBncm91cC5sZW5ndGgsXG4gICAgICAgIGRhdGEgPSBhcnJheSh2YWx1ZS5jYWxsKHBhcmVudCwgcGFyZW50ICYmIHBhcmVudC5fX2RhdGFfXywgaiwgcGFyZW50cykpLFxuICAgICAgICBkYXRhTGVuZ3RoID0gZGF0YS5sZW5ndGgsXG4gICAgICAgIGVudGVyR3JvdXAgPSBlbnRlcltqXSA9IG5ldyBBcnJheShkYXRhTGVuZ3RoKSxcbiAgICAgICAgdXBkYXRlR3JvdXAgPSB1cGRhdGVbal0gPSBuZXcgQXJyYXkoZGF0YUxlbmd0aCksXG4gICAgICAgIGV4aXRHcm91cCA9IGV4aXRbal0gPSBuZXcgQXJyYXkoZ3JvdXBMZW5ndGgpO1xuXG4gICAgYmluZChwYXJlbnQsIGdyb3VwLCBlbnRlckdyb3VwLCB1cGRhdGVHcm91cCwgZXhpdEdyb3VwLCBkYXRhLCBrZXkpO1xuXG4gICAgLy8gTm93IGNvbm5lY3QgdGhlIGVudGVyIG5vZGVzIHRvIHRoZWlyIGZvbGxvd2luZyB1cGRhdGUgbm9kZSwgc3VjaCB0aGF0XG4gICAgLy8gYXBwZW5kQ2hpbGQgY2FuIGluc2VydCB0aGUgbWF0ZXJpYWxpemVkIGVudGVyIG5vZGUgYmVmb3JlIHRoaXMgbm9kZSxcbiAgICAvLyByYXRoZXIgdGhhbiBhdCB0aGUgZW5kIG9mIHRoZSBwYXJlbnQgbm9kZS5cbiAgICBmb3IgKHZhciBpMCA9IDAsIGkxID0gMCwgcHJldmlvdXMsIG5leHQ7IGkwIDwgZGF0YUxlbmd0aDsgKytpMCkge1xuICAgICAgaWYgKHByZXZpb3VzID0gZW50ZXJHcm91cFtpMF0pIHtcbiAgICAgICAgaWYgKGkwID49IGkxKSBpMSA9IGkwICsgMTtcbiAgICAgICAgd2hpbGUgKCEobmV4dCA9IHVwZGF0ZUdyb3VwW2kxXSkgJiYgKytpMSA8IGRhdGFMZW5ndGgpO1xuICAgICAgICBwcmV2aW91cy5fbmV4dCA9IG5leHQgfHwgbnVsbDtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB1cGRhdGUgPSBuZXcgU2VsZWN0aW9uKHVwZGF0ZSwgcGFyZW50cyk7XG4gIHVwZGF0ZS5fZW50ZXIgPSBlbnRlcjtcbiAgdXBkYXRlLl9leGl0ID0gZXhpdDtcbiAgcmV0dXJuIHVwZGF0ZTtcbn1cbiIsImltcG9ydCB7U2VsZWN0aW9ufSBmcm9tIFwiLi9pbmRleC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjb21wYXJlKSB7XG4gIGlmICghY29tcGFyZSkgY29tcGFyZSA9IGFzY2VuZGluZztcblxuICBmdW5jdGlvbiBjb21wYXJlTm9kZShhLCBiKSB7XG4gICAgcmV0dXJuIGEgJiYgYiA/IGNvbXBhcmUoYS5fX2RhdGFfXywgYi5fX2RhdGFfXykgOiAhYSAtICFiO1xuICB9XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBtID0gZ3JvdXBzLmxlbmd0aCwgc29ydGdyb3VwcyA9IG5ldyBBcnJheShtKSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgbiA9IGdyb3VwLmxlbmd0aCwgc29ydGdyb3VwID0gc29ydGdyb3Vwc1tqXSA9IG5ldyBBcnJheShuKSwgbm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcbiAgICAgICAgc29ydGdyb3VwW2ldID0gbm9kZTtcbiAgICAgIH1cbiAgICB9XG4gICAgc29ydGdyb3VwLnNvcnQoY29tcGFyZU5vZGUpO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBTZWxlY3Rpb24oc29ydGdyb3VwcywgdGhpcy5fcGFyZW50cykub3JkZXIoKTtcbn1cblxuZnVuY3Rpb24gYXNjZW5kaW5nKGEsIGIpIHtcbiAgcmV0dXJuIGEgPCBiID8gLTEgOiBhID4gYiA/IDEgOiBhID49IGIgPyAwIDogTmFOO1xufVxuIiwiZXhwb3J0IHZhciB4aHRtbCA9IFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIHN2ZzogXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLFxuICB4aHRtbDogeGh0bWwsXG4gIHhsaW5rOiBcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIixcbiAgeG1sOiBcImh0dHA6Ly93d3cudzMub3JnL1hNTC8xOTk4L25hbWVzcGFjZVwiLFxuICB4bWxuczogXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3htbG5zL1wiXG59O1xuIiwiaW1wb3J0IG5hbWVzcGFjZXMgZnJvbSBcIi4vbmFtZXNwYWNlcy5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lKSB7XG4gIHZhciBwcmVmaXggPSBuYW1lICs9IFwiXCIsIGkgPSBwcmVmaXguaW5kZXhPZihcIjpcIik7XG4gIGlmIChpID49IDAgJiYgKHByZWZpeCA9IG5hbWUuc2xpY2UoMCwgaSkpICE9PSBcInhtbG5zXCIpIG5hbWUgPSBuYW1lLnNsaWNlKGkgKyAxKTtcbiAgcmV0dXJuIG5hbWVzcGFjZXMuaGFzT3duUHJvcGVydHkocHJlZml4KSA/IHtzcGFjZTogbmFtZXNwYWNlc1twcmVmaXhdLCBsb2NhbDogbmFtZX0gOiBuYW1lOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXByb3RvdHlwZS1idWlsdGluc1xufVxuIiwiaW1wb3J0IG5hbWVzcGFjZSBmcm9tIFwiLi4vbmFtZXNwYWNlLmpzXCI7XG5cbmZ1bmN0aW9uIGF0dHJSZW1vdmUobmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJSZW1vdmVOUyhmdWxsbmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5yZW1vdmVBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyQ29uc3RhbnQobmFtZSwgdmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuc2V0QXR0cmlidXRlKG5hbWUsIHZhbHVlKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0ckNvbnN0YW50TlMoZnVsbG5hbWUsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCwgdmFsdWUpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyRnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciB2ID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBpZiAodiA9PSBudWxsKSB0aGlzLnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcbiAgICBlbHNlIHRoaXMuc2V0QXR0cmlidXRlKG5hbWUsIHYpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyRnVuY3Rpb25OUyhmdWxsbmFtZSwgdmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciB2ID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBpZiAodiA9PSBudWxsKSB0aGlzLnJlbW92ZUF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCk7XG4gICAgZWxzZSB0aGlzLnNldEF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCwgdik7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gIHZhciBmdWxsbmFtZSA9IG5hbWVzcGFjZShuYW1lKTtcblxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcbiAgICB2YXIgbm9kZSA9IHRoaXMubm9kZSgpO1xuICAgIHJldHVybiBmdWxsbmFtZS5sb2NhbFxuICAgICAgICA/IG5vZGUuZ2V0QXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsKVxuICAgICAgICA6IG5vZGUuZ2V0QXR0cmlidXRlKGZ1bGxuYW1lKTtcbiAgfVxuXG4gIHJldHVybiB0aGlzLmVhY2goKHZhbHVlID09IG51bGxcbiAgICAgID8gKGZ1bGxuYW1lLmxvY2FsID8gYXR0clJlbW92ZU5TIDogYXR0clJlbW92ZSkgOiAodHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgID8gKGZ1bGxuYW1lLmxvY2FsID8gYXR0ckZ1bmN0aW9uTlMgOiBhdHRyRnVuY3Rpb24pXG4gICAgICA6IChmdWxsbmFtZS5sb2NhbCA/IGF0dHJDb25zdGFudE5TIDogYXR0ckNvbnN0YW50KSkpKGZ1bGxuYW1lLCB2YWx1ZSkpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obm9kZSkge1xuICByZXR1cm4gKG5vZGUub3duZXJEb2N1bWVudCAmJiBub2RlLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcpIC8vIG5vZGUgaXMgYSBOb2RlXG4gICAgICB8fCAobm9kZS5kb2N1bWVudCAmJiBub2RlKSAvLyBub2RlIGlzIGEgV2luZG93XG4gICAgICB8fCBub2RlLmRlZmF1bHRWaWV3OyAvLyBub2RlIGlzIGEgRG9jdW1lbnRcbn1cbiIsImltcG9ydCBkZWZhdWx0VmlldyBmcm9tIFwiLi4vd2luZG93LmpzXCI7XG5cbmZ1bmN0aW9uIHN0eWxlUmVtb3ZlKG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuc3R5bGUucmVtb3ZlUHJvcGVydHkobmFtZSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHN0eWxlQ29uc3RhbnQobmFtZSwgdmFsdWUsIHByaW9yaXR5KSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnN0eWxlLnNldFByb3BlcnR5KG5hbWUsIHZhbHVlLCBwcmlvcml0eSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHN0eWxlRnVuY3Rpb24obmFtZSwgdmFsdWUsIHByaW9yaXR5KSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdiA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgaWYgKHYgPT0gbnVsbCkgdGhpcy5zdHlsZS5yZW1vdmVQcm9wZXJ0eShuYW1lKTtcbiAgICBlbHNlIHRoaXMuc3R5bGUuc2V0UHJvcGVydHkobmFtZSwgdiwgcHJpb3JpdHkpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCB2YWx1ZSwgcHJpb3JpdHkpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPiAxXG4gICAgICA/IHRoaXMuZWFjaCgodmFsdWUgPT0gbnVsbFxuICAgICAgICAgICAgPyBzdHlsZVJlbW92ZSA6IHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgICAgICA/IHN0eWxlRnVuY3Rpb25cbiAgICAgICAgICAgIDogc3R5bGVDb25zdGFudCkobmFtZSwgdmFsdWUsIHByaW9yaXR5ID09IG51bGwgPyBcIlwiIDogcHJpb3JpdHkpKVxuICAgICAgOiBzdHlsZVZhbHVlKHRoaXMubm9kZSgpLCBuYW1lKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHN0eWxlVmFsdWUobm9kZSwgbmFtZSkge1xuICByZXR1cm4gbm9kZS5zdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKG5hbWUpXG4gICAgICB8fCBkZWZhdWx0Vmlldyhub2RlKS5nZXRDb21wdXRlZFN0eWxlKG5vZGUsIG51bGwpLmdldFByb3BlcnR5VmFsdWUobmFtZSk7XG59XG4iLCJmdW5jdGlvbiBwcm9wZXJ0eVJlbW92ZShuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICBkZWxldGUgdGhpc1tuYW1lXTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gcHJvcGVydHlDb25zdGFudChuYW1lLCB2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpc1tuYW1lXSA9IHZhbHVlO1xuICB9O1xufVxuXG5mdW5jdGlvbiBwcm9wZXJ0eUZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdiA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgaWYgKHYgPT0gbnVsbCkgZGVsZXRlIHRoaXNbbmFtZV07XG4gICAgZWxzZSB0aGlzW25hbWVdID0gdjtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPiAxXG4gICAgICA/IHRoaXMuZWFjaCgodmFsdWUgPT0gbnVsbFxuICAgICAgICAgID8gcHJvcGVydHlSZW1vdmUgOiB0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICAgID8gcHJvcGVydHlGdW5jdGlvblxuICAgICAgICAgIDogcHJvcGVydHlDb25zdGFudCkobmFtZSwgdmFsdWUpKVxuICAgICAgOiB0aGlzLm5vZGUoKVtuYW1lXTtcbn1cbiIsImZ1bmN0aW9uIGNsYXNzQXJyYXkoc3RyaW5nKSB7XG4gIHJldHVybiBzdHJpbmcudHJpbSgpLnNwbGl0KC9efFxccysvKTtcbn1cblxuZnVuY3Rpb24gY2xhc3NMaXN0KG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUuY2xhc3NMaXN0IHx8IG5ldyBDbGFzc0xpc3Qobm9kZSk7XG59XG5cbmZ1bmN0aW9uIENsYXNzTGlzdChub2RlKSB7XG4gIHRoaXMuX25vZGUgPSBub2RlO1xuICB0aGlzLl9uYW1lcyA9IGNsYXNzQXJyYXkobm9kZS5nZXRBdHRyaWJ1dGUoXCJjbGFzc1wiKSB8fCBcIlwiKTtcbn1cblxuQ2xhc3NMaXN0LnByb3RvdHlwZSA9IHtcbiAgYWRkOiBmdW5jdGlvbihuYW1lKSB7XG4gICAgdmFyIGkgPSB0aGlzLl9uYW1lcy5pbmRleE9mKG5hbWUpO1xuICAgIGlmIChpIDwgMCkge1xuICAgICAgdGhpcy5fbmFtZXMucHVzaChuYW1lKTtcbiAgICAgIHRoaXMuX25vZGUuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgdGhpcy5fbmFtZXMuam9pbihcIiBcIikpO1xuICAgIH1cbiAgfSxcbiAgcmVtb3ZlOiBmdW5jdGlvbihuYW1lKSB7XG4gICAgdmFyIGkgPSB0aGlzLl9uYW1lcy5pbmRleE9mKG5hbWUpO1xuICAgIGlmIChpID49IDApIHtcbiAgICAgIHRoaXMuX25hbWVzLnNwbGljZShpLCAxKTtcbiAgICAgIHRoaXMuX25vZGUuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgdGhpcy5fbmFtZXMuam9pbihcIiBcIikpO1xuICAgIH1cbiAgfSxcbiAgY29udGFpbnM6IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICByZXR1cm4gdGhpcy5fbmFtZXMuaW5kZXhPZihuYW1lKSA+PSAwO1xuICB9XG59O1xuXG5mdW5jdGlvbiBjbGFzc2VkQWRkKG5vZGUsIG5hbWVzKSB7XG4gIHZhciBsaXN0ID0gY2xhc3NMaXN0KG5vZGUpLCBpID0gLTEsIG4gPSBuYW1lcy5sZW5ndGg7XG4gIHdoaWxlICgrK2kgPCBuKSBsaXN0LmFkZChuYW1lc1tpXSk7XG59XG5cbmZ1bmN0aW9uIGNsYXNzZWRSZW1vdmUobm9kZSwgbmFtZXMpIHtcbiAgdmFyIGxpc3QgPSBjbGFzc0xpc3Qobm9kZSksIGkgPSAtMSwgbiA9IG5hbWVzLmxlbmd0aDtcbiAgd2hpbGUgKCsraSA8IG4pIGxpc3QucmVtb3ZlKG5hbWVzW2ldKTtcbn1cblxuZnVuY3Rpb24gY2xhc3NlZFRydWUobmFtZXMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIGNsYXNzZWRBZGQodGhpcywgbmFtZXMpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBjbGFzc2VkRmFsc2UobmFtZXMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIGNsYXNzZWRSZW1vdmUodGhpcywgbmFtZXMpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBjbGFzc2VkRnVuY3Rpb24obmFtZXMsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAodmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKSA/IGNsYXNzZWRBZGQgOiBjbGFzc2VkUmVtb3ZlKSh0aGlzLCBuYW1lcyk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gIHZhciBuYW1lcyA9IGNsYXNzQXJyYXkobmFtZSArIFwiXCIpO1xuXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikge1xuICAgIHZhciBsaXN0ID0gY2xhc3NMaXN0KHRoaXMubm9kZSgpKSwgaSA9IC0xLCBuID0gbmFtZXMubGVuZ3RoO1xuICAgIHdoaWxlICgrK2kgPCBuKSBpZiAoIWxpc3QuY29udGFpbnMobmFtZXNbaV0pKSByZXR1cm4gZmFsc2U7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICByZXR1cm4gdGhpcy5lYWNoKCh0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgPyBjbGFzc2VkRnVuY3Rpb24gOiB2YWx1ZVxuICAgICAgPyBjbGFzc2VkVHJ1ZVxuICAgICAgOiBjbGFzc2VkRmFsc2UpKG5hbWVzLCB2YWx1ZSkpO1xufVxuIiwiZnVuY3Rpb24gdGV4dFJlbW92ZSgpIHtcbiAgdGhpcy50ZXh0Q29udGVudCA9IFwiXCI7XG59XG5cbmZ1bmN0aW9uIHRleHRDb25zdGFudCh2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy50ZXh0Q29udGVudCA9IHZhbHVlO1xuICB9O1xufVxuXG5mdW5jdGlvbiB0ZXh0RnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciB2ID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB0aGlzLnRleHRDb250ZW50ID0gdiA9PSBudWxsID8gXCJcIiA6IHY7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoXG4gICAgICA/IHRoaXMuZWFjaCh2YWx1ZSA9PSBudWxsXG4gICAgICAgICAgPyB0ZXh0UmVtb3ZlIDogKHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgICAgPyB0ZXh0RnVuY3Rpb25cbiAgICAgICAgICA6IHRleHRDb25zdGFudCkodmFsdWUpKVxuICAgICAgOiB0aGlzLm5vZGUoKS50ZXh0Q29udGVudDtcbn1cbiIsImZ1bmN0aW9uIGh0bWxSZW1vdmUoKSB7XG4gIHRoaXMuaW5uZXJIVE1MID0gXCJcIjtcbn1cblxuZnVuY3Rpb24gaHRtbENvbnN0YW50KHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLmlubmVySFRNTCA9IHZhbHVlO1xuICB9O1xufVxuXG5mdW5jdGlvbiBodG1sRnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciB2ID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB0aGlzLmlubmVySFRNTCA9IHYgPT0gbnVsbCA/IFwiXCIgOiB2O1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgPyB0aGlzLmVhY2godmFsdWUgPT0gbnVsbFxuICAgICAgICAgID8gaHRtbFJlbW92ZSA6ICh0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICAgID8gaHRtbEZ1bmN0aW9uXG4gICAgICAgICAgOiBodG1sQ29uc3RhbnQpKHZhbHVlKSlcbiAgICAgIDogdGhpcy5ub2RlKCkuaW5uZXJIVE1MO1xufVxuIiwiZnVuY3Rpb24gcmFpc2UoKSB7XG4gIGlmICh0aGlzLm5leHRTaWJsaW5nKSB0aGlzLnBhcmVudE5vZGUuYXBwZW5kQ2hpbGQodGhpcyk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5lYWNoKHJhaXNlKTtcbn1cbiIsImZ1bmN0aW9uIGxvd2VyKCkge1xuICBpZiAodGhpcy5wcmV2aW91c1NpYmxpbmcpIHRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodGhpcywgdGhpcy5wYXJlbnROb2RlLmZpcnN0Q2hpbGQpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuZWFjaChsb3dlcik7XG59XG4iLCJpbXBvcnQgbmFtZXNwYWNlIGZyb20gXCIuL25hbWVzcGFjZS5qc1wiO1xuaW1wb3J0IHt4aHRtbH0gZnJvbSBcIi4vbmFtZXNwYWNlcy5qc1wiO1xuXG5mdW5jdGlvbiBjcmVhdG9ySW5oZXJpdChuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgZG9jdW1lbnQgPSB0aGlzLm93bmVyRG9jdW1lbnQsXG4gICAgICAgIHVyaSA9IHRoaXMubmFtZXNwYWNlVVJJO1xuICAgIHJldHVybiB1cmkgPT09IHhodG1sICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5uYW1lc3BhY2VVUkkgPT09IHhodG1sXG4gICAgICAgID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChuYW1lKVxuICAgICAgICA6IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyh1cmksIG5hbWUpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBjcmVhdG9yRml4ZWQoZnVsbG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLm93bmVyRG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUpIHtcbiAgdmFyIGZ1bGxuYW1lID0gbmFtZXNwYWNlKG5hbWUpO1xuICByZXR1cm4gKGZ1bGxuYW1lLmxvY2FsXG4gICAgICA/IGNyZWF0b3JGaXhlZFxuICAgICAgOiBjcmVhdG9ySW5oZXJpdCkoZnVsbG5hbWUpO1xufVxuIiwiaW1wb3J0IGNyZWF0b3IgZnJvbSBcIi4uL2NyZWF0b3IuanNcIjtcbmltcG9ydCBzZWxlY3RvciBmcm9tIFwiLi4vc2VsZWN0b3IuanNcIjtcblxuZnVuY3Rpb24gY29uc3RhbnROdWxsKCkge1xuICByZXR1cm4gbnVsbDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSwgYmVmb3JlKSB7XG4gIHZhciBjcmVhdGUgPSB0eXBlb2YgbmFtZSA9PT0gXCJmdW5jdGlvblwiID8gbmFtZSA6IGNyZWF0b3IobmFtZSksXG4gICAgICBzZWxlY3QgPSBiZWZvcmUgPT0gbnVsbCA/IGNvbnN0YW50TnVsbCA6IHR5cGVvZiBiZWZvcmUgPT09IFwiZnVuY3Rpb25cIiA/IGJlZm9yZSA6IHNlbGVjdG9yKGJlZm9yZSk7XG4gIHJldHVybiB0aGlzLnNlbGVjdChmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5pbnNlcnRCZWZvcmUoY3JlYXRlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksIHNlbGVjdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IG51bGwpO1xuICB9KTtcbn1cbiIsImZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgdmFyIHBhcmVudCA9IHRoaXMucGFyZW50Tm9kZTtcbiAgaWYgKHBhcmVudCkgcGFyZW50LnJlbW92ZUNoaWxkKHRoaXMpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuZWFjaChyZW1vdmUpO1xufVxuIiwiZnVuY3Rpb24gc2VsZWN0aW9uX2Nsb25lU2hhbGxvdygpIHtcbiAgdmFyIGNsb25lID0gdGhpcy5jbG9uZU5vZGUoZmFsc2UpLCBwYXJlbnQgPSB0aGlzLnBhcmVudE5vZGU7XG4gIHJldHVybiBwYXJlbnQgPyBwYXJlbnQuaW5zZXJ0QmVmb3JlKGNsb25lLCB0aGlzLm5leHRTaWJsaW5nKSA6IGNsb25lO1xufVxuXG5mdW5jdGlvbiBzZWxlY3Rpb25fY2xvbmVEZWVwKCkge1xuICB2YXIgY2xvbmUgPSB0aGlzLmNsb25lTm9kZSh0cnVlKSwgcGFyZW50ID0gdGhpcy5wYXJlbnROb2RlO1xuICByZXR1cm4gcGFyZW50ID8gcGFyZW50Lmluc2VydEJlZm9yZShjbG9uZSwgdGhpcy5uZXh0U2libGluZykgOiBjbG9uZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oZGVlcCkge1xuICByZXR1cm4gdGhpcy5zZWxlY3QoZGVlcCA/IHNlbGVjdGlvbl9jbG9uZURlZXAgOiBzZWxlY3Rpb25fY2xvbmVTaGFsbG93KTtcbn1cbiIsImZ1bmN0aW9uIGNvbnRleHRMaXN0ZW5lcihsaXN0ZW5lcikge1xuICByZXR1cm4gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICBsaXN0ZW5lci5jYWxsKHRoaXMsIGV2ZW50LCB0aGlzLl9fZGF0YV9fKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gcGFyc2VUeXBlbmFtZXModHlwZW5hbWVzKSB7XG4gIHJldHVybiB0eXBlbmFtZXMudHJpbSgpLnNwbGl0KC9efFxccysvKS5tYXAoZnVuY3Rpb24odCkge1xuICAgIHZhciBuYW1lID0gXCJcIiwgaSA9IHQuaW5kZXhPZihcIi5cIik7XG4gICAgaWYgKGkgPj0gMCkgbmFtZSA9IHQuc2xpY2UoaSArIDEpLCB0ID0gdC5zbGljZSgwLCBpKTtcbiAgICByZXR1cm4ge3R5cGU6IHQsIG5hbWU6IG5hbWV9O1xuICB9KTtcbn1cblxuZnVuY3Rpb24gb25SZW1vdmUodHlwZW5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBvbiA9IHRoaXMuX19vbjtcbiAgICBpZiAoIW9uKSByZXR1cm47XG4gICAgZm9yICh2YXIgaiA9IDAsIGkgPSAtMSwgbSA9IG9uLmxlbmd0aCwgbzsgaiA8IG07ICsraikge1xuICAgICAgaWYgKG8gPSBvbltqXSwgKCF0eXBlbmFtZS50eXBlIHx8IG8udHlwZSA9PT0gdHlwZW5hbWUudHlwZSkgJiYgby5uYW1lID09PSB0eXBlbmFtZS5uYW1lKSB7XG4gICAgICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcihvLnR5cGUsIG8ubGlzdGVuZXIsIG8ub3B0aW9ucyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvblsrK2ldID0gbztcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKCsraSkgb24ubGVuZ3RoID0gaTtcbiAgICBlbHNlIGRlbGV0ZSB0aGlzLl9fb247XG4gIH07XG59XG5cbmZ1bmN0aW9uIG9uQWRkKHR5cGVuYW1lLCB2YWx1ZSwgb3B0aW9ucykge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIG9uID0gdGhpcy5fX29uLCBvLCBsaXN0ZW5lciA9IGNvbnRleHRMaXN0ZW5lcih2YWx1ZSk7XG4gICAgaWYgKG9uKSBmb3IgKHZhciBqID0gMCwgbSA9IG9uLmxlbmd0aDsgaiA8IG07ICsraikge1xuICAgICAgaWYgKChvID0gb25bal0pLnR5cGUgPT09IHR5cGVuYW1lLnR5cGUgJiYgby5uYW1lID09PSB0eXBlbmFtZS5uYW1lKSB7XG4gICAgICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcihvLnR5cGUsIG8ubGlzdGVuZXIsIG8ub3B0aW9ucyk7XG4gICAgICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcihvLnR5cGUsIG8ubGlzdGVuZXIgPSBsaXN0ZW5lciwgby5vcHRpb25zID0gb3B0aW9ucyk7XG4gICAgICAgIG8udmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIodHlwZW5hbWUudHlwZSwgbGlzdGVuZXIsIG9wdGlvbnMpO1xuICAgIG8gPSB7dHlwZTogdHlwZW5hbWUudHlwZSwgbmFtZTogdHlwZW5hbWUubmFtZSwgdmFsdWU6IHZhbHVlLCBsaXN0ZW5lcjogbGlzdGVuZXIsIG9wdGlvbnM6IG9wdGlvbnN9O1xuICAgIGlmICghb24pIHRoaXMuX19vbiA9IFtvXTtcbiAgICBlbHNlIG9uLnB1c2gobyk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHR5cGVuYW1lLCB2YWx1ZSwgb3B0aW9ucykge1xuICB2YXIgdHlwZW5hbWVzID0gcGFyc2VUeXBlbmFtZXModHlwZW5hbWUgKyBcIlwiKSwgaSwgbiA9IHR5cGVuYW1lcy5sZW5ndGgsIHQ7XG5cbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSB7XG4gICAgdmFyIG9uID0gdGhpcy5ub2RlKCkuX19vbjtcbiAgICBpZiAob24pIGZvciAodmFyIGogPSAwLCBtID0gb24ubGVuZ3RoLCBvOyBqIDwgbTsgKytqKSB7XG4gICAgICBmb3IgKGkgPSAwLCBvID0gb25bal07IGkgPCBuOyArK2kpIHtcbiAgICAgICAgaWYgKCh0ID0gdHlwZW5hbWVzW2ldKS50eXBlID09PSBvLnR5cGUgJiYgdC5uYW1lID09PSBvLm5hbWUpIHtcbiAgICAgICAgICByZXR1cm4gby52YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm47XG4gIH1cblxuICBvbiA9IHZhbHVlID8gb25BZGQgOiBvblJlbW92ZTtcbiAgZm9yIChpID0gMDsgaSA8IG47ICsraSkgdGhpcy5lYWNoKG9uKHR5cGVuYW1lc1tpXSwgdmFsdWUsIG9wdGlvbnMpKTtcbiAgcmV0dXJuIHRoaXM7XG59XG4iLCJpbXBvcnQgZGVmYXVsdFZpZXcgZnJvbSBcIi4uL3dpbmRvdy5qc1wiO1xuXG5mdW5jdGlvbiBkaXNwYXRjaEV2ZW50KG5vZGUsIHR5cGUsIHBhcmFtcykge1xuICB2YXIgd2luZG93ID0gZGVmYXVsdFZpZXcobm9kZSksXG4gICAgICBldmVudCA9IHdpbmRvdy5DdXN0b21FdmVudDtcblxuICBpZiAodHlwZW9mIGV2ZW50ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBldmVudCA9IG5ldyBldmVudCh0eXBlLCBwYXJhbXMpO1xuICB9IGVsc2Uge1xuICAgIGV2ZW50ID0gd2luZG93LmRvY3VtZW50LmNyZWF0ZUV2ZW50KFwiRXZlbnRcIik7XG4gICAgaWYgKHBhcmFtcykgZXZlbnQuaW5pdEV2ZW50KHR5cGUsIHBhcmFtcy5idWJibGVzLCBwYXJhbXMuY2FuY2VsYWJsZSksIGV2ZW50LmRldGFpbCA9IHBhcmFtcy5kZXRhaWw7XG4gICAgZWxzZSBldmVudC5pbml0RXZlbnQodHlwZSwgZmFsc2UsIGZhbHNlKTtcbiAgfVxuXG4gIG5vZGUuZGlzcGF0Y2hFdmVudChldmVudCk7XG59XG5cbmZ1bmN0aW9uIGRpc3BhdGNoQ29uc3RhbnQodHlwZSwgcGFyYW1zKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZGlzcGF0Y2hFdmVudCh0aGlzLCB0eXBlLCBwYXJhbXMpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBkaXNwYXRjaEZ1bmN0aW9uKHR5cGUsIHBhcmFtcykge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGRpc3BhdGNoRXZlbnQodGhpcywgdHlwZSwgcGFyYW1zLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih0eXBlLCBwYXJhbXMpIHtcbiAgcmV0dXJuIHRoaXMuZWFjaCgodHlwZW9mIHBhcmFtcyA9PT0gXCJmdW5jdGlvblwiXG4gICAgICA/IGRpc3BhdGNoRnVuY3Rpb25cbiAgICAgIDogZGlzcGF0Y2hDb25zdGFudCkodHlwZSwgcGFyYW1zKSk7XG59XG4iLCJpbXBvcnQgc2VsZWN0aW9uX3NlbGVjdCBmcm9tIFwiLi9zZWxlY3QuanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fc2VsZWN0QWxsIGZyb20gXCIuL3NlbGVjdEFsbC5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9zZWxlY3RDaGlsZCBmcm9tIFwiLi9zZWxlY3RDaGlsZC5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9zZWxlY3RDaGlsZHJlbiBmcm9tIFwiLi9zZWxlY3RDaGlsZHJlbi5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9maWx0ZXIgZnJvbSBcIi4vZmlsdGVyLmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2RhdGEgZnJvbSBcIi4vZGF0YS5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9lbnRlciBmcm9tIFwiLi9lbnRlci5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9leGl0IGZyb20gXCIuL2V4aXQuanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fam9pbiBmcm9tIFwiLi9qb2luLmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX21lcmdlIGZyb20gXCIuL21lcmdlLmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX29yZGVyIGZyb20gXCIuL29yZGVyLmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX3NvcnQgZnJvbSBcIi4vc29ydC5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9jYWxsIGZyb20gXCIuL2NhbGwuanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fbm9kZXMgZnJvbSBcIi4vbm9kZXMuanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fbm9kZSBmcm9tIFwiLi9ub2RlLmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX3NpemUgZnJvbSBcIi4vc2l6ZS5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9lbXB0eSBmcm9tIFwiLi9lbXB0eS5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9lYWNoIGZyb20gXCIuL2VhY2guanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fYXR0ciBmcm9tIFwiLi9hdHRyLmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX3N0eWxlIGZyb20gXCIuL3N0eWxlLmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX3Byb3BlcnR5IGZyb20gXCIuL3Byb3BlcnR5LmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2NsYXNzZWQgZnJvbSBcIi4vY2xhc3NlZC5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl90ZXh0IGZyb20gXCIuL3RleHQuanNcIjtcbmltcG9ydCBzZWxlY3Rpb25faHRtbCBmcm9tIFwiLi9odG1sLmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX3JhaXNlIGZyb20gXCIuL3JhaXNlLmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2xvd2VyIGZyb20gXCIuL2xvd2VyLmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2FwcGVuZCBmcm9tIFwiLi9hcHBlbmQuanNcIjtcbmltcG9ydCBzZWxlY3Rpb25faW5zZXJ0IGZyb20gXCIuL2luc2VydC5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9yZW1vdmUgZnJvbSBcIi4vcmVtb3ZlLmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2Nsb25lIGZyb20gXCIuL2Nsb25lLmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2RhdHVtIGZyb20gXCIuL2RhdHVtLmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX29uIGZyb20gXCIuL29uLmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2Rpc3BhdGNoIGZyb20gXCIuL2Rpc3BhdGNoLmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2l0ZXJhdG9yIGZyb20gXCIuL2l0ZXJhdG9yLmpzXCI7XG5cbmV4cG9ydCB2YXIgcm9vdCA9IFtudWxsXTtcblxuZXhwb3J0IGZ1bmN0aW9uIFNlbGVjdGlvbihncm91cHMsIHBhcmVudHMpIHtcbiAgdGhpcy5fZ3JvdXBzID0gZ3JvdXBzO1xuICB0aGlzLl9wYXJlbnRzID0gcGFyZW50cztcbn1cblxuZnVuY3Rpb24gc2VsZWN0aW9uKCkge1xuICByZXR1cm4gbmV3IFNlbGVjdGlvbihbW2RvY3VtZW50LmRvY3VtZW50RWxlbWVudF1dLCByb290KTtcbn1cblxuZnVuY3Rpb24gc2VsZWN0aW9uX3NlbGVjdGlvbigpIHtcbiAgcmV0dXJuIHRoaXM7XG59XG5cblNlbGVjdGlvbi5wcm90b3R5cGUgPSBzZWxlY3Rpb24ucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogU2VsZWN0aW9uLFxuICBzZWxlY3Q6IHNlbGVjdGlvbl9zZWxlY3QsXG4gIHNlbGVjdEFsbDogc2VsZWN0aW9uX3NlbGVjdEFsbCxcbiAgc2VsZWN0Q2hpbGQ6IHNlbGVjdGlvbl9zZWxlY3RDaGlsZCxcbiAgc2VsZWN0Q2hpbGRyZW46IHNlbGVjdGlvbl9zZWxlY3RDaGlsZHJlbixcbiAgZmlsdGVyOiBzZWxlY3Rpb25fZmlsdGVyLFxuICBkYXRhOiBzZWxlY3Rpb25fZGF0YSxcbiAgZW50ZXI6IHNlbGVjdGlvbl9lbnRlcixcbiAgZXhpdDogc2VsZWN0aW9uX2V4aXQsXG4gIGpvaW46IHNlbGVjdGlvbl9qb2luLFxuICBtZXJnZTogc2VsZWN0aW9uX21lcmdlLFxuICBzZWxlY3Rpb246IHNlbGVjdGlvbl9zZWxlY3Rpb24sXG4gIG9yZGVyOiBzZWxlY3Rpb25fb3JkZXIsXG4gIHNvcnQ6IHNlbGVjdGlvbl9zb3J0LFxuICBjYWxsOiBzZWxlY3Rpb25fY2FsbCxcbiAgbm9kZXM6IHNlbGVjdGlvbl9ub2RlcyxcbiAgbm9kZTogc2VsZWN0aW9uX25vZGUsXG4gIHNpemU6IHNlbGVjdGlvbl9zaXplLFxuICBlbXB0eTogc2VsZWN0aW9uX2VtcHR5LFxuICBlYWNoOiBzZWxlY3Rpb25fZWFjaCxcbiAgYXR0cjogc2VsZWN0aW9uX2F0dHIsXG4gIHN0eWxlOiBzZWxlY3Rpb25fc3R5bGUsXG4gIHByb3BlcnR5OiBzZWxlY3Rpb25fcHJvcGVydHksXG4gIGNsYXNzZWQ6IHNlbGVjdGlvbl9jbGFzc2VkLFxuICB0ZXh0OiBzZWxlY3Rpb25fdGV4dCxcbiAgaHRtbDogc2VsZWN0aW9uX2h0bWwsXG4gIHJhaXNlOiBzZWxlY3Rpb25fcmFpc2UsXG4gIGxvd2VyOiBzZWxlY3Rpb25fbG93ZXIsXG4gIGFwcGVuZDogc2VsZWN0aW9uX2FwcGVuZCxcbiAgaW5zZXJ0OiBzZWxlY3Rpb25faW5zZXJ0LFxuICByZW1vdmU6IHNlbGVjdGlvbl9yZW1vdmUsXG4gIGNsb25lOiBzZWxlY3Rpb25fY2xvbmUsXG4gIGRhdHVtOiBzZWxlY3Rpb25fZGF0dW0sXG4gIG9uOiBzZWxlY3Rpb25fb24sXG4gIGRpc3BhdGNoOiBzZWxlY3Rpb25fZGlzcGF0Y2gsXG4gIFtTeW1ib2wuaXRlcmF0b3JdOiBzZWxlY3Rpb25faXRlcmF0b3Jcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHNlbGVjdGlvbjtcbiIsImltcG9ydCB7U2VsZWN0aW9ufSBmcm9tIFwiLi9pbmRleC5qc1wiO1xuaW1wb3J0IHNlbGVjdG9yIGZyb20gXCIuLi9zZWxlY3Rvci5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZWxlY3QpIHtcbiAgaWYgKHR5cGVvZiBzZWxlY3QgIT09IFwiZnVuY3Rpb25cIikgc2VsZWN0ID0gc2VsZWN0b3Ioc2VsZWN0KTtcblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIG0gPSBncm91cHMubGVuZ3RoLCBzdWJncm91cHMgPSBuZXcgQXJyYXkobSksIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIG4gPSBncm91cC5sZW5ndGgsIHN1Ymdyb3VwID0gc3ViZ3JvdXBzW2pdID0gbmV3IEFycmF5KG4pLCBub2RlLCBzdWJub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKChub2RlID0gZ3JvdXBbaV0pICYmIChzdWJub2RlID0gc2VsZWN0LmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgZ3JvdXApKSkge1xuICAgICAgICBpZiAoXCJfX2RhdGFfX1wiIGluIG5vZGUpIHN1Ym5vZGUuX19kYXRhX18gPSBub2RlLl9fZGF0YV9fO1xuICAgICAgICBzdWJncm91cFtpXSA9IHN1Ym5vZGU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ldyBTZWxlY3Rpb24oc3ViZ3JvdXBzLCB0aGlzLl9wYXJlbnRzKTtcbn1cbiIsImltcG9ydCB7U2VsZWN0aW9ufSBmcm9tIFwiLi9pbmRleC5qc1wiO1xuaW1wb3J0IGFycmF5IGZyb20gXCIuLi9hcnJheS5qc1wiO1xuaW1wb3J0IHNlbGVjdG9yQWxsIGZyb20gXCIuLi9zZWxlY3RvckFsbC5qc1wiO1xuXG5mdW5jdGlvbiBhcnJheUFsbChzZWxlY3QpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBncm91cCA9IHNlbGVjdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIHJldHVybiBncm91cCA9PSBudWxsID8gW10gOiBhcnJheShncm91cCk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNlbGVjdCkge1xuICBpZiAodHlwZW9mIHNlbGVjdCA9PT0gXCJmdW5jdGlvblwiKSBzZWxlY3QgPSBhcnJheUFsbChzZWxlY3QpO1xuICBlbHNlIHNlbGVjdCA9IHNlbGVjdG9yQWxsKHNlbGVjdCk7XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBtID0gZ3JvdXBzLmxlbmd0aCwgc3ViZ3JvdXBzID0gW10sIHBhcmVudHMgPSBbXSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgbiA9IGdyb3VwLmxlbmd0aCwgbm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcbiAgICAgICAgc3ViZ3JvdXBzLnB1c2goc2VsZWN0LmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgZ3JvdXApKTtcbiAgICAgICAgcGFyZW50cy5wdXNoKG5vZGUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKHN1Ymdyb3VwcywgcGFyZW50cyk7XG59XG4iLCJpbXBvcnQge1NlbGVjdGlvbn0gZnJvbSBcIi4vaW5kZXguanNcIjtcbmltcG9ydCBtYXRjaGVyIGZyb20gXCIuLi9tYXRjaGVyLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG1hdGNoKSB7XG4gIGlmICh0eXBlb2YgbWF0Y2ggIT09IFwiZnVuY3Rpb25cIikgbWF0Y2ggPSBtYXRjaGVyKG1hdGNoKTtcblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIG0gPSBncm91cHMubGVuZ3RoLCBzdWJncm91cHMgPSBuZXcgQXJyYXkobSksIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIG4gPSBncm91cC5sZW5ndGgsIHN1Ymdyb3VwID0gc3ViZ3JvdXBzW2pdID0gW10sIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAoKG5vZGUgPSBncm91cFtpXSkgJiYgbWF0Y2guY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBncm91cCkpIHtcbiAgICAgICAgc3ViZ3JvdXAucHVzaChub2RlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3IFNlbGVjdGlvbihzdWJncm91cHMsIHRoaXMuX3BhcmVudHMpO1xufVxuIiwiaW1wb3J0IHNwYXJzZSBmcm9tIFwiLi9zcGFyc2UuanNcIjtcbmltcG9ydCB7U2VsZWN0aW9ufSBmcm9tIFwiLi9pbmRleC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBTZWxlY3Rpb24odGhpcy5fZXhpdCB8fCB0aGlzLl9ncm91cHMubWFwKHNwYXJzZSksIHRoaXMuX3BhcmVudHMpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ob25lbnRlciwgb251cGRhdGUsIG9uZXhpdCkge1xuICB2YXIgZW50ZXIgPSB0aGlzLmVudGVyKCksIHVwZGF0ZSA9IHRoaXMsIGV4aXQgPSB0aGlzLmV4aXQoKTtcbiAgZW50ZXIgPSB0eXBlb2Ygb25lbnRlciA9PT0gXCJmdW5jdGlvblwiID8gb25lbnRlcihlbnRlcikgOiBlbnRlci5hcHBlbmQob25lbnRlciArIFwiXCIpO1xuICBpZiAob251cGRhdGUgIT0gbnVsbCkgdXBkYXRlID0gb251cGRhdGUodXBkYXRlKTtcbiAgaWYgKG9uZXhpdCA9PSBudWxsKSBleGl0LnJlbW92ZSgpOyBlbHNlIG9uZXhpdChleGl0KTtcbiAgcmV0dXJuIGVudGVyICYmIHVwZGF0ZSA/IGVudGVyLm1lcmdlKHVwZGF0ZSkub3JkZXIoKSA6IHVwZGF0ZTtcbn1cbiIsImltcG9ydCB7U2VsZWN0aW9ufSBmcm9tIFwiLi9pbmRleC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZWxlY3Rpb24pIHtcbiAgaWYgKCEoc2VsZWN0aW9uIGluc3RhbmNlb2YgU2VsZWN0aW9uKSkgdGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBtZXJnZVwiKTtcblxuICBmb3IgKHZhciBncm91cHMwID0gdGhpcy5fZ3JvdXBzLCBncm91cHMxID0gc2VsZWN0aW9uLl9ncm91cHMsIG0wID0gZ3JvdXBzMC5sZW5ndGgsIG0xID0gZ3JvdXBzMS5sZW5ndGgsIG0gPSBNYXRoLm1pbihtMCwgbTEpLCBtZXJnZXMgPSBuZXcgQXJyYXkobTApLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwMCA9IGdyb3VwczBbal0sIGdyb3VwMSA9IGdyb3VwczFbal0sIG4gPSBncm91cDAubGVuZ3RoLCBtZXJnZSA9IG1lcmdlc1tqXSA9IG5ldyBBcnJheShuKSwgbm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmIChub2RlID0gZ3JvdXAwW2ldIHx8IGdyb3VwMVtpXSkge1xuICAgICAgICBtZXJnZVtpXSA9IG5vZGU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZm9yICg7IGogPCBtMDsgKytqKSB7XG4gICAgbWVyZ2VzW2pdID0gZ3JvdXBzMFtqXTtcbiAgfVxuXG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKG1lcmdlcywgdGhpcy5fcGFyZW50cyk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIGogPSAtMSwgbSA9IGdyb3Vwcy5sZW5ndGg7ICsraiA8IG07KSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIGkgPSBncm91cC5sZW5ndGggLSAxLCBuZXh0ID0gZ3JvdXBbaV0sIG5vZGU7IC0taSA+PSAwOykge1xuICAgICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuICAgICAgICBpZiAobmV4dCAmJiBub2RlLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKG5leHQpIF4gNCkgbmV4dC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShub2RlLCBuZXh0KTtcbiAgICAgICAgbmV4dCA9IG5vZGU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIGNhbGxiYWNrID0gYXJndW1lbnRzWzBdO1xuICBhcmd1bWVudHNbMF0gPSB0aGlzO1xuICBjYWxsYmFjay5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICByZXR1cm4gdGhpcztcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gQXJyYXkuZnJvbSh0aGlzKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgaiA9IDAsIG0gPSBncm91cHMubGVuZ3RoOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIGkgPSAwLCBuID0gZ3JvdXAubGVuZ3RoOyBpIDwgbjsgKytpKSB7XG4gICAgICB2YXIgbm9kZSA9IGdyb3VwW2ldO1xuICAgICAgaWYgKG5vZGUpIHJldHVybiBub2RlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIGxldCBzaXplID0gMDtcbiAgZm9yIChjb25zdCBub2RlIG9mIHRoaXMpICsrc2l6ZTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICByZXR1cm4gc2l6ZTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gIXRoaXMubm9kZSgpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY2FsbGJhY2spIHtcblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIGogPSAwLCBtID0gZ3JvdXBzLmxlbmd0aDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBpID0gMCwgbiA9IGdyb3VwLmxlbmd0aCwgbm9kZTsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKG5vZGUgPSBncm91cFtpXSkgY2FsbGJhY2suY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBncm91cCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59XG4iLCJpbXBvcnQgY3JlYXRvciBmcm9tIFwiLi4vY3JlYXRvci5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lKSB7XG4gIHZhciBjcmVhdGUgPSB0eXBlb2YgbmFtZSA9PT0gXCJmdW5jdGlvblwiID8gbmFtZSA6IGNyZWF0b3IobmFtZSk7XG4gIHJldHVybiB0aGlzLnNlbGVjdChmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5hcHBlbmRDaGlsZChjcmVhdGUuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH0pO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgID8gdGhpcy5wcm9wZXJ0eShcIl9fZGF0YV9fXCIsIHZhbHVlKVxuICAgICAgOiB0aGlzLm5vZGUoKS5fX2RhdGFfXztcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKigpIHtcbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBqID0gMCwgbSA9IGdyb3Vwcy5sZW5ndGg7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgaSA9IDAsIG4gPSBncm91cC5sZW5ndGgsIG5vZGU7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHlpZWxkIG5vZGU7XG4gICAgfVxuICB9XG59XG4iLCJ2YXIgbm9vcCA9IHt2YWx1ZTogKCkgPT4ge319O1xuXG5mdW5jdGlvbiBkaXNwYXRjaCgpIHtcbiAgZm9yICh2YXIgaSA9IDAsIG4gPSBhcmd1bWVudHMubGVuZ3RoLCBfID0ge30sIHQ7IGkgPCBuOyArK2kpIHtcbiAgICBpZiAoISh0ID0gYXJndW1lbnRzW2ldICsgXCJcIikgfHwgKHQgaW4gXykgfHwgL1tcXHMuXS8udGVzdCh0KSkgdGhyb3cgbmV3IEVycm9yKFwiaWxsZWdhbCB0eXBlOiBcIiArIHQpO1xuICAgIF9bdF0gPSBbXTtcbiAgfVxuICByZXR1cm4gbmV3IERpc3BhdGNoKF8pO1xufVxuXG5mdW5jdGlvbiBEaXNwYXRjaChfKSB7XG4gIHRoaXMuXyA9IF87XG59XG5cbmZ1bmN0aW9uIHBhcnNlVHlwZW5hbWVzKHR5cGVuYW1lcywgdHlwZXMpIHtcbiAgcmV0dXJuIHR5cGVuYW1lcy50cmltKCkuc3BsaXQoL158XFxzKy8pLm1hcChmdW5jdGlvbih0KSB7XG4gICAgdmFyIG5hbWUgPSBcIlwiLCBpID0gdC5pbmRleE9mKFwiLlwiKTtcbiAgICBpZiAoaSA+PSAwKSBuYW1lID0gdC5zbGljZShpICsgMSksIHQgPSB0LnNsaWNlKDAsIGkpO1xuICAgIGlmICh0ICYmICF0eXBlcy5oYXNPd25Qcm9wZXJ0eSh0KSkgdGhyb3cgbmV3IEVycm9yKFwidW5rbm93biB0eXBlOiBcIiArIHQpO1xuICAgIHJldHVybiB7dHlwZTogdCwgbmFtZTogbmFtZX07XG4gIH0pO1xufVxuXG5EaXNwYXRjaC5wcm90b3R5cGUgPSBkaXNwYXRjaC5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBEaXNwYXRjaCxcbiAgb246IGZ1bmN0aW9uKHR5cGVuYW1lLCBjYWxsYmFjaykge1xuICAgIHZhciBfID0gdGhpcy5fLFxuICAgICAgICBUID0gcGFyc2VUeXBlbmFtZXModHlwZW5hbWUgKyBcIlwiLCBfKSxcbiAgICAgICAgdCxcbiAgICAgICAgaSA9IC0xLFxuICAgICAgICBuID0gVC5sZW5ndGg7XG5cbiAgICAvLyBJZiBubyBjYWxsYmFjayB3YXMgc3BlY2lmaWVkLCByZXR1cm4gdGhlIGNhbGxiYWNrIG9mIHRoZSBnaXZlbiB0eXBlIGFuZCBuYW1lLlxuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikge1xuICAgICAgd2hpbGUgKCsraSA8IG4pIGlmICgodCA9ICh0eXBlbmFtZSA9IFRbaV0pLnR5cGUpICYmICh0ID0gZ2V0KF9bdF0sIHR5cGVuYW1lLm5hbWUpKSkgcmV0dXJuIHQ7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gSWYgYSB0eXBlIHdhcyBzcGVjaWZpZWQsIHNldCB0aGUgY2FsbGJhY2sgZm9yIHRoZSBnaXZlbiB0eXBlIGFuZCBuYW1lLlxuICAgIC8vIE90aGVyd2lzZSwgaWYgYSBudWxsIGNhbGxiYWNrIHdhcyBzcGVjaWZpZWQsIHJlbW92ZSBjYWxsYmFja3Mgb2YgdGhlIGdpdmVuIG5hbWUuXG4gICAgaWYgKGNhbGxiYWNrICE9IG51bGwgJiYgdHlwZW9mIGNhbGxiYWNrICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBFcnJvcihcImludmFsaWQgY2FsbGJhY2s6IFwiICsgY2FsbGJhY2spO1xuICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICBpZiAodCA9ICh0eXBlbmFtZSA9IFRbaV0pLnR5cGUpIF9bdF0gPSBzZXQoX1t0XSwgdHlwZW5hbWUubmFtZSwgY2FsbGJhY2spO1xuICAgICAgZWxzZSBpZiAoY2FsbGJhY2sgPT0gbnVsbCkgZm9yICh0IGluIF8pIF9bdF0gPSBzZXQoX1t0XSwgdHlwZW5hbWUubmFtZSwgbnVsbCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG4gIGNvcHk6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBjb3B5ID0ge30sIF8gPSB0aGlzLl87XG4gICAgZm9yICh2YXIgdCBpbiBfKSBjb3B5W3RdID0gX1t0XS5zbGljZSgpO1xuICAgIHJldHVybiBuZXcgRGlzcGF0Y2goY29weSk7XG4gIH0sXG4gIGNhbGw6IGZ1bmN0aW9uKHR5cGUsIHRoYXQpIHtcbiAgICBpZiAoKG4gPSBhcmd1bWVudHMubGVuZ3RoIC0gMikgPiAwKSBmb3IgKHZhciBhcmdzID0gbmV3IEFycmF5KG4pLCBpID0gMCwgbiwgdDsgaSA8IG47ICsraSkgYXJnc1tpXSA9IGFyZ3VtZW50c1tpICsgMl07XG4gICAgaWYgKCF0aGlzLl8uaGFzT3duUHJvcGVydHkodHlwZSkpIHRocm93IG5ldyBFcnJvcihcInVua25vd24gdHlwZTogXCIgKyB0eXBlKTtcbiAgICBmb3IgKHQgPSB0aGlzLl9bdHlwZV0sIGkgPSAwLCBuID0gdC5sZW5ndGg7IGkgPCBuOyArK2kpIHRbaV0udmFsdWUuYXBwbHkodGhhdCwgYXJncyk7XG4gIH0sXG4gIGFwcGx5OiBmdW5jdGlvbih0eXBlLCB0aGF0LCBhcmdzKSB7XG4gICAgaWYgKCF0aGlzLl8uaGFzT3duUHJvcGVydHkodHlwZSkpIHRocm93IG5ldyBFcnJvcihcInVua25vd24gdHlwZTogXCIgKyB0eXBlKTtcbiAgICBmb3IgKHZhciB0ID0gdGhpcy5fW3R5cGVdLCBpID0gMCwgbiA9IHQubGVuZ3RoOyBpIDwgbjsgKytpKSB0W2ldLnZhbHVlLmFwcGx5KHRoYXQsIGFyZ3MpO1xuICB9XG59O1xuXG5mdW5jdGlvbiBnZXQodHlwZSwgbmFtZSkge1xuICBmb3IgKHZhciBpID0gMCwgbiA9IHR5cGUubGVuZ3RoLCBjOyBpIDwgbjsgKytpKSB7XG4gICAgaWYgKChjID0gdHlwZVtpXSkubmFtZSA9PT0gbmFtZSkge1xuICAgICAgcmV0dXJuIGMudmFsdWU7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHNldCh0eXBlLCBuYW1lLCBjYWxsYmFjaykge1xuICBmb3IgKHZhciBpID0gMCwgbiA9IHR5cGUubGVuZ3RoOyBpIDwgbjsgKytpKSB7XG4gICAgaWYgKHR5cGVbaV0ubmFtZSA9PT0gbmFtZSkge1xuICAgICAgdHlwZVtpXSA9IG5vb3AsIHR5cGUgPSB0eXBlLnNsaWNlKDAsIGkpLmNvbmNhdCh0eXBlLnNsaWNlKGkgKyAxKSk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgaWYgKGNhbGxiYWNrICE9IG51bGwpIHR5cGUucHVzaCh7bmFtZTogbmFtZSwgdmFsdWU6IGNhbGxiYWNrfSk7XG4gIHJldHVybiB0eXBlO1xufVxuXG5leHBvcnQgZGVmYXVsdCBkaXNwYXRjaDtcbiIsInZhciBmcmFtZSA9IDAsIC8vIGlzIGFuIGFuaW1hdGlvbiBmcmFtZSBwZW5kaW5nP1xuICAgIHRpbWVvdXQgPSAwLCAvLyBpcyBhIHRpbWVvdXQgcGVuZGluZz9cbiAgICBpbnRlcnZhbCA9IDAsIC8vIGFyZSBhbnkgdGltZXJzIGFjdGl2ZT9cbiAgICBwb2tlRGVsYXkgPSAxMDAwLCAvLyBob3cgZnJlcXVlbnRseSB3ZSBjaGVjayBmb3IgY2xvY2sgc2tld1xuICAgIHRhc2tIZWFkLFxuICAgIHRhc2tUYWlsLFxuICAgIGNsb2NrTGFzdCA9IDAsXG4gICAgY2xvY2tOb3cgPSAwLFxuICAgIGNsb2NrU2tldyA9IDAsXG4gICAgY2xvY2sgPSB0eXBlb2YgcGVyZm9ybWFuY2UgPT09IFwib2JqZWN0XCIgJiYgcGVyZm9ybWFuY2Uubm93ID8gcGVyZm9ybWFuY2UgOiBEYXRlLFxuICAgIHNldEZyYW1lID0gdHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIiAmJiB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lID8gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZS5iaW5kKHdpbmRvdykgOiBmdW5jdGlvbihmKSB7IHNldFRpbWVvdXQoZiwgMTcpOyB9O1xuXG5leHBvcnQgZnVuY3Rpb24gbm93KCkge1xuICByZXR1cm4gY2xvY2tOb3cgfHwgKHNldEZyYW1lKGNsZWFyTm93KSwgY2xvY2tOb3cgPSBjbG9jay5ub3coKSArIGNsb2NrU2tldyk7XG59XG5cbmZ1bmN0aW9uIGNsZWFyTm93KCkge1xuICBjbG9ja05vdyA9IDA7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBUaW1lcigpIHtcbiAgdGhpcy5fY2FsbCA9XG4gIHRoaXMuX3RpbWUgPVxuICB0aGlzLl9uZXh0ID0gbnVsbDtcbn1cblxuVGltZXIucHJvdG90eXBlID0gdGltZXIucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogVGltZXIsXG4gIHJlc3RhcnQ6IGZ1bmN0aW9uKGNhbGxiYWNrLCBkZWxheSwgdGltZSkge1xuICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcImNhbGxiYWNrIGlzIG5vdCBhIGZ1bmN0aW9uXCIpO1xuICAgIHRpbWUgPSAodGltZSA9PSBudWxsID8gbm93KCkgOiArdGltZSkgKyAoZGVsYXkgPT0gbnVsbCA/IDAgOiArZGVsYXkpO1xuICAgIGlmICghdGhpcy5fbmV4dCAmJiB0YXNrVGFpbCAhPT0gdGhpcykge1xuICAgICAgaWYgKHRhc2tUYWlsKSB0YXNrVGFpbC5fbmV4dCA9IHRoaXM7XG4gICAgICBlbHNlIHRhc2tIZWFkID0gdGhpcztcbiAgICAgIHRhc2tUYWlsID0gdGhpcztcbiAgICB9XG4gICAgdGhpcy5fY2FsbCA9IGNhbGxiYWNrO1xuICAgIHRoaXMuX3RpbWUgPSB0aW1lO1xuICAgIHNsZWVwKCk7XG4gIH0sXG4gIHN0b3A6IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLl9jYWxsKSB7XG4gICAgICB0aGlzLl9jYWxsID0gbnVsbDtcbiAgICAgIHRoaXMuX3RpbWUgPSBJbmZpbml0eTtcbiAgICAgIHNsZWVwKCk7XG4gICAgfVxuICB9XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gdGltZXIoY2FsbGJhY2ssIGRlbGF5LCB0aW1lKSB7XG4gIHZhciB0ID0gbmV3IFRpbWVyO1xuICB0LnJlc3RhcnQoY2FsbGJhY2ssIGRlbGF5LCB0aW1lKTtcbiAgcmV0dXJuIHQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0aW1lckZsdXNoKCkge1xuICBub3coKTsgLy8gR2V0IHRoZSBjdXJyZW50IHRpbWUsIGlmIG5vdCBhbHJlYWR5IHNldC5cbiAgKytmcmFtZTsgLy8gUHJldGVuZCB3ZeKAmXZlIHNldCBhbiBhbGFybSwgaWYgd2UgaGF2ZW7igJl0IGFscmVhZHkuXG4gIHZhciB0ID0gdGFza0hlYWQsIGU7XG4gIHdoaWxlICh0KSB7XG4gICAgaWYgKChlID0gY2xvY2tOb3cgLSB0Ll90aW1lKSA+PSAwKSB0Ll9jYWxsLmNhbGwobnVsbCwgZSk7XG4gICAgdCA9IHQuX25leHQ7XG4gIH1cbiAgLS1mcmFtZTtcbn1cblxuZnVuY3Rpb24gd2FrZSgpIHtcbiAgY2xvY2tOb3cgPSAoY2xvY2tMYXN0ID0gY2xvY2subm93KCkpICsgY2xvY2tTa2V3O1xuICBmcmFtZSA9IHRpbWVvdXQgPSAwO1xuICB0cnkge1xuICAgIHRpbWVyRmx1c2goKTtcbiAgfSBmaW5hbGx5IHtcbiAgICBmcmFtZSA9IDA7XG4gICAgbmFwKCk7XG4gICAgY2xvY2tOb3cgPSAwO1xuICB9XG59XG5cbmZ1bmN0aW9uIHBva2UoKSB7XG4gIHZhciBub3cgPSBjbG9jay5ub3coKSwgZGVsYXkgPSBub3cgLSBjbG9ja0xhc3Q7XG4gIGlmIChkZWxheSA+IHBva2VEZWxheSkgY2xvY2tTa2V3IC09IGRlbGF5LCBjbG9ja0xhc3QgPSBub3c7XG59XG5cbmZ1bmN0aW9uIG5hcCgpIHtcbiAgdmFyIHQwLCB0MSA9IHRhc2tIZWFkLCB0MiwgdGltZSA9IEluZmluaXR5O1xuICB3aGlsZSAodDEpIHtcbiAgICBpZiAodDEuX2NhbGwpIHtcbiAgICAgIGlmICh0aW1lID4gdDEuX3RpbWUpIHRpbWUgPSB0MS5fdGltZTtcbiAgICAgIHQwID0gdDEsIHQxID0gdDEuX25leHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHQyID0gdDEuX25leHQsIHQxLl9uZXh0ID0gbnVsbDtcbiAgICAgIHQxID0gdDAgPyB0MC5fbmV4dCA9IHQyIDogdGFza0hlYWQgPSB0MjtcbiAgICB9XG4gIH1cbiAgdGFza1RhaWwgPSB0MDtcbiAgc2xlZXAodGltZSk7XG59XG5cbmZ1bmN0aW9uIHNsZWVwKHRpbWUpIHtcbiAgaWYgKGZyYW1lKSByZXR1cm47IC8vIFNvb25lc3QgYWxhcm0gYWxyZWFkeSBzZXQsIG9yIHdpbGwgYmUuXG4gIGlmICh0aW1lb3V0KSB0aW1lb3V0ID0gY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICB2YXIgZGVsYXkgPSB0aW1lIC0gY2xvY2tOb3c7IC8vIFN0cmljdGx5IGxlc3MgdGhhbiBpZiB3ZSByZWNvbXB1dGVkIGNsb2NrTm93LlxuICBpZiAoZGVsYXkgPiAyNCkge1xuICAgIGlmICh0aW1lIDwgSW5maW5pdHkpIHRpbWVvdXQgPSBzZXRUaW1lb3V0KHdha2UsIHRpbWUgLSBjbG9jay5ub3coKSAtIGNsb2NrU2tldyk7XG4gICAgaWYgKGludGVydmFsKSBpbnRlcnZhbCA9IGNsZWFySW50ZXJ2YWwoaW50ZXJ2YWwpO1xuICB9IGVsc2Uge1xuICAgIGlmICghaW50ZXJ2YWwpIGNsb2NrTGFzdCA9IGNsb2NrLm5vdygpLCBpbnRlcnZhbCA9IHNldEludGVydmFsKHBva2UsIHBva2VEZWxheSk7XG4gICAgZnJhbWUgPSAxLCBzZXRGcmFtZSh3YWtlKTtcbiAgfVxufVxuIiwiaW1wb3J0IHtUaW1lcn0gZnJvbSBcIi4vdGltZXIuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY2FsbGJhY2ssIGRlbGF5LCB0aW1lKSB7XG4gIHZhciB0ID0gbmV3IFRpbWVyO1xuICBkZWxheSA9IGRlbGF5ID09IG51bGwgPyAwIDogK2RlbGF5O1xuICB0LnJlc3RhcnQoZWxhcHNlZCA9PiB7XG4gICAgdC5zdG9wKCk7XG4gICAgY2FsbGJhY2soZWxhcHNlZCArIGRlbGF5KTtcbiAgfSwgZGVsYXksIHRpbWUpO1xuICByZXR1cm4gdDtcbn1cbiIsImltcG9ydCB7ZGlzcGF0Y2h9IGZyb20gXCJkMy1kaXNwYXRjaFwiO1xuaW1wb3J0IHt0aW1lciwgdGltZW91dH0gZnJvbSBcImQzLXRpbWVyXCI7XG5cbnZhciBlbXB0eU9uID0gZGlzcGF0Y2goXCJzdGFydFwiLCBcImVuZFwiLCBcImNhbmNlbFwiLCBcImludGVycnVwdFwiKTtcbnZhciBlbXB0eVR3ZWVuID0gW107XG5cbmV4cG9ydCB2YXIgQ1JFQVRFRCA9IDA7XG5leHBvcnQgdmFyIFNDSEVEVUxFRCA9IDE7XG5leHBvcnQgdmFyIFNUQVJUSU5HID0gMjtcbmV4cG9ydCB2YXIgU1RBUlRFRCA9IDM7XG5leHBvcnQgdmFyIFJVTk5JTkcgPSA0O1xuZXhwb3J0IHZhciBFTkRJTkcgPSA1O1xuZXhwb3J0IHZhciBFTkRFRCA9IDY7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5vZGUsIG5hbWUsIGlkLCBpbmRleCwgZ3JvdXAsIHRpbWluZykge1xuICB2YXIgc2NoZWR1bGVzID0gbm9kZS5fX3RyYW5zaXRpb247XG4gIGlmICghc2NoZWR1bGVzKSBub2RlLl9fdHJhbnNpdGlvbiA9IHt9O1xuICBlbHNlIGlmIChpZCBpbiBzY2hlZHVsZXMpIHJldHVybjtcbiAgY3JlYXRlKG5vZGUsIGlkLCB7XG4gICAgbmFtZTogbmFtZSxcbiAgICBpbmRleDogaW5kZXgsIC8vIEZvciBjb250ZXh0IGR1cmluZyBjYWxsYmFjay5cbiAgICBncm91cDogZ3JvdXAsIC8vIEZvciBjb250ZXh0IGR1cmluZyBjYWxsYmFjay5cbiAgICBvbjogZW1wdHlPbixcbiAgICB0d2VlbjogZW1wdHlUd2VlbixcbiAgICB0aW1lOiB0aW1pbmcudGltZSxcbiAgICBkZWxheTogdGltaW5nLmRlbGF5LFxuICAgIGR1cmF0aW9uOiB0aW1pbmcuZHVyYXRpb24sXG4gICAgZWFzZTogdGltaW5nLmVhc2UsXG4gICAgdGltZXI6IG51bGwsXG4gICAgc3RhdGU6IENSRUFURURcbiAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpbml0KG5vZGUsIGlkKSB7XG4gIHZhciBzY2hlZHVsZSA9IGdldChub2RlLCBpZCk7XG4gIGlmIChzY2hlZHVsZS5zdGF0ZSA+IENSRUFURUQpIHRocm93IG5ldyBFcnJvcihcInRvbyBsYXRlOyBhbHJlYWR5IHNjaGVkdWxlZFwiKTtcbiAgcmV0dXJuIHNjaGVkdWxlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2V0KG5vZGUsIGlkKSB7XG4gIHZhciBzY2hlZHVsZSA9IGdldChub2RlLCBpZCk7XG4gIGlmIChzY2hlZHVsZS5zdGF0ZSA+IFNUQVJURUQpIHRocm93IG5ldyBFcnJvcihcInRvbyBsYXRlOyBhbHJlYWR5IHJ1bm5pbmdcIik7XG4gIHJldHVybiBzY2hlZHVsZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldChub2RlLCBpZCkge1xuICB2YXIgc2NoZWR1bGUgPSBub2RlLl9fdHJhbnNpdGlvbjtcbiAgaWYgKCFzY2hlZHVsZSB8fCAhKHNjaGVkdWxlID0gc2NoZWR1bGVbaWRdKSkgdGhyb3cgbmV3IEVycm9yKFwidHJhbnNpdGlvbiBub3QgZm91bmRcIik7XG4gIHJldHVybiBzY2hlZHVsZTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlKG5vZGUsIGlkLCBzZWxmKSB7XG4gIHZhciBzY2hlZHVsZXMgPSBub2RlLl9fdHJhbnNpdGlvbixcbiAgICAgIHR3ZWVuO1xuXG4gIC8vIEluaXRpYWxpemUgdGhlIHNlbGYgdGltZXIgd2hlbiB0aGUgdHJhbnNpdGlvbiBpcyBjcmVhdGVkLlxuICAvLyBOb3RlIHRoZSBhY3R1YWwgZGVsYXkgaXMgbm90IGtub3duIHVudGlsIHRoZSBmaXJzdCBjYWxsYmFjayFcbiAgc2NoZWR1bGVzW2lkXSA9IHNlbGY7XG4gIHNlbGYudGltZXIgPSB0aW1lcihzY2hlZHVsZSwgMCwgc2VsZi50aW1lKTtcblxuICBmdW5jdGlvbiBzY2hlZHVsZShlbGFwc2VkKSB7XG4gICAgc2VsZi5zdGF0ZSA9IFNDSEVEVUxFRDtcbiAgICBzZWxmLnRpbWVyLnJlc3RhcnQoc3RhcnQsIHNlbGYuZGVsYXksIHNlbGYudGltZSk7XG5cbiAgICAvLyBJZiB0aGUgZWxhcHNlZCBkZWxheSBpcyBsZXNzIHRoYW4gb3VyIGZpcnN0IHNsZWVwLCBzdGFydCBpbW1lZGlhdGVseS5cbiAgICBpZiAoc2VsZi5kZWxheSA8PSBlbGFwc2VkKSBzdGFydChlbGFwc2VkIC0gc2VsZi5kZWxheSk7XG4gIH1cblxuICBmdW5jdGlvbiBzdGFydChlbGFwc2VkKSB7XG4gICAgdmFyIGksIGosIG4sIG87XG5cbiAgICAvLyBJZiB0aGUgc3RhdGUgaXMgbm90IFNDSEVEVUxFRCwgdGhlbiB3ZSBwcmV2aW91c2x5IGVycm9yZWQgb24gc3RhcnQuXG4gICAgaWYgKHNlbGYuc3RhdGUgIT09IFNDSEVEVUxFRCkgcmV0dXJuIHN0b3AoKTtcblxuICAgIGZvciAoaSBpbiBzY2hlZHVsZXMpIHtcbiAgICAgIG8gPSBzY2hlZHVsZXNbaV07XG4gICAgICBpZiAoby5uYW1lICE9PSBzZWxmLm5hbWUpIGNvbnRpbnVlO1xuXG4gICAgICAvLyBXaGlsZSB0aGlzIGVsZW1lbnQgYWxyZWFkeSBoYXMgYSBzdGFydGluZyB0cmFuc2l0aW9uIGR1cmluZyB0aGlzIGZyYW1lLFxuICAgICAgLy8gZGVmZXIgc3RhcnRpbmcgYW4gaW50ZXJydXB0aW5nIHRyYW5zaXRpb24gdW50aWwgdGhhdCB0cmFuc2l0aW9uIGhhcyBhXG4gICAgICAvLyBjaGFuY2UgdG8gdGljayAoYW5kIHBvc3NpYmx5IGVuZCk7IHNlZSBkMy9kMy10cmFuc2l0aW9uIzU0IVxuICAgICAgaWYgKG8uc3RhdGUgPT09IFNUQVJURUQpIHJldHVybiB0aW1lb3V0KHN0YXJ0KTtcblxuICAgICAgLy8gSW50ZXJydXB0IHRoZSBhY3RpdmUgdHJhbnNpdGlvbiwgaWYgYW55LlxuICAgICAgaWYgKG8uc3RhdGUgPT09IFJVTk5JTkcpIHtcbiAgICAgICAgby5zdGF0ZSA9IEVOREVEO1xuICAgICAgICBvLnRpbWVyLnN0b3AoKTtcbiAgICAgICAgby5vbi5jYWxsKFwiaW50ZXJydXB0XCIsIG5vZGUsIG5vZGUuX19kYXRhX18sIG8uaW5kZXgsIG8uZ3JvdXApO1xuICAgICAgICBkZWxldGUgc2NoZWR1bGVzW2ldO1xuICAgICAgfVxuXG4gICAgICAvLyBDYW5jZWwgYW55IHByZS1lbXB0ZWQgdHJhbnNpdGlvbnMuXG4gICAgICBlbHNlIGlmICgraSA8IGlkKSB7XG4gICAgICAgIG8uc3RhdGUgPSBFTkRFRDtcbiAgICAgICAgby50aW1lci5zdG9wKCk7XG4gICAgICAgIG8ub24uY2FsbChcImNhbmNlbFwiLCBub2RlLCBub2RlLl9fZGF0YV9fLCBvLmluZGV4LCBvLmdyb3VwKTtcbiAgICAgICAgZGVsZXRlIHNjaGVkdWxlc1tpXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBEZWZlciB0aGUgZmlyc3QgdGljayB0byBlbmQgb2YgdGhlIGN1cnJlbnQgZnJhbWU7IHNlZSBkMy9kMyMxNTc2LlxuICAgIC8vIE5vdGUgdGhlIHRyYW5zaXRpb24gbWF5IGJlIGNhbmNlbGVkIGFmdGVyIHN0YXJ0IGFuZCBiZWZvcmUgdGhlIGZpcnN0IHRpY2shXG4gICAgLy8gTm90ZSB0aGlzIG11c3QgYmUgc2NoZWR1bGVkIGJlZm9yZSB0aGUgc3RhcnQgZXZlbnQ7IHNlZSBkMy9kMy10cmFuc2l0aW9uIzE2IVxuICAgIC8vIEFzc3VtaW5nIHRoaXMgaXMgc3VjY2Vzc2Z1bCwgc3Vic2VxdWVudCBjYWxsYmFja3MgZ28gc3RyYWlnaHQgdG8gdGljay5cbiAgICB0aW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKHNlbGYuc3RhdGUgPT09IFNUQVJURUQpIHtcbiAgICAgICAgc2VsZi5zdGF0ZSA9IFJVTk5JTkc7XG4gICAgICAgIHNlbGYudGltZXIucmVzdGFydCh0aWNrLCBzZWxmLmRlbGF5LCBzZWxmLnRpbWUpO1xuICAgICAgICB0aWNrKGVsYXBzZWQpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gRGlzcGF0Y2ggdGhlIHN0YXJ0IGV2ZW50LlxuICAgIC8vIE5vdGUgdGhpcyBtdXN0IGJlIGRvbmUgYmVmb3JlIHRoZSB0d2VlbiBhcmUgaW5pdGlhbGl6ZWQuXG4gICAgc2VsZi5zdGF0ZSA9IFNUQVJUSU5HO1xuICAgIHNlbGYub24uY2FsbChcInN0YXJ0XCIsIG5vZGUsIG5vZGUuX19kYXRhX18sIHNlbGYuaW5kZXgsIHNlbGYuZ3JvdXApO1xuICAgIGlmIChzZWxmLnN0YXRlICE9PSBTVEFSVElORykgcmV0dXJuOyAvLyBpbnRlcnJ1cHRlZFxuICAgIHNlbGYuc3RhdGUgPSBTVEFSVEVEO1xuXG4gICAgLy8gSW5pdGlhbGl6ZSB0aGUgdHdlZW4sIGRlbGV0aW5nIG51bGwgdHdlZW4uXG4gICAgdHdlZW4gPSBuZXcgQXJyYXkobiA9IHNlbGYudHdlZW4ubGVuZ3RoKTtcbiAgICBmb3IgKGkgPSAwLCBqID0gLTE7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmIChvID0gc2VsZi50d2VlbltpXS52YWx1ZS5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIHNlbGYuaW5kZXgsIHNlbGYuZ3JvdXApKSB7XG4gICAgICAgIHR3ZWVuWysral0gPSBvO1xuICAgICAgfVxuICAgIH1cbiAgICB0d2Vlbi5sZW5ndGggPSBqICsgMTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRpY2soZWxhcHNlZCkge1xuICAgIHZhciB0ID0gZWxhcHNlZCA8IHNlbGYuZHVyYXRpb24gPyBzZWxmLmVhc2UuY2FsbChudWxsLCBlbGFwc2VkIC8gc2VsZi5kdXJhdGlvbikgOiAoc2VsZi50aW1lci5yZXN0YXJ0KHN0b3ApLCBzZWxmLnN0YXRlID0gRU5ESU5HLCAxKSxcbiAgICAgICAgaSA9IC0xLFxuICAgICAgICBuID0gdHdlZW4ubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgIHR3ZWVuW2ldLmNhbGwobm9kZSwgdCk7XG4gICAgfVxuXG4gICAgLy8gRGlzcGF0Y2ggdGhlIGVuZCBldmVudC5cbiAgICBpZiAoc2VsZi5zdGF0ZSA9PT0gRU5ESU5HKSB7XG4gICAgICBzZWxmLm9uLmNhbGwoXCJlbmRcIiwgbm9kZSwgbm9kZS5fX2RhdGFfXywgc2VsZi5pbmRleCwgc2VsZi5ncm91cCk7XG4gICAgICBzdG9wKCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gc3RvcCgpIHtcbiAgICBzZWxmLnN0YXRlID0gRU5ERUQ7XG4gICAgc2VsZi50aW1lci5zdG9wKCk7XG4gICAgZGVsZXRlIHNjaGVkdWxlc1tpZF07XG4gICAgZm9yICh2YXIgaSBpbiBzY2hlZHVsZXMpIHJldHVybjsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgIGRlbGV0ZSBub2RlLl9fdHJhbnNpdGlvbjtcbiAgfVxufVxuIiwiaW1wb3J0IHtTVEFSVElORywgRU5ESU5HLCBFTkRFRH0gZnJvbSBcIi4vdHJhbnNpdGlvbi9zY2hlZHVsZS5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihub2RlLCBuYW1lKSB7XG4gIHZhciBzY2hlZHVsZXMgPSBub2RlLl9fdHJhbnNpdGlvbixcbiAgICAgIHNjaGVkdWxlLFxuICAgICAgYWN0aXZlLFxuICAgICAgZW1wdHkgPSB0cnVlLFxuICAgICAgaTtcblxuICBpZiAoIXNjaGVkdWxlcykgcmV0dXJuO1xuXG4gIG5hbWUgPSBuYW1lID09IG51bGwgPyBudWxsIDogbmFtZSArIFwiXCI7XG5cbiAgZm9yIChpIGluIHNjaGVkdWxlcykge1xuICAgIGlmICgoc2NoZWR1bGUgPSBzY2hlZHVsZXNbaV0pLm5hbWUgIT09IG5hbWUpIHsgZW1wdHkgPSBmYWxzZTsgY29udGludWU7IH1cbiAgICBhY3RpdmUgPSBzY2hlZHVsZS5zdGF0ZSA+IFNUQVJUSU5HICYmIHNjaGVkdWxlLnN0YXRlIDwgRU5ESU5HO1xuICAgIHNjaGVkdWxlLnN0YXRlID0gRU5ERUQ7XG4gICAgc2NoZWR1bGUudGltZXIuc3RvcCgpO1xuICAgIHNjaGVkdWxlLm9uLmNhbGwoYWN0aXZlID8gXCJpbnRlcnJ1cHRcIiA6IFwiY2FuY2VsXCIsIG5vZGUsIG5vZGUuX19kYXRhX18sIHNjaGVkdWxlLmluZGV4LCBzY2hlZHVsZS5ncm91cCk7XG4gICAgZGVsZXRlIHNjaGVkdWxlc1tpXTtcbiAgfVxuXG4gIGlmIChlbXB0eSkgZGVsZXRlIG5vZGUuX190cmFuc2l0aW9uO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYikge1xuICByZXR1cm4gYSA9ICthLCBiID0gK2IsIGZ1bmN0aW9uKHQpIHtcbiAgICByZXR1cm4gYSAqICgxIC0gdCkgKyBiICogdDtcbiAgfTtcbn1cbiIsInZhciBkZWdyZWVzID0gMTgwIC8gTWF0aC5QSTtcblxuZXhwb3J0IHZhciBpZGVudGl0eSA9IHtcbiAgdHJhbnNsYXRlWDogMCxcbiAgdHJhbnNsYXRlWTogMCxcbiAgcm90YXRlOiAwLFxuICBza2V3WDogMCxcbiAgc2NhbGVYOiAxLFxuICBzY2FsZVk6IDFcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIsIGMsIGQsIGUsIGYpIHtcbiAgdmFyIHNjYWxlWCwgc2NhbGVZLCBza2V3WDtcbiAgaWYgKHNjYWxlWCA9IE1hdGguc3FydChhICogYSArIGIgKiBiKSkgYSAvPSBzY2FsZVgsIGIgLz0gc2NhbGVYO1xuICBpZiAoc2tld1ggPSBhICogYyArIGIgKiBkKSBjIC09IGEgKiBza2V3WCwgZCAtPSBiICogc2tld1g7XG4gIGlmIChzY2FsZVkgPSBNYXRoLnNxcnQoYyAqIGMgKyBkICogZCkpIGMgLz0gc2NhbGVZLCBkIC89IHNjYWxlWSwgc2tld1ggLz0gc2NhbGVZO1xuICBpZiAoYSAqIGQgPCBiICogYykgYSA9IC1hLCBiID0gLWIsIHNrZXdYID0gLXNrZXdYLCBzY2FsZVggPSAtc2NhbGVYO1xuICByZXR1cm4ge1xuICAgIHRyYW5zbGF0ZVg6IGUsXG4gICAgdHJhbnNsYXRlWTogZixcbiAgICByb3RhdGU6IE1hdGguYXRhbjIoYiwgYSkgKiBkZWdyZWVzLFxuICAgIHNrZXdYOiBNYXRoLmF0YW4oc2tld1gpICogZGVncmVlcyxcbiAgICBzY2FsZVg6IHNjYWxlWCxcbiAgICBzY2FsZVk6IHNjYWxlWVxuICB9O1xufVxuIiwiaW1wb3J0IGRlY29tcG9zZSwge2lkZW50aXR5fSBmcm9tIFwiLi9kZWNvbXBvc2UuanNcIjtcblxudmFyIHN2Z05vZGU7XG5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXVuZGVmICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VDc3ModmFsdWUpIHtcbiAgY29uc3QgbSA9IG5ldyAodHlwZW9mIERPTU1hdHJpeCA9PT0gXCJmdW5jdGlvblwiID8gRE9NTWF0cml4IDogV2ViS2l0Q1NTTWF0cml4KSh2YWx1ZSArIFwiXCIpO1xuICByZXR1cm4gbS5pc0lkZW50aXR5ID8gaWRlbnRpdHkgOiBkZWNvbXBvc2UobS5hLCBtLmIsIG0uYywgbS5kLCBtLmUsIG0uZik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVN2Zyh2YWx1ZSkge1xuICBpZiAodmFsdWUgPT0gbnVsbCkgcmV0dXJuIGlkZW50aXR5O1xuICBpZiAoIXN2Z05vZGUpIHN2Z05vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLCBcImdcIik7XG4gIHN2Z05vZGUuc2V0QXR0cmlidXRlKFwidHJhbnNmb3JtXCIsIHZhbHVlKTtcbiAgaWYgKCEodmFsdWUgPSBzdmdOb2RlLnRyYW5zZm9ybS5iYXNlVmFsLmNvbnNvbGlkYXRlKCkpKSByZXR1cm4gaWRlbnRpdHk7XG4gIHZhbHVlID0gdmFsdWUubWF0cml4O1xuICByZXR1cm4gZGVjb21wb3NlKHZhbHVlLmEsIHZhbHVlLmIsIHZhbHVlLmMsIHZhbHVlLmQsIHZhbHVlLmUsIHZhbHVlLmYpO1xufVxuIiwiaW1wb3J0IG51bWJlciBmcm9tIFwiLi4vbnVtYmVyLmpzXCI7XG5pbXBvcnQge3BhcnNlQ3NzLCBwYXJzZVN2Z30gZnJvbSBcIi4vcGFyc2UuanNcIjtcblxuZnVuY3Rpb24gaW50ZXJwb2xhdGVUcmFuc2Zvcm0ocGFyc2UsIHB4Q29tbWEsIHB4UGFyZW4sIGRlZ1BhcmVuKSB7XG5cbiAgZnVuY3Rpb24gcG9wKHMpIHtcbiAgICByZXR1cm4gcy5sZW5ndGggPyBzLnBvcCgpICsgXCIgXCIgOiBcIlwiO1xuICB9XG5cbiAgZnVuY3Rpb24gdHJhbnNsYXRlKHhhLCB5YSwgeGIsIHliLCBzLCBxKSB7XG4gICAgaWYgKHhhICE9PSB4YiB8fCB5YSAhPT0geWIpIHtcbiAgICAgIHZhciBpID0gcy5wdXNoKFwidHJhbnNsYXRlKFwiLCBudWxsLCBweENvbW1hLCBudWxsLCBweFBhcmVuKTtcbiAgICAgIHEucHVzaCh7aTogaSAtIDQsIHg6IG51bWJlcih4YSwgeGIpfSwge2k6IGkgLSAyLCB4OiBudW1iZXIoeWEsIHliKX0pO1xuICAgIH0gZWxzZSBpZiAoeGIgfHwgeWIpIHtcbiAgICAgIHMucHVzaChcInRyYW5zbGF0ZShcIiArIHhiICsgcHhDb21tYSArIHliICsgcHhQYXJlbik7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcm90YXRlKGEsIGIsIHMsIHEpIHtcbiAgICBpZiAoYSAhPT0gYikge1xuICAgICAgaWYgKGEgLSBiID4gMTgwKSBiICs9IDM2MDsgZWxzZSBpZiAoYiAtIGEgPiAxODApIGEgKz0gMzYwOyAvLyBzaG9ydGVzdCBwYXRoXG4gICAgICBxLnB1c2goe2k6IHMucHVzaChwb3AocykgKyBcInJvdGF0ZShcIiwgbnVsbCwgZGVnUGFyZW4pIC0gMiwgeDogbnVtYmVyKGEsIGIpfSk7XG4gICAgfSBlbHNlIGlmIChiKSB7XG4gICAgICBzLnB1c2gocG9wKHMpICsgXCJyb3RhdGUoXCIgKyBiICsgZGVnUGFyZW4pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHNrZXdYKGEsIGIsIHMsIHEpIHtcbiAgICBpZiAoYSAhPT0gYikge1xuICAgICAgcS5wdXNoKHtpOiBzLnB1c2gocG9wKHMpICsgXCJza2V3WChcIiwgbnVsbCwgZGVnUGFyZW4pIC0gMiwgeDogbnVtYmVyKGEsIGIpfSk7XG4gICAgfSBlbHNlIGlmIChiKSB7XG4gICAgICBzLnB1c2gocG9wKHMpICsgXCJza2V3WChcIiArIGIgKyBkZWdQYXJlbik7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gc2NhbGUoeGEsIHlhLCB4YiwgeWIsIHMsIHEpIHtcbiAgICBpZiAoeGEgIT09IHhiIHx8IHlhICE9PSB5Yikge1xuICAgICAgdmFyIGkgPSBzLnB1c2gocG9wKHMpICsgXCJzY2FsZShcIiwgbnVsbCwgXCIsXCIsIG51bGwsIFwiKVwiKTtcbiAgICAgIHEucHVzaCh7aTogaSAtIDQsIHg6IG51bWJlcih4YSwgeGIpfSwge2k6IGkgLSAyLCB4OiBudW1iZXIoeWEsIHliKX0pO1xuICAgIH0gZWxzZSBpZiAoeGIgIT09IDEgfHwgeWIgIT09IDEpIHtcbiAgICAgIHMucHVzaChwb3AocykgKyBcInNjYWxlKFwiICsgeGIgKyBcIixcIiArIHliICsgXCIpXCIpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbihhLCBiKSB7XG4gICAgdmFyIHMgPSBbXSwgLy8gc3RyaW5nIGNvbnN0YW50cyBhbmQgcGxhY2Vob2xkZXJzXG4gICAgICAgIHEgPSBbXTsgLy8gbnVtYmVyIGludGVycG9sYXRvcnNcbiAgICBhID0gcGFyc2UoYSksIGIgPSBwYXJzZShiKTtcbiAgICB0cmFuc2xhdGUoYS50cmFuc2xhdGVYLCBhLnRyYW5zbGF0ZVksIGIudHJhbnNsYXRlWCwgYi50cmFuc2xhdGVZLCBzLCBxKTtcbiAgICByb3RhdGUoYS5yb3RhdGUsIGIucm90YXRlLCBzLCBxKTtcbiAgICBza2V3WChhLnNrZXdYLCBiLnNrZXdYLCBzLCBxKTtcbiAgICBzY2FsZShhLnNjYWxlWCwgYS5zY2FsZVksIGIuc2NhbGVYLCBiLnNjYWxlWSwgcywgcSk7XG4gICAgYSA9IGIgPSBudWxsOyAvLyBnY1xuICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICB2YXIgaSA9IC0xLCBuID0gcS5sZW5ndGgsIG87XG4gICAgICB3aGlsZSAoKytpIDwgbikgc1sobyA9IHFbaV0pLmldID0gby54KHQpO1xuICAgICAgcmV0dXJuIHMuam9pbihcIlwiKTtcbiAgICB9O1xuICB9O1xufVxuXG5leHBvcnQgdmFyIGludGVycG9sYXRlVHJhbnNmb3JtQ3NzID0gaW50ZXJwb2xhdGVUcmFuc2Zvcm0ocGFyc2VDc3MsIFwicHgsIFwiLCBcInB4KVwiLCBcImRlZylcIik7XG5leHBvcnQgdmFyIGludGVycG9sYXRlVHJhbnNmb3JtU3ZnID0gaW50ZXJwb2xhdGVUcmFuc2Zvcm0ocGFyc2VTdmcsIFwiLCBcIiwgXCIpXCIsIFwiKVwiKTtcbiIsImltcG9ydCB7Z2V0LCBzZXR9IGZyb20gXCIuL3NjaGVkdWxlLmpzXCI7XG5cbmZ1bmN0aW9uIHR3ZWVuUmVtb3ZlKGlkLCBuYW1lKSB7XG4gIHZhciB0d2VlbjAsIHR3ZWVuMTtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzY2hlZHVsZSA9IHNldCh0aGlzLCBpZCksXG4gICAgICAgIHR3ZWVuID0gc2NoZWR1bGUudHdlZW47XG5cbiAgICAvLyBJZiB0aGlzIG5vZGUgc2hhcmVkIHR3ZWVuIHdpdGggdGhlIHByZXZpb3VzIG5vZGUsXG4gICAgLy8ganVzdCBhc3NpZ24gdGhlIHVwZGF0ZWQgc2hhcmVkIHR3ZWVuIGFuZCB3ZeKAmXJlIGRvbmUhXG4gICAgLy8gT3RoZXJ3aXNlLCBjb3B5LW9uLXdyaXRlLlxuICAgIGlmICh0d2VlbiAhPT0gdHdlZW4wKSB7XG4gICAgICB0d2VlbjEgPSB0d2VlbjAgPSB0d2VlbjtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBuID0gdHdlZW4xLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgICAgICBpZiAodHdlZW4xW2ldLm5hbWUgPT09IG5hbWUpIHtcbiAgICAgICAgICB0d2VlbjEgPSB0d2VlbjEuc2xpY2UoKTtcbiAgICAgICAgICB0d2VlbjEuc3BsaWNlKGksIDEpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgc2NoZWR1bGUudHdlZW4gPSB0d2VlbjE7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHR3ZWVuRnVuY3Rpb24oaWQsIG5hbWUsIHZhbHVlKSB7XG4gIHZhciB0d2VlbjAsIHR3ZWVuMTtcbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgRXJyb3I7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc2NoZWR1bGUgPSBzZXQodGhpcywgaWQpLFxuICAgICAgICB0d2VlbiA9IHNjaGVkdWxlLnR3ZWVuO1xuXG4gICAgLy8gSWYgdGhpcyBub2RlIHNoYXJlZCB0d2VlbiB3aXRoIHRoZSBwcmV2aW91cyBub2RlLFxuICAgIC8vIGp1c3QgYXNzaWduIHRoZSB1cGRhdGVkIHNoYXJlZCB0d2VlbiBhbmQgd2XigJlyZSBkb25lIVxuICAgIC8vIE90aGVyd2lzZSwgY29weS1vbi13cml0ZS5cbiAgICBpZiAodHdlZW4gIT09IHR3ZWVuMCkge1xuICAgICAgdHdlZW4xID0gKHR3ZWVuMCA9IHR3ZWVuKS5zbGljZSgpO1xuICAgICAgZm9yICh2YXIgdCA9IHtuYW1lOiBuYW1lLCB2YWx1ZTogdmFsdWV9LCBpID0gMCwgbiA9IHR3ZWVuMS5sZW5ndGg7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgaWYgKHR3ZWVuMVtpXS5uYW1lID09PSBuYW1lKSB7XG4gICAgICAgICAgdHdlZW4xW2ldID0gdDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGkgPT09IG4pIHR3ZWVuMS5wdXNoKHQpO1xuICAgIH1cblxuICAgIHNjaGVkdWxlLnR3ZWVuID0gdHdlZW4xO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICB2YXIgaWQgPSB0aGlzLl9pZDtcblxuICBuYW1lICs9IFwiXCI7XG5cbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSB7XG4gICAgdmFyIHR3ZWVuID0gZ2V0KHRoaXMubm9kZSgpLCBpZCkudHdlZW47XG4gICAgZm9yICh2YXIgaSA9IDAsIG4gPSB0d2Vlbi5sZW5ndGgsIHQ7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmICgodCA9IHR3ZWVuW2ldKS5uYW1lID09PSBuYW1lKSB7XG4gICAgICAgIHJldHVybiB0LnZhbHVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiB0aGlzLmVhY2goKHZhbHVlID09IG51bGwgPyB0d2VlblJlbW92ZSA6IHR3ZWVuRnVuY3Rpb24pKGlkLCBuYW1lLCB2YWx1ZSkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdHdlZW5WYWx1ZSh0cmFuc2l0aW9uLCBuYW1lLCB2YWx1ZSkge1xuICB2YXIgaWQgPSB0cmFuc2l0aW9uLl9pZDtcblxuICB0cmFuc2l0aW9uLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgdmFyIHNjaGVkdWxlID0gc2V0KHRoaXMsIGlkKTtcbiAgICAoc2NoZWR1bGUudmFsdWUgfHwgKHNjaGVkdWxlLnZhbHVlID0ge30pKVtuYW1lXSA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH0pO1xuXG4gIHJldHVybiBmdW5jdGlvbihub2RlKSB7XG4gICAgcmV0dXJuIGdldChub2RlLCBpZCkudmFsdWVbbmFtZV07XG4gIH07XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjb25zdHJ1Y3RvciwgZmFjdG9yeSwgcHJvdG90eXBlKSB7XG4gIGNvbnN0cnVjdG9yLnByb3RvdHlwZSA9IGZhY3RvcnkucHJvdG90eXBlID0gcHJvdG90eXBlO1xuICBwcm90b3R5cGUuY29uc3RydWN0b3IgPSBjb25zdHJ1Y3Rvcjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGV4dGVuZChwYXJlbnQsIGRlZmluaXRpb24pIHtcbiAgdmFyIHByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUocGFyZW50LnByb3RvdHlwZSk7XG4gIGZvciAodmFyIGtleSBpbiBkZWZpbml0aW9uKSBwcm90b3R5cGVba2V5XSA9IGRlZmluaXRpb25ba2V5XTtcbiAgcmV0dXJuIHByb3RvdHlwZTtcbn1cbiIsImltcG9ydCBkZWZpbmUsIHtleHRlbmR9IGZyb20gXCIuL2RlZmluZS5qc1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gQ29sb3IoKSB7fVxuXG5leHBvcnQgdmFyIGRhcmtlciA9IDAuNztcbmV4cG9ydCB2YXIgYnJpZ2h0ZXIgPSAxIC8gZGFya2VyO1xuXG52YXIgcmVJID0gXCJcXFxccyooWystXT9cXFxcZCspXFxcXHMqXCIsXG4gICAgcmVOID0gXCJcXFxccyooWystXT9cXFxcZCpcXFxcLj9cXFxcZCsoPzpbZUVdWystXT9cXFxcZCspPylcXFxccypcIixcbiAgICByZVAgPSBcIlxcXFxzKihbKy1dP1xcXFxkKlxcXFwuP1xcXFxkKyg/OltlRV1bKy1dP1xcXFxkKyk/KSVcXFxccypcIixcbiAgICByZUhleCA9IC9eIyhbMC05YS1mXXszLDh9KSQvLFxuICAgIHJlUmdiSW50ZWdlciA9IG5ldyBSZWdFeHAoXCJecmdiXFxcXChcIiArIFtyZUksIHJlSSwgcmVJXSArIFwiXFxcXCkkXCIpLFxuICAgIHJlUmdiUGVyY2VudCA9IG5ldyBSZWdFeHAoXCJecmdiXFxcXChcIiArIFtyZVAsIHJlUCwgcmVQXSArIFwiXFxcXCkkXCIpLFxuICAgIHJlUmdiYUludGVnZXIgPSBuZXcgUmVnRXhwKFwiXnJnYmFcXFxcKFwiICsgW3JlSSwgcmVJLCByZUksIHJlTl0gKyBcIlxcXFwpJFwiKSxcbiAgICByZVJnYmFQZXJjZW50ID0gbmV3IFJlZ0V4cChcIl5yZ2JhXFxcXChcIiArIFtyZVAsIHJlUCwgcmVQLCByZU5dICsgXCJcXFxcKSRcIiksXG4gICAgcmVIc2xQZXJjZW50ID0gbmV3IFJlZ0V4cChcIl5oc2xcXFxcKFwiICsgW3JlTiwgcmVQLCByZVBdICsgXCJcXFxcKSRcIiksXG4gICAgcmVIc2xhUGVyY2VudCA9IG5ldyBSZWdFeHAoXCJeaHNsYVxcXFwoXCIgKyBbcmVOLCByZVAsIHJlUCwgcmVOXSArIFwiXFxcXCkkXCIpO1xuXG52YXIgbmFtZWQgPSB7XG4gIGFsaWNlYmx1ZTogMHhmMGY4ZmYsXG4gIGFudGlxdWV3aGl0ZTogMHhmYWViZDcsXG4gIGFxdWE6IDB4MDBmZmZmLFxuICBhcXVhbWFyaW5lOiAweDdmZmZkNCxcbiAgYXp1cmU6IDB4ZjBmZmZmLFxuICBiZWlnZTogMHhmNWY1ZGMsXG4gIGJpc3F1ZTogMHhmZmU0YzQsXG4gIGJsYWNrOiAweDAwMDAwMCxcbiAgYmxhbmNoZWRhbG1vbmQ6IDB4ZmZlYmNkLFxuICBibHVlOiAweDAwMDBmZixcbiAgYmx1ZXZpb2xldDogMHg4YTJiZTIsXG4gIGJyb3duOiAweGE1MmEyYSxcbiAgYnVybHl3b29kOiAweGRlYjg4NyxcbiAgY2FkZXRibHVlOiAweDVmOWVhMCxcbiAgY2hhcnRyZXVzZTogMHg3ZmZmMDAsXG4gIGNob2NvbGF0ZTogMHhkMjY5MWUsXG4gIGNvcmFsOiAweGZmN2Y1MCxcbiAgY29ybmZsb3dlcmJsdWU6IDB4NjQ5NWVkLFxuICBjb3Juc2lsazogMHhmZmY4ZGMsXG4gIGNyaW1zb246IDB4ZGMxNDNjLFxuICBjeWFuOiAweDAwZmZmZixcbiAgZGFya2JsdWU6IDB4MDAwMDhiLFxuICBkYXJrY3lhbjogMHgwMDhiOGIsXG4gIGRhcmtnb2xkZW5yb2Q6IDB4Yjg4NjBiLFxuICBkYXJrZ3JheTogMHhhOWE5YTksXG4gIGRhcmtncmVlbjogMHgwMDY0MDAsXG4gIGRhcmtncmV5OiAweGE5YTlhOSxcbiAgZGFya2toYWtpOiAweGJkYjc2YixcbiAgZGFya21hZ2VudGE6IDB4OGIwMDhiLFxuICBkYXJrb2xpdmVncmVlbjogMHg1NTZiMmYsXG4gIGRhcmtvcmFuZ2U6IDB4ZmY4YzAwLFxuICBkYXJrb3JjaGlkOiAweDk5MzJjYyxcbiAgZGFya3JlZDogMHg4YjAwMDAsXG4gIGRhcmtzYWxtb246IDB4ZTk5NjdhLFxuICBkYXJrc2VhZ3JlZW46IDB4OGZiYzhmLFxuICBkYXJrc2xhdGVibHVlOiAweDQ4M2Q4YixcbiAgZGFya3NsYXRlZ3JheTogMHgyZjRmNGYsXG4gIGRhcmtzbGF0ZWdyZXk6IDB4MmY0ZjRmLFxuICBkYXJrdHVycXVvaXNlOiAweDAwY2VkMSxcbiAgZGFya3Zpb2xldDogMHg5NDAwZDMsXG4gIGRlZXBwaW5rOiAweGZmMTQ5MyxcbiAgZGVlcHNreWJsdWU6IDB4MDBiZmZmLFxuICBkaW1ncmF5OiAweDY5Njk2OSxcbiAgZGltZ3JleTogMHg2OTY5NjksXG4gIGRvZGdlcmJsdWU6IDB4MWU5MGZmLFxuICBmaXJlYnJpY2s6IDB4YjIyMjIyLFxuICBmbG9yYWx3aGl0ZTogMHhmZmZhZjAsXG4gIGZvcmVzdGdyZWVuOiAweDIyOGIyMixcbiAgZnVjaHNpYTogMHhmZjAwZmYsXG4gIGdhaW5zYm9ybzogMHhkY2RjZGMsXG4gIGdob3N0d2hpdGU6IDB4ZjhmOGZmLFxuICBnb2xkOiAweGZmZDcwMCxcbiAgZ29sZGVucm9kOiAweGRhYTUyMCxcbiAgZ3JheTogMHg4MDgwODAsXG4gIGdyZWVuOiAweDAwODAwMCxcbiAgZ3JlZW55ZWxsb3c6IDB4YWRmZjJmLFxuICBncmV5OiAweDgwODA4MCxcbiAgaG9uZXlkZXc6IDB4ZjBmZmYwLFxuICBob3RwaW5rOiAweGZmNjliNCxcbiAgaW5kaWFucmVkOiAweGNkNWM1YyxcbiAgaW5kaWdvOiAweDRiMDA4MixcbiAgaXZvcnk6IDB4ZmZmZmYwLFxuICBraGFraTogMHhmMGU2OGMsXG4gIGxhdmVuZGVyOiAweGU2ZTZmYSxcbiAgbGF2ZW5kZXJibHVzaDogMHhmZmYwZjUsXG4gIGxhd25ncmVlbjogMHg3Y2ZjMDAsXG4gIGxlbW9uY2hpZmZvbjogMHhmZmZhY2QsXG4gIGxpZ2h0Ymx1ZTogMHhhZGQ4ZTYsXG4gIGxpZ2h0Y29yYWw6IDB4ZjA4MDgwLFxuICBsaWdodGN5YW46IDB4ZTBmZmZmLFxuICBsaWdodGdvbGRlbnJvZHllbGxvdzogMHhmYWZhZDIsXG4gIGxpZ2h0Z3JheTogMHhkM2QzZDMsXG4gIGxpZ2h0Z3JlZW46IDB4OTBlZTkwLFxuICBsaWdodGdyZXk6IDB4ZDNkM2QzLFxuICBsaWdodHBpbms6IDB4ZmZiNmMxLFxuICBsaWdodHNhbG1vbjogMHhmZmEwN2EsXG4gIGxpZ2h0c2VhZ3JlZW46IDB4MjBiMmFhLFxuICBsaWdodHNreWJsdWU6IDB4ODdjZWZhLFxuICBsaWdodHNsYXRlZ3JheTogMHg3Nzg4OTksXG4gIGxpZ2h0c2xhdGVncmV5OiAweDc3ODg5OSxcbiAgbGlnaHRzdGVlbGJsdWU6IDB4YjBjNGRlLFxuICBsaWdodHllbGxvdzogMHhmZmZmZTAsXG4gIGxpbWU6IDB4MDBmZjAwLFxuICBsaW1lZ3JlZW46IDB4MzJjZDMyLFxuICBsaW5lbjogMHhmYWYwZTYsXG4gIG1hZ2VudGE6IDB4ZmYwMGZmLFxuICBtYXJvb246IDB4ODAwMDAwLFxuICBtZWRpdW1hcXVhbWFyaW5lOiAweDY2Y2RhYSxcbiAgbWVkaXVtYmx1ZTogMHgwMDAwY2QsXG4gIG1lZGl1bW9yY2hpZDogMHhiYTU1ZDMsXG4gIG1lZGl1bXB1cnBsZTogMHg5MzcwZGIsXG4gIG1lZGl1bXNlYWdyZWVuOiAweDNjYjM3MSxcbiAgbWVkaXVtc2xhdGVibHVlOiAweDdiNjhlZSxcbiAgbWVkaXVtc3ByaW5nZ3JlZW46IDB4MDBmYTlhLFxuICBtZWRpdW10dXJxdW9pc2U6IDB4NDhkMWNjLFxuICBtZWRpdW12aW9sZXRyZWQ6IDB4YzcxNTg1LFxuICBtaWRuaWdodGJsdWU6IDB4MTkxOTcwLFxuICBtaW50Y3JlYW06IDB4ZjVmZmZhLFxuICBtaXN0eXJvc2U6IDB4ZmZlNGUxLFxuICBtb2NjYXNpbjogMHhmZmU0YjUsXG4gIG5hdmFqb3doaXRlOiAweGZmZGVhZCxcbiAgbmF2eTogMHgwMDAwODAsXG4gIG9sZGxhY2U6IDB4ZmRmNWU2LFxuICBvbGl2ZTogMHg4MDgwMDAsXG4gIG9saXZlZHJhYjogMHg2YjhlMjMsXG4gIG9yYW5nZTogMHhmZmE1MDAsXG4gIG9yYW5nZXJlZDogMHhmZjQ1MDAsXG4gIG9yY2hpZDogMHhkYTcwZDYsXG4gIHBhbGVnb2xkZW5yb2Q6IDB4ZWVlOGFhLFxuICBwYWxlZ3JlZW46IDB4OThmYjk4LFxuICBwYWxldHVycXVvaXNlOiAweGFmZWVlZSxcbiAgcGFsZXZpb2xldHJlZDogMHhkYjcwOTMsXG4gIHBhcGF5YXdoaXA6IDB4ZmZlZmQ1LFxuICBwZWFjaHB1ZmY6IDB4ZmZkYWI5LFxuICBwZXJ1OiAweGNkODUzZixcbiAgcGluazogMHhmZmMwY2IsXG4gIHBsdW06IDB4ZGRhMGRkLFxuICBwb3dkZXJibHVlOiAweGIwZTBlNixcbiAgcHVycGxlOiAweDgwMDA4MCxcbiAgcmViZWNjYXB1cnBsZTogMHg2NjMzOTksXG4gIHJlZDogMHhmZjAwMDAsXG4gIHJvc3licm93bjogMHhiYzhmOGYsXG4gIHJveWFsYmx1ZTogMHg0MTY5ZTEsXG4gIHNhZGRsZWJyb3duOiAweDhiNDUxMyxcbiAgc2FsbW9uOiAweGZhODA3MixcbiAgc2FuZHlicm93bjogMHhmNGE0NjAsXG4gIHNlYWdyZWVuOiAweDJlOGI1NyxcbiAgc2Vhc2hlbGw6IDB4ZmZmNWVlLFxuICBzaWVubmE6IDB4YTA1MjJkLFxuICBzaWx2ZXI6IDB4YzBjMGMwLFxuICBza3libHVlOiAweDg3Y2VlYixcbiAgc2xhdGVibHVlOiAweDZhNWFjZCxcbiAgc2xhdGVncmF5OiAweDcwODA5MCxcbiAgc2xhdGVncmV5OiAweDcwODA5MCxcbiAgc25vdzogMHhmZmZhZmEsXG4gIHNwcmluZ2dyZWVuOiAweDAwZmY3ZixcbiAgc3RlZWxibHVlOiAweDQ2ODJiNCxcbiAgdGFuOiAweGQyYjQ4YyxcbiAgdGVhbDogMHgwMDgwODAsXG4gIHRoaXN0bGU6IDB4ZDhiZmQ4LFxuICB0b21hdG86IDB4ZmY2MzQ3LFxuICB0dXJxdW9pc2U6IDB4NDBlMGQwLFxuICB2aW9sZXQ6IDB4ZWU4MmVlLFxuICB3aGVhdDogMHhmNWRlYjMsXG4gIHdoaXRlOiAweGZmZmZmZixcbiAgd2hpdGVzbW9rZTogMHhmNWY1ZjUsXG4gIHllbGxvdzogMHhmZmZmMDAsXG4gIHllbGxvd2dyZWVuOiAweDlhY2QzMlxufTtcblxuZGVmaW5lKENvbG9yLCBjb2xvciwge1xuICBjb3B5OiBmdW5jdGlvbihjaGFubmVscykge1xuICAgIHJldHVybiBPYmplY3QuYXNzaWduKG5ldyB0aGlzLmNvbnN0cnVjdG9yLCB0aGlzLCBjaGFubmVscyk7XG4gIH0sXG4gIGRpc3BsYXlhYmxlOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5yZ2IoKS5kaXNwbGF5YWJsZSgpO1xuICB9LFxuICBoZXg6IGNvbG9yX2Zvcm1hdEhleCwgLy8gRGVwcmVjYXRlZCEgVXNlIGNvbG9yLmZvcm1hdEhleC5cbiAgZm9ybWF0SGV4OiBjb2xvcl9mb3JtYXRIZXgsXG4gIGZvcm1hdEhzbDogY29sb3JfZm9ybWF0SHNsLFxuICBmb3JtYXRSZ2I6IGNvbG9yX2Zvcm1hdFJnYixcbiAgdG9TdHJpbmc6IGNvbG9yX2Zvcm1hdFJnYlxufSk7XG5cbmZ1bmN0aW9uIGNvbG9yX2Zvcm1hdEhleCgpIHtcbiAgcmV0dXJuIHRoaXMucmdiKCkuZm9ybWF0SGV4KCk7XG59XG5cbmZ1bmN0aW9uIGNvbG9yX2Zvcm1hdEhzbCgpIHtcbiAgcmV0dXJuIGhzbENvbnZlcnQodGhpcykuZm9ybWF0SHNsKCk7XG59XG5cbmZ1bmN0aW9uIGNvbG9yX2Zvcm1hdFJnYigpIHtcbiAgcmV0dXJuIHRoaXMucmdiKCkuZm9ybWF0UmdiKCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNvbG9yKGZvcm1hdCkge1xuICB2YXIgbSwgbDtcbiAgZm9ybWF0ID0gKGZvcm1hdCArIFwiXCIpLnRyaW0oKS50b0xvd2VyQ2FzZSgpO1xuICByZXR1cm4gKG0gPSByZUhleC5leGVjKGZvcm1hdCkpID8gKGwgPSBtWzFdLmxlbmd0aCwgbSA9IHBhcnNlSW50KG1bMV0sIDE2KSwgbCA9PT0gNiA/IHJnYm4obSkgLy8gI2ZmMDAwMFxuICAgICAgOiBsID09PSAzID8gbmV3IFJnYigobSA+PiA4ICYgMHhmKSB8IChtID4+IDQgJiAweGYwKSwgKG0gPj4gNCAmIDB4ZikgfCAobSAmIDB4ZjApLCAoKG0gJiAweGYpIDw8IDQpIHwgKG0gJiAweGYpLCAxKSAvLyAjZjAwXG4gICAgICA6IGwgPT09IDggPyByZ2JhKG0gPj4gMjQgJiAweGZmLCBtID4+IDE2ICYgMHhmZiwgbSA+PiA4ICYgMHhmZiwgKG0gJiAweGZmKSAvIDB4ZmYpIC8vICNmZjAwMDAwMFxuICAgICAgOiBsID09PSA0ID8gcmdiYSgobSA+PiAxMiAmIDB4ZikgfCAobSA+PiA4ICYgMHhmMCksIChtID4+IDggJiAweGYpIHwgKG0gPj4gNCAmIDB4ZjApLCAobSA+PiA0ICYgMHhmKSB8IChtICYgMHhmMCksICgoKG0gJiAweGYpIDw8IDQpIHwgKG0gJiAweGYpKSAvIDB4ZmYpIC8vICNmMDAwXG4gICAgICA6IG51bGwpIC8vIGludmFsaWQgaGV4XG4gICAgICA6IChtID0gcmVSZ2JJbnRlZ2VyLmV4ZWMoZm9ybWF0KSkgPyBuZXcgUmdiKG1bMV0sIG1bMl0sIG1bM10sIDEpIC8vIHJnYigyNTUsIDAsIDApXG4gICAgICA6IChtID0gcmVSZ2JQZXJjZW50LmV4ZWMoZm9ybWF0KSkgPyBuZXcgUmdiKG1bMV0gKiAyNTUgLyAxMDAsIG1bMl0gKiAyNTUgLyAxMDAsIG1bM10gKiAyNTUgLyAxMDAsIDEpIC8vIHJnYigxMDAlLCAwJSwgMCUpXG4gICAgICA6IChtID0gcmVSZ2JhSW50ZWdlci5leGVjKGZvcm1hdCkpID8gcmdiYShtWzFdLCBtWzJdLCBtWzNdLCBtWzRdKSAvLyByZ2JhKDI1NSwgMCwgMCwgMSlcbiAgICAgIDogKG0gPSByZVJnYmFQZXJjZW50LmV4ZWMoZm9ybWF0KSkgPyByZ2JhKG1bMV0gKiAyNTUgLyAxMDAsIG1bMl0gKiAyNTUgLyAxMDAsIG1bM10gKiAyNTUgLyAxMDAsIG1bNF0pIC8vIHJnYigxMDAlLCAwJSwgMCUsIDEpXG4gICAgICA6IChtID0gcmVIc2xQZXJjZW50LmV4ZWMoZm9ybWF0KSkgPyBoc2xhKG1bMV0sIG1bMl0gLyAxMDAsIG1bM10gLyAxMDAsIDEpIC8vIGhzbCgxMjAsIDUwJSwgNTAlKVxuICAgICAgOiAobSA9IHJlSHNsYVBlcmNlbnQuZXhlYyhmb3JtYXQpKSA/IGhzbGEobVsxXSwgbVsyXSAvIDEwMCwgbVszXSAvIDEwMCwgbVs0XSkgLy8gaHNsYSgxMjAsIDUwJSwgNTAlLCAxKVxuICAgICAgOiBuYW1lZC5oYXNPd25Qcm9wZXJ0eShmb3JtYXQpID8gcmdibihuYW1lZFtmb3JtYXRdKSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXByb3RvdHlwZS1idWlsdGluc1xuICAgICAgOiBmb3JtYXQgPT09IFwidHJhbnNwYXJlbnRcIiA/IG5ldyBSZ2IoTmFOLCBOYU4sIE5hTiwgMClcbiAgICAgIDogbnVsbDtcbn1cblxuZnVuY3Rpb24gcmdibihuKSB7XG4gIHJldHVybiBuZXcgUmdiKG4gPj4gMTYgJiAweGZmLCBuID4+IDggJiAweGZmLCBuICYgMHhmZiwgMSk7XG59XG5cbmZ1bmN0aW9uIHJnYmEociwgZywgYiwgYSkge1xuICBpZiAoYSA8PSAwKSByID0gZyA9IGIgPSBOYU47XG4gIHJldHVybiBuZXcgUmdiKHIsIGcsIGIsIGEpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmdiQ29udmVydChvKSB7XG4gIGlmICghKG8gaW5zdGFuY2VvZiBDb2xvcikpIG8gPSBjb2xvcihvKTtcbiAgaWYgKCFvKSByZXR1cm4gbmV3IFJnYjtcbiAgbyA9IG8ucmdiKCk7XG4gIHJldHVybiBuZXcgUmdiKG8uciwgby5nLCBvLmIsIG8ub3BhY2l0eSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZ2IociwgZywgYiwgb3BhY2l0eSkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/IHJnYkNvbnZlcnQocikgOiBuZXcgUmdiKHIsIGcsIGIsIG9wYWNpdHkgPT0gbnVsbCA/IDEgOiBvcGFjaXR5KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFJnYihyLCBnLCBiLCBvcGFjaXR5KSB7XG4gIHRoaXMuciA9ICtyO1xuICB0aGlzLmcgPSArZztcbiAgdGhpcy5iID0gK2I7XG4gIHRoaXMub3BhY2l0eSA9ICtvcGFjaXR5O1xufVxuXG5kZWZpbmUoUmdiLCByZ2IsIGV4dGVuZChDb2xvciwge1xuICBicmlnaHRlcjogZnVuY3Rpb24oaykge1xuICAgIGsgPSBrID09IG51bGwgPyBicmlnaHRlciA6IE1hdGgucG93KGJyaWdodGVyLCBrKTtcbiAgICByZXR1cm4gbmV3IFJnYih0aGlzLnIgKiBrLCB0aGlzLmcgKiBrLCB0aGlzLmIgKiBrLCB0aGlzLm9wYWNpdHkpO1xuICB9LFxuICBkYXJrZXI6IGZ1bmN0aW9uKGspIHtcbiAgICBrID0gayA9PSBudWxsID8gZGFya2VyIDogTWF0aC5wb3coZGFya2VyLCBrKTtcbiAgICByZXR1cm4gbmV3IFJnYih0aGlzLnIgKiBrLCB0aGlzLmcgKiBrLCB0aGlzLmIgKiBrLCB0aGlzLm9wYWNpdHkpO1xuICB9LFxuICByZ2I6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9LFxuICBkaXNwbGF5YWJsZTogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuICgtMC41IDw9IHRoaXMuciAmJiB0aGlzLnIgPCAyNTUuNSlcbiAgICAgICAgJiYgKC0wLjUgPD0gdGhpcy5nICYmIHRoaXMuZyA8IDI1NS41KVxuICAgICAgICAmJiAoLTAuNSA8PSB0aGlzLmIgJiYgdGhpcy5iIDwgMjU1LjUpXG4gICAgICAgICYmICgwIDw9IHRoaXMub3BhY2l0eSAmJiB0aGlzLm9wYWNpdHkgPD0gMSk7XG4gIH0sXG4gIGhleDogcmdiX2Zvcm1hdEhleCwgLy8gRGVwcmVjYXRlZCEgVXNlIGNvbG9yLmZvcm1hdEhleC5cbiAgZm9ybWF0SGV4OiByZ2JfZm9ybWF0SGV4LFxuICBmb3JtYXRSZ2I6IHJnYl9mb3JtYXRSZ2IsXG4gIHRvU3RyaW5nOiByZ2JfZm9ybWF0UmdiXG59KSk7XG5cbmZ1bmN0aW9uIHJnYl9mb3JtYXRIZXgoKSB7XG4gIHJldHVybiBcIiNcIiArIGhleCh0aGlzLnIpICsgaGV4KHRoaXMuZykgKyBoZXgodGhpcy5iKTtcbn1cblxuZnVuY3Rpb24gcmdiX2Zvcm1hdFJnYigpIHtcbiAgdmFyIGEgPSB0aGlzLm9wYWNpdHk7IGEgPSBpc05hTihhKSA/IDEgOiBNYXRoLm1heCgwLCBNYXRoLm1pbigxLCBhKSk7XG4gIHJldHVybiAoYSA9PT0gMSA/IFwicmdiKFwiIDogXCJyZ2JhKFwiKVxuICAgICAgKyBNYXRoLm1heCgwLCBNYXRoLm1pbigyNTUsIE1hdGgucm91bmQodGhpcy5yKSB8fCAwKSkgKyBcIiwgXCJcbiAgICAgICsgTWF0aC5tYXgoMCwgTWF0aC5taW4oMjU1LCBNYXRoLnJvdW5kKHRoaXMuZykgfHwgMCkpICsgXCIsIFwiXG4gICAgICArIE1hdGgubWF4KDAsIE1hdGgubWluKDI1NSwgTWF0aC5yb3VuZCh0aGlzLmIpIHx8IDApKVxuICAgICAgKyAoYSA9PT0gMSA/IFwiKVwiIDogXCIsIFwiICsgYSArIFwiKVwiKTtcbn1cblxuZnVuY3Rpb24gaGV4KHZhbHVlKSB7XG4gIHZhbHVlID0gTWF0aC5tYXgoMCwgTWF0aC5taW4oMjU1LCBNYXRoLnJvdW5kKHZhbHVlKSB8fCAwKSk7XG4gIHJldHVybiAodmFsdWUgPCAxNiA/IFwiMFwiIDogXCJcIikgKyB2YWx1ZS50b1N0cmluZygxNik7XG59XG5cbmZ1bmN0aW9uIGhzbGEoaCwgcywgbCwgYSkge1xuICBpZiAoYSA8PSAwKSBoID0gcyA9IGwgPSBOYU47XG4gIGVsc2UgaWYgKGwgPD0gMCB8fCBsID49IDEpIGggPSBzID0gTmFOO1xuICBlbHNlIGlmIChzIDw9IDApIGggPSBOYU47XG4gIHJldHVybiBuZXcgSHNsKGgsIHMsIGwsIGEpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaHNsQ29udmVydChvKSB7XG4gIGlmIChvIGluc3RhbmNlb2YgSHNsKSByZXR1cm4gbmV3IEhzbChvLmgsIG8ucywgby5sLCBvLm9wYWNpdHkpO1xuICBpZiAoIShvIGluc3RhbmNlb2YgQ29sb3IpKSBvID0gY29sb3Iobyk7XG4gIGlmICghbykgcmV0dXJuIG5ldyBIc2w7XG4gIGlmIChvIGluc3RhbmNlb2YgSHNsKSByZXR1cm4gbztcbiAgbyA9IG8ucmdiKCk7XG4gIHZhciByID0gby5yIC8gMjU1LFxuICAgICAgZyA9IG8uZyAvIDI1NSxcbiAgICAgIGIgPSBvLmIgLyAyNTUsXG4gICAgICBtaW4gPSBNYXRoLm1pbihyLCBnLCBiKSxcbiAgICAgIG1heCA9IE1hdGgubWF4KHIsIGcsIGIpLFxuICAgICAgaCA9IE5hTixcbiAgICAgIHMgPSBtYXggLSBtaW4sXG4gICAgICBsID0gKG1heCArIG1pbikgLyAyO1xuICBpZiAocykge1xuICAgIGlmIChyID09PSBtYXgpIGggPSAoZyAtIGIpIC8gcyArIChnIDwgYikgKiA2O1xuICAgIGVsc2UgaWYgKGcgPT09IG1heCkgaCA9IChiIC0gcikgLyBzICsgMjtcbiAgICBlbHNlIGggPSAociAtIGcpIC8gcyArIDQ7XG4gICAgcyAvPSBsIDwgMC41ID8gbWF4ICsgbWluIDogMiAtIG1heCAtIG1pbjtcbiAgICBoICo9IDYwO1xuICB9IGVsc2Uge1xuICAgIHMgPSBsID4gMCAmJiBsIDwgMSA/IDAgOiBoO1xuICB9XG4gIHJldHVybiBuZXcgSHNsKGgsIHMsIGwsIG8ub3BhY2l0eSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBoc2woaCwgcywgbCwgb3BhY2l0eSkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/IGhzbENvbnZlcnQoaCkgOiBuZXcgSHNsKGgsIHMsIGwsIG9wYWNpdHkgPT0gbnVsbCA/IDEgOiBvcGFjaXR5KTtcbn1cblxuZnVuY3Rpb24gSHNsKGgsIHMsIGwsIG9wYWNpdHkpIHtcbiAgdGhpcy5oID0gK2g7XG4gIHRoaXMucyA9ICtzO1xuICB0aGlzLmwgPSArbDtcbiAgdGhpcy5vcGFjaXR5ID0gK29wYWNpdHk7XG59XG5cbmRlZmluZShIc2wsIGhzbCwgZXh0ZW5kKENvbG9yLCB7XG4gIGJyaWdodGVyOiBmdW5jdGlvbihrKSB7XG4gICAgayA9IGsgPT0gbnVsbCA/IGJyaWdodGVyIDogTWF0aC5wb3coYnJpZ2h0ZXIsIGspO1xuICAgIHJldHVybiBuZXcgSHNsKHRoaXMuaCwgdGhpcy5zLCB0aGlzLmwgKiBrLCB0aGlzLm9wYWNpdHkpO1xuICB9LFxuICBkYXJrZXI6IGZ1bmN0aW9uKGspIHtcbiAgICBrID0gayA9PSBudWxsID8gZGFya2VyIDogTWF0aC5wb3coZGFya2VyLCBrKTtcbiAgICByZXR1cm4gbmV3IEhzbCh0aGlzLmgsIHRoaXMucywgdGhpcy5sICogaywgdGhpcy5vcGFjaXR5KTtcbiAgfSxcbiAgcmdiOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgaCA9IHRoaXMuaCAlIDM2MCArICh0aGlzLmggPCAwKSAqIDM2MCxcbiAgICAgICAgcyA9IGlzTmFOKGgpIHx8IGlzTmFOKHRoaXMucykgPyAwIDogdGhpcy5zLFxuICAgICAgICBsID0gdGhpcy5sLFxuICAgICAgICBtMiA9IGwgKyAobCA8IDAuNSA/IGwgOiAxIC0gbCkgKiBzLFxuICAgICAgICBtMSA9IDIgKiBsIC0gbTI7XG4gICAgcmV0dXJuIG5ldyBSZ2IoXG4gICAgICBoc2wycmdiKGggPj0gMjQwID8gaCAtIDI0MCA6IGggKyAxMjAsIG0xLCBtMiksXG4gICAgICBoc2wycmdiKGgsIG0xLCBtMiksXG4gICAgICBoc2wycmdiKGggPCAxMjAgPyBoICsgMjQwIDogaCAtIDEyMCwgbTEsIG0yKSxcbiAgICAgIHRoaXMub3BhY2l0eVxuICAgICk7XG4gIH0sXG4gIGRpc3BsYXlhYmxlOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gKDAgPD0gdGhpcy5zICYmIHRoaXMucyA8PSAxIHx8IGlzTmFOKHRoaXMucykpXG4gICAgICAgICYmICgwIDw9IHRoaXMubCAmJiB0aGlzLmwgPD0gMSlcbiAgICAgICAgJiYgKDAgPD0gdGhpcy5vcGFjaXR5ICYmIHRoaXMub3BhY2l0eSA8PSAxKTtcbiAgfSxcbiAgZm9ybWF0SHNsOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgYSA9IHRoaXMub3BhY2l0eTsgYSA9IGlzTmFOKGEpID8gMSA6IE1hdGgubWF4KDAsIE1hdGgubWluKDEsIGEpKTtcbiAgICByZXR1cm4gKGEgPT09IDEgPyBcImhzbChcIiA6IFwiaHNsYShcIilcbiAgICAgICAgKyAodGhpcy5oIHx8IDApICsgXCIsIFwiXG4gICAgICAgICsgKHRoaXMucyB8fCAwKSAqIDEwMCArIFwiJSwgXCJcbiAgICAgICAgKyAodGhpcy5sIHx8IDApICogMTAwICsgXCIlXCJcbiAgICAgICAgKyAoYSA9PT0gMSA/IFwiKVwiIDogXCIsIFwiICsgYSArIFwiKVwiKTtcbiAgfVxufSkpO1xuXG4vKiBGcm9tIEZ2RCAxMy4zNywgQ1NTIENvbG9yIE1vZHVsZSBMZXZlbCAzICovXG5mdW5jdGlvbiBoc2wycmdiKGgsIG0xLCBtMikge1xuICByZXR1cm4gKGggPCA2MCA/IG0xICsgKG0yIC0gbTEpICogaCAvIDYwXG4gICAgICA6IGggPCAxODAgPyBtMlxuICAgICAgOiBoIDwgMjQwID8gbTEgKyAobTIgLSBtMSkgKiAoMjQwIC0gaCkgLyA2MFxuICAgICAgOiBtMSkgKiAyNTU7XG59XG4iLCJleHBvcnQgZnVuY3Rpb24gYmFzaXModDEsIHYwLCB2MSwgdjIsIHYzKSB7XG4gIHZhciB0MiA9IHQxICogdDEsIHQzID0gdDIgKiB0MTtcbiAgcmV0dXJuICgoMSAtIDMgKiB0MSArIDMgKiB0MiAtIHQzKSAqIHYwXG4gICAgICArICg0IC0gNiAqIHQyICsgMyAqIHQzKSAqIHYxXG4gICAgICArICgxICsgMyAqIHQxICsgMyAqIHQyIC0gMyAqIHQzKSAqIHYyXG4gICAgICArIHQzICogdjMpIC8gNjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWVzKSB7XG4gIHZhciBuID0gdmFsdWVzLmxlbmd0aCAtIDE7XG4gIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgdmFyIGkgPSB0IDw9IDAgPyAodCA9IDApIDogdCA+PSAxID8gKHQgPSAxLCBuIC0gMSkgOiBNYXRoLmZsb29yKHQgKiBuKSxcbiAgICAgICAgdjEgPSB2YWx1ZXNbaV0sXG4gICAgICAgIHYyID0gdmFsdWVzW2kgKyAxXSxcbiAgICAgICAgdjAgPSBpID4gMCA/IHZhbHVlc1tpIC0gMV0gOiAyICogdjEgLSB2MixcbiAgICAgICAgdjMgPSBpIDwgbiAtIDEgPyB2YWx1ZXNbaSArIDJdIDogMiAqIHYyIC0gdjE7XG4gICAgcmV0dXJuIGJhc2lzKCh0IC0gaSAvIG4pICogbiwgdjAsIHYxLCB2MiwgdjMpO1xuICB9O1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgeCA9PiAoKSA9PiB4O1xuIiwiaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuL2NvbnN0YW50LmpzXCI7XG5cbmZ1bmN0aW9uIGxpbmVhcihhLCBkKSB7XG4gIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgcmV0dXJuIGEgKyB0ICogZDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZXhwb25lbnRpYWwoYSwgYiwgeSkge1xuICByZXR1cm4gYSA9IE1hdGgucG93KGEsIHkpLCBiID0gTWF0aC5wb3coYiwgeSkgLSBhLCB5ID0gMSAvIHksIGZ1bmN0aW9uKHQpIHtcbiAgICByZXR1cm4gTWF0aC5wb3coYSArIHQgKiBiLCB5KTtcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGh1ZShhLCBiKSB7XG4gIHZhciBkID0gYiAtIGE7XG4gIHJldHVybiBkID8gbGluZWFyKGEsIGQgPiAxODAgfHwgZCA8IC0xODAgPyBkIC0gMzYwICogTWF0aC5yb3VuZChkIC8gMzYwKSA6IGQpIDogY29uc3RhbnQoaXNOYU4oYSkgPyBiIDogYSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnYW1tYSh5KSB7XG4gIHJldHVybiAoeSA9ICt5KSA9PT0gMSA/IG5vZ2FtbWEgOiBmdW5jdGlvbihhLCBiKSB7XG4gICAgcmV0dXJuIGIgLSBhID8gZXhwb25lbnRpYWwoYSwgYiwgeSkgOiBjb25zdGFudChpc05hTihhKSA/IGIgOiBhKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbm9nYW1tYShhLCBiKSB7XG4gIHZhciBkID0gYiAtIGE7XG4gIHJldHVybiBkID8gbGluZWFyKGEsIGQpIDogY29uc3RhbnQoaXNOYU4oYSkgPyBiIDogYSk7XG59XG4iLCJpbXBvcnQge3JnYiBhcyBjb2xvclJnYn0gZnJvbSBcImQzLWNvbG9yXCI7XG5pbXBvcnQgYmFzaXMgZnJvbSBcIi4vYmFzaXMuanNcIjtcbmltcG9ydCBiYXNpc0Nsb3NlZCBmcm9tIFwiLi9iYXNpc0Nsb3NlZC5qc1wiO1xuaW1wb3J0IG5vZ2FtbWEsIHtnYW1tYX0gZnJvbSBcIi4vY29sb3IuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgKGZ1bmN0aW9uIHJnYkdhbW1hKHkpIHtcbiAgdmFyIGNvbG9yID0gZ2FtbWEoeSk7XG5cbiAgZnVuY3Rpb24gcmdiKHN0YXJ0LCBlbmQpIHtcbiAgICB2YXIgciA9IGNvbG9yKChzdGFydCA9IGNvbG9yUmdiKHN0YXJ0KSkuciwgKGVuZCA9IGNvbG9yUmdiKGVuZCkpLnIpLFxuICAgICAgICBnID0gY29sb3Ioc3RhcnQuZywgZW5kLmcpLFxuICAgICAgICBiID0gY29sb3Ioc3RhcnQuYiwgZW5kLmIpLFxuICAgICAgICBvcGFjaXR5ID0gbm9nYW1tYShzdGFydC5vcGFjaXR5LCBlbmQub3BhY2l0eSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICAgIHN0YXJ0LnIgPSByKHQpO1xuICAgICAgc3RhcnQuZyA9IGcodCk7XG4gICAgICBzdGFydC5iID0gYih0KTtcbiAgICAgIHN0YXJ0Lm9wYWNpdHkgPSBvcGFjaXR5KHQpO1xuICAgICAgcmV0dXJuIHN0YXJ0ICsgXCJcIjtcbiAgICB9O1xuICB9XG5cbiAgcmdiLmdhbW1hID0gcmdiR2FtbWE7XG5cbiAgcmV0dXJuIHJnYjtcbn0pKDEpO1xuXG5mdW5jdGlvbiByZ2JTcGxpbmUoc3BsaW5lKSB7XG4gIHJldHVybiBmdW5jdGlvbihjb2xvcnMpIHtcbiAgICB2YXIgbiA9IGNvbG9ycy5sZW5ndGgsXG4gICAgICAgIHIgPSBuZXcgQXJyYXkobiksXG4gICAgICAgIGcgPSBuZXcgQXJyYXkobiksXG4gICAgICAgIGIgPSBuZXcgQXJyYXkobiksXG4gICAgICAgIGksIGNvbG9yO1xuICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGNvbG9yID0gY29sb3JSZ2IoY29sb3JzW2ldKTtcbiAgICAgIHJbaV0gPSBjb2xvci5yIHx8IDA7XG4gICAgICBnW2ldID0gY29sb3IuZyB8fCAwO1xuICAgICAgYltpXSA9IGNvbG9yLmIgfHwgMDtcbiAgICB9XG4gICAgciA9IHNwbGluZShyKTtcbiAgICBnID0gc3BsaW5lKGcpO1xuICAgIGIgPSBzcGxpbmUoYik7XG4gICAgY29sb3Iub3BhY2l0eSA9IDE7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICAgIGNvbG9yLnIgPSByKHQpO1xuICAgICAgY29sb3IuZyA9IGcodCk7XG4gICAgICBjb2xvci5iID0gYih0KTtcbiAgICAgIHJldHVybiBjb2xvciArIFwiXCI7XG4gICAgfTtcbiAgfTtcbn1cblxuZXhwb3J0IHZhciByZ2JCYXNpcyA9IHJnYlNwbGluZShiYXNpcyk7XG5leHBvcnQgdmFyIHJnYkJhc2lzQ2xvc2VkID0gcmdiU3BsaW5lKGJhc2lzQ2xvc2VkKTtcbiIsImltcG9ydCB7YmFzaXN9IGZyb20gXCIuL2Jhc2lzLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlcykge1xuICB2YXIgbiA9IHZhbHVlcy5sZW5ndGg7XG4gIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgdmFyIGkgPSBNYXRoLmZsb29yKCgodCAlPSAxKSA8IDAgPyArK3QgOiB0KSAqIG4pLFxuICAgICAgICB2MCA9IHZhbHVlc1soaSArIG4gLSAxKSAlIG5dLFxuICAgICAgICB2MSA9IHZhbHVlc1tpICUgbl0sXG4gICAgICAgIHYyID0gdmFsdWVzWyhpICsgMSkgJSBuXSxcbiAgICAgICAgdjMgPSB2YWx1ZXNbKGkgKyAyKSAlIG5dO1xuICAgIHJldHVybiBiYXNpcygodCAtIGkgLyBuKSAqIG4sIHYwLCB2MSwgdjIsIHYzKTtcbiAgfTtcbn1cbiIsImltcG9ydCBudW1iZXIgZnJvbSBcIi4vbnVtYmVyLmpzXCI7XG5cbnZhciByZUEgPSAvWy0rXT8oPzpcXGQrXFwuP1xcZCp8XFwuP1xcZCspKD86W2VFXVstK10/XFxkKyk/L2csXG4gICAgcmVCID0gbmV3IFJlZ0V4cChyZUEuc291cmNlLCBcImdcIik7XG5cbmZ1bmN0aW9uIHplcm8oYikge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGI7XG4gIH07XG59XG5cbmZ1bmN0aW9uIG9uZShiKSB7XG4gIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgcmV0dXJuIGIodCkgKyBcIlwiO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIHZhciBiaSA9IHJlQS5sYXN0SW5kZXggPSByZUIubGFzdEluZGV4ID0gMCwgLy8gc2NhbiBpbmRleCBmb3IgbmV4dCBudW1iZXIgaW4gYlxuICAgICAgYW0sIC8vIGN1cnJlbnQgbWF0Y2ggaW4gYVxuICAgICAgYm0sIC8vIGN1cnJlbnQgbWF0Y2ggaW4gYlxuICAgICAgYnMsIC8vIHN0cmluZyBwcmVjZWRpbmcgY3VycmVudCBudW1iZXIgaW4gYiwgaWYgYW55XG4gICAgICBpID0gLTEsIC8vIGluZGV4IGluIHNcbiAgICAgIHMgPSBbXSwgLy8gc3RyaW5nIGNvbnN0YW50cyBhbmQgcGxhY2Vob2xkZXJzXG4gICAgICBxID0gW107IC8vIG51bWJlciBpbnRlcnBvbGF0b3JzXG5cbiAgLy8gQ29lcmNlIGlucHV0cyB0byBzdHJpbmdzLlxuICBhID0gYSArIFwiXCIsIGIgPSBiICsgXCJcIjtcblxuICAvLyBJbnRlcnBvbGF0ZSBwYWlycyBvZiBudW1iZXJzIGluIGEgJiBiLlxuICB3aGlsZSAoKGFtID0gcmVBLmV4ZWMoYSkpXG4gICAgICAmJiAoYm0gPSByZUIuZXhlYyhiKSkpIHtcbiAgICBpZiAoKGJzID0gYm0uaW5kZXgpID4gYmkpIHsgLy8gYSBzdHJpbmcgcHJlY2VkZXMgdGhlIG5leHQgbnVtYmVyIGluIGJcbiAgICAgIGJzID0gYi5zbGljZShiaSwgYnMpO1xuICAgICAgaWYgKHNbaV0pIHNbaV0gKz0gYnM7IC8vIGNvYWxlc2NlIHdpdGggcHJldmlvdXMgc3RyaW5nXG4gICAgICBlbHNlIHNbKytpXSA9IGJzO1xuICAgIH1cbiAgICBpZiAoKGFtID0gYW1bMF0pID09PSAoYm0gPSBibVswXSkpIHsgLy8gbnVtYmVycyBpbiBhICYgYiBtYXRjaFxuICAgICAgaWYgKHNbaV0pIHNbaV0gKz0gYm07IC8vIGNvYWxlc2NlIHdpdGggcHJldmlvdXMgc3RyaW5nXG4gICAgICBlbHNlIHNbKytpXSA9IGJtO1xuICAgIH0gZWxzZSB7IC8vIGludGVycG9sYXRlIG5vbi1tYXRjaGluZyBudW1iZXJzXG4gICAgICBzWysraV0gPSBudWxsO1xuICAgICAgcS5wdXNoKHtpOiBpLCB4OiBudW1iZXIoYW0sIGJtKX0pO1xuICAgIH1cbiAgICBiaSA9IHJlQi5sYXN0SW5kZXg7XG4gIH1cblxuICAvLyBBZGQgcmVtYWlucyBvZiBiLlxuICBpZiAoYmkgPCBiLmxlbmd0aCkge1xuICAgIGJzID0gYi5zbGljZShiaSk7XG4gICAgaWYgKHNbaV0pIHNbaV0gKz0gYnM7IC8vIGNvYWxlc2NlIHdpdGggcHJldmlvdXMgc3RyaW5nXG4gICAgZWxzZSBzWysraV0gPSBicztcbiAgfVxuXG4gIC8vIFNwZWNpYWwgb3B0aW1pemF0aW9uIGZvciBvbmx5IGEgc2luZ2xlIG1hdGNoLlxuICAvLyBPdGhlcndpc2UsIGludGVycG9sYXRlIGVhY2ggb2YgdGhlIG51bWJlcnMgYW5kIHJlam9pbiB0aGUgc3RyaW5nLlxuICByZXR1cm4gcy5sZW5ndGggPCAyID8gKHFbMF1cbiAgICAgID8gb25lKHFbMF0ueClcbiAgICAgIDogemVybyhiKSlcbiAgICAgIDogKGIgPSBxLmxlbmd0aCwgZnVuY3Rpb24odCkge1xuICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBvOyBpIDwgYjsgKytpKSBzWyhvID0gcVtpXSkuaV0gPSBvLngodCk7XG4gICAgICAgICAgcmV0dXJuIHMuam9pbihcIlwiKTtcbiAgICAgICAgfSk7XG59XG4iLCJpbXBvcnQge2NvbG9yfSBmcm9tIFwiZDMtY29sb3JcIjtcbmltcG9ydCB7aW50ZXJwb2xhdGVOdW1iZXIsIGludGVycG9sYXRlUmdiLCBpbnRlcnBvbGF0ZVN0cmluZ30gZnJvbSBcImQzLWludGVycG9sYXRlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgdmFyIGM7XG4gIHJldHVybiAodHlwZW9mIGIgPT09IFwibnVtYmVyXCIgPyBpbnRlcnBvbGF0ZU51bWJlclxuICAgICAgOiBiIGluc3RhbmNlb2YgY29sb3IgPyBpbnRlcnBvbGF0ZVJnYlxuICAgICAgOiAoYyA9IGNvbG9yKGIpKSA/IChiID0gYywgaW50ZXJwb2xhdGVSZ2IpXG4gICAgICA6IGludGVycG9sYXRlU3RyaW5nKShhLCBiKTtcbn1cbiIsImltcG9ydCB7aW50ZXJwb2xhdGVUcmFuc2Zvcm1TdmcgYXMgaW50ZXJwb2xhdGVUcmFuc2Zvcm19IGZyb20gXCJkMy1pbnRlcnBvbGF0ZVwiO1xuaW1wb3J0IHtuYW1lc3BhY2V9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcbmltcG9ydCB7dHdlZW5WYWx1ZX0gZnJvbSBcIi4vdHdlZW4uanNcIjtcbmltcG9ydCBpbnRlcnBvbGF0ZSBmcm9tIFwiLi9pbnRlcnBvbGF0ZS5qc1wiO1xuXG5mdW5jdGlvbiBhdHRyUmVtb3ZlKG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyUmVtb3ZlTlMoZnVsbG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMucmVtb3ZlQXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0ckNvbnN0YW50KG5hbWUsIGludGVycG9sYXRlLCB2YWx1ZTEpIHtcbiAgdmFyIHN0cmluZzAwLFxuICAgICAgc3RyaW5nMSA9IHZhbHVlMSArIFwiXCIsXG4gICAgICBpbnRlcnBvbGF0ZTA7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc3RyaW5nMCA9IHRoaXMuZ2V0QXR0cmlidXRlKG5hbWUpO1xuICAgIHJldHVybiBzdHJpbmcwID09PSBzdHJpbmcxID8gbnVsbFxuICAgICAgICA6IHN0cmluZzAgPT09IHN0cmluZzAwID8gaW50ZXJwb2xhdGUwXG4gICAgICAgIDogaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUoc3RyaW5nMDAgPSBzdHJpbmcwLCB2YWx1ZTEpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyQ29uc3RhbnROUyhmdWxsbmFtZSwgaW50ZXJwb2xhdGUsIHZhbHVlMSkge1xuICB2YXIgc3RyaW5nMDAsXG4gICAgICBzdHJpbmcxID0gdmFsdWUxICsgXCJcIixcbiAgICAgIGludGVycG9sYXRlMDtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzdHJpbmcwID0gdGhpcy5nZXRBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwpO1xuICAgIHJldHVybiBzdHJpbmcwID09PSBzdHJpbmcxID8gbnVsbFxuICAgICAgICA6IHN0cmluZzAgPT09IHN0cmluZzAwID8gaW50ZXJwb2xhdGUwXG4gICAgICAgIDogaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUoc3RyaW5nMDAgPSBzdHJpbmcwLCB2YWx1ZTEpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyRnVuY3Rpb24obmFtZSwgaW50ZXJwb2xhdGUsIHZhbHVlKSB7XG4gIHZhciBzdHJpbmcwMCxcbiAgICAgIHN0cmluZzEwLFxuICAgICAgaW50ZXJwb2xhdGUwO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHN0cmluZzAsIHZhbHVlMSA9IHZhbHVlKHRoaXMpLCBzdHJpbmcxO1xuICAgIGlmICh2YWx1ZTEgPT0gbnVsbCkgcmV0dXJuIHZvaWQgdGhpcy5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gICAgc3RyaW5nMCA9IHRoaXMuZ2V0QXR0cmlidXRlKG5hbWUpO1xuICAgIHN0cmluZzEgPSB2YWx1ZTEgKyBcIlwiO1xuICAgIHJldHVybiBzdHJpbmcwID09PSBzdHJpbmcxID8gbnVsbFxuICAgICAgICA6IHN0cmluZzAgPT09IHN0cmluZzAwICYmIHN0cmluZzEgPT09IHN0cmluZzEwID8gaW50ZXJwb2xhdGUwXG4gICAgICAgIDogKHN0cmluZzEwID0gc3RyaW5nMSwgaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUoc3RyaW5nMDAgPSBzdHJpbmcwLCB2YWx1ZTEpKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0ckZ1bmN0aW9uTlMoZnVsbG5hbWUsIGludGVycG9sYXRlLCB2YWx1ZSkge1xuICB2YXIgc3RyaW5nMDAsXG4gICAgICBzdHJpbmcxMCxcbiAgICAgIGludGVycG9sYXRlMDtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzdHJpbmcwLCB2YWx1ZTEgPSB2YWx1ZSh0aGlzKSwgc3RyaW5nMTtcbiAgICBpZiAodmFsdWUxID09IG51bGwpIHJldHVybiB2b2lkIHRoaXMucmVtb3ZlQXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsKTtcbiAgICBzdHJpbmcwID0gdGhpcy5nZXRBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwpO1xuICAgIHN0cmluZzEgPSB2YWx1ZTEgKyBcIlwiO1xuICAgIHJldHVybiBzdHJpbmcwID09PSBzdHJpbmcxID8gbnVsbFxuICAgICAgICA6IHN0cmluZzAgPT09IHN0cmluZzAwICYmIHN0cmluZzEgPT09IHN0cmluZzEwID8gaW50ZXJwb2xhdGUwXG4gICAgICAgIDogKHN0cmluZzEwID0gc3RyaW5nMSwgaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUoc3RyaW5nMDAgPSBzdHJpbmcwLCB2YWx1ZTEpKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgdmFyIGZ1bGxuYW1lID0gbmFtZXNwYWNlKG5hbWUpLCBpID0gZnVsbG5hbWUgPT09IFwidHJhbnNmb3JtXCIgPyBpbnRlcnBvbGF0ZVRyYW5zZm9ybSA6IGludGVycG9sYXRlO1xuICByZXR1cm4gdGhpcy5hdHRyVHdlZW4obmFtZSwgdHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgID8gKGZ1bGxuYW1lLmxvY2FsID8gYXR0ckZ1bmN0aW9uTlMgOiBhdHRyRnVuY3Rpb24pKGZ1bGxuYW1lLCBpLCB0d2VlblZhbHVlKHRoaXMsIFwiYXR0ci5cIiArIG5hbWUsIHZhbHVlKSlcbiAgICAgIDogdmFsdWUgPT0gbnVsbCA/IChmdWxsbmFtZS5sb2NhbCA/IGF0dHJSZW1vdmVOUyA6IGF0dHJSZW1vdmUpKGZ1bGxuYW1lKVxuICAgICAgOiAoZnVsbG5hbWUubG9jYWwgPyBhdHRyQ29uc3RhbnROUyA6IGF0dHJDb25zdGFudCkoZnVsbG5hbWUsIGksIHZhbHVlKSk7XG59XG4iLCJpbXBvcnQge25hbWVzcGFjZX0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuXG5mdW5jdGlvbiBhdHRySW50ZXJwb2xhdGUobmFtZSwgaSkge1xuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIHRoaXMuc2V0QXR0cmlidXRlKG5hbWUsIGkuY2FsbCh0aGlzLCB0KSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJJbnRlcnBvbGF0ZU5TKGZ1bGxuYW1lLCBpKSB7XG4gIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgdGhpcy5zZXRBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwsIGkuY2FsbCh0aGlzLCB0KSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJUd2Vlbk5TKGZ1bGxuYW1lLCB2YWx1ZSkge1xuICB2YXIgdDAsIGkwO1xuICBmdW5jdGlvbiB0d2VlbigpIHtcbiAgICB2YXIgaSA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgaWYgKGkgIT09IGkwKSB0MCA9IChpMCA9IGkpICYmIGF0dHJJbnRlcnBvbGF0ZU5TKGZ1bGxuYW1lLCBpKTtcbiAgICByZXR1cm4gdDA7XG4gIH1cbiAgdHdlZW4uX3ZhbHVlID0gdmFsdWU7XG4gIHJldHVybiB0d2Vlbjtcbn1cblxuZnVuY3Rpb24gYXR0clR3ZWVuKG5hbWUsIHZhbHVlKSB7XG4gIHZhciB0MCwgaTA7XG4gIGZ1bmN0aW9uIHR3ZWVuKCkge1xuICAgIHZhciBpID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBpZiAoaSAhPT0gaTApIHQwID0gKGkwID0gaSkgJiYgYXR0ckludGVycG9sYXRlKG5hbWUsIGkpO1xuICAgIHJldHVybiB0MDtcbiAgfVxuICB0d2Vlbi5fdmFsdWUgPSB2YWx1ZTtcbiAgcmV0dXJuIHR3ZWVuO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICB2YXIga2V5ID0gXCJhdHRyLlwiICsgbmFtZTtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSByZXR1cm4gKGtleSA9IHRoaXMudHdlZW4oa2V5KSkgJiYga2V5Ll92YWx1ZTtcbiAgaWYgKHZhbHVlID09IG51bGwpIHJldHVybiB0aGlzLnR3ZWVuKGtleSwgbnVsbCk7XG4gIGlmICh0eXBlb2YgdmFsdWUgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IEVycm9yO1xuICB2YXIgZnVsbG5hbWUgPSBuYW1lc3BhY2UobmFtZSk7XG4gIHJldHVybiB0aGlzLnR3ZWVuKGtleSwgKGZ1bGxuYW1lLmxvY2FsID8gYXR0clR3ZWVuTlMgOiBhdHRyVHdlZW4pKGZ1bGxuYW1lLCB2YWx1ZSkpO1xufVxuIiwiaW1wb3J0IHtnZXQsIGluaXR9IGZyb20gXCIuL3NjaGVkdWxlLmpzXCI7XG5cbmZ1bmN0aW9uIGRlbGF5RnVuY3Rpb24oaWQsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICBpbml0KHRoaXMsIGlkKS5kZWxheSA9ICt2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBkZWxheUNvbnN0YW50KGlkLCB2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPSArdmFsdWUsIGZ1bmN0aW9uKCkge1xuICAgIGluaXQodGhpcywgaWQpLmRlbGF5ID0gdmFsdWU7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHZhciBpZCA9IHRoaXMuX2lkO1xuXG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoXG4gICAgICA/IHRoaXMuZWFjaCgodHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgICA/IGRlbGF5RnVuY3Rpb25cbiAgICAgICAgICA6IGRlbGF5Q29uc3RhbnQpKGlkLCB2YWx1ZSkpXG4gICAgICA6IGdldCh0aGlzLm5vZGUoKSwgaWQpLmRlbGF5O1xufVxuIiwiaW1wb3J0IHtnZXQsIHNldH0gZnJvbSBcIi4vc2NoZWR1bGUuanNcIjtcblxuZnVuY3Rpb24gZHVyYXRpb25GdW5jdGlvbihpZCwgdmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHNldCh0aGlzLCBpZCkuZHVyYXRpb24gPSArdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZHVyYXRpb25Db25zdGFudChpZCwgdmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlID0gK3ZhbHVlLCBmdW5jdGlvbigpIHtcbiAgICBzZXQodGhpcywgaWQpLmR1cmF0aW9uID0gdmFsdWU7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHZhciBpZCA9IHRoaXMuX2lkO1xuXG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoXG4gICAgICA/IHRoaXMuZWFjaCgodHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgICA/IGR1cmF0aW9uRnVuY3Rpb25cbiAgICAgICAgICA6IGR1cmF0aW9uQ29uc3RhbnQpKGlkLCB2YWx1ZSkpXG4gICAgICA6IGdldCh0aGlzLm5vZGUoKSwgaWQpLmR1cmF0aW9uO1xufVxuIiwiaW1wb3J0IHtnZXQsIHNldH0gZnJvbSBcIi4vc2NoZWR1bGUuanNcIjtcblxuZnVuY3Rpb24gZWFzZUNvbnN0YW50KGlkLCB2YWx1ZSkge1xuICBpZiAodHlwZW9mIHZhbHVlICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBFcnJvcjtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHNldCh0aGlzLCBpZCkuZWFzZSA9IHZhbHVlO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZSkge1xuICB2YXIgaWQgPSB0aGlzLl9pZDtcblxuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgPyB0aGlzLmVhY2goZWFzZUNvbnN0YW50KGlkLCB2YWx1ZSkpXG4gICAgICA6IGdldCh0aGlzLm5vZGUoKSwgaWQpLmVhc2U7XG59XG4iLCJpbXBvcnQge2dldCwgc2V0LCBpbml0fSBmcm9tIFwiLi9zY2hlZHVsZS5qc1wiO1xuXG5mdW5jdGlvbiBzdGFydChuYW1lKSB7XG4gIHJldHVybiAobmFtZSArIFwiXCIpLnRyaW0oKS5zcGxpdCgvXnxcXHMrLykuZXZlcnkoZnVuY3Rpb24odCkge1xuICAgIHZhciBpID0gdC5pbmRleE9mKFwiLlwiKTtcbiAgICBpZiAoaSA+PSAwKSB0ID0gdC5zbGljZSgwLCBpKTtcbiAgICByZXR1cm4gIXQgfHwgdCA9PT0gXCJzdGFydFwiO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gb25GdW5jdGlvbihpZCwgbmFtZSwgbGlzdGVuZXIpIHtcbiAgdmFyIG9uMCwgb24xLCBzaXQgPSBzdGFydChuYW1lKSA/IGluaXQgOiBzZXQ7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc2NoZWR1bGUgPSBzaXQodGhpcywgaWQpLFxuICAgICAgICBvbiA9IHNjaGVkdWxlLm9uO1xuXG4gICAgLy8gSWYgdGhpcyBub2RlIHNoYXJlZCBhIGRpc3BhdGNoIHdpdGggdGhlIHByZXZpb3VzIG5vZGUsXG4gICAgLy8ganVzdCBhc3NpZ24gdGhlIHVwZGF0ZWQgc2hhcmVkIGRpc3BhdGNoIGFuZCB3ZeKAmXJlIGRvbmUhXG4gICAgLy8gT3RoZXJ3aXNlLCBjb3B5LW9uLXdyaXRlLlxuICAgIGlmIChvbiAhPT0gb24wKSAob24xID0gKG9uMCA9IG9uKS5jb3B5KCkpLm9uKG5hbWUsIGxpc3RlbmVyKTtcblxuICAgIHNjaGVkdWxlLm9uID0gb24xO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCBsaXN0ZW5lcikge1xuICB2YXIgaWQgPSB0aGlzLl9pZDtcblxuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA8IDJcbiAgICAgID8gZ2V0KHRoaXMubm9kZSgpLCBpZCkub24ub24obmFtZSlcbiAgICAgIDogdGhpcy5lYWNoKG9uRnVuY3Rpb24oaWQsIG5hbWUsIGxpc3RlbmVyKSk7XG59XG4iLCJpbXBvcnQge3NlbGVjdGlvbn0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuXG52YXIgU2VsZWN0aW9uID0gc2VsZWN0aW9uLnByb3RvdHlwZS5jb25zdHJ1Y3RvcjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKHRoaXMuX2dyb3VwcywgdGhpcy5fcGFyZW50cyk7XG59XG4iLCJpbXBvcnQge2ludGVycG9sYXRlVHJhbnNmb3JtQ3NzIGFzIGludGVycG9sYXRlVHJhbnNmb3JtfSBmcm9tIFwiZDMtaW50ZXJwb2xhdGVcIjtcbmltcG9ydCB7c3R5bGV9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcbmltcG9ydCB7c2V0fSBmcm9tIFwiLi9zY2hlZHVsZS5qc1wiO1xuaW1wb3J0IHt0d2VlblZhbHVlfSBmcm9tIFwiLi90d2Vlbi5qc1wiO1xuaW1wb3J0IGludGVycG9sYXRlIGZyb20gXCIuL2ludGVycG9sYXRlLmpzXCI7XG5cbmZ1bmN0aW9uIHN0eWxlTnVsbChuYW1lLCBpbnRlcnBvbGF0ZSkge1xuICB2YXIgc3RyaW5nMDAsXG4gICAgICBzdHJpbmcxMCxcbiAgICAgIGludGVycG9sYXRlMDtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzdHJpbmcwID0gc3R5bGUodGhpcywgbmFtZSksXG4gICAgICAgIHN0cmluZzEgPSAodGhpcy5zdHlsZS5yZW1vdmVQcm9wZXJ0eShuYW1lKSwgc3R5bGUodGhpcywgbmFtZSkpO1xuICAgIHJldHVybiBzdHJpbmcwID09PSBzdHJpbmcxID8gbnVsbFxuICAgICAgICA6IHN0cmluZzAgPT09IHN0cmluZzAwICYmIHN0cmluZzEgPT09IHN0cmluZzEwID8gaW50ZXJwb2xhdGUwXG4gICAgICAgIDogaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUoc3RyaW5nMDAgPSBzdHJpbmcwLCBzdHJpbmcxMCA9IHN0cmluZzEpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzdHlsZVJlbW92ZShuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnN0eWxlLnJlbW92ZVByb3BlcnR5KG5hbWUpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzdHlsZUNvbnN0YW50KG5hbWUsIGludGVycG9sYXRlLCB2YWx1ZTEpIHtcbiAgdmFyIHN0cmluZzAwLFxuICAgICAgc3RyaW5nMSA9IHZhbHVlMSArIFwiXCIsXG4gICAgICBpbnRlcnBvbGF0ZTA7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc3RyaW5nMCA9IHN0eWxlKHRoaXMsIG5hbWUpO1xuICAgIHJldHVybiBzdHJpbmcwID09PSBzdHJpbmcxID8gbnVsbFxuICAgICAgICA6IHN0cmluZzAgPT09IHN0cmluZzAwID8gaW50ZXJwb2xhdGUwXG4gICAgICAgIDogaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUoc3RyaW5nMDAgPSBzdHJpbmcwLCB2YWx1ZTEpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzdHlsZUZ1bmN0aW9uKG5hbWUsIGludGVycG9sYXRlLCB2YWx1ZSkge1xuICB2YXIgc3RyaW5nMDAsXG4gICAgICBzdHJpbmcxMCxcbiAgICAgIGludGVycG9sYXRlMDtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzdHJpbmcwID0gc3R5bGUodGhpcywgbmFtZSksXG4gICAgICAgIHZhbHVlMSA9IHZhbHVlKHRoaXMpLFxuICAgICAgICBzdHJpbmcxID0gdmFsdWUxICsgXCJcIjtcbiAgICBpZiAodmFsdWUxID09IG51bGwpIHN0cmluZzEgPSB2YWx1ZTEgPSAodGhpcy5zdHlsZS5yZW1vdmVQcm9wZXJ0eShuYW1lKSwgc3R5bGUodGhpcywgbmFtZSkpO1xuICAgIHJldHVybiBzdHJpbmcwID09PSBzdHJpbmcxID8gbnVsbFxuICAgICAgICA6IHN0cmluZzAgPT09IHN0cmluZzAwICYmIHN0cmluZzEgPT09IHN0cmluZzEwID8gaW50ZXJwb2xhdGUwXG4gICAgICAgIDogKHN0cmluZzEwID0gc3RyaW5nMSwgaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUoc3RyaW5nMDAgPSBzdHJpbmcwLCB2YWx1ZTEpKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gc3R5bGVNYXliZVJlbW92ZShpZCwgbmFtZSkge1xuICB2YXIgb24wLCBvbjEsIGxpc3RlbmVyMCwga2V5ID0gXCJzdHlsZS5cIiArIG5hbWUsIGV2ZW50ID0gXCJlbmQuXCIgKyBrZXksIHJlbW92ZTtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzY2hlZHVsZSA9IHNldCh0aGlzLCBpZCksXG4gICAgICAgIG9uID0gc2NoZWR1bGUub24sXG4gICAgICAgIGxpc3RlbmVyID0gc2NoZWR1bGUudmFsdWVba2V5XSA9PSBudWxsID8gcmVtb3ZlIHx8IChyZW1vdmUgPSBzdHlsZVJlbW92ZShuYW1lKSkgOiB1bmRlZmluZWQ7XG5cbiAgICAvLyBJZiB0aGlzIG5vZGUgc2hhcmVkIGEgZGlzcGF0Y2ggd2l0aCB0aGUgcHJldmlvdXMgbm9kZSxcbiAgICAvLyBqdXN0IGFzc2lnbiB0aGUgdXBkYXRlZCBzaGFyZWQgZGlzcGF0Y2ggYW5kIHdl4oCZcmUgZG9uZSFcbiAgICAvLyBPdGhlcndpc2UsIGNvcHktb24td3JpdGUuXG4gICAgaWYgKG9uICE9PSBvbjAgfHwgbGlzdGVuZXIwICE9PSBsaXN0ZW5lcikgKG9uMSA9IChvbjAgPSBvbikuY29weSgpKS5vbihldmVudCwgbGlzdGVuZXIwID0gbGlzdGVuZXIpO1xuXG4gICAgc2NoZWR1bGUub24gPSBvbjE7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUsIHZhbHVlLCBwcmlvcml0eSkge1xuICB2YXIgaSA9IChuYW1lICs9IFwiXCIpID09PSBcInRyYW5zZm9ybVwiID8gaW50ZXJwb2xhdGVUcmFuc2Zvcm0gOiBpbnRlcnBvbGF0ZTtcbiAgcmV0dXJuIHZhbHVlID09IG51bGwgPyB0aGlzXG4gICAgICAuc3R5bGVUd2VlbihuYW1lLCBzdHlsZU51bGwobmFtZSwgaSkpXG4gICAgICAub24oXCJlbmQuc3R5bGUuXCIgKyBuYW1lLCBzdHlsZVJlbW92ZShuYW1lKSlcbiAgICA6IHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiID8gdGhpc1xuICAgICAgLnN0eWxlVHdlZW4obmFtZSwgc3R5bGVGdW5jdGlvbihuYW1lLCBpLCB0d2VlblZhbHVlKHRoaXMsIFwic3R5bGUuXCIgKyBuYW1lLCB2YWx1ZSkpKVxuICAgICAgLmVhY2goc3R5bGVNYXliZVJlbW92ZSh0aGlzLl9pZCwgbmFtZSkpXG4gICAgOiB0aGlzXG4gICAgICAuc3R5bGVUd2VlbihuYW1lLCBzdHlsZUNvbnN0YW50KG5hbWUsIGksIHZhbHVlKSwgcHJpb3JpdHkpXG4gICAgICAub24oXCJlbmQuc3R5bGUuXCIgKyBuYW1lLCBudWxsKTtcbn1cbiIsImZ1bmN0aW9uIHN0eWxlSW50ZXJwb2xhdGUobmFtZSwgaSwgcHJpb3JpdHkpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICB0aGlzLnN0eWxlLnNldFByb3BlcnR5KG5hbWUsIGkuY2FsbCh0aGlzLCB0KSwgcHJpb3JpdHkpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzdHlsZVR3ZWVuKG5hbWUsIHZhbHVlLCBwcmlvcml0eSkge1xuICB2YXIgdCwgaTA7XG4gIGZ1bmN0aW9uIHR3ZWVuKCkge1xuICAgIHZhciBpID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBpZiAoaSAhPT0gaTApIHQgPSAoaTAgPSBpKSAmJiBzdHlsZUludGVycG9sYXRlKG5hbWUsIGksIHByaW9yaXR5KTtcbiAgICByZXR1cm4gdDtcbiAgfVxuICB0d2Vlbi5fdmFsdWUgPSB2YWx1ZTtcbiAgcmV0dXJuIHR3ZWVuO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCB2YWx1ZSwgcHJpb3JpdHkpIHtcbiAgdmFyIGtleSA9IFwic3R5bGUuXCIgKyAobmFtZSArPSBcIlwiKTtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSByZXR1cm4gKGtleSA9IHRoaXMudHdlZW4oa2V5KSkgJiYga2V5Ll92YWx1ZTtcbiAgaWYgKHZhbHVlID09IG51bGwpIHJldHVybiB0aGlzLnR3ZWVuKGtleSwgbnVsbCk7XG4gIGlmICh0eXBlb2YgdmFsdWUgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IEVycm9yO1xuICByZXR1cm4gdGhpcy50d2VlbihrZXksIHN0eWxlVHdlZW4obmFtZSwgdmFsdWUsIHByaW9yaXR5ID09IG51bGwgPyBcIlwiIDogcHJpb3JpdHkpKTtcbn1cbiIsImZ1bmN0aW9uIHRleHRJbnRlcnBvbGF0ZShpKSB7XG4gIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgdGhpcy50ZXh0Q29udGVudCA9IGkuY2FsbCh0aGlzLCB0KTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gdGV4dFR3ZWVuKHZhbHVlKSB7XG4gIHZhciB0MCwgaTA7XG4gIGZ1bmN0aW9uIHR3ZWVuKCkge1xuICAgIHZhciBpID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBpZiAoaSAhPT0gaTApIHQwID0gKGkwID0gaSkgJiYgdGV4dEludGVycG9sYXRlKGkpO1xuICAgIHJldHVybiB0MDtcbiAgfVxuICB0d2Vlbi5fdmFsdWUgPSB2YWx1ZTtcbiAgcmV0dXJuIHR3ZWVuO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZSkge1xuICB2YXIga2V5ID0gXCJ0ZXh0XCI7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMSkgcmV0dXJuIChrZXkgPSB0aGlzLnR3ZWVuKGtleSkpICYmIGtleS5fdmFsdWU7XG4gIGlmICh2YWx1ZSA9PSBudWxsKSByZXR1cm4gdGhpcy50d2VlbihrZXksIG51bGwpO1xuICBpZiAodHlwZW9mIHZhbHVlICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBFcnJvcjtcbiAgcmV0dXJuIHRoaXMudHdlZW4oa2V5LCB0ZXh0VHdlZW4odmFsdWUpKTtcbn1cbiIsImltcG9ydCB7c2VsZWN0aW9ufSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9hdHRyIGZyb20gXCIuL2F0dHIuanNcIjtcbmltcG9ydCB0cmFuc2l0aW9uX2F0dHJUd2VlbiBmcm9tIFwiLi9hdHRyVHdlZW4uanNcIjtcbmltcG9ydCB0cmFuc2l0aW9uX2RlbGF5IGZyb20gXCIuL2RlbGF5LmpzXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9kdXJhdGlvbiBmcm9tIFwiLi9kdXJhdGlvbi5qc1wiO1xuaW1wb3J0IHRyYW5zaXRpb25fZWFzZSBmcm9tIFwiLi9lYXNlLmpzXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9lYXNlVmFyeWluZyBmcm9tIFwiLi9lYXNlVmFyeWluZy5qc1wiO1xuaW1wb3J0IHRyYW5zaXRpb25fZmlsdGVyIGZyb20gXCIuL2ZpbHRlci5qc1wiO1xuaW1wb3J0IHRyYW5zaXRpb25fbWVyZ2UgZnJvbSBcIi4vbWVyZ2UuanNcIjtcbmltcG9ydCB0cmFuc2l0aW9uX29uIGZyb20gXCIuL29uLmpzXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9yZW1vdmUgZnJvbSBcIi4vcmVtb3ZlLmpzXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9zZWxlY3QgZnJvbSBcIi4vc2VsZWN0LmpzXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9zZWxlY3RBbGwgZnJvbSBcIi4vc2VsZWN0QWxsLmpzXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9zZWxlY3Rpb24gZnJvbSBcIi4vc2VsZWN0aW9uLmpzXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9zdHlsZSBmcm9tIFwiLi9zdHlsZS5qc1wiO1xuaW1wb3J0IHRyYW5zaXRpb25fc3R5bGVUd2VlbiBmcm9tIFwiLi9zdHlsZVR3ZWVuLmpzXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl90ZXh0IGZyb20gXCIuL3RleHQuanNcIjtcbmltcG9ydCB0cmFuc2l0aW9uX3RleHRUd2VlbiBmcm9tIFwiLi90ZXh0VHdlZW4uanNcIjtcbmltcG9ydCB0cmFuc2l0aW9uX3RyYW5zaXRpb24gZnJvbSBcIi4vdHJhbnNpdGlvbi5qc1wiO1xuaW1wb3J0IHRyYW5zaXRpb25fdHdlZW4gZnJvbSBcIi4vdHdlZW4uanNcIjtcbmltcG9ydCB0cmFuc2l0aW9uX2VuZCBmcm9tIFwiLi9lbmQuanNcIjtcblxudmFyIGlkID0gMDtcblxuZXhwb3J0IGZ1bmN0aW9uIFRyYW5zaXRpb24oZ3JvdXBzLCBwYXJlbnRzLCBuYW1lLCBpZCkge1xuICB0aGlzLl9ncm91cHMgPSBncm91cHM7XG4gIHRoaXMuX3BhcmVudHMgPSBwYXJlbnRzO1xuICB0aGlzLl9uYW1lID0gbmFtZTtcbiAgdGhpcy5faWQgPSBpZDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdHJhbnNpdGlvbihuYW1lKSB7XG4gIHJldHVybiBzZWxlY3Rpb24oKS50cmFuc2l0aW9uKG5hbWUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbmV3SWQoKSB7XG4gIHJldHVybiArK2lkO1xufVxuXG52YXIgc2VsZWN0aW9uX3Byb3RvdHlwZSA9IHNlbGVjdGlvbi5wcm90b3R5cGU7XG5cblRyYW5zaXRpb24ucHJvdG90eXBlID0gdHJhbnNpdGlvbi5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBUcmFuc2l0aW9uLFxuICBzZWxlY3Q6IHRyYW5zaXRpb25fc2VsZWN0LFxuICBzZWxlY3RBbGw6IHRyYW5zaXRpb25fc2VsZWN0QWxsLFxuICBmaWx0ZXI6IHRyYW5zaXRpb25fZmlsdGVyLFxuICBtZXJnZTogdHJhbnNpdGlvbl9tZXJnZSxcbiAgc2VsZWN0aW9uOiB0cmFuc2l0aW9uX3NlbGVjdGlvbixcbiAgdHJhbnNpdGlvbjogdHJhbnNpdGlvbl90cmFuc2l0aW9uLFxuICBjYWxsOiBzZWxlY3Rpb25fcHJvdG90eXBlLmNhbGwsXG4gIG5vZGVzOiBzZWxlY3Rpb25fcHJvdG90eXBlLm5vZGVzLFxuICBub2RlOiBzZWxlY3Rpb25fcHJvdG90eXBlLm5vZGUsXG4gIHNpemU6IHNlbGVjdGlvbl9wcm90b3R5cGUuc2l6ZSxcbiAgZW1wdHk6IHNlbGVjdGlvbl9wcm90b3R5cGUuZW1wdHksXG4gIGVhY2g6IHNlbGVjdGlvbl9wcm90b3R5cGUuZWFjaCxcbiAgb246IHRyYW5zaXRpb25fb24sXG4gIGF0dHI6IHRyYW5zaXRpb25fYXR0cixcbiAgYXR0clR3ZWVuOiB0cmFuc2l0aW9uX2F0dHJUd2VlbixcbiAgc3R5bGU6IHRyYW5zaXRpb25fc3R5bGUsXG4gIHN0eWxlVHdlZW46IHRyYW5zaXRpb25fc3R5bGVUd2VlbixcbiAgdGV4dDogdHJhbnNpdGlvbl90ZXh0LFxuICB0ZXh0VHdlZW46IHRyYW5zaXRpb25fdGV4dFR3ZWVuLFxuICByZW1vdmU6IHRyYW5zaXRpb25fcmVtb3ZlLFxuICB0d2VlbjogdHJhbnNpdGlvbl90d2VlbixcbiAgZGVsYXk6IHRyYW5zaXRpb25fZGVsYXksXG4gIGR1cmF0aW9uOiB0cmFuc2l0aW9uX2R1cmF0aW9uLFxuICBlYXNlOiB0cmFuc2l0aW9uX2Vhc2UsXG4gIGVhc2VWYXJ5aW5nOiB0cmFuc2l0aW9uX2Vhc2VWYXJ5aW5nLFxuICBlbmQ6IHRyYW5zaXRpb25fZW5kLFxuICBbU3ltYm9sLml0ZXJhdG9yXTogc2VsZWN0aW9uX3Byb3RvdHlwZVtTeW1ib2wuaXRlcmF0b3JdXG59O1xuIiwiaW1wb3J0IHtzZWxlY3Rvcn0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuaW1wb3J0IHtUcmFuc2l0aW9ufSBmcm9tIFwiLi9pbmRleC5qc1wiO1xuaW1wb3J0IHNjaGVkdWxlLCB7Z2V0fSBmcm9tIFwiLi9zY2hlZHVsZS5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZWxlY3QpIHtcbiAgdmFyIG5hbWUgPSB0aGlzLl9uYW1lLFxuICAgICAgaWQgPSB0aGlzLl9pZDtcblxuICBpZiAodHlwZW9mIHNlbGVjdCAhPT0gXCJmdW5jdGlvblwiKSBzZWxlY3QgPSBzZWxlY3RvcihzZWxlY3QpO1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIHN1Ymdyb3VwcyA9IG5ldyBBcnJheShtKSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgbiA9IGdyb3VwLmxlbmd0aCwgc3ViZ3JvdXAgPSBzdWJncm91cHNbal0gPSBuZXcgQXJyYXkobiksIG5vZGUsIHN1Ym5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAoKG5vZGUgPSBncm91cFtpXSkgJiYgKHN1Ym5vZGUgPSBzZWxlY3QuY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBncm91cCkpKSB7XG4gICAgICAgIGlmIChcIl9fZGF0YV9fXCIgaW4gbm9kZSkgc3Vibm9kZS5fX2RhdGFfXyA9IG5vZGUuX19kYXRhX187XG4gICAgICAgIHN1Ymdyb3VwW2ldID0gc3Vibm9kZTtcbiAgICAgICAgc2NoZWR1bGUoc3ViZ3JvdXBbaV0sIG5hbWUsIGlkLCBpLCBzdWJncm91cCwgZ2V0KG5vZGUsIGlkKSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ldyBUcmFuc2l0aW9uKHN1Ymdyb3VwcywgdGhpcy5fcGFyZW50cywgbmFtZSwgaWQpO1xufVxuIiwiaW1wb3J0IHtzZWxlY3RvckFsbH0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuaW1wb3J0IHtUcmFuc2l0aW9ufSBmcm9tIFwiLi9pbmRleC5qc1wiO1xuaW1wb3J0IHNjaGVkdWxlLCB7Z2V0fSBmcm9tIFwiLi9zY2hlZHVsZS5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZWxlY3QpIHtcbiAgdmFyIG5hbWUgPSB0aGlzLl9uYW1lLFxuICAgICAgaWQgPSB0aGlzLl9pZDtcblxuICBpZiAodHlwZW9mIHNlbGVjdCAhPT0gXCJmdW5jdGlvblwiKSBzZWxlY3QgPSBzZWxlY3RvckFsbChzZWxlY3QpO1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIHN1Ymdyb3VwcyA9IFtdLCBwYXJlbnRzID0gW10sIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIG4gPSBncm91cC5sZW5ndGgsIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICAgIGZvciAodmFyIGNoaWxkcmVuID0gc2VsZWN0LmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgZ3JvdXApLCBjaGlsZCwgaW5oZXJpdCA9IGdldChub2RlLCBpZCksIGsgPSAwLCBsID0gY2hpbGRyZW4ubGVuZ3RoOyBrIDwgbDsgKytrKSB7XG4gICAgICAgICAgaWYgKGNoaWxkID0gY2hpbGRyZW5ba10pIHtcbiAgICAgICAgICAgIHNjaGVkdWxlKGNoaWxkLCBuYW1lLCBpZCwgaywgY2hpbGRyZW4sIGluaGVyaXQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBzdWJncm91cHMucHVzaChjaGlsZHJlbik7XG4gICAgICAgIHBhcmVudHMucHVzaChub2RlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3IFRyYW5zaXRpb24oc3ViZ3JvdXBzLCBwYXJlbnRzLCBuYW1lLCBpZCk7XG59XG4iLCJpbXBvcnQge21hdGNoZXJ9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcbmltcG9ydCB7VHJhbnNpdGlvbn0gZnJvbSBcIi4vaW5kZXguanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obWF0Y2gpIHtcbiAgaWYgKHR5cGVvZiBtYXRjaCAhPT0gXCJmdW5jdGlvblwiKSBtYXRjaCA9IG1hdGNoZXIobWF0Y2gpO1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIHN1Ymdyb3VwcyA9IG5ldyBBcnJheShtKSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgbiA9IGdyb3VwLmxlbmd0aCwgc3ViZ3JvdXAgPSBzdWJncm91cHNbal0gPSBbXSwgbm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmICgobm9kZSA9IGdyb3VwW2ldKSAmJiBtYXRjaC5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGdyb3VwKSkge1xuICAgICAgICBzdWJncm91cC5wdXNoKG5vZGUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXcgVHJhbnNpdGlvbihzdWJncm91cHMsIHRoaXMuX3BhcmVudHMsIHRoaXMuX25hbWUsIHRoaXMuX2lkKTtcbn1cbiIsImltcG9ydCB7VHJhbnNpdGlvbn0gZnJvbSBcIi4vaW5kZXguanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odHJhbnNpdGlvbikge1xuICBpZiAodHJhbnNpdGlvbi5faWQgIT09IHRoaXMuX2lkKSB0aHJvdyBuZXcgRXJyb3I7XG5cbiAgZm9yICh2YXIgZ3JvdXBzMCA9IHRoaXMuX2dyb3VwcywgZ3JvdXBzMSA9IHRyYW5zaXRpb24uX2dyb3VwcywgbTAgPSBncm91cHMwLmxlbmd0aCwgbTEgPSBncm91cHMxLmxlbmd0aCwgbSA9IE1hdGgubWluKG0wLCBtMSksIG1lcmdlcyA9IG5ldyBBcnJheShtMCksIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAwID0gZ3JvdXBzMFtqXSwgZ3JvdXAxID0gZ3JvdXBzMVtqXSwgbiA9IGdyb3VwMC5sZW5ndGgsIG1lcmdlID0gbWVyZ2VzW2pdID0gbmV3IEFycmF5KG4pLCBub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKG5vZGUgPSBncm91cDBbaV0gfHwgZ3JvdXAxW2ldKSB7XG4gICAgICAgIG1lcmdlW2ldID0gbm9kZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmb3IgKDsgaiA8IG0wOyArK2opIHtcbiAgICBtZXJnZXNbal0gPSBncm91cHMwW2pdO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBUcmFuc2l0aW9uKG1lcmdlcywgdGhpcy5fcGFyZW50cywgdGhpcy5fbmFtZSwgdGhpcy5faWQpO1xufVxuIiwiaW1wb3J0IHtUcmFuc2l0aW9uLCBuZXdJZH0gZnJvbSBcIi4vaW5kZXguanNcIjtcbmltcG9ydCBzY2hlZHVsZSwge2dldH0gZnJvbSBcIi4vc2NoZWR1bGUuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBuYW1lID0gdGhpcy5fbmFtZSxcbiAgICAgIGlkMCA9IHRoaXMuX2lkLFxuICAgICAgaWQxID0gbmV3SWQoKTtcblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIG0gPSBncm91cHMubGVuZ3RoLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBuID0gZ3JvdXAubGVuZ3RoLCBub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuICAgICAgICB2YXIgaW5oZXJpdCA9IGdldChub2RlLCBpZDApO1xuICAgICAgICBzY2hlZHVsZShub2RlLCBuYW1lLCBpZDEsIGksIGdyb3VwLCB7XG4gICAgICAgICAgdGltZTogaW5oZXJpdC50aW1lICsgaW5oZXJpdC5kZWxheSArIGluaGVyaXQuZHVyYXRpb24sXG4gICAgICAgICAgZGVsYXk6IDAsXG4gICAgICAgICAgZHVyYXRpb246IGluaGVyaXQuZHVyYXRpb24sXG4gICAgICAgICAgZWFzZTogaW5oZXJpdC5lYXNlXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXcgVHJhbnNpdGlvbihncm91cHMsIHRoaXMuX3BhcmVudHMsIG5hbWUsIGlkMSk7XG59XG4iLCJpbXBvcnQge3R3ZWVuVmFsdWV9IGZyb20gXCIuL3R3ZWVuLmpzXCI7XG5cbmZ1bmN0aW9uIHRleHRDb25zdGFudCh2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy50ZXh0Q29udGVudCA9IHZhbHVlO1xuICB9O1xufVxuXG5mdW5jdGlvbiB0ZXh0RnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciB2YWx1ZTEgPSB2YWx1ZSh0aGlzKTtcbiAgICB0aGlzLnRleHRDb250ZW50ID0gdmFsdWUxID09IG51bGwgPyBcIlwiIDogdmFsdWUxO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gdGhpcy50d2VlbihcInRleHRcIiwgdHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgID8gdGV4dEZ1bmN0aW9uKHR3ZWVuVmFsdWUodGhpcywgXCJ0ZXh0XCIsIHZhbHVlKSlcbiAgICAgIDogdGV4dENvbnN0YW50KHZhbHVlID09IG51bGwgPyBcIlwiIDogdmFsdWUgKyBcIlwiKSk7XG59XG4iLCJmdW5jdGlvbiByZW1vdmVGdW5jdGlvbihpZCkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHBhcmVudCA9IHRoaXMucGFyZW50Tm9kZTtcbiAgICBmb3IgKHZhciBpIGluIHRoaXMuX190cmFuc2l0aW9uKSBpZiAoK2kgIT09IGlkKSByZXR1cm47XG4gICAgaWYgKHBhcmVudCkgcGFyZW50LnJlbW92ZUNoaWxkKHRoaXMpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMub24oXCJlbmQucmVtb3ZlXCIsIHJlbW92ZUZ1bmN0aW9uKHRoaXMuX2lkKSk7XG59XG4iLCJpbXBvcnQge3NldH0gZnJvbSBcIi4vc2NoZWR1bGUuanNcIjtcblxuZnVuY3Rpb24gZWFzZVZhcnlpbmcoaWQsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdiA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgaWYgKHR5cGVvZiB2ICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBFcnJvcjtcbiAgICBzZXQodGhpcywgaWQpLmVhc2UgPSB2O1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZSkge1xuICBpZiAodHlwZW9mIHZhbHVlICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBFcnJvcjtcbiAgcmV0dXJuIHRoaXMuZWFjaChlYXNlVmFyeWluZyh0aGlzLl9pZCwgdmFsdWUpKTtcbn1cbiIsImltcG9ydCB7c2V0fSBmcm9tIFwiLi9zY2hlZHVsZS5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIG9uMCwgb24xLCB0aGF0ID0gdGhpcywgaWQgPSB0aGF0Ll9pZCwgc2l6ZSA9IHRoYXQuc2l6ZSgpO1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgdmFyIGNhbmNlbCA9IHt2YWx1ZTogcmVqZWN0fSxcbiAgICAgICAgZW5kID0ge3ZhbHVlOiBmdW5jdGlvbigpIHsgaWYgKC0tc2l6ZSA9PT0gMCkgcmVzb2x2ZSgpOyB9fTtcblxuICAgIHRoYXQuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgIHZhciBzY2hlZHVsZSA9IHNldCh0aGlzLCBpZCksXG4gICAgICAgICAgb24gPSBzY2hlZHVsZS5vbjtcblxuICAgICAgLy8gSWYgdGhpcyBub2RlIHNoYXJlZCBhIGRpc3BhdGNoIHdpdGggdGhlIHByZXZpb3VzIG5vZGUsXG4gICAgICAvLyBqdXN0IGFzc2lnbiB0aGUgdXBkYXRlZCBzaGFyZWQgZGlzcGF0Y2ggYW5kIHdl4oCZcmUgZG9uZSFcbiAgICAgIC8vIE90aGVyd2lzZSwgY29weS1vbi13cml0ZS5cbiAgICAgIGlmIChvbiAhPT0gb24wKSB7XG4gICAgICAgIG9uMSA9IChvbjAgPSBvbikuY29weSgpO1xuICAgICAgICBvbjEuXy5jYW5jZWwucHVzaChjYW5jZWwpO1xuICAgICAgICBvbjEuXy5pbnRlcnJ1cHQucHVzaChjYW5jZWwpO1xuICAgICAgICBvbjEuXy5lbmQucHVzaChlbmQpO1xuICAgICAgfVxuXG4gICAgICBzY2hlZHVsZS5vbiA9IG9uMTtcbiAgICB9KTtcblxuICAgIC8vIFRoZSBzZWxlY3Rpb24gd2FzIGVtcHR5LCByZXNvbHZlIGVuZCBpbW1lZGlhdGVseVxuICAgIGlmIChzaXplID09PSAwKSByZXNvbHZlKCk7XG4gIH0pO1xufVxuIiwiaW1wb3J0IHtUcmFuc2l0aW9uLCBuZXdJZH0gZnJvbSBcIi4uL3RyYW5zaXRpb24vaW5kZXguanNcIjtcbmltcG9ydCBzY2hlZHVsZSBmcm9tIFwiLi4vdHJhbnNpdGlvbi9zY2hlZHVsZS5qc1wiO1xuaW1wb3J0IHtlYXNlQ3ViaWNJbk91dH0gZnJvbSBcImQzLWVhc2VcIjtcbmltcG9ydCB7bm93fSBmcm9tIFwiZDMtdGltZXJcIjtcblxudmFyIGRlZmF1bHRUaW1pbmcgPSB7XG4gIHRpbWU6IG51bGwsIC8vIFNldCBvbiB1c2UuXG4gIGRlbGF5OiAwLFxuICBkdXJhdGlvbjogMjUwLFxuICBlYXNlOiBlYXNlQ3ViaWNJbk91dFxufTtcblxuZnVuY3Rpb24gaW5oZXJpdChub2RlLCBpZCkge1xuICB2YXIgdGltaW5nO1xuICB3aGlsZSAoISh0aW1pbmcgPSBub2RlLl9fdHJhbnNpdGlvbikgfHwgISh0aW1pbmcgPSB0aW1pbmdbaWRdKSkge1xuICAgIGlmICghKG5vZGUgPSBub2RlLnBhcmVudE5vZGUpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYHRyYW5zaXRpb24gJHtpZH0gbm90IGZvdW5kYCk7XG4gICAgfVxuICB9XG4gIHJldHVybiB0aW1pbmc7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUpIHtcbiAgdmFyIGlkLFxuICAgICAgdGltaW5nO1xuXG4gIGlmIChuYW1lIGluc3RhbmNlb2YgVHJhbnNpdGlvbikge1xuICAgIGlkID0gbmFtZS5faWQsIG5hbWUgPSBuYW1lLl9uYW1lO1xuICB9IGVsc2Uge1xuICAgIGlkID0gbmV3SWQoKSwgKHRpbWluZyA9IGRlZmF1bHRUaW1pbmcpLnRpbWUgPSBub3coKSwgbmFtZSA9IG5hbWUgPT0gbnVsbCA/IG51bGwgOiBuYW1lICsgXCJcIjtcbiAgfVxuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIG4gPSBncm91cC5sZW5ndGgsIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICAgIHNjaGVkdWxlKG5vZGUsIG5hbWUsIGlkLCBpLCBncm91cCwgdGltaW5nIHx8IGluaGVyaXQobm9kZSwgaWQpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3IFRyYW5zaXRpb24oZ3JvdXBzLCB0aGlzLl9wYXJlbnRzLCBuYW1lLCBpZCk7XG59XG4iLCJleHBvcnQgZnVuY3Rpb24gY3ViaWNJbih0KSB7XG4gIHJldHVybiB0ICogdCAqIHQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjdWJpY091dCh0KSB7XG4gIHJldHVybiAtLXQgKiB0ICogdCArIDE7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjdWJpY0luT3V0KHQpIHtcbiAgcmV0dXJuICgodCAqPSAyKSA8PSAxID8gdCAqIHQgKiB0IDogKHQgLT0gMikgKiB0ICogdCArIDIpIC8gMjtcbn1cbiIsImltcG9ydCB7c2VsZWN0aW9ufSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2ludGVycnVwdCBmcm9tIFwiLi9pbnRlcnJ1cHQuanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fdHJhbnNpdGlvbiBmcm9tIFwiLi90cmFuc2l0aW9uLmpzXCI7XG5cbnNlbGVjdGlvbi5wcm90b3R5cGUuaW50ZXJydXB0ID0gc2VsZWN0aW9uX2ludGVycnVwdDtcbnNlbGVjdGlvbi5wcm90b3R5cGUudHJhbnNpdGlvbiA9IHNlbGVjdGlvbl90cmFuc2l0aW9uO1xuIiwiaW1wb3J0IGludGVycnVwdCBmcm9tIFwiLi4vaW50ZXJydXB0LmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUpIHtcbiAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcbiAgICBpbnRlcnJ1cHQodGhpcywgbmFtZSk7XG4gIH0pO1xufVxuIiwiaW1wb3J0IHtkaXNwYXRjaH0gZnJvbSBcImQzLWRpc3BhdGNoXCI7XG5pbXBvcnQge2RyYWdEaXNhYmxlLCBkcmFnRW5hYmxlfSBmcm9tIFwiZDMtZHJhZ1wiO1xuaW1wb3J0IHtpbnRlcnBvbGF0ZX0gZnJvbSBcImQzLWludGVycG9sYXRlXCI7XG5pbXBvcnQge3BvaW50ZXIsIHNlbGVjdH0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuaW1wb3J0IHtpbnRlcnJ1cHR9IGZyb20gXCJkMy10cmFuc2l0aW9uXCI7XG5pbXBvcnQgY29uc3RhbnQgZnJvbSBcIi4vY29uc3RhbnQuanNcIjtcbmltcG9ydCBCcnVzaEV2ZW50IGZyb20gXCIuL2V2ZW50LmpzXCI7XG5pbXBvcnQgbm9ldmVudCwge25vcHJvcGFnYXRpb259IGZyb20gXCIuL25vZXZlbnQuanNcIjtcblxudmFyIE1PREVfRFJBRyA9IHtuYW1lOiBcImRyYWdcIn0sXG4gICAgTU9ERV9TUEFDRSA9IHtuYW1lOiBcInNwYWNlXCJ9LFxuICAgIE1PREVfSEFORExFID0ge25hbWU6IFwiaGFuZGxlXCJ9LFxuICAgIE1PREVfQ0VOVEVSID0ge25hbWU6IFwiY2VudGVyXCJ9O1xuXG5jb25zdCB7YWJzLCBtYXgsIG1pbn0gPSBNYXRoO1xuXG5mdW5jdGlvbiBudW1iZXIxKGUpIHtcbiAgcmV0dXJuIFsrZVswXSwgK2VbMV1dO1xufVxuXG5mdW5jdGlvbiBudW1iZXIyKGUpIHtcbiAgcmV0dXJuIFtudW1iZXIxKGVbMF0pLCBudW1iZXIxKGVbMV0pXTtcbn1cblxudmFyIFggPSB7XG4gIG5hbWU6IFwieFwiLFxuICBoYW5kbGVzOiBbXCJ3XCIsIFwiZVwiXS5tYXAodHlwZSksXG4gIGlucHV0OiBmdW5jdGlvbih4LCBlKSB7IHJldHVybiB4ID09IG51bGwgPyBudWxsIDogW1sreFswXSwgZVswXVsxXV0sIFsreFsxXSwgZVsxXVsxXV1dOyB9LFxuICBvdXRwdXQ6IGZ1bmN0aW9uKHh5KSB7IHJldHVybiB4eSAmJiBbeHlbMF1bMF0sIHh5WzFdWzBdXTsgfVxufTtcblxudmFyIFkgPSB7XG4gIG5hbWU6IFwieVwiLFxuICBoYW5kbGVzOiBbXCJuXCIsIFwic1wiXS5tYXAodHlwZSksXG4gIGlucHV0OiBmdW5jdGlvbih5LCBlKSB7IHJldHVybiB5ID09IG51bGwgPyBudWxsIDogW1tlWzBdWzBdLCAreVswXV0sIFtlWzFdWzBdLCAreVsxXV1dOyB9LFxuICBvdXRwdXQ6IGZ1bmN0aW9uKHh5KSB7IHJldHVybiB4eSAmJiBbeHlbMF1bMV0sIHh5WzFdWzFdXTsgfVxufTtcblxudmFyIFhZID0ge1xuICBuYW1lOiBcInh5XCIsXG4gIGhhbmRsZXM6IFtcIm5cIiwgXCJ3XCIsIFwiZVwiLCBcInNcIiwgXCJud1wiLCBcIm5lXCIsIFwic3dcIiwgXCJzZVwiXS5tYXAodHlwZSksXG4gIGlucHV0OiBmdW5jdGlvbih4eSkgeyByZXR1cm4geHkgPT0gbnVsbCA/IG51bGwgOiBudW1iZXIyKHh5KTsgfSxcbiAgb3V0cHV0OiBmdW5jdGlvbih4eSkgeyByZXR1cm4geHk7IH1cbn07XG5cbnZhciBjdXJzb3JzID0ge1xuICBvdmVybGF5OiBcImNyb3NzaGFpclwiLFxuICBzZWxlY3Rpb246IFwibW92ZVwiLFxuICBuOiBcIm5zLXJlc2l6ZVwiLFxuICBlOiBcImV3LXJlc2l6ZVwiLFxuICBzOiBcIm5zLXJlc2l6ZVwiLFxuICB3OiBcImV3LXJlc2l6ZVwiLFxuICBudzogXCJud3NlLXJlc2l6ZVwiLFxuICBuZTogXCJuZXN3LXJlc2l6ZVwiLFxuICBzZTogXCJud3NlLXJlc2l6ZVwiLFxuICBzdzogXCJuZXN3LXJlc2l6ZVwiXG59O1xuXG52YXIgZmxpcFggPSB7XG4gIGU6IFwid1wiLFxuICB3OiBcImVcIixcbiAgbnc6IFwibmVcIixcbiAgbmU6IFwibndcIixcbiAgc2U6IFwic3dcIixcbiAgc3c6IFwic2VcIlxufTtcblxudmFyIGZsaXBZID0ge1xuICBuOiBcInNcIixcbiAgczogXCJuXCIsXG4gIG53OiBcInN3XCIsXG4gIG5lOiBcInNlXCIsXG4gIHNlOiBcIm5lXCIsXG4gIHN3OiBcIm53XCJcbn07XG5cbnZhciBzaWduc1ggPSB7XG4gIG92ZXJsYXk6ICsxLFxuICBzZWxlY3Rpb246ICsxLFxuICBuOiBudWxsLFxuICBlOiArMSxcbiAgczogbnVsbCxcbiAgdzogLTEsXG4gIG53OiAtMSxcbiAgbmU6ICsxLFxuICBzZTogKzEsXG4gIHN3OiAtMVxufTtcblxudmFyIHNpZ25zWSA9IHtcbiAgb3ZlcmxheTogKzEsXG4gIHNlbGVjdGlvbjogKzEsXG4gIG46IC0xLFxuICBlOiBudWxsLFxuICBzOiArMSxcbiAgdzogbnVsbCxcbiAgbnc6IC0xLFxuICBuZTogLTEsXG4gIHNlOiArMSxcbiAgc3c6ICsxXG59O1xuXG5mdW5jdGlvbiB0eXBlKHQpIHtcbiAgcmV0dXJuIHt0eXBlOiB0fTtcbn1cblxuLy8gSWdub3JlIHJpZ2h0LWNsaWNrLCBzaW5jZSB0aGF0IHNob3VsZCBvcGVuIHRoZSBjb250ZXh0IG1lbnUuXG5mdW5jdGlvbiBkZWZhdWx0RmlsdGVyKGV2ZW50KSB7XG4gIHJldHVybiAhZXZlbnQuY3RybEtleSAmJiAhZXZlbnQuYnV0dG9uO1xufVxuXG5mdW5jdGlvbiBkZWZhdWx0RXh0ZW50KCkge1xuICB2YXIgc3ZnID0gdGhpcy5vd25lclNWR0VsZW1lbnQgfHwgdGhpcztcbiAgaWYgKHN2Zy5oYXNBdHRyaWJ1dGUoXCJ2aWV3Qm94XCIpKSB7XG4gICAgc3ZnID0gc3ZnLnZpZXdCb3guYmFzZVZhbDtcbiAgICByZXR1cm4gW1tzdmcueCwgc3ZnLnldLCBbc3ZnLnggKyBzdmcud2lkdGgsIHN2Zy55ICsgc3ZnLmhlaWdodF1dO1xuICB9XG4gIHJldHVybiBbWzAsIDBdLCBbc3ZnLndpZHRoLmJhc2VWYWwudmFsdWUsIHN2Zy5oZWlnaHQuYmFzZVZhbC52YWx1ZV1dO1xufVxuXG5mdW5jdGlvbiBkZWZhdWx0VG91Y2hhYmxlKCkge1xuICByZXR1cm4gbmF2aWdhdG9yLm1heFRvdWNoUG9pbnRzIHx8IChcIm9udG91Y2hzdGFydFwiIGluIHRoaXMpO1xufVxuXG4vLyBMaWtlIGQzLmxvY2FsLCBidXQgd2l0aCB0aGUgbmFtZSDigJxfX2JydXNo4oCdIHJhdGhlciB0aGFuIGF1dG8tZ2VuZXJhdGVkLlxuZnVuY3Rpb24gbG9jYWwobm9kZSkge1xuICB3aGlsZSAoIW5vZGUuX19icnVzaCkgaWYgKCEobm9kZSA9IG5vZGUucGFyZW50Tm9kZSkpIHJldHVybjtcbiAgcmV0dXJuIG5vZGUuX19icnVzaDtcbn1cblxuZnVuY3Rpb24gZW1wdHkoZXh0ZW50KSB7XG4gIHJldHVybiBleHRlbnRbMF1bMF0gPT09IGV4dGVudFsxXVswXVxuICAgICAgfHwgZXh0ZW50WzBdWzFdID09PSBleHRlbnRbMV1bMV07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBicnVzaFNlbGVjdGlvbihub2RlKSB7XG4gIHZhciBzdGF0ZSA9IG5vZGUuX19icnVzaDtcbiAgcmV0dXJuIHN0YXRlID8gc3RhdGUuZGltLm91dHB1dChzdGF0ZS5zZWxlY3Rpb24pIDogbnVsbDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGJydXNoWCgpIHtcbiAgcmV0dXJuIGJydXNoKFgpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYnJ1c2hZKCkge1xuICByZXR1cm4gYnJ1c2goWSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gYnJ1c2goWFkpO1xufVxuXG5mdW5jdGlvbiBicnVzaChkaW0pIHtcbiAgdmFyIGV4dGVudCA9IGRlZmF1bHRFeHRlbnQsXG4gICAgICBmaWx0ZXIgPSBkZWZhdWx0RmlsdGVyLFxuICAgICAgdG91Y2hhYmxlID0gZGVmYXVsdFRvdWNoYWJsZSxcbiAgICAgIGtleXMgPSB0cnVlLFxuICAgICAgbGlzdGVuZXJzID0gZGlzcGF0Y2goXCJzdGFydFwiLCBcImJydXNoXCIsIFwiZW5kXCIpLFxuICAgICAgaGFuZGxlU2l6ZSA9IDYsXG4gICAgICB0b3VjaGVuZGluZztcblxuICBmdW5jdGlvbiBicnVzaChncm91cCkge1xuICAgIHZhciBvdmVybGF5ID0gZ3JvdXBcbiAgICAgICAgLnByb3BlcnR5KFwiX19icnVzaFwiLCBpbml0aWFsaXplKVxuICAgICAgLnNlbGVjdEFsbChcIi5vdmVybGF5XCIpXG4gICAgICAuZGF0YShbdHlwZShcIm92ZXJsYXlcIildKTtcblxuICAgIG92ZXJsYXkuZW50ZXIoKS5hcHBlbmQoXCJyZWN0XCIpXG4gICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJvdmVybGF5XCIpXG4gICAgICAgIC5hdHRyKFwicG9pbnRlci1ldmVudHNcIiwgXCJhbGxcIilcbiAgICAgICAgLmF0dHIoXCJjdXJzb3JcIiwgY3Vyc29ycy5vdmVybGF5KVxuICAgICAgLm1lcmdlKG92ZXJsYXkpXG4gICAgICAgIC5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciBleHRlbnQgPSBsb2NhbCh0aGlzKS5leHRlbnQ7XG4gICAgICAgICAgc2VsZWN0KHRoaXMpXG4gICAgICAgICAgICAgIC5hdHRyKFwieFwiLCBleHRlbnRbMF1bMF0pXG4gICAgICAgICAgICAgIC5hdHRyKFwieVwiLCBleHRlbnRbMF1bMV0pXG4gICAgICAgICAgICAgIC5hdHRyKFwid2lkdGhcIiwgZXh0ZW50WzFdWzBdIC0gZXh0ZW50WzBdWzBdKVxuICAgICAgICAgICAgICAuYXR0cihcImhlaWdodFwiLCBleHRlbnRbMV1bMV0gLSBleHRlbnRbMF1bMV0pO1xuICAgICAgICB9KTtcblxuICAgIGdyb3VwLnNlbGVjdEFsbChcIi5zZWxlY3Rpb25cIilcbiAgICAgIC5kYXRhKFt0eXBlKFwic2VsZWN0aW9uXCIpXSlcbiAgICAgIC5lbnRlcigpLmFwcGVuZChcInJlY3RcIilcbiAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcInNlbGVjdGlvblwiKVxuICAgICAgICAuYXR0cihcImN1cnNvclwiLCBjdXJzb3JzLnNlbGVjdGlvbilcbiAgICAgICAgLmF0dHIoXCJmaWxsXCIsIFwiIzc3N1wiKVxuICAgICAgICAuYXR0cihcImZpbGwtb3BhY2l0eVwiLCAwLjMpXG4gICAgICAgIC5hdHRyKFwic3Ryb2tlXCIsIFwiI2ZmZlwiKVxuICAgICAgICAuYXR0cihcInNoYXBlLXJlbmRlcmluZ1wiLCBcImNyaXNwRWRnZXNcIik7XG5cbiAgICB2YXIgaGFuZGxlID0gZ3JvdXAuc2VsZWN0QWxsKFwiLmhhbmRsZVwiKVxuICAgICAgLmRhdGEoZGltLmhhbmRsZXMsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQudHlwZTsgfSk7XG5cbiAgICBoYW5kbGUuZXhpdCgpLnJlbW92ZSgpO1xuXG4gICAgaGFuZGxlLmVudGVyKCkuYXBwZW5kKFwicmVjdFwiKVxuICAgICAgICAuYXR0cihcImNsYXNzXCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIFwiaGFuZGxlIGhhbmRsZS0tXCIgKyBkLnR5cGU7IH0pXG4gICAgICAgIC5hdHRyKFwiY3Vyc29yXCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGN1cnNvcnNbZC50eXBlXTsgfSk7XG5cbiAgICBncm91cFxuICAgICAgICAuZWFjaChyZWRyYXcpXG4gICAgICAgIC5hdHRyKFwiZmlsbFwiLCBcIm5vbmVcIilcbiAgICAgICAgLmF0dHIoXCJwb2ludGVyLWV2ZW50c1wiLCBcImFsbFwiKVxuICAgICAgICAub24oXCJtb3VzZWRvd24uYnJ1c2hcIiwgc3RhcnRlZClcbiAgICAgIC5maWx0ZXIodG91Y2hhYmxlKVxuICAgICAgICAub24oXCJ0b3VjaHN0YXJ0LmJydXNoXCIsIHN0YXJ0ZWQpXG4gICAgICAgIC5vbihcInRvdWNobW92ZS5icnVzaFwiLCB0b3VjaG1vdmVkKVxuICAgICAgICAub24oXCJ0b3VjaGVuZC5icnVzaCB0b3VjaGNhbmNlbC5icnVzaFwiLCB0b3VjaGVuZGVkKVxuICAgICAgICAuc3R5bGUoXCJ0b3VjaC1hY3Rpb25cIiwgXCJub25lXCIpXG4gICAgICAgIC5zdHlsZShcIi13ZWJraXQtdGFwLWhpZ2hsaWdodC1jb2xvclwiLCBcInJnYmEoMCwwLDAsMClcIik7XG4gIH1cblxuICBicnVzaC5tb3ZlID0gZnVuY3Rpb24oZ3JvdXAsIHNlbGVjdGlvbikge1xuICAgIGlmIChncm91cC50d2Vlbikge1xuICAgICAgZ3JvdXBcbiAgICAgICAgICAub24oXCJzdGFydC5icnVzaFwiLCBmdW5jdGlvbihldmVudCkgeyBlbWl0dGVyKHRoaXMsIGFyZ3VtZW50cykuYmVmb3Jlc3RhcnQoKS5zdGFydChldmVudCk7IH0pXG4gICAgICAgICAgLm9uKFwiaW50ZXJydXB0LmJydXNoIGVuZC5icnVzaFwiLCBmdW5jdGlvbihldmVudCkgeyBlbWl0dGVyKHRoaXMsIGFyZ3VtZW50cykuZW5kKGV2ZW50KTsgfSlcbiAgICAgICAgICAudHdlZW4oXCJicnVzaFwiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcyxcbiAgICAgICAgICAgICAgICBzdGF0ZSA9IHRoYXQuX19icnVzaCxcbiAgICAgICAgICAgICAgICBlbWl0ID0gZW1pdHRlcih0aGF0LCBhcmd1bWVudHMpLFxuICAgICAgICAgICAgICAgIHNlbGVjdGlvbjAgPSBzdGF0ZS5zZWxlY3Rpb24sXG4gICAgICAgICAgICAgICAgc2VsZWN0aW9uMSA9IGRpbS5pbnB1dCh0eXBlb2Ygc2VsZWN0aW9uID09PSBcImZ1bmN0aW9uXCIgPyBzZWxlY3Rpb24uYXBwbHkodGhpcywgYXJndW1lbnRzKSA6IHNlbGVjdGlvbiwgc3RhdGUuZXh0ZW50KSxcbiAgICAgICAgICAgICAgICBpID0gaW50ZXJwb2xhdGUoc2VsZWN0aW9uMCwgc2VsZWN0aW9uMSk7XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIHR3ZWVuKHQpIHtcbiAgICAgICAgICAgICAgc3RhdGUuc2VsZWN0aW9uID0gdCA9PT0gMSAmJiBzZWxlY3Rpb24xID09PSBudWxsID8gbnVsbCA6IGkodCk7XG4gICAgICAgICAgICAgIHJlZHJhdy5jYWxsKHRoYXQpO1xuICAgICAgICAgICAgICBlbWl0LmJydXNoKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBzZWxlY3Rpb24wICE9PSBudWxsICYmIHNlbGVjdGlvbjEgIT09IG51bGwgPyB0d2VlbiA6IHR3ZWVuKDEpO1xuICAgICAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBncm91cFxuICAgICAgICAgIC5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzLFxuICAgICAgICAgICAgICAgIGFyZ3MgPSBhcmd1bWVudHMsXG4gICAgICAgICAgICAgICAgc3RhdGUgPSB0aGF0Ll9fYnJ1c2gsXG4gICAgICAgICAgICAgICAgc2VsZWN0aW9uMSA9IGRpbS5pbnB1dCh0eXBlb2Ygc2VsZWN0aW9uID09PSBcImZ1bmN0aW9uXCIgPyBzZWxlY3Rpb24uYXBwbHkodGhhdCwgYXJncykgOiBzZWxlY3Rpb24sIHN0YXRlLmV4dGVudCksXG4gICAgICAgICAgICAgICAgZW1pdCA9IGVtaXR0ZXIodGhhdCwgYXJncykuYmVmb3Jlc3RhcnQoKTtcblxuICAgICAgICAgICAgaW50ZXJydXB0KHRoYXQpO1xuICAgICAgICAgICAgc3RhdGUuc2VsZWN0aW9uID0gc2VsZWN0aW9uMSA9PT0gbnVsbCA/IG51bGwgOiBzZWxlY3Rpb24xO1xuICAgICAgICAgICAgcmVkcmF3LmNhbGwodGhhdCk7XG4gICAgICAgICAgICBlbWl0LnN0YXJ0KCkuYnJ1c2goKS5lbmQoKTtcbiAgICAgICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgYnJ1c2guY2xlYXIgPSBmdW5jdGlvbihncm91cCkge1xuICAgIGJydXNoLm1vdmUoZ3JvdXAsIG51bGwpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHJlZHJhdygpIHtcbiAgICB2YXIgZ3JvdXAgPSBzZWxlY3QodGhpcyksXG4gICAgICAgIHNlbGVjdGlvbiA9IGxvY2FsKHRoaXMpLnNlbGVjdGlvbjtcblxuICAgIGlmIChzZWxlY3Rpb24pIHtcbiAgICAgIGdyb3VwLnNlbGVjdEFsbChcIi5zZWxlY3Rpb25cIilcbiAgICAgICAgICAuc3R5bGUoXCJkaXNwbGF5XCIsIG51bGwpXG4gICAgICAgICAgLmF0dHIoXCJ4XCIsIHNlbGVjdGlvblswXVswXSlcbiAgICAgICAgICAuYXR0cihcInlcIiwgc2VsZWN0aW9uWzBdWzFdKVxuICAgICAgICAgIC5hdHRyKFwid2lkdGhcIiwgc2VsZWN0aW9uWzFdWzBdIC0gc2VsZWN0aW9uWzBdWzBdKVxuICAgICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIHNlbGVjdGlvblsxXVsxXSAtIHNlbGVjdGlvblswXVsxXSk7XG5cbiAgICAgIGdyb3VwLnNlbGVjdEFsbChcIi5oYW5kbGVcIilcbiAgICAgICAgICAuc3R5bGUoXCJkaXNwbGF5XCIsIG51bGwpXG4gICAgICAgICAgLmF0dHIoXCJ4XCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQudHlwZVtkLnR5cGUubGVuZ3RoIC0gMV0gPT09IFwiZVwiID8gc2VsZWN0aW9uWzFdWzBdIC0gaGFuZGxlU2l6ZSAvIDIgOiBzZWxlY3Rpb25bMF1bMF0gLSBoYW5kbGVTaXplIC8gMjsgfSlcbiAgICAgICAgICAuYXR0cihcInlcIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gZC50eXBlWzBdID09PSBcInNcIiA/IHNlbGVjdGlvblsxXVsxXSAtIGhhbmRsZVNpemUgLyAyIDogc2VsZWN0aW9uWzBdWzFdIC0gaGFuZGxlU2l6ZSAvIDI7IH0pXG4gICAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCBmdW5jdGlvbihkKSB7IHJldHVybiBkLnR5cGUgPT09IFwiblwiIHx8IGQudHlwZSA9PT0gXCJzXCIgPyBzZWxlY3Rpb25bMV1bMF0gLSBzZWxlY3Rpb25bMF1bMF0gKyBoYW5kbGVTaXplIDogaGFuZGxlU2l6ZTsgfSlcbiAgICAgICAgICAuYXR0cihcImhlaWdodFwiLCBmdW5jdGlvbihkKSB7IHJldHVybiBkLnR5cGUgPT09IFwiZVwiIHx8IGQudHlwZSA9PT0gXCJ3XCIgPyBzZWxlY3Rpb25bMV1bMV0gLSBzZWxlY3Rpb25bMF1bMV0gKyBoYW5kbGVTaXplIDogaGFuZGxlU2l6ZTsgfSk7XG4gICAgfVxuXG4gICAgZWxzZSB7XG4gICAgICBncm91cC5zZWxlY3RBbGwoXCIuc2VsZWN0aW9uLC5oYW5kbGVcIilcbiAgICAgICAgICAuc3R5bGUoXCJkaXNwbGF5XCIsIFwibm9uZVwiKVxuICAgICAgICAgIC5hdHRyKFwieFwiLCBudWxsKVxuICAgICAgICAgIC5hdHRyKFwieVwiLCBudWxsKVxuICAgICAgICAgIC5hdHRyKFwid2lkdGhcIiwgbnVsbClcbiAgICAgICAgICAuYXR0cihcImhlaWdodFwiLCBudWxsKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBlbWl0dGVyKHRoYXQsIGFyZ3MsIGNsZWFuKSB7XG4gICAgdmFyIGVtaXQgPSB0aGF0Ll9fYnJ1c2guZW1pdHRlcjtcbiAgICByZXR1cm4gZW1pdCAmJiAoIWNsZWFuIHx8ICFlbWl0LmNsZWFuKSA/IGVtaXQgOiBuZXcgRW1pdHRlcih0aGF0LCBhcmdzLCBjbGVhbik7XG4gIH1cblxuICBmdW5jdGlvbiBFbWl0dGVyKHRoYXQsIGFyZ3MsIGNsZWFuKSB7XG4gICAgdGhpcy50aGF0ID0gdGhhdDtcbiAgICB0aGlzLmFyZ3MgPSBhcmdzO1xuICAgIHRoaXMuc3RhdGUgPSB0aGF0Ll9fYnJ1c2g7XG4gICAgdGhpcy5hY3RpdmUgPSAwO1xuICAgIHRoaXMuY2xlYW4gPSBjbGVhbjtcbiAgfVxuXG4gIEVtaXR0ZXIucHJvdG90eXBlID0ge1xuICAgIGJlZm9yZXN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICAgIGlmICgrK3RoaXMuYWN0aXZlID09PSAxKSB0aGlzLnN0YXRlLmVtaXR0ZXIgPSB0aGlzLCB0aGlzLnN0YXJ0aW5nID0gdHJ1ZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG4gICAgc3RhcnQ6IGZ1bmN0aW9uKGV2ZW50LCBtb2RlKSB7XG4gICAgICBpZiAodGhpcy5zdGFydGluZykgdGhpcy5zdGFydGluZyA9IGZhbHNlLCB0aGlzLmVtaXQoXCJzdGFydFwiLCBldmVudCwgbW9kZSk7XG4gICAgICBlbHNlIHRoaXMuZW1pdChcImJydXNoXCIsIGV2ZW50KTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG4gICAgYnJ1c2g6IGZ1bmN0aW9uKGV2ZW50LCBtb2RlKSB7XG4gICAgICB0aGlzLmVtaXQoXCJicnVzaFwiLCBldmVudCwgbW9kZSk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIGVuZDogZnVuY3Rpb24oZXZlbnQsIG1vZGUpIHtcbiAgICAgIGlmICgtLXRoaXMuYWN0aXZlID09PSAwKSBkZWxldGUgdGhpcy5zdGF0ZS5lbWl0dGVyLCB0aGlzLmVtaXQoXCJlbmRcIiwgZXZlbnQsIG1vZGUpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICBlbWl0OiBmdW5jdGlvbih0eXBlLCBldmVudCwgbW9kZSkge1xuICAgICAgdmFyIGQgPSBzZWxlY3QodGhpcy50aGF0KS5kYXR1bSgpO1xuICAgICAgbGlzdGVuZXJzLmNhbGwoXG4gICAgICAgIHR5cGUsXG4gICAgICAgIHRoaXMudGhhdCxcbiAgICAgICAgbmV3IEJydXNoRXZlbnQodHlwZSwge1xuICAgICAgICAgIHNvdXJjZUV2ZW50OiBldmVudCxcbiAgICAgICAgICB0YXJnZXQ6IGJydXNoLFxuICAgICAgICAgIHNlbGVjdGlvbjogZGltLm91dHB1dCh0aGlzLnN0YXRlLnNlbGVjdGlvbiksXG4gICAgICAgICAgbW9kZSxcbiAgICAgICAgICBkaXNwYXRjaDogbGlzdGVuZXJzXG4gICAgICAgIH0pLFxuICAgICAgICBkXG4gICAgICApO1xuICAgIH1cbiAgfTtcblxuICBmdW5jdGlvbiBzdGFydGVkKGV2ZW50KSB7XG4gICAgaWYgKHRvdWNoZW5kaW5nICYmICFldmVudC50b3VjaGVzKSByZXR1cm47XG4gICAgaWYgKCFmaWx0ZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSkgcmV0dXJuO1xuXG4gICAgdmFyIHRoYXQgPSB0aGlzLFxuICAgICAgICB0eXBlID0gZXZlbnQudGFyZ2V0Ll9fZGF0YV9fLnR5cGUsXG4gICAgICAgIG1vZGUgPSAoa2V5cyAmJiBldmVudC5tZXRhS2V5ID8gdHlwZSA9IFwib3ZlcmxheVwiIDogdHlwZSkgPT09IFwic2VsZWN0aW9uXCIgPyBNT0RFX0RSQUcgOiAoa2V5cyAmJiBldmVudC5hbHRLZXkgPyBNT0RFX0NFTlRFUiA6IE1PREVfSEFORExFKSxcbiAgICAgICAgc2lnblggPSBkaW0gPT09IFkgPyBudWxsIDogc2lnbnNYW3R5cGVdLFxuICAgICAgICBzaWduWSA9IGRpbSA9PT0gWCA/IG51bGwgOiBzaWduc1lbdHlwZV0sXG4gICAgICAgIHN0YXRlID0gbG9jYWwodGhhdCksXG4gICAgICAgIGV4dGVudCA9IHN0YXRlLmV4dGVudCxcbiAgICAgICAgc2VsZWN0aW9uID0gc3RhdGUuc2VsZWN0aW9uLFxuICAgICAgICBXID0gZXh0ZW50WzBdWzBdLCB3MCwgdzEsXG4gICAgICAgIE4gPSBleHRlbnRbMF1bMV0sIG4wLCBuMSxcbiAgICAgICAgRSA9IGV4dGVudFsxXVswXSwgZTAsIGUxLFxuICAgICAgICBTID0gZXh0ZW50WzFdWzFdLCBzMCwgczEsXG4gICAgICAgIGR4ID0gMCxcbiAgICAgICAgZHkgPSAwLFxuICAgICAgICBtb3ZpbmcsXG4gICAgICAgIHNoaWZ0aW5nID0gc2lnblggJiYgc2lnblkgJiYga2V5cyAmJiBldmVudC5zaGlmdEtleSxcbiAgICAgICAgbG9ja1gsXG4gICAgICAgIGxvY2tZLFxuICAgICAgICBwb2ludHMgPSBBcnJheS5mcm9tKGV2ZW50LnRvdWNoZXMgfHwgW2V2ZW50XSwgdCA9PiB7XG4gICAgICAgICAgY29uc3QgaSA9IHQuaWRlbnRpZmllcjtcbiAgICAgICAgICB0ID0gcG9pbnRlcih0LCB0aGF0KTtcbiAgICAgICAgICB0LnBvaW50MCA9IHQuc2xpY2UoKTtcbiAgICAgICAgICB0LmlkZW50aWZpZXIgPSBpO1xuICAgICAgICAgIHJldHVybiB0O1xuICAgICAgICB9KTtcblxuICAgIGlmICh0eXBlID09PSBcIm92ZXJsYXlcIikge1xuICAgICAgaWYgKHNlbGVjdGlvbikgbW92aW5nID0gdHJ1ZTtcbiAgICAgIGNvbnN0IHB0cyA9IFtwb2ludHNbMF0sIHBvaW50c1sxXSB8fCBwb2ludHNbMF1dO1xuICAgICAgc3RhdGUuc2VsZWN0aW9uID0gc2VsZWN0aW9uID0gW1tcbiAgICAgICAgICB3MCA9IGRpbSA9PT0gWSA/IFcgOiBtaW4ocHRzWzBdWzBdLCBwdHNbMV1bMF0pLFxuICAgICAgICAgIG4wID0gZGltID09PSBYID8gTiA6IG1pbihwdHNbMF1bMV0sIHB0c1sxXVsxXSlcbiAgICAgICAgXSwgW1xuICAgICAgICAgIGUwID0gZGltID09PSBZID8gRSA6IG1heChwdHNbMF1bMF0sIHB0c1sxXVswXSksXG4gICAgICAgICAgczAgPSBkaW0gPT09IFggPyBTIDogbWF4KHB0c1swXVsxXSwgcHRzWzFdWzFdKVxuICAgICAgICBdXTtcbiAgICAgIGlmIChwb2ludHMubGVuZ3RoID4gMSkgbW92ZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB3MCA9IHNlbGVjdGlvblswXVswXTtcbiAgICAgIG4wID0gc2VsZWN0aW9uWzBdWzFdO1xuICAgICAgZTAgPSBzZWxlY3Rpb25bMV1bMF07XG4gICAgICBzMCA9IHNlbGVjdGlvblsxXVsxXTtcbiAgICB9XG5cbiAgICB3MSA9IHcwO1xuICAgIG4xID0gbjA7XG4gICAgZTEgPSBlMDtcbiAgICBzMSA9IHMwO1xuXG4gICAgdmFyIGdyb3VwID0gc2VsZWN0KHRoYXQpXG4gICAgICAgIC5hdHRyKFwicG9pbnRlci1ldmVudHNcIiwgXCJub25lXCIpO1xuXG4gICAgdmFyIG92ZXJsYXkgPSBncm91cC5zZWxlY3RBbGwoXCIub3ZlcmxheVwiKVxuICAgICAgICAuYXR0cihcImN1cnNvclwiLCBjdXJzb3JzW3R5cGVdKTtcblxuICAgIGludGVycnVwdCh0aGF0KTtcbiAgICB2YXIgZW1pdCA9IGVtaXR0ZXIodGhhdCwgYXJndW1lbnRzLCB0cnVlKS5iZWZvcmVzdGFydCgpO1xuXG4gICAgaWYgKGV2ZW50LnRvdWNoZXMpIHtcbiAgICAgIGVtaXQubW92ZWQgPSBtb3ZlZDtcbiAgICAgIGVtaXQuZW5kZWQgPSBlbmRlZDtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHZpZXcgPSBzZWxlY3QoZXZlbnQudmlldylcbiAgICAgICAgICAub24oXCJtb3VzZW1vdmUuYnJ1c2hcIiwgbW92ZWQsIHRydWUpXG4gICAgICAgICAgLm9uKFwibW91c2V1cC5icnVzaFwiLCBlbmRlZCwgdHJ1ZSk7XG4gICAgICBpZiAoa2V5cykgdmlld1xuICAgICAgICAgIC5vbihcImtleWRvd24uYnJ1c2hcIiwga2V5ZG93bmVkLCB0cnVlKVxuICAgICAgICAgIC5vbihcImtleXVwLmJydXNoXCIsIGtleXVwcGVkLCB0cnVlKVxuXG4gICAgICBkcmFnRGlzYWJsZShldmVudC52aWV3KTtcbiAgICB9XG5cbiAgICByZWRyYXcuY2FsbCh0aGF0KTtcbiAgICBlbWl0LnN0YXJ0KGV2ZW50LCBtb2RlLm5hbWUpO1xuXG4gICAgZnVuY3Rpb24gbW92ZWQoZXZlbnQpIHtcbiAgICAgIGZvciAoY29uc3QgcCBvZiBldmVudC5jaGFuZ2VkVG91Y2hlcyB8fCBbZXZlbnRdKSB7XG4gICAgICAgIGZvciAoY29uc3QgZCBvZiBwb2ludHMpXG4gICAgICAgICAgaWYgKGQuaWRlbnRpZmllciA9PT0gcC5pZGVudGlmaWVyKSBkLmN1ciA9IHBvaW50ZXIocCwgdGhhdCk7XG4gICAgICB9XG4gICAgICBpZiAoc2hpZnRpbmcgJiYgIWxvY2tYICYmICFsb2NrWSAmJiBwb2ludHMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIGNvbnN0IHBvaW50ID0gcG9pbnRzWzBdO1xuICAgICAgICBpZiAoYWJzKHBvaW50LmN1clswXSAtIHBvaW50WzBdKSA+IGFicyhwb2ludC5jdXJbMV0gLSBwb2ludFsxXSkpXG4gICAgICAgICAgbG9ja1kgPSB0cnVlO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgbG9ja1ggPSB0cnVlO1xuICAgICAgfVxuICAgICAgZm9yIChjb25zdCBwb2ludCBvZiBwb2ludHMpXG4gICAgICAgIGlmIChwb2ludC5jdXIpIHBvaW50WzBdID0gcG9pbnQuY3VyWzBdLCBwb2ludFsxXSA9IHBvaW50LmN1clsxXTtcbiAgICAgIG1vdmluZyA9IHRydWU7XG4gICAgICBub2V2ZW50KGV2ZW50KTtcbiAgICAgIG1vdmUoZXZlbnQpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1vdmUoZXZlbnQpIHtcbiAgICAgIGNvbnN0IHBvaW50ID0gcG9pbnRzWzBdLCBwb2ludDAgPSBwb2ludC5wb2ludDA7XG4gICAgICB2YXIgdDtcblxuICAgICAgZHggPSBwb2ludFswXSAtIHBvaW50MFswXTtcbiAgICAgIGR5ID0gcG9pbnRbMV0gLSBwb2ludDBbMV07XG5cbiAgICAgIHN3aXRjaCAobW9kZSkge1xuICAgICAgICBjYXNlIE1PREVfU1BBQ0U6XG4gICAgICAgIGNhc2UgTU9ERV9EUkFHOiB7XG4gICAgICAgICAgaWYgKHNpZ25YKSBkeCA9IG1heChXIC0gdzAsIG1pbihFIC0gZTAsIGR4KSksIHcxID0gdzAgKyBkeCwgZTEgPSBlMCArIGR4O1xuICAgICAgICAgIGlmIChzaWduWSkgZHkgPSBtYXgoTiAtIG4wLCBtaW4oUyAtIHMwLCBkeSkpLCBuMSA9IG4wICsgZHksIHMxID0gczAgKyBkeTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIE1PREVfSEFORExFOiB7XG4gICAgICAgICAgaWYgKHBvaW50c1sxXSkge1xuICAgICAgICAgICAgaWYgKHNpZ25YKSB3MSA9IG1heChXLCBtaW4oRSwgcG9pbnRzWzBdWzBdKSksIGUxID0gbWF4KFcsIG1pbihFLCBwb2ludHNbMV1bMF0pKSwgc2lnblggPSAxO1xuICAgICAgICAgICAgaWYgKHNpZ25ZKSBuMSA9IG1heChOLCBtaW4oUywgcG9pbnRzWzBdWzFdKSksIHMxID0gbWF4KE4sIG1pbihTLCBwb2ludHNbMV1bMV0pKSwgc2lnblkgPSAxO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoc2lnblggPCAwKSBkeCA9IG1heChXIC0gdzAsIG1pbihFIC0gdzAsIGR4KSksIHcxID0gdzAgKyBkeCwgZTEgPSBlMDtcbiAgICAgICAgICAgIGVsc2UgaWYgKHNpZ25YID4gMCkgZHggPSBtYXgoVyAtIGUwLCBtaW4oRSAtIGUwLCBkeCkpLCB3MSA9IHcwLCBlMSA9IGUwICsgZHg7XG4gICAgICAgICAgICBpZiAoc2lnblkgPCAwKSBkeSA9IG1heChOIC0gbjAsIG1pbihTIC0gbjAsIGR5KSksIG4xID0gbjAgKyBkeSwgczEgPSBzMDtcbiAgICAgICAgICAgIGVsc2UgaWYgKHNpZ25ZID4gMCkgZHkgPSBtYXgoTiAtIHMwLCBtaW4oUyAtIHMwLCBkeSkpLCBuMSA9IG4wLCBzMSA9IHMwICsgZHk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgTU9ERV9DRU5URVI6IHtcbiAgICAgICAgICBpZiAoc2lnblgpIHcxID0gbWF4KFcsIG1pbihFLCB3MCAtIGR4ICogc2lnblgpKSwgZTEgPSBtYXgoVywgbWluKEUsIGUwICsgZHggKiBzaWduWCkpO1xuICAgICAgICAgIGlmIChzaWduWSkgbjEgPSBtYXgoTiwgbWluKFMsIG4wIC0gZHkgKiBzaWduWSkpLCBzMSA9IG1heChOLCBtaW4oUywgczAgKyBkeSAqIHNpZ25ZKSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGUxIDwgdzEpIHtcbiAgICAgICAgc2lnblggKj0gLTE7XG4gICAgICAgIHQgPSB3MCwgdzAgPSBlMCwgZTAgPSB0O1xuICAgICAgICB0ID0gdzEsIHcxID0gZTEsIGUxID0gdDtcbiAgICAgICAgaWYgKHR5cGUgaW4gZmxpcFgpIG92ZXJsYXkuYXR0cihcImN1cnNvclwiLCBjdXJzb3JzW3R5cGUgPSBmbGlwWFt0eXBlXV0pO1xuICAgICAgfVxuXG4gICAgICBpZiAoczEgPCBuMSkge1xuICAgICAgICBzaWduWSAqPSAtMTtcbiAgICAgICAgdCA9IG4wLCBuMCA9IHMwLCBzMCA9IHQ7XG4gICAgICAgIHQgPSBuMSwgbjEgPSBzMSwgczEgPSB0O1xuICAgICAgICBpZiAodHlwZSBpbiBmbGlwWSkgb3ZlcmxheS5hdHRyKFwiY3Vyc29yXCIsIGN1cnNvcnNbdHlwZSA9IGZsaXBZW3R5cGVdXSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChzdGF0ZS5zZWxlY3Rpb24pIHNlbGVjdGlvbiA9IHN0YXRlLnNlbGVjdGlvbjsgLy8gTWF5IGJlIHNldCBieSBicnVzaC5tb3ZlIVxuICAgICAgaWYgKGxvY2tYKSB3MSA9IHNlbGVjdGlvblswXVswXSwgZTEgPSBzZWxlY3Rpb25bMV1bMF07XG4gICAgICBpZiAobG9ja1kpIG4xID0gc2VsZWN0aW9uWzBdWzFdLCBzMSA9IHNlbGVjdGlvblsxXVsxXTtcblxuICAgICAgaWYgKHNlbGVjdGlvblswXVswXSAhPT0gdzFcbiAgICAgICAgICB8fCBzZWxlY3Rpb25bMF1bMV0gIT09IG4xXG4gICAgICAgICAgfHwgc2VsZWN0aW9uWzFdWzBdICE9PSBlMVxuICAgICAgICAgIHx8IHNlbGVjdGlvblsxXVsxXSAhPT0gczEpIHtcbiAgICAgICAgc3RhdGUuc2VsZWN0aW9uID0gW1t3MSwgbjFdLCBbZTEsIHMxXV07XG4gICAgICAgIHJlZHJhdy5jYWxsKHRoYXQpO1xuICAgICAgICBlbWl0LmJydXNoKGV2ZW50LCBtb2RlLm5hbWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGVuZGVkKGV2ZW50KSB7XG4gICAgICBub3Byb3BhZ2F0aW9uKGV2ZW50KTtcbiAgICAgIGlmIChldmVudC50b3VjaGVzKSB7XG4gICAgICAgIGlmIChldmVudC50b3VjaGVzLmxlbmd0aCkgcmV0dXJuO1xuICAgICAgICBpZiAodG91Y2hlbmRpbmcpIGNsZWFyVGltZW91dCh0b3VjaGVuZGluZyk7XG4gICAgICAgIHRvdWNoZW5kaW5nID0gc2V0VGltZW91dChmdW5jdGlvbigpIHsgdG91Y2hlbmRpbmcgPSBudWxsOyB9LCA1MDApOyAvLyBHaG9zdCBjbGlja3MgYXJlIGRlbGF5ZWQhXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkcmFnRW5hYmxlKGV2ZW50LnZpZXcsIG1vdmluZyk7XG4gICAgICAgIHZpZXcub24oXCJrZXlkb3duLmJydXNoIGtleXVwLmJydXNoIG1vdXNlbW92ZS5icnVzaCBtb3VzZXVwLmJydXNoXCIsIG51bGwpO1xuICAgICAgfVxuICAgICAgZ3JvdXAuYXR0cihcInBvaW50ZXItZXZlbnRzXCIsIFwiYWxsXCIpO1xuICAgICAgb3ZlcmxheS5hdHRyKFwiY3Vyc29yXCIsIGN1cnNvcnMub3ZlcmxheSk7XG4gICAgICBpZiAoc3RhdGUuc2VsZWN0aW9uKSBzZWxlY3Rpb24gPSBzdGF0ZS5zZWxlY3Rpb247IC8vIE1heSBiZSBzZXQgYnkgYnJ1c2gubW92ZSAob24gc3RhcnQpIVxuICAgICAgaWYgKGVtcHR5KHNlbGVjdGlvbikpIHN0YXRlLnNlbGVjdGlvbiA9IG51bGwsIHJlZHJhdy5jYWxsKHRoYXQpO1xuICAgICAgZW1pdC5lbmQoZXZlbnQsIG1vZGUubmFtZSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24ga2V5ZG93bmVkKGV2ZW50KSB7XG4gICAgICBzd2l0Y2ggKGV2ZW50LmtleUNvZGUpIHtcbiAgICAgICAgY2FzZSAxNjogeyAvLyBTSElGVFxuICAgICAgICAgIHNoaWZ0aW5nID0gc2lnblggJiYgc2lnblk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAxODogeyAvLyBBTFRcbiAgICAgICAgICBpZiAobW9kZSA9PT0gTU9ERV9IQU5ETEUpIHtcbiAgICAgICAgICAgIGlmIChzaWduWCkgZTAgPSBlMSAtIGR4ICogc2lnblgsIHcwID0gdzEgKyBkeCAqIHNpZ25YO1xuICAgICAgICAgICAgaWYgKHNpZ25ZKSBzMCA9IHMxIC0gZHkgKiBzaWduWSwgbjAgPSBuMSArIGR5ICogc2lnblk7XG4gICAgICAgICAgICBtb2RlID0gTU9ERV9DRU5URVI7XG4gICAgICAgICAgICBtb3ZlKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgMzI6IHsgLy8gU1BBQ0U7IHRha2VzIHByaW9yaXR5IG92ZXIgQUxUXG4gICAgICAgICAgaWYgKG1vZGUgPT09IE1PREVfSEFORExFIHx8IG1vZGUgPT09IE1PREVfQ0VOVEVSKSB7XG4gICAgICAgICAgICBpZiAoc2lnblggPCAwKSBlMCA9IGUxIC0gZHg7IGVsc2UgaWYgKHNpZ25YID4gMCkgdzAgPSB3MSAtIGR4O1xuICAgICAgICAgICAgaWYgKHNpZ25ZIDwgMCkgczAgPSBzMSAtIGR5OyBlbHNlIGlmIChzaWduWSA+IDApIG4wID0gbjEgLSBkeTtcbiAgICAgICAgICAgIG1vZGUgPSBNT0RFX1NQQUNFO1xuICAgICAgICAgICAgb3ZlcmxheS5hdHRyKFwiY3Vyc29yXCIsIGN1cnNvcnMuc2VsZWN0aW9uKTtcbiAgICAgICAgICAgIG1vdmUoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgZGVmYXVsdDogcmV0dXJuO1xuICAgICAgfVxuICAgICAgbm9ldmVudChldmVudCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24ga2V5dXBwZWQoZXZlbnQpIHtcbiAgICAgIHN3aXRjaCAoZXZlbnQua2V5Q29kZSkge1xuICAgICAgICBjYXNlIDE2OiB7IC8vIFNISUZUXG4gICAgICAgICAgaWYgKHNoaWZ0aW5nKSB7XG4gICAgICAgICAgICBsb2NrWCA9IGxvY2tZID0gc2hpZnRpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIG1vdmUoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAxODogeyAvLyBBTFRcbiAgICAgICAgICBpZiAobW9kZSA9PT0gTU9ERV9DRU5URVIpIHtcbiAgICAgICAgICAgIGlmIChzaWduWCA8IDApIGUwID0gZTE7IGVsc2UgaWYgKHNpZ25YID4gMCkgdzAgPSB3MTtcbiAgICAgICAgICAgIGlmIChzaWduWSA8IDApIHMwID0gczE7IGVsc2UgaWYgKHNpZ25ZID4gMCkgbjAgPSBuMTtcbiAgICAgICAgICAgIG1vZGUgPSBNT0RFX0hBTkRMRTtcbiAgICAgICAgICAgIG1vdmUoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAzMjogeyAvLyBTUEFDRVxuICAgICAgICAgIGlmIChtb2RlID09PSBNT0RFX1NQQUNFKSB7XG4gICAgICAgICAgICBpZiAoZXZlbnQuYWx0S2V5KSB7XG4gICAgICAgICAgICAgIGlmIChzaWduWCkgZTAgPSBlMSAtIGR4ICogc2lnblgsIHcwID0gdzEgKyBkeCAqIHNpZ25YO1xuICAgICAgICAgICAgICBpZiAoc2lnblkpIHMwID0gczEgLSBkeSAqIHNpZ25ZLCBuMCA9IG4xICsgZHkgKiBzaWduWTtcbiAgICAgICAgICAgICAgbW9kZSA9IE1PREVfQ0VOVEVSO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgaWYgKHNpZ25YIDwgMCkgZTAgPSBlMTsgZWxzZSBpZiAoc2lnblggPiAwKSB3MCA9IHcxO1xuICAgICAgICAgICAgICBpZiAoc2lnblkgPCAwKSBzMCA9IHMxOyBlbHNlIGlmIChzaWduWSA+IDApIG4wID0gbjE7XG4gICAgICAgICAgICAgIG1vZGUgPSBNT0RFX0hBTkRMRTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG92ZXJsYXkuYXR0cihcImN1cnNvclwiLCBjdXJzb3JzW3R5cGVdKTtcbiAgICAgICAgICAgIG1vdmUoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgZGVmYXVsdDogcmV0dXJuO1xuICAgICAgfVxuICAgICAgbm9ldmVudChldmVudCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdG91Y2htb3ZlZChldmVudCkge1xuICAgIGVtaXR0ZXIodGhpcywgYXJndW1lbnRzKS5tb3ZlZChldmVudCk7XG4gIH1cblxuICBmdW5jdGlvbiB0b3VjaGVuZGVkKGV2ZW50KSB7XG4gICAgZW1pdHRlcih0aGlzLCBhcmd1bWVudHMpLmVuZGVkKGV2ZW50KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXRpYWxpemUoKSB7XG4gICAgdmFyIHN0YXRlID0gdGhpcy5fX2JydXNoIHx8IHtzZWxlY3Rpb246IG51bGx9O1xuICAgIHN0YXRlLmV4dGVudCA9IG51bWJlcjIoZXh0ZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICAgIHN0YXRlLmRpbSA9IGRpbTtcbiAgICByZXR1cm4gc3RhdGU7XG4gIH1cblxuICBicnVzaC5leHRlbnQgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZXh0ZW50ID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudChudW1iZXIyKF8pKSwgYnJ1c2gpIDogZXh0ZW50O1xuICB9O1xuXG4gIGJydXNoLmZpbHRlciA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChmaWx0ZXIgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCEhXyksIGJydXNoKSA6IGZpbHRlcjtcbiAgfTtcblxuICBicnVzaC50b3VjaGFibGUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodG91Y2hhYmxlID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCghIV8pLCBicnVzaCkgOiB0b3VjaGFibGU7XG4gIH07XG5cbiAgYnJ1c2guaGFuZGxlU2l6ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChoYW5kbGVTaXplID0gK18sIGJydXNoKSA6IGhhbmRsZVNpemU7XG4gIH07XG5cbiAgYnJ1c2gua2V5TW9kaWZpZXJzID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGtleXMgPSAhIV8sIGJydXNoKSA6IGtleXM7XG4gIH07XG5cbiAgYnJ1c2gub24gPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgdmFsdWUgPSBsaXN0ZW5lcnMub24uYXBwbHkobGlzdGVuZXJzLCBhcmd1bWVudHMpO1xuICAgIHJldHVybiB2YWx1ZSA9PT0gbGlzdGVuZXJzID8gYnJ1c2ggOiB2YWx1ZTtcbiAgfTtcblxuICByZXR1cm4gYnJ1c2g7XG59XG4iLCJleHBvcnQgY29uc3QgcmFkaWFucyA9IE1hdGguUEkgLyAxODA7XG5leHBvcnQgY29uc3QgZGVncmVlcyA9IDE4MCAvIE1hdGguUEk7XG4iLCJpbXBvcnQgZGVmaW5lLCB7ZXh0ZW5kfSBmcm9tIFwiLi9kZWZpbmUuanNcIjtcbmltcG9ydCB7Q29sb3IsIHJnYkNvbnZlcnQsIFJnYn0gZnJvbSBcIi4vY29sb3IuanNcIjtcbmltcG9ydCB7ZGVncmVlcywgcmFkaWFuc30gZnJvbSBcIi4vbWF0aC5qc1wiO1xuXG4vLyBodHRwczovL29ic2VydmFibGVocS5jb20vQG1ib3N0b2NrL2xhYi1hbmQtcmdiXG5jb25zdCBLID0gMTgsXG4gICAgWG4gPSAwLjk2NDIyLFxuICAgIFluID0gMSxcbiAgICBabiA9IDAuODI1MjEsXG4gICAgdDAgPSA0IC8gMjksXG4gICAgdDEgPSA2IC8gMjksXG4gICAgdDIgPSAzICogdDEgKiB0MSxcbiAgICB0MyA9IHQxICogdDEgKiB0MTtcblxuZnVuY3Rpb24gbGFiQ29udmVydChvKSB7XG4gIGlmIChvIGluc3RhbmNlb2YgTGFiKSByZXR1cm4gbmV3IExhYihvLmwsIG8uYSwgby5iLCBvLm9wYWNpdHkpO1xuICBpZiAobyBpbnN0YW5jZW9mIEhjbCkgcmV0dXJuIGhjbDJsYWIobyk7XG4gIGlmICghKG8gaW5zdGFuY2VvZiBSZ2IpKSBvID0gcmdiQ29udmVydChvKTtcbiAgdmFyIHIgPSByZ2IybHJnYihvLnIpLFxuICAgICAgZyA9IHJnYjJscmdiKG8uZyksXG4gICAgICBiID0gcmdiMmxyZ2Ioby5iKSxcbiAgICAgIHkgPSB4eXoybGFiKCgwLjIyMjUwNDUgKiByICsgMC43MTY4Nzg2ICogZyArIDAuMDYwNjE2OSAqIGIpIC8gWW4pLCB4LCB6O1xuICBpZiAociA9PT0gZyAmJiBnID09PSBiKSB4ID0geiA9IHk7IGVsc2Uge1xuICAgIHggPSB4eXoybGFiKCgwLjQzNjA3NDcgKiByICsgMC4zODUwNjQ5ICogZyArIDAuMTQzMDgwNCAqIGIpIC8gWG4pO1xuICAgIHogPSB4eXoybGFiKCgwLjAxMzkzMjIgKiByICsgMC4wOTcxMDQ1ICogZyArIDAuNzE0MTczMyAqIGIpIC8gWm4pO1xuICB9XG4gIHJldHVybiBuZXcgTGFiKDExNiAqIHkgLSAxNiwgNTAwICogKHggLSB5KSwgMjAwICogKHkgLSB6KSwgby5vcGFjaXR5KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdyYXkobCwgb3BhY2l0eSkge1xuICByZXR1cm4gbmV3IExhYihsLCAwLCAwLCBvcGFjaXR5ID09IG51bGwgPyAxIDogb3BhY2l0eSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGxhYihsLCBhLCBiLCBvcGFjaXR5KSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID09PSAxID8gbGFiQ29udmVydChsKSA6IG5ldyBMYWIobCwgYSwgYiwgb3BhY2l0eSA9PSBudWxsID8gMSA6IG9wYWNpdHkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gTGFiKGwsIGEsIGIsIG9wYWNpdHkpIHtcbiAgdGhpcy5sID0gK2w7XG4gIHRoaXMuYSA9ICthO1xuICB0aGlzLmIgPSArYjtcbiAgdGhpcy5vcGFjaXR5ID0gK29wYWNpdHk7XG59XG5cbmRlZmluZShMYWIsIGxhYiwgZXh0ZW5kKENvbG9yLCB7XG4gIGJyaWdodGVyOiBmdW5jdGlvbihrKSB7XG4gICAgcmV0dXJuIG5ldyBMYWIodGhpcy5sICsgSyAqIChrID09IG51bGwgPyAxIDogayksIHRoaXMuYSwgdGhpcy5iLCB0aGlzLm9wYWNpdHkpO1xuICB9LFxuICBkYXJrZXI6IGZ1bmN0aW9uKGspIHtcbiAgICByZXR1cm4gbmV3IExhYih0aGlzLmwgLSBLICogKGsgPT0gbnVsbCA/IDEgOiBrKSwgdGhpcy5hLCB0aGlzLmIsIHRoaXMub3BhY2l0eSk7XG4gIH0sXG4gIHJnYjogZnVuY3Rpb24oKSB7XG4gICAgdmFyIHkgPSAodGhpcy5sICsgMTYpIC8gMTE2LFxuICAgICAgICB4ID0gaXNOYU4odGhpcy5hKSA/IHkgOiB5ICsgdGhpcy5hIC8gNTAwLFxuICAgICAgICB6ID0gaXNOYU4odGhpcy5iKSA/IHkgOiB5IC0gdGhpcy5iIC8gMjAwO1xuICAgIHggPSBYbiAqIGxhYjJ4eXooeCk7XG4gICAgeSA9IFluICogbGFiMnh5eih5KTtcbiAgICB6ID0gWm4gKiBsYWIyeHl6KHopO1xuICAgIHJldHVybiBuZXcgUmdiKFxuICAgICAgbHJnYjJyZ2IoIDMuMTMzODU2MSAqIHggLSAxLjYxNjg2NjcgKiB5IC0gMC40OTA2MTQ2ICogeiksXG4gICAgICBscmdiMnJnYigtMC45Nzg3Njg0ICogeCArIDEuOTE2MTQxNSAqIHkgKyAwLjAzMzQ1NDAgKiB6KSxcbiAgICAgIGxyZ2IycmdiKCAwLjA3MTk0NTMgKiB4IC0gMC4yMjg5OTE0ICogeSArIDEuNDA1MjQyNyAqIHopLFxuICAgICAgdGhpcy5vcGFjaXR5XG4gICAgKTtcbiAgfVxufSkpO1xuXG5mdW5jdGlvbiB4eXoybGFiKHQpIHtcbiAgcmV0dXJuIHQgPiB0MyA/IE1hdGgucG93KHQsIDEgLyAzKSA6IHQgLyB0MiArIHQwO1xufVxuXG5mdW5jdGlvbiBsYWIyeHl6KHQpIHtcbiAgcmV0dXJuIHQgPiB0MSA/IHQgKiB0ICogdCA6IHQyICogKHQgLSB0MCk7XG59XG5cbmZ1bmN0aW9uIGxyZ2IycmdiKHgpIHtcbiAgcmV0dXJuIDI1NSAqICh4IDw9IDAuMDAzMTMwOCA/IDEyLjkyICogeCA6IDEuMDU1ICogTWF0aC5wb3coeCwgMSAvIDIuNCkgLSAwLjA1NSk7XG59XG5cbmZ1bmN0aW9uIHJnYjJscmdiKHgpIHtcbiAgcmV0dXJuICh4IC89IDI1NSkgPD0gMC4wNDA0NSA/IHggLyAxMi45MiA6IE1hdGgucG93KCh4ICsgMC4wNTUpIC8gMS4wNTUsIDIuNCk7XG59XG5cbmZ1bmN0aW9uIGhjbENvbnZlcnQobykge1xuICBpZiAobyBpbnN0YW5jZW9mIEhjbCkgcmV0dXJuIG5ldyBIY2woby5oLCBvLmMsIG8ubCwgby5vcGFjaXR5KTtcbiAgaWYgKCEobyBpbnN0YW5jZW9mIExhYikpIG8gPSBsYWJDb252ZXJ0KG8pO1xuICBpZiAoby5hID09PSAwICYmIG8uYiA9PT0gMCkgcmV0dXJuIG5ldyBIY2woTmFOLCAwIDwgby5sICYmIG8ubCA8IDEwMCA/IDAgOiBOYU4sIG8ubCwgby5vcGFjaXR5KTtcbiAgdmFyIGggPSBNYXRoLmF0YW4yKG8uYiwgby5hKSAqIGRlZ3JlZXM7XG4gIHJldHVybiBuZXcgSGNsKGggPCAwID8gaCArIDM2MCA6IGgsIE1hdGguc3FydChvLmEgKiBvLmEgKyBvLmIgKiBvLmIpLCBvLmwsIG8ub3BhY2l0eSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBsY2gobCwgYywgaCwgb3BhY2l0eSkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/IGhjbENvbnZlcnQobCkgOiBuZXcgSGNsKGgsIGMsIGwsIG9wYWNpdHkgPT0gbnVsbCA/IDEgOiBvcGFjaXR5KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGhjbChoLCBjLCBsLCBvcGFjaXR5KSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID09PSAxID8gaGNsQ29udmVydChoKSA6IG5ldyBIY2woaCwgYywgbCwgb3BhY2l0eSA9PSBudWxsID8gMSA6IG9wYWNpdHkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gSGNsKGgsIGMsIGwsIG9wYWNpdHkpIHtcbiAgdGhpcy5oID0gK2g7XG4gIHRoaXMuYyA9ICtjO1xuICB0aGlzLmwgPSArbDtcbiAgdGhpcy5vcGFjaXR5ID0gK29wYWNpdHk7XG59XG5cbmZ1bmN0aW9uIGhjbDJsYWIobykge1xuICBpZiAoaXNOYU4oby5oKSkgcmV0dXJuIG5ldyBMYWIoby5sLCAwLCAwLCBvLm9wYWNpdHkpO1xuICB2YXIgaCA9IG8uaCAqIHJhZGlhbnM7XG4gIHJldHVybiBuZXcgTGFiKG8ubCwgTWF0aC5jb3MoaCkgKiBvLmMsIE1hdGguc2luKGgpICogby5jLCBvLm9wYWNpdHkpO1xufVxuXG5kZWZpbmUoSGNsLCBoY2wsIGV4dGVuZChDb2xvciwge1xuICBicmlnaHRlcjogZnVuY3Rpb24oaykge1xuICAgIHJldHVybiBuZXcgSGNsKHRoaXMuaCwgdGhpcy5jLCB0aGlzLmwgKyBLICogKGsgPT0gbnVsbCA/IDEgOiBrKSwgdGhpcy5vcGFjaXR5KTtcbiAgfSxcbiAgZGFya2VyOiBmdW5jdGlvbihrKSB7XG4gICAgcmV0dXJuIG5ldyBIY2wodGhpcy5oLCB0aGlzLmMsIHRoaXMubCAtIEsgKiAoayA9PSBudWxsID8gMSA6IGspLCB0aGlzLm9wYWNpdHkpO1xuICB9LFxuICByZ2I6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBoY2wybGFiKHRoaXMpLnJnYigpO1xuICB9XG59KSk7XG4iLCJmdW5jdGlvbiBjb3VudChub2RlKSB7XG4gIHZhciBzdW0gPSAwLFxuICAgICAgY2hpbGRyZW4gPSBub2RlLmNoaWxkcmVuLFxuICAgICAgaSA9IGNoaWxkcmVuICYmIGNoaWxkcmVuLmxlbmd0aDtcbiAgaWYgKCFpKSBzdW0gPSAxO1xuICBlbHNlIHdoaWxlICgtLWkgPj0gMCkgc3VtICs9IGNoaWxkcmVuW2ldLnZhbHVlO1xuICBub2RlLnZhbHVlID0gc3VtO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuZWFjaEFmdGVyKGNvdW50KTtcbn1cbiIsImltcG9ydCBub2RlX2NvdW50IGZyb20gXCIuL2NvdW50LmpzXCI7XG5pbXBvcnQgbm9kZV9lYWNoIGZyb20gXCIuL2VhY2guanNcIjtcbmltcG9ydCBub2RlX2VhY2hCZWZvcmUgZnJvbSBcIi4vZWFjaEJlZm9yZS5qc1wiO1xuaW1wb3J0IG5vZGVfZWFjaEFmdGVyIGZyb20gXCIuL2VhY2hBZnRlci5qc1wiO1xuaW1wb3J0IG5vZGVfZmluZCBmcm9tIFwiLi9maW5kLmpzXCI7XG5pbXBvcnQgbm9kZV9zdW0gZnJvbSBcIi4vc3VtLmpzXCI7XG5pbXBvcnQgbm9kZV9zb3J0IGZyb20gXCIuL3NvcnQuanNcIjtcbmltcG9ydCBub2RlX3BhdGggZnJvbSBcIi4vcGF0aC5qc1wiO1xuaW1wb3J0IG5vZGVfYW5jZXN0b3JzIGZyb20gXCIuL2FuY2VzdG9ycy5qc1wiO1xuaW1wb3J0IG5vZGVfZGVzY2VuZGFudHMgZnJvbSBcIi4vZGVzY2VuZGFudHMuanNcIjtcbmltcG9ydCBub2RlX2xlYXZlcyBmcm9tIFwiLi9sZWF2ZXMuanNcIjtcbmltcG9ydCBub2RlX2xpbmtzIGZyb20gXCIuL2xpbmtzLmpzXCI7XG5pbXBvcnQgbm9kZV9pdGVyYXRvciBmcm9tIFwiLi9pdGVyYXRvci5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBoaWVyYXJjaHkoZGF0YSwgY2hpbGRyZW4pIHtcbiAgaWYgKGRhdGEgaW5zdGFuY2VvZiBNYXApIHtcbiAgICBkYXRhID0gW3VuZGVmaW5lZCwgZGF0YV07XG4gICAgaWYgKGNoaWxkcmVuID09PSB1bmRlZmluZWQpIGNoaWxkcmVuID0gbWFwQ2hpbGRyZW47XG4gIH0gZWxzZSBpZiAoY2hpbGRyZW4gPT09IHVuZGVmaW5lZCkge1xuICAgIGNoaWxkcmVuID0gb2JqZWN0Q2hpbGRyZW47XG4gIH1cblxuICB2YXIgcm9vdCA9IG5ldyBOb2RlKGRhdGEpLFxuICAgICAgbm9kZSxcbiAgICAgIG5vZGVzID0gW3Jvb3RdLFxuICAgICAgY2hpbGQsXG4gICAgICBjaGlsZHMsXG4gICAgICBpLFxuICAgICAgbjtcblxuICB3aGlsZSAobm9kZSA9IG5vZGVzLnBvcCgpKSB7XG4gICAgaWYgKChjaGlsZHMgPSBjaGlsZHJlbihub2RlLmRhdGEpKSAmJiAobiA9IChjaGlsZHMgPSBBcnJheS5mcm9tKGNoaWxkcykpLmxlbmd0aCkpIHtcbiAgICAgIG5vZGUuY2hpbGRyZW4gPSBjaGlsZHM7XG4gICAgICBmb3IgKGkgPSBuIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgbm9kZXMucHVzaChjaGlsZCA9IGNoaWxkc1tpXSA9IG5ldyBOb2RlKGNoaWxkc1tpXSkpO1xuICAgICAgICBjaGlsZC5wYXJlbnQgPSBub2RlO1xuICAgICAgICBjaGlsZC5kZXB0aCA9IG5vZGUuZGVwdGggKyAxO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiByb290LmVhY2hCZWZvcmUoY29tcHV0ZUhlaWdodCk7XG59XG5cbmZ1bmN0aW9uIG5vZGVfY29weSgpIHtcbiAgcmV0dXJuIGhpZXJhcmNoeSh0aGlzKS5lYWNoQmVmb3JlKGNvcHlEYXRhKTtcbn1cblxuZnVuY3Rpb24gb2JqZWN0Q2hpbGRyZW4oZCkge1xuICByZXR1cm4gZC5jaGlsZHJlbjtcbn1cblxuZnVuY3Rpb24gbWFwQ2hpbGRyZW4oZCkge1xuICByZXR1cm4gQXJyYXkuaXNBcnJheShkKSA/IGRbMV0gOiBudWxsO1xufVxuXG5mdW5jdGlvbiBjb3B5RGF0YShub2RlKSB7XG4gIGlmIChub2RlLmRhdGEudmFsdWUgIT09IHVuZGVmaW5lZCkgbm9kZS52YWx1ZSA9IG5vZGUuZGF0YS52YWx1ZTtcbiAgbm9kZS5kYXRhID0gbm9kZS5kYXRhLmRhdGE7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb21wdXRlSGVpZ2h0KG5vZGUpIHtcbiAgdmFyIGhlaWdodCA9IDA7XG4gIGRvIG5vZGUuaGVpZ2h0ID0gaGVpZ2h0O1xuICB3aGlsZSAoKG5vZGUgPSBub2RlLnBhcmVudCkgJiYgKG5vZGUuaGVpZ2h0IDwgKytoZWlnaHQpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIE5vZGUoZGF0YSkge1xuICB0aGlzLmRhdGEgPSBkYXRhO1xuICB0aGlzLmRlcHRoID1cbiAgdGhpcy5oZWlnaHQgPSAwO1xuICB0aGlzLnBhcmVudCA9IG51bGw7XG59XG5cbk5vZGUucHJvdG90eXBlID0gaGllcmFyY2h5LnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IE5vZGUsXG4gIGNvdW50OiBub2RlX2NvdW50LFxuICBlYWNoOiBub2RlX2VhY2gsXG4gIGVhY2hBZnRlcjogbm9kZV9lYWNoQWZ0ZXIsXG4gIGVhY2hCZWZvcmU6IG5vZGVfZWFjaEJlZm9yZSxcbiAgZmluZDogbm9kZV9maW5kLFxuICBzdW06IG5vZGVfc3VtLFxuICBzb3J0OiBub2RlX3NvcnQsXG4gIHBhdGg6IG5vZGVfcGF0aCxcbiAgYW5jZXN0b3JzOiBub2RlX2FuY2VzdG9ycyxcbiAgZGVzY2VuZGFudHM6IG5vZGVfZGVzY2VuZGFudHMsXG4gIGxlYXZlczogbm9kZV9sZWF2ZXMsXG4gIGxpbmtzOiBub2RlX2xpbmtzLFxuICBjb3B5OiBub2RlX2NvcHksXG4gIFtTeW1ib2wuaXRlcmF0b3JdOiBub2RlX2l0ZXJhdG9yXG59O1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obm9kZSkge1xuICBub2RlLngwID0gTWF0aC5yb3VuZChub2RlLngwKTtcbiAgbm9kZS55MCA9IE1hdGgucm91bmQobm9kZS55MCk7XG4gIG5vZGUueDEgPSBNYXRoLnJvdW5kKG5vZGUueDEpO1xuICBub2RlLnkxID0gTWF0aC5yb3VuZChub2RlLnkxKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHBhcmVudCwgeDAsIHkwLCB4MSwgeTEpIHtcbiAgdmFyIG5vZGVzID0gcGFyZW50LmNoaWxkcmVuLFxuICAgICAgbm9kZSxcbiAgICAgIGkgPSAtMSxcbiAgICAgIG4gPSBub2Rlcy5sZW5ndGgsXG4gICAgICBrID0gcGFyZW50LnZhbHVlICYmICh4MSAtIHgwKSAvIHBhcmVudC52YWx1ZTtcblxuICB3aGlsZSAoKytpIDwgbikge1xuICAgIG5vZGUgPSBub2Rlc1tpXSwgbm9kZS55MCA9IHkwLCBub2RlLnkxID0geTE7XG4gICAgbm9kZS54MCA9IHgwLCBub2RlLngxID0geDAgKz0gbm9kZS52YWx1ZSAqIGs7XG4gIH1cbn1cbiIsImltcG9ydCByb3VuZE5vZGUgZnJvbSBcIi4vdHJlZW1hcC9yb3VuZC5qc1wiO1xuaW1wb3J0IHRyZWVtYXBEaWNlIGZyb20gXCIuL3RyZWVtYXAvZGljZS5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIGR4ID0gMSxcbiAgICAgIGR5ID0gMSxcbiAgICAgIHBhZGRpbmcgPSAwLFxuICAgICAgcm91bmQgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBwYXJ0aXRpb24ocm9vdCkge1xuICAgIHZhciBuID0gcm9vdC5oZWlnaHQgKyAxO1xuICAgIHJvb3QueDAgPVxuICAgIHJvb3QueTAgPSBwYWRkaW5nO1xuICAgIHJvb3QueDEgPSBkeDtcbiAgICByb290LnkxID0gZHkgLyBuO1xuICAgIHJvb3QuZWFjaEJlZm9yZShwb3NpdGlvbk5vZGUoZHksIG4pKTtcbiAgICBpZiAocm91bmQpIHJvb3QuZWFjaEJlZm9yZShyb3VuZE5vZGUpO1xuICAgIHJldHVybiByb290O1xuICB9XG5cbiAgZnVuY3Rpb24gcG9zaXRpb25Ob2RlKGR5LCBuKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgIGlmIChub2RlLmNoaWxkcmVuKSB7XG4gICAgICAgIHRyZWVtYXBEaWNlKG5vZGUsIG5vZGUueDAsIGR5ICogKG5vZGUuZGVwdGggKyAxKSAvIG4sIG5vZGUueDEsIGR5ICogKG5vZGUuZGVwdGggKyAyKSAvIG4pO1xuICAgICAgfVxuICAgICAgdmFyIHgwID0gbm9kZS54MCxcbiAgICAgICAgICB5MCA9IG5vZGUueTAsXG4gICAgICAgICAgeDEgPSBub2RlLngxIC0gcGFkZGluZyxcbiAgICAgICAgICB5MSA9IG5vZGUueTEgLSBwYWRkaW5nO1xuICAgICAgaWYgKHgxIDwgeDApIHgwID0geDEgPSAoeDAgKyB4MSkgLyAyO1xuICAgICAgaWYgKHkxIDwgeTApIHkwID0geTEgPSAoeTAgKyB5MSkgLyAyO1xuICAgICAgbm9kZS54MCA9IHgwO1xuICAgICAgbm9kZS55MCA9IHkwO1xuICAgICAgbm9kZS54MSA9IHgxO1xuICAgICAgbm9kZS55MSA9IHkxO1xuICAgIH07XG4gIH1cblxuICBwYXJ0aXRpb24ucm91bmQgPSBmdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocm91bmQgPSAhIXgsIHBhcnRpdGlvbikgOiByb3VuZDtcbiAgfTtcblxuICBwYXJ0aXRpb24uc2l6ZSA9IGZ1bmN0aW9uKHgpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChkeCA9ICt4WzBdLCBkeSA9ICt4WzFdLCBwYXJ0aXRpb24pIDogW2R4LCBkeV07XG4gIH07XG5cbiAgcGFydGl0aW9uLnBhZGRpbmcgPSBmdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocGFkZGluZyA9ICt4LCBwYXJ0aXRpb24pIDogcGFkZGluZztcbiAgfTtcblxuICByZXR1cm4gcGFydGl0aW9uO1xufVxuIiwiaW1wb3J0IHtOb2RlfSBmcm9tIFwiLi9oaWVyYXJjaHkvaW5kZXguanNcIjtcblxuZnVuY3Rpb24gZGVmYXVsdFNlcGFyYXRpb24oYSwgYikge1xuICByZXR1cm4gYS5wYXJlbnQgPT09IGIucGFyZW50ID8gMSA6IDI7XG59XG5cbi8vIGZ1bmN0aW9uIHJhZGlhbFNlcGFyYXRpb24oYSwgYikge1xuLy8gICByZXR1cm4gKGEucGFyZW50ID09PSBiLnBhcmVudCA/IDEgOiAyKSAvIGEuZGVwdGg7XG4vLyB9XG5cbi8vIFRoaXMgZnVuY3Rpb24gaXMgdXNlZCB0byB0cmF2ZXJzZSB0aGUgbGVmdCBjb250b3VyIG9mIGEgc3VidHJlZSAob3Jcbi8vIHN1YmZvcmVzdCkuIEl0IHJldHVybnMgdGhlIHN1Y2Nlc3NvciBvZiB2IG9uIHRoaXMgY29udG91ci4gVGhpcyBzdWNjZXNzb3IgaXNcbi8vIGVpdGhlciBnaXZlbiBieSB0aGUgbGVmdG1vc3QgY2hpbGQgb2YgdiBvciBieSB0aGUgdGhyZWFkIG9mIHYuIFRoZSBmdW5jdGlvblxuLy8gcmV0dXJucyBudWxsIGlmIGFuZCBvbmx5IGlmIHYgaXMgb24gdGhlIGhpZ2hlc3QgbGV2ZWwgb2YgaXRzIHN1YnRyZWUuXG5mdW5jdGlvbiBuZXh0TGVmdCh2KSB7XG4gIHZhciBjaGlsZHJlbiA9IHYuY2hpbGRyZW47XG4gIHJldHVybiBjaGlsZHJlbiA/IGNoaWxkcmVuWzBdIDogdi50O1xufVxuXG4vLyBUaGlzIGZ1bmN0aW9uIHdvcmtzIGFuYWxvZ291c2x5IHRvIG5leHRMZWZ0LlxuZnVuY3Rpb24gbmV4dFJpZ2h0KHYpIHtcbiAgdmFyIGNoaWxkcmVuID0gdi5jaGlsZHJlbjtcbiAgcmV0dXJuIGNoaWxkcmVuID8gY2hpbGRyZW5bY2hpbGRyZW4ubGVuZ3RoIC0gMV0gOiB2LnQ7XG59XG5cbi8vIFNoaWZ0cyB0aGUgY3VycmVudCBzdWJ0cmVlIHJvb3RlZCBhdCB3Ky4gVGhpcyBpcyBkb25lIGJ5IGluY3JlYXNpbmdcbi8vIHByZWxpbSh3KykgYW5kIG1vZCh3KykgYnkgc2hpZnQuXG5mdW5jdGlvbiBtb3ZlU3VidHJlZSh3bSwgd3AsIHNoaWZ0KSB7XG4gIHZhciBjaGFuZ2UgPSBzaGlmdCAvICh3cC5pIC0gd20uaSk7XG4gIHdwLmMgLT0gY2hhbmdlO1xuICB3cC5zICs9IHNoaWZ0O1xuICB3bS5jICs9IGNoYW5nZTtcbiAgd3AueiArPSBzaGlmdDtcbiAgd3AubSArPSBzaGlmdDtcbn1cblxuLy8gQWxsIG90aGVyIHNoaWZ0cywgYXBwbGllZCB0byB0aGUgc21hbGxlciBzdWJ0cmVlcyBiZXR3ZWVuIHctIGFuZCB3KywgYXJlXG4vLyBwZXJmb3JtZWQgYnkgdGhpcyBmdW5jdGlvbi4gVG8gcHJlcGFyZSB0aGUgc2hpZnRzLCB3ZSBoYXZlIHRvIGFkanVzdFxuLy8gY2hhbmdlKHcrKSwgc2hpZnQodyspLCBhbmQgY2hhbmdlKHctKS5cbmZ1bmN0aW9uIGV4ZWN1dGVTaGlmdHModikge1xuICB2YXIgc2hpZnQgPSAwLFxuICAgICAgY2hhbmdlID0gMCxcbiAgICAgIGNoaWxkcmVuID0gdi5jaGlsZHJlbixcbiAgICAgIGkgPSBjaGlsZHJlbi5sZW5ndGgsXG4gICAgICB3O1xuICB3aGlsZSAoLS1pID49IDApIHtcbiAgICB3ID0gY2hpbGRyZW5baV07XG4gICAgdy56ICs9IHNoaWZ0O1xuICAgIHcubSArPSBzaGlmdDtcbiAgICBzaGlmdCArPSB3LnMgKyAoY2hhbmdlICs9IHcuYyk7XG4gIH1cbn1cblxuLy8gSWYgdmkt4oCZcyBhbmNlc3RvciBpcyBhIHNpYmxpbmcgb2YgdiwgcmV0dXJucyB2aS3igJlzIGFuY2VzdG9yLiBPdGhlcndpc2UsXG4vLyByZXR1cm5zIHRoZSBzcGVjaWZpZWQgKGRlZmF1bHQpIGFuY2VzdG9yLlxuZnVuY3Rpb24gbmV4dEFuY2VzdG9yKHZpbSwgdiwgYW5jZXN0b3IpIHtcbiAgcmV0dXJuIHZpbS5hLnBhcmVudCA9PT0gdi5wYXJlbnQgPyB2aW0uYSA6IGFuY2VzdG9yO1xufVxuXG5mdW5jdGlvbiBUcmVlTm9kZShub2RlLCBpKSB7XG4gIHRoaXMuXyA9IG5vZGU7XG4gIHRoaXMucGFyZW50ID0gbnVsbDtcbiAgdGhpcy5jaGlsZHJlbiA9IG51bGw7XG4gIHRoaXMuQSA9IG51bGw7IC8vIGRlZmF1bHQgYW5jZXN0b3JcbiAgdGhpcy5hID0gdGhpczsgLy8gYW5jZXN0b3JcbiAgdGhpcy56ID0gMDsgLy8gcHJlbGltXG4gIHRoaXMubSA9IDA7IC8vIG1vZFxuICB0aGlzLmMgPSAwOyAvLyBjaGFuZ2VcbiAgdGhpcy5zID0gMDsgLy8gc2hpZnRcbiAgdGhpcy50ID0gbnVsbDsgLy8gdGhyZWFkXG4gIHRoaXMuaSA9IGk7IC8vIG51bWJlclxufVxuXG5UcmVlTm9kZS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKE5vZGUucHJvdG90eXBlKTtcblxuZnVuY3Rpb24gdHJlZVJvb3Qocm9vdCkge1xuICB2YXIgdHJlZSA9IG5ldyBUcmVlTm9kZShyb290LCAwKSxcbiAgICAgIG5vZGUsXG4gICAgICBub2RlcyA9IFt0cmVlXSxcbiAgICAgIGNoaWxkLFxuICAgICAgY2hpbGRyZW4sXG4gICAgICBpLFxuICAgICAgbjtcblxuICB3aGlsZSAobm9kZSA9IG5vZGVzLnBvcCgpKSB7XG4gICAgaWYgKGNoaWxkcmVuID0gbm9kZS5fLmNoaWxkcmVuKSB7XG4gICAgICBub2RlLmNoaWxkcmVuID0gbmV3IEFycmF5KG4gPSBjaGlsZHJlbi5sZW5ndGgpO1xuICAgICAgZm9yIChpID0gbiAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIG5vZGVzLnB1c2goY2hpbGQgPSBub2RlLmNoaWxkcmVuW2ldID0gbmV3IFRyZWVOb2RlKGNoaWxkcmVuW2ldLCBpKSk7XG4gICAgICAgIGNoaWxkLnBhcmVudCA9IG5vZGU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgKHRyZWUucGFyZW50ID0gbmV3IFRyZWVOb2RlKG51bGwsIDApKS5jaGlsZHJlbiA9IFt0cmVlXTtcbiAgcmV0dXJuIHRyZWU7XG59XG5cbi8vIE5vZGUtbGluayB0cmVlIGRpYWdyYW0gdXNpbmcgdGhlIFJlaW5nb2xkLVRpbGZvcmQgXCJ0aWR5XCIgYWxnb3JpdGhtXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIHNlcGFyYXRpb24gPSBkZWZhdWx0U2VwYXJhdGlvbixcbiAgICAgIGR4ID0gMSxcbiAgICAgIGR5ID0gMSxcbiAgICAgIG5vZGVTaXplID0gbnVsbDtcblxuICBmdW5jdGlvbiB0cmVlKHJvb3QpIHtcbiAgICB2YXIgdCA9IHRyZWVSb290KHJvb3QpO1xuXG4gICAgLy8gQ29tcHV0ZSB0aGUgbGF5b3V0IHVzaW5nIEJ1Y2hoZWltIGV0IGFsLuKAmXMgYWxnb3JpdGhtLlxuICAgIHQuZWFjaEFmdGVyKGZpcnN0V2FsayksIHQucGFyZW50Lm0gPSAtdC56O1xuICAgIHQuZWFjaEJlZm9yZShzZWNvbmRXYWxrKTtcblxuICAgIC8vIElmIGEgZml4ZWQgbm9kZSBzaXplIGlzIHNwZWNpZmllZCwgc2NhbGUgeCBhbmQgeS5cbiAgICBpZiAobm9kZVNpemUpIHJvb3QuZWFjaEJlZm9yZShzaXplTm9kZSk7XG5cbiAgICAvLyBJZiBhIGZpeGVkIHRyZWUgc2l6ZSBpcyBzcGVjaWZpZWQsIHNjYWxlIHggYW5kIHkgYmFzZWQgb24gdGhlIGV4dGVudC5cbiAgICAvLyBDb21wdXRlIHRoZSBsZWZ0LW1vc3QsIHJpZ2h0LW1vc3QsIGFuZCBkZXB0aC1tb3N0IG5vZGVzIGZvciBleHRlbnRzLlxuICAgIGVsc2Uge1xuICAgICAgdmFyIGxlZnQgPSByb290LFxuICAgICAgICAgIHJpZ2h0ID0gcm9vdCxcbiAgICAgICAgICBib3R0b20gPSByb290O1xuICAgICAgcm9vdC5lYWNoQmVmb3JlKGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgICAgaWYgKG5vZGUueCA8IGxlZnQueCkgbGVmdCA9IG5vZGU7XG4gICAgICAgIGlmIChub2RlLnggPiByaWdodC54KSByaWdodCA9IG5vZGU7XG4gICAgICAgIGlmIChub2RlLmRlcHRoID4gYm90dG9tLmRlcHRoKSBib3R0b20gPSBub2RlO1xuICAgICAgfSk7XG4gICAgICB2YXIgcyA9IGxlZnQgPT09IHJpZ2h0ID8gMSA6IHNlcGFyYXRpb24obGVmdCwgcmlnaHQpIC8gMixcbiAgICAgICAgICB0eCA9IHMgLSBsZWZ0LngsXG4gICAgICAgICAga3ggPSBkeCAvIChyaWdodC54ICsgcyArIHR4KSxcbiAgICAgICAgICBreSA9IGR5IC8gKGJvdHRvbS5kZXB0aCB8fCAxKTtcbiAgICAgIHJvb3QuZWFjaEJlZm9yZShmdW5jdGlvbihub2RlKSB7XG4gICAgICAgIG5vZGUueCA9IChub2RlLnggKyB0eCkgKiBreDtcbiAgICAgICAgbm9kZS55ID0gbm9kZS5kZXB0aCAqIGt5O1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJvb3Q7XG4gIH1cblxuICAvLyBDb21wdXRlcyBhIHByZWxpbWluYXJ5IHgtY29vcmRpbmF0ZSBmb3Igdi4gQmVmb3JlIHRoYXQsIEZJUlNUIFdBTEsgaXNcbiAgLy8gYXBwbGllZCByZWN1cnNpdmVseSB0byB0aGUgY2hpbGRyZW4gb2YgdiwgYXMgd2VsbCBhcyB0aGUgZnVuY3Rpb25cbiAgLy8gQVBQT1JUSU9OLiBBZnRlciBzcGFjaW5nIG91dCB0aGUgY2hpbGRyZW4gYnkgY2FsbGluZyBFWEVDVVRFIFNISUZUUywgdGhlXG4gIC8vIG5vZGUgdiBpcyBwbGFjZWQgdG8gdGhlIG1pZHBvaW50IG9mIGl0cyBvdXRlcm1vc3QgY2hpbGRyZW4uXG4gIGZ1bmN0aW9uIGZpcnN0V2Fsayh2KSB7XG4gICAgdmFyIGNoaWxkcmVuID0gdi5jaGlsZHJlbixcbiAgICAgICAgc2libGluZ3MgPSB2LnBhcmVudC5jaGlsZHJlbixcbiAgICAgICAgdyA9IHYuaSA/IHNpYmxpbmdzW3YuaSAtIDFdIDogbnVsbDtcbiAgICBpZiAoY2hpbGRyZW4pIHtcbiAgICAgIGV4ZWN1dGVTaGlmdHModik7XG4gICAgICB2YXIgbWlkcG9pbnQgPSAoY2hpbGRyZW5bMF0ueiArIGNoaWxkcmVuW2NoaWxkcmVuLmxlbmd0aCAtIDFdLnopIC8gMjtcbiAgICAgIGlmICh3KSB7XG4gICAgICAgIHYueiA9IHcueiArIHNlcGFyYXRpb24odi5fLCB3Ll8pO1xuICAgICAgICB2Lm0gPSB2LnogLSBtaWRwb2ludDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHYueiA9IG1pZHBvaW50O1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodykge1xuICAgICAgdi56ID0gdy56ICsgc2VwYXJhdGlvbih2Ll8sIHcuXyk7XG4gICAgfVxuICAgIHYucGFyZW50LkEgPSBhcHBvcnRpb24odiwgdywgdi5wYXJlbnQuQSB8fCBzaWJsaW5nc1swXSk7XG4gIH1cblxuICAvLyBDb21wdXRlcyBhbGwgcmVhbCB4LWNvb3JkaW5hdGVzIGJ5IHN1bW1pbmcgdXAgdGhlIG1vZGlmaWVycyByZWN1cnNpdmVseS5cbiAgZnVuY3Rpb24gc2Vjb25kV2Fsayh2KSB7XG4gICAgdi5fLnggPSB2LnogKyB2LnBhcmVudC5tO1xuICAgIHYubSArPSB2LnBhcmVudC5tO1xuICB9XG5cbiAgLy8gVGhlIGNvcmUgb2YgdGhlIGFsZ29yaXRobS4gSGVyZSwgYSBuZXcgc3VidHJlZSBpcyBjb21iaW5lZCB3aXRoIHRoZVxuICAvLyBwcmV2aW91cyBzdWJ0cmVlcy4gVGhyZWFkcyBhcmUgdXNlZCB0byB0cmF2ZXJzZSB0aGUgaW5zaWRlIGFuZCBvdXRzaWRlXG4gIC8vIGNvbnRvdXJzIG9mIHRoZSBsZWZ0IGFuZCByaWdodCBzdWJ0cmVlIHVwIHRvIHRoZSBoaWdoZXN0IGNvbW1vbiBsZXZlbC4gVGhlXG4gIC8vIHZlcnRpY2VzIHVzZWQgZm9yIHRoZSB0cmF2ZXJzYWxzIGFyZSB2aSssIHZpLSwgdm8tLCBhbmQgdm8rLCB3aGVyZSB0aGVcbiAgLy8gc3VwZXJzY3JpcHQgbyBtZWFucyBvdXRzaWRlIGFuZCBpIG1lYW5zIGluc2lkZSwgdGhlIHN1YnNjcmlwdCAtIG1lYW5zIGxlZnRcbiAgLy8gc3VidHJlZSBhbmQgKyBtZWFucyByaWdodCBzdWJ0cmVlLiBGb3Igc3VtbWluZyB1cCB0aGUgbW9kaWZpZXJzIGFsb25nIHRoZVxuICAvLyBjb250b3VyLCB3ZSB1c2UgcmVzcGVjdGl2ZSB2YXJpYWJsZXMgc2krLCBzaS0sIHNvLSwgYW5kIHNvKy4gV2hlbmV2ZXIgdHdvXG4gIC8vIG5vZGVzIG9mIHRoZSBpbnNpZGUgY29udG91cnMgY29uZmxpY3QsIHdlIGNvbXB1dGUgdGhlIGxlZnQgb25lIG9mIHRoZVxuICAvLyBncmVhdGVzdCB1bmNvbW1vbiBhbmNlc3RvcnMgdXNpbmcgdGhlIGZ1bmN0aW9uIEFOQ0VTVE9SIGFuZCBjYWxsIE1PVkVcbiAgLy8gU1VCVFJFRSB0byBzaGlmdCB0aGUgc3VidHJlZSBhbmQgcHJlcGFyZSB0aGUgc2hpZnRzIG9mIHNtYWxsZXIgc3VidHJlZXMuXG4gIC8vIEZpbmFsbHksIHdlIGFkZCBhIG5ldyB0aHJlYWQgKGlmIG5lY2Vzc2FyeSkuXG4gIGZ1bmN0aW9uIGFwcG9ydGlvbih2LCB3LCBhbmNlc3Rvcikge1xuICAgIGlmICh3KSB7XG4gICAgICB2YXIgdmlwID0gdixcbiAgICAgICAgICB2b3AgPSB2LFxuICAgICAgICAgIHZpbSA9IHcsXG4gICAgICAgICAgdm9tID0gdmlwLnBhcmVudC5jaGlsZHJlblswXSxcbiAgICAgICAgICBzaXAgPSB2aXAubSxcbiAgICAgICAgICBzb3AgPSB2b3AubSxcbiAgICAgICAgICBzaW0gPSB2aW0ubSxcbiAgICAgICAgICBzb20gPSB2b20ubSxcbiAgICAgICAgICBzaGlmdDtcbiAgICAgIHdoaWxlICh2aW0gPSBuZXh0UmlnaHQodmltKSwgdmlwID0gbmV4dExlZnQodmlwKSwgdmltICYmIHZpcCkge1xuICAgICAgICB2b20gPSBuZXh0TGVmdCh2b20pO1xuICAgICAgICB2b3AgPSBuZXh0UmlnaHQodm9wKTtcbiAgICAgICAgdm9wLmEgPSB2O1xuICAgICAgICBzaGlmdCA9IHZpbS56ICsgc2ltIC0gdmlwLnogLSBzaXAgKyBzZXBhcmF0aW9uKHZpbS5fLCB2aXAuXyk7XG4gICAgICAgIGlmIChzaGlmdCA+IDApIHtcbiAgICAgICAgICBtb3ZlU3VidHJlZShuZXh0QW5jZXN0b3IodmltLCB2LCBhbmNlc3RvciksIHYsIHNoaWZ0KTtcbiAgICAgICAgICBzaXAgKz0gc2hpZnQ7XG4gICAgICAgICAgc29wICs9IHNoaWZ0O1xuICAgICAgICB9XG4gICAgICAgIHNpbSArPSB2aW0ubTtcbiAgICAgICAgc2lwICs9IHZpcC5tO1xuICAgICAgICBzb20gKz0gdm9tLm07XG4gICAgICAgIHNvcCArPSB2b3AubTtcbiAgICAgIH1cbiAgICAgIGlmICh2aW0gJiYgIW5leHRSaWdodCh2b3ApKSB7XG4gICAgICAgIHZvcC50ID0gdmltO1xuICAgICAgICB2b3AubSArPSBzaW0gLSBzb3A7XG4gICAgICB9XG4gICAgICBpZiAodmlwICYmICFuZXh0TGVmdCh2b20pKSB7XG4gICAgICAgIHZvbS50ID0gdmlwO1xuICAgICAgICB2b20ubSArPSBzaXAgLSBzb207XG4gICAgICAgIGFuY2VzdG9yID0gdjtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGFuY2VzdG9yO1xuICB9XG5cbiAgZnVuY3Rpb24gc2l6ZU5vZGUobm9kZSkge1xuICAgIG5vZGUueCAqPSBkeDtcbiAgICBub2RlLnkgPSBub2RlLmRlcHRoICogZHk7XG4gIH1cblxuICB0cmVlLnNlcGFyYXRpb24gPSBmdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc2VwYXJhdGlvbiA9IHgsIHRyZWUpIDogc2VwYXJhdGlvbjtcbiAgfTtcblxuICB0cmVlLnNpemUgPSBmdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAobm9kZVNpemUgPSBmYWxzZSwgZHggPSAreFswXSwgZHkgPSAreFsxXSwgdHJlZSkgOiAobm9kZVNpemUgPyBudWxsIDogW2R4LCBkeV0pO1xuICB9O1xuXG4gIHRyZWUubm9kZVNpemUgPSBmdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAobm9kZVNpemUgPSB0cnVlLCBkeCA9ICt4WzBdLCBkeSA9ICt4WzFdLCB0cmVlKSA6IChub2RlU2l6ZSA/IFtkeCwgZHldIDogbnVsbCk7XG4gIH07XG5cbiAgcmV0dXJuIHRyZWU7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihwYXJlbnQsIHgwLCB5MCwgeDEsIHkxKSB7XG4gIHZhciBub2RlcyA9IHBhcmVudC5jaGlsZHJlbixcbiAgICAgIG5vZGUsXG4gICAgICBpID0gLTEsXG4gICAgICBuID0gbm9kZXMubGVuZ3RoLFxuICAgICAgayA9IHBhcmVudC52YWx1ZSAmJiAoeTEgLSB5MCkgLyBwYXJlbnQudmFsdWU7XG5cbiAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICBub2RlID0gbm9kZXNbaV0sIG5vZGUueDAgPSB4MCwgbm9kZS54MSA9IHgxO1xuICAgIG5vZGUueTAgPSB5MCwgbm9kZS55MSA9IHkwICs9IG5vZGUudmFsdWUgKiBrO1xuICB9XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjYWxsYmFjaywgdGhhdCkge1xuICBsZXQgaW5kZXggPSAtMTtcbiAgZm9yIChjb25zdCBub2RlIG9mIHRoaXMpIHtcbiAgICBjYWxsYmFjay5jYWxsKHRoYXQsIG5vZGUsICsraW5kZXgsIHRoaXMpO1xuICB9XG4gIHJldHVybiB0aGlzO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY2FsbGJhY2ssIHRoYXQpIHtcbiAgdmFyIG5vZGUgPSB0aGlzLCBub2RlcyA9IFtub2RlXSwgbmV4dCA9IFtdLCBjaGlsZHJlbiwgaSwgbiwgaW5kZXggPSAtMTtcbiAgd2hpbGUgKG5vZGUgPSBub2Rlcy5wb3AoKSkge1xuICAgIG5leHQucHVzaChub2RlKTtcbiAgICBpZiAoY2hpbGRyZW4gPSBub2RlLmNoaWxkcmVuKSB7XG4gICAgICBmb3IgKGkgPSAwLCBuID0gY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbjsgKytpKSB7XG4gICAgICAgIG5vZGVzLnB1c2goY2hpbGRyZW5baV0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICB3aGlsZSAobm9kZSA9IG5leHQucG9wKCkpIHtcbiAgICBjYWxsYmFjay5jYWxsKHRoYXQsIG5vZGUsICsraW5kZXgsIHRoaXMpO1xuICB9XG4gIHJldHVybiB0aGlzO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY2FsbGJhY2ssIHRoYXQpIHtcbiAgdmFyIG5vZGUgPSB0aGlzLCBub2RlcyA9IFtub2RlXSwgY2hpbGRyZW4sIGksIGluZGV4ID0gLTE7XG4gIHdoaWxlIChub2RlID0gbm9kZXMucG9wKCkpIHtcbiAgICBjYWxsYmFjay5jYWxsKHRoYXQsIG5vZGUsICsraW5kZXgsIHRoaXMpO1xuICAgIGlmIChjaGlsZHJlbiA9IG5vZGUuY2hpbGRyZW4pIHtcbiAgICAgIGZvciAoaSA9IGNoaWxkcmVuLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIG5vZGVzLnB1c2goY2hpbGRyZW5baV0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gdGhpcztcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNhbGxiYWNrLCB0aGF0KSB7XG4gIGxldCBpbmRleCA9IC0xO1xuICBmb3IgKGNvbnN0IG5vZGUgb2YgdGhpcykge1xuICAgIGlmIChjYWxsYmFjay5jYWxsKHRoYXQsIG5vZGUsICsraW5kZXgsIHRoaXMpKSB7XG4gICAgICByZXR1cm4gbm9kZTtcbiAgICB9XG4gIH1cbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiB0aGlzLmVhY2hBZnRlcihmdW5jdGlvbihub2RlKSB7XG4gICAgdmFyIHN1bSA9ICt2YWx1ZShub2RlLmRhdGEpIHx8IDAsXG4gICAgICAgIGNoaWxkcmVuID0gbm9kZS5jaGlsZHJlbixcbiAgICAgICAgaSA9IGNoaWxkcmVuICYmIGNoaWxkcmVuLmxlbmd0aDtcbiAgICB3aGlsZSAoLS1pID49IDApIHN1bSArPSBjaGlsZHJlbltpXS52YWx1ZTtcbiAgICBub2RlLnZhbHVlID0gc3VtO1xuICB9KTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNvbXBhcmUpIHtcbiAgcmV0dXJuIHRoaXMuZWFjaEJlZm9yZShmdW5jdGlvbihub2RlKSB7XG4gICAgaWYgKG5vZGUuY2hpbGRyZW4pIHtcbiAgICAgIG5vZGUuY2hpbGRyZW4uc29ydChjb21wYXJlKTtcbiAgICB9XG4gIH0pO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oZW5kKSB7XG4gIHZhciBzdGFydCA9IHRoaXMsXG4gICAgICBhbmNlc3RvciA9IGxlYXN0Q29tbW9uQW5jZXN0b3Ioc3RhcnQsIGVuZCksXG4gICAgICBub2RlcyA9IFtzdGFydF07XG4gIHdoaWxlIChzdGFydCAhPT0gYW5jZXN0b3IpIHtcbiAgICBzdGFydCA9IHN0YXJ0LnBhcmVudDtcbiAgICBub2Rlcy5wdXNoKHN0YXJ0KTtcbiAgfVxuICB2YXIgayA9IG5vZGVzLmxlbmd0aDtcbiAgd2hpbGUgKGVuZCAhPT0gYW5jZXN0b3IpIHtcbiAgICBub2Rlcy5zcGxpY2UoaywgMCwgZW5kKTtcbiAgICBlbmQgPSBlbmQucGFyZW50O1xuICB9XG4gIHJldHVybiBub2Rlcztcbn1cblxuZnVuY3Rpb24gbGVhc3RDb21tb25BbmNlc3RvcihhLCBiKSB7XG4gIGlmIChhID09PSBiKSByZXR1cm4gYTtcbiAgdmFyIGFOb2RlcyA9IGEuYW5jZXN0b3JzKCksXG4gICAgICBiTm9kZXMgPSBiLmFuY2VzdG9ycygpLFxuICAgICAgYyA9IG51bGw7XG4gIGEgPSBhTm9kZXMucG9wKCk7XG4gIGIgPSBiTm9kZXMucG9wKCk7XG4gIHdoaWxlIChhID09PSBiKSB7XG4gICAgYyA9IGE7XG4gICAgYSA9IGFOb2Rlcy5wb3AoKTtcbiAgICBiID0gYk5vZGVzLnBvcCgpO1xuICB9XG4gIHJldHVybiBjO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBub2RlID0gdGhpcywgbm9kZXMgPSBbbm9kZV07XG4gIHdoaWxlIChub2RlID0gbm9kZS5wYXJlbnQpIHtcbiAgICBub2Rlcy5wdXNoKG5vZGUpO1xuICB9XG4gIHJldHVybiBub2Rlcztcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gQXJyYXkuZnJvbSh0aGlzKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgbGVhdmVzID0gW107XG4gIHRoaXMuZWFjaEJlZm9yZShmdW5jdGlvbihub2RlKSB7XG4gICAgaWYgKCFub2RlLmNoaWxkcmVuKSB7XG4gICAgICBsZWF2ZXMucHVzaChub2RlKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gbGVhdmVzO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciByb290ID0gdGhpcywgbGlua3MgPSBbXTtcbiAgcm9vdC5lYWNoKGZ1bmN0aW9uKG5vZGUpIHtcbiAgICBpZiAobm9kZSAhPT0gcm9vdCkgeyAvLyBEb27igJl0IGluY2x1ZGUgdGhlIHJvb3TigJlzIHBhcmVudCwgaWYgYW55LlxuICAgICAgbGlua3MucHVzaCh7c291cmNlOiBub2RlLnBhcmVudCwgdGFyZ2V0OiBub2RlfSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGxpbmtzO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24qKCkge1xuICB2YXIgbm9kZSA9IHRoaXMsIGN1cnJlbnQsIG5leHQgPSBbbm9kZV0sIGNoaWxkcmVuLCBpLCBuO1xuICBkbyB7XG4gICAgY3VycmVudCA9IG5leHQucmV2ZXJzZSgpLCBuZXh0ID0gW107XG4gICAgd2hpbGUgKG5vZGUgPSBjdXJyZW50LnBvcCgpKSB7XG4gICAgICB5aWVsZCBub2RlO1xuICAgICAgaWYgKGNoaWxkcmVuID0gbm9kZS5jaGlsZHJlbikge1xuICAgICAgICBmb3IgKGkgPSAwLCBuID0gY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbjsgKytpKSB7XG4gICAgICAgICAgbmV4dC5wdXNoKGNoaWxkcmVuW2ldKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSB3aGlsZSAobmV4dC5sZW5ndGgpO1xufVxuIiwiaW1wb3J0IHRyZWVtYXBEaWNlIGZyb20gXCIuL2RpY2UuanNcIjtcbmltcG9ydCB0cmVlbWFwU2xpY2UgZnJvbSBcIi4vc2xpY2UuanNcIjtcblxuZXhwb3J0IHZhciBwaGkgPSAoMSArIE1hdGguc3FydCg1KSkgLyAyO1xuXG5leHBvcnQgZnVuY3Rpb24gc3F1YXJpZnlSYXRpbyhyYXRpbywgcGFyZW50LCB4MCwgeTAsIHgxLCB5MSkge1xuICB2YXIgcm93cyA9IFtdLFxuICAgICAgbm9kZXMgPSBwYXJlbnQuY2hpbGRyZW4sXG4gICAgICByb3csXG4gICAgICBub2RlVmFsdWUsXG4gICAgICBpMCA9IDAsXG4gICAgICBpMSA9IDAsXG4gICAgICBuID0gbm9kZXMubGVuZ3RoLFxuICAgICAgZHgsIGR5LFxuICAgICAgdmFsdWUgPSBwYXJlbnQudmFsdWUsXG4gICAgICBzdW1WYWx1ZSxcbiAgICAgIG1pblZhbHVlLFxuICAgICAgbWF4VmFsdWUsXG4gICAgICBuZXdSYXRpbyxcbiAgICAgIG1pblJhdGlvLFxuICAgICAgYWxwaGEsXG4gICAgICBiZXRhO1xuXG4gIHdoaWxlIChpMCA8IG4pIHtcbiAgICBkeCA9IHgxIC0geDAsIGR5ID0geTEgLSB5MDtcblxuICAgIC8vIEZpbmQgdGhlIG5leHQgbm9uLWVtcHR5IG5vZGUuXG4gICAgZG8gc3VtVmFsdWUgPSBub2Rlc1tpMSsrXS52YWx1ZTsgd2hpbGUgKCFzdW1WYWx1ZSAmJiBpMSA8IG4pO1xuICAgIG1pblZhbHVlID0gbWF4VmFsdWUgPSBzdW1WYWx1ZTtcbiAgICBhbHBoYSA9IE1hdGgubWF4KGR5IC8gZHgsIGR4IC8gZHkpIC8gKHZhbHVlICogcmF0aW8pO1xuICAgIGJldGEgPSBzdW1WYWx1ZSAqIHN1bVZhbHVlICogYWxwaGE7XG4gICAgbWluUmF0aW8gPSBNYXRoLm1heChtYXhWYWx1ZSAvIGJldGEsIGJldGEgLyBtaW5WYWx1ZSk7XG5cbiAgICAvLyBLZWVwIGFkZGluZyBub2RlcyB3aGlsZSB0aGUgYXNwZWN0IHJhdGlvIG1haW50YWlucyBvciBpbXByb3Zlcy5cbiAgICBmb3IgKDsgaTEgPCBuOyArK2kxKSB7XG4gICAgICBzdW1WYWx1ZSArPSBub2RlVmFsdWUgPSBub2Rlc1tpMV0udmFsdWU7XG4gICAgICBpZiAobm9kZVZhbHVlIDwgbWluVmFsdWUpIG1pblZhbHVlID0gbm9kZVZhbHVlO1xuICAgICAgaWYgKG5vZGVWYWx1ZSA+IG1heFZhbHVlKSBtYXhWYWx1ZSA9IG5vZGVWYWx1ZTtcbiAgICAgIGJldGEgPSBzdW1WYWx1ZSAqIHN1bVZhbHVlICogYWxwaGE7XG4gICAgICBuZXdSYXRpbyA9IE1hdGgubWF4KG1heFZhbHVlIC8gYmV0YSwgYmV0YSAvIG1pblZhbHVlKTtcbiAgICAgIGlmIChuZXdSYXRpbyA+IG1pblJhdGlvKSB7IHN1bVZhbHVlIC09IG5vZGVWYWx1ZTsgYnJlYWs7IH1cbiAgICAgIG1pblJhdGlvID0gbmV3UmF0aW87XG4gICAgfVxuXG4gICAgLy8gUG9zaXRpb24gYW5kIHJlY29yZCB0aGUgcm93IG9yaWVudGF0aW9uLlxuICAgIHJvd3MucHVzaChyb3cgPSB7dmFsdWU6IHN1bVZhbHVlLCBkaWNlOiBkeCA8IGR5LCBjaGlsZHJlbjogbm9kZXMuc2xpY2UoaTAsIGkxKX0pO1xuICAgIGlmIChyb3cuZGljZSkgdHJlZW1hcERpY2Uocm93LCB4MCwgeTAsIHgxLCB2YWx1ZSA/IHkwICs9IGR5ICogc3VtVmFsdWUgLyB2YWx1ZSA6IHkxKTtcbiAgICBlbHNlIHRyZWVtYXBTbGljZShyb3csIHgwLCB5MCwgdmFsdWUgPyB4MCArPSBkeCAqIHN1bVZhbHVlIC8gdmFsdWUgOiB4MSwgeTEpO1xuICAgIHZhbHVlIC09IHN1bVZhbHVlLCBpMCA9IGkxO1xuICB9XG5cbiAgcmV0dXJuIHJvd3M7XG59XG5cbmV4cG9ydCBkZWZhdWx0IChmdW5jdGlvbiBjdXN0b20ocmF0aW8pIHtcblxuICBmdW5jdGlvbiBzcXVhcmlmeShwYXJlbnQsIHgwLCB5MCwgeDEsIHkxKSB7XG4gICAgc3F1YXJpZnlSYXRpbyhyYXRpbywgcGFyZW50LCB4MCwgeTAsIHgxLCB5MSk7XG4gIH1cblxuICBzcXVhcmlmeS5yYXRpbyA9IGZ1bmN0aW9uKHgpIHtcbiAgICByZXR1cm4gY3VzdG9tKCh4ID0gK3gpID4gMSA/IHggOiAxKTtcbiAgfTtcblxuICByZXR1cm4gc3F1YXJpZnk7XG59KShwaGkpO1xuIiwiZXhwb3J0IGZ1bmN0aW9uIG9wdGlvbmFsKGYpIHtcbiAgcmV0dXJuIGYgPT0gbnVsbCA/IG51bGwgOiByZXF1aXJlZChmKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlcXVpcmVkKGYpIHtcbiAgaWYgKHR5cGVvZiBmICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBFcnJvcjtcbiAgcmV0dXJuIGY7XG59XG4iLCJleHBvcnQgZnVuY3Rpb24gY29uc3RhbnRaZXJvKCkge1xuICByZXR1cm4gMDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHg7XG4gIH07XG59XG4iLCJpbXBvcnQgcm91bmROb2RlIGZyb20gXCIuL3JvdW5kLmpzXCI7XG5pbXBvcnQgc3F1YXJpZnkgZnJvbSBcIi4vc3F1YXJpZnkuanNcIjtcbmltcG9ydCB7cmVxdWlyZWR9IGZyb20gXCIuLi9hY2Nlc3NvcnMuanNcIjtcbmltcG9ydCBjb25zdGFudCwge2NvbnN0YW50WmVyb30gZnJvbSBcIi4uL2NvbnN0YW50LmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgdGlsZSA9IHNxdWFyaWZ5LFxuICAgICAgcm91bmQgPSBmYWxzZSxcbiAgICAgIGR4ID0gMSxcbiAgICAgIGR5ID0gMSxcbiAgICAgIHBhZGRpbmdTdGFjayA9IFswXSxcbiAgICAgIHBhZGRpbmdJbm5lciA9IGNvbnN0YW50WmVybyxcbiAgICAgIHBhZGRpbmdUb3AgPSBjb25zdGFudFplcm8sXG4gICAgICBwYWRkaW5nUmlnaHQgPSBjb25zdGFudFplcm8sXG4gICAgICBwYWRkaW5nQm90dG9tID0gY29uc3RhbnRaZXJvLFxuICAgICAgcGFkZGluZ0xlZnQgPSBjb25zdGFudFplcm87XG5cbiAgZnVuY3Rpb24gdHJlZW1hcChyb290KSB7XG4gICAgcm9vdC54MCA9XG4gICAgcm9vdC55MCA9IDA7XG4gICAgcm9vdC54MSA9IGR4O1xuICAgIHJvb3QueTEgPSBkeTtcbiAgICByb290LmVhY2hCZWZvcmUocG9zaXRpb25Ob2RlKTtcbiAgICBwYWRkaW5nU3RhY2sgPSBbMF07XG4gICAgaWYgKHJvdW5kKSByb290LmVhY2hCZWZvcmUocm91bmROb2RlKTtcbiAgICByZXR1cm4gcm9vdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBvc2l0aW9uTm9kZShub2RlKSB7XG4gICAgdmFyIHAgPSBwYWRkaW5nU3RhY2tbbm9kZS5kZXB0aF0sXG4gICAgICAgIHgwID0gbm9kZS54MCArIHAsXG4gICAgICAgIHkwID0gbm9kZS55MCArIHAsXG4gICAgICAgIHgxID0gbm9kZS54MSAtIHAsXG4gICAgICAgIHkxID0gbm9kZS55MSAtIHA7XG4gICAgaWYgKHgxIDwgeDApIHgwID0geDEgPSAoeDAgKyB4MSkgLyAyO1xuICAgIGlmICh5MSA8IHkwKSB5MCA9IHkxID0gKHkwICsgeTEpIC8gMjtcbiAgICBub2RlLngwID0geDA7XG4gICAgbm9kZS55MCA9IHkwO1xuICAgIG5vZGUueDEgPSB4MTtcbiAgICBub2RlLnkxID0geTE7XG4gICAgaWYgKG5vZGUuY2hpbGRyZW4pIHtcbiAgICAgIHAgPSBwYWRkaW5nU3RhY2tbbm9kZS5kZXB0aCArIDFdID0gcGFkZGluZ0lubmVyKG5vZGUpIC8gMjtcbiAgICAgIHgwICs9IHBhZGRpbmdMZWZ0KG5vZGUpIC0gcDtcbiAgICAgIHkwICs9IHBhZGRpbmdUb3Aobm9kZSkgLSBwO1xuICAgICAgeDEgLT0gcGFkZGluZ1JpZ2h0KG5vZGUpIC0gcDtcbiAgICAgIHkxIC09IHBhZGRpbmdCb3R0b20obm9kZSkgLSBwO1xuICAgICAgaWYgKHgxIDwgeDApIHgwID0geDEgPSAoeDAgKyB4MSkgLyAyO1xuICAgICAgaWYgKHkxIDwgeTApIHkwID0geTEgPSAoeTAgKyB5MSkgLyAyO1xuICAgICAgdGlsZShub2RlLCB4MCwgeTAsIHgxLCB5MSk7XG4gICAgfVxuICB9XG5cbiAgdHJlZW1hcC5yb3VuZCA9IGZ1bmN0aW9uKHgpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChyb3VuZCA9ICEheCwgdHJlZW1hcCkgOiByb3VuZDtcbiAgfTtcblxuICB0cmVlbWFwLnNpemUgPSBmdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZHggPSAreFswXSwgZHkgPSAreFsxXSwgdHJlZW1hcCkgOiBbZHgsIGR5XTtcbiAgfTtcblxuICB0cmVlbWFwLnRpbGUgPSBmdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodGlsZSA9IHJlcXVpcmVkKHgpLCB0cmVlbWFwKSA6IHRpbGU7XG4gIH07XG5cbiAgdHJlZW1hcC5wYWRkaW5nID0gZnVuY3Rpb24oeCkge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gdHJlZW1hcC5wYWRkaW5nSW5uZXIoeCkucGFkZGluZ091dGVyKHgpIDogdHJlZW1hcC5wYWRkaW5nSW5uZXIoKTtcbiAgfTtcblxuICB0cmVlbWFwLnBhZGRpbmdJbm5lciA9IGZ1bmN0aW9uKHgpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChwYWRkaW5nSW5uZXIgPSB0eXBlb2YgeCA9PT0gXCJmdW5jdGlvblwiID8geCA6IGNvbnN0YW50KCt4KSwgdHJlZW1hcCkgOiBwYWRkaW5nSW5uZXI7XG4gIH07XG5cbiAgdHJlZW1hcC5wYWRkaW5nT3V0ZXIgPSBmdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyB0cmVlbWFwLnBhZGRpbmdUb3AoeCkucGFkZGluZ1JpZ2h0KHgpLnBhZGRpbmdCb3R0b20oeCkucGFkZGluZ0xlZnQoeCkgOiB0cmVlbWFwLnBhZGRpbmdUb3AoKTtcbiAgfTtcblxuICB0cmVlbWFwLnBhZGRpbmdUb3AgPSBmdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocGFkZGluZ1RvcCA9IHR5cGVvZiB4ID09PSBcImZ1bmN0aW9uXCIgPyB4IDogY29uc3RhbnQoK3gpLCB0cmVlbWFwKSA6IHBhZGRpbmdUb3A7XG4gIH07XG5cbiAgdHJlZW1hcC5wYWRkaW5nUmlnaHQgPSBmdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocGFkZGluZ1JpZ2h0ID0gdHlwZW9mIHggPT09IFwiZnVuY3Rpb25cIiA/IHggOiBjb25zdGFudCgreCksIHRyZWVtYXApIDogcGFkZGluZ1JpZ2h0O1xuICB9O1xuXG4gIHRyZWVtYXAucGFkZGluZ0JvdHRvbSA9IGZ1bmN0aW9uKHgpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChwYWRkaW5nQm90dG9tID0gdHlwZW9mIHggPT09IFwiZnVuY3Rpb25cIiA/IHggOiBjb25zdGFudCgreCksIHRyZWVtYXApIDogcGFkZGluZ0JvdHRvbTtcbiAgfTtcblxuICB0cmVlbWFwLnBhZGRpbmdMZWZ0ID0gZnVuY3Rpb24oeCkge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHBhZGRpbmdMZWZ0ID0gdHlwZW9mIHggPT09IFwiZnVuY3Rpb25cIiA/IHggOiBjb25zdGFudCgreCksIHRyZWVtYXApIDogcGFkZGluZ0xlZnQ7XG4gIH07XG5cbiAgcmV0dXJuIHRyZWVtYXA7XG59XG4iLCJpbXBvcnQgdmFsdWUgZnJvbSBcIi4vdmFsdWUuanNcIjtcbmltcG9ydCBudW1iZXJBcnJheSwge2lzTnVtYmVyQXJyYXl9IGZyb20gXCIuL251bWJlckFycmF5LmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgcmV0dXJuIChpc051bWJlckFycmF5KGIpID8gbnVtYmVyQXJyYXkgOiBnZW5lcmljQXJyYXkpKGEsIGIpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2VuZXJpY0FycmF5KGEsIGIpIHtcbiAgdmFyIG5iID0gYiA/IGIubGVuZ3RoIDogMCxcbiAgICAgIG5hID0gYSA/IE1hdGgubWluKG5iLCBhLmxlbmd0aCkgOiAwLFxuICAgICAgeCA9IG5ldyBBcnJheShuYSksXG4gICAgICBjID0gbmV3IEFycmF5KG5iKSxcbiAgICAgIGk7XG5cbiAgZm9yIChpID0gMDsgaSA8IG5hOyArK2kpIHhbaV0gPSB2YWx1ZShhW2ldLCBiW2ldKTtcbiAgZm9yICg7IGkgPCBuYjsgKytpKSBjW2ldID0gYltpXTtcblxuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIGZvciAoaSA9IDA7IGkgPCBuYTsgKytpKSBjW2ldID0geFtpXSh0KTtcbiAgICByZXR1cm4gYztcbiAgfTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgdmFyIGQgPSBuZXcgRGF0ZTtcbiAgcmV0dXJuIGEgPSArYSwgYiA9ICtiLCBmdW5jdGlvbih0KSB7XG4gICAgcmV0dXJuIGQuc2V0VGltZShhICogKDEgLSB0KSArIGIgKiB0KSwgZDtcbiAgfTtcbn1cbiIsImltcG9ydCB2YWx1ZSBmcm9tIFwiLi92YWx1ZS5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIHZhciBpID0ge30sXG4gICAgICBjID0ge30sXG4gICAgICBrO1xuXG4gIGlmIChhID09PSBudWxsIHx8IHR5cGVvZiBhICE9PSBcIm9iamVjdFwiKSBhID0ge307XG4gIGlmIChiID09PSBudWxsIHx8IHR5cGVvZiBiICE9PSBcIm9iamVjdFwiKSBiID0ge307XG5cbiAgZm9yIChrIGluIGIpIHtcbiAgICBpZiAoayBpbiBhKSB7XG4gICAgICBpW2tdID0gdmFsdWUoYVtrXSwgYltrXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNba10gPSBiW2tdO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgZm9yIChrIGluIGkpIGNba10gPSBpW2tdKHQpO1xuICAgIHJldHVybiBjO1xuICB9O1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYikge1xuICBpZiAoIWIpIGIgPSBbXTtcbiAgdmFyIG4gPSBhID8gTWF0aC5taW4oYi5sZW5ndGgsIGEubGVuZ3RoKSA6IDAsXG4gICAgICBjID0gYi5zbGljZSgpLFxuICAgICAgaTtcbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSBjW2ldID0gYVtpXSAqICgxIC0gdCkgKyBiW2ldICogdDtcbiAgICByZXR1cm4gYztcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzTnVtYmVyQXJyYXkoeCkge1xuICByZXR1cm4gQXJyYXlCdWZmZXIuaXNWaWV3KHgpICYmICEoeCBpbnN0YW5jZW9mIERhdGFWaWV3KTtcbn1cbiIsImltcG9ydCB7Y29sb3J9IGZyb20gXCJkMy1jb2xvclwiO1xuaW1wb3J0IHJnYiBmcm9tIFwiLi9yZ2IuanNcIjtcbmltcG9ydCB7Z2VuZXJpY0FycmF5fSBmcm9tIFwiLi9hcnJheS5qc1wiO1xuaW1wb3J0IGRhdGUgZnJvbSBcIi4vZGF0ZS5qc1wiO1xuaW1wb3J0IG51bWJlciBmcm9tIFwiLi9udW1iZXIuanNcIjtcbmltcG9ydCBvYmplY3QgZnJvbSBcIi4vb2JqZWN0LmpzXCI7XG5pbXBvcnQgc3RyaW5nIGZyb20gXCIuL3N0cmluZy5qc1wiO1xuaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuL2NvbnN0YW50LmpzXCI7XG5pbXBvcnQgbnVtYmVyQXJyYXksIHtpc051bWJlckFycmF5fSBmcm9tIFwiLi9udW1iZXJBcnJheS5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIHZhciB0ID0gdHlwZW9mIGIsIGM7XG4gIHJldHVybiBiID09IG51bGwgfHwgdCA9PT0gXCJib29sZWFuXCIgPyBjb25zdGFudChiKVxuICAgICAgOiAodCA9PT0gXCJudW1iZXJcIiA/IG51bWJlclxuICAgICAgOiB0ID09PSBcInN0cmluZ1wiID8gKChjID0gY29sb3IoYikpID8gKGIgPSBjLCByZ2IpIDogc3RyaW5nKVxuICAgICAgOiBiIGluc3RhbmNlb2YgY29sb3IgPyByZ2JcbiAgICAgIDogYiBpbnN0YW5jZW9mIERhdGUgPyBkYXRlXG4gICAgICA6IGlzTnVtYmVyQXJyYXkoYikgPyBudW1iZXJBcnJheVxuICAgICAgOiBBcnJheS5pc0FycmF5KGIpID8gZ2VuZXJpY0FycmF5XG4gICAgICA6IHR5cGVvZiBiLnZhbHVlT2YgIT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgYi50b1N0cmluZyAhPT0gXCJmdW5jdGlvblwiIHx8IGlzTmFOKGIpID8gb2JqZWN0XG4gICAgICA6IG51bWJlcikoYSwgYik7XG59XG4iLCJpbXBvcnQge2xhYiBhcyBjb2xvckxhYn0gZnJvbSBcImQzLWNvbG9yXCI7XG5pbXBvcnQgY29sb3IgZnJvbSBcIi4vY29sb3IuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbGFiKHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGwgPSBjb2xvcigoc3RhcnQgPSBjb2xvckxhYihzdGFydCkpLmwsIChlbmQgPSBjb2xvckxhYihlbmQpKS5sKSxcbiAgICAgIGEgPSBjb2xvcihzdGFydC5hLCBlbmQuYSksXG4gICAgICBiID0gY29sb3Ioc3RhcnQuYiwgZW5kLmIpLFxuICAgICAgb3BhY2l0eSA9IGNvbG9yKHN0YXJ0Lm9wYWNpdHksIGVuZC5vcGFjaXR5KTtcbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICBzdGFydC5sID0gbCh0KTtcbiAgICBzdGFydC5hID0gYSh0KTtcbiAgICBzdGFydC5iID0gYih0KTtcbiAgICBzdGFydC5vcGFjaXR5ID0gb3BhY2l0eSh0KTtcbiAgICByZXR1cm4gc3RhcnQgKyBcIlwiO1xuICB9O1xufVxuIiwidmFyIGUxMCA9IE1hdGguc3FydCg1MCksXG4gICAgZTUgPSBNYXRoLnNxcnQoMTApLFxuICAgIGUyID0gTWF0aC5zcXJ0KDIpO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzdGFydCwgc3RvcCwgY291bnQpIHtcbiAgdmFyIHJldmVyc2UsXG4gICAgICBpID0gLTEsXG4gICAgICBuLFxuICAgICAgdGlja3MsXG4gICAgICBzdGVwO1xuXG4gIHN0b3AgPSArc3RvcCwgc3RhcnQgPSArc3RhcnQsIGNvdW50ID0gK2NvdW50O1xuICBpZiAoc3RhcnQgPT09IHN0b3AgJiYgY291bnQgPiAwKSByZXR1cm4gW3N0YXJ0XTtcbiAgaWYgKHJldmVyc2UgPSBzdG9wIDwgc3RhcnQpIG4gPSBzdGFydCwgc3RhcnQgPSBzdG9wLCBzdG9wID0gbjtcbiAgaWYgKChzdGVwID0gdGlja0luY3JlbWVudChzdGFydCwgc3RvcCwgY291bnQpKSA9PT0gMCB8fCAhaXNGaW5pdGUoc3RlcCkpIHJldHVybiBbXTtcblxuICBpZiAoc3RlcCA+IDApIHtcbiAgICBzdGFydCA9IE1hdGguY2VpbChzdGFydCAvIHN0ZXApO1xuICAgIHN0b3AgPSBNYXRoLmZsb29yKHN0b3AgLyBzdGVwKTtcbiAgICB0aWNrcyA9IG5ldyBBcnJheShuID0gTWF0aC5jZWlsKHN0b3AgLSBzdGFydCArIDEpKTtcbiAgICB3aGlsZSAoKytpIDwgbikgdGlja3NbaV0gPSAoc3RhcnQgKyBpKSAqIHN0ZXA7XG4gIH0gZWxzZSB7XG4gICAgc3RlcCA9IC1zdGVwO1xuICAgIHN0YXJ0ID0gTWF0aC5jZWlsKHN0YXJ0ICogc3RlcCk7XG4gICAgc3RvcCA9IE1hdGguZmxvb3Ioc3RvcCAqIHN0ZXApO1xuICAgIHRpY2tzID0gbmV3IEFycmF5KG4gPSBNYXRoLmNlaWwoc3RvcCAtIHN0YXJ0ICsgMSkpO1xuICAgIHdoaWxlICgrK2kgPCBuKSB0aWNrc1tpXSA9IChzdGFydCArIGkpIC8gc3RlcDtcbiAgfVxuXG4gIGlmIChyZXZlcnNlKSB0aWNrcy5yZXZlcnNlKCk7XG5cbiAgcmV0dXJuIHRpY2tzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdGlja0luY3JlbWVudChzdGFydCwgc3RvcCwgY291bnQpIHtcbiAgdmFyIHN0ZXAgPSAoc3RvcCAtIHN0YXJ0KSAvIE1hdGgubWF4KDAsIGNvdW50KSxcbiAgICAgIHBvd2VyID0gTWF0aC5mbG9vcihNYXRoLmxvZyhzdGVwKSAvIE1hdGguTE4xMCksXG4gICAgICBlcnJvciA9IHN0ZXAgLyBNYXRoLnBvdygxMCwgcG93ZXIpO1xuICByZXR1cm4gcG93ZXIgPj0gMFxuICAgICAgPyAoZXJyb3IgPj0gZTEwID8gMTAgOiBlcnJvciA+PSBlNSA/IDUgOiBlcnJvciA+PSBlMiA/IDIgOiAxKSAqIE1hdGgucG93KDEwLCBwb3dlcilcbiAgICAgIDogLU1hdGgucG93KDEwLCAtcG93ZXIpIC8gKGVycm9yID49IGUxMCA/IDEwIDogZXJyb3IgPj0gZTUgPyA1IDogZXJyb3IgPj0gZTIgPyAyIDogMSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0aWNrU3RlcChzdGFydCwgc3RvcCwgY291bnQpIHtcbiAgdmFyIHN0ZXAwID0gTWF0aC5hYnMoc3RvcCAtIHN0YXJ0KSAvIE1hdGgubWF4KDAsIGNvdW50KSxcbiAgICAgIHN0ZXAxID0gTWF0aC5wb3coMTAsIE1hdGguZmxvb3IoTWF0aC5sb2coc3RlcDApIC8gTWF0aC5MTjEwKSksXG4gICAgICBlcnJvciA9IHN0ZXAwIC8gc3RlcDE7XG4gIGlmIChlcnJvciA+PSBlMTApIHN0ZXAxICo9IDEwO1xuICBlbHNlIGlmIChlcnJvciA+PSBlNSkgc3RlcDEgKj0gNTtcbiAgZWxzZSBpZiAoZXJyb3IgPj0gZTIpIHN0ZXAxICo9IDI7XG4gIHJldHVybiBzdG9wIDwgc3RhcnQgPyAtc3RlcDEgOiBzdGVwMTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgcmV0dXJuIGEgPCBiID8gLTEgOiBhID4gYiA/IDEgOiBhID49IGIgPyAwIDogTmFOO1xufVxuIiwiaW1wb3J0IGFzY2VuZGluZyBmcm9tIFwiLi9hc2NlbmRpbmcuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oZikge1xuICBsZXQgZGVsdGEgPSBmO1xuICBsZXQgY29tcGFyZSA9IGY7XG5cbiAgaWYgKGYubGVuZ3RoID09PSAxKSB7XG4gICAgZGVsdGEgPSAoZCwgeCkgPT4gZihkKSAtIHg7XG4gICAgY29tcGFyZSA9IGFzY2VuZGluZ0NvbXBhcmF0b3IoZik7XG4gIH1cblxuICBmdW5jdGlvbiBsZWZ0KGEsIHgsIGxvLCBoaSkge1xuICAgIGlmIChsbyA9PSBudWxsKSBsbyA9IDA7XG4gICAgaWYgKGhpID09IG51bGwpIGhpID0gYS5sZW5ndGg7XG4gICAgd2hpbGUgKGxvIDwgaGkpIHtcbiAgICAgIGNvbnN0IG1pZCA9IChsbyArIGhpKSA+Pj4gMTtcbiAgICAgIGlmIChjb21wYXJlKGFbbWlkXSwgeCkgPCAwKSBsbyA9IG1pZCArIDE7XG4gICAgICBlbHNlIGhpID0gbWlkO1xuICAgIH1cbiAgICByZXR1cm4gbG87XG4gIH1cblxuICBmdW5jdGlvbiByaWdodChhLCB4LCBsbywgaGkpIHtcbiAgICBpZiAobG8gPT0gbnVsbCkgbG8gPSAwO1xuICAgIGlmIChoaSA9PSBudWxsKSBoaSA9IGEubGVuZ3RoO1xuICAgIHdoaWxlIChsbyA8IGhpKSB7XG4gICAgICBjb25zdCBtaWQgPSAobG8gKyBoaSkgPj4+IDE7XG4gICAgICBpZiAoY29tcGFyZShhW21pZF0sIHgpID4gMCkgaGkgPSBtaWQ7XG4gICAgICBlbHNlIGxvID0gbWlkICsgMTtcbiAgICB9XG4gICAgcmV0dXJuIGxvO1xuICB9XG5cbiAgZnVuY3Rpb24gY2VudGVyKGEsIHgsIGxvLCBoaSkge1xuICAgIGlmIChsbyA9PSBudWxsKSBsbyA9IDA7XG4gICAgaWYgKGhpID09IG51bGwpIGhpID0gYS5sZW5ndGg7XG4gICAgY29uc3QgaSA9IGxlZnQoYSwgeCwgbG8sIGhpIC0gMSk7XG4gICAgcmV0dXJuIGkgPiBsbyAmJiBkZWx0YShhW2kgLSAxXSwgeCkgPiAtZGVsdGEoYVtpXSwgeCkgPyBpIC0gMSA6IGk7XG4gIH1cblxuICByZXR1cm4ge2xlZnQsIGNlbnRlciwgcmlnaHR9O1xufVxuXG5mdW5jdGlvbiBhc2NlbmRpbmdDb21wYXJhdG9yKGYpIHtcbiAgcmV0dXJuIChkLCB4KSA9PiBhc2NlbmRpbmcoZihkKSwgeCk7XG59XG4iLCJpbXBvcnQgYXNjZW5kaW5nIGZyb20gXCIuL2FzY2VuZGluZy5qc1wiO1xuaW1wb3J0IGJpc2VjdG9yIGZyb20gXCIuL2Jpc2VjdG9yLmpzXCI7XG5pbXBvcnQgbnVtYmVyIGZyb20gXCIuL251bWJlci5qc1wiO1xuXG5jb25zdCBhc2NlbmRpbmdCaXNlY3QgPSBiaXNlY3Rvcihhc2NlbmRpbmcpO1xuZXhwb3J0IGNvbnN0IGJpc2VjdFJpZ2h0ID0gYXNjZW5kaW5nQmlzZWN0LnJpZ2h0O1xuZXhwb3J0IGNvbnN0IGJpc2VjdExlZnQgPSBhc2NlbmRpbmdCaXNlY3QubGVmdDtcbmV4cG9ydCBjb25zdCBiaXNlY3RDZW50ZXIgPSBiaXNlY3RvcihudW1iZXIpLmNlbnRlcjtcbmV4cG9ydCBkZWZhdWx0IGJpc2VjdFJpZ2h0O1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCkge1xuICByZXR1cm4geCA9PT0gbnVsbCA/IE5hTiA6ICt4O1xufVxuXG5leHBvcnQgZnVuY3Rpb24qIG51bWJlcnModmFsdWVzLCB2YWx1ZW9mKSB7XG4gIGlmICh2YWx1ZW9mID09PSB1bmRlZmluZWQpIHtcbiAgICBmb3IgKGxldCB2YWx1ZSBvZiB2YWx1ZXMpIHtcbiAgICAgIGlmICh2YWx1ZSAhPSBudWxsICYmICh2YWx1ZSA9ICt2YWx1ZSkgPj0gdmFsdWUpIHtcbiAgICAgICAgeWllbGQgdmFsdWU7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGxldCBpbmRleCA9IC0xO1xuICAgIGZvciAobGV0IHZhbHVlIG9mIHZhbHVlcykge1xuICAgICAgaWYgKCh2YWx1ZSA9IHZhbHVlb2YodmFsdWUsICsraW5kZXgsIHZhbHVlcykpICE9IG51bGwgJiYgKHZhbHVlID0gK3ZhbHVlKSA+PSB2YWx1ZSkge1xuICAgICAgICB5aWVsZCB2YWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgcmV0dXJuIGEgPSArYSwgYiA9ICtiLCBmdW5jdGlvbih0KSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQoYSAqICgxIC0gdCkgKyBiICogdCk7XG4gIH07XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBudW1iZXIoeCkge1xuICByZXR1cm4gK3g7XG59XG4iLCJpbXBvcnQge2Jpc2VjdH0gZnJvbSBcImQzLWFycmF5XCI7XG5pbXBvcnQge2ludGVycG9sYXRlIGFzIGludGVycG9sYXRlVmFsdWUsIGludGVycG9sYXRlTnVtYmVyLCBpbnRlcnBvbGF0ZVJvdW5kfSBmcm9tIFwiZDMtaW50ZXJwb2xhdGVcIjtcbmltcG9ydCBjb25zdGFudCBmcm9tIFwiLi9jb25zdGFudC5qc1wiO1xuaW1wb3J0IG51bWJlciBmcm9tIFwiLi9udW1iZXIuanNcIjtcblxudmFyIHVuaXQgPSBbMCwgMV07XG5cbmV4cG9ydCBmdW5jdGlvbiBpZGVudGl0eSh4KSB7XG4gIHJldHVybiB4O1xufVxuXG5mdW5jdGlvbiBub3JtYWxpemUoYSwgYikge1xuICByZXR1cm4gKGIgLT0gKGEgPSArYSkpXG4gICAgICA/IGZ1bmN0aW9uKHgpIHsgcmV0dXJuICh4IC0gYSkgLyBiOyB9XG4gICAgICA6IGNvbnN0YW50KGlzTmFOKGIpID8gTmFOIDogMC41KTtcbn1cblxuZnVuY3Rpb24gY2xhbXBlcihhLCBiKSB7XG4gIHZhciB0O1xuICBpZiAoYSA+IGIpIHQgPSBhLCBhID0gYiwgYiA9IHQ7XG4gIHJldHVybiBmdW5jdGlvbih4KSB7IHJldHVybiBNYXRoLm1heChhLCBNYXRoLm1pbihiLCB4KSk7IH07XG59XG5cbi8vIG5vcm1hbGl6ZShhLCBiKSh4KSB0YWtlcyBhIGRvbWFpbiB2YWx1ZSB4IGluIFthLGJdIGFuZCByZXR1cm5zIHRoZSBjb3JyZXNwb25kaW5nIHBhcmFtZXRlciB0IGluIFswLDFdLlxuLy8gaW50ZXJwb2xhdGUoYSwgYikodCkgdGFrZXMgYSBwYXJhbWV0ZXIgdCBpbiBbMCwxXSBhbmQgcmV0dXJucyB0aGUgY29ycmVzcG9uZGluZyByYW5nZSB2YWx1ZSB4IGluIFthLGJdLlxuZnVuY3Rpb24gYmltYXAoZG9tYWluLCByYW5nZSwgaW50ZXJwb2xhdGUpIHtcbiAgdmFyIGQwID0gZG9tYWluWzBdLCBkMSA9IGRvbWFpblsxXSwgcjAgPSByYW5nZVswXSwgcjEgPSByYW5nZVsxXTtcbiAgaWYgKGQxIDwgZDApIGQwID0gbm9ybWFsaXplKGQxLCBkMCksIHIwID0gaW50ZXJwb2xhdGUocjEsIHIwKTtcbiAgZWxzZSBkMCA9IG5vcm1hbGl6ZShkMCwgZDEpLCByMCA9IGludGVycG9sYXRlKHIwLCByMSk7XG4gIHJldHVybiBmdW5jdGlvbih4KSB7IHJldHVybiByMChkMCh4KSk7IH07XG59XG5cbmZ1bmN0aW9uIHBvbHltYXAoZG9tYWluLCByYW5nZSwgaW50ZXJwb2xhdGUpIHtcbiAgdmFyIGogPSBNYXRoLm1pbihkb21haW4ubGVuZ3RoLCByYW5nZS5sZW5ndGgpIC0gMSxcbiAgICAgIGQgPSBuZXcgQXJyYXkoaiksXG4gICAgICByID0gbmV3IEFycmF5KGopLFxuICAgICAgaSA9IC0xO1xuXG4gIC8vIFJldmVyc2UgZGVzY2VuZGluZyBkb21haW5zLlxuICBpZiAoZG9tYWluW2pdIDwgZG9tYWluWzBdKSB7XG4gICAgZG9tYWluID0gZG9tYWluLnNsaWNlKCkucmV2ZXJzZSgpO1xuICAgIHJhbmdlID0gcmFuZ2Uuc2xpY2UoKS5yZXZlcnNlKCk7XG4gIH1cblxuICB3aGlsZSAoKytpIDwgaikge1xuICAgIGRbaV0gPSBub3JtYWxpemUoZG9tYWluW2ldLCBkb21haW5baSArIDFdKTtcbiAgICByW2ldID0gaW50ZXJwb2xhdGUocmFuZ2VbaV0sIHJhbmdlW2kgKyAxXSk7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24oeCkge1xuICAgIHZhciBpID0gYmlzZWN0KGRvbWFpbiwgeCwgMSwgaikgLSAxO1xuICAgIHJldHVybiByW2ldKGRbaV0oeCkpO1xuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY29weShzb3VyY2UsIHRhcmdldCkge1xuICByZXR1cm4gdGFyZ2V0XG4gICAgICAuZG9tYWluKHNvdXJjZS5kb21haW4oKSlcbiAgICAgIC5yYW5nZShzb3VyY2UucmFuZ2UoKSlcbiAgICAgIC5pbnRlcnBvbGF0ZShzb3VyY2UuaW50ZXJwb2xhdGUoKSlcbiAgICAgIC5jbGFtcChzb3VyY2UuY2xhbXAoKSlcbiAgICAgIC51bmtub3duKHNvdXJjZS51bmtub3duKCkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdHJhbnNmb3JtZXIoKSB7XG4gIHZhciBkb21haW4gPSB1bml0LFxuICAgICAgcmFuZ2UgPSB1bml0LFxuICAgICAgaW50ZXJwb2xhdGUgPSBpbnRlcnBvbGF0ZVZhbHVlLFxuICAgICAgdHJhbnNmb3JtLFxuICAgICAgdW50cmFuc2Zvcm0sXG4gICAgICB1bmtub3duLFxuICAgICAgY2xhbXAgPSBpZGVudGl0eSxcbiAgICAgIHBpZWNld2lzZSxcbiAgICAgIG91dHB1dCxcbiAgICAgIGlucHV0O1xuXG4gIGZ1bmN0aW9uIHJlc2NhbGUoKSB7XG4gICAgdmFyIG4gPSBNYXRoLm1pbihkb21haW4ubGVuZ3RoLCByYW5nZS5sZW5ndGgpO1xuICAgIGlmIChjbGFtcCAhPT0gaWRlbnRpdHkpIGNsYW1wID0gY2xhbXBlcihkb21haW5bMF0sIGRvbWFpbltuIC0gMV0pO1xuICAgIHBpZWNld2lzZSA9IG4gPiAyID8gcG9seW1hcCA6IGJpbWFwO1xuICAgIG91dHB1dCA9IGlucHV0ID0gbnVsbDtcbiAgICByZXR1cm4gc2NhbGU7XG4gIH1cblxuICBmdW5jdGlvbiBzY2FsZSh4KSB7XG4gICAgcmV0dXJuIGlzTmFOKHggPSAreCkgPyB1bmtub3duIDogKG91dHB1dCB8fCAob3V0cHV0ID0gcGllY2V3aXNlKGRvbWFpbi5tYXAodHJhbnNmb3JtKSwgcmFuZ2UsIGludGVycG9sYXRlKSkpKHRyYW5zZm9ybShjbGFtcCh4KSkpO1xuICB9XG5cbiAgc2NhbGUuaW52ZXJ0ID0gZnVuY3Rpb24oeSkge1xuICAgIHJldHVybiBjbGFtcCh1bnRyYW5zZm9ybSgoaW5wdXQgfHwgKGlucHV0ID0gcGllY2V3aXNlKHJhbmdlLCBkb21haW4ubWFwKHRyYW5zZm9ybSksIGludGVycG9sYXRlTnVtYmVyKSkpKHkpKSk7XG4gIH07XG5cbiAgc2NhbGUuZG9tYWluID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGRvbWFpbiA9IEFycmF5LmZyb20oXywgbnVtYmVyKSwgcmVzY2FsZSgpKSA6IGRvbWFpbi5zbGljZSgpO1xuICB9O1xuXG4gIHNjYWxlLnJhbmdlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHJhbmdlID0gQXJyYXkuZnJvbShfKSwgcmVzY2FsZSgpKSA6IHJhbmdlLnNsaWNlKCk7XG4gIH07XG5cbiAgc2NhbGUucmFuZ2VSb3VuZCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gcmFuZ2UgPSBBcnJheS5mcm9tKF8pLCBpbnRlcnBvbGF0ZSA9IGludGVycG9sYXRlUm91bmQsIHJlc2NhbGUoKTtcbiAgfTtcblxuICBzY2FsZS5jbGFtcCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChjbGFtcCA9IF8gPyB0cnVlIDogaWRlbnRpdHksIHJlc2NhbGUoKSkgOiBjbGFtcCAhPT0gaWRlbnRpdHk7XG4gIH07XG5cbiAgc2NhbGUuaW50ZXJwb2xhdGUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoaW50ZXJwb2xhdGUgPSBfLCByZXNjYWxlKCkpIDogaW50ZXJwb2xhdGU7XG4gIH07XG5cbiAgc2NhbGUudW5rbm93biA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh1bmtub3duID0gXywgc2NhbGUpIDogdW5rbm93bjtcbiAgfTtcblxuICByZXR1cm4gZnVuY3Rpb24odCwgdSkge1xuICAgIHRyYW5zZm9ybSA9IHQsIHVudHJhbnNmb3JtID0gdTtcbiAgICByZXR1cm4gcmVzY2FsZSgpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjb250aW51b3VzKCkge1xuICByZXR1cm4gdHJhbnNmb3JtZXIoKShpZGVudGl0eSwgaWRlbnRpdHkpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY29uc3RhbnRzKHgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB4O1xuICB9O1xufVxuIiwiZXhwb3J0IGZ1bmN0aW9uIGluaXRSYW5nZShkb21haW4sIHJhbmdlKSB7XG4gIHN3aXRjaCAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgIGNhc2UgMDogYnJlYWs7XG4gICAgY2FzZSAxOiB0aGlzLnJhbmdlKGRvbWFpbik7IGJyZWFrO1xuICAgIGRlZmF1bHQ6IHRoaXMucmFuZ2UocmFuZ2UpLmRvbWFpbihkb21haW4pOyBicmVhaztcbiAgfVxuICByZXR1cm4gdGhpcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGluaXRJbnRlcnBvbGF0b3IoZG9tYWluLCBpbnRlcnBvbGF0b3IpIHtcbiAgc3dpdGNoIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgY2FzZSAwOiBicmVhaztcbiAgICBjYXNlIDE6IHtcbiAgICAgIGlmICh0eXBlb2YgZG9tYWluID09PSBcImZ1bmN0aW9uXCIpIHRoaXMuaW50ZXJwb2xhdG9yKGRvbWFpbik7XG4gICAgICBlbHNlIHRoaXMucmFuZ2UoZG9tYWluKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBkZWZhdWx0OiB7XG4gICAgICB0aGlzLmRvbWFpbihkb21haW4pO1xuICAgICAgaWYgKHR5cGVvZiBpbnRlcnBvbGF0b3IgPT09IFwiZnVuY3Rpb25cIikgdGhpcy5pbnRlcnBvbGF0b3IoaW50ZXJwb2xhdG9yKTtcbiAgICAgIGVsc2UgdGhpcy5yYW5nZShpbnRlcnBvbGF0b3IpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiB0aGlzO1xufVxuIiwiLy8gW1tmaWxsXWFsaWduXVtzaWduXVtzeW1ib2xdWzBdW3dpZHRoXVssXVsucHJlY2lzaW9uXVt+XVt0eXBlXVxudmFyIHJlID0gL14oPzooLik/KFs8Pj1eXSkpPyhbK1xcLSggXSk/KFskI10pPygwKT8oXFxkKyk/KCwpPyhcXC5cXGQrKT8ofik/KFthLXolXSk/JC9pO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmb3JtYXRTcGVjaWZpZXIoc3BlY2lmaWVyKSB7XG4gIGlmICghKG1hdGNoID0gcmUuZXhlYyhzcGVjaWZpZXIpKSkgdGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBmb3JtYXQ6IFwiICsgc3BlY2lmaWVyKTtcbiAgdmFyIG1hdGNoO1xuICByZXR1cm4gbmV3IEZvcm1hdFNwZWNpZmllcih7XG4gICAgZmlsbDogbWF0Y2hbMV0sXG4gICAgYWxpZ246IG1hdGNoWzJdLFxuICAgIHNpZ246IG1hdGNoWzNdLFxuICAgIHN5bWJvbDogbWF0Y2hbNF0sXG4gICAgemVybzogbWF0Y2hbNV0sXG4gICAgd2lkdGg6IG1hdGNoWzZdLFxuICAgIGNvbW1hOiBtYXRjaFs3XSxcbiAgICBwcmVjaXNpb246IG1hdGNoWzhdICYmIG1hdGNoWzhdLnNsaWNlKDEpLFxuICAgIHRyaW06IG1hdGNoWzldLFxuICAgIHR5cGU6IG1hdGNoWzEwXVxuICB9KTtcbn1cblxuZm9ybWF0U3BlY2lmaWVyLnByb3RvdHlwZSA9IEZvcm1hdFNwZWNpZmllci5wcm90b3R5cGU7IC8vIGluc3RhbmNlb2ZcblxuZXhwb3J0IGZ1bmN0aW9uIEZvcm1hdFNwZWNpZmllcihzcGVjaWZpZXIpIHtcbiAgdGhpcy5maWxsID0gc3BlY2lmaWVyLmZpbGwgPT09IHVuZGVmaW5lZCA/IFwiIFwiIDogc3BlY2lmaWVyLmZpbGwgKyBcIlwiO1xuICB0aGlzLmFsaWduID0gc3BlY2lmaWVyLmFsaWduID09PSB1bmRlZmluZWQgPyBcIj5cIiA6IHNwZWNpZmllci5hbGlnbiArIFwiXCI7XG4gIHRoaXMuc2lnbiA9IHNwZWNpZmllci5zaWduID09PSB1bmRlZmluZWQgPyBcIi1cIiA6IHNwZWNpZmllci5zaWduICsgXCJcIjtcbiAgdGhpcy5zeW1ib2wgPSBzcGVjaWZpZXIuc3ltYm9sID09PSB1bmRlZmluZWQgPyBcIlwiIDogc3BlY2lmaWVyLnN5bWJvbCArIFwiXCI7XG4gIHRoaXMuemVybyA9ICEhc3BlY2lmaWVyLnplcm87XG4gIHRoaXMud2lkdGggPSBzcGVjaWZpZXIud2lkdGggPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6ICtzcGVjaWZpZXIud2lkdGg7XG4gIHRoaXMuY29tbWEgPSAhIXNwZWNpZmllci5jb21tYTtcbiAgdGhpcy5wcmVjaXNpb24gPSBzcGVjaWZpZXIucHJlY2lzaW9uID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiArc3BlY2lmaWVyLnByZWNpc2lvbjtcbiAgdGhpcy50cmltID0gISFzcGVjaWZpZXIudHJpbTtcbiAgdGhpcy50eXBlID0gc3BlY2lmaWVyLnR5cGUgPT09IHVuZGVmaW5lZCA/IFwiXCIgOiBzcGVjaWZpZXIudHlwZSArIFwiXCI7XG59XG5cbkZvcm1hdFNwZWNpZmllci5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuZmlsbFxuICAgICAgKyB0aGlzLmFsaWduXG4gICAgICArIHRoaXMuc2lnblxuICAgICAgKyB0aGlzLnN5bWJvbFxuICAgICAgKyAodGhpcy56ZXJvID8gXCIwXCIgOiBcIlwiKVxuICAgICAgKyAodGhpcy53aWR0aCA9PT0gdW5kZWZpbmVkID8gXCJcIiA6IE1hdGgubWF4KDEsIHRoaXMud2lkdGggfCAwKSlcbiAgICAgICsgKHRoaXMuY29tbWEgPyBcIixcIiA6IFwiXCIpXG4gICAgICArICh0aGlzLnByZWNpc2lvbiA9PT0gdW5kZWZpbmVkID8gXCJcIiA6IFwiLlwiICsgTWF0aC5tYXgoMCwgdGhpcy5wcmVjaXNpb24gfCAwKSlcbiAgICAgICsgKHRoaXMudHJpbSA/IFwiflwiIDogXCJcIilcbiAgICAgICsgdGhpcy50eXBlO1xufTtcbiIsImltcG9ydCB7Zm9ybWF0RGVjaW1hbFBhcnRzfSBmcm9tIFwiLi9mb3JtYXREZWNpbWFsLmpzXCI7XG5cbmV4cG9ydCB2YXIgcHJlZml4RXhwb25lbnQ7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgsIHApIHtcbiAgdmFyIGQgPSBmb3JtYXREZWNpbWFsUGFydHMoeCwgcCk7XG4gIGlmICghZCkgcmV0dXJuIHggKyBcIlwiO1xuICB2YXIgY29lZmZpY2llbnQgPSBkWzBdLFxuICAgICAgZXhwb25lbnQgPSBkWzFdLFxuICAgICAgaSA9IGV4cG9uZW50IC0gKHByZWZpeEV4cG9uZW50ID0gTWF0aC5tYXgoLTgsIE1hdGgubWluKDgsIE1hdGguZmxvb3IoZXhwb25lbnQgLyAzKSkpICogMykgKyAxLFxuICAgICAgbiA9IGNvZWZmaWNpZW50Lmxlbmd0aDtcbiAgcmV0dXJuIGkgPT09IG4gPyBjb2VmZmljaWVudFxuICAgICAgOiBpID4gbiA/IGNvZWZmaWNpZW50ICsgbmV3IEFycmF5KGkgLSBuICsgMSkuam9pbihcIjBcIilcbiAgICAgIDogaSA+IDAgPyBjb2VmZmljaWVudC5zbGljZSgwLCBpKSArIFwiLlwiICsgY29lZmZpY2llbnQuc2xpY2UoaSlcbiAgICAgIDogXCIwLlwiICsgbmV3IEFycmF5KDEgLSBpKS5qb2luKFwiMFwiKSArIGZvcm1hdERlY2ltYWxQYXJ0cyh4LCBNYXRoLm1heCgwLCBwICsgaSAtIDEpKVswXTsgLy8gbGVzcyB0aGFuIDF5IVxufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCkge1xuICByZXR1cm4gTWF0aC5hYnMoeCA9IE1hdGgucm91bmQoeCkpID49IDFlMjFcbiAgICAgID8geC50b0xvY2FsZVN0cmluZyhcImVuXCIpLnJlcGxhY2UoLywvZywgXCJcIilcbiAgICAgIDogeC50b1N0cmluZygxMCk7XG59XG5cbi8vIENvbXB1dGVzIHRoZSBkZWNpbWFsIGNvZWZmaWNpZW50IGFuZCBleHBvbmVudCBvZiB0aGUgc3BlY2lmaWVkIG51bWJlciB4IHdpdGhcbi8vIHNpZ25pZmljYW50IGRpZ2l0cyBwLCB3aGVyZSB4IGlzIHBvc2l0aXZlIGFuZCBwIGlzIGluIFsxLCAyMV0gb3IgdW5kZWZpbmVkLlxuLy8gRm9yIGV4YW1wbGUsIGZvcm1hdERlY2ltYWxQYXJ0cygxLjIzKSByZXR1cm5zIFtcIjEyM1wiLCAwXS5cbmV4cG9ydCBmdW5jdGlvbiBmb3JtYXREZWNpbWFsUGFydHMoeCwgcCkge1xuICBpZiAoKGkgPSAoeCA9IHAgPyB4LnRvRXhwb25lbnRpYWwocCAtIDEpIDogeC50b0V4cG9uZW50aWFsKCkpLmluZGV4T2YoXCJlXCIpKSA8IDApIHJldHVybiBudWxsOyAvLyBOYU4sIMKxSW5maW5pdHlcbiAgdmFyIGksIGNvZWZmaWNpZW50ID0geC5zbGljZSgwLCBpKTtcblxuICAvLyBUaGUgc3RyaW5nIHJldHVybmVkIGJ5IHRvRXhwb25lbnRpYWwgZWl0aGVyIGhhcyB0aGUgZm9ybSBcXGRcXC5cXGQrZVstK11cXGQrXG4gIC8vIChlLmcuLCAxLjJlKzMpIG9yIHRoZSBmb3JtIFxcZGVbLStdXFxkKyAoZS5nLiwgMWUrMykuXG4gIHJldHVybiBbXG4gICAgY29lZmZpY2llbnQubGVuZ3RoID4gMSA/IGNvZWZmaWNpZW50WzBdICsgY29lZmZpY2llbnQuc2xpY2UoMikgOiBjb2VmZmljaWVudCxcbiAgICAreC5zbGljZShpICsgMSlcbiAgXTtcbn1cbiIsImltcG9ydCB7Zm9ybWF0RGVjaW1hbFBhcnRzfSBmcm9tIFwiLi9mb3JtYXREZWNpbWFsLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIHggPSBmb3JtYXREZWNpbWFsUGFydHMoTWF0aC5hYnMoeCkpLCB4ID8geFsxXSA6IE5hTjtcbn1cbiIsImltcG9ydCB7Zm9ybWF0RGVjaW1hbFBhcnRzfSBmcm9tIFwiLi9mb3JtYXREZWNpbWFsLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgsIHApIHtcbiAgdmFyIGQgPSBmb3JtYXREZWNpbWFsUGFydHMoeCwgcCk7XG4gIGlmICghZCkgcmV0dXJuIHggKyBcIlwiO1xuICB2YXIgY29lZmZpY2llbnQgPSBkWzBdLFxuICAgICAgZXhwb25lbnQgPSBkWzFdO1xuICByZXR1cm4gZXhwb25lbnQgPCAwID8gXCIwLlwiICsgbmV3IEFycmF5KC1leHBvbmVudCkuam9pbihcIjBcIikgKyBjb2VmZmljaWVudFxuICAgICAgOiBjb2VmZmljaWVudC5sZW5ndGggPiBleHBvbmVudCArIDEgPyBjb2VmZmljaWVudC5zbGljZSgwLCBleHBvbmVudCArIDEpICsgXCIuXCIgKyBjb2VmZmljaWVudC5zbGljZShleHBvbmVudCArIDEpXG4gICAgICA6IGNvZWZmaWNpZW50ICsgbmV3IEFycmF5KGV4cG9uZW50IC0gY29lZmZpY2llbnQubGVuZ3RoICsgMikuam9pbihcIjBcIik7XG59XG4iLCJpbXBvcnQgZm9ybWF0RGVjaW1hbCBmcm9tIFwiLi9mb3JtYXREZWNpbWFsLmpzXCI7XG5pbXBvcnQgZm9ybWF0UHJlZml4QXV0byBmcm9tIFwiLi9mb3JtYXRQcmVmaXhBdXRvLmpzXCI7XG5pbXBvcnQgZm9ybWF0Um91bmRlZCBmcm9tIFwiLi9mb3JtYXRSb3VuZGVkLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgXCIlXCI6ICh4LCBwKSA9PiAoeCAqIDEwMCkudG9GaXhlZChwKSxcbiAgXCJiXCI6ICh4KSA9PiBNYXRoLnJvdW5kKHgpLnRvU3RyaW5nKDIpLFxuICBcImNcIjogKHgpID0+IHggKyBcIlwiLFxuICBcImRcIjogZm9ybWF0RGVjaW1hbCxcbiAgXCJlXCI6ICh4LCBwKSA9PiB4LnRvRXhwb25lbnRpYWwocCksXG4gIFwiZlwiOiAoeCwgcCkgPT4geC50b0ZpeGVkKHApLFxuICBcImdcIjogKHgsIHApID0+IHgudG9QcmVjaXNpb24ocCksXG4gIFwib1wiOiAoeCkgPT4gTWF0aC5yb3VuZCh4KS50b1N0cmluZyg4KSxcbiAgXCJwXCI6ICh4LCBwKSA9PiBmb3JtYXRSb3VuZGVkKHggKiAxMDAsIHApLFxuICBcInJcIjogZm9ybWF0Um91bmRlZCxcbiAgXCJzXCI6IGZvcm1hdFByZWZpeEF1dG8sXG4gIFwiWFwiOiAoeCkgPT4gTWF0aC5yb3VuZCh4KS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKSxcbiAgXCJ4XCI6ICh4KSA9PiBNYXRoLnJvdW5kKHgpLnRvU3RyaW5nKDE2KVxufTtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIHg7XG59XG4iLCJpbXBvcnQgZXhwb25lbnQgZnJvbSBcIi4vZXhwb25lbnQuanNcIjtcbmltcG9ydCBmb3JtYXRHcm91cCBmcm9tIFwiLi9mb3JtYXRHcm91cC5qc1wiO1xuaW1wb3J0IGZvcm1hdE51bWVyYWxzIGZyb20gXCIuL2Zvcm1hdE51bWVyYWxzLmpzXCI7XG5pbXBvcnQgZm9ybWF0U3BlY2lmaWVyIGZyb20gXCIuL2Zvcm1hdFNwZWNpZmllci5qc1wiO1xuaW1wb3J0IGZvcm1hdFRyaW0gZnJvbSBcIi4vZm9ybWF0VHJpbS5qc1wiO1xuaW1wb3J0IGZvcm1hdFR5cGVzIGZyb20gXCIuL2Zvcm1hdFR5cGVzLmpzXCI7XG5pbXBvcnQge3ByZWZpeEV4cG9uZW50fSBmcm9tIFwiLi9mb3JtYXRQcmVmaXhBdXRvLmpzXCI7XG5pbXBvcnQgaWRlbnRpdHkgZnJvbSBcIi4vaWRlbnRpdHkuanNcIjtcblxudmFyIG1hcCA9IEFycmF5LnByb3RvdHlwZS5tYXAsXG4gICAgcHJlZml4ZXMgPSBbXCJ5XCIsXCJ6XCIsXCJhXCIsXCJmXCIsXCJwXCIsXCJuXCIsXCLCtVwiLFwibVwiLFwiXCIsXCJrXCIsXCJNXCIsXCJHXCIsXCJUXCIsXCJQXCIsXCJFXCIsXCJaXCIsXCJZXCJdO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihsb2NhbGUpIHtcbiAgdmFyIGdyb3VwID0gbG9jYWxlLmdyb3VwaW5nID09PSB1bmRlZmluZWQgfHwgbG9jYWxlLnRob3VzYW5kcyA9PT0gdW5kZWZpbmVkID8gaWRlbnRpdHkgOiBmb3JtYXRHcm91cChtYXAuY2FsbChsb2NhbGUuZ3JvdXBpbmcsIE51bWJlciksIGxvY2FsZS50aG91c2FuZHMgKyBcIlwiKSxcbiAgICAgIGN1cnJlbmN5UHJlZml4ID0gbG9jYWxlLmN1cnJlbmN5ID09PSB1bmRlZmluZWQgPyBcIlwiIDogbG9jYWxlLmN1cnJlbmN5WzBdICsgXCJcIixcbiAgICAgIGN1cnJlbmN5U3VmZml4ID0gbG9jYWxlLmN1cnJlbmN5ID09PSB1bmRlZmluZWQgPyBcIlwiIDogbG9jYWxlLmN1cnJlbmN5WzFdICsgXCJcIixcbiAgICAgIGRlY2ltYWwgPSBsb2NhbGUuZGVjaW1hbCA9PT0gdW5kZWZpbmVkID8gXCIuXCIgOiBsb2NhbGUuZGVjaW1hbCArIFwiXCIsXG4gICAgICBudW1lcmFscyA9IGxvY2FsZS5udW1lcmFscyA9PT0gdW5kZWZpbmVkID8gaWRlbnRpdHkgOiBmb3JtYXROdW1lcmFscyhtYXAuY2FsbChsb2NhbGUubnVtZXJhbHMsIFN0cmluZykpLFxuICAgICAgcGVyY2VudCA9IGxvY2FsZS5wZXJjZW50ID09PSB1bmRlZmluZWQgPyBcIiVcIiA6IGxvY2FsZS5wZXJjZW50ICsgXCJcIixcbiAgICAgIG1pbnVzID0gbG9jYWxlLm1pbnVzID09PSB1bmRlZmluZWQgPyBcIuKIklwiIDogbG9jYWxlLm1pbnVzICsgXCJcIixcbiAgICAgIG5hbiA9IGxvY2FsZS5uYW4gPT09IHVuZGVmaW5lZCA/IFwiTmFOXCIgOiBsb2NhbGUubmFuICsgXCJcIjtcblxuICBmdW5jdGlvbiBuZXdGb3JtYXQoc3BlY2lmaWVyKSB7XG4gICAgc3BlY2lmaWVyID0gZm9ybWF0U3BlY2lmaWVyKHNwZWNpZmllcik7XG5cbiAgICB2YXIgZmlsbCA9IHNwZWNpZmllci5maWxsLFxuICAgICAgICBhbGlnbiA9IHNwZWNpZmllci5hbGlnbixcbiAgICAgICAgc2lnbiA9IHNwZWNpZmllci5zaWduLFxuICAgICAgICBzeW1ib2wgPSBzcGVjaWZpZXIuc3ltYm9sLFxuICAgICAgICB6ZXJvID0gc3BlY2lmaWVyLnplcm8sXG4gICAgICAgIHdpZHRoID0gc3BlY2lmaWVyLndpZHRoLFxuICAgICAgICBjb21tYSA9IHNwZWNpZmllci5jb21tYSxcbiAgICAgICAgcHJlY2lzaW9uID0gc3BlY2lmaWVyLnByZWNpc2lvbixcbiAgICAgICAgdHJpbSA9IHNwZWNpZmllci50cmltLFxuICAgICAgICB0eXBlID0gc3BlY2lmaWVyLnR5cGU7XG5cbiAgICAvLyBUaGUgXCJuXCIgdHlwZSBpcyBhbiBhbGlhcyBmb3IgXCIsZ1wiLlxuICAgIGlmICh0eXBlID09PSBcIm5cIikgY29tbWEgPSB0cnVlLCB0eXBlID0gXCJnXCI7XG5cbiAgICAvLyBUaGUgXCJcIiB0eXBlLCBhbmQgYW55IGludmFsaWQgdHlwZSwgaXMgYW4gYWxpYXMgZm9yIFwiLjEyfmdcIi5cbiAgICBlbHNlIGlmICghZm9ybWF0VHlwZXNbdHlwZV0pIHByZWNpc2lvbiA9PT0gdW5kZWZpbmVkICYmIChwcmVjaXNpb24gPSAxMiksIHRyaW0gPSB0cnVlLCB0eXBlID0gXCJnXCI7XG5cbiAgICAvLyBJZiB6ZXJvIGZpbGwgaXMgc3BlY2lmaWVkLCBwYWRkaW5nIGdvZXMgYWZ0ZXIgc2lnbiBhbmQgYmVmb3JlIGRpZ2l0cy5cbiAgICBpZiAoemVybyB8fCAoZmlsbCA9PT0gXCIwXCIgJiYgYWxpZ24gPT09IFwiPVwiKSkgemVybyA9IHRydWUsIGZpbGwgPSBcIjBcIiwgYWxpZ24gPSBcIj1cIjtcblxuICAgIC8vIENvbXB1dGUgdGhlIHByZWZpeCBhbmQgc3VmZml4LlxuICAgIC8vIEZvciBTSS1wcmVmaXgsIHRoZSBzdWZmaXggaXMgbGF6aWx5IGNvbXB1dGVkLlxuICAgIHZhciBwcmVmaXggPSBzeW1ib2wgPT09IFwiJFwiID8gY3VycmVuY3lQcmVmaXggOiBzeW1ib2wgPT09IFwiI1wiICYmIC9bYm94WF0vLnRlc3QodHlwZSkgPyBcIjBcIiArIHR5cGUudG9Mb3dlckNhc2UoKSA6IFwiXCIsXG4gICAgICAgIHN1ZmZpeCA9IHN5bWJvbCA9PT0gXCIkXCIgPyBjdXJyZW5jeVN1ZmZpeCA6IC9bJXBdLy50ZXN0KHR5cGUpID8gcGVyY2VudCA6IFwiXCI7XG5cbiAgICAvLyBXaGF0IGZvcm1hdCBmdW5jdGlvbiBzaG91bGQgd2UgdXNlP1xuICAgIC8vIElzIHRoaXMgYW4gaW50ZWdlciB0eXBlP1xuICAgIC8vIENhbiB0aGlzIHR5cGUgZ2VuZXJhdGUgZXhwb25lbnRpYWwgbm90YXRpb24/XG4gICAgdmFyIGZvcm1hdFR5cGUgPSBmb3JtYXRUeXBlc1t0eXBlXSxcbiAgICAgICAgbWF5YmVTdWZmaXggPSAvW2RlZmdwcnMlXS8udGVzdCh0eXBlKTtcblxuICAgIC8vIFNldCB0aGUgZGVmYXVsdCBwcmVjaXNpb24gaWYgbm90IHNwZWNpZmllZCxcbiAgICAvLyBvciBjbGFtcCB0aGUgc3BlY2lmaWVkIHByZWNpc2lvbiB0byB0aGUgc3VwcG9ydGVkIHJhbmdlLlxuICAgIC8vIEZvciBzaWduaWZpY2FudCBwcmVjaXNpb24sIGl0IG11c3QgYmUgaW4gWzEsIDIxXS5cbiAgICAvLyBGb3IgZml4ZWQgcHJlY2lzaW9uLCBpdCBtdXN0IGJlIGluIFswLCAyMF0uXG4gICAgcHJlY2lzaW9uID0gcHJlY2lzaW9uID09PSB1bmRlZmluZWQgPyA2XG4gICAgICAgIDogL1tncHJzXS8udGVzdCh0eXBlKSA/IE1hdGgubWF4KDEsIE1hdGgubWluKDIxLCBwcmVjaXNpb24pKVxuICAgICAgICA6IE1hdGgubWF4KDAsIE1hdGgubWluKDIwLCBwcmVjaXNpb24pKTtcblxuICAgIGZ1bmN0aW9uIGZvcm1hdCh2YWx1ZSkge1xuICAgICAgdmFyIHZhbHVlUHJlZml4ID0gcHJlZml4LFxuICAgICAgICAgIHZhbHVlU3VmZml4ID0gc3VmZml4LFxuICAgICAgICAgIGksIG4sIGM7XG5cbiAgICAgIGlmICh0eXBlID09PSBcImNcIikge1xuICAgICAgICB2YWx1ZVN1ZmZpeCA9IGZvcm1hdFR5cGUodmFsdWUpICsgdmFsdWVTdWZmaXg7XG4gICAgICAgIHZhbHVlID0gXCJcIjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbHVlID0gK3ZhbHVlO1xuXG4gICAgICAgIC8vIERldGVybWluZSB0aGUgc2lnbi4gLTAgaXMgbm90IGxlc3MgdGhhbiAwLCBidXQgMSAvIC0wIGlzIVxuICAgICAgICB2YXIgdmFsdWVOZWdhdGl2ZSA9IHZhbHVlIDwgMCB8fCAxIC8gdmFsdWUgPCAwO1xuXG4gICAgICAgIC8vIFBlcmZvcm0gdGhlIGluaXRpYWwgZm9ybWF0dGluZy5cbiAgICAgICAgdmFsdWUgPSBpc05hTih2YWx1ZSkgPyBuYW4gOiBmb3JtYXRUeXBlKE1hdGguYWJzKHZhbHVlKSwgcHJlY2lzaW9uKTtcblxuICAgICAgICAvLyBUcmltIGluc2lnbmlmaWNhbnQgemVyb3MuXG4gICAgICAgIGlmICh0cmltKSB2YWx1ZSA9IGZvcm1hdFRyaW0odmFsdWUpO1xuXG4gICAgICAgIC8vIElmIGEgbmVnYXRpdmUgdmFsdWUgcm91bmRzIHRvIHplcm8gYWZ0ZXIgZm9ybWF0dGluZywgYW5kIG5vIGV4cGxpY2l0IHBvc2l0aXZlIHNpZ24gaXMgcmVxdWVzdGVkLCBoaWRlIHRoZSBzaWduLlxuICAgICAgICBpZiAodmFsdWVOZWdhdGl2ZSAmJiArdmFsdWUgPT09IDAgJiYgc2lnbiAhPT0gXCIrXCIpIHZhbHVlTmVnYXRpdmUgPSBmYWxzZTtcblxuICAgICAgICAvLyBDb21wdXRlIHRoZSBwcmVmaXggYW5kIHN1ZmZpeC5cbiAgICAgICAgdmFsdWVQcmVmaXggPSAodmFsdWVOZWdhdGl2ZSA/IChzaWduID09PSBcIihcIiA/IHNpZ24gOiBtaW51cykgOiBzaWduID09PSBcIi1cIiB8fCBzaWduID09PSBcIihcIiA/IFwiXCIgOiBzaWduKSArIHZhbHVlUHJlZml4O1xuICAgICAgICB2YWx1ZVN1ZmZpeCA9ICh0eXBlID09PSBcInNcIiA/IHByZWZpeGVzWzggKyBwcmVmaXhFeHBvbmVudCAvIDNdIDogXCJcIikgKyB2YWx1ZVN1ZmZpeCArICh2YWx1ZU5lZ2F0aXZlICYmIHNpZ24gPT09IFwiKFwiID8gXCIpXCIgOiBcIlwiKTtcblxuICAgICAgICAvLyBCcmVhayB0aGUgZm9ybWF0dGVkIHZhbHVlIGludG8gdGhlIGludGVnZXIg4oCcdmFsdWXigJ0gcGFydCB0aGF0IGNhbiBiZVxuICAgICAgICAvLyBncm91cGVkLCBhbmQgZnJhY3Rpb25hbCBvciBleHBvbmVudGlhbCDigJxzdWZmaXjigJ0gcGFydCB0aGF0IGlzIG5vdC5cbiAgICAgICAgaWYgKG1heWJlU3VmZml4KSB7XG4gICAgICAgICAgaSA9IC0xLCBuID0gdmFsdWUubGVuZ3RoO1xuICAgICAgICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICAgICAgICBpZiAoYyA9IHZhbHVlLmNoYXJDb2RlQXQoaSksIDQ4ID4gYyB8fCBjID4gNTcpIHtcbiAgICAgICAgICAgICAgdmFsdWVTdWZmaXggPSAoYyA9PT0gNDYgPyBkZWNpbWFsICsgdmFsdWUuc2xpY2UoaSArIDEpIDogdmFsdWUuc2xpY2UoaSkpICsgdmFsdWVTdWZmaXg7XG4gICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUuc2xpY2UoMCwgaSk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBJZiB0aGUgZmlsbCBjaGFyYWN0ZXIgaXMgbm90IFwiMFwiLCBncm91cGluZyBpcyBhcHBsaWVkIGJlZm9yZSBwYWRkaW5nLlxuICAgICAgaWYgKGNvbW1hICYmICF6ZXJvKSB2YWx1ZSA9IGdyb3VwKHZhbHVlLCBJbmZpbml0eSk7XG5cbiAgICAgIC8vIENvbXB1dGUgdGhlIHBhZGRpbmcuXG4gICAgICB2YXIgbGVuZ3RoID0gdmFsdWVQcmVmaXgubGVuZ3RoICsgdmFsdWUubGVuZ3RoICsgdmFsdWVTdWZmaXgubGVuZ3RoLFxuICAgICAgICAgIHBhZGRpbmcgPSBsZW5ndGggPCB3aWR0aCA/IG5ldyBBcnJheSh3aWR0aCAtIGxlbmd0aCArIDEpLmpvaW4oZmlsbCkgOiBcIlwiO1xuXG4gICAgICAvLyBJZiB0aGUgZmlsbCBjaGFyYWN0ZXIgaXMgXCIwXCIsIGdyb3VwaW5nIGlzIGFwcGxpZWQgYWZ0ZXIgcGFkZGluZy5cbiAgICAgIGlmIChjb21tYSAmJiB6ZXJvKSB2YWx1ZSA9IGdyb3VwKHBhZGRpbmcgKyB2YWx1ZSwgcGFkZGluZy5sZW5ndGggPyB3aWR0aCAtIHZhbHVlU3VmZml4Lmxlbmd0aCA6IEluZmluaXR5KSwgcGFkZGluZyA9IFwiXCI7XG5cbiAgICAgIC8vIFJlY29uc3RydWN0IHRoZSBmaW5hbCBvdXRwdXQgYmFzZWQgb24gdGhlIGRlc2lyZWQgYWxpZ25tZW50LlxuICAgICAgc3dpdGNoIChhbGlnbikge1xuICAgICAgICBjYXNlIFwiPFwiOiB2YWx1ZSA9IHZhbHVlUHJlZml4ICsgdmFsdWUgKyB2YWx1ZVN1ZmZpeCArIHBhZGRpbmc7IGJyZWFrO1xuICAgICAgICBjYXNlIFwiPVwiOiB2YWx1ZSA9IHZhbHVlUHJlZml4ICsgcGFkZGluZyArIHZhbHVlICsgdmFsdWVTdWZmaXg7IGJyZWFrO1xuICAgICAgICBjYXNlIFwiXlwiOiB2YWx1ZSA9IHBhZGRpbmcuc2xpY2UoMCwgbGVuZ3RoID0gcGFkZGluZy5sZW5ndGggPj4gMSkgKyB2YWx1ZVByZWZpeCArIHZhbHVlICsgdmFsdWVTdWZmaXggKyBwYWRkaW5nLnNsaWNlKGxlbmd0aCk7IGJyZWFrO1xuICAgICAgICBkZWZhdWx0OiB2YWx1ZSA9IHBhZGRpbmcgKyB2YWx1ZVByZWZpeCArIHZhbHVlICsgdmFsdWVTdWZmaXg7IGJyZWFrO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbnVtZXJhbHModmFsdWUpO1xuICAgIH1cblxuICAgIGZvcm1hdC50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHNwZWNpZmllciArIFwiXCI7XG4gICAgfTtcblxuICAgIHJldHVybiBmb3JtYXQ7XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRQcmVmaXgoc3BlY2lmaWVyLCB2YWx1ZSkge1xuICAgIHZhciBmID0gbmV3Rm9ybWF0KChzcGVjaWZpZXIgPSBmb3JtYXRTcGVjaWZpZXIoc3BlY2lmaWVyKSwgc3BlY2lmaWVyLnR5cGUgPSBcImZcIiwgc3BlY2lmaWVyKSksXG4gICAgICAgIGUgPSBNYXRoLm1heCgtOCwgTWF0aC5taW4oOCwgTWF0aC5mbG9vcihleHBvbmVudCh2YWx1ZSkgLyAzKSkpICogMyxcbiAgICAgICAgayA9IE1hdGgucG93KDEwLCAtZSksXG4gICAgICAgIHByZWZpeCA9IHByZWZpeGVzWzggKyBlIC8gM107XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXR1cm4gZihrICogdmFsdWUpICsgcHJlZml4O1xuICAgIH07XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGZvcm1hdDogbmV3Rm9ybWF0LFxuICAgIGZvcm1hdFByZWZpeDogZm9ybWF0UHJlZml4XG4gIH07XG59XG4iLCJpbXBvcnQgZm9ybWF0TG9jYWxlIGZyb20gXCIuL2xvY2FsZS5qc1wiO1xuXG52YXIgbG9jYWxlO1xuZXhwb3J0IHZhciBmb3JtYXQ7XG5leHBvcnQgdmFyIGZvcm1hdFByZWZpeDtcblxuZGVmYXVsdExvY2FsZSh7XG4gIHRob3VzYW5kczogXCIsXCIsXG4gIGdyb3VwaW5nOiBbM10sXG4gIGN1cnJlbmN5OiBbXCIkXCIsIFwiXCJdXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGVmYXVsdExvY2FsZShkZWZpbml0aW9uKSB7XG4gIGxvY2FsZSA9IGZvcm1hdExvY2FsZShkZWZpbml0aW9uKTtcbiAgZm9ybWF0ID0gbG9jYWxlLmZvcm1hdDtcbiAgZm9ybWF0UHJlZml4ID0gbG9jYWxlLmZvcm1hdFByZWZpeDtcbiAgcmV0dXJuIGxvY2FsZTtcbn1cbiIsImltcG9ydCB7dGlja3MsIHRpY2tJbmNyZW1lbnR9IGZyb20gXCJkMy1hcnJheVwiO1xuaW1wb3J0IGNvbnRpbnVvdXMsIHtjb3B5fSBmcm9tIFwiLi9jb250aW51b3VzLmpzXCI7XG5pbXBvcnQge2luaXRSYW5nZX0gZnJvbSBcIi4vaW5pdC5qc1wiO1xuaW1wb3J0IHRpY2tGb3JtYXQgZnJvbSBcIi4vdGlja0Zvcm1hdC5qc1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gbGluZWFyaXNoKHNjYWxlKSB7XG4gIHZhciBkb21haW4gPSBzY2FsZS5kb21haW47XG5cbiAgc2NhbGUudGlja3MgPSBmdW5jdGlvbihjb3VudCkge1xuICAgIHZhciBkID0gZG9tYWluKCk7XG4gICAgcmV0dXJuIHRpY2tzKGRbMF0sIGRbZC5sZW5ndGggLSAxXSwgY291bnQgPT0gbnVsbCA/IDEwIDogY291bnQpO1xuICB9O1xuXG4gIHNjYWxlLnRpY2tGb3JtYXQgPSBmdW5jdGlvbihjb3VudCwgc3BlY2lmaWVyKSB7XG4gICAgdmFyIGQgPSBkb21haW4oKTtcbiAgICByZXR1cm4gdGlja0Zvcm1hdChkWzBdLCBkW2QubGVuZ3RoIC0gMV0sIGNvdW50ID09IG51bGwgPyAxMCA6IGNvdW50LCBzcGVjaWZpZXIpO1xuICB9O1xuXG4gIHNjYWxlLm5pY2UgPSBmdW5jdGlvbihjb3VudCkge1xuICAgIGlmIChjb3VudCA9PSBudWxsKSBjb3VudCA9IDEwO1xuXG4gICAgdmFyIGQgPSBkb21haW4oKTtcbiAgICB2YXIgaTAgPSAwO1xuICAgIHZhciBpMSA9IGQubGVuZ3RoIC0gMTtcbiAgICB2YXIgc3RhcnQgPSBkW2kwXTtcbiAgICB2YXIgc3RvcCA9IGRbaTFdO1xuICAgIHZhciBwcmVzdGVwO1xuICAgIHZhciBzdGVwO1xuICAgIHZhciBtYXhJdGVyID0gMTA7XG5cbiAgICBpZiAoc3RvcCA8IHN0YXJ0KSB7XG4gICAgICBzdGVwID0gc3RhcnQsIHN0YXJ0ID0gc3RvcCwgc3RvcCA9IHN0ZXA7XG4gICAgICBzdGVwID0gaTAsIGkwID0gaTEsIGkxID0gc3RlcDtcbiAgICB9XG4gICAgXG4gICAgd2hpbGUgKG1heEl0ZXItLSA+IDApIHtcbiAgICAgIHN0ZXAgPSB0aWNrSW5jcmVtZW50KHN0YXJ0LCBzdG9wLCBjb3VudCk7XG4gICAgICBpZiAoc3RlcCA9PT0gcHJlc3RlcCkge1xuICAgICAgICBkW2kwXSA9IHN0YXJ0XG4gICAgICAgIGRbaTFdID0gc3RvcFxuICAgICAgICByZXR1cm4gZG9tYWluKGQpO1xuICAgICAgfSBlbHNlIGlmIChzdGVwID4gMCkge1xuICAgICAgICBzdGFydCA9IE1hdGguZmxvb3Ioc3RhcnQgLyBzdGVwKSAqIHN0ZXA7XG4gICAgICAgIHN0b3AgPSBNYXRoLmNlaWwoc3RvcCAvIHN0ZXApICogc3RlcDtcbiAgICAgIH0gZWxzZSBpZiAoc3RlcCA8IDApIHtcbiAgICAgICAgc3RhcnQgPSBNYXRoLmNlaWwoc3RhcnQgKiBzdGVwKSAvIHN0ZXA7XG4gICAgICAgIHN0b3AgPSBNYXRoLmZsb29yKHN0b3AgKiBzdGVwKSAvIHN0ZXA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIHByZXN0ZXAgPSBzdGVwO1xuICAgIH1cblxuICAgIHJldHVybiBzY2FsZTtcbiAgfTtcblxuICByZXR1cm4gc2NhbGU7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGxpbmVhcigpIHtcbiAgdmFyIHNjYWxlID0gY29udGludW91cygpO1xuXG4gIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gY29weShzY2FsZSwgbGluZWFyKCkpO1xuICB9O1xuXG4gIGluaXRSYW5nZS5hcHBseShzY2FsZSwgYXJndW1lbnRzKTtcblxuICByZXR1cm4gbGluZWFyaXNoKHNjYWxlKTtcbn1cbiIsImltcG9ydCB7dGlja1N0ZXB9IGZyb20gXCJkMy1hcnJheVwiO1xuaW1wb3J0IHtmb3JtYXQsIGZvcm1hdFByZWZpeCwgZm9ybWF0U3BlY2lmaWVyLCBwcmVjaXNpb25GaXhlZCwgcHJlY2lzaW9uUHJlZml4LCBwcmVjaXNpb25Sb3VuZH0gZnJvbSBcImQzLWZvcm1hdFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0aWNrRm9ybWF0KHN0YXJ0LCBzdG9wLCBjb3VudCwgc3BlY2lmaWVyKSB7XG4gIHZhciBzdGVwID0gdGlja1N0ZXAoc3RhcnQsIHN0b3AsIGNvdW50KSxcbiAgICAgIHByZWNpc2lvbjtcbiAgc3BlY2lmaWVyID0gZm9ybWF0U3BlY2lmaWVyKHNwZWNpZmllciA9PSBudWxsID8gXCIsZlwiIDogc3BlY2lmaWVyKTtcbiAgc3dpdGNoIChzcGVjaWZpZXIudHlwZSkge1xuICAgIGNhc2UgXCJzXCI6IHtcbiAgICAgIHZhciB2YWx1ZSA9IE1hdGgubWF4KE1hdGguYWJzKHN0YXJ0KSwgTWF0aC5hYnMoc3RvcCkpO1xuICAgICAgaWYgKHNwZWNpZmllci5wcmVjaXNpb24gPT0gbnVsbCAmJiAhaXNOYU4ocHJlY2lzaW9uID0gcHJlY2lzaW9uUHJlZml4KHN0ZXAsIHZhbHVlKSkpIHNwZWNpZmllci5wcmVjaXNpb24gPSBwcmVjaXNpb247XG4gICAgICByZXR1cm4gZm9ybWF0UHJlZml4KHNwZWNpZmllciwgdmFsdWUpO1xuICAgIH1cbiAgICBjYXNlIFwiXCI6XG4gICAgY2FzZSBcImVcIjpcbiAgICBjYXNlIFwiZ1wiOlxuICAgIGNhc2UgXCJwXCI6XG4gICAgY2FzZSBcInJcIjoge1xuICAgICAgaWYgKHNwZWNpZmllci5wcmVjaXNpb24gPT0gbnVsbCAmJiAhaXNOYU4ocHJlY2lzaW9uID0gcHJlY2lzaW9uUm91bmQoc3RlcCwgTWF0aC5tYXgoTWF0aC5hYnMoc3RhcnQpLCBNYXRoLmFicyhzdG9wKSkpKSkgc3BlY2lmaWVyLnByZWNpc2lvbiA9IHByZWNpc2lvbiAtIChzcGVjaWZpZXIudHlwZSA9PT0gXCJlXCIpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGNhc2UgXCJmXCI6XG4gICAgY2FzZSBcIiVcIjoge1xuICAgICAgaWYgKHNwZWNpZmllci5wcmVjaXNpb24gPT0gbnVsbCAmJiAhaXNOYU4ocHJlY2lzaW9uID0gcHJlY2lzaW9uRml4ZWQoc3RlcCkpKSBzcGVjaWZpZXIucHJlY2lzaW9uID0gcHJlY2lzaW9uIC0gKHNwZWNpZmllci50eXBlID09PSBcIiVcIikgKiAyO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiBmb3JtYXQoc3BlY2lmaWVyKTtcbn1cbiIsImltcG9ydCBleHBvbmVudCBmcm9tIFwiLi9leHBvbmVudC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzdGVwLCB2YWx1ZSkge1xuICByZXR1cm4gTWF0aC5tYXgoMCwgTWF0aC5tYXgoLTgsIE1hdGgubWluKDgsIE1hdGguZmxvb3IoZXhwb25lbnQodmFsdWUpIC8gMykpKSAqIDMgLSBleHBvbmVudChNYXRoLmFicyhzdGVwKSkpO1xufVxuIiwiaW1wb3J0IGV4cG9uZW50IGZyb20gXCIuL2V4cG9uZW50LmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHN0ZXAsIG1heCkge1xuICBzdGVwID0gTWF0aC5hYnMoc3RlcCksIG1heCA9IE1hdGguYWJzKG1heCkgLSBzdGVwO1xuICByZXR1cm4gTWF0aC5tYXgoMCwgZXhwb25lbnQobWF4KSAtIGV4cG9uZW50KHN0ZXApKSArIDE7XG59XG4iLCJpbXBvcnQgZXhwb25lbnQgZnJvbSBcIi4vZXhwb25lbnQuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc3RlcCkge1xuICByZXR1cm4gTWF0aC5tYXgoMCwgLWV4cG9uZW50KE1hdGguYWJzKHN0ZXApKSk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihncm91cGluZywgdGhvdXNhbmRzKSB7XG4gIHJldHVybiBmdW5jdGlvbih2YWx1ZSwgd2lkdGgpIHtcbiAgICB2YXIgaSA9IHZhbHVlLmxlbmd0aCxcbiAgICAgICAgdCA9IFtdLFxuICAgICAgICBqID0gMCxcbiAgICAgICAgZyA9IGdyb3VwaW5nWzBdLFxuICAgICAgICBsZW5ndGggPSAwO1xuXG4gICAgd2hpbGUgKGkgPiAwICYmIGcgPiAwKSB7XG4gICAgICBpZiAobGVuZ3RoICsgZyArIDEgPiB3aWR0aCkgZyA9IE1hdGgubWF4KDEsIHdpZHRoIC0gbGVuZ3RoKTtcbiAgICAgIHQucHVzaCh2YWx1ZS5zdWJzdHJpbmcoaSAtPSBnLCBpICsgZykpO1xuICAgICAgaWYgKChsZW5ndGggKz0gZyArIDEpID4gd2lkdGgpIGJyZWFrO1xuICAgICAgZyA9IGdyb3VwaW5nW2ogPSAoaiArIDEpICUgZ3JvdXBpbmcubGVuZ3RoXTtcbiAgICB9XG5cbiAgICByZXR1cm4gdC5yZXZlcnNlKCkuam9pbih0aG91c2FuZHMpO1xuICB9O1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obnVtZXJhbHMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlLnJlcGxhY2UoL1swLTldL2csIGZ1bmN0aW9uKGkpIHtcbiAgICAgIHJldHVybiBudW1lcmFsc1sraV07XG4gICAgfSk7XG4gIH07XG59XG4iLCIvLyBUcmltcyBpbnNpZ25pZmljYW50IHplcm9zLCBlLmcuLCByZXBsYWNlcyAxLjIwMDBrIHdpdGggMS4yay5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHMpIHtcbiAgb3V0OiBmb3IgKHZhciBuID0gcy5sZW5ndGgsIGkgPSAxLCBpMCA9IC0xLCBpMTsgaSA8IG47ICsraSkge1xuICAgIHN3aXRjaCAoc1tpXSkge1xuICAgICAgY2FzZSBcIi5cIjogaTAgPSBpMSA9IGk7IGJyZWFrO1xuICAgICAgY2FzZSBcIjBcIjogaWYgKGkwID09PSAwKSBpMCA9IGk7IGkxID0gaTsgYnJlYWs7XG4gICAgICBkZWZhdWx0OiBpZiAoIStzW2ldKSBicmVhayBvdXQ7IGlmIChpMCA+IDApIGkwID0gMDsgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiBpMCA+IDAgPyBzLnNsaWNlKDAsIGkwKSArIHMuc2xpY2UoaTEgKyAxKSA6IHM7XG59XG4iLCJpbXBvcnQge2luaXRSYW5nZX0gZnJvbSBcIi4vaW5pdC5qc1wiO1xuXG5leHBvcnQgY29uc3QgaW1wbGljaXQgPSBTeW1ib2woXCJpbXBsaWNpdFwiKTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gb3JkaW5hbCgpIHtcbiAgdmFyIGluZGV4ID0gbmV3IE1hcCgpLFxuICAgICAgZG9tYWluID0gW10sXG4gICAgICByYW5nZSA9IFtdLFxuICAgICAgdW5rbm93biA9IGltcGxpY2l0O1xuXG4gIGZ1bmN0aW9uIHNjYWxlKGQpIHtcbiAgICB2YXIga2V5ID0gZCArIFwiXCIsIGkgPSBpbmRleC5nZXQoa2V5KTtcbiAgICBpZiAoIWkpIHtcbiAgICAgIGlmICh1bmtub3duICE9PSBpbXBsaWNpdCkgcmV0dXJuIHVua25vd247XG4gICAgICBpbmRleC5zZXQoa2V5LCBpID0gZG9tYWluLnB1c2goZCkpO1xuICAgIH1cbiAgICByZXR1cm4gcmFuZ2VbKGkgLSAxKSAlIHJhbmdlLmxlbmd0aF07XG4gIH1cblxuICBzY2FsZS5kb21haW4gPSBmdW5jdGlvbihfKSB7XG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gZG9tYWluLnNsaWNlKCk7XG4gICAgZG9tYWluID0gW10sIGluZGV4ID0gbmV3IE1hcCgpO1xuICAgIGZvciAoY29uc3QgdmFsdWUgb2YgXykge1xuICAgICAgY29uc3Qga2V5ID0gdmFsdWUgKyBcIlwiO1xuICAgICAgaWYgKGluZGV4LmhhcyhrZXkpKSBjb250aW51ZTtcbiAgICAgIGluZGV4LnNldChrZXksIGRvbWFpbi5wdXNoKHZhbHVlKSk7XG4gICAgfVxuICAgIHJldHVybiBzY2FsZTtcbiAgfTtcblxuICBzY2FsZS5yYW5nZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChyYW5nZSA9IEFycmF5LmZyb20oXyksIHNjYWxlKSA6IHJhbmdlLnNsaWNlKCk7XG4gIH07XG5cbiAgc2NhbGUudW5rbm93biA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh1bmtub3duID0gXywgc2NhbGUpIDogdW5rbm93bjtcbiAgfTtcblxuICBzY2FsZS5jb3B5ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIG9yZGluYWwoZG9tYWluLCByYW5nZSkudW5rbm93bih1bmtub3duKTtcbiAgfTtcblxuICBpbml0UmFuZ2UuYXBwbHkoc2NhbGUsIGFyZ3VtZW50cyk7XG5cbiAgcmV0dXJuIHNjYWxlO1xufVxuIiwiaW1wb3J0IHtiaXNlY3R9IGZyb20gXCJkMy1hcnJheVwiO1xuaW1wb3J0IHtsaW5lYXJpc2h9IGZyb20gXCIuL2xpbmVhci5qc1wiO1xuaW1wb3J0IHtpbml0UmFuZ2V9IGZyb20gXCIuL2luaXQuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcXVhbnRpemUoKSB7XG4gIHZhciB4MCA9IDAsXG4gICAgICB4MSA9IDEsXG4gICAgICBuID0gMSxcbiAgICAgIGRvbWFpbiA9IFswLjVdLFxuICAgICAgcmFuZ2UgPSBbMCwgMV0sXG4gICAgICB1bmtub3duO1xuXG4gIGZ1bmN0aW9uIHNjYWxlKHgpIHtcbiAgICByZXR1cm4geCA8PSB4ID8gcmFuZ2VbYmlzZWN0KGRvbWFpbiwgeCwgMCwgbildIDogdW5rbm93bjtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc2NhbGUoKSB7XG4gICAgdmFyIGkgPSAtMTtcbiAgICBkb21haW4gPSBuZXcgQXJyYXkobik7XG4gICAgd2hpbGUgKCsraSA8IG4pIGRvbWFpbltpXSA9ICgoaSArIDEpICogeDEgLSAoaSAtIG4pICogeDApIC8gKG4gKyAxKTtcbiAgICByZXR1cm4gc2NhbGU7XG4gIH1cblxuICBzY2FsZS5kb21haW4gPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoW3gwLCB4MV0gPSBfLCB4MCA9ICt4MCwgeDEgPSAreDEsIHJlc2NhbGUoKSkgOiBbeDAsIHgxXTtcbiAgfTtcblxuICBzY2FsZS5yYW5nZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChuID0gKHJhbmdlID0gQXJyYXkuZnJvbShfKSkubGVuZ3RoIC0gMSwgcmVzY2FsZSgpKSA6IHJhbmdlLnNsaWNlKCk7XG4gIH07XG5cbiAgc2NhbGUuaW52ZXJ0RXh0ZW50ID0gZnVuY3Rpb24oeSkge1xuICAgIHZhciBpID0gcmFuZ2UuaW5kZXhPZih5KTtcbiAgICByZXR1cm4gaSA8IDAgPyBbTmFOLCBOYU5dXG4gICAgICAgIDogaSA8IDEgPyBbeDAsIGRvbWFpblswXV1cbiAgICAgICAgOiBpID49IG4gPyBbZG9tYWluW24gLSAxXSwgeDFdXG4gICAgICAgIDogW2RvbWFpbltpIC0gMV0sIGRvbWFpbltpXV07XG4gIH07XG5cbiAgc2NhbGUudW5rbm93biA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh1bmtub3duID0gXywgc2NhbGUpIDogc2NhbGU7XG4gIH07XG5cbiAgc2NhbGUudGhyZXNob2xkcyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBkb21haW4uc2xpY2UoKTtcbiAgfTtcblxuICBzY2FsZS5jb3B5ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHF1YW50aXplKClcbiAgICAgICAgLmRvbWFpbihbeDAsIHgxXSlcbiAgICAgICAgLnJhbmdlKHJhbmdlKVxuICAgICAgICAudW5rbm93bih1bmtub3duKTtcbiAgfTtcblxuICByZXR1cm4gaW5pdFJhbmdlLmFwcGx5KGxpbmVhcmlzaChzY2FsZSksIGFyZ3VtZW50cyk7XG59XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnMuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgY29sb3JzKFwiMWY3N2I0ZmY3ZjBlMmNhMDJjZDYyNzI4OTQ2N2JkOGM1NjRiZTM3N2MyN2Y3ZjdmYmNiZDIyMTdiZWNmXCIpO1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc3BlY2lmaWVyKSB7XG4gIHZhciBuID0gc3BlY2lmaWVyLmxlbmd0aCAvIDYgfCAwLCBjb2xvcnMgPSBuZXcgQXJyYXkobiksIGkgPSAwO1xuICB3aGlsZSAoaSA8IG4pIGNvbG9yc1tpXSA9IFwiI1wiICsgc3BlY2lmaWVyLnNsaWNlKGkgKiA2LCArK2kgKiA2KTtcbiAgcmV0dXJuIGNvbG9ycztcbn1cbiIsImltcG9ydCB7U2VsZWN0aW9uLCByb290fSBmcm9tIFwiLi9zZWxlY3Rpb24vaW5kZXguanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc2VsZWN0b3IpIHtcbiAgcmV0dXJuIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIlxuICAgICAgPyBuZXcgU2VsZWN0aW9uKFtbZG9jdW1lbnQucXVlcnlTZWxlY3RvcihzZWxlY3RvcildXSwgW2RvY3VtZW50LmRvY3VtZW50RWxlbWVudF0pXG4gICAgICA6IG5ldyBTZWxlY3Rpb24oW1tzZWxlY3Rvcl1dLCByb290KTtcbn1cbiIsImNvbnN0IHBpID0gTWF0aC5QSSxcbiAgICB0YXUgPSAyICogcGksXG4gICAgZXBzaWxvbiA9IDFlLTYsXG4gICAgdGF1RXBzaWxvbiA9IHRhdSAtIGVwc2lsb247XG5cbmZ1bmN0aW9uIFBhdGgoKSB7XG4gIHRoaXMuX3gwID0gdGhpcy5feTAgPSAvLyBzdGFydCBvZiBjdXJyZW50IHN1YnBhdGhcbiAgdGhpcy5feDEgPSB0aGlzLl95MSA9IG51bGw7IC8vIGVuZCBvZiBjdXJyZW50IHN1YnBhdGhcbiAgdGhpcy5fID0gXCJcIjtcbn1cblxuZnVuY3Rpb24gcGF0aCgpIHtcbiAgcmV0dXJuIG5ldyBQYXRoO1xufVxuXG5QYXRoLnByb3RvdHlwZSA9IHBhdGgucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogUGF0aCxcbiAgbW92ZVRvOiBmdW5jdGlvbih4LCB5KSB7XG4gICAgdGhpcy5fICs9IFwiTVwiICsgKHRoaXMuX3gwID0gdGhpcy5feDEgPSAreCkgKyBcIixcIiArICh0aGlzLl95MCA9IHRoaXMuX3kxID0gK3kpO1xuICB9LFxuICBjbG9zZVBhdGg6IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLl94MSAhPT0gbnVsbCkge1xuICAgICAgdGhpcy5feDEgPSB0aGlzLl94MCwgdGhpcy5feTEgPSB0aGlzLl95MDtcbiAgICAgIHRoaXMuXyArPSBcIlpcIjtcbiAgICB9XG4gIH0sXG4gIGxpbmVUbzogZnVuY3Rpb24oeCwgeSkge1xuICAgIHRoaXMuXyArPSBcIkxcIiArICh0aGlzLl94MSA9ICt4KSArIFwiLFwiICsgKHRoaXMuX3kxID0gK3kpO1xuICB9LFxuICBxdWFkcmF0aWNDdXJ2ZVRvOiBmdW5jdGlvbih4MSwgeTEsIHgsIHkpIHtcbiAgICB0aGlzLl8gKz0gXCJRXCIgKyAoK3gxKSArIFwiLFwiICsgKCt5MSkgKyBcIixcIiArICh0aGlzLl94MSA9ICt4KSArIFwiLFwiICsgKHRoaXMuX3kxID0gK3kpO1xuICB9LFxuICBiZXppZXJDdXJ2ZVRvOiBmdW5jdGlvbih4MSwgeTEsIHgyLCB5MiwgeCwgeSkge1xuICAgIHRoaXMuXyArPSBcIkNcIiArICgreDEpICsgXCIsXCIgKyAoK3kxKSArIFwiLFwiICsgKCt4MikgKyBcIixcIiArICgreTIpICsgXCIsXCIgKyAodGhpcy5feDEgPSAreCkgKyBcIixcIiArICh0aGlzLl95MSA9ICt5KTtcbiAgfSxcbiAgYXJjVG86IGZ1bmN0aW9uKHgxLCB5MSwgeDIsIHkyLCByKSB7XG4gICAgeDEgPSAreDEsIHkxID0gK3kxLCB4MiA9ICt4MiwgeTIgPSAreTIsIHIgPSArcjtcbiAgICB2YXIgeDAgPSB0aGlzLl94MSxcbiAgICAgICAgeTAgPSB0aGlzLl95MSxcbiAgICAgICAgeDIxID0geDIgLSB4MSxcbiAgICAgICAgeTIxID0geTIgLSB5MSxcbiAgICAgICAgeDAxID0geDAgLSB4MSxcbiAgICAgICAgeTAxID0geTAgLSB5MSxcbiAgICAgICAgbDAxXzIgPSB4MDEgKiB4MDEgKyB5MDEgKiB5MDE7XG5cbiAgICAvLyBJcyB0aGUgcmFkaXVzIG5lZ2F0aXZlPyBFcnJvci5cbiAgICBpZiAociA8IDApIHRocm93IG5ldyBFcnJvcihcIm5lZ2F0aXZlIHJhZGl1czogXCIgKyByKTtcblxuICAgIC8vIElzIHRoaXMgcGF0aCBlbXB0eT8gTW92ZSB0byAoeDEseTEpLlxuICAgIGlmICh0aGlzLl94MSA9PT0gbnVsbCkge1xuICAgICAgdGhpcy5fICs9IFwiTVwiICsgKHRoaXMuX3gxID0geDEpICsgXCIsXCIgKyAodGhpcy5feTEgPSB5MSk7XG4gICAgfVxuXG4gICAgLy8gT3IsIGlzICh4MSx5MSkgY29pbmNpZGVudCB3aXRoICh4MCx5MCk/IERvIG5vdGhpbmcuXG4gICAgZWxzZSBpZiAoIShsMDFfMiA+IGVwc2lsb24pKTtcblxuICAgIC8vIE9yLCBhcmUgKHgwLHkwKSwgKHgxLHkxKSBhbmQgKHgyLHkyKSBjb2xsaW5lYXI/XG4gICAgLy8gRXF1aXZhbGVudGx5LCBpcyAoeDEseTEpIGNvaW5jaWRlbnQgd2l0aCAoeDIseTIpP1xuICAgIC8vIE9yLCBpcyB0aGUgcmFkaXVzIHplcm8/IExpbmUgdG8gKHgxLHkxKS5cbiAgICBlbHNlIGlmICghKE1hdGguYWJzKHkwMSAqIHgyMSAtIHkyMSAqIHgwMSkgPiBlcHNpbG9uKSB8fCAhcikge1xuICAgICAgdGhpcy5fICs9IFwiTFwiICsgKHRoaXMuX3gxID0geDEpICsgXCIsXCIgKyAodGhpcy5feTEgPSB5MSk7XG4gICAgfVxuXG4gICAgLy8gT3RoZXJ3aXNlLCBkcmF3IGFuIGFyYyFcbiAgICBlbHNlIHtcbiAgICAgIHZhciB4MjAgPSB4MiAtIHgwLFxuICAgICAgICAgIHkyMCA9IHkyIC0geTAsXG4gICAgICAgICAgbDIxXzIgPSB4MjEgKiB4MjEgKyB5MjEgKiB5MjEsXG4gICAgICAgICAgbDIwXzIgPSB4MjAgKiB4MjAgKyB5MjAgKiB5MjAsXG4gICAgICAgICAgbDIxID0gTWF0aC5zcXJ0KGwyMV8yKSxcbiAgICAgICAgICBsMDEgPSBNYXRoLnNxcnQobDAxXzIpLFxuICAgICAgICAgIGwgPSByICogTWF0aC50YW4oKHBpIC0gTWF0aC5hY29zKChsMjFfMiArIGwwMV8yIC0gbDIwXzIpIC8gKDIgKiBsMjEgKiBsMDEpKSkgLyAyKSxcbiAgICAgICAgICB0MDEgPSBsIC8gbDAxLFxuICAgICAgICAgIHQyMSA9IGwgLyBsMjE7XG5cbiAgICAgIC8vIElmIHRoZSBzdGFydCB0YW5nZW50IGlzIG5vdCBjb2luY2lkZW50IHdpdGggKHgwLHkwKSwgbGluZSB0by5cbiAgICAgIGlmIChNYXRoLmFicyh0MDEgLSAxKSA+IGVwc2lsb24pIHtcbiAgICAgICAgdGhpcy5fICs9IFwiTFwiICsgKHgxICsgdDAxICogeDAxKSArIFwiLFwiICsgKHkxICsgdDAxICogeTAxKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fICs9IFwiQVwiICsgciArIFwiLFwiICsgciArIFwiLDAsMCxcIiArICgrKHkwMSAqIHgyMCA+IHgwMSAqIHkyMCkpICsgXCIsXCIgKyAodGhpcy5feDEgPSB4MSArIHQyMSAqIHgyMSkgKyBcIixcIiArICh0aGlzLl95MSA9IHkxICsgdDIxICogeTIxKTtcbiAgICB9XG4gIH0sXG4gIGFyYzogZnVuY3Rpb24oeCwgeSwgciwgYTAsIGExLCBjY3cpIHtcbiAgICB4ID0gK3gsIHkgPSAreSwgciA9ICtyLCBjY3cgPSAhIWNjdztcbiAgICB2YXIgZHggPSByICogTWF0aC5jb3MoYTApLFxuICAgICAgICBkeSA9IHIgKiBNYXRoLnNpbihhMCksXG4gICAgICAgIHgwID0geCArIGR4LFxuICAgICAgICB5MCA9IHkgKyBkeSxcbiAgICAgICAgY3cgPSAxIF4gY2N3LFxuICAgICAgICBkYSA9IGNjdyA/IGEwIC0gYTEgOiBhMSAtIGEwO1xuXG4gICAgLy8gSXMgdGhlIHJhZGl1cyBuZWdhdGl2ZT8gRXJyb3IuXG4gICAgaWYgKHIgPCAwKSB0aHJvdyBuZXcgRXJyb3IoXCJuZWdhdGl2ZSByYWRpdXM6IFwiICsgcik7XG5cbiAgICAvLyBJcyB0aGlzIHBhdGggZW1wdHk/IE1vdmUgdG8gKHgwLHkwKS5cbiAgICBpZiAodGhpcy5feDEgPT09IG51bGwpIHtcbiAgICAgIHRoaXMuXyArPSBcIk1cIiArIHgwICsgXCIsXCIgKyB5MDtcbiAgICB9XG5cbiAgICAvLyBPciwgaXMgKHgwLHkwKSBub3QgY29pbmNpZGVudCB3aXRoIHRoZSBwcmV2aW91cyBwb2ludD8gTGluZSB0byAoeDAseTApLlxuICAgIGVsc2UgaWYgKE1hdGguYWJzKHRoaXMuX3gxIC0geDApID4gZXBzaWxvbiB8fCBNYXRoLmFicyh0aGlzLl95MSAtIHkwKSA+IGVwc2lsb24pIHtcbiAgICAgIHRoaXMuXyArPSBcIkxcIiArIHgwICsgXCIsXCIgKyB5MDtcbiAgICB9XG5cbiAgICAvLyBJcyB0aGlzIGFyYyBlbXB0eT8gV2XigJlyZSBkb25lLlxuICAgIGlmICghcikgcmV0dXJuO1xuXG4gICAgLy8gRG9lcyB0aGUgYW5nbGUgZ28gdGhlIHdyb25nIHdheT8gRmxpcCB0aGUgZGlyZWN0aW9uLlxuICAgIGlmIChkYSA8IDApIGRhID0gZGEgJSB0YXUgKyB0YXU7XG5cbiAgICAvLyBJcyB0aGlzIGEgY29tcGxldGUgY2lyY2xlPyBEcmF3IHR3byBhcmNzIHRvIGNvbXBsZXRlIHRoZSBjaXJjbGUuXG4gICAgaWYgKGRhID4gdGF1RXBzaWxvbikge1xuICAgICAgdGhpcy5fICs9IFwiQVwiICsgciArIFwiLFwiICsgciArIFwiLDAsMSxcIiArIGN3ICsgXCIsXCIgKyAoeCAtIGR4KSArIFwiLFwiICsgKHkgLSBkeSkgKyBcIkFcIiArIHIgKyBcIixcIiArIHIgKyBcIiwwLDEsXCIgKyBjdyArIFwiLFwiICsgKHRoaXMuX3gxID0geDApICsgXCIsXCIgKyAodGhpcy5feTEgPSB5MCk7XG4gICAgfVxuXG4gICAgLy8gSXMgdGhpcyBhcmMgbm9uLWVtcHR5PyBEcmF3IGFuIGFyYyFcbiAgICBlbHNlIGlmIChkYSA+IGVwc2lsb24pIHtcbiAgICAgIHRoaXMuXyArPSBcIkFcIiArIHIgKyBcIixcIiArIHIgKyBcIiwwLFwiICsgKCsoZGEgPj0gcGkpKSArIFwiLFwiICsgY3cgKyBcIixcIiArICh0aGlzLl94MSA9IHggKyByICogTWF0aC5jb3MoYTEpKSArIFwiLFwiICsgKHRoaXMuX3kxID0geSArIHIgKiBNYXRoLnNpbihhMSkpO1xuICAgIH1cbiAgfSxcbiAgcmVjdDogZnVuY3Rpb24oeCwgeSwgdywgaCkge1xuICAgIHRoaXMuXyArPSBcIk1cIiArICh0aGlzLl94MCA9IHRoaXMuX3gxID0gK3gpICsgXCIsXCIgKyAodGhpcy5feTAgPSB0aGlzLl95MSA9ICt5KSArIFwiaFwiICsgKCt3KSArIFwidlwiICsgKCtoKSArIFwiaFwiICsgKC13KSArIFwiWlwiO1xuICB9LFxuICB0b1N0cmluZzogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuXztcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgcGF0aDtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGNvbnN0YW50KCkge1xuICAgIHJldHVybiB4O1xuICB9O1xufVxuIiwiZXhwb3J0IHZhciBhYnMgPSBNYXRoLmFicztcbmV4cG9ydCB2YXIgYXRhbjIgPSBNYXRoLmF0YW4yO1xuZXhwb3J0IHZhciBjb3MgPSBNYXRoLmNvcztcbmV4cG9ydCB2YXIgbWF4ID0gTWF0aC5tYXg7XG5leHBvcnQgdmFyIG1pbiA9IE1hdGgubWluO1xuZXhwb3J0IHZhciBzaW4gPSBNYXRoLnNpbjtcbmV4cG9ydCB2YXIgc3FydCA9IE1hdGguc3FydDtcblxuZXhwb3J0IHZhciBlcHNpbG9uID0gMWUtMTI7XG5leHBvcnQgdmFyIHBpID0gTWF0aC5QSTtcbmV4cG9ydCB2YXIgaGFsZlBpID0gcGkgLyAyO1xuZXhwb3J0IHZhciB0YXUgPSAyICogcGk7XG5cbmV4cG9ydCBmdW5jdGlvbiBhY29zKHgpIHtcbiAgcmV0dXJuIHggPiAxID8gMCA6IHggPCAtMSA/IHBpIDogTWF0aC5hY29zKHgpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYXNpbih4KSB7XG4gIHJldHVybiB4ID49IDEgPyBoYWxmUGkgOiB4IDw9IC0xID8gLWhhbGZQaSA6IE1hdGguYXNpbih4KTtcbn1cbiIsImltcG9ydCB7cGF0aH0gZnJvbSBcImQzLXBhdGhcIjtcbmltcG9ydCBjb25zdGFudCBmcm9tIFwiLi9jb25zdGFudC5qc1wiO1xuaW1wb3J0IHthYnMsIGFjb3MsIGFzaW4sIGF0YW4yLCBjb3MsIGVwc2lsb24sIGhhbGZQaSwgbWF4LCBtaW4sIHBpLCBzaW4sIHNxcnQsIHRhdX0gZnJvbSBcIi4vbWF0aC5qc1wiO1xuXG5mdW5jdGlvbiBhcmNJbm5lclJhZGl1cyhkKSB7XG4gIHJldHVybiBkLmlubmVyUmFkaXVzO1xufVxuXG5mdW5jdGlvbiBhcmNPdXRlclJhZGl1cyhkKSB7XG4gIHJldHVybiBkLm91dGVyUmFkaXVzO1xufVxuXG5mdW5jdGlvbiBhcmNTdGFydEFuZ2xlKGQpIHtcbiAgcmV0dXJuIGQuc3RhcnRBbmdsZTtcbn1cblxuZnVuY3Rpb24gYXJjRW5kQW5nbGUoZCkge1xuICByZXR1cm4gZC5lbmRBbmdsZTtcbn1cblxuZnVuY3Rpb24gYXJjUGFkQW5nbGUoZCkge1xuICByZXR1cm4gZCAmJiBkLnBhZEFuZ2xlOyAvLyBOb3RlOiBvcHRpb25hbCFcbn1cblxuZnVuY3Rpb24gaW50ZXJzZWN0KHgwLCB5MCwgeDEsIHkxLCB4MiwgeTIsIHgzLCB5Mykge1xuICB2YXIgeDEwID0geDEgLSB4MCwgeTEwID0geTEgLSB5MCxcbiAgICAgIHgzMiA9IHgzIC0geDIsIHkzMiA9IHkzIC0geTIsXG4gICAgICB0ID0geTMyICogeDEwIC0geDMyICogeTEwO1xuICBpZiAodCAqIHQgPCBlcHNpbG9uKSByZXR1cm47XG4gIHQgPSAoeDMyICogKHkwIC0geTIpIC0geTMyICogKHgwIC0geDIpKSAvIHQ7XG4gIHJldHVybiBbeDAgKyB0ICogeDEwLCB5MCArIHQgKiB5MTBdO1xufVxuXG4vLyBDb21wdXRlIHBlcnBlbmRpY3VsYXIgb2Zmc2V0IGxpbmUgb2YgbGVuZ3RoIHJjLlxuLy8gaHR0cDovL21hdGh3b3JsZC53b2xmcmFtLmNvbS9DaXJjbGUtTGluZUludGVyc2VjdGlvbi5odG1sXG5mdW5jdGlvbiBjb3JuZXJUYW5nZW50cyh4MCwgeTAsIHgxLCB5MSwgcjEsIHJjLCBjdykge1xuICB2YXIgeDAxID0geDAgLSB4MSxcbiAgICAgIHkwMSA9IHkwIC0geTEsXG4gICAgICBsbyA9IChjdyA/IHJjIDogLXJjKSAvIHNxcnQoeDAxICogeDAxICsgeTAxICogeTAxKSxcbiAgICAgIG94ID0gbG8gKiB5MDEsXG4gICAgICBveSA9IC1sbyAqIHgwMSxcbiAgICAgIHgxMSA9IHgwICsgb3gsXG4gICAgICB5MTEgPSB5MCArIG95LFxuICAgICAgeDEwID0geDEgKyBveCxcbiAgICAgIHkxMCA9IHkxICsgb3ksXG4gICAgICB4MDAgPSAoeDExICsgeDEwKSAvIDIsXG4gICAgICB5MDAgPSAoeTExICsgeTEwKSAvIDIsXG4gICAgICBkeCA9IHgxMCAtIHgxMSxcbiAgICAgIGR5ID0geTEwIC0geTExLFxuICAgICAgZDIgPSBkeCAqIGR4ICsgZHkgKiBkeSxcbiAgICAgIHIgPSByMSAtIHJjLFxuICAgICAgRCA9IHgxMSAqIHkxMCAtIHgxMCAqIHkxMSxcbiAgICAgIGQgPSAoZHkgPCAwID8gLTEgOiAxKSAqIHNxcnQobWF4KDAsIHIgKiByICogZDIgLSBEICogRCkpLFxuICAgICAgY3gwID0gKEQgKiBkeSAtIGR4ICogZCkgLyBkMixcbiAgICAgIGN5MCA9ICgtRCAqIGR4IC0gZHkgKiBkKSAvIGQyLFxuICAgICAgY3gxID0gKEQgKiBkeSArIGR4ICogZCkgLyBkMixcbiAgICAgIGN5MSA9ICgtRCAqIGR4ICsgZHkgKiBkKSAvIGQyLFxuICAgICAgZHgwID0gY3gwIC0geDAwLFxuICAgICAgZHkwID0gY3kwIC0geTAwLFxuICAgICAgZHgxID0gY3gxIC0geDAwLFxuICAgICAgZHkxID0gY3kxIC0geTAwO1xuXG4gIC8vIFBpY2sgdGhlIGNsb3NlciBvZiB0aGUgdHdvIGludGVyc2VjdGlvbiBwb2ludHMuXG4gIC8vIFRPRE8gSXMgdGhlcmUgYSBmYXN0ZXIgd2F5IHRvIGRldGVybWluZSB3aGljaCBpbnRlcnNlY3Rpb24gdG8gdXNlP1xuICBpZiAoZHgwICogZHgwICsgZHkwICogZHkwID4gZHgxICogZHgxICsgZHkxICogZHkxKSBjeDAgPSBjeDEsIGN5MCA9IGN5MTtcblxuICByZXR1cm4ge1xuICAgIGN4OiBjeDAsXG4gICAgY3k6IGN5MCxcbiAgICB4MDE6IC1veCxcbiAgICB5MDE6IC1veSxcbiAgICB4MTE6IGN4MCAqIChyMSAvIHIgLSAxKSxcbiAgICB5MTE6IGN5MCAqIChyMSAvIHIgLSAxKVxuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIGlubmVyUmFkaXVzID0gYXJjSW5uZXJSYWRpdXMsXG4gICAgICBvdXRlclJhZGl1cyA9IGFyY091dGVyUmFkaXVzLFxuICAgICAgY29ybmVyUmFkaXVzID0gY29uc3RhbnQoMCksXG4gICAgICBwYWRSYWRpdXMgPSBudWxsLFxuICAgICAgc3RhcnRBbmdsZSA9IGFyY1N0YXJ0QW5nbGUsXG4gICAgICBlbmRBbmdsZSA9IGFyY0VuZEFuZ2xlLFxuICAgICAgcGFkQW5nbGUgPSBhcmNQYWRBbmdsZSxcbiAgICAgIGNvbnRleHQgPSBudWxsO1xuXG4gIGZ1bmN0aW9uIGFyYygpIHtcbiAgICB2YXIgYnVmZmVyLFxuICAgICAgICByLFxuICAgICAgICByMCA9ICtpbm5lclJhZGl1cy5hcHBseSh0aGlzLCBhcmd1bWVudHMpLFxuICAgICAgICByMSA9ICtvdXRlclJhZGl1cy5hcHBseSh0aGlzLCBhcmd1bWVudHMpLFxuICAgICAgICBhMCA9IHN0YXJ0QW5nbGUuYXBwbHkodGhpcywgYXJndW1lbnRzKSAtIGhhbGZQaSxcbiAgICAgICAgYTEgPSBlbmRBbmdsZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpIC0gaGFsZlBpLFxuICAgICAgICBkYSA9IGFicyhhMSAtIGEwKSxcbiAgICAgICAgY3cgPSBhMSA+IGEwO1xuXG4gICAgaWYgKCFjb250ZXh0KSBjb250ZXh0ID0gYnVmZmVyID0gcGF0aCgpO1xuXG4gICAgLy8gRW5zdXJlIHRoYXQgdGhlIG91dGVyIHJhZGl1cyBpcyBhbHdheXMgbGFyZ2VyIHRoYW4gdGhlIGlubmVyIHJhZGl1cy5cbiAgICBpZiAocjEgPCByMCkgciA9IHIxLCByMSA9IHIwLCByMCA9IHI7XG5cbiAgICAvLyBJcyBpdCBhIHBvaW50P1xuICAgIGlmICghKHIxID4gZXBzaWxvbikpIGNvbnRleHQubW92ZVRvKDAsIDApO1xuXG4gICAgLy8gT3IgaXMgaXQgYSBjaXJjbGUgb3IgYW5udWx1cz9cbiAgICBlbHNlIGlmIChkYSA+IHRhdSAtIGVwc2lsb24pIHtcbiAgICAgIGNvbnRleHQubW92ZVRvKHIxICogY29zKGEwKSwgcjEgKiBzaW4oYTApKTtcbiAgICAgIGNvbnRleHQuYXJjKDAsIDAsIHIxLCBhMCwgYTEsICFjdyk7XG4gICAgICBpZiAocjAgPiBlcHNpbG9uKSB7XG4gICAgICAgIGNvbnRleHQubW92ZVRvKHIwICogY29zKGExKSwgcjAgKiBzaW4oYTEpKTtcbiAgICAgICAgY29udGV4dC5hcmMoMCwgMCwgcjAsIGExLCBhMCwgY3cpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIE9yIGlzIGl0IGEgY2lyY3VsYXIgb3IgYW5udWxhciBzZWN0b3I/XG4gICAgZWxzZSB7XG4gICAgICB2YXIgYTAxID0gYTAsXG4gICAgICAgICAgYTExID0gYTEsXG4gICAgICAgICAgYTAwID0gYTAsXG4gICAgICAgICAgYTEwID0gYTEsXG4gICAgICAgICAgZGEwID0gZGEsXG4gICAgICAgICAgZGExID0gZGEsXG4gICAgICAgICAgYXAgPSBwYWRBbmdsZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpIC8gMixcbiAgICAgICAgICBycCA9IChhcCA+IGVwc2lsb24pICYmIChwYWRSYWRpdXMgPyArcGFkUmFkaXVzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgOiBzcXJ0KHIwICogcjAgKyByMSAqIHIxKSksXG4gICAgICAgICAgcmMgPSBtaW4oYWJzKHIxIC0gcjApIC8gMiwgK2Nvcm5lclJhZGl1cy5hcHBseSh0aGlzLCBhcmd1bWVudHMpKSxcbiAgICAgICAgICByYzAgPSByYyxcbiAgICAgICAgICByYzEgPSByYyxcbiAgICAgICAgICB0MCxcbiAgICAgICAgICB0MTtcblxuICAgICAgLy8gQXBwbHkgcGFkZGluZz8gTm90ZSB0aGF0IHNpbmNlIHIxIOKJpSByMCwgZGExIOKJpSBkYTAuXG4gICAgICBpZiAocnAgPiBlcHNpbG9uKSB7XG4gICAgICAgIHZhciBwMCA9IGFzaW4ocnAgLyByMCAqIHNpbihhcCkpLFxuICAgICAgICAgICAgcDEgPSBhc2luKHJwIC8gcjEgKiBzaW4oYXApKTtcbiAgICAgICAgaWYgKChkYTAgLT0gcDAgKiAyKSA+IGVwc2lsb24pIHAwICo9IChjdyA/IDEgOiAtMSksIGEwMCArPSBwMCwgYTEwIC09IHAwO1xuICAgICAgICBlbHNlIGRhMCA9IDAsIGEwMCA9IGExMCA9IChhMCArIGExKSAvIDI7XG4gICAgICAgIGlmICgoZGExIC09IHAxICogMikgPiBlcHNpbG9uKSBwMSAqPSAoY3cgPyAxIDogLTEpLCBhMDEgKz0gcDEsIGExMSAtPSBwMTtcbiAgICAgICAgZWxzZSBkYTEgPSAwLCBhMDEgPSBhMTEgPSAoYTAgKyBhMSkgLyAyO1xuICAgICAgfVxuXG4gICAgICB2YXIgeDAxID0gcjEgKiBjb3MoYTAxKSxcbiAgICAgICAgICB5MDEgPSByMSAqIHNpbihhMDEpLFxuICAgICAgICAgIHgxMCA9IHIwICogY29zKGExMCksXG4gICAgICAgICAgeTEwID0gcjAgKiBzaW4oYTEwKTtcblxuICAgICAgLy8gQXBwbHkgcm91bmRlZCBjb3JuZXJzP1xuICAgICAgaWYgKHJjID4gZXBzaWxvbikge1xuICAgICAgICB2YXIgeDExID0gcjEgKiBjb3MoYTExKSxcbiAgICAgICAgICAgIHkxMSA9IHIxICogc2luKGExMSksXG4gICAgICAgICAgICB4MDAgPSByMCAqIGNvcyhhMDApLFxuICAgICAgICAgICAgeTAwID0gcjAgKiBzaW4oYTAwKSxcbiAgICAgICAgICAgIG9jO1xuXG4gICAgICAgIC8vIFJlc3RyaWN0IHRoZSBjb3JuZXIgcmFkaXVzIGFjY29yZGluZyB0byB0aGUgc2VjdG9yIGFuZ2xlLlxuICAgICAgICBpZiAoZGEgPCBwaSAmJiAob2MgPSBpbnRlcnNlY3QoeDAxLCB5MDEsIHgwMCwgeTAwLCB4MTEsIHkxMSwgeDEwLCB5MTApKSkge1xuICAgICAgICAgIHZhciBheCA9IHgwMSAtIG9jWzBdLFxuICAgICAgICAgICAgICBheSA9IHkwMSAtIG9jWzFdLFxuICAgICAgICAgICAgICBieCA9IHgxMSAtIG9jWzBdLFxuICAgICAgICAgICAgICBieSA9IHkxMSAtIG9jWzFdLFxuICAgICAgICAgICAgICBrYyA9IDEgLyBzaW4oYWNvcygoYXggKiBieCArIGF5ICogYnkpIC8gKHNxcnQoYXggKiBheCArIGF5ICogYXkpICogc3FydChieCAqIGJ4ICsgYnkgKiBieSkpKSAvIDIpLFxuICAgICAgICAgICAgICBsYyA9IHNxcnQob2NbMF0gKiBvY1swXSArIG9jWzFdICogb2NbMV0pO1xuICAgICAgICAgIHJjMCA9IG1pbihyYywgKHIwIC0gbGMpIC8gKGtjIC0gMSkpO1xuICAgICAgICAgIHJjMSA9IG1pbihyYywgKHIxIC0gbGMpIC8gKGtjICsgMSkpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIElzIHRoZSBzZWN0b3IgY29sbGFwc2VkIHRvIGEgbGluZT9cbiAgICAgIGlmICghKGRhMSA+IGVwc2lsb24pKSBjb250ZXh0Lm1vdmVUbyh4MDEsIHkwMSk7XG5cbiAgICAgIC8vIERvZXMgdGhlIHNlY3RvcuKAmXMgb3V0ZXIgcmluZyBoYXZlIHJvdW5kZWQgY29ybmVycz9cbiAgICAgIGVsc2UgaWYgKHJjMSA+IGVwc2lsb24pIHtcbiAgICAgICAgdDAgPSBjb3JuZXJUYW5nZW50cyh4MDAsIHkwMCwgeDAxLCB5MDEsIHIxLCByYzEsIGN3KTtcbiAgICAgICAgdDEgPSBjb3JuZXJUYW5nZW50cyh4MTEsIHkxMSwgeDEwLCB5MTAsIHIxLCByYzEsIGN3KTtcblxuICAgICAgICBjb250ZXh0Lm1vdmVUbyh0MC5jeCArIHQwLngwMSwgdDAuY3kgKyB0MC55MDEpO1xuXG4gICAgICAgIC8vIEhhdmUgdGhlIGNvcm5lcnMgbWVyZ2VkP1xuICAgICAgICBpZiAocmMxIDwgcmMpIGNvbnRleHQuYXJjKHQwLmN4LCB0MC5jeSwgcmMxLCBhdGFuMih0MC55MDEsIHQwLngwMSksIGF0YW4yKHQxLnkwMSwgdDEueDAxKSwgIWN3KTtcblxuICAgICAgICAvLyBPdGhlcndpc2UsIGRyYXcgdGhlIHR3byBjb3JuZXJzIGFuZCB0aGUgcmluZy5cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgY29udGV4dC5hcmModDAuY3gsIHQwLmN5LCByYzEsIGF0YW4yKHQwLnkwMSwgdDAueDAxKSwgYXRhbjIodDAueTExLCB0MC54MTEpLCAhY3cpO1xuICAgICAgICAgIGNvbnRleHQuYXJjKDAsIDAsIHIxLCBhdGFuMih0MC5jeSArIHQwLnkxMSwgdDAuY3ggKyB0MC54MTEpLCBhdGFuMih0MS5jeSArIHQxLnkxMSwgdDEuY3ggKyB0MS54MTEpLCAhY3cpO1xuICAgICAgICAgIGNvbnRleHQuYXJjKHQxLmN4LCB0MS5jeSwgcmMxLCBhdGFuMih0MS55MTEsIHQxLngxMSksIGF0YW4yKHQxLnkwMSwgdDEueDAxKSwgIWN3KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBPciBpcyB0aGUgb3V0ZXIgcmluZyBqdXN0IGEgY2lyY3VsYXIgYXJjP1xuICAgICAgZWxzZSBjb250ZXh0Lm1vdmVUbyh4MDEsIHkwMSksIGNvbnRleHQuYXJjKDAsIDAsIHIxLCBhMDEsIGExMSwgIWN3KTtcblxuICAgICAgLy8gSXMgdGhlcmUgbm8gaW5uZXIgcmluZywgYW5kIGl04oCZcyBhIGNpcmN1bGFyIHNlY3Rvcj9cbiAgICAgIC8vIE9yIHBlcmhhcHMgaXTigJlzIGFuIGFubnVsYXIgc2VjdG9yIGNvbGxhcHNlZCBkdWUgdG8gcGFkZGluZz9cbiAgICAgIGlmICghKHIwID4gZXBzaWxvbikgfHwgIShkYTAgPiBlcHNpbG9uKSkgY29udGV4dC5saW5lVG8oeDEwLCB5MTApO1xuXG4gICAgICAvLyBEb2VzIHRoZSBzZWN0b3LigJlzIGlubmVyIHJpbmcgKG9yIHBvaW50KSBoYXZlIHJvdW5kZWQgY29ybmVycz9cbiAgICAgIGVsc2UgaWYgKHJjMCA+IGVwc2lsb24pIHtcbiAgICAgICAgdDAgPSBjb3JuZXJUYW5nZW50cyh4MTAsIHkxMCwgeDExLCB5MTEsIHIwLCAtcmMwLCBjdyk7XG4gICAgICAgIHQxID0gY29ybmVyVGFuZ2VudHMoeDAxLCB5MDEsIHgwMCwgeTAwLCByMCwgLXJjMCwgY3cpO1xuXG4gICAgICAgIGNvbnRleHQubGluZVRvKHQwLmN4ICsgdDAueDAxLCB0MC5jeSArIHQwLnkwMSk7XG5cbiAgICAgICAgLy8gSGF2ZSB0aGUgY29ybmVycyBtZXJnZWQ/XG4gICAgICAgIGlmIChyYzAgPCByYykgY29udGV4dC5hcmModDAuY3gsIHQwLmN5LCByYzAsIGF0YW4yKHQwLnkwMSwgdDAueDAxKSwgYXRhbjIodDEueTAxLCB0MS54MDEpLCAhY3cpO1xuXG4gICAgICAgIC8vIE90aGVyd2lzZSwgZHJhdyB0aGUgdHdvIGNvcm5lcnMgYW5kIHRoZSByaW5nLlxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBjb250ZXh0LmFyYyh0MC5jeCwgdDAuY3ksIHJjMCwgYXRhbjIodDAueTAxLCB0MC54MDEpLCBhdGFuMih0MC55MTEsIHQwLngxMSksICFjdyk7XG4gICAgICAgICAgY29udGV4dC5hcmMoMCwgMCwgcjAsIGF0YW4yKHQwLmN5ICsgdDAueTExLCB0MC5jeCArIHQwLngxMSksIGF0YW4yKHQxLmN5ICsgdDEueTExLCB0MS5jeCArIHQxLngxMSksIGN3KTtcbiAgICAgICAgICBjb250ZXh0LmFyYyh0MS5jeCwgdDEuY3ksIHJjMCwgYXRhbjIodDEueTExLCB0MS54MTEpLCBhdGFuMih0MS55MDEsIHQxLngwMSksICFjdyk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gT3IgaXMgdGhlIGlubmVyIHJpbmcganVzdCBhIGNpcmN1bGFyIGFyYz9cbiAgICAgIGVsc2UgY29udGV4dC5hcmMoMCwgMCwgcjAsIGExMCwgYTAwLCBjdyk7XG4gICAgfVxuXG4gICAgY29udGV4dC5jbG9zZVBhdGgoKTtcblxuICAgIGlmIChidWZmZXIpIHJldHVybiBjb250ZXh0ID0gbnVsbCwgYnVmZmVyICsgXCJcIiB8fCBudWxsO1xuICB9XG5cbiAgYXJjLmNlbnRyb2lkID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHIgPSAoK2lubmVyUmFkaXVzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgKyArb3V0ZXJSYWRpdXMuYXBwbHkodGhpcywgYXJndW1lbnRzKSkgLyAyLFxuICAgICAgICBhID0gKCtzdGFydEFuZ2xlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgKyArZW5kQW5nbGUuYXBwbHkodGhpcywgYXJndW1lbnRzKSkgLyAyIC0gcGkgLyAyO1xuICAgIHJldHVybiBbY29zKGEpICogciwgc2luKGEpICogcl07XG4gIH07XG5cbiAgYXJjLmlubmVyUmFkaXVzID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGlubmVyUmFkaXVzID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIGFyYykgOiBpbm5lclJhZGl1cztcbiAgfTtcblxuICBhcmMub3V0ZXJSYWRpdXMgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAob3V0ZXJSYWRpdXMgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgYXJjKSA6IG91dGVyUmFkaXVzO1xuICB9O1xuXG4gIGFyYy5jb3JuZXJSYWRpdXMgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoY29ybmVyUmFkaXVzID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIGFyYykgOiBjb3JuZXJSYWRpdXM7XG4gIH07XG5cbiAgYXJjLnBhZFJhZGl1cyA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChwYWRSYWRpdXMgPSBfID09IG51bGwgPyBudWxsIDogdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIGFyYykgOiBwYWRSYWRpdXM7XG4gIH07XG5cbiAgYXJjLnN0YXJ0QW5nbGUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc3RhcnRBbmdsZSA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBhcmMpIDogc3RhcnRBbmdsZTtcbiAgfTtcblxuICBhcmMuZW5kQW5nbGUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZW5kQW5nbGUgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgYXJjKSA6IGVuZEFuZ2xlO1xuICB9O1xuXG4gIGFyYy5wYWRBbmdsZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChwYWRBbmdsZSA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBhcmMpIDogcGFkQW5nbGU7XG4gIH07XG5cbiAgYXJjLmNvbnRleHQgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoKGNvbnRleHQgPSBfID09IG51bGwgPyBudWxsIDogXyksIGFyYykgOiBjb250ZXh0O1xuICB9O1xuXG4gIHJldHVybiBhcmM7XG59XG4iLCJleHBvcnQgdmFyIHNsaWNlID0gQXJyYXkucHJvdG90eXBlLnNsaWNlO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHJldHVybiB0eXBlb2YgeCA9PT0gXCJvYmplY3RcIiAmJiBcImxlbmd0aFwiIGluIHhcbiAgICA/IHggLy8gQXJyYXksIFR5cGVkQXJyYXksIE5vZGVMaXN0LCBhcnJheS1saWtlXG4gICAgOiBBcnJheS5mcm9tKHgpOyAvLyBNYXAsIFNldCwgaXRlcmFibGUsIHN0cmluZywgb3IgYW55dGhpbmcgZWxzZVxufVxuIiwiZXhwb3J0IGZ1bmN0aW9uIHgocCkge1xuICByZXR1cm4gcFswXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHkocCkge1xuICByZXR1cm4gcFsxXTtcbn1cbiIsImltcG9ydCB7cGF0aH0gZnJvbSBcImQzLXBhdGhcIjtcbmltcG9ydCB7c2xpY2V9IGZyb20gXCIuLi9hcnJheS5qc1wiO1xuaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuLi9jb25zdGFudC5qc1wiO1xuaW1wb3J0IHt4IGFzIHBvaW50WCwgeSBhcyBwb2ludFl9IGZyb20gXCIuLi9wb2ludC5qc1wiO1xuaW1wb3J0IHBvaW50UmFkaWFsIGZyb20gXCIuLi9wb2ludFJhZGlhbC5qc1wiO1xuXG5mdW5jdGlvbiBsaW5rU291cmNlKGQpIHtcbiAgcmV0dXJuIGQuc291cmNlO1xufVxuXG5mdW5jdGlvbiBsaW5rVGFyZ2V0KGQpIHtcbiAgcmV0dXJuIGQudGFyZ2V0O1xufVxuXG5mdW5jdGlvbiBsaW5rKGN1cnZlKSB7XG4gIHZhciBzb3VyY2UgPSBsaW5rU291cmNlLFxuICAgICAgdGFyZ2V0ID0gbGlua1RhcmdldCxcbiAgICAgIHggPSBwb2ludFgsXG4gICAgICB5ID0gcG9pbnRZLFxuICAgICAgY29udGV4dCA9IG51bGw7XG5cbiAgZnVuY3Rpb24gbGluaygpIHtcbiAgICB2YXIgYnVmZmVyLCBhcmd2ID0gc2xpY2UuY2FsbChhcmd1bWVudHMpLCBzID0gc291cmNlLmFwcGx5KHRoaXMsIGFyZ3YpLCB0ID0gdGFyZ2V0LmFwcGx5KHRoaXMsIGFyZ3YpO1xuICAgIGlmICghY29udGV4dCkgY29udGV4dCA9IGJ1ZmZlciA9IHBhdGgoKTtcbiAgICBjdXJ2ZShjb250ZXh0LCAreC5hcHBseSh0aGlzLCAoYXJndlswXSA9IHMsIGFyZ3YpKSwgK3kuYXBwbHkodGhpcywgYXJndiksICt4LmFwcGx5KHRoaXMsIChhcmd2WzBdID0gdCwgYXJndikpLCAreS5hcHBseSh0aGlzLCBhcmd2KSk7XG4gICAgaWYgKGJ1ZmZlcikgcmV0dXJuIGNvbnRleHQgPSBudWxsLCBidWZmZXIgKyBcIlwiIHx8IG51bGw7XG4gIH1cblxuICBsaW5rLnNvdXJjZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzb3VyY2UgPSBfLCBsaW5rKSA6IHNvdXJjZTtcbiAgfTtcblxuICBsaW5rLnRhcmdldCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0YXJnZXQgPSBfLCBsaW5rKSA6IHRhcmdldDtcbiAgfTtcblxuICBsaW5rLnggPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBsaW5rKSA6IHg7XG4gIH07XG5cbiAgbGluay55ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHkgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgbGluaykgOiB5O1xuICB9O1xuXG4gIGxpbmsuY29udGV4dCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICgoY29udGV4dCA9IF8gPT0gbnVsbCA/IG51bGwgOiBfKSwgbGluaykgOiBjb250ZXh0O1xuICB9O1xuXG4gIHJldHVybiBsaW5rO1xufVxuXG5mdW5jdGlvbiBjdXJ2ZUhvcml6b250YWwoY29udGV4dCwgeDAsIHkwLCB4MSwgeTEpIHtcbiAgY29udGV4dC5tb3ZlVG8oeDAsIHkwKTtcbiAgY29udGV4dC5iZXppZXJDdXJ2ZVRvKHgwID0gKHgwICsgeDEpIC8gMiwgeTAsIHgwLCB5MSwgeDEsIHkxKTtcbn1cblxuZnVuY3Rpb24gY3VydmVWZXJ0aWNhbChjb250ZXh0LCB4MCwgeTAsIHgxLCB5MSkge1xuICBjb250ZXh0Lm1vdmVUbyh4MCwgeTApO1xuICBjb250ZXh0LmJlemllckN1cnZlVG8oeDAsIHkwID0gKHkwICsgeTEpIC8gMiwgeDEsIHkwLCB4MSwgeTEpO1xufVxuXG5mdW5jdGlvbiBjdXJ2ZVJhZGlhbChjb250ZXh0LCB4MCwgeTAsIHgxLCB5MSkge1xuICB2YXIgcDAgPSBwb2ludFJhZGlhbCh4MCwgeTApLFxuICAgICAgcDEgPSBwb2ludFJhZGlhbCh4MCwgeTAgPSAoeTAgKyB5MSkgLyAyKSxcbiAgICAgIHAyID0gcG9pbnRSYWRpYWwoeDEsIHkwKSxcbiAgICAgIHAzID0gcG9pbnRSYWRpYWwoeDEsIHkxKTtcbiAgY29udGV4dC5tb3ZlVG8ocDBbMF0sIHAwWzFdKTtcbiAgY29udGV4dC5iZXppZXJDdXJ2ZVRvKHAxWzBdLCBwMVsxXSwgcDJbMF0sIHAyWzFdLCBwM1swXSwgcDNbMV0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbGlua0hvcml6b250YWwoKSB7XG4gIHJldHVybiBsaW5rKGN1cnZlSG9yaXpvbnRhbCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBsaW5rVmVydGljYWwoKSB7XG4gIHJldHVybiBsaW5rKGN1cnZlVmVydGljYWwpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbGlua1JhZGlhbCgpIHtcbiAgdmFyIGwgPSBsaW5rKGN1cnZlUmFkaWFsKTtcbiAgbC5hbmdsZSA9IGwueCwgZGVsZXRlIGwueDtcbiAgbC5yYWRpdXMgPSBsLnksIGRlbGV0ZSBsLnk7XG4gIHJldHVybiBsO1xufVxuIiwiZXhwb3J0IGZ1bmN0aW9uIG5vcHJvcGFnYXRpb24oZXZlbnQpIHtcbiAgZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGV2ZW50KSB7XG4gIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gIGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xufVxuIiwiaW1wb3J0IHtzZWxlY3R9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcbmltcG9ydCBub2V2ZW50IGZyb20gXCIuL25vZXZlbnQuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmlldykge1xuICB2YXIgcm9vdCA9IHZpZXcuZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LFxuICAgICAgc2VsZWN0aW9uID0gc2VsZWN0KHZpZXcpLm9uKFwiZHJhZ3N0YXJ0LmRyYWdcIiwgbm9ldmVudCwgdHJ1ZSk7XG4gIGlmIChcIm9uc2VsZWN0c3RhcnRcIiBpbiByb290KSB7XG4gICAgc2VsZWN0aW9uLm9uKFwic2VsZWN0c3RhcnQuZHJhZ1wiLCBub2V2ZW50LCB0cnVlKTtcbiAgfSBlbHNlIHtcbiAgICByb290Ll9fbm9zZWxlY3QgPSByb290LnN0eWxlLk1velVzZXJTZWxlY3Q7XG4gICAgcm9vdC5zdHlsZS5Nb3pVc2VyU2VsZWN0ID0gXCJub25lXCI7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHllc2RyYWcodmlldywgbm9jbGljaykge1xuICB2YXIgcm9vdCA9IHZpZXcuZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LFxuICAgICAgc2VsZWN0aW9uID0gc2VsZWN0KHZpZXcpLm9uKFwiZHJhZ3N0YXJ0LmRyYWdcIiwgbnVsbCk7XG4gIGlmIChub2NsaWNrKSB7XG4gICAgc2VsZWN0aW9uLm9uKFwiY2xpY2suZHJhZ1wiLCBub2V2ZW50LCB0cnVlKTtcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgeyBzZWxlY3Rpb24ub24oXCJjbGljay5kcmFnXCIsIG51bGwpOyB9LCAwKTtcbiAgfVxuICBpZiAoXCJvbnNlbGVjdHN0YXJ0XCIgaW4gcm9vdCkge1xuICAgIHNlbGVjdGlvbi5vbihcInNlbGVjdHN0YXJ0LmRyYWdcIiwgbnVsbCk7XG4gIH0gZWxzZSB7XG4gICAgcm9vdC5zdHlsZS5Nb3pVc2VyU2VsZWN0ID0gcm9vdC5fX25vc2VsZWN0O1xuICAgIGRlbGV0ZSByb290Ll9fbm9zZWxlY3Q7XG4gIH1cbn1cbiIsInZhciBlcHNpbG9uMiA9IDFlLTEyO1xuXG5mdW5jdGlvbiBjb3NoKHgpIHtcbiAgcmV0dXJuICgoeCA9IE1hdGguZXhwKHgpKSArIDEgLyB4KSAvIDI7XG59XG5cbmZ1bmN0aW9uIHNpbmgoeCkge1xuICByZXR1cm4gKCh4ID0gTWF0aC5leHAoeCkpIC0gMSAvIHgpIC8gMjtcbn1cblxuZnVuY3Rpb24gdGFuaCh4KSB7XG4gIHJldHVybiAoKHggPSBNYXRoLmV4cCgyICogeCkpIC0gMSkgLyAoeCArIDEpO1xufVxuXG5leHBvcnQgZGVmYXVsdCAoZnVuY3Rpb24gem9vbVJobyhyaG8sIHJobzIsIHJobzQpIHtcblxuICAvLyBwMCA9IFt1eDAsIHV5MCwgdzBdXG4gIC8vIHAxID0gW3V4MSwgdXkxLCB3MV1cbiAgZnVuY3Rpb24gem9vbShwMCwgcDEpIHtcbiAgICB2YXIgdXgwID0gcDBbMF0sIHV5MCA9IHAwWzFdLCB3MCA9IHAwWzJdLFxuICAgICAgICB1eDEgPSBwMVswXSwgdXkxID0gcDFbMV0sIHcxID0gcDFbMl0sXG4gICAgICAgIGR4ID0gdXgxIC0gdXgwLFxuICAgICAgICBkeSA9IHV5MSAtIHV5MCxcbiAgICAgICAgZDIgPSBkeCAqIGR4ICsgZHkgKiBkeSxcbiAgICAgICAgaSxcbiAgICAgICAgUztcblxuICAgIC8vIFNwZWNpYWwgY2FzZSBmb3IgdTAg4omFIHUxLlxuICAgIGlmIChkMiA8IGVwc2lsb24yKSB7XG4gICAgICBTID0gTWF0aC5sb2codzEgLyB3MCkgLyByaG87XG4gICAgICBpID0gZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgIHV4MCArIHQgKiBkeCxcbiAgICAgICAgICB1eTAgKyB0ICogZHksXG4gICAgICAgICAgdzAgKiBNYXRoLmV4cChyaG8gKiB0ICogUylcbiAgICAgICAgXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBHZW5lcmFsIGNhc2UuXG4gICAgZWxzZSB7XG4gICAgICB2YXIgZDEgPSBNYXRoLnNxcnQoZDIpLFxuICAgICAgICAgIGIwID0gKHcxICogdzEgLSB3MCAqIHcwICsgcmhvNCAqIGQyKSAvICgyICogdzAgKiByaG8yICogZDEpLFxuICAgICAgICAgIGIxID0gKHcxICogdzEgLSB3MCAqIHcwIC0gcmhvNCAqIGQyKSAvICgyICogdzEgKiByaG8yICogZDEpLFxuICAgICAgICAgIHIwID0gTWF0aC5sb2coTWF0aC5zcXJ0KGIwICogYjAgKyAxKSAtIGIwKSxcbiAgICAgICAgICByMSA9IE1hdGgubG9nKE1hdGguc3FydChiMSAqIGIxICsgMSkgLSBiMSk7XG4gICAgICBTID0gKHIxIC0gcjApIC8gcmhvO1xuICAgICAgaSA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdmFyIHMgPSB0ICogUyxcbiAgICAgICAgICAgIGNvc2hyMCA9IGNvc2gocjApLFxuICAgICAgICAgICAgdSA9IHcwIC8gKHJobzIgKiBkMSkgKiAoY29zaHIwICogdGFuaChyaG8gKiBzICsgcjApIC0gc2luaChyMCkpO1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgIHV4MCArIHUgKiBkeCxcbiAgICAgICAgICB1eTAgKyB1ICogZHksXG4gICAgICAgICAgdzAgKiBjb3NocjAgLyBjb3NoKHJobyAqIHMgKyByMClcbiAgICAgICAgXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpLmR1cmF0aW9uID0gUyAqIDEwMDAgKiByaG8gLyBNYXRoLlNRUlQyO1xuXG4gICAgcmV0dXJuIGk7XG4gIH1cblxuICB6b29tLnJobyA9IGZ1bmN0aW9uKF8pIHtcbiAgICB2YXIgXzEgPSBNYXRoLm1heCgxZS0zLCArXyksIF8yID0gXzEgKiBfMSwgXzQgPSBfMiAqIF8yO1xuICAgIHJldHVybiB6b29tUmhvKF8xLCBfMiwgXzQpO1xuICB9O1xuXG4gIHJldHVybiB6b29tO1xufSkoTWF0aC5TUVJUMiwgMiwgNCk7XG4iLCJpbXBvcnQgc291cmNlRXZlbnQgZnJvbSBcIi4vc291cmNlRXZlbnQuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oZXZlbnQsIG5vZGUpIHtcbiAgZXZlbnQgPSBzb3VyY2VFdmVudChldmVudCk7XG4gIGlmIChub2RlID09PSB1bmRlZmluZWQpIG5vZGUgPSBldmVudC5jdXJyZW50VGFyZ2V0O1xuICBpZiAobm9kZSkge1xuICAgIHZhciBzdmcgPSBub2RlLm93bmVyU1ZHRWxlbWVudCB8fCBub2RlO1xuICAgIGlmIChzdmcuY3JlYXRlU1ZHUG9pbnQpIHtcbiAgICAgIHZhciBwb2ludCA9IHN2Zy5jcmVhdGVTVkdQb2ludCgpO1xuICAgICAgcG9pbnQueCA9IGV2ZW50LmNsaWVudFgsIHBvaW50LnkgPSBldmVudC5jbGllbnRZO1xuICAgICAgcG9pbnQgPSBwb2ludC5tYXRyaXhUcmFuc2Zvcm0obm9kZS5nZXRTY3JlZW5DVE0oKS5pbnZlcnNlKCkpO1xuICAgICAgcmV0dXJuIFtwb2ludC54LCBwb2ludC55XTtcbiAgICB9XG4gICAgaWYgKG5vZGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KSB7XG4gICAgICB2YXIgcmVjdCA9IG5vZGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICByZXR1cm4gW2V2ZW50LmNsaWVudFggLSByZWN0LmxlZnQgLSBub2RlLmNsaWVudExlZnQsIGV2ZW50LmNsaWVudFkgLSByZWN0LnRvcCAtIG5vZGUuY2xpZW50VG9wXTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIFtldmVudC5wYWdlWCwgZXZlbnQucGFnZVldO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oZXZlbnQpIHtcbiAgbGV0IHNvdXJjZUV2ZW50O1xuICB3aGlsZSAoc291cmNlRXZlbnQgPSBldmVudC5zb3VyY2VFdmVudCkgZXZlbnQgPSBzb3VyY2VFdmVudDtcbiAgcmV0dXJuIGV2ZW50O1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgeCA9PiAoKSA9PiB4O1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gWm9vbUV2ZW50KHR5cGUsIHtcbiAgc291cmNlRXZlbnQsXG4gIHRhcmdldCxcbiAgdHJhbnNmb3JtLFxuICBkaXNwYXRjaFxufSkge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0aGlzLCB7XG4gICAgdHlwZToge3ZhbHVlOiB0eXBlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWV9LFxuICAgIHNvdXJjZUV2ZW50OiB7dmFsdWU6IHNvdXJjZUV2ZW50LCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWV9LFxuICAgIHRhcmdldDoge3ZhbHVlOiB0YXJnZXQsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZX0sXG4gICAgdHJhbnNmb3JtOiB7dmFsdWU6IHRyYW5zZm9ybSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlfSxcbiAgICBfOiB7dmFsdWU6IGRpc3BhdGNofVxuICB9KTtcbn1cbiIsImV4cG9ydCBmdW5jdGlvbiBUcmFuc2Zvcm0oaywgeCwgeSkge1xuICB0aGlzLmsgPSBrO1xuICB0aGlzLnggPSB4O1xuICB0aGlzLnkgPSB5O1xufVxuXG5UcmFuc2Zvcm0ucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogVHJhbnNmb3JtLFxuICBzY2FsZTogZnVuY3Rpb24oaykge1xuICAgIHJldHVybiBrID09PSAxID8gdGhpcyA6IG5ldyBUcmFuc2Zvcm0odGhpcy5rICogaywgdGhpcy54LCB0aGlzLnkpO1xuICB9LFxuICB0cmFuc2xhdGU6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICByZXR1cm4geCA9PT0gMCAmIHkgPT09IDAgPyB0aGlzIDogbmV3IFRyYW5zZm9ybSh0aGlzLmssIHRoaXMueCArIHRoaXMuayAqIHgsIHRoaXMueSArIHRoaXMuayAqIHkpO1xuICB9LFxuICBhcHBseTogZnVuY3Rpb24ocG9pbnQpIHtcbiAgICByZXR1cm4gW3BvaW50WzBdICogdGhpcy5rICsgdGhpcy54LCBwb2ludFsxXSAqIHRoaXMuayArIHRoaXMueV07XG4gIH0sXG4gIGFwcGx5WDogZnVuY3Rpb24oeCkge1xuICAgIHJldHVybiB4ICogdGhpcy5rICsgdGhpcy54O1xuICB9LFxuICBhcHBseVk6IGZ1bmN0aW9uKHkpIHtcbiAgICByZXR1cm4geSAqIHRoaXMuayArIHRoaXMueTtcbiAgfSxcbiAgaW52ZXJ0OiBmdW5jdGlvbihsb2NhdGlvbikge1xuICAgIHJldHVybiBbKGxvY2F0aW9uWzBdIC0gdGhpcy54KSAvIHRoaXMuaywgKGxvY2F0aW9uWzFdIC0gdGhpcy55KSAvIHRoaXMua107XG4gIH0sXG4gIGludmVydFg6IGZ1bmN0aW9uKHgpIHtcbiAgICByZXR1cm4gKHggLSB0aGlzLngpIC8gdGhpcy5rO1xuICB9LFxuICBpbnZlcnRZOiBmdW5jdGlvbih5KSB7XG4gICAgcmV0dXJuICh5IC0gdGhpcy55KSAvIHRoaXMuaztcbiAgfSxcbiAgcmVzY2FsZVg6IGZ1bmN0aW9uKHgpIHtcbiAgICByZXR1cm4geC5jb3B5KCkuZG9tYWluKHgucmFuZ2UoKS5tYXAodGhpcy5pbnZlcnRYLCB0aGlzKS5tYXAoeC5pbnZlcnQsIHgpKTtcbiAgfSxcbiAgcmVzY2FsZVk6IGZ1bmN0aW9uKHkpIHtcbiAgICByZXR1cm4geS5jb3B5KCkuZG9tYWluKHkucmFuZ2UoKS5tYXAodGhpcy5pbnZlcnRZLCB0aGlzKS5tYXAoeS5pbnZlcnQsIHkpKTtcbiAgfSxcbiAgdG9TdHJpbmc6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBcInRyYW5zbGF0ZShcIiArIHRoaXMueCArIFwiLFwiICsgdGhpcy55ICsgXCIpIHNjYWxlKFwiICsgdGhpcy5rICsgXCIpXCI7XG4gIH1cbn07XG5cbmV4cG9ydCB2YXIgaWRlbnRpdHkgPSBuZXcgVHJhbnNmb3JtKDEsIDAsIDApO1xuXG50cmFuc2Zvcm0ucHJvdG90eXBlID0gVHJhbnNmb3JtLnByb3RvdHlwZTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdHJhbnNmb3JtKG5vZGUpIHtcbiAgd2hpbGUgKCFub2RlLl9fem9vbSkgaWYgKCEobm9kZSA9IG5vZGUucGFyZW50Tm9kZSkpIHJldHVybiBpZGVudGl0eTtcbiAgcmV0dXJuIG5vZGUuX196b29tO1xufVxuIiwiZXhwb3J0IGZ1bmN0aW9uIG5vcHJvcGFnYXRpb24oZXZlbnQpIHtcbiAgZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGV2ZW50KSB7XG4gIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gIGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xufVxuIiwiaW1wb3J0IHtkaXNwYXRjaH0gZnJvbSBcImQzLWRpc3BhdGNoXCI7XG5pbXBvcnQge2RyYWdEaXNhYmxlLCBkcmFnRW5hYmxlfSBmcm9tIFwiZDMtZHJhZ1wiO1xuaW1wb3J0IHtpbnRlcnBvbGF0ZVpvb219IGZyb20gXCJkMy1pbnRlcnBvbGF0ZVwiO1xuaW1wb3J0IHtzZWxlY3QsIHBvaW50ZXJ9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcbmltcG9ydCB7aW50ZXJydXB0fSBmcm9tIFwiZDMtdHJhbnNpdGlvblwiO1xuaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuL2NvbnN0YW50LmpzXCI7XG5pbXBvcnQgWm9vbUV2ZW50IGZyb20gXCIuL2V2ZW50LmpzXCI7XG5pbXBvcnQge1RyYW5zZm9ybSwgaWRlbnRpdHl9IGZyb20gXCIuL3RyYW5zZm9ybS5qc1wiO1xuaW1wb3J0IG5vZXZlbnQsIHtub3Byb3BhZ2F0aW9ufSBmcm9tIFwiLi9ub2V2ZW50LmpzXCI7XG5cbi8vIElnbm9yZSByaWdodC1jbGljaywgc2luY2UgdGhhdCBzaG91bGQgb3BlbiB0aGUgY29udGV4dCBtZW51LlxuLy8gZXhjZXB0IGZvciBwaW5jaC10by16b29tLCB3aGljaCBpcyBzZW50IGFzIGEgd2hlZWwrY3RybEtleSBldmVudFxuZnVuY3Rpb24gZGVmYXVsdEZpbHRlcihldmVudCkge1xuICByZXR1cm4gKCFldmVudC5jdHJsS2V5IHx8IGV2ZW50LnR5cGUgPT09ICd3aGVlbCcpICYmICFldmVudC5idXR0b247XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRFeHRlbnQoKSB7XG4gIHZhciBlID0gdGhpcztcbiAgaWYgKGUgaW5zdGFuY2VvZiBTVkdFbGVtZW50KSB7XG4gICAgZSA9IGUub3duZXJTVkdFbGVtZW50IHx8IGU7XG4gICAgaWYgKGUuaGFzQXR0cmlidXRlKFwidmlld0JveFwiKSkge1xuICAgICAgZSA9IGUudmlld0JveC5iYXNlVmFsO1xuICAgICAgcmV0dXJuIFtbZS54LCBlLnldLCBbZS54ICsgZS53aWR0aCwgZS55ICsgZS5oZWlnaHRdXTtcbiAgICB9XG4gICAgcmV0dXJuIFtbMCwgMF0sIFtlLndpZHRoLmJhc2VWYWwudmFsdWUsIGUuaGVpZ2h0LmJhc2VWYWwudmFsdWVdXTtcbiAgfVxuICByZXR1cm4gW1swLCAwXSwgW2UuY2xpZW50V2lkdGgsIGUuY2xpZW50SGVpZ2h0XV07XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRUcmFuc2Zvcm0oKSB7XG4gIHJldHVybiB0aGlzLl9fem9vbSB8fCBpZGVudGl0eTtcbn1cblxuZnVuY3Rpb24gZGVmYXVsdFdoZWVsRGVsdGEoZXZlbnQpIHtcbiAgcmV0dXJuIC1ldmVudC5kZWx0YVkgKiAoZXZlbnQuZGVsdGFNb2RlID09PSAxID8gMC4wNSA6IGV2ZW50LmRlbHRhTW9kZSA/IDEgOiAwLjAwMikgKiAoZXZlbnQuY3RybEtleSA/IDEwIDogMSk7XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRUb3VjaGFibGUoKSB7XG4gIHJldHVybiBuYXZpZ2F0b3IubWF4VG91Y2hQb2ludHMgfHwgKFwib250b3VjaHN0YXJ0XCIgaW4gdGhpcyk7XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRDb25zdHJhaW4odHJhbnNmb3JtLCBleHRlbnQsIHRyYW5zbGF0ZUV4dGVudCkge1xuICB2YXIgZHgwID0gdHJhbnNmb3JtLmludmVydFgoZXh0ZW50WzBdWzBdKSAtIHRyYW5zbGF0ZUV4dGVudFswXVswXSxcbiAgICAgIGR4MSA9IHRyYW5zZm9ybS5pbnZlcnRYKGV4dGVudFsxXVswXSkgLSB0cmFuc2xhdGVFeHRlbnRbMV1bMF0sXG4gICAgICBkeTAgPSB0cmFuc2Zvcm0uaW52ZXJ0WShleHRlbnRbMF1bMV0pIC0gdHJhbnNsYXRlRXh0ZW50WzBdWzFdLFxuICAgICAgZHkxID0gdHJhbnNmb3JtLmludmVydFkoZXh0ZW50WzFdWzFdKSAtIHRyYW5zbGF0ZUV4dGVudFsxXVsxXTtcbiAgcmV0dXJuIHRyYW5zZm9ybS50cmFuc2xhdGUoXG4gICAgZHgxID4gZHgwID8gKGR4MCArIGR4MSkgLyAyIDogTWF0aC5taW4oMCwgZHgwKSB8fCBNYXRoLm1heCgwLCBkeDEpLFxuICAgIGR5MSA+IGR5MCA/IChkeTAgKyBkeTEpIC8gMiA6IE1hdGgubWluKDAsIGR5MCkgfHwgTWF0aC5tYXgoMCwgZHkxKVxuICApO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIGZpbHRlciA9IGRlZmF1bHRGaWx0ZXIsXG4gICAgICBleHRlbnQgPSBkZWZhdWx0RXh0ZW50LFxuICAgICAgY29uc3RyYWluID0gZGVmYXVsdENvbnN0cmFpbixcbiAgICAgIHdoZWVsRGVsdGEgPSBkZWZhdWx0V2hlZWxEZWx0YSxcbiAgICAgIHRvdWNoYWJsZSA9IGRlZmF1bHRUb3VjaGFibGUsXG4gICAgICBzY2FsZUV4dGVudCA9IFswLCBJbmZpbml0eV0sXG4gICAgICB0cmFuc2xhdGVFeHRlbnQgPSBbWy1JbmZpbml0eSwgLUluZmluaXR5XSwgW0luZmluaXR5LCBJbmZpbml0eV1dLFxuICAgICAgZHVyYXRpb24gPSAyNTAsXG4gICAgICBpbnRlcnBvbGF0ZSA9IGludGVycG9sYXRlWm9vbSxcbiAgICAgIGxpc3RlbmVycyA9IGRpc3BhdGNoKFwic3RhcnRcIiwgXCJ6b29tXCIsIFwiZW5kXCIpLFxuICAgICAgdG91Y2hzdGFydGluZyxcbiAgICAgIHRvdWNoZmlyc3QsXG4gICAgICB0b3VjaGVuZGluZyxcbiAgICAgIHRvdWNoRGVsYXkgPSA1MDAsXG4gICAgICB3aGVlbERlbGF5ID0gMTUwLFxuICAgICAgY2xpY2tEaXN0YW5jZTIgPSAwLFxuICAgICAgdGFwRGlzdGFuY2UgPSAxMDtcblxuICBmdW5jdGlvbiB6b29tKHNlbGVjdGlvbikge1xuICAgIHNlbGVjdGlvblxuICAgICAgICAucHJvcGVydHkoXCJfX3pvb21cIiwgZGVmYXVsdFRyYW5zZm9ybSlcbiAgICAgICAgLm9uKFwid2hlZWwuem9vbVwiLCB3aGVlbGVkKVxuICAgICAgICAub24oXCJtb3VzZWRvd24uem9vbVwiLCBtb3VzZWRvd25lZClcbiAgICAgICAgLm9uKFwiZGJsY2xpY2suem9vbVwiLCBkYmxjbGlja2VkKVxuICAgICAgLmZpbHRlcih0b3VjaGFibGUpXG4gICAgICAgIC5vbihcInRvdWNoc3RhcnQuem9vbVwiLCB0b3VjaHN0YXJ0ZWQpXG4gICAgICAgIC5vbihcInRvdWNobW92ZS56b29tXCIsIHRvdWNobW92ZWQpXG4gICAgICAgIC5vbihcInRvdWNoZW5kLnpvb20gdG91Y2hjYW5jZWwuem9vbVwiLCB0b3VjaGVuZGVkKVxuICAgICAgICAuc3R5bGUoXCItd2Via2l0LXRhcC1oaWdobGlnaHQtY29sb3JcIiwgXCJyZ2JhKDAsMCwwLDApXCIpO1xuICB9XG5cbiAgem9vbS50cmFuc2Zvcm0gPSBmdW5jdGlvbihjb2xsZWN0aW9uLCB0cmFuc2Zvcm0sIHBvaW50LCBldmVudCkge1xuICAgIHZhciBzZWxlY3Rpb24gPSBjb2xsZWN0aW9uLnNlbGVjdGlvbiA/IGNvbGxlY3Rpb24uc2VsZWN0aW9uKCkgOiBjb2xsZWN0aW9uO1xuICAgIHNlbGVjdGlvbi5wcm9wZXJ0eShcIl9fem9vbVwiLCBkZWZhdWx0VHJhbnNmb3JtKTtcbiAgICBpZiAoY29sbGVjdGlvbiAhPT0gc2VsZWN0aW9uKSB7XG4gICAgICBzY2hlZHVsZShjb2xsZWN0aW9uLCB0cmFuc2Zvcm0sIHBvaW50LCBldmVudCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNlbGVjdGlvbi5pbnRlcnJ1cHQoKS5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICBnZXN0dXJlKHRoaXMsIGFyZ3VtZW50cylcbiAgICAgICAgICAuZXZlbnQoZXZlbnQpXG4gICAgICAgICAgLnN0YXJ0KClcbiAgICAgICAgICAuem9vbShudWxsLCB0eXBlb2YgdHJhbnNmb3JtID09PSBcImZ1bmN0aW9uXCIgPyB0cmFuc2Zvcm0uYXBwbHkodGhpcywgYXJndW1lbnRzKSA6IHRyYW5zZm9ybSlcbiAgICAgICAgICAuZW5kKCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgem9vbS5zY2FsZUJ5ID0gZnVuY3Rpb24oc2VsZWN0aW9uLCBrLCBwLCBldmVudCkge1xuICAgIHpvb20uc2NhbGVUbyhzZWxlY3Rpb24sIGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGswID0gdGhpcy5fX3pvb20uayxcbiAgICAgICAgICBrMSA9IHR5cGVvZiBrID09PSBcImZ1bmN0aW9uXCIgPyBrLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgOiBrO1xuICAgICAgcmV0dXJuIGswICogazE7XG4gICAgfSwgcCwgZXZlbnQpO1xuICB9O1xuXG4gIHpvb20uc2NhbGVUbyA9IGZ1bmN0aW9uKHNlbGVjdGlvbiwgaywgcCwgZXZlbnQpIHtcbiAgICB6b29tLnRyYW5zZm9ybShzZWxlY3Rpb24sIGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGUgPSBleHRlbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSxcbiAgICAgICAgICB0MCA9IHRoaXMuX196b29tLFxuICAgICAgICAgIHAwID0gcCA9PSBudWxsID8gY2VudHJvaWQoZSkgOiB0eXBlb2YgcCA9PT0gXCJmdW5jdGlvblwiID8gcC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIDogcCxcbiAgICAgICAgICBwMSA9IHQwLmludmVydChwMCksXG4gICAgICAgICAgazEgPSB0eXBlb2YgayA9PT0gXCJmdW5jdGlvblwiID8gay5hcHBseSh0aGlzLCBhcmd1bWVudHMpIDogaztcbiAgICAgIHJldHVybiBjb25zdHJhaW4odHJhbnNsYXRlKHNjYWxlKHQwLCBrMSksIHAwLCBwMSksIGUsIHRyYW5zbGF0ZUV4dGVudCk7XG4gICAgfSwgcCwgZXZlbnQpO1xuICB9O1xuXG4gIHpvb20udHJhbnNsYXRlQnkgPSBmdW5jdGlvbihzZWxlY3Rpb24sIHgsIHksIGV2ZW50KSB7XG4gICAgem9vbS50cmFuc2Zvcm0oc2VsZWN0aW9uLCBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBjb25zdHJhaW4odGhpcy5fX3pvb20udHJhbnNsYXRlKFxuICAgICAgICB0eXBlb2YgeCA9PT0gXCJmdW5jdGlvblwiID8geC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIDogeCxcbiAgICAgICAgdHlwZW9mIHkgPT09IFwiZnVuY3Rpb25cIiA/IHkuYXBwbHkodGhpcywgYXJndW1lbnRzKSA6IHlcbiAgICAgICksIGV4dGVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpLCB0cmFuc2xhdGVFeHRlbnQpO1xuICAgIH0sIG51bGwsIGV2ZW50KTtcbiAgfTtcblxuICB6b29tLnRyYW5zbGF0ZVRvID0gZnVuY3Rpb24oc2VsZWN0aW9uLCB4LCB5LCBwLCBldmVudCkge1xuICAgIHpvb20udHJhbnNmb3JtKHNlbGVjdGlvbiwgZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgZSA9IGV4dGVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpLFxuICAgICAgICAgIHQgPSB0aGlzLl9fem9vbSxcbiAgICAgICAgICBwMCA9IHAgPT0gbnVsbCA/IGNlbnRyb2lkKGUpIDogdHlwZW9mIHAgPT09IFwiZnVuY3Rpb25cIiA/IHAuYXBwbHkodGhpcywgYXJndW1lbnRzKSA6IHA7XG4gICAgICByZXR1cm4gY29uc3RyYWluKGlkZW50aXR5LnRyYW5zbGF0ZShwMFswXSwgcDBbMV0pLnNjYWxlKHQuaykudHJhbnNsYXRlKFxuICAgICAgICB0eXBlb2YgeCA9PT0gXCJmdW5jdGlvblwiID8gLXguYXBwbHkodGhpcywgYXJndW1lbnRzKSA6IC14LFxuICAgICAgICB0eXBlb2YgeSA9PT0gXCJmdW5jdGlvblwiID8gLXkuYXBwbHkodGhpcywgYXJndW1lbnRzKSA6IC15XG4gICAgICApLCBlLCB0cmFuc2xhdGVFeHRlbnQpO1xuICAgIH0sIHAsIGV2ZW50KTtcbiAgfTtcblxuICBmdW5jdGlvbiBzY2FsZSh0cmFuc2Zvcm0sIGspIHtcbiAgICBrID0gTWF0aC5tYXgoc2NhbGVFeHRlbnRbMF0sIE1hdGgubWluKHNjYWxlRXh0ZW50WzFdLCBrKSk7XG4gICAgcmV0dXJuIGsgPT09IHRyYW5zZm9ybS5rID8gdHJhbnNmb3JtIDogbmV3IFRyYW5zZm9ybShrLCB0cmFuc2Zvcm0ueCwgdHJhbnNmb3JtLnkpO1xuICB9XG5cbiAgZnVuY3Rpb24gdHJhbnNsYXRlKHRyYW5zZm9ybSwgcDAsIHAxKSB7XG4gICAgdmFyIHggPSBwMFswXSAtIHAxWzBdICogdHJhbnNmb3JtLmssIHkgPSBwMFsxXSAtIHAxWzFdICogdHJhbnNmb3JtLms7XG4gICAgcmV0dXJuIHggPT09IHRyYW5zZm9ybS54ICYmIHkgPT09IHRyYW5zZm9ybS55ID8gdHJhbnNmb3JtIDogbmV3IFRyYW5zZm9ybSh0cmFuc2Zvcm0uaywgeCwgeSk7XG4gIH1cblxuICBmdW5jdGlvbiBjZW50cm9pZChleHRlbnQpIHtcbiAgICByZXR1cm4gWygrZXh0ZW50WzBdWzBdICsgK2V4dGVudFsxXVswXSkgLyAyLCAoK2V4dGVudFswXVsxXSArICtleHRlbnRbMV1bMV0pIC8gMl07XG4gIH1cblxuICBmdW5jdGlvbiBzY2hlZHVsZSh0cmFuc2l0aW9uLCB0cmFuc2Zvcm0sIHBvaW50LCBldmVudCkge1xuICAgIHRyYW5zaXRpb25cbiAgICAgICAgLm9uKFwic3RhcnQuem9vbVwiLCBmdW5jdGlvbigpIHsgZ2VzdHVyZSh0aGlzLCBhcmd1bWVudHMpLmV2ZW50KGV2ZW50KS5zdGFydCgpOyB9KVxuICAgICAgICAub24oXCJpbnRlcnJ1cHQuem9vbSBlbmQuem9vbVwiLCBmdW5jdGlvbigpIHsgZ2VzdHVyZSh0aGlzLCBhcmd1bWVudHMpLmV2ZW50KGV2ZW50KS5lbmQoKTsgfSlcbiAgICAgICAgLnR3ZWVuKFwiem9vbVwiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgdGhhdCA9IHRoaXMsXG4gICAgICAgICAgICAgIGFyZ3MgPSBhcmd1bWVudHMsXG4gICAgICAgICAgICAgIGcgPSBnZXN0dXJlKHRoYXQsIGFyZ3MpLmV2ZW50KGV2ZW50KSxcbiAgICAgICAgICAgICAgZSA9IGV4dGVudC5hcHBseSh0aGF0LCBhcmdzKSxcbiAgICAgICAgICAgICAgcCA9IHBvaW50ID09IG51bGwgPyBjZW50cm9pZChlKSA6IHR5cGVvZiBwb2ludCA9PT0gXCJmdW5jdGlvblwiID8gcG9pbnQuYXBwbHkodGhhdCwgYXJncykgOiBwb2ludCxcbiAgICAgICAgICAgICAgdyA9IE1hdGgubWF4KGVbMV1bMF0gLSBlWzBdWzBdLCBlWzFdWzFdIC0gZVswXVsxXSksXG4gICAgICAgICAgICAgIGEgPSB0aGF0Ll9fem9vbSxcbiAgICAgICAgICAgICAgYiA9IHR5cGVvZiB0cmFuc2Zvcm0gPT09IFwiZnVuY3Rpb25cIiA/IHRyYW5zZm9ybS5hcHBseSh0aGF0LCBhcmdzKSA6IHRyYW5zZm9ybSxcbiAgICAgICAgICAgICAgaSA9IGludGVycG9sYXRlKGEuaW52ZXJ0KHApLmNvbmNhdCh3IC8gYS5rKSwgYi5pbnZlcnQocCkuY29uY2F0KHcgLyBiLmspKTtcbiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgaWYgKHQgPT09IDEpIHQgPSBiOyAvLyBBdm9pZCByb3VuZGluZyBlcnJvciBvbiBlbmQuXG4gICAgICAgICAgICBlbHNlIHsgdmFyIGwgPSBpKHQpLCBrID0gdyAvIGxbMl07IHQgPSBuZXcgVHJhbnNmb3JtKGssIHBbMF0gLSBsWzBdICogaywgcFsxXSAtIGxbMV0gKiBrKTsgfVxuICAgICAgICAgICAgZy56b29tKG51bGwsIHQpO1xuICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2VzdHVyZSh0aGF0LCBhcmdzLCBjbGVhbikge1xuICAgIHJldHVybiAoIWNsZWFuICYmIHRoYXQuX196b29taW5nKSB8fCBuZXcgR2VzdHVyZSh0aGF0LCBhcmdzKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIEdlc3R1cmUodGhhdCwgYXJncykge1xuICAgIHRoaXMudGhhdCA9IHRoYXQ7XG4gICAgdGhpcy5hcmdzID0gYXJncztcbiAgICB0aGlzLmFjdGl2ZSA9IDA7XG4gICAgdGhpcy5zb3VyY2VFdmVudCA9IG51bGw7XG4gICAgdGhpcy5leHRlbnQgPSBleHRlbnQuYXBwbHkodGhhdCwgYXJncyk7XG4gICAgdGhpcy50YXBzID0gMDtcbiAgfVxuXG4gIEdlc3R1cmUucHJvdG90eXBlID0ge1xuICAgIGV2ZW50OiBmdW5jdGlvbihldmVudCkge1xuICAgICAgaWYgKGV2ZW50KSB0aGlzLnNvdXJjZUV2ZW50ID0gZXZlbnQ7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIHN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICAgIGlmICgrK3RoaXMuYWN0aXZlID09PSAxKSB7XG4gICAgICAgIHRoaXMudGhhdC5fX3pvb21pbmcgPSB0aGlzO1xuICAgICAgICB0aGlzLmVtaXQoXCJzdGFydFwiKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG4gICAgem9vbTogZnVuY3Rpb24oa2V5LCB0cmFuc2Zvcm0pIHtcbiAgICAgIGlmICh0aGlzLm1vdXNlICYmIGtleSAhPT0gXCJtb3VzZVwiKSB0aGlzLm1vdXNlWzFdID0gdHJhbnNmb3JtLmludmVydCh0aGlzLm1vdXNlWzBdKTtcbiAgICAgIGlmICh0aGlzLnRvdWNoMCAmJiBrZXkgIT09IFwidG91Y2hcIikgdGhpcy50b3VjaDBbMV0gPSB0cmFuc2Zvcm0uaW52ZXJ0KHRoaXMudG91Y2gwWzBdKTtcbiAgICAgIGlmICh0aGlzLnRvdWNoMSAmJiBrZXkgIT09IFwidG91Y2hcIikgdGhpcy50b3VjaDFbMV0gPSB0cmFuc2Zvcm0uaW52ZXJ0KHRoaXMudG91Y2gxWzBdKTtcbiAgICAgIHRoaXMudGhhdC5fX3pvb20gPSB0cmFuc2Zvcm07XG4gICAgICB0aGlzLmVtaXQoXCJ6b29tXCIpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICBlbmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKC0tdGhpcy5hY3RpdmUgPT09IDApIHtcbiAgICAgICAgZGVsZXRlIHRoaXMudGhhdC5fX3pvb21pbmc7XG4gICAgICAgIHRoaXMuZW1pdChcImVuZFwiKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG4gICAgZW1pdDogZnVuY3Rpb24odHlwZSkge1xuICAgICAgdmFyIGQgPSBzZWxlY3QodGhpcy50aGF0KS5kYXR1bSgpO1xuICAgICAgbGlzdGVuZXJzLmNhbGwoXG4gICAgICAgIHR5cGUsXG4gICAgICAgIHRoaXMudGhhdCxcbiAgICAgICAgbmV3IFpvb21FdmVudCh0eXBlLCB7XG4gICAgICAgICAgc291cmNlRXZlbnQ6IHRoaXMuc291cmNlRXZlbnQsXG4gICAgICAgICAgdGFyZ2V0OiB6b29tLFxuICAgICAgICAgIHR5cGUsXG4gICAgICAgICAgdHJhbnNmb3JtOiB0aGlzLnRoYXQuX196b29tLFxuICAgICAgICAgIGRpc3BhdGNoOiBsaXN0ZW5lcnNcbiAgICAgICAgfSksXG4gICAgICAgIGRcbiAgICAgICk7XG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIHdoZWVsZWQoZXZlbnQsIC4uLmFyZ3MpIHtcbiAgICBpZiAoIWZpbHRlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpKSByZXR1cm47XG4gICAgdmFyIGcgPSBnZXN0dXJlKHRoaXMsIGFyZ3MpLmV2ZW50KGV2ZW50KSxcbiAgICAgICAgdCA9IHRoaXMuX196b29tLFxuICAgICAgICBrID0gTWF0aC5tYXgoc2NhbGVFeHRlbnRbMF0sIE1hdGgubWluKHNjYWxlRXh0ZW50WzFdLCB0LmsgKiBNYXRoLnBvdygyLCB3aGVlbERlbHRhLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpKSksXG4gICAgICAgIHAgPSBwb2ludGVyKGV2ZW50KTtcblxuICAgIC8vIElmIHRoZSBtb3VzZSBpcyBpbiB0aGUgc2FtZSBsb2NhdGlvbiBhcyBiZWZvcmUsIHJldXNlIGl0LlxuICAgIC8vIElmIHRoZXJlIHdlcmUgcmVjZW50IHdoZWVsIGV2ZW50cywgcmVzZXQgdGhlIHdoZWVsIGlkbGUgdGltZW91dC5cbiAgICBpZiAoZy53aGVlbCkge1xuICAgICAgaWYgKGcubW91c2VbMF1bMF0gIT09IHBbMF0gfHwgZy5tb3VzZVswXVsxXSAhPT0gcFsxXSkge1xuICAgICAgICBnLm1vdXNlWzFdID0gdC5pbnZlcnQoZy5tb3VzZVswXSA9IHApO1xuICAgICAgfVxuICAgICAgY2xlYXJUaW1lb3V0KGcud2hlZWwpO1xuICAgIH1cblxuICAgIC8vIElmIHRoaXMgd2hlZWwgZXZlbnQgd29u4oCZdCB0cmlnZ2VyIGEgdHJhbnNmb3JtIGNoYW5nZSwgaWdub3JlIGl0LlxuICAgIGVsc2UgaWYgKHQuayA9PT0gaykgcmV0dXJuO1xuXG4gICAgLy8gT3RoZXJ3aXNlLCBjYXB0dXJlIHRoZSBtb3VzZSBwb2ludCBhbmQgbG9jYXRpb24gYXQgdGhlIHN0YXJ0LlxuICAgIGVsc2Uge1xuICAgICAgZy5tb3VzZSA9IFtwLCB0LmludmVydChwKV07XG4gICAgICBpbnRlcnJ1cHQodGhpcyk7XG4gICAgICBnLnN0YXJ0KCk7XG4gICAgfVxuXG4gICAgbm9ldmVudChldmVudCk7XG4gICAgZy53aGVlbCA9IHNldFRpbWVvdXQod2hlZWxpZGxlZCwgd2hlZWxEZWxheSk7XG4gICAgZy56b29tKFwibW91c2VcIiwgY29uc3RyYWluKHRyYW5zbGF0ZShzY2FsZSh0LCBrKSwgZy5tb3VzZVswXSwgZy5tb3VzZVsxXSksIGcuZXh0ZW50LCB0cmFuc2xhdGVFeHRlbnQpKTtcblxuICAgIGZ1bmN0aW9uIHdoZWVsaWRsZWQoKSB7XG4gICAgICBnLndoZWVsID0gbnVsbDtcbiAgICAgIGcuZW5kKCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gbW91c2Vkb3duZWQoZXZlbnQsIC4uLmFyZ3MpIHtcbiAgICBpZiAodG91Y2hlbmRpbmcgfHwgIWZpbHRlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpKSByZXR1cm47XG4gICAgdmFyIGcgPSBnZXN0dXJlKHRoaXMsIGFyZ3MsIHRydWUpLmV2ZW50KGV2ZW50KSxcbiAgICAgICAgdiA9IHNlbGVjdChldmVudC52aWV3KS5vbihcIm1vdXNlbW92ZS56b29tXCIsIG1vdXNlbW92ZWQsIHRydWUpLm9uKFwibW91c2V1cC56b29tXCIsIG1vdXNldXBwZWQsIHRydWUpLFxuICAgICAgICBwID0gcG9pbnRlcihldmVudCwgY3VycmVudFRhcmdldCksXG4gICAgICAgIGN1cnJlbnRUYXJnZXQgPSBldmVudC5jdXJyZW50VGFyZ2V0LFxuICAgICAgICB4MCA9IGV2ZW50LmNsaWVudFgsXG4gICAgICAgIHkwID0gZXZlbnQuY2xpZW50WTtcblxuICAgIGRyYWdEaXNhYmxlKGV2ZW50LnZpZXcpO1xuICAgIG5vcHJvcGFnYXRpb24oZXZlbnQpO1xuICAgIGcubW91c2UgPSBbcCwgdGhpcy5fX3pvb20uaW52ZXJ0KHApXTtcbiAgICBpbnRlcnJ1cHQodGhpcyk7XG4gICAgZy5zdGFydCgpO1xuXG4gICAgZnVuY3Rpb24gbW91c2Vtb3ZlZChldmVudCkge1xuICAgICAgbm9ldmVudChldmVudCk7XG4gICAgICBpZiAoIWcubW92ZWQpIHtcbiAgICAgICAgdmFyIGR4ID0gZXZlbnQuY2xpZW50WCAtIHgwLCBkeSA9IGV2ZW50LmNsaWVudFkgLSB5MDtcbiAgICAgICAgZy5tb3ZlZCA9IGR4ICogZHggKyBkeSAqIGR5ID4gY2xpY2tEaXN0YW5jZTI7XG4gICAgICB9XG4gICAgICBnLmV2ZW50KGV2ZW50KVxuICAgICAgIC56b29tKFwibW91c2VcIiwgY29uc3RyYWluKHRyYW5zbGF0ZShnLnRoYXQuX196b29tLCBnLm1vdXNlWzBdID0gcG9pbnRlcihldmVudCwgY3VycmVudFRhcmdldCksIGcubW91c2VbMV0pLCBnLmV4dGVudCwgdHJhbnNsYXRlRXh0ZW50KSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbW91c2V1cHBlZChldmVudCkge1xuICAgICAgdi5vbihcIm1vdXNlbW92ZS56b29tIG1vdXNldXAuem9vbVwiLCBudWxsKTtcbiAgICAgIGRyYWdFbmFibGUoZXZlbnQudmlldywgZy5tb3ZlZCk7XG4gICAgICBub2V2ZW50KGV2ZW50KTtcbiAgICAgIGcuZXZlbnQoZXZlbnQpLmVuZCgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGRibGNsaWNrZWQoZXZlbnQsIC4uLmFyZ3MpIHtcbiAgICBpZiAoIWZpbHRlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpKSByZXR1cm47XG4gICAgdmFyIHQwID0gdGhpcy5fX3pvb20sXG4gICAgICAgIHAwID0gcG9pbnRlcihldmVudC5jaGFuZ2VkVG91Y2hlcyA/IGV2ZW50LmNoYW5nZWRUb3VjaGVzWzBdIDogZXZlbnQsIHRoaXMpLFxuICAgICAgICBwMSA9IHQwLmludmVydChwMCksXG4gICAgICAgIGsxID0gdDAuayAqIChldmVudC5zaGlmdEtleSA/IDAuNSA6IDIpLFxuICAgICAgICB0MSA9IGNvbnN0cmFpbih0cmFuc2xhdGUoc2NhbGUodDAsIGsxKSwgcDAsIHAxKSwgZXh0ZW50LmFwcGx5KHRoaXMsIGFyZ3MpLCB0cmFuc2xhdGVFeHRlbnQpO1xuXG4gICAgbm9ldmVudChldmVudCk7XG4gICAgaWYgKGR1cmF0aW9uID4gMCkgc2VsZWN0KHRoaXMpLnRyYW5zaXRpb24oKS5kdXJhdGlvbihkdXJhdGlvbikuY2FsbChzY2hlZHVsZSwgdDEsIHAwLCBldmVudCk7XG4gICAgZWxzZSBzZWxlY3QodGhpcykuY2FsbCh6b29tLnRyYW5zZm9ybSwgdDEsIHAwLCBldmVudCk7XG4gIH1cblxuICBmdW5jdGlvbiB0b3VjaHN0YXJ0ZWQoZXZlbnQsIC4uLmFyZ3MpIHtcbiAgICBpZiAoIWZpbHRlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpKSByZXR1cm47XG4gICAgdmFyIHRvdWNoZXMgPSBldmVudC50b3VjaGVzLFxuICAgICAgICBuID0gdG91Y2hlcy5sZW5ndGgsXG4gICAgICAgIGcgPSBnZXN0dXJlKHRoaXMsIGFyZ3MsIGV2ZW50LmNoYW5nZWRUb3VjaGVzLmxlbmd0aCA9PT0gbikuZXZlbnQoZXZlbnQpLFxuICAgICAgICBzdGFydGVkLCBpLCB0LCBwO1xuXG4gICAgbm9wcm9wYWdhdGlvbihldmVudCk7XG4gICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgdCA9IHRvdWNoZXNbaV0sIHAgPSBwb2ludGVyKHQsIHRoaXMpO1xuICAgICAgcCA9IFtwLCB0aGlzLl9fem9vbS5pbnZlcnQocCksIHQuaWRlbnRpZmllcl07XG4gICAgICBpZiAoIWcudG91Y2gwKSBnLnRvdWNoMCA9IHAsIHN0YXJ0ZWQgPSB0cnVlLCBnLnRhcHMgPSAxICsgISF0b3VjaHN0YXJ0aW5nO1xuICAgICAgZWxzZSBpZiAoIWcudG91Y2gxICYmIGcudG91Y2gwWzJdICE9PSBwWzJdKSBnLnRvdWNoMSA9IHAsIGcudGFwcyA9IDA7XG4gICAgfVxuXG4gICAgaWYgKHRvdWNoc3RhcnRpbmcpIHRvdWNoc3RhcnRpbmcgPSBjbGVhclRpbWVvdXQodG91Y2hzdGFydGluZyk7XG5cbiAgICBpZiAoc3RhcnRlZCkge1xuICAgICAgaWYgKGcudGFwcyA8IDIpIHRvdWNoZmlyc3QgPSBwWzBdLCB0b3VjaHN0YXJ0aW5nID0gc2V0VGltZW91dChmdW5jdGlvbigpIHsgdG91Y2hzdGFydGluZyA9IG51bGw7IH0sIHRvdWNoRGVsYXkpO1xuICAgICAgaW50ZXJydXB0KHRoaXMpO1xuICAgICAgZy5zdGFydCgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHRvdWNobW92ZWQoZXZlbnQsIC4uLmFyZ3MpIHtcbiAgICBpZiAoIXRoaXMuX196b29taW5nKSByZXR1cm47XG4gICAgdmFyIGcgPSBnZXN0dXJlKHRoaXMsIGFyZ3MpLmV2ZW50KGV2ZW50KSxcbiAgICAgICAgdG91Y2hlcyA9IGV2ZW50LmNoYW5nZWRUb3VjaGVzLFxuICAgICAgICBuID0gdG91Y2hlcy5sZW5ndGgsIGksIHQsIHAsIGw7XG5cbiAgICBub2V2ZW50KGV2ZW50KTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICB0ID0gdG91Y2hlc1tpXSwgcCA9IHBvaW50ZXIodCwgdGhpcyk7XG4gICAgICBpZiAoZy50b3VjaDAgJiYgZy50b3VjaDBbMl0gPT09IHQuaWRlbnRpZmllcikgZy50b3VjaDBbMF0gPSBwO1xuICAgICAgZWxzZSBpZiAoZy50b3VjaDEgJiYgZy50b3VjaDFbMl0gPT09IHQuaWRlbnRpZmllcikgZy50b3VjaDFbMF0gPSBwO1xuICAgIH1cbiAgICB0ID0gZy50aGF0Ll9fem9vbTtcbiAgICBpZiAoZy50b3VjaDEpIHtcbiAgICAgIHZhciBwMCA9IGcudG91Y2gwWzBdLCBsMCA9IGcudG91Y2gwWzFdLFxuICAgICAgICAgIHAxID0gZy50b3VjaDFbMF0sIGwxID0gZy50b3VjaDFbMV0sXG4gICAgICAgICAgZHAgPSAoZHAgPSBwMVswXSAtIHAwWzBdKSAqIGRwICsgKGRwID0gcDFbMV0gLSBwMFsxXSkgKiBkcCxcbiAgICAgICAgICBkbCA9IChkbCA9IGwxWzBdIC0gbDBbMF0pICogZGwgKyAoZGwgPSBsMVsxXSAtIGwwWzFdKSAqIGRsO1xuICAgICAgdCA9IHNjYWxlKHQsIE1hdGguc3FydChkcCAvIGRsKSk7XG4gICAgICBwID0gWyhwMFswXSArIHAxWzBdKSAvIDIsIChwMFsxXSArIHAxWzFdKSAvIDJdO1xuICAgICAgbCA9IFsobDBbMF0gKyBsMVswXSkgLyAyLCAobDBbMV0gKyBsMVsxXSkgLyAyXTtcbiAgICB9XG4gICAgZWxzZSBpZiAoZy50b3VjaDApIHAgPSBnLnRvdWNoMFswXSwgbCA9IGcudG91Y2gwWzFdO1xuICAgIGVsc2UgcmV0dXJuO1xuXG4gICAgZy56b29tKFwidG91Y2hcIiwgY29uc3RyYWluKHRyYW5zbGF0ZSh0LCBwLCBsKSwgZy5leHRlbnQsIHRyYW5zbGF0ZUV4dGVudCkpO1xuICB9XG5cbiAgZnVuY3Rpb24gdG91Y2hlbmRlZChldmVudCwgLi4uYXJncykge1xuICAgIGlmICghdGhpcy5fX3pvb21pbmcpIHJldHVybjtcbiAgICB2YXIgZyA9IGdlc3R1cmUodGhpcywgYXJncykuZXZlbnQoZXZlbnQpLFxuICAgICAgICB0b3VjaGVzID0gZXZlbnQuY2hhbmdlZFRvdWNoZXMsXG4gICAgICAgIG4gPSB0b3VjaGVzLmxlbmd0aCwgaSwgdDtcblxuICAgIG5vcHJvcGFnYXRpb24oZXZlbnQpO1xuICAgIGlmICh0b3VjaGVuZGluZykgY2xlYXJUaW1lb3V0KHRvdWNoZW5kaW5nKTtcbiAgICB0b3VjaGVuZGluZyA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7IHRvdWNoZW5kaW5nID0gbnVsbDsgfSwgdG91Y2hEZWxheSk7XG4gICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgdCA9IHRvdWNoZXNbaV07XG4gICAgICBpZiAoZy50b3VjaDAgJiYgZy50b3VjaDBbMl0gPT09IHQuaWRlbnRpZmllcikgZGVsZXRlIGcudG91Y2gwO1xuICAgICAgZWxzZSBpZiAoZy50b3VjaDEgJiYgZy50b3VjaDFbMl0gPT09IHQuaWRlbnRpZmllcikgZGVsZXRlIGcudG91Y2gxO1xuICAgIH1cbiAgICBpZiAoZy50b3VjaDEgJiYgIWcudG91Y2gwKSBnLnRvdWNoMCA9IGcudG91Y2gxLCBkZWxldGUgZy50b3VjaDE7XG4gICAgaWYgKGcudG91Y2gwKSBnLnRvdWNoMFsxXSA9IHRoaXMuX196b29tLmludmVydChnLnRvdWNoMFswXSk7XG4gICAgZWxzZSB7XG4gICAgICBnLmVuZCgpO1xuICAgICAgLy8gSWYgdGhpcyB3YXMgYSBkYmx0YXAsIHJlcm91dGUgdG8gdGhlIChvcHRpb25hbCkgZGJsY2xpY2suem9vbSBoYW5kbGVyLlxuICAgICAgaWYgKGcudGFwcyA9PT0gMikge1xuICAgICAgICB0ID0gcG9pbnRlcih0LCB0aGlzKTtcbiAgICAgICAgaWYgKE1hdGguaHlwb3QodG91Y2hmaXJzdFswXSAtIHRbMF0sIHRvdWNoZmlyc3RbMV0gLSB0WzFdKSA8IHRhcERpc3RhbmNlKSB7XG4gICAgICAgICAgdmFyIHAgPSBzZWxlY3QodGhpcykub24oXCJkYmxjbGljay56b29tXCIpO1xuICAgICAgICAgIGlmIChwKSBwLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB6b29tLndoZWVsRGVsdGEgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAod2hlZWxEZWx0YSA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCB6b29tKSA6IHdoZWVsRGVsdGE7XG4gIH07XG5cbiAgem9vbS5maWx0ZXIgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZmlsdGVyID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCghIV8pLCB6b29tKSA6IGZpbHRlcjtcbiAgfTtcblxuICB6b29tLnRvdWNoYWJsZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0b3VjaGFibGUgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCEhXyksIHpvb20pIDogdG91Y2hhYmxlO1xuICB9O1xuXG4gIHpvb20uZXh0ZW50ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGV4dGVudCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoW1srX1swXVswXSwgK19bMF1bMV1dLCBbK19bMV1bMF0sICtfWzFdWzFdXV0pLCB6b29tKSA6IGV4dGVudDtcbiAgfTtcblxuICB6b29tLnNjYWxlRXh0ZW50ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHNjYWxlRXh0ZW50WzBdID0gK19bMF0sIHNjYWxlRXh0ZW50WzFdID0gK19bMV0sIHpvb20pIDogW3NjYWxlRXh0ZW50WzBdLCBzY2FsZUV4dGVudFsxXV07XG4gIH07XG5cbiAgem9vbS50cmFuc2xhdGVFeHRlbnQgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodHJhbnNsYXRlRXh0ZW50WzBdWzBdID0gK19bMF1bMF0sIHRyYW5zbGF0ZUV4dGVudFsxXVswXSA9ICtfWzFdWzBdLCB0cmFuc2xhdGVFeHRlbnRbMF1bMV0gPSArX1swXVsxXSwgdHJhbnNsYXRlRXh0ZW50WzFdWzFdID0gK19bMV1bMV0sIHpvb20pIDogW1t0cmFuc2xhdGVFeHRlbnRbMF1bMF0sIHRyYW5zbGF0ZUV4dGVudFswXVsxXV0sIFt0cmFuc2xhdGVFeHRlbnRbMV1bMF0sIHRyYW5zbGF0ZUV4dGVudFsxXVsxXV1dO1xuICB9O1xuXG4gIHpvb20uY29uc3RyYWluID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGNvbnN0cmFpbiA9IF8sIHpvb20pIDogY29uc3RyYWluO1xuICB9O1xuXG4gIHpvb20uZHVyYXRpb24gPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZHVyYXRpb24gPSArXywgem9vbSkgOiBkdXJhdGlvbjtcbiAgfTtcblxuICB6b29tLmludGVycG9sYXRlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGludGVycG9sYXRlID0gXywgem9vbSkgOiBpbnRlcnBvbGF0ZTtcbiAgfTtcblxuICB6b29tLm9uID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHZhbHVlID0gbGlzdGVuZXJzLm9uLmFwcGx5KGxpc3RlbmVycywgYXJndW1lbnRzKTtcbiAgICByZXR1cm4gdmFsdWUgPT09IGxpc3RlbmVycyA/IHpvb20gOiB2YWx1ZTtcbiAgfTtcblxuICB6b29tLmNsaWNrRGlzdGFuY2UgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoY2xpY2tEaXN0YW5jZTIgPSAoXyA9ICtfKSAqIF8sIHpvb20pIDogTWF0aC5zcXJ0KGNsaWNrRGlzdGFuY2UyKTtcbiAgfTtcblxuICB6b29tLnRhcERpc3RhbmNlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRhcERpc3RhbmNlID0gK18sIHpvb20pIDogdGFwRGlzdGFuY2U7XG4gIH07XG5cbiAgcmV0dXJuIHpvb207XG59XG4iLCJleHBvcnQgbmFtZXNwYWNlIFRyYW5zaXRpb24ge1xuICAgIC8qKlxuICAgICAqIEEgdHJhbnNpdGlvbiB0aGF0IHN0YXJ0cyBzbG93bHksIHRoZW4gYWNjZWxlcmF0ZXMgYW5kIGVuZHMgc2xvd2x5IGFnYWluLlxuICAgICAqIFNlZTogaHR0cHM6Ly9lYXNpbmdzLm5ldC8jZWFzZUluT3V0Q3ViaWNcbiAgICAgKi9cbiAgICBleHBvcnQgZnVuY3Rpb24gZWFzZUluRWFzZU91dEN1YmljKHg6IG51bWJlcik6IG51bWJlciB7XG4gICAgICAgIHJldHVybiB4IDwgMC41ID8gNCAqIHggKiB4ICogeCA6IDEgLSBNYXRoLnBvdygtMiAqIHggKyAyLCAzKSAvIDI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSB0cmFuc2l0aW9uIHRoYXQgc3RhcnRzIHNsb3dseSBhbmQgdGhlbiBhY2NlbGVyYXRlcy5cbiAgICAgKiBTZWU6IGh0dHBzOi8vZWFzaW5ncy5uZXQvI2Vhc2VJbkN1YmljXG4gICAgICovXG4gICAgZXhwb3J0IGZ1bmN0aW9uIGVhc2VJbkN1YmljKHg6IG51bWJlcik6IG51bWJlciB7XG4gICAgICAgIHJldHVybiB4ICogeCAqIHg7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSB0cmFuc2l0aW9uIHRoYXQgc3RhcnRzIGZhc3QgYW5kIHRoZW4gZGVjZWxlcmF0ZXMuXG4gICAgICogU2VlOiBodHRwczovL2Vhc2luZ3MubmV0LyNlYXNlT3V0Q3ViaWNcbiAgICAgKi9cbiAgICBleHBvcnQgZnVuY3Rpb24gZWFzZU91dEN1YmljKHg6IG51bWJlcik6IG51bWJlciB7XG4gICAgICAgIHJldHVybiAxIC0gTWF0aC5wb3coMSAtIHgsIDMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNlZTogaHR0cHM6Ly9lYXNpbmdzLm5ldC8jZWFzZUluT3V0RWxhc3RpY1xuICAgICAqL1xuICAgIGV4cG9ydCBmdW5jdGlvbiBlYXNlSW5FYXNlT3V0RWxhc3RpYyh4OiBudW1iZXIpOiBudW1iZXIge1xuICAgICAgICBjb25zdCBjNSA9ICgyICogTWF0aC5QSSkgLyA0LjU7XG5cbiAgICAgICAgcmV0dXJuIHggPT09IDBcbiAgICAgICAgICAgID8gMFxuICAgICAgICAgICAgOiB4ID09PSAxXG4gICAgICAgICAgICAgICAgPyAxXG4gICAgICAgICAgICAgICAgOiB4IDwgMC41XG4gICAgICAgICAgICAgICAgICAgID8gLShNYXRoLnBvdygyLCAyMCAqIHggLSAxMCkgKiBNYXRoLnNpbigoMjAgKiB4IC0gMTEuMTI1KSAqIGM1KSkgLyAyXG4gICAgICAgICAgICAgICAgICAgIDogKE1hdGgucG93KDIsIC0yMCAqIHggKyAxMCkgKiBNYXRoLnNpbigoMjAgKiB4IC0gMTEuMTI1KSAqIGM1KSkgLyAyICsgMTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZWU6IGh0dHBzOi8vZWFzaW5ncy5uZXQvI2Vhc2VJbkVsYXN0aWNcbiAgICAgKi9cbiAgICBleHBvcnQgZnVuY3Rpb24gZWFzZUluRWxhc3RpYyh4OiBudW1iZXIpOiBudW1iZXIge1xuICAgICAgICBjb25zdCBjNCA9ICgyICogTWF0aC5QSSkgLyAzO1xuXG4gICAgICAgIHJldHVybiB4ID09PSAwXG4gICAgICAgICAgICA/IDBcbiAgICAgICAgICAgIDogeCA9PT0gMVxuICAgICAgICAgICAgICAgID8gMVxuICAgICAgICAgICAgICAgIDogLU1hdGgucG93KDIsIDEwICogeCAtIDEwKSAqIE1hdGguc2luKCh4ICogMTAgLSAxMC43NSkgKiBjNCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogaHR0cHM6Ly9lYXNpbmdzLm5ldC8jZWFzZU91dEVsYXN0aWNcbiAgICAgKi9cbiAgICBleHBvcnQgZnVuY3Rpb24gZWFzZU91dEVsYXN0aWMoeDogbnVtYmVyKTogbnVtYmVyIHtcbiAgICAgICAgY29uc3QgYzQgPSAoMiAqIE1hdGguUEkpIC8gMztcblxuICAgICAgICByZXR1cm4geCA9PT0gMFxuICAgICAgICAgICAgPyAwXG4gICAgICAgICAgICA6IHggPT09IDFcbiAgICAgICAgICAgICAgICA/IDFcbiAgICAgICAgICAgICAgICA6IE1hdGgucG93KDIsIC0xMCAqIHgpICogTWF0aC5zaW4oKHggKiAxMCAtIDAuNzUpICogYzQpICsgMTtcbiAgICB9XG59XG4iLCJleHBvcnQgZGVmYXVsdCBhYnN0cmFjdCBjbGFzcyBTZXR0aW5ncyB7XHJcbiAgICAvKipcclxuICAgICAqIFRvdGFsIHdpZHRoIG9mIHRoZSB2aXN1YWxpemF0aW9uIChpbiBwaXhlbHMpLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgd2lkdGg6IG51bWJlciA9IDgwMDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRvdGFsIGhlaWdodCBvZiB0aGUgdmlzdWFsaXphdGlvbiAoaW4gcGl4ZWxzKVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgaGVpZ2h0OiBudW1iZXIgPSA4MDA7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBcmUgdG9vbHRpcHMgZW5hYmxlZCB3aGVuIGhvdmVyaW5nIHRoZSB2aXN1YWxpemF0aW9uP1xyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZW5hYmxlVG9vbHRpcHM6IGJvb2xlYW4gPSB0cnVlO1xyXG59XHJcbiIsImltcG9ydCBDbHVzdGVyRWxlbWVudCBmcm9tIFwiLi9DbHVzdGVyRWxlbWVudFwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUcmVlTm9kZSB7XG4gICAgcHJpdmF0ZSBfbGVmdENoaWxkOiBUcmVlTm9kZSB8IG51bGw7XG4gICAgcHJpdmF0ZSBfcmlnaHRDaGlsZDogVHJlZU5vZGUgfCBudWxsO1xuICAgIHByaXZhdGUgX3BhcmVudDogVHJlZU5vZGUgfCBudWxsO1xuICAgIHB1YmxpYyByZWFkb25seSB2YWx1ZXM6IENsdXN0ZXJFbGVtZW50W107XG4gICAgcHVibGljIHJlYWRvbmx5IGhlaWdodDogbnVtYmVyO1xuXG4gICAgLy8gS2VlcCB0cmFjayBvZiB3aGljaCBJRCdzIGFyZSBhbHJlYWR5IGFzc2lnbmVkIHRvIFRyZWVOb2RlJ3MuXG4gICAgcHVibGljIHN0YXRpYyBjdXJyZW50SUQgPSAwO1xuICAgIC8vIElEIHVzZWQgZm9yIGNvbnN0cnVjdGluZyBncmFwaHMuXG4gICAgcHVibGljIHJlYWRvbmx5IGlkOiBudW1iZXI7XG5cbiAgICBjb25zdHJ1Y3RvcihwYXJlbnQ6IFRyZWVOb2RlIHwgbnVsbCwgbGVmdENoaWxkOiBUcmVlTm9kZSB8IG51bGwsIHJpZ2h0Q2hpbGQ6IFRyZWVOb2RlIHwgbnVsbCwgdmFsdWVzOiBDbHVzdGVyRWxlbWVudFtdLCBoZWlnaHQ6IG51bWJlcikge1xuICAgICAgICB0aGlzLl9wYXJlbnQgPSBwYXJlbnQ7XG4gICAgICAgIHRoaXMuX2xlZnRDaGlsZCA9IGxlZnRDaGlsZDtcbiAgICAgICAgdGhpcy5fcmlnaHRDaGlsZCA9IHJpZ2h0Q2hpbGQ7XG4gICAgICAgIHRoaXMudmFsdWVzID0gdmFsdWVzO1xuICAgICAgICB0aGlzLmhlaWdodCA9IGhlaWdodDtcbiAgICAgICAgdGhpcy5pZCA9IFRyZWVOb2RlLmN1cnJlbnRJRDtcbiAgICAgICAgVHJlZU5vZGUuY3VycmVudElEKys7XG4gICAgfVxuXG4gICAgZ2V0IHBhcmVudCgpOiBUcmVlTm9kZSB8IG51bGwge1xuICAgICAgICByZXR1cm4gdGhpcy5fcGFyZW50O1xuICAgIH1cblxuICAgIHNldCBwYXJlbnQodmFsdWU6IFRyZWVOb2RlIHwgbnVsbCkge1xuICAgICAgICB0aGlzLl9wYXJlbnQgPSB2YWx1ZTtcbiAgICB9XG5cbiAgICBnZXQgbGVmdENoaWxkKCk6IFRyZWVOb2RlIHwgbnVsbCB7XG4gICAgICAgIHJldHVybiB0aGlzLl9sZWZ0Q2hpbGQ7XG4gICAgfVxuXG4gICAgc2V0IGxlZnRDaGlsZCh2YWx1ZTogVHJlZU5vZGUgfCBudWxsKSB7XG4gICAgICAgIHRoaXMuX2xlZnRDaGlsZCA9IHZhbHVlO1xuICAgIH1cblxuICAgIGdldCByaWdodENoaWxkKCk6IFRyZWVOb2RlIHwgbnVsbCB7XG4gICAgICAgIHJldHVybiB0aGlzLl9yaWdodENoaWxkO1xuICAgIH1cblxuICAgIHNldCByaWdodENoaWxkKHZhbHVlOiBUcmVlTm9kZSB8IG51bGwpIHtcbiAgICAgICAgdGhpcy5fcmlnaHRDaGlsZCA9IHZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnQgdGhpcyB0cmVlIGFuZCBhbGwgb2YgaXQncyBjaGlsZHJlbiB0byB0aGUgTmV3aWMtZm9ybWF0LlxuICAgICAqXG4gICAgICogQHBhcmFtOiBpZEV4dHJhY3RvciBGdW5jdGlvbiB0aGF0IGV4dHJhY3QncyB0aGUgbmFtZSBmcm9tIGEgZ2l2ZW4gbm9kZSdzIGlkLlxuICAgICAqL1xuICAgIHB1YmxpYyB0b05ld2ljayhuYW1lRXh0cmFjdG9yOiAoaWQ6IG51bWJlcikgPT4gc3RyaW5nKTogc3RyaW5nIHtcbiAgICAgICAgbGV0IG91dHB1dDogc3RyaW5nID0gXCJcIjtcblxuICAgICAgICBpZiAoIXRoaXMubGVmdENoaWxkICYmICF0aGlzLnJpZ2h0Q2hpbGQpIHtcbiAgICAgICAgICAgIHJldHVybiBuYW1lRXh0cmFjdG9yKHRoaXMudmFsdWVzWzBdLmlkKSArIFwiOlwiICsgdGhpcy5oZWlnaHQ7XG4gICAgICAgIH1cblxuICAgICAgICBvdXRwdXQgKz0gXCIoXCI7XG5cbiAgICAgICAgaWYgKHRoaXMubGVmdENoaWxkKSB7XG4gICAgICAgICAgICBvdXRwdXQgKz0gdGhpcy5sZWZ0Q2hpbGQudG9OZXdpY2sobmFtZUV4dHJhY3RvcikgKyBcIixcIjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLnJpZ2h0Q2hpbGQpIHtcbiAgICAgICAgICAgIG91dHB1dCArPSB0aGlzLnJpZ2h0Q2hpbGQudG9OZXdpY2sobmFtZUV4dHJhY3Rvcik7XG4gICAgICAgIH1cblxuICAgICAgICBvdXRwdXQgKz0gXCIpXCIgKyB0aGlzLmlkICsgXCI6XCIgKyB0aGlzLmhlaWdodDtcblxuICAgICAgICByZXR1cm4gb3V0cHV0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnQgdGhpcyB0cmVlIGFuZCBhbGwgb2YgaXQncyBjaGlsZHJlbiB0byB0aGUgZG90IEdyYXBoVml6LWZvcm1hdC5cbiAgICAgKi9cbiAgICBwdWJsaWMgdG9HcmFwaFZpeihuYW1lRXh0cmFjdG9yOiAoaWQ6IG51bWJlcikgPT4gc3RyaW5nKTogc3RyaW5nIHtcbiAgICAgICAgbGV0IHJvb3Q6IFRyZWVOb2RlIHwgdW5kZWZpbmVkID0gdGhpcztcblxuICAgICAgICBsZXQgb3V0cHV0ID0gXCJkaWdyYXBoIGRlbmRyb2dyYW0ge1xcblwiO1xuICAgICAgICBsZXQgbGFiZWxzID0gXCJcIjtcbiAgICAgICAgbGV0IGVkZ2VzID0gXCJcIjtcblxuICAgICAgICBsZXQgdG9DaGVjazogVHJlZU5vZGVbXSA9IFtyb290XTtcbiAgICAgICAgd2hpbGUgKHRvQ2hlY2subGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgcm9vdCA9IHRvQ2hlY2suc2hpZnQoKTtcblxuICAgICAgICAgICAgaWYgKCFyb290KSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICghcm9vdC5sZWZ0Q2hpbGQgJiYgIXJvb3QucmlnaHRDaGlsZCkge1xuICAgICAgICAgICAgICAgIGxhYmVscyArPSBgICAgICR7cm9vdC5pZH0gW2xhYmVsPVwiJHtuYW1lRXh0cmFjdG9yKHJvb3QudmFsdWVzWzBdLmlkKX1cIl07XFxuYDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbGFiZWxzICs9IGAgICAgJHtyb290LmlkfSBbbGFiZWw9XCIke3Jvb3QuaWR9XCJdO1xcbmA7XG4gICAgICAgICAgICB9XG5cblxuICAgICAgICAgICAgaWYgKHJvb3QubGVmdENoaWxkKSB7XG4gICAgICAgICAgICAgICAgZWRnZXMgKz0gYCAgICAke3Jvb3QuaWR9IC0+ICR7cm9vdC5sZWZ0Q2hpbGQuaWR9O1xcbmA7XG4gICAgICAgICAgICAgICAgdG9DaGVjay5wdXNoKHJvb3QubGVmdENoaWxkKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHJvb3QucmlnaHRDaGlsZCkge1xuICAgICAgICAgICAgICAgIGVkZ2VzICs9IGAgICAgJHtyb290LmlkfSAtPiAke3Jvb3QucmlnaHRDaGlsZC5pZH07XFxuYDtcbiAgICAgICAgICAgICAgICB0b0NoZWNrLnB1c2gocm9vdC5yaWdodENoaWxkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBvdXRwdXQgKz0gbGFiZWxzICsgZWRnZXMgKyBcIn1cIjtcbiAgICAgICAgcmV0dXJuIG91dHB1dDtcbiAgICB9XG59XG4iLCJpbXBvcnQgQ2x1c3RlckVsZW1lbnQgZnJvbSBcIi4vQ2x1c3RlckVsZW1lbnRcIjtcbmltcG9ydCBUcmVlTm9kZSBmcm9tIFwiLi9UcmVlTm9kZVwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDbHVzdGVyIHtcbiAgICBwdWJsaWMgZWxlbWVudHM6IENsdXN0ZXJFbGVtZW50W107XG4gICAgcHVibGljIGluZGV4OiBudW1iZXI7XG4gICAgcHVibGljIHRyZWVOb2RlOiBUcmVlTm9kZTtcblxuICAgIGNvbnN0cnVjdG9yKGVsZW1lbnRzOiBDbHVzdGVyRWxlbWVudFtdLCBpbmRleDogbnVtYmVyLCB0cmVlTm9kZTogVHJlZU5vZGUpIHtcbiAgICAgICAgdGhpcy5lbGVtZW50cyA9IGVsZW1lbnRzO1xuICAgICAgICB0aGlzLmluZGV4ID0gaW5kZXg7XG4gICAgICAgIHRoaXMudHJlZU5vZGUgPSB0cmVlTm9kZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBNZXJnZSAyIGNsdXN0ZXJzIHdpdGggZWFjaCBvdGhlciBhbmQgY3JlYXRlIHRoZSBhc3NvY2lhdGVkIG5vZGVzIG9mIHRoZSBkZW5kcm9ncmFtLlxuICAgICAqXG4gICAgICogQHBhcmFtIG90aGVyIFRoZSBvdGhlciBjbHVzdGVyIHdpdGggd2hvbSB0aGlzIG9uZSBuZWVkcyB0byBiZSBtZXJnZWQuXG4gICAgICogQHBhcmFtIGhlaWdodCBUaGUgaGVpZ2h0IG9mIHRoZSBkZW5kcm9ncmFtIGF0IHdoaWNoIHRoZSBjbHVzdGVyaW5nIG9jY3Vycy5cbiAgICAgKi9cbiAgICBwdWJsaWMgbWVyZ2Uob3RoZXI6IENsdXN0ZXIsIGhlaWdodDogbnVtYmVyKSB7XG4gICAgICAgIHRoaXMuZWxlbWVudHMucHVzaCguLi5vdGhlci5lbGVtZW50cyk7XG4gICAgICAgIGNvbnN0IG5ld05vZGUgPSBuZXcgVHJlZU5vZGUobnVsbCwgdGhpcy50cmVlTm9kZSwgb3RoZXIudHJlZU5vZGUsIHRoaXMuZWxlbWVudHMuc2xpY2UoKSwgaGVpZ2h0KTtcbiAgICAgICAgdGhpcy50cmVlTm9kZS5wYXJlbnQgPSBuZXdOb2RlO1xuICAgICAgICBvdGhlci50cmVlTm9kZS5wYXJlbnQgPSBuZXdOb2RlO1xuICAgICAgICB0aGlzLnRyZWVOb2RlID0gbmV3Tm9kZTtcbiAgICB9XG59XG4iLCJpbXBvcnQgQ2x1c3RlcmVyIGZyb20gXCIuL0NsdXN0ZXJlclwiO1xuaW1wb3J0IFRyZWVOb2RlIGZyb20gXCIuL1RyZWVOb2RlXCI7XG5pbXBvcnQgTWV0cmljIGZyb20gXCIuLi9tZXRyaWMvTWV0cmljXCI7XG5pbXBvcnQgQ2x1c3RlckVsZW1lbnQgZnJvbSBcIi4vQ2x1c3RlckVsZW1lbnRcIjtcbmltcG9ydCBDbHVzdGVyIGZyb20gXCIuL0NsdXN0ZXJcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVVBHTUFDbHVzdGVyZXIgaW1wbGVtZW50cyBDbHVzdGVyZXIge1xuICAgIHByaXZhdGUgcmVhZG9ubHkgbWV0cmljOiBNZXRyaWM7XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0gbWV0cmljIEEgZGlzdGFuY2UgbWV0cmljIHRoYXQncyB1c2VkIGZvciB0aGUgY2x1c3RlcmluZyBwZXJmb3JtZWQgYnkgdGhpcyBjbGFzcy5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihtZXRyaWM6IE1ldHJpYykge1xuICAgICAgICB0aGlzLm1ldHJpYyA9IG1ldHJpYztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIGZ1bmN0aW9uIHJldHVybnMgdGhlIHJvb3Qgb2YgYSBkZW5kcm9ncmFtLCBiYXNlZCB1cG9uIHRoZSBnaXZlbiBkYXRhc2V0LiBUaGUgY2x1c3RlcmluZyBpcyBwZXJmb3JtZWQgb25cbiAgICAgKiBhIGRpc3RhbmNlIG1hdHJpeCwgd2hpY2ggaXMgY2FsY3VsYXRlZCB1c2luZyB0aGUgbWV0cmljLCBkZWZpbmVkIGluIHRoZSBjb25zdHJ1Y3RvciBvZiB0aGlzIGNsYXNzLlxuICAgICAqXG4gICAgICogQHBhcmFtIGRhdGEgQSBtYXRyaXggY29udGFpbmluZyBkYXRhIGVsZW1lbnRzIHRoYXQgc2hvdWxkIGJlIGNsdXN0ZXJlZC4gVGhlIGVsZW1lbnRzIGFyZSBlaXRoZXIgY2x1c3RlcmVkIG9uIHJvd1xuICAgICAqICAgICAgICBvciBjb2x1bW4gc2ltaWxhcml0eS5cbiAgICAgKi9cbiAgICBjbHVzdGVyKGRhdGE6IENsdXN0ZXJFbGVtZW50W10pOiBUcmVlTm9kZSB7XG4gICAgICAgIFRyZWVOb2RlLmN1cnJlbnRJRCA9IDA7XG5cbiAgICAgICAgaWYgKGRhdGEubGVuZ3RoIDwgMSkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBUcmVlTm9kZShudWxsLG51bGwsIG51bGwsIFtdLCAwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEFsbCBjbHVzdGVycyB0aGF0IGV4aXN0IGluIGEgY3VycmVudCBzdGVwLlxuICAgICAgICBsZXQgY2x1c3RlcnM6IE1hcDxudW1iZXIsIENsdXN0ZXI+ID0gbmV3IE1hcCgpO1xuXG4gICAgICAgIC8vIE5vdyB3ZSBuZWVkIHRvIGNvbXB1dGUgYSBkaXN0YW5jZSBtYXRyaXguIEEgZGlzdGFuY2UgbWF0cml4IG5lZWRzIGEgbWF0cml4IHdpdGggcmF3IHZhbHVlcyB0byBiZSBjYWxjdWxhdGVkLlxuICAgICAgICAvLyBXZSB0aHVzIG5lZWQgdG8gY29udmVydCB0aGUgaW5wdXQgaW50byBhIHZhbHVlIG1hdHJpeCwgYmVmb3JlIHByb2NlZWRpbmcuXG4gICAgICAgIGxldCB2YWx1ZU1hdHJpeDogbnVtYmVyW11bXSA9IFtdO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGxldCByb3c6IG51bWJlcltdID0gZGF0YVtpXS52YWx1ZXM7XG4gICAgICAgICAgICBjbHVzdGVycy5zZXQoaSwgbmV3IENsdXN0ZXIoW2RhdGFbaV1dLCBpLCBuZXcgVHJlZU5vZGUobnVsbCwgbnVsbCwgbnVsbCwgW2RhdGFbaV1dLCAwKSkpO1xuICAgICAgICAgICAgdmFsdWVNYXRyaXgucHVzaChyb3cpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ29tcHV0ZSB0aGUgZGlzdGFuY2UgbWF0cml4IVxuICAgICAgICBsZXQgZGlzdGFuY2VNYXRyaXg6IG51bWJlcltdW10gPSB0aGlzLm1ldHJpYy5nZXREaXN0YW5jZSh2YWx1ZU1hdHJpeCk7XG5cbiAgICAgICAgLy8gU3RhcnQgdGhlIFVQR01BIGl0ZXJhdGlvbnMuIExvb3AgdW50aWwgb25seSAxIGNsdXN0ZXIgcmVtYWlucy5cbiAgICAgICAgbGV0IGRvbmU6IG51bWJlciA9IDA7XG4gICAgICAgIHdoaWxlIChkb25lICE9IGRpc3RhbmNlTWF0cml4Lmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgIC8vIExvb2sgZm9yIHRoZSBzbWFsbGVzdCB2YWx1ZSBpbiB0aGUgZGlzdGFuY2UgbWF0cml4LlxuICAgICAgICAgICAgbGV0IHNtYWxsZXN0RGlzdGFuY2UgPSBJbmZpbml0eTtcbiAgICAgICAgICAgIGxldCB4ID0gLTE7XG4gICAgICAgICAgICBsZXQgeSA9IC0xO1xuICAgICAgICAgICAgZm9yIChsZXQgaSBvZiBjbHVzdGVycy5rZXlzKCkpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBqIG9mIGNsdXN0ZXJzLmtleXMoKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaSA+IGopIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkaXN0YW5jZU1hdHJpeFtpXVtqXSA8IHNtYWxsZXN0RGlzdGFuY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzbWFsbGVzdERpc3RhbmNlID0gZGlzdGFuY2VNYXRyaXhbaV1bal07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeCA9IGk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeSA9IGo7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEdldCB0aGUgY2x1c3RlciBvYmplY3RzIGNvcnJlc3BvbmRpbmcgdG8gdGhlIGNsb3Nlc3QgZGlzdGFuY2UgZm91bmQuXG4gICAgICAgICAgICBsZXQgeENsdXN0ZXIgPSBjbHVzdGVycy5nZXQoeCk7XG4gICAgICAgICAgICBsZXQgeUNsdXN0ZXIgPSBjbHVzdGVycy5nZXQoeSk7XG5cbiAgICAgICAgICAgIGxldCBub2RlSGVpZ2h0OiBudW1iZXIgPSBzbWFsbGVzdERpc3RhbmNlIC8gMjtcblxuICAgICAgICAgICAgaWYgKCF4Q2x1c3RlciB8fCAheUNsdXN0ZXIpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBcIkF0IGxlYXN0IG9uZSBjbHVzdGVyIGlzIGludmFsaWQhXCI7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFJlY2FsY3VsYXRlIGRpc3RhbmNlIGZyb20gdGhpcyBjbHVzdGVyIHRvIG90aGVyIGNsdXN0ZXJzIChVc2UgYXZlcmFnZSBkaXN0YW5jZSlcbiAgICAgICAgICAgIGxldCB1cGRhdGVkRGlzdGFuY2VNYXRyaXg6IG51bWJlcltdW10gPSB0aGlzLmNvcHlEaXN0YW5jZU1hdHJpeChkaXN0YW5jZU1hdHJpeCk7XG5cbiAgICAgICAgICAgIC8vIENsdXN0ZXIua2V5cygpIHJldHVybnMgYSByZWZlcmVuY2UgdG8gZXZlcnkgY2x1c3RlciBhdCB0aGUgY3VycmVudCBzdGVwXG4gICAgICAgICAgICBmb3IgKGxldCBqIG9mIGNsdXN0ZXJzLmtleXMoKSkge1xuICAgICAgICAgICAgICAgIGlmIChqICE9IHggJiYgaiAhPSB5KSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIE91ciBtYXRyaXggaXMgbG93ZXIgdHJpYW5ndWxhciAoYmVjYXVzZSBpdCBpcyBzeW1tZXRyaWMpLiBUaGlzIG1lYW5zIHdlIHNob3VsZCBleHRyYWN0IHRoZSB2YWx1ZVxuICAgICAgICAgICAgICAgICAgICAvLyBmcm9tIHRoZSByaWdodCBwYXJ0IG9mIHRoZSBtYXRyaXguXG4gICAgICAgICAgICAgICAgICAgIGxldCB4RGlzdGFuY2U7XG4gICAgICAgICAgICAgICAgICAgIGlmIChqID4geCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgeERpc3RhbmNlID0gZGlzdGFuY2VNYXRyaXhbal1beF1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHhEaXN0YW5jZSA9IGRpc3RhbmNlTWF0cml4W3hdW2pdXG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBsZXQgeURpc3RhbmNlO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaiA+IHkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHlEaXN0YW5jZSA9IGRpc3RhbmNlTWF0cml4W2pdW3ldXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB5RGlzdGFuY2UgPSBkaXN0YW5jZU1hdHJpeFt5XVtqXVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gUmVjYWxjdWxhdGUgdGhlIGRpc3RhbmNlIGJldHdlZW4gdGhlIG5ldywgbWVyZ2VkIGNsdXN0ZXIgYW5kIGFsbCBvdGhlciBjbHVzdGVycy5cbiAgICAgICAgICAgICAgICAgICAgbGV0IHRlbXAgPSAoeENsdXN0ZXIuZWxlbWVudHMubGVuZ3RoICogeERpc3RhbmNlICsgeUNsdXN0ZXIuZWxlbWVudHMubGVuZ3RoICogeURpc3RhbmNlKSAvICh4Q2x1c3Rlci5lbGVtZW50cy5sZW5ndGggKyB5Q2x1c3Rlci5lbGVtZW50cy5sZW5ndGgpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaiA+IHgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZWREaXN0YW5jZU1hdHJpeFtqXVt4XSA9IHRlbXA7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVkRGlzdGFuY2VNYXRyaXhbeF1bal0gPSB0ZW1wO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBkaXN0YW5jZU1hdHJpeCA9IHVwZGF0ZWREaXN0YW5jZU1hdHJpeDtcblxuICAgICAgICAgICAgLy8gTWVyZ2UgYm90aCBuZXcgY2x1c3RlcnMuIFRoZSBoZWlnaHQgb2YgdGhlIFRyZWVOb2RlIGluIHRoZSBkZW5kcm9ncmFtIGFzc29jaWF0ZWQgd2l0aCB0aGlzIG1lcmdlciwgaXNcbiAgICAgICAgICAgIC8vIGVxdWFsIHRvIHRoZSBkaXN0YW5jZSBiZXR3ZWVuIGNsdXN0ZXJZIGFuZCBjbHVzdGVyWCBpbiB0aGUgZGlzdGFuY2VNYXRyaXgsIGRpdmlkZWQgYnkgMi5cbiAgICAgICAgICAgIHhDbHVzdGVyLm1lcmdlKHlDbHVzdGVyLCBub2RlSGVpZ2h0KTtcbiAgICAgICAgICAgIGNsdXN0ZXJzLmRlbGV0ZSh5KTtcbiAgICAgICAgICAgICsrZG9uZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjbHVzdGVycy52YWx1ZXMoKS5uZXh0KCkudmFsdWUudHJlZU5vZGU7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBjb3B5RGlzdGFuY2VNYXRyaXgoZGlzdGFuY2VNYXRyaXg6IG51bWJlcltdW10pOiBudW1iZXJbXVtdIHtcbiAgICAgICAgbGV0IG91dHB1dDogbnVtYmVyW11bXSA9IFtdO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGlzdGFuY2VNYXRyaXgubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGxldCBjdXJyZW50OiBudW1iZXJbXSA9IFtdO1xuICAgICAgICAgICAgbGV0IHJvdyA9IGRpc3RhbmNlTWF0cml4W2ldO1xuICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCByb3cubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50LnB1c2gocm93W2pdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG91dHB1dC5wdXNoKGN1cnJlbnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG91dHB1dDtcbiAgICB9XG59XG4iLCJpbXBvcnQgTWV0cmljIGZyb20gXCIuL01ldHJpY1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBFdWNsaWRpYW5EaXN0YW5jZU1ldHJpYyBpbXBsZW1lbnRzIE1ldHJpYyB7XG4gICAgZ2V0RGlzdGFuY2UobWF0cml4OiBudW1iZXJbXVtdKTogbnVtYmVyW11bXSB7XG4gICAgICAgIGxldCBvdXRwdXQ6IG51bWJlcltdW10gPSBbXTtcblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG1hdHJpeC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgbGV0IHJvdzogbnVtYmVyW10gPSBbXTtcbiAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDw9IGk7IGorKykge1xuICAgICAgICAgICAgICAgIHJvdy5wdXNoKHRoaXMuY2FsY3VsYXRlRXVjbGlkZWFuRGlzdGFuY2UobWF0cml4W2ldLCBtYXRyaXhbal0pKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb3V0cHV0LnB1c2gocm93KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBvdXRwdXQ7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBjYWxjdWxhdGVFdWNsaWRlYW5EaXN0YW5jZSh2YWx1ZTE6IG51bWJlcltdLCB2YWx1ZTI6IG51bWJlcltdKSB7XG4gICAgICAgIGlmICh2YWx1ZTEubGVuZ3RoICE9IHZhbHVlMi5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRocm93IFwiRXVjbGlkZWFuIGRpc3RhbmNlIGNhbiBvbmx5IGJlIGNhbGN1bGF0ZWQgZm9yIDIgZXF1YWxseSBzaXplZCBpbnB1dCBhcnJheXMhXCI7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgcG93ZXJzID0gMDtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2YWx1ZTEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHBvd2VycyArPSBNYXRoLnBvdyh2YWx1ZTJbaV0gLSB2YWx1ZTFbaV0sIDIpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIE1hdGguc3FydChwb3dlcnMpO1xuICAgIH1cbn1cbiIsImltcG9ydCBSZW9yZGVyZXIgZnJvbSBcIi4vUmVvcmRlcmVyXCI7XG5pbXBvcnQgVHJlZU5vZGUgZnJvbSBcIi4uL2NsdXN0ZXIvVHJlZU5vZGVcIjtcblxuLyoqXG4gKiBUaGlzIGNsYXNzIHVzZXMgdGhlIE1PTE8gaGV1cmlzdGljcyBkZXNjcmliZWQgaW4gZnRwOi8vZnRwLmVzYXQua3VsZXV2ZW4uYmUvc2lzdGEvaWRhL3JlcG9ydHMvMTQtMTMzLnBkZiB0byByZW9yZGVyXG4gKiBhIGdpdmVuIGRlbmRyb2dyYW0uXG4gKlxuICogQGF1dGhvciBQaWV0ZXIgVmVyc2NoYWZmZWx0XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1vbG9SZW9yZGVyZXIgaW1wbGVtZW50cyBSZW9yZGVyZXIge1xuICAgIC8vIE1hcCBhIG5vZGUgb250byBpdCdzIG1pbmltdW0gZGlzdGFuY2UgYmV0d2VlbiBwcmV2aW91cyBtZXJnZXMuXG4gICAgcHJpdmF0ZSBub2RlTWluTWFwOiBNYXA8VHJlZU5vZGUsIG51bWJlcj4gPSBuZXcgTWFwKCk7XG5cbiAgICByZW9yZGVyKHJvb3Q6IFRyZWVOb2RlKTogVHJlZU5vZGUge1xuICAgICAgICB0aGlzLm5vZGVNaW5NYXAuY2xlYXIoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuc29ydE1pbmltdW0ocm9vdCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzb3J0TWluaW11bShyb290OiBUcmVlTm9kZSk6IFRyZWVOb2RlIHtcbiAgICAgICAgaWYgKCFyb290LmxlZnRDaGlsZCB8fCAhcm9vdC5yaWdodENoaWxkKSB7XG4gICAgICAgICAgICByZXR1cm4gcm9vdDtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBsZWZ0VHJlZTogVHJlZU5vZGUgPSByb290LmxlZnRDaGlsZDtcbiAgICAgICAgbGV0IHJpZ2h0VHJlZTogVHJlZU5vZGUgPSByb290LnJpZ2h0Q2hpbGQ7XG5cbiAgICAgICAgbGV0IGxlZnRTaW5nbGV0b246IGJvb2xlYW4gPSAhbGVmdFRyZWUubGVmdENoaWxkICYmICFsZWZ0VHJlZS5yaWdodENoaWxkO1xuICAgICAgICBsZXQgcmlnaHRTaW5nbGV0b246IGJvb2xlYW4gPSAhcmlnaHRUcmVlLmxlZnRDaGlsZCAmJiAhcmlnaHRUcmVlLnJpZ2h0Q2hpbGQ7XG5cbiAgICAgICAgaWYgKGxlZnRTaW5nbGV0b24gJiYgcmlnaHRTaW5nbGV0b24pIHtcbiAgICAgICAgICAgIHRoaXMubm9kZU1pbk1hcC5zZXQocm9vdCwgcm9vdC5oZWlnaHQpO1xuICAgICAgICB9IGVsc2UgaWYgKCFsZWZ0U2luZ2xldG9uICYmIHJpZ2h0U2luZ2xldG9uKSB7XG4gICAgICAgICAgICBsZXQgc29ydGVkOiBUcmVlTm9kZSA9IHRoaXMuc29ydE1pbmltdW0obGVmdFRyZWUpO1xuICAgICAgICAgICAgcm9vdC5sZWZ0Q2hpbGQgPSBzb3J0ZWQ7XG5cbiAgICAgICAgICAgIGxldCBzb3J0ZWRNaW4gPSB0aGlzLm5vZGVNaW5NYXAuZ2V0KHNvcnRlZCk7XG5cbiAgICAgICAgICAgIGlmIChzb3J0ZWRNaW4gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHRocm93IFwiVGhlIHJlY3Vyc2l2ZSBjYWxsIHRvIHNvcnQgdGhlIGxlZnQgc3VidHJlZSBkaWQgbm90IHlpZWxkIGEgbWluaW11bSB2YWx1ZS5cIjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5ub2RlTWluTWFwLnNldChyb290LCBNYXRoLm1pbihyb290LmhlaWdodCwgc29ydGVkTWluKSk7XG4gICAgICAgIH0gZWxzZSBpZiAobGVmdFNpbmdsZXRvbiAmJiAhcmlnaHRTaW5nbGV0b24pIHtcbiAgICAgICAgICAgIGxldCBzb3J0ZWQ6IFRyZWVOb2RlID0gdGhpcy5zb3J0TWluaW11bShyaWdodFRyZWUpO1xuICAgICAgICAgICAgcm9vdC5sZWZ0Q2hpbGQgPSBzb3J0ZWQ7XG4gICAgICAgICAgICByb290LnJpZ2h0Q2hpbGQgPSBsZWZ0VHJlZTtcblxuICAgICAgICAgICAgbGV0IHNvcnRlZE1pbiA9IHRoaXMubm9kZU1pbk1hcC5nZXQoc29ydGVkKTtcblxuICAgICAgICAgICAgaWYgKHNvcnRlZE1pbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgXCJUaGUgcmVjdXJzaXZlIGNhbGwgdG8gc29ydCB0aGUgcmlnaHQgc3VidHJlZSBkaWQgbm90IHlpZWxkIGEgbWluaW11bSB2YWx1ZS5cIjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5ub2RlTWluTWFwLnNldChyb290LCBNYXRoLm1pbihyb290LmhlaWdodCwgc29ydGVkTWluKSk7XG4gICAgICAgIH0gZWxzZSAge1xuICAgICAgICAgICAgLy8gQm90aCB0cmVlcyBhcmUgbm9uLWxlYXZlc1xuICAgICAgICAgICAgbGV0IGxlZnRTb3J0ZWQ6IFRyZWVOb2RlID0gdGhpcy5zb3J0TWluaW11bShsZWZ0VHJlZSk7XG4gICAgICAgICAgICBsZXQgcmlnaHRTb3J0ZWQ6IFRyZWVOb2RlID0gdGhpcy5zb3J0TWluaW11bShyaWdodFRyZWUpO1xuXG4gICAgICAgICAgICBsZXQgbGVmdE1pbiA9IHRoaXMubm9kZU1pbk1hcC5nZXQobGVmdFNvcnRlZCk7XG4gICAgICAgICAgICBsZXQgcmlnaHRNaW4gPSB0aGlzLm5vZGVNaW5NYXAuZ2V0KHJpZ2h0U29ydGVkKTtcblxuICAgICAgICAgICAgaWYgKGxlZnRNaW4gPT09IHVuZGVmaW5lZCB8fCByaWdodE1pbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgXCJPbmUgb2YgdGhlIHJlY3Vyc2l2ZSBjYWxscyB0byBzb3J0IGEgc3VidHJlZSBkaWQgbm90IHlpZWxkIGEgbWluaW11bSB2YWx1ZS5cIjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGxlZnRNaW4gPD0gcmlnaHRNaW4pIHtcbiAgICAgICAgICAgICAgICByb290LmxlZnRDaGlsZCA9IGxlZnRTb3J0ZWQ7XG4gICAgICAgICAgICAgICAgcm9vdC5yaWdodENoaWxkID0gcmlnaHRTb3J0ZWQ7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJvb3QubGVmdENoaWxkID0gcmlnaHRTb3J0ZWQ7XG4gICAgICAgICAgICAgICAgcm9vdC5yaWdodENoaWxkID0gbGVmdFNvcnRlZDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5ub2RlTWluTWFwLnNldChyb290LCBNYXRoLm1pbihyb290LmhlaWdodCwgbGVmdE1pbiwgcmlnaHRNaW4pKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByb290O1xuICAgIH1cbn1cbiIsImltcG9ydCBTZXR0aW5ncyBmcm9tIFwiLi8uLi8uLi9TZXR0aW5nc1wiO1xyXG5pbXBvcnQgSGVhdG1hcEZlYXR1cmUgZnJvbSBcIi4vSGVhdG1hcEZlYXR1cmVcIjtcclxuaW1wb3J0IEhlYXRtYXBWYWx1ZSBmcm9tIFwiLi9IZWF0bWFwVmFsdWVcIjtcclxuaW1wb3J0IHsgVHJhbnNpdGlvbiB9IGZyb20gXCIuLy4uLy4uL3RyYW5zaXRpb24vVHJhbnNpdGlvblwiO1xyXG5pbXBvcnQgQ2x1c3RlcmVyIGZyb20gXCIuL2NsdXN0ZXIvQ2x1c3RlcmVyXCI7XHJcbmltcG9ydCBVUEdNQUNsdXN0ZXJlciBmcm9tIFwiLi9jbHVzdGVyL1VQR01BQ2x1c3RlcmVyXCI7XHJcbmltcG9ydCBFdWNsaWRpYW5EaXN0YW5jZU1ldHJpYyBmcm9tIFwiLi9tZXRyaWMvRXVjbGlkaWFuRGlzdGFuY2VNZXRyaWNcIjtcclxuaW1wb3J0IE1vbG9SZW9yZGVyZXIgZnJvbSBcIi4vcmVvcmRlci9Nb2xvUmVvcmRlcmVyXCI7XHJcbmltcG9ydCBSZW9yZGVyZXIgZnJvbSBcIi4vcmVvcmRlci9SZW9yZGVyZXJcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEhlYXRtYXBTZXR0aW5ncyBleHRlbmRzIFNldHRpbmdzIHtcclxuICAgIC8qKlxyXG4gICAgICogVGhlIGFtb3VudCBvZiBwaXhlbHMgdGhhdCBjYW4gbWF4aW1hbGx5IGJlIHVzZWQgZm9yIHJvdyBsYWJlbHMgd2hlbiBpbml0aWFsbHkgcmVuZGVyaW5nIHRoZSBoZWF0bWFwLlxyXG4gICAgICovXHJcbiAgICBpbml0aWFsVGV4dFdpZHRoOiBudW1iZXIgPSAxMDA7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgYW1vdW50IG9mIHBpeGVscyB0aGF0IGNhbiBtYXhpbWFsbHkgYmUgdXNlZCBmb3IgY29sdW1uIGxhYmVscyB3aGVuIGluaXRpYWxseSByZW5kZXJpbmcgdGhlIGhlYXRtYXAuXHJcbiAgICAgKi9cclxuICAgIGluaXRpYWxUZXh0SGVpZ2h0OiBudW1iZXIgPSAxMDA7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBQYWRkaW5nIGJldHdlZW4gc3F1YXJlcyBpbiB0aGUgaGVhdG1hcCBncmlkIChpbiBwaXhlbHMpLiBTZXQgdG8gMCBmb3Igbm8gcGFkZGluZy5cclxuICAgICAqL1xyXG4gICAgc3F1YXJlUGFkZGluZzogbnVtYmVyID0gMjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFBhZGRpbmcgYmV0d2VlbiB0aGUgdmlzdWFsaXphdGlvbiBhbmQgdGhlIGxhYmVscyAoaW4gcGl4ZWxzKS4gVGhpcyBwYWRkaW5nIGlzIGFwcGxpZWQgdG8gYm90aCB0aGUgcm93IGFuZFxyXG4gICAgICogY29sdW1uIGxhYmVscy5cclxuICAgICAqL1xyXG4gICAgdmlzdWFsaXphdGlvblRleHRQYWRkaW5nID0gNDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEZvbnQgc2l6ZSBmb3IgbGFiZWxzLCB3aGVuIGN1cnJlbnQgbGFiZWwgaXMgbm90IGhpZ2hsaWdodGVkLiBTaXplIG11c3QgYmUgZ2l2ZW4gaW4gcGl4ZWxzLlxyXG4gICAgICovXHJcbiAgICBmb250U2l6ZTogbnVtYmVyID0gMTQ7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDb2xvciBvZiBsYWJlbCB0ZXh0LCB3aGVuIGxhYmVsIGlzIG5vdCBoaWdobGlnaHRlZC4gVmFsdWUgc2hvdWxkIGJlIGEgdmFsaWQgSFRNTCBjb2xvciBzdHJpbmcgKGhleGFkZWNpbWFsKS5cclxuICAgICAqL1xyXG4gICAgbGFiZWxDb2xvcjogc3RyaW5nID0gXCIjNDA0MDQwXCI7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTaG91bGQgdGhlIHJvdywgY29sdW1uIGFuZCBzcXVhcmUgdGhhdCBhcmUgY3VycmVudGx5IGJlaW5nIGhvdmVyZWQgYnkgdGhlIG1vdXNlIGN1cnNvciBiZSBoaWdobGlnaHRlZD9cclxuICAgICAqL1xyXG4gICAgaGlnaGxpZ2h0U2VsZWN0aW9uOiBib29sZWFuID0gdHJ1ZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEZvbnQgc2l6ZSBmb3IgbGFiZWxzLCB3aGVuIGN1cnJlbnQgbGFiZWwgaXMgaGlnaGxpZ2h0ZWQuIFNpemUgbXVzdCBiZSBnaXZlbiBpbiBwaXhlbHMuXHJcbiAgICAgKi9cclxuICAgIGhpZ2hsaWdodEZvbnRTaXplOiBudW1iZXIgPSAxNjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIENvbG9yIG9mIGxhYmVsIHRleHQsIHdoZW4gbGFiZWwgaXMgaGlnaGxpZ2h0ZWQuIFZhbHVlIHNob3VsZCBiZSBhIHZhbGlkIEhUTUwgY29sb3Igc3RyaW5nIChoZXhhZGVjaW1hbCkuXHJcbiAgICAgKi9cclxuICAgIGhpZ2hsaWdodEZvbnRDb2xvcjogc3RyaW5nID0gXCJibGFja1wiO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ2xhc3NuYW1lIHRoYXQncyBpbnRlcm5hbGx5IHVzZWQgZm9yIHRoZSBvYmplY3QuXHJcbiAgICAgKi9cclxuICAgIGNsYXNzTmFtZTogc3RyaW5nID0gXCJoZWF0bWFwXCI7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBEZXRlcm1pbmVzIGlmIGFuaW1hdGlvbnMgc2hvdWxkIGJlIHJlbmRlcmVkIHdoZW4gcm93cyBhbmQgY29sdW1ucyBhcmUgcmVvcmRlcmVkLlxyXG4gICAgICovXHJcbiAgICBhbmltYXRpb25zRW5hYmxlZDogYm9vbGVhbiA9IHRydWU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBEZXRlcm1pbmVzIGhvdyBsb25nIGFuaW1hdGlvbnMgc2hvdWxkIHRha2UsIGlmIHRoZXkgYXJlIGVuYWJsZWQuIFRpbWUgc2hvdWxkIGJlIGdpdmVuIGluIG1pbGxpc2Vjb25kcy5cclxuICAgICAqL1xyXG4gICAgYW5pbWF0aW9uRHVyYXRpb246IG51bWJlciA9IDIwMDA7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUcmFuc2l0aW9uIGVmZmVjdCB0aGF0IHNob3VsZCBiZSBhcHBsaWVkIHRvIHRoZSByZW9yZGVyaW5nIGFuaW1hdGlvbi4gUGFzcyBhIHByZWRlZmluZWQgZnVuY3Rpb24gZnJvbSB0aGVcclxuICAgICAqIFRyYW5zaXRpb24gbmFtZXNwYWNlLCBvciBwcm92aWRlIHlvdXIgb3duIGZ1bmN0aW9uIHRoYXQgbWFwcyBhIHZhbHVlIGZyb20gWzAsIDFdIHRvIFswLCAxXS5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0geCBBIHZhbHVlIGZyb20gdGhlIGludGVydmFsIFswLCAxXS5cclxuICAgICAqIEByZXR1cm4gQSB2YWx1ZSBpbiB0aGUgaW50ZXJ2YWwgWzAsIDFdIHRoYXQgYWRoZXJlcyB0byBhIHNwZWNpZmljIHRyYW5zaXRpb24ncyBydWxlcy5cclxuICAgICAqL1xyXG4gICAgdHJhbnNpdGlvbjogKHg6IG51bWJlcikgPT4gbnVtYmVyID0gVHJhbnNpdGlvbi5lYXNlSW5FYXNlT3V0Q3ViaWM7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDb2xvciB2YWx1ZSB0aGF0IHNob3VsZCBiZSB1c2VkIHRvIHJlbmRlciBzcXVhcmVzIHdpdGggdGhlIGxvd2VzdCBwb3NzaWJsZSB2YWx1ZS4gQWxsIG90aGVyIHZhbHVlcyBiZXR3ZWVuIG1pblxyXG4gICAgICogYW5kIG1heCB2YWx1ZSB3aWxsIGJlIGNvbG9yZWQgd2l0aCBhIGNvbG9yIHZhbHVlIGludGVycG9sYXRlZCBiZXR3ZWVuIG1pbkNvbG9yIGFuZCBtYXhDb2xvci4gVmFsdWUgc2hvdWxkIGJlIGFcclxuICAgICAqIHZhbGlkIEhUTUwgY29sb3Igc3RyaW5nLlxyXG4gICAgICovXHJcbiAgICBtaW5Db2xvcjogc3RyaW5nID0gXCIjRUVFRUVFXCI7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDb2xvciB2YWx1ZSB0aGF0IHNob3VsZCBiZSB1c2VkIHRvIHJlbmRlciBzcXVhcmVzIHdpdGggdGhlIGhpZ2hlc3QgcG9zc2libGUgdmFsdWUuIEFsbCBvdGhlciB2YWx1ZXMgYmV0d2VlbiBtaW5cclxuICAgICAqIGFuZCBtYXggdmFsdWUgd2lsbCBiZSBjb2xvcmVkIHdpdGggYSBjb2xvciB2YWx1ZSBpbnRlcnBvbGF0ZWQgYmV0d2VlbiBtaW5Db2xvciBhbmQgbWF4Q29sb3IuIFZhbHVlIHNob3VsZCBiZSBhXHJcbiAgICAgKiB2YWxpZCBIVE1MIGNvbG9yIHN0cmluZy5cclxuICAgICAqL1xyXG4gICAgbWF4Q29sb3I6IHN0cmluZyA9IFwiIzE1NjVDMFwiO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogSG93IG1hbnkgZGlzdGluY3QgY29sb3JzIGJldHdlZW4gbWluQ29sb3IgYW5kIG1heENvbG9yIHNob3VsZCBiZSB1c2VkIGZvciB0aGUgaGVhdG1hcCAodGhpcyB2YWx1ZSB0aHVzIGRldGVybWluZXNcclxuICAgICAqIHRoZSBzaXplIG9mIHRoZSBjb2xvciBwYWxldHRlKS4gSW5jcmVhc2luZyB0aGlzIHZhbHVlIHdpbGwgZGVjcmVhc2UgdGhlIGhlYXRtYXAncyBwZXJmb3JtYW5jZS5cclxuICAgICAqL1xyXG4gICAgY29sb3JCdWNrZXRzOiBudW1iZXIgPSA1MDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFNob3VsZCBhIGRlbmRyb2dyYW0gYmUgcmVuZGVyZWQgZm9yIGJvdGggYXhlcz9cclxuICAgICAqL1xyXG4gICAgZGVuZHJvZ3JhbUVuYWJsZWQ6IGJvb2xlYW4gPSBmYWxzZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEFtb3VudCBvZiBwaXhlbHMgdGhhdCBjYW4gYmUgdGFrZW4gaW4gYnkgdGhlIGRlbmRyb2dyYW1cclxuICAgICAqL1xyXG4gICAgZGVuZHJvZ3JhbVdpZHRoOiBudW1iZXIgPSAxMDA7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBXaWR0aCBvZiB0aGUgbGluZXMgdXNlZCB0byBjb25zdHJ1Y3QgYSBkZW5kcm9ncmFtIChpbiBwaXhlbHMpLlxyXG4gICAgICovXHJcbiAgICBkZW5kcm9ncmFtTGluZVdpZHRoOiBudW1iZXIgPSAxO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ29sb3Igb2YgdGhlIGxpbmVzIHVzZWQgdG8gY29uc3RydWN0IGEgZGVuZHJvZ3JhbSAobXVzdCBiZSBhIHZhbGlkIEhUTUwgY29sb3Igc3RyaW5nKS5cclxuICAgICAqL1xyXG4gICAgZGVuZHJvZ3JhbUNvbG9yOiBzdHJpbmcgPSBcIiM0MDQwNDBcIjtcclxuXHJcbiAgICBjbHVzdGVyaW5nQWxnb3JpdGhtOiBDbHVzdGVyZXIgPSBuZXcgVVBHTUFDbHVzdGVyZXIobmV3IEV1Y2xpZGlhbkRpc3RhbmNlTWV0cmljKCkpO1xyXG5cclxuICAgIHJlb3JkZXJlcjogUmVvcmRlcmVyID0gbmV3IE1vbG9SZW9yZGVyZXIoKTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgdGhlIGh0bWwgdG8gdXNlIGFzIHRvb2x0aXAgZm9yIGEgY2VsbC4gSXMgY2FsbGVkIHdpdGggYSBIZWF0bWFwVmFsdWUgdGhhdCByZXByZXNlbnRzIHRoZSBjdXJyZW50IGNlbGwgYW5kXHJcbiAgICAgKiB0aGUgcm93IGFuZCBjb2x1bW4gb2JqZWN0cyBhc3NvY2lhdGVkIHdpdGggdGhlIGhpZ2hsaWdodGVkIGNlbGwgYXMgcGFyYW1ldGVycy4gVGhlIHJlc3VsdCBvZiBnZXRUb29sdGlwVGl0bGUgaXNcclxuICAgICAqIHVzZWQgZm9yIHRoZSBoZWFkZXIgYW5kIGdldFRvb2x0aXBUZXh0IGlzIHVzZWQgZm9yIHRoZSBib2R5IG9mIHRoZSB0b29sdGlwIGJ5IGRlZmF1bHQuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHZhbHVlIEN1cnJlbnQgdmFsdWUgZm9yIHRoZSBzcXVhcmUgdGhhdCdzIGJlaW5nIGhvdmVyZWQgYnkgdGhlIG1vdXNlIGN1cnNvci5cclxuICAgICAqIEBwYXJhbSByb3cgUm93IGluZGV4IHRoYXQncyBjdXJyZW50bHkgYmVpbmcgaG92ZXJlZCBieSB0aGUgbW91c2UgY3Vyc29yLlxyXG4gICAgICogQHBhcmFtIGNvbHVtbiBDb2x1bW4gaW5kZXggdGhhdCdzIGN1cnJlbnRseSBiZWluZyBob3ZlcmVkIGJ5IHRoZSBtb3VzZSBjdXJzb3IuXHJcbiAgICAgKiBAcmV0dXJuIEEgdmFsaWQgSFRNTC1zdHJpbmcgdGhhdCByZXByZXNlbnRzIGEgdG9vbHRpcC5cclxuICAgICAqL1xyXG4gICAgZ2V0VG9vbHRpcDogKFxyXG4gICAgICAgIHZhbHVlOiBIZWF0bWFwVmFsdWUsXHJcbiAgICAgICAgcm93OiBIZWF0bWFwRmVhdHVyZSxcclxuICAgICAgICBjb2x1bW46IEhlYXRtYXBGZWF0dXJlXHJcbiAgICApID0+IHN0cmluZyA9ICh2YWx1ZTogSGVhdG1hcFZhbHVlLCByb3c6IEhlYXRtYXBGZWF0dXJlLCBjb2x1bW46IEhlYXRtYXBGZWF0dXJlKSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIGBcclxuICAgICAgICAgICAgPHN0eWxlPlxyXG4gICAgICAgICAgICAgICAgLnVuaXBlcHQtdG9vbHRpcCB7XHJcbiAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogMTBweDtcclxuICAgICAgICAgICAgICAgICAgICBib3JkZXItcmFkaXVzOiA1cHg7IFxyXG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6IHJnYmEoMCwgMCwgMCwgMC44KTsgXHJcbiAgICAgICAgICAgICAgICAgICAgY29sb3I6ICNmZmY7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIC51bmlwZXB0LXRvb2x0aXAgZGl2LCAudW5pcGVwdC10b29sdGlwIGEge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvbnQtZmFtaWx5OiBSb2JvdG8sICdIZWx2ZXRpY2EgTmV1ZScsIEhlbHZldGljYSwgQXJpYWwsIHNhbnMtc2VyaWY7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIC51bmlwZXB0LXRvb2x0aXAgZGl2IHtcclxuICAgICAgICAgICAgICAgICAgICBmb250LXdlaWdodDogYm9sZDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgPC9zdHlsZT5cclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInVuaXBlcHQtdG9vbHRpcFwiPlxyXG4gICAgICAgICAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgICAgICAgICAke3RoaXMuZ2V0VG9vbHRpcFRpdGxlKHZhbHVlLCByb3csIGNvbHVtbil9XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxhPlxyXG4gICAgICAgICAgICAgICAgICAgICR7dGhpcy5nZXRUb29sdGlwVGV4dCh2YWx1ZSl9XHJcbiAgICAgICAgICAgICAgICA8L2E+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIGBcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIHRleHQgdGhhdCdzIGJlaW5nIHVzZWQgZm9yIHRoZSB0aXRsZSBvZiBhIHRvb2x0aXAuIFRoaXMgdG9vbHRpcCBwcm92aWRlcyBpbmZvcm1hdGlvbiB0byB0aGUgdXNlciBhYm91dFxyXG4gICAgICogdGhlIHZhbHVlIHRoYXQncyBjdXJyZW50bHkgaG92ZXJlZCBieSB0aGUgbW91c2UgY3Vyc29yLlxyXG4gICAgICpcclxuICAgICAqIFRoaXMgZnVuY3Rpb24gcmV0dXJucyB0aGUgcm93IGFuZCBjb2x1bW4gdGl0bGUgb2YgdGhlIGN1cnJlbnRseSBzZWxlY3RlZCB2YWx1ZSBieSBkZWZhdWx0LlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB2YWx1ZSBDdXJyZW50IHZhbHVlIGZvciB0aGUgc3F1YXJlIHRoYXQncyBiZWluZyBob3ZlcmVkIGJ5IHRoZSBtb3VzZSBjdXJzb3IuXHJcbiAgICAgKiBAcGFyYW0gcm93IFJvdyBpbmRleCB0aGF0J3MgY3VycmVudGx5IGJlaW5nIGhvdmVyZWQgYnkgdGhlIG1vdXNlIGN1cnNvci5cclxuICAgICAqIEBwYXJhbSBjb2x1bW4gQ29sdW1uIGluZGV4IHRoYXQncyBjdXJyZW50bHkgYmVpbmcgaG92ZXJlZCBieSB0aGUgbW91c2UgY3Vyc29yLlxyXG4gICAgICogQHJldHVybiBUZXh0IGNvbnRlbnQgdGhhdCBzaG91bGQgYmUgdXNlZCBmb3IgdGhlIGhlYWRlciBvZiB0aGUgdG9vbHRpcC5cclxuICAgICAqL1xyXG4gICAgZ2V0VG9vbHRpcFRpdGxlOiAoXHJcbiAgICAgICAgdmFsdWU6IEhlYXRtYXBWYWx1ZSxcclxuICAgICAgICByb3c6IEhlYXRtYXBGZWF0dXJlLFxyXG4gICAgICAgIGNvbHVtbjogSGVhdG1hcEZlYXR1cmVcclxuICAgICkgPT4gc3RyaW5nID0gKHZhbHVlOiBIZWF0bWFwVmFsdWUsIHJvdzogSGVhdG1hcEZlYXR1cmUsIGNvbHVtbjogSGVhdG1hcEZlYXR1cmUpID0+IHtcclxuICAgICAgICByZXR1cm4gYCR7Y29sdW1uLm5hbWUgPyBjb2x1bW4ubmFtZSA6IFwiXCJ9JHtjb2x1bW4ubmFtZSA/IFwiIGFuZCBcIiA6IFwiXCJ9JHtyb3cubmFtZSA/IHJvdy5uYW1lIDogXCJcIn1gO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgdGV4dCB0aGF0J3MgYmVpbmcgdXNlZCBmb3IgdGhlIGJvZHkgb2YgYSB0b29sdGlwLiBUaGlzIHRvb2x0aXAgcHJvdmlkZXMgaW5mb3JtYXRpb24gdG8gdGhlIHVzZXIgYWJvdXRcclxuICAgICAqIHRoZSB2YWx1ZSB0aGF0J3MgY3VycmVudGx5IGhvdmVyZWQgYnkgdGhlIG1vdXNlIGN1cnNvci5cclxuICAgICAqXHJcbiAgICAgKiBUaGlzIGZ1bmN0aW9uIHJldHVybnMgdGhlIGN1cnJlbnRseSBzZWxlY3RlZCB2YWx1ZSAoYXMgYSBwZXJjZW50YWdlKSBieSBkZWZhdWx0LlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB4IEN1cnJlbnQgdmFsdWUgZm9yIHRoZSBzcXVhcmUgdGhhdCdzIGJlaW5nIGhvdmVyZWQgYnkgdGhlIG1vdXNlIGN1cnNvci5cclxuICAgICAqIEByZXR1cm4gVGV4dCBjb250ZW50IHRoYXQgc2hvdWxkIGJlIHVzZWQgZm9yIHRoZSBoZWFkZXIgb2YgdGhlIHRvb2x0aXAuXHJcbiAgICAgKi9cclxuICAgIGdldFRvb2x0aXBUZXh0OiAoeDogSGVhdG1hcFZhbHVlKSA9PiBzdHJpbmcgPSAoeDogSGVhdG1hcFZhbHVlKSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIGBTaW1pbGFyaXR5OiAkeyh4LnZhbHVlICogMTAwKS50b0ZpeGVkKDIpfSVgO1xyXG4gICAgfTtcclxufVxyXG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBDbHVzdGVyRWxlbWVudCB7XG4gICAgcHVibGljIHJlYWRvbmx5IHZhbHVlczogbnVtYmVyW107XG4gICAgcHVibGljIHJlYWRvbmx5IGlkOiBudW1iZXI7XG5cbiAgICBjb25zdHJ1Y3Rvcih2YWx1ZXM6IG51bWJlcltdLCBpZDogbnVtYmVyKSB7XG4gICAgICAgIHRoaXMudmFsdWVzID0gdmFsdWVzO1xuICAgICAgICB0aGlzLmlkID0gaWQ7XG4gICAgfVxufVxuIiwiaW1wb3J0IEhlYXRtYXBGZWF0dXJlIGZyb20gXCIuL0hlYXRtYXBGZWF0dXJlXCI7XG5pbXBvcnQgSGVhdG1hcFZhbHVlIGZyb20gXCIuL0hlYXRtYXBWYWx1ZVwiO1xuaW1wb3J0ICogYXMgZDMgZnJvbSBcImQzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFByZXByb2Nlc3NvciB7XG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYW4gYXJyYXkgb2YgZmVhdHVyZSBsYWJlbHMgaW50byBjb3JyZWN0IEhlYXRtYXBGZWF0dXJlIG9iamVjdHMuIFRoZXNlIG9iamVjdHMga2VlcCB0cmFjayBvZiBhIG5hbWVcbiAgICAgKiBhbmQgaW5kZXggZm9yIGEgZmVhdHVyZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBmZWF0dXJlTGFiZWxzIEFsbCBsYWJlbHMgdGhhdCBzaG91bGQgYmUgY29udmVydGVkIHRvIHRydWUgSGVhdG1hcEZlYXR1cmUgb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJuIEFuIGFycmF5IHdpdGggSGVhdG1hcEZlYXR1cmUgb2JqZWN0cy5cbiAgICAgKi9cbiAgICBwcmVwcm9jZXNzRmVhdHVyZXMoZmVhdHVyZUxhYmVsczogc3RyaW5nW10pOiBIZWF0bWFwRmVhdHVyZVtdIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5lbnRyaWVzKGZlYXR1cmVMYWJlbHMpLm1hcCgoW2lkeCwgZmVhdHVyZV0pID0+IHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgbmFtZTogZmVhdHVyZSxcbiAgICAgICAgICAgICAgICBpZHg6IE51bWJlci5wYXJzZUludChpZHgpXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnQgdGhlIGRhdGEgZ3JpZCBjb25zaXN0aW5nIG9mIG51bWJlcnMgaW50byB2YWxpZCBIZWF0bWFwVmFsdWUtb2JqZWN0cy4gVGhlIG9yZGVyIGZyb20gdGhlIGlucHV0IGdyaWQgaXNcbiAgICAgKiByZXRhaW5lZCBpbiB0aGUgb3V0cHV0IGdyaWQuIEEgY29sb3Igd2lsbCBiZSBjb21wdXRlZCBmb3IgZWFjaCBkaXN0aW5jdCB2YWx1ZS4gT25seSBhIHNwZWNpZmljIGFtb3VudCBvZiBjb2xvcnNcbiAgICAgKiB3aWxsIGJlIGdlbmVyYXRlZCwgYXMgZGV0ZXJtaW5lZCBieSB0aGUgY29sb3JWYWx1ZXMgcGFyYW1ldGVyLlxuICAgICAqXG4gICAgICogQHBhcmFtIGRhdGEgQSBncmlkIG9mIG51bWJlcnMgdGhhdCBuZWVkcyB0byBiZSBjb252ZXJ0ZWQgdG8gcHJvcGVyIEhlYXRtYXBWYWx1ZS1vYmplY3RzLlxuICAgICAqIEBwYXJhbSBsb3dDb2xvciBDb2xvciB2YWx1ZSB0aGF0IHNob3VsZCBiZSB1c2VkIGZvciBsb3cgdmFsdWVzXG4gICAgICogQHBhcmFtIGhpZ2hDb2xvciBDb2xvciB2YWx1ZSB0aGF0IHNob3VsZCBiZSB1c2VkIGZvciBoaWdoIHZhbHVlc1xuICAgICAqIEBwYXJhbSBjb2xvclZhbHVlcyBIb3cgbWFueSBkaXNjcmV0ZSBjb2xvciB2YWx1ZXMgc2hvdWxkIGJlIGdlbmVyYXRlZD9cbiAgICAgKiBAcmV0dXJuIEEgdHdvLWRpbWVuc2lvbmFsIGdyaWQgb2YgSGVhdG1hcFZhbHVlIG9iamVjdHMuXG4gICAgICovXG4gICAgcHJlcHJvY2Vzc1ZhbHVlcyhcbiAgICAgICAgZGF0YTogKG51bWJlciB8IEhlYXRtYXBWYWx1ZSlbXVtdLFxuICAgICAgICBsb3dDb2xvcjogc3RyaW5nLFxuICAgICAgICBoaWdoQ29sb3I6IHN0cmluZyxcbiAgICAgICAgY29sb3JWYWx1ZXM6IG51bWJlclxuICAgICk6IEhlYXRtYXBWYWx1ZVtdW10ge1xuICAgICAgICBjb25zdCBpbnRlcnBvbGF0b3IgPSBkMy5pbnRlcnBvbGF0ZUxhYihkMy5sYWIobG93Q29sb3IpLCBkMy5sYWIoaGlnaENvbG9yKSk7XG5cbiAgICAgICAgY29uc3QgeCA9IGQzLnNjYWxlTGluZWFyKCkuZG9tYWluKFswLCAxXSkucmFuZ2UoWzAsIDFdKTtcbiAgICAgICAgY29uc3QgdGlja3MgPSB4LnRpY2tzKGNvbG9yVmFsdWVzKTtcbiAgICAgICAgY29uc3QgcXVhbnRpemVTY2FsZSA9IGQzLnNjYWxlUXVhbnRpemUoKS5kb21haW4oWzAsIDFdKS5yYW5nZSh0aWNrcyk7XG5cbiAgICAgICAgcmV0dXJuIE9iamVjdC5lbnRyaWVzKGRhdGEpLm1hcCgoW3Jvd0lkeCwgcm93XSkgPT4gT2JqZWN0LmVudHJpZXMocm93KS5tYXAoKFtjb2xJZHgsIHZhbHVlXSkgPT4ge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICAgICAgICAgIGNvbnN0IHF1YW50aXplZFZhbHVlID0gcXVhbnRpemVTY2FsZSh2YWx1ZSk7XG5cbiAgICAgICAgICAgICAgICBpZiAocXVhbnRpemVkVmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGhlYXRtYXAgdmFsdWUgZ2l2ZW46IFwiICsgdmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiB2YWx1ZSBhcyBudW1iZXIsXG4gICAgICAgICAgICAgICAgICAgIHJvd0lkOiBOdW1iZXIucGFyc2VJbnQocm93SWR4KSxcbiAgICAgICAgICAgICAgICAgICAgY29sdW1uSWQ6IE51bWJlci5wYXJzZUludChjb2xJZHgpLFxuICAgICAgICAgICAgICAgICAgICBjb2xvcjogaW50ZXJwb2xhdG9yKHF1YW50aXplZFZhbHVlKVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE9yZGVyIGFsbCB2YWx1ZXMgaW4gYSBtYXAsIHBlciBjb2xvci5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB2YWx1ZXMgQWxsIGdyaWQgdmFsdWVzIGZvciB3aGljaCB3ZSBzaG91bGQgZGV0ZXJtaW5lIGEgY29sb3IuXG4gICAgICogQHJldHVybiBBIG1hcHBpbmcgYmV0d2VlbiBhbiBIVE1MLWNvbG9yIHZhbHVlIGFuZCBhIGxpc3Qgb2YgW3JvdywgY29sXSBwb3NpdGlvbnMuXG4gICAgICovXG4gICAgb3JkZXJQZXJDb2xvcih2YWx1ZXM6IEhlYXRtYXBWYWx1ZVtdW10pOiBNYXA8c3RyaW5nLCBbbnVtYmVyLCBudW1iZXJdW10+IHtcbiAgICAgICAgY29uc3Qgb3V0cHV0ID0gbmV3IE1hcDxzdHJpbmcsIFtudW1iZXIsIG51bWJlcl1bXT4oKTtcblxuICAgICAgICBmb3IgKGxldCByb3dJZHggPSAwOyByb3dJZHggPCB2YWx1ZXMubGVuZ3RoOyByb3dJZHgrKykge1xuICAgICAgICAgICAgZm9yIChsZXQgY29sSWR4ID0gMDsgY29sSWR4IDwgdmFsdWVzW3Jvd0lkeF0ubGVuZ3RoOyBjb2xJZHgrKykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNvbG9yU3RyaW5nID0gdmFsdWVzW3Jvd0lkeF1bY29sSWR4XS5jb2xvcjtcblxuICAgICAgICAgICAgICAgIGlmICghb3V0cHV0Lmhhcyhjb2xvclN0cmluZykpIHtcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0LnNldChjb2xvclN0cmluZywgW10pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIG91dHB1dC5nZXQoY29sb3JTdHJpbmcpPy5wdXNoKFtyb3dJZHgsIGNvbElkeF0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG91dHB1dDtcbiAgICB9XG59XG4iLCJpbXBvcnQgUmVuZGVySGVscGVyIGZyb20gXCIuL1JlbmRlckhlbHBlclwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDYW52YXNSZW5kZXJIZWxwZXIgaW1wbGVtZW50cyBSZW5kZXJIZWxwZXIge1xuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IGNvbnRleHQ6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRFxuICAgICkge31cblxuICAgIHB1YmxpYyByZW5kZXJMaW5lKHhGcm9tOiBudW1iZXIsIHlGcm9tOiBudW1iZXIsIHhUbzogbnVtYmVyLCB5VG86IG51bWJlciwgd2lkdGg6IG51bWJlciwgY29sb3I6IHN0cmluZyk6IHZvaWQge1xuICAgICAgICB0aGlzLmNvbnRleHQubGluZVdpZHRoID0gd2lkdGg7XG4gICAgICAgIHRoaXMuY29udGV4dC5tb3ZlVG8oeEZyb20sIHlGcm9tKTtcbiAgICAgICAgdGhpcy5jb250ZXh0LmxpbmVUbyh4VG8sIHlUbyk7XG4gICAgICAgIHRoaXMuY29udGV4dC5zdHJva2VTdHlsZSA9IGNvbG9yO1xuICAgICAgICB0aGlzLmNvbnRleHQuc3Ryb2tlKCk7XG4gICAgfVxufVxuIiwiaW1wb3J0ICogYXMgZDMgZnJvbSBcImQzXCI7XHJcbmltcG9ydCBIZWF0bWFwU2V0dGluZ3MgZnJvbSBcIi4vSGVhdG1hcFNldHRpbmdzXCI7XHJcbmltcG9ydCBVUEdNQUNsdXN0ZXJlciBmcm9tIFwiLi9jbHVzdGVyL1VQR01BQ2x1c3RlcmVyXCI7XHJcbmltcG9ydCBFdWNsaWRpYW5EaXN0YW5jZU1ldHJpYyBmcm9tIFwiLi9tZXRyaWMvRXVjbGlkaWFuRGlzdGFuY2VNZXRyaWNcIjtcclxuaW1wb3J0IENsdXN0ZXJFbGVtZW50IGZyb20gXCIuL2NsdXN0ZXIvQ2x1c3RlckVsZW1lbnRcIjtcclxuaW1wb3J0IFRyZWVOb2RlIGZyb20gXCIuL2NsdXN0ZXIvVHJlZU5vZGVcIjtcclxuaW1wb3J0IFJlb3JkZXJlciBmcm9tIFwiLi9yZW9yZGVyL1Jlb3JkZXJlclwiO1xyXG5pbXBvcnQgTW9sb1Jlb3JkZXJlciBmcm9tIFwiLi9yZW9yZGVyL01vbG9SZW9yZGVyZXJcIjtcclxuaW1wb3J0IEhlYXRtYXBGZWF0dXJlIGZyb20gXCIuL0hlYXRtYXBGZWF0dXJlXCI7XHJcbmltcG9ydCBIZWF0bWFwVmFsdWUgZnJvbSBcIi4vSGVhdG1hcFZhbHVlXCI7XHJcbmltcG9ydCBQcmVwcm9jZXNzb3IgZnJvbSBcIi4vUHJlcHJvY2Vzc29yXCI7XHJcblxyXG5pbXBvcnQgXCJjb3JlLWpzL3N0YWJsZVwiO1xyXG5pbXBvcnQgXCJyZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWVcIjtcclxuaW1wb3J0IENhbnZhc1JlbmRlckhlbHBlciBmcm9tIFwiLi8uLi8uLi9yZW5kZXIvQ2FudmFzUmVuZGVySGVscGVyXCI7XHJcbmltcG9ydCBSZW5kZXJIZWxwZXIgZnJvbSBcIi4vLi4vLi4vcmVuZGVyL1JlbmRlckhlbHBlclwiO1xyXG5cclxudHlwZSBWaWV3UG9ydCA9IHtcclxuICAgIHhUb3A6IG51bWJlcixcclxuICAgIHlUb3A6IG51bWJlcixcclxuICAgIHhCb3R0b206IG51bWJlcixcclxuICAgIHlCb3R0b206IG51bWJlclxyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSGVhdG1hcCB7XHJcbiAgICBwcml2YXRlIGVsZW1lbnQ6IEhUTUxFbGVtZW50O1xyXG4gICAgcHJpdmF0ZSBzZXR0aW5nczogSGVhdG1hcFNldHRpbmdzO1xyXG5cclxuICAgIHByaXZhdGUgcm93czogSGVhdG1hcEZlYXR1cmVbXTtcclxuICAgIHByaXZhdGUgY29sdW1uczogSGVhdG1hcEZlYXR1cmVbXTtcclxuICAgIHByaXZhdGUgdmFsdWVzOiBIZWF0bWFwVmFsdWVbXVtdO1xyXG4gICAgcHJpdmF0ZSB2YWx1ZXNQZXJDb2xvcjogTWFwPHN0cmluZywgW251bWJlciwgbnVtYmVyXVtdPjtcclxuXHJcbiAgICAvLyBwcml2YXRlIHRvb2x0aXA6IGQzLlNlbGVjdGlvbjxIVE1MRGl2RWxlbWVudCwgYW55LCBIVE1MRWxlbWVudCwgYW55PiB8IG51bGwgPSBudWxsO1xyXG5cclxuICAgIHByaXZhdGUgb3JpZ2luYWxWaWV3UG9ydDogVmlld1BvcnQ7XHJcbiAgICBwcml2YXRlIGN1cnJlbnRWaWV3UG9ydDogVmlld1BvcnQ7XHJcblxyXG4gICAgcHJpdmF0ZSB2aXNFbGVtZW50OiBkMy5TZWxlY3Rpb248SFRNTENhbnZhc0VsZW1lbnQsIHVua25vd24sIEhUTUxFbGVtZW50LCBhbnk+O1xyXG4gICAgcHJpdmF0ZSBjb250ZXh0OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQ7XHJcblxyXG4gICAgLy8gV2hpY2ggcG9ydGlvbiBvZiB0aGUgdmlzdWFsaXNhdGlvbiBpcyBjdXJyZW50bHkgcmVzZXJ2ZWQgZm9yIHRoZSB0ZXh0P1xyXG4gICAgcHJpdmF0ZSB0ZXh0V2lkdGg6IG51bWJlcjtcclxuICAgIHByaXZhdGUgdGV4dEhlaWdodDogbnVtYmVyO1xyXG5cclxuICAgIHByaXZhdGUgdG9vbHRpcDogZDMuU2VsZWN0aW9uPEhUTUxEaXZFbGVtZW50LCB1bmtub3duLCBIVE1MRWxlbWVudCwgYW55PiB8IG51bGwgPSBudWxsO1xyXG5cclxuICAgIHByaXZhdGUgaGlnaGxpZ2h0ZWRSb3c6IG51bWJlciA9IC0xO1xyXG4gICAgcHJpdmF0ZSBoaWdobGlnaHRlZENvbHVtbjogbnVtYmVyID0gLTE7XHJcblxyXG4gICAgcHJpdmF0ZSBwaXhlbFJhdGlvOiBudW1iZXI7XHJcblxyXG4gICAgcHJpdmF0ZSByb3dDbHVzdGVyUm9vdCE6IFRyZWVOb2RlO1xyXG4gICAgcHJpdmF0ZSBjb2xDbHVzdGVyUm9vdCE6IFRyZWVOb2RlO1xyXG4gICAgcHJpdmF0ZSBob3Jpem9udGFsTm9kZXNQZXJEZXB0aCE6IFRyZWVOb2RlW11bXTtcclxuICAgIHByaXZhdGUgdmVydGljYWxOb2Rlc1BlckRlcHRoITogVHJlZU5vZGVbXVtdO1xyXG5cclxuICAgIHByaXZhdGUgYW5pbWF0aW5nUm93czogYm9vbGVhbiA9IGZhbHNlO1xyXG4gICAgcHJpdmF0ZSBhbmltYXRpbmdDb2xzOiBib29sZWFuID0gZmFsc2U7XHJcblxyXG4gICAgcHJpdmF0ZSBjbHVzdGVyZWRIb3Jpem9udGFsOiBib29sZWFuID0gZmFsc2U7XHJcbiAgICBwcml2YXRlIGNsdXN0ZXJlZFZlcnRpY2FsOiBib29sZWFuID0gZmFsc2U7XHJcblxyXG4gICAgcHJpdmF0ZSBsYXN0Wm9vbVN0YXR1czogeyBrOiBudW1iZXIsIHg6IG51bWJlciwgeTogbnVtYmVyIH0gPSB7XHJcbiAgICAgICAgazogMSxcclxuICAgICAgICB4OiAwLFxyXG4gICAgICAgIHk6IDBcclxuICAgIH07XHJcblxyXG4gICAgY29uc3RydWN0b3IoXHJcbiAgICAgICAgZWxlbWVudElkZW50aWZpZXI6IEhUTUxFbGVtZW50LFxyXG4gICAgICAgIHZhbHVlczogbnVtYmVyW11bXSxcclxuICAgICAgICByb3dMYWJlbHM6IHN0cmluZ1tdLFxyXG4gICAgICAgIGNvbHVtbkxhYmVsczogc3RyaW5nW10sXHJcbiAgICAgICAgb3B0aW9uczogSGVhdG1hcFNldHRpbmdzID0gbmV3IEhlYXRtYXBTZXR0aW5ncygpXHJcbiAgICApIHtcclxuICAgICAgICB0aGlzLnNldHRpbmdzID0gdGhpcy5maWxsT3B0aW9ucyhvcHRpb25zKTtcclxuXHJcbiAgICAgICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudElkZW50aWZpZXI7XHJcblxyXG4gICAgICAgIGNvbnN0IHByZXByb2Nlc3NvciA9IG5ldyBQcmVwcm9jZXNzb3IoKTtcclxuICAgICAgICB0aGlzLnJvd3MgPSBwcmVwcm9jZXNzb3IucHJlcHJvY2Vzc0ZlYXR1cmVzKHJvd0xhYmVscyk7XHJcbiAgICAgICAgdGhpcy5jb2x1bW5zID0gcHJlcHJvY2Vzc29yLnByZXByb2Nlc3NGZWF0dXJlcyhjb2x1bW5MYWJlbHMpO1xyXG5cclxuICAgICAgICB0aGlzLnZhbHVlcyA9IHByZXByb2Nlc3Nvci5wcmVwcm9jZXNzVmFsdWVzKFxyXG4gICAgICAgICAgICB2YWx1ZXMsXHJcbiAgICAgICAgICAgIHRoaXMuc2V0dGluZ3MubWluQ29sb3IsXHJcbiAgICAgICAgICAgIHRoaXMuc2V0dGluZ3MubWF4Q29sb3IsXHJcbiAgICAgICAgICAgIHRoaXMuc2V0dGluZ3MuY29sb3JCdWNrZXRzXHJcbiAgICAgICAgKTtcclxuICAgICAgICB0aGlzLnZhbHVlc1BlckNvbG9yID0gcHJlcHJvY2Vzc29yLm9yZGVyUGVyQ29sb3IodGhpcy52YWx1ZXMpO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5lbmFibGVUb29sdGlwcykge1xyXG4gICAgICAgICAgICB0aGlzLnRvb2x0aXAgPSB0aGlzLmluaXRUb29sdGlwKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLnBpeGVsUmF0aW8gPSB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyB8fCAxO1xyXG5cclxuICAgICAgICAvLyBJbml0aWFsaXplIHRoZSB2aWV3cG9ydCB3aXRoIHRoZSBkZWZhdWx0IHdpZHRoIGFuZCBoZWlnaHQgb2YgdGhlIHZpc3VhbGl6YXRpb25cclxuICAgICAgICB0aGlzLm9yaWdpbmFsVmlld1BvcnQgPSB7XHJcbiAgICAgICAgICAgIHhUb3A6IDAsXHJcbiAgICAgICAgICAgIHlUb3A6IDAsXHJcbiAgICAgICAgICAgIHhCb3R0b206IHRoaXMuc2V0dGluZ3Mud2lkdGgsXHJcbiAgICAgICAgICAgIHlCb3R0b206IHRoaXMuc2V0dGluZ3MuaGVpZ2h0XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmN1cnJlbnRWaWV3UG9ydCA9IHRoaXMub3JpZ2luYWxWaWV3UG9ydDtcclxuXHJcbiAgICAgICAgdGhpcy50ZXh0V2lkdGggPSB0aGlzLnNldHRpbmdzLmluaXRpYWxUZXh0V2lkdGg7XHJcbiAgICAgICAgdGhpcy50ZXh0SGVpZ2h0ID0gdGhpcy5zZXR0aW5ncy5pbml0aWFsVGV4dEhlaWdodDtcclxuXHJcbiAgICAgICAgLy8gQWRkIGEgY2FudmFzIHRvIHRoZSBkZXNpcmVkIGVsZW1lbnQgYW5kIHNldCBpdCdzIHJlcXVpcmVkIHByb3BlcnRpZXNcclxuICAgICAgICB0aGlzLmVsZW1lbnQuaW5uZXJIVE1MID0gXCJcIjtcclxuXHJcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgIHRoaXMudmlzRWxlbWVudCA9IGQzLnNlbGVjdCh0aGlzLmVsZW1lbnQpXHJcbiAgICAgICAgICAgIC5hcHBlbmQoXCJjYW52YXNcIilcclxuICAgICAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCB0aGlzLnBpeGVsUmF0aW8gKiB0aGlzLnNldHRpbmdzLndpZHRoKVxyXG4gICAgICAgICAgICAuYXR0cihcImhlaWdodFwiLCB0aGlzLnBpeGVsUmF0aW8gKiB0aGlzLnNldHRpbmdzLmhlaWdodClcclxuICAgICAgICAgICAgLmF0dHIoXCJzdHlsZVwiLCBgd2lkdGg6ICR7dGhpcy5zZXR0aW5ncy53aWR0aH1weDsgaGVpZ2h0OiAke3RoaXMuc2V0dGluZ3MuaGVpZ2h0fXB4YClcclxuICAgICAgICAgICAgLm9uKFwibW91c2VvdmVyXCIsIChldmVudDogTW91c2VFdmVudCkgPT4gdGhpcy50b29sdGlwTW92ZShldmVudCkpXHJcbiAgICAgICAgICAgIC5vbihcIm1vdXNlbW92ZVwiLCAoZXZlbnQ6IE1vdXNlRXZlbnQpID0+IHRoaXMudG9vbHRpcE1vdmUoZXZlbnQpKVxyXG4gICAgICAgICAgICAub24oXCJtb3VzZW91dFwiLCAoZXZlbnQ6IE1vdXNlRXZlbnQpID0+IHRoaXMudG9vbHRpcE1vdmUoZXZlbnQpKVxyXG4gICAgICAgICAgICAub24oXCJjbGlja1wiLCAoZXZlbnQ6IE1vdXNlRXZlbnQpID0+IHRoaXMuY2xpY2soZXZlbnQpKTtcclxuICAgICAgICB0aGlzLmNvbnRleHQgPSB0aGlzLnZpc0VsZW1lbnQubm9kZSgpIS5nZXRDb250ZXh0KFwiMmRcIikhO1xyXG4gICAgICAgIHRoaXMuY29udGV4dC5zY2FsZSh0aGlzLnBpeGVsUmF0aW8sIHRoaXMucGl4ZWxSYXRpbyk7XHJcblxyXG4gICAgICAgIGNvbnN0IHpvb20gPSBkMy56b29tKClcclxuICAgICAgICAgICAgLmV4dGVudChbWzAsIDBdLCBbdGhpcy5zZXR0aW5ncy53aWR0aCwgdGhpcy5zZXR0aW5ncy5oZWlnaHRdXSlcclxuICAgICAgICAgICAgLnNjYWxlRXh0ZW50KFswLjI1LCAxMl0pXHJcbiAgICAgICAgICAgIC5vbihcInpvb21cIiwgKGV2ZW50OiBkMy5EM1pvb21FdmVudDxhbnksIGFueT4pID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuem9vbWVkKGV2ZW50LnRyYW5zZm9ybSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgdGhpcy52aXNFbGVtZW50LmNhbGwoem9vbSk7XHJcblxyXG4gICAgICAgIHRoaXMuY29tcHV0ZUNsdXN0ZXJSb290cygpO1xyXG5cclxuICAgICAgICB0aGlzLnJlZHJhdygpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgZmlsbE9wdGlvbnMob3B0aW9uczogYW55ID0gdW5kZWZpbmVkKTogSGVhdG1hcFNldHRpbmdzIHtcclxuICAgICAgICBsZXQgb3V0cHV0ID0gbmV3IEhlYXRtYXBTZXR0aW5ncygpO1xyXG4gICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKG91dHB1dCwgb3B0aW9ucyk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXNldCB0aGUgY29tcGxldGUgdmlldyB0byBpdCdzIGluaXRpYWwgc3RhdGUgd2l0aCB0aGUgb3B0aW9ucyBhbmQgZGF0YSBwYXNzZWQgaW4gdGhlIGNvbnN0cnVjdG9yLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgcmVzZXQoKSB7XHJcbiAgICAgICAgdGhpcy5yZWRyYXcoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIENsdXN0ZXIgdGhlIGRhdGEgZm91bmQgaW4gdGhlIEhlYXRtYXAgYWNjb3JkaW5nIHRvIHRoZSBkZWZhdWx0IGNsdXN0ZXJpbmcgYWxnb3JpdGhtLlxyXG4gICAgICogQHBhcmFtIHRvQ2x1c3RlciBPbmUgb2YgXCJhbGxcIiwgXCJjb2x1bW5zXCIgb3IgXCJyb3dzXCIuIFwiQWxsXCIgZGVub3RlcyB0aGF0IGNsdXN0ZXJpbmcgb24gYm90aCB0aGUgcm93cyBhbmQgY29sdW1uc1xyXG4gICAgICogc2hvdWxkIGJlIHBlcmZvcm1lZC4gXCJDb2x1bW5zXCIgZGVub3RlcyB0aGF0IGNsdXN0ZXJpbmcgc2hvdWxkIG9ubHkgYmUgY2x1c3RlcmVkIG9uIHRoZSBjb2x1bW5zIG9ubHkuIFwiUm93c1wiXHJcbiAgICAgKiBkZW5vdGVzIHRoYXQgdGhlIGNsdXN0ZXJpbmcgaXMgcGVyZm9ybWVkIG9uIHRoZSByb3dzIG9ubHkuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBhc3luYyBjbHVzdGVyKHRvQ2x1c3RlcjogXCJhbGxcIiB8IFwiY29sdW1uc1wiIHwgXCJyb3dzXCIgfCBcIm5vbmVcIiA9IFwiYWxsXCIpIHtcclxuICAgICAgICBjb25zdCBhbmltYXRpb25EdXJhdGlvbiA9IHRoaXMuc2V0dGluZ3MuYW5pbWF0aW9uc0VuYWJsZWQgPyB0aGlzLnNldHRpbmdzLmFuaW1hdGlvbkR1cmF0aW9uIC8gMiA6IDA7XHJcblxyXG4gICAgICAgIC8vIEZ1bmN0aW9uIHRoYXQgYW5pbWF0ZXMgdGhlIG1vdmVtZW50IG9mIHRoZSByb3dzIGFuZCBjb2x1bW5zXHJcbiAgICAgICAgY29uc3QgY3JlYXRlQW5pbWF0b3IgPSAocm93T3JkZXI6IG51bWJlcltdLCBjb2x1bW5PcmRlcjogbnVtYmVyW10pID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlPHZvaWQ+KChyZXNvbHZlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBsZXQgYW5pbWF0aW9uU3RhcnQ6IG51bWJlcjtcclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCBhbmltYXRlUm93cyA9ICh0aW1lc3RhbXA6IG51bWJlcikgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChhbmltYXRpb25TdGFydCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFuaW1hdGlvblN0YXJ0ID0gdGltZXN0YW1wO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBlbGFwc2VkID0gdGltZXN0YW1wIC0gYW5pbWF0aW9uU3RhcnQ7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGFuaW1hdGlvblN0ZXAgPSB0aGlzLnNldHRpbmdzLnRyYW5zaXRpb24oZWxhcHNlZCAvIGFuaW1hdGlvbkR1cmF0aW9uKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlZHJhdyhyb3dPcmRlciwgY29sdW1uT3JkZXIsIGFuaW1hdGlvblN0ZXApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoZWxhcHNlZCA8IGFuaW1hdGlvbkR1cmF0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShhbmltYXRlUm93cyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGFuaW1hdGVSb3dzKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBwcmVwcm9jZXNzb3IgPSBuZXcgUHJlcHJvY2Vzc29yKCk7XHJcblxyXG4gICAgICAgIGxldCByb3dPcmRlcjogbnVtYmVyW10gPSBBcnJheS5mcm9tKEFycmF5KHRoaXMucm93cy5sZW5ndGgpLmtleXMoKSlcclxuICAgICAgICBsZXQgaW52ZXJzZVJvd09yZGVyOiBudW1iZXJbXSA9IG5ldyBBcnJheShyb3dPcmRlci5sZW5ndGgpO1xyXG5cclxuICAgICAgICBpZiAoKHRvQ2x1c3RlciA9PT0gXCJhbGxcIiB8fCB0b0NsdXN0ZXIgPT09IFwicm93c1wiKSAmJiAhdGhpcy5jbHVzdGVyZWRWZXJ0aWNhbCkge1xyXG4gICAgICAgICAgICB0aGlzLmNsdXN0ZXJlZFZlcnRpY2FsID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgIC8vIE5vdyB3ZSBwZXJmb3JtIGEgZGVwdGggZmlyc3Qgc2VhcmNoIG9uIHRoZSByZXN1bHQgaW4gb3JkZXIgdG8gZmluZCB0aGUgb3JkZXIgb2YgdGhlIHZhbHVlc1xyXG4gICAgICAgICAgICByb3dPcmRlciA9IHRoaXMuZGV0ZXJtaW5lT3JkZXIodGhpcy5yb3dDbHVzdGVyUm9vdCk7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgW2lkeCwgcm93XSBvZiBPYmplY3QuZW50cmllcyhyb3dPcmRlcikpIHtcclxuICAgICAgICAgICAgICAgIGludmVyc2VSb3dPcmRlcltyb3ddID0gTnVtYmVyLnBhcnNlSW50KGlkeCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIEZpcnN0IGFuaW1hdGUgcm93c1xyXG4gICAgICAgICAgICBjb25zdCBjb2x1bW5JZGVudGl0eSA9IEFycmF5LmZyb20oQXJyYXkodGhpcy5jb2x1bW5zLmxlbmd0aCkua2V5cygpKTtcclxuICAgICAgICAgICAgdGhpcy5hbmltYXRpbmdSb3dzID0gdHJ1ZTtcclxuICAgICAgICAgICAgYXdhaXQgY3JlYXRlQW5pbWF0b3IoaW52ZXJzZVJvd09yZGVyLCBjb2x1bW5JZGVudGl0eSk7XHJcbiAgICAgICAgICAgIHRoaXMuYW5pbWF0aW5nUm93cyA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgbGV0IG5ld1ZhbHVlcyA9IFtdO1xyXG4gICAgICAgICAgICAvLyBTd2FwIHJvd3MgaW50byB0aGUgY29ycmVjdCBwb3NpdGlvblxyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IHJvdyBvZiByb3dPcmRlcikge1xyXG4gICAgICAgICAgICAgICAgbmV3VmFsdWVzLnB1c2godGhpcy52YWx1ZXNbcm93XSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIFN3YXAgcm93IHRpdGxlc1xyXG4gICAgICAgICAgICBjb25zdCBuZXdSb3dUaXRsZXMgPSBbXTtcclxuICAgICAgICAgICAgZm9yIChjb25zdCByb3cgb2Ygcm93T3JkZXIpIHtcclxuICAgICAgICAgICAgICAgIG5ld1Jvd1RpdGxlcy5wdXNoKHRoaXMucm93c1tyb3ddKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5yb3dzID0gbmV3Um93VGl0bGVzO1xyXG4gICAgICAgICAgICB0aGlzLnZhbHVlcyA9IG5ld1ZhbHVlcztcclxuICAgICAgICAgICAgdGhpcy52YWx1ZXNQZXJDb2xvciA9IHByZXByb2Nlc3Nvci5vcmRlclBlckNvbG9yKHRoaXMudmFsdWVzKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBjb2x1bW5PcmRlcjogbnVtYmVyW10gPSBBcnJheS5mcm9tKEFycmF5KHRoaXMuY29sdW1ucy5sZW5ndGgpLmtleXMoKSlcclxuICAgICAgICBsZXQgaW52ZXJzZUNvbHVtbk9yZGVyOiBudW1iZXJbXSA9IG5ldyBBcnJheShjb2x1bW5PcmRlci5sZW5ndGgpO1xyXG5cclxuICAgICAgICBpZiAoKHRvQ2x1c3RlciA9PT0gXCJhbGxcIiB8fCB0b0NsdXN0ZXIgPT09IFwiY29sdW1uc1wiKSAmJiAhdGhpcy5jbHVzdGVyZWRIb3Jpem9udGFsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2x1c3RlcmVkSG9yaXpvbnRhbCA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICBjb2x1bW5PcmRlciA9IHRoaXMuZGV0ZXJtaW5lT3JkZXIodGhpcy5jb2xDbHVzdGVyUm9vdCk7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgW2lkeCwgY29sXSBvZiBPYmplY3QuZW50cmllcyhjb2x1bW5PcmRlcikpIHtcclxuICAgICAgICAgICAgICAgIGludmVyc2VDb2x1bW5PcmRlcltjb2xdID0gTnVtYmVyLnBhcnNlSW50KGlkeCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIFRoZW4gYW5pbWF0ZSBjb2x1bW5zXHJcbiAgICAgICAgICAgIGNvbnN0IHJvd0lkZW50aXR5ID0gQXJyYXkuZnJvbShBcnJheSh0aGlzLnJvd3MubGVuZ3RoKS5rZXlzKCkpO1xyXG4gICAgICAgICAgICB0aGlzLmFuaW1hdGluZ0NvbHMgPSB0cnVlO1xyXG4gICAgICAgICAgICBhd2FpdCBjcmVhdGVBbmltYXRvcihyb3dJZGVudGl0eSwgaW52ZXJzZUNvbHVtbk9yZGVyKTtcclxuICAgICAgICAgICAgdGhpcy5hbmltYXRpbmdDb2xzID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICBsZXQgbmV3VmFsdWVzID0gW107XHJcbiAgICAgICAgICAgIC8vIFN3YXAgY29sdW1uc1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IHJvdyBvZiByb3dJZGVudGl0eSkge1xyXG4gICAgICAgICAgICAgICAgbGV0IG5ld1JvdzogSGVhdG1hcFZhbHVlW10gPSBbXTtcclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgY29sdW1uIG9mIGNvbHVtbk9yZGVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbmV3Um93LnB1c2godGhpcy52YWx1ZXNbcm93XVtjb2x1bW5dKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIG5ld1ZhbHVlcy5wdXNoKG5ld1Jvdyk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIFN3YXAgY29sdW1uIHRpdGxlc1xyXG4gICAgICAgICAgICBjb25zdCBuZXdDb2x1bW5UaXRsZXMgPSBbXTtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBjb2wgb2YgY29sdW1uT3JkZXIpIHtcclxuICAgICAgICAgICAgICAgIG5ld0NvbHVtblRpdGxlcy5wdXNoKHRoaXMuY29sdW1uc1tjb2xdKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5jb2x1bW5zID0gbmV3Q29sdW1uVGl0bGVzO1xyXG4gICAgICAgICAgICB0aGlzLnZhbHVlcyA9IG5ld1ZhbHVlcztcclxuICAgICAgICAgICAgdGhpcy52YWx1ZXNQZXJDb2xvciA9IHByZXByb2Nlc3Nvci5vcmRlclBlckNvbG9yKHRoaXMudmFsdWVzKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMucmVkcmF3KCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBjb21wdXRlQ2x1c3RlclJvb3RzKCkge1xyXG4gICAgICAgIGxldCBjbHVzdGVyZXIgPSB0aGlzLnNldHRpbmdzLmNsdXN0ZXJpbmdBbGdvcml0aG07XHJcbiAgICAgICAgbGV0IG1vbG86IFJlb3JkZXJlciA9IHRoaXMuc2V0dGluZ3MucmVvcmRlcmVyO1xyXG5cclxuICAgICAgICAvLyBDcmVhdGUgYSBuZXcgQ2x1c3RlckVsZW1lbnQgZm9yIGV2ZXJ5IHJvdyB0aGF0IGV4aXN0cy4gVGhpcyBDbHVzdGVyRWxlbWVudCBrZWVwcyB0cmFjayBvZiBhbiBhcnJheSBvZlxyXG4gICAgICAgIC8vIG51bWJlcnMgdGhhdCBjb3JyZXNwb25kIHRvIGEgcm93J3MgdmFsdWVzLlxyXG4gICAgICAgIGxldCByb3dFbGVtZW50czogQ2x1c3RlckVsZW1lbnRbXSA9IHRoaXMucm93cy5tYXAoKGVsLCBpZHgpID0+IG5ldyBDbHVzdGVyRWxlbWVudChcclxuICAgICAgICAgICAgdGhpcy52YWx1ZXNbaWR4XS5maWx0ZXIodmFsID0+IHZhbC5yb3dJZCA9PSBlbC5pZHgpLm1hcCh4ID0+IHgudmFsdWUpLCBlbC5pZHghKVxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIHRoaXMucm93Q2x1c3RlclJvb3QgPSBtb2xvLnJlb3JkZXIoY2x1c3RlcmVyLmNsdXN0ZXIocm93RWxlbWVudHMpKTtcclxuICAgICAgICB0aGlzLnZlcnRpY2FsTm9kZXNQZXJEZXB0aCA9IHRoaXMuYmZzTm9kZXNQZXJEZXB0aCh0aGlzLnJvd0NsdXN0ZXJSb290KTtcclxuXHJcbiAgICAgICAgLy8gQ3JlYXRlIGEgbmV3IENsdXN0ZXJFbGVtZW50IGZvciBldmVyeSBjb2x1bW4gdGhhdCBleGlzdHMuXHJcbiAgICAgICAgbGV0IGNvbHVtbkVsZW1lbnRzOiBDbHVzdGVyRWxlbWVudFtdID0gdGhpcy5jb2x1bW5zLm1hcChcclxuICAgICAgICAgICAgKGVsLCBpZHgpID0+IG5ldyBDbHVzdGVyRWxlbWVudChcclxuICAgICAgICAgICAgICAgIHRoaXMudmFsdWVzLm1hcChjb2wgPT4gY29sW2lkeF0udmFsdWUpLFxyXG4gICAgICAgICAgICAgICAgZWwuaWR4IVxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgICAgdGhpcy5jb2xDbHVzdGVyUm9vdCA9IG1vbG8ucmVvcmRlcihjbHVzdGVyZXIuY2x1c3Rlcihjb2x1bW5FbGVtZW50cykpO1xyXG4gICAgICAgIHRoaXMuaG9yaXpvbnRhbE5vZGVzUGVyRGVwdGggPSB0aGlzLmJmc05vZGVzUGVyRGVwdGgodGhpcy5jb2xDbHVzdGVyUm9vdCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHJlc2l6ZShuZXdXaWR0aDogbnVtYmVyLCBuZXdIZWlnaHQ6IG51bWJlcikge1xyXG4gICAgICAgIHRoaXMuc2V0dGluZ3Mud2lkdGggPSBuZXdXaWR0aDtcclxuICAgICAgICB0aGlzLnNldHRpbmdzLmhlaWdodCA9IG5ld0hlaWdodDtcclxuXHJcbiAgICAgICAgdGhpcy52aXNFbGVtZW50LmF0dHIoXCJoZWlnaHRcIiwgdGhpcy5waXhlbFJhdGlvICogbmV3SGVpZ2h0KTtcclxuICAgICAgICB0aGlzLnZpc0VsZW1lbnQuYXR0cihcIndpZHRoXCIsIHRoaXMucGl4ZWxSYXRpbyAqIG5ld1dpZHRoKTtcclxuICAgICAgICB0aGlzLnZpc0VsZW1lbnQuYXR0cihcInN0eWxlXCIsIGB3aWR0aDogJHt0aGlzLnNldHRpbmdzLndpZHRofXB4OyBoZWlnaHQ6ICR7dGhpcy5zZXR0aW5ncy5oZWlnaHR9cHhgKTtcclxuICAgICAgICB0aGlzLmNvbnRleHQuc2NhbGUodGhpcy5waXhlbFJhdGlvLCB0aGlzLnBpeGVsUmF0aW8pO1xyXG5cclxuICAgICAgICB0aGlzLm9yaWdpbmFsVmlld1BvcnQgPSB7XHJcbiAgICAgICAgICAgIHhUb3A6IDAsXHJcbiAgICAgICAgICAgIHlUb3A6IDAsXHJcbiAgICAgICAgICAgIHhCb3R0b206IG5ld1dpZHRoLFxyXG4gICAgICAgICAgICB5Qm90dG9tOiBuZXdIZWlnaHRcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuem9vbWVkKHRoaXMubGFzdFpvb21TdGF0dXMpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ29udmVydCB0aGUgaGVhdG1hcCB0byBhbiBTVkctc3RyaW5nIHRoYXQgY2FuIGVhc2lseSBiZSBkb3dubG9hZGVkIGFzIGEgdmFsaWQgU1ZHLWZpbGUuIE5vdGUgdGhhdCB0aGUgY3VycmVudFxyXG4gICAgICogcG9zaXRpb25pbmcgYW5kIHpvb21pbmcgbGV2ZWwgb2YgdGhlIGhlYXRtYXAgd2lsbCBub3QgYmUgdGFrZW4gaW50byBhY2NvdW50IChidXQgY2x1c3RlcmluZyB3aWxsISkuXHJcbiAgICAgKlxyXG4gICAgICogTm90ZSB0aGF0IHRoaXMgZnVuY3Rpb24gY2FuIHRha2UgYSB3aGlsZSB0byBjb21wdXRlIGZvciBsYXJnZXIgaGVhdG1hcHMuIEl0IGlzIHJlY29tbWVuZGVkIHRvIHN0YXJ0IHRoaXNcclxuICAgICAqIGZ1bmN0aW9uIGluIGEgZGVkaWNhdGVkIHdvcmtlciBpbiBvcmRlciBub3QgdG8gYmxvY2sgdGhlIG1haW4gSlMgdGhyZWFkLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBmb250U2l6ZSBGb250IHNpemUgdGhhdCBzaG91bGQgYmUgdXNlZCBmb3IgdGhlIGxhYmVscyBpbiB0aGUgcHJvZHVjZWQgU1ZHIGZpbGUuXHJcbiAgICAgKiBAcGFyYW0gc3F1YXJlRGltZW5zaW9uIHdpZHRoIGFuZCBoZWlnaHQgKGluIHBpeGVscykgb2Ygb25lIHNxdWFyZSBpbiB0aGUgcHJvZHVjZWQgaGVhdG1hcC5cclxuICAgICAqIEBwYXJhbSBzcXVhcmVQYWRkaW5nIEFtb3VudCBvZiBzcGFjZSBiZXR3ZWVuIHNxdWFyZXMgaW4gYm90aCB0aGUgaG9yaXpvbnRhbCBhbmQgdmVydGljYWwgZGlyZWN0aW9uIChpbiBwaXhlbHMpLlxyXG4gICAgICogQHBhcmFtIHZpc3VhbGl6YXRpb25UZXh0UGFkZGluZyBBbW91bnQgb2Ygc3BhY2UgYmV0d2VlbiB0aGUgaGVhdG1hcCBpdHNlbGYgYW5kIHRoZSBsYWJlbHMgb24gYm90aCBheGVzLlxyXG4gICAgICogQHJldHVybiBBIHN0cmluZyB0aGF0IHJlcHJlc2VudHMgdGhlIGNvbnRlbnQgb2YgYSB2YWxpZCBTVkcgZmlsZS5cclxuICAgICAqL1xyXG4gICAgcHVibGljIHRvU1ZHKFxyXG4gICAgICAgIGZvbnRTaXplOiBudW1iZXIgPSAxNCxcclxuICAgICAgICBzcXVhcmVEaW1lbnNpb246IG51bWJlciA9IDIwLFxyXG4gICAgICAgIHNxdWFyZVBhZGRpbmc6IG51bWJlciA9IDIsXHJcbiAgICAgICAgdmlzdWFsaXphdGlvblRleHRQYWRkaW5nOiBudW1iZXIgPSA0XHJcbiAgICApOiBzdHJpbmcge1xyXG4gICAgICAgIGNvbnN0IGRpbWVuc2lvbiA9IHNxdWFyZURpbWVuc2lvbjtcclxuXHJcbiAgICAgICAgbGV0IHN2Z0NvbnRlbnRzID0gXCJcIjtcclxuXHJcbiAgICAgICAgLy8gRmlyc3QgcHJvZHVjZSBTVkctY29udGVudHMgZm9yIGFsbCBzcXVhcmVzIGluIHRoZSBoZWF0bWFwXHJcbiAgICAgICAgZm9yIChjb25zdCBbY29sb3IsIHZhbHVlc10gb2YgdGhpcy52YWx1ZXNQZXJDb2xvcikge1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IFtyb3csIGNvbF0gb2YgdmFsdWVzKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB4VG9wID0gY29sICogKGRpbWVuc2lvbiArIHNxdWFyZVBhZGRpbmcpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgeVRvcCA9IHJvdyAqIChkaW1lbnNpb24gKyBzcXVhcmVQYWRkaW5nKTtcclxuXHJcbiAgICAgICAgICAgICAgICBzdmdDb250ZW50cyArPSBgXHJcbiAgICAgICAgICAgICAgICAgICAgPHJlY3Qgd2lkdGg9XCIke2RpbWVuc2lvbn1cIiBoZWlnaHQ9XCIke2RpbWVuc2lvbn1cIiBmaWxsPVwiJHtjb2xvcn1cIiB4PVwiJHt4VG9wfVwiIHk9XCIke3lUb3B9XCI+PC9yZWN0PlxyXG4gICAgICAgICAgICAgICAgYFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBvZmZzY3JlZW5DYW52YXMgPSBuZXcgT2Zmc2NyZWVuQ2FudmFzKDEsIDEpO1xyXG4gICAgICAgIGNvbnN0IGN0eCA9IG9mZnNjcmVlbkNhbnZhcy5nZXRDb250ZXh0KFwiMmRcIik7XHJcblxyXG4gICAgICAgIGN0eCEuZm9udCA9IGAke2ZvbnRTaXplfXB4ICdIZWx2ZXRpY2EgTmV1ZScsIEhlbHZldGljYSwgQXJpYWwsIHNhbnMtc2VyaWZgO1xyXG5cclxuICAgICAgICAvLyBUaGVuIGFkZCB0aGUgcm93IGFuZCBjb2x1bSB0aXRsZXMgdG8gdGhlIGhlYXRtYXBcclxuICAgICAgICBjb25zdCB4ID0gZGltZW5zaW9uICogdGhpcy5jb2x1bW5zLmxlbmd0aCArIHNxdWFyZVBhZGRpbmcgKiAodGhpcy5jb2x1bW5zLmxlbmd0aCAtIDEpICsgdmlzdWFsaXphdGlvblRleHRQYWRkaW5nO1xyXG4gICAgICAgIGNvbnN0IHRleHRDZW50ZXIgPSBNYXRoLm1heCgoZGltZW5zaW9uIC0gZm9udFNpemUpIC8gMiwgMCk7XHJcblxyXG4gICAgICAgIGxldCBtYXhpbXVtV2lkdGg6IG51bWJlciA9IHg7XHJcbiAgICAgICAgZm9yIChsZXQgcm93ID0gMDsgcm93IDwgdGhpcy5yb3dzLmxlbmd0aDsgcm93KyspIHtcclxuICAgICAgICAgICAgY29uc3QgeSA9IChkaW1lbnNpb24gKyBzcXVhcmVQYWRkaW5nKSAqIHJvdyArIHRleHRDZW50ZXI7XHJcblxyXG4gICAgICAgICAgICBzdmdDb250ZW50cyArPSBgXHJcbiAgICAgICAgICAgICAgICA8dGV4dCBcclxuICAgICAgICAgICAgICAgICAgICB4PVwiJHt4fVwiIFxyXG4gICAgICAgICAgICAgICAgICAgIHk9XCIke3l9XCIgXHJcbiAgICAgICAgICAgICAgICAgICAgZm9udC1zaXplPVwiJHtmb250U2l6ZX1cIiBcclxuICAgICAgICAgICAgICAgICAgICBkb21pbmFudC1iYXNlbGluZT1cImhhbmdpbmdcIiBcclxuICAgICAgICAgICAgICAgICAgICBmaWxsPVwiYmxhY2tcIlxyXG4gICAgICAgICAgICAgICAgICAgIGZvbnQtZmFtaWx5PVwiJ0hlbHZldGljYSBOZXVlJywgSGVsdmV0aWNhLCBBcmlhbCwgc2Fucy1zZXJpZlwiXHJcbiAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAgJHt0aGlzLnJvd3Nbcm93XS5uYW1lfVxyXG4gICAgICAgICAgICAgICAgPC90ZXh0PlxyXG4gICAgICAgICAgICBgO1xyXG5cclxuICAgICAgICAgICAgLy8gQ29tcHV0ZSB0aGUgbGVuZ3RoIG9mIHRoZSBsYWJlbCBpbiBwaXhlbHNcclxuICAgICAgICAgICAgY29uc3QgY29tcHV0ZWRXaWR0aDogbnVtYmVyID0gY3R4IS5tZWFzdXJlVGV4dCh0aGlzLnJvd3Nbcm93XS5uYW1lKS53aWR0aCArIHg7XHJcbiAgICAgICAgICAgIGlmIChjb21wdXRlZFdpZHRoID4gbWF4aW11bVdpZHRoKSB7XHJcbiAgICAgICAgICAgICAgICBtYXhpbXVtV2lkdGggPSBjb21wdXRlZFdpZHRoO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCB5ID0gZGltZW5zaW9uICogdGhpcy5yb3dzLmxlbmd0aCArIHNxdWFyZVBhZGRpbmcgKiAodGhpcy5yb3dzLmxlbmd0aCAtIDEpICsgdmlzdWFsaXphdGlvblRleHRQYWRkaW5nO1xyXG4gICAgICAgIGxldCBtYXhpbXVtSGVpZ2h0OiBudW1iZXIgPSB5O1xyXG5cclxuICAgICAgICBmb3IgKGxldCBjb2wgPSAwOyBjb2wgPCB0aGlzLmNvbHVtbnMubGVuZ3RoOyBjb2wrKykge1xyXG4gICAgICAgICAgICBjb25zdCB4ID0gKGRpbWVuc2lvbiArIHNxdWFyZVBhZGRpbmcpICogY29sICsgdGV4dENlbnRlcjtcclxuXHJcbiAgICAgICAgICAgIHN2Z0NvbnRlbnRzICs9IGBcclxuICAgICAgICAgICAgICAgIDx0ZXh0IFxyXG4gICAgICAgICAgICAgICAgICAgIHg9XCIke3h9XCIgXHJcbiAgICAgICAgICAgICAgICAgICAgeT1cIiR7eX1cIiBcclxuICAgICAgICAgICAgICAgICAgICBmb250LXNpemU9XCIke2ZvbnRTaXplfVwiIFxyXG4gICAgICAgICAgICAgICAgICAgIHRleHQtYW5jaG9yPVwic3RhcnRcIiBcclxuICAgICAgICAgICAgICAgICAgICBmaWxsPVwiYmxhY2tcIlxyXG4gICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybT1cInJvdGF0ZSg5MCwgJHt4fSwgJHt5fSlcIlxyXG4gICAgICAgICAgICAgICAgICAgIGZvbnQtZmFtaWx5PVwiJ0hlbHZldGljYSBOZXVlJywgSGVsdmV0aWNhLCBBcmlhbCwgc2Fucy1zZXJpZlwiXHJcbiAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAgJHt0aGlzLmNvbHVtbnNbY29sXS5uYW1lfVxyXG4gICAgICAgICAgICAgICAgPC90ZXh0PlxyXG4gICAgICAgICAgICBgO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgY29tcHV0ZWRXaWR0aDogbnVtYmVyID0gY3R4IS5tZWFzdXJlVGV4dCh0aGlzLmNvbHVtbnNbY29sXS5uYW1lKS53aWR0aCArIHk7XHJcbiAgICAgICAgICAgIGlmIChjb21wdXRlZFdpZHRoID4gbWF4aW11bUhlaWdodCkge1xyXG4gICAgICAgICAgICAgICAgbWF4aW11bUhlaWdodCA9IGNvbXB1dGVkV2lkdGg7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBgXHJcbiAgICAgICAgICAgIDxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHdpZHRoPVwiJHtNYXRoLmNlaWwobWF4aW11bVdpZHRoKX1cIiBoZWlnaHQ9XCIke01hdGguY2VpbChtYXhpbXVtSGVpZ2h0KX1cIj5cclxuICAgICAgICAgICAgICAgICR7c3ZnQ29udGVudHN9XHJcbiAgICAgICAgICAgIDwvc3ZnPlxyXG4gICAgICAgIGA7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBFeHRyYWN0cyBhIGxpbmVhciBvcmRlciBmcm9tIGEgZGVuZHJvZ3JhbSBieSBmb2xsb3dpbmcgYWxsIGJyYW5jaGVzIHVwIHRvIGxlYXZlcyBpbiBhIGRlcHRoLWZpcnN0IG9yZGVyaW5nLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB0cmVlTm9kZSBSb290IG9mIGEgZGVuZHJvZ3JhbSBmb3Igd2hpY2ggYSBsaW5lYXIgbGVhZiBvcmRlcmluZyBuZWVkcyB0byBiZSBleHRyYWN0ZWQuXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgZGV0ZXJtaW5lT3JkZXIodHJlZU5vZGU6IFRyZWVOb2RlKTogbnVtYmVyW10ge1xyXG4gICAgICAgIHJldHVybiB0cmVlTm9kZS52YWx1ZXMubWFwKGl0ZW0gPT4gaXRlbS5pZCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBEZXRlcm1pbmVzIHRoZSBkaW1lbnNpb25zIG9mIG9uZSBzcXVhcmUgYmFzZWQgdXBvbiB0aGUgY3VycmVudCB3aWR0aCBhbmQgaGVpZ2h0LXNldHRpbmdzIGFuZCB0aGUgYW1vdW50IG9mIHJvd3NcclxuICAgICAqIGFuZCBjb2x1bW5zIGN1cnJlbnRseSBzZXQgdG8gYmUgdmlzdWFsaXplZC5cclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBkZXRlcm1pbmVTcXVhcmVXaWR0aChcclxuICAgICAgICB2aWV3UG9ydCA9IHRoaXMuY3VycmVudFZpZXdQb3J0LFxyXG4gICAgICAgIHRleHRXaWR0aDogbnVtYmVyID0gdGhpcy50ZXh0V2lkdGgsXHJcbiAgICAgICAgdGV4dEhlaWdodDogbnVtYmVyID0gdGhpcy50ZXh0SGVpZ2h0XHJcbiAgICApIHtcclxuICAgICAgICBjb25zdCBkZW5kcm9ncmFtV2lkdGggPSB0aGlzLmRldGVybWluZURlbmRyb2dyYW1XaWR0aCgpO1xyXG5cclxuICAgICAgICBjb25zdCB2aXN1YWxpemF0aW9uV2lkdGggPSB2aWV3UG9ydC54Qm90dG9tIC1cclxuICAgICAgICAgICAgdmlld1BvcnQueFRvcCAtXHJcbiAgICAgICAgICAgIGRlbmRyb2dyYW1XaWR0aCAtXHJcbiAgICAgICAgICAgIHRoaXMuY29sdW1ucy5sZW5ndGggKiB0aGlzLnNldHRpbmdzLnNxdWFyZVBhZGRpbmcgLVxyXG4gICAgICAgICAgICB0ZXh0V2lkdGg7XHJcbiAgICAgICAgY29uc3QgdmlzdWFsaXphdGlvbkhlaWdodCA9IHZpZXdQb3J0LnlCb3R0b20gLVxyXG4gICAgICAgICAgICB2aWV3UG9ydC55VG9wIC1cclxuICAgICAgICAgICAgZGVuZHJvZ3JhbVdpZHRoIC1cclxuICAgICAgICAgICAgdGhpcy5yb3dzLmxlbmd0aCAqIHRoaXMuc2V0dGluZ3Muc3F1YXJlUGFkZGluZyAtXHJcbiAgICAgICAgICAgIHRleHRIZWlnaHQ7XHJcblxyXG4gICAgICAgIC8vIFNxdWFyZXMgc2hvdWxkIGF0IGxlYXN0IGJlIG9uZSBwaXhlbCBpbiBoZWlnaHRcclxuICAgICAgICBsZXQgc3F1YXJlV2lkdGggPSBNYXRoLm1heCgxLCB2aXN1YWxpemF0aW9uV2lkdGggLyB0aGlzLmNvbHVtbnMubGVuZ3RoKTtcclxuICAgICAgICBsZXQgc3F1YXJlSGVpZ2h0ID0gTWF0aC5tYXgoMSwgdmlzdWFsaXphdGlvbkhlaWdodCAvIHRoaXMucm93cy5sZW5ndGgpO1xyXG5cclxuICAgICAgICByZXR1cm4gTWF0aC5taW4oc3F1YXJlV2lkdGgsIHNxdWFyZUhlaWdodCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBkZXRlcm1pbmVEZW5kcm9ncmFtV2lkdGgoKTogbnVtYmVyIHtcclxuICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5kZW5kcm9ncmFtRW5hYmxlZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zZXR0aW5ncy5kZW5kcm9ncmFtV2lkdGggKiB0aGlzLmxhc3Rab29tU3RhdHVzLms7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIDA7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgY29tcHV0ZVRleHRTdGFydFgoXHJcbiAgICAgICAgdmlld1BvcnQgPSB0aGlzLmN1cnJlbnRWaWV3UG9ydCxcclxuICAgICAgICB0ZXh0V2lkdGg6IG51bWJlciA9IHRoaXMudGV4dFdpZHRoLFxyXG4gICAgICAgIHRleHRIZWlnaHQ6IG51bWJlciA9IHRoaXMudGV4dEhlaWdodFxyXG4gICAgKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gdmlld1BvcnQueFRvcCArXHJcbiAgICAgICAgICAgIHRoaXMuZGV0ZXJtaW5lRGVuZHJvZ3JhbVdpZHRoKCkgK1xyXG4gICAgICAgICAgICB0aGlzLmRldGVybWluZVNxdWFyZVdpZHRoKHZpZXdQb3J0LCB0ZXh0V2lkdGgsIHRleHRIZWlnaHQpICogdGhpcy5jb2x1bW5zLmxlbmd0aCArXHJcbiAgICAgICAgICAgIHRoaXMuc2V0dGluZ3Muc3F1YXJlUGFkZGluZyAqICh0aGlzLmNvbHVtbnMubGVuZ3RoIC0gMSkgK1xyXG4gICAgICAgICAgICB0aGlzLnNldHRpbmdzLnZpc3VhbGl6YXRpb25UZXh0UGFkZGluZztcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGNvbXB1dGVUZXh0U3RhcnRZKFxyXG4gICAgICAgIHZpZXdQb3J0ID0gdGhpcy5jdXJyZW50Vmlld1BvcnQsXHJcbiAgICAgICAgdGV4dFdpZHRoOiBudW1iZXIgPSB0aGlzLnRleHRXaWR0aCxcclxuICAgICAgICB0ZXh0SGVpZ2h0OiBudW1iZXIgPSB0aGlzLnRleHRIZWlnaHRcclxuICAgICk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHZpZXdQb3J0LnlUb3AgK1xyXG4gICAgICAgICAgICB0aGlzLmRldGVybWluZURlbmRyb2dyYW1XaWR0aCgpICtcclxuICAgICAgICAgICAgdGhpcy5kZXRlcm1pbmVTcXVhcmVXaWR0aCh2aWV3UG9ydCwgdGV4dFdpZHRoLCB0ZXh0SGVpZ2h0KSAqIHRoaXMucm93cy5sZW5ndGggK1xyXG4gICAgICAgICAgICB0aGlzLnNldHRpbmdzLnNxdWFyZVBhZGRpbmcgKiAodGhpcy5yb3dzLmxlbmd0aCAtIDEpICtcclxuICAgICAgICAgICAgdGhpcy5zZXR0aW5ncy52aXN1YWxpemF0aW9uVGV4dFBhZGRpbmc7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSB6b29tZWQoeyBrLCB4LCB5IH06IHsgazogbnVtYmVyLCB4OiBudW1iZXIsIHk6IG51bWJlciB9KSB7XHJcbiAgICAgICAgdGhpcy5sYXN0Wm9vbVN0YXR1cyA9IHsgaywgeCwgeSB9O1xyXG5cclxuICAgICAgICBjb25zdCBuZXdUZXh0U3RhcnRYID0geCArIHRoaXMuY29tcHV0ZVRleHRTdGFydFgoXHJcbiAgICAgICAgICAgIHRoaXMub3JpZ2luYWxWaWV3UG9ydCxcclxuICAgICAgICAgICAgdGhpcy5zZXR0aW5ncy5pbml0aWFsVGV4dFdpZHRoLFxyXG4gICAgICAgICAgICB0aGlzLnNldHRpbmdzLmluaXRpYWxUZXh0SGVpZ2h0XHJcbiAgICAgICAgKSAqIGs7XHJcblxyXG4gICAgICAgIGNvbnN0IG5ld1RleHRTdGFydFkgPSB5ICsgdGhpcy5jb21wdXRlVGV4dFN0YXJ0WShcclxuICAgICAgICAgICAgdGhpcy5vcmlnaW5hbFZpZXdQb3J0LFxyXG4gICAgICAgICAgICB0aGlzLnNldHRpbmdzLmluaXRpYWxUZXh0V2lkdGgsXHJcbiAgICAgICAgICAgIHRoaXMuc2V0dGluZ3MuaW5pdGlhbFRleHRIZWlnaHRcclxuICAgICAgICApICogaztcclxuXHJcbiAgICAgICAgY29uc3QgY29tcGFyYXRvcjogKHg6IG51bWJlciwgeTogbnVtYmVyKSA9PiBudW1iZXIgPSAoeCwgeSkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoeCA+IHkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB5O1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGsgPj0gMSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIE1hdGgubWluKHgsIHkpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIE1hdGgubWF4KHgsIHkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLy8gUmVjYWxjdWxhdGUgdGhlIGN1cnJlbnQgdmlld3BvcnRcclxuICAgICAgICB0aGlzLmN1cnJlbnRWaWV3UG9ydCA9IHtcclxuICAgICAgICAgICAgeFRvcDogeCArIHRoaXMub3JpZ2luYWxWaWV3UG9ydC54VG9wICogayxcclxuICAgICAgICAgICAgeVRvcDogeSArIHRoaXMub3JpZ2luYWxWaWV3UG9ydC55VG9wICogayxcclxuICAgICAgICAgICAgeEJvdHRvbTogY29tcGFyYXRvcih4ICsgdGhpcy5vcmlnaW5hbFZpZXdQb3J0LnhCb3R0b20gKiBrLCB0aGlzLm9yaWdpbmFsVmlld1BvcnQueEJvdHRvbSksXHJcbiAgICAgICAgICAgIHlCb3R0b206IGNvbXBhcmF0b3IoeSArIHRoaXMub3JpZ2luYWxWaWV3UG9ydC55Qm90dG9tICogaywgdGhpcy5vcmlnaW5hbFZpZXdQb3J0LnlCb3R0b20pXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLnRleHRXaWR0aCA9IHRoaXMuY3VycmVudFZpZXdQb3J0LnhCb3R0b20gLSBuZXdUZXh0U3RhcnRYO1xyXG4gICAgICAgIHRoaXMudGV4dEhlaWdodCA9IHRoaXMuY3VycmVudFZpZXdQb3J0LnlCb3R0b20gLSBuZXdUZXh0U3RhcnRZO1xyXG5cclxuICAgICAgICB0aGlzLnJlZHJhdygpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVkcmF3IHRoZSBjb21wbGV0ZSBIZWF0bWFwIGFuZCBjbGVhciB0aGUgdmlldyBmaXJzdC4gVGhpcyBmdW5jdGlvbiBhY2NlcHRzIHRocmVlIG9wdGlvbmFsIGFyZ3VtZW50cyB0aGF0XHJcbiAgICAgKiBkZXRlcm1pbmUgdGhlIGN1cnJlbnQgYW5pbWF0aW9uIHN0YXRlIChpZiByZXF1ZXN0ZWQpLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBuZXdSb3dQb3NpdGlvbnMgQ3VycmVudCBwb3NpdGlvbiBvZiB0aGUgcm93cy4gUm93W2ldID0gaiBkZW5vdGVzIHRoYXQgdGhlIGkndGggcm93IGluIHRoZSBvcmlnaW5hbCBncmlkXHJcbiAgICAgKiBzaG91bGQgbW92ZSB0byBwb3NpdGlvbiBqLlxyXG4gICAgICogQHBhcmFtIG5ld0NvbHVtblBvc2l0aW9ucyBOZXcgcG9zaXRpb25zIG9mIHRoZSBjb2x1bW5zLiBDb2x1bW5baV0gPSBqIGRlbm90ZXMgdGhhdCBpJ3RoIGNvbHVtbiBpbiB0aGUgb3JpZ2luYWxcclxuICAgICAqIGdyaWQgc2hvdWxkIG1vdmUgdG8gcG9zaXRpb24gai5cclxuICAgICAqIEBwYXJhbSBhbmltYXRpb25TdGVwIEEgZGVjaW1hbCBudW1iZXIgKGluIFswLCAxXSkgdGhhdCBkZW5vdGVzIHRoZSBjdXJyZW50IGFuaW1hdGlvbiBwcm9ncmVzcy4gSWYgMC43IGlzIHBhc3NlZFxyXG4gICAgICogYXMgYSB2YWx1ZSwgNzAlIG9mIHRoZSBhbmltYXRpb24gaGFzIGFscmVhZHkgcGFzc2VkLlxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIHJlZHJhdyhcclxuICAgICAgICBuZXdSb3dQb3NpdGlvbnM6IG51bWJlcltdID0gQXJyYXkuZnJvbShBcnJheSh0aGlzLnJvd3MubGVuZ3RoKS5rZXlzKCkpLFxyXG4gICAgICAgIG5ld0NvbHVtblBvc2l0aW9uczogbnVtYmVyW10gPSBBcnJheS5mcm9tKEFycmF5KHRoaXMuY29sdW1ucy5sZW5ndGgpLmtleXMoKSksXHJcbiAgICAgICAgYW5pbWF0aW9uU3RlcDogbnVtYmVyID0gLTFcclxuICAgICkge1xyXG4gICAgICAgIHRoaXMucmVkcmF3R3JpZChuZXdSb3dQb3NpdGlvbnMsIG5ld0NvbHVtblBvc2l0aW9ucywgYW5pbWF0aW9uU3RlcCk7XHJcbiAgICAgICAgdGhpcy5yZWRyYXdSb3dUaXRsZXMobmV3Um93UG9zaXRpb25zLCBhbmltYXRpb25TdGVwKTtcclxuICAgICAgICB0aGlzLnJlZHJhd0NvbHVtblRpdGxlcyhuZXdDb2x1bW5Qb3NpdGlvbnMsIGFuaW1hdGlvblN0ZXApO1xyXG4gICAgICAgIHRoaXMucmVkcmF3RGVuZHJvZ3JhbShhbmltYXRpb25TdGVwKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHJlZHJhd0dyaWQoXHJcbiAgICAgICAgbmV3Um93UG9zaXRpb25zOiBudW1iZXJbXSxcclxuICAgICAgICBuZXdDb2x1bW5Qb3NpdGlvbnM6IG51bWJlcltdLFxyXG4gICAgICAgIGFuaW1hdGlvblN0ZXA6IG51bWJlclxyXG4gICAgKSB7XHJcbiAgICAgICAgaWYgKGFuaW1hdGlvblN0ZXAgPT09IC0xKSB7XHJcbiAgICAgICAgICAgIGFuaW1hdGlvblN0ZXAgPSAwO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IHNxdWFyZVdpZHRoID0gdGhpcy5kZXRlcm1pbmVTcXVhcmVXaWR0aCgpO1xyXG4gICAgICAgIGNvbnN0IGRlbmRyb2dyYW1XaWR0aDogbnVtYmVyID0gdGhpcy5kZXRlcm1pbmVEZW5kcm9ncmFtV2lkdGgoKTtcclxuXHJcbiAgICAgICAgdGhpcy5jb250ZXh0LmNsZWFyUmVjdCgwLCAwLCB0aGlzLnNldHRpbmdzLndpZHRoLCB0aGlzLnNldHRpbmdzLmhlaWdodCk7XHJcblxyXG4gICAgICAgIGZvciAoY29uc3QgW2NvbG9yLCB2YWx1ZXNdIG9mIHRoaXMudmFsdWVzUGVyQ29sb3IpIHtcclxuICAgICAgICAgICAgdGhpcy5jb250ZXh0LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRleHQuZmlsbFN0eWxlID0gY29sb3I7XHJcblxyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IFtyb3csIGNvbF0gb2YgdmFsdWVzKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBGaXJzdCBjb21wdXRlIHRoZSBwb3NpdGlvbnMgYXQgdGhlIHN0YXJ0IG9mIHRoZSBhbmltYXRpb25cclxuICAgICAgICAgICAgICAgIGNvbnN0IHhUb3BTdGFydCA9IHRoaXMuY3VycmVudFZpZXdQb3J0LnhUb3AgKyBkZW5kcm9ncmFtV2lkdGggKyBjb2wgKiAoc3F1YXJlV2lkdGggKyB0aGlzLnNldHRpbmdzLnNxdWFyZVBhZGRpbmcpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgeVRvcFN0YXJ0ID0gdGhpcy5jdXJyZW50Vmlld1BvcnQueVRvcCArIGRlbmRyb2dyYW1XaWR0aCArIHJvdyAqIChzcXVhcmVXaWR0aCArIHRoaXMuc2V0dGluZ3Muc3F1YXJlUGFkZGluZyk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gVGhlbiBjb21wdXRlIHRoZSBwb3NpdGlvbnMgYXQgdGhlIGVuZCBvZiB0aGUgYW5pbWF0aW9uXHJcbiAgICAgICAgICAgICAgICBjb25zdCB4VG9wRW5kID0gdGhpcy5jdXJyZW50Vmlld1BvcnQueFRvcCArIGRlbmRyb2dyYW1XaWR0aCArIG5ld0NvbHVtblBvc2l0aW9uc1tjb2xdICogKHNxdWFyZVdpZHRoICsgdGhpcy5zZXR0aW5ncy5zcXVhcmVQYWRkaW5nKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHlUb3BFbmQgPSB0aGlzLmN1cnJlbnRWaWV3UG9ydC55VG9wICsgZGVuZHJvZ3JhbVdpZHRoICsgbmV3Um93UG9zaXRpb25zW3Jvd10gKiAoc3F1YXJlV2lkdGggKyB0aGlzLnNldHRpbmdzLnNxdWFyZVBhZGRpbmcpO1xyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IHhEaWZmZXJlbmNlID0geFRvcEVuZCAtIHhUb3BTdGFydDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHlEaWZmZXJlbmNlID0geVRvcEVuZCAtIHlUb3BTdGFydDtcclxuXHJcbiAgICAgICAgICAgICAgICBsZXQgeFRvcEN1cnJlbnQgPSB4VG9wU3RhcnQgKyB4RGlmZmVyZW5jZSAqIGFuaW1hdGlvblN0ZXA7XHJcbiAgICAgICAgICAgICAgICBsZXQgeVRvcEN1cnJlbnQgPSB5VG9wU3RhcnQgKyB5RGlmZmVyZW5jZSAqIGFuaW1hdGlvblN0ZXA7XHJcbiAgICAgICAgICAgICAgICBsZXQgeEJvdHRvbUN1cnJlbnQgPSB4VG9wQ3VycmVudCArIChzcXVhcmVXaWR0aCArIHRoaXMuc2V0dGluZ3Muc3F1YXJlUGFkZGluZyk7XHJcbiAgICAgICAgICAgICAgICBsZXQgeUJvdHRvbUN1cnJlbnQgPSB5VG9wQ3VycmVudCArIChzcXVhcmVXaWR0aCArIHRoaXMuc2V0dGluZ3Muc3F1YXJlUGFkZGluZyk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gV2UgZG8gbm90IG5lZWQgdG8gZHJhdyB0aGUgY3VycmVudCBzcXVhcmVcclxuICAgICAgICAgICAgICAgIGlmICh4Qm90dG9tQ3VycmVudCA8IDAgfHwgeFRvcEN1cnJlbnQgPiB0aGlzLnNldHRpbmdzLndpZHRoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHlCb3R0b21DdXJyZW50IDwgMCB8fCB5VG9wQ3VycmVudCA+IHRoaXMuc2V0dGluZ3MuaGVpZ2h0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3MuaGlnaGxpZ2h0U2VsZWN0aW9uICYmIHJvdyA9PSB0aGlzLmhpZ2hsaWdodGVkUm93ICYmIGNvbCA9PSB0aGlzLmhpZ2hsaWdodGVkQ29sdW1uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gQWRkIGEgaGlnaGxpZ2h0IGJvcmRlciBhcm91bmQgdGhlIGN1cnJlbnRseSBzZWxlY3RlZCBzcXVhcmVcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuc2F2ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5maWxsU3R5bGUgPSB0aGlzLnNldHRpbmdzLm1heENvbG9yO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5maWxsUmVjdChcclxuICAgICAgICAgICAgICAgICAgICAgICAgeFRvcEN1cnJlbnQgLSB0aGlzLnNldHRpbmdzLnNxdWFyZVBhZGRpbmcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHlUb3BDdXJyZW50IC0gdGhpcy5zZXR0aW5ncy5zcXVhcmVQYWRkaW5nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzcXVhcmVXaWR0aCArIDIgKiB0aGlzLnNldHRpbmdzLnNxdWFyZVBhZGRpbmcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNxdWFyZVdpZHRoICsgMiAqIHRoaXMuc2V0dGluZ3Muc3F1YXJlUGFkZGluZ1xyXG4gICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LnJlc3RvcmUoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuZmlsbFJlY3QoXHJcbiAgICAgICAgICAgICAgICAgICAgeFRvcEN1cnJlbnQsXHJcbiAgICAgICAgICAgICAgICAgICAgeVRvcEN1cnJlbnQsXHJcbiAgICAgICAgICAgICAgICAgICAgc3F1YXJlV2lkdGgsXHJcbiAgICAgICAgICAgICAgICAgICAgc3F1YXJlV2lkdGhcclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuY29udGV4dC5jbG9zZVBhdGgoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBZGQgZWxsaXBzaXMgY2hhcmFjdGVycyB0byB0aGUgc3RyaW5nLCBpZiBpdCBkb2VzIG5vdCBmaXQgb250byB0aGUgc2NyZWVuLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBpbnB1dCBUaGUgc3RyaW5nIHRvIHdoaWNoIGFuIGVsbGlwc2lzIHNob3VsZCBiZSBhZGRlZCwgaWYgcmVxdWlyZWQuXHJcbiAgICAgKiBAcGFyYW0gd2lkdGggVGhlIG1heGltdW0gd2lkdGggdGhhdCB0aGUgc3RyaW5nIHNob3VsZCBvY2N1cHkuXHJcbiAgICAgKiBAcmV0dXJuIEEgc3RyaW5nIHRvIHdoaWNoIGFuIGVsbGlwc2lzIGhhcyBiZWVuIGFkZGVkLCBpZiBpdCB3YXMgcmVxdWlyZWQuXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgZWxsaXBzaXplU3RyaW5nKGlucHV0OiBzdHJpbmcsIHdpZHRoOiBudW1iZXIpOiBzdHJpbmcge1xyXG4gICAgICAgIGNvbnN0IGNvbXB1dGVkV2lkdGggPSB0aGlzLmNvbnRleHQubWVhc3VyZVRleHQoaW5wdXQpO1xyXG5cclxuICAgICAgICBpZiAoY29tcHV0ZWRXaWR0aC53aWR0aCA+IHdpZHRoKSB7XHJcbiAgICAgICAgICAgIGxldCBpID0gaW5wdXQubGVuZ3RoO1xyXG4gICAgICAgICAgICBsZXQgb3V0cHV0ID0gaW5wdXQuc3Vic3RyKDAsIGkpICsgXCIuLi5cIjtcclxuICAgICAgICAgICAgd2hpbGUgKHRoaXMuY29udGV4dC5tZWFzdXJlVGV4dChvdXRwdXQpLndpZHRoID4gd2lkdGggJiYgaSA+IDApIHtcclxuICAgICAgICAgICAgICAgIGktLTtcclxuICAgICAgICAgICAgICAgIG91dHB1dCA9IGlucHV0LnN1YnN0cigwLCBpKSArIFwiLi4uXCI7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChpID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJcIjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIG91dHB1dDtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gaW5wdXQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgcmVkcmF3Um93VGl0bGVzKFxyXG4gICAgICAgIG5ld1Jvd1Bvc2l0aW9uczogbnVtYmVyW10sXHJcbiAgICAgICAgYW5pbWF0aW9uU3RlcDogbnVtYmVyXHJcbiAgICApIHtcclxuICAgICAgICBpZiAoYW5pbWF0aW9uU3RlcCA9PT0gLTEpIHtcclxuICAgICAgICAgICAgYW5pbWF0aW9uU3RlcCA9IDA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBzcXVhcmVXaWR0aCA9IHRoaXMuZGV0ZXJtaW5lU3F1YXJlV2lkdGgoKTtcclxuICAgICAgICBjb25zdCBkZW5kcm9ncmFtV2lkdGggPSB0aGlzLmRldGVybWluZURlbmRyb2dyYW1XaWR0aCgpO1xyXG5cclxuICAgICAgICAvLyBQZXIgaG93IG1hbnkgaXRlbXMgc2hvdWxkIHdlIGRpc3BsYXkgYSB0ZXh0IGl0ZW0/IChwYWRkaW5nIGlzIDgpXHJcbiAgICAgICAgY29uc3Qgc3RlcFNpemU6IG51bWJlciA9IE1hdGgubWF4KE1hdGguZmxvb3IoKHRoaXMuc2V0dGluZ3MuZm9udFNpemUgKyAxMikgLyAoc3F1YXJlV2lkdGggKyB0aGlzLnNldHRpbmdzLnNxdWFyZVBhZGRpbmcpKSwgMSk7XHJcblxyXG4gICAgICAgIGNvbnN0IHRleHRTdGFydCA9IHRoaXMuY29tcHV0ZVRleHRTdGFydFgoKTtcclxuICAgICAgICBsZXQgdGV4dENlbnRlciA9IE1hdGgubWF4KChzcXVhcmVXaWR0aCAtIHRoaXMuc2V0dGluZ3MuZm9udFNpemUpIC8gMiwgMCk7XHJcblxyXG4gICAgICAgIHRoaXMuY29udGV4dC5zYXZlKCk7XHJcblxyXG4gICAgICAgIHRoaXMuY29udGV4dC5maWxsU3R5bGUgPSB0aGlzLnNldHRpbmdzLmxhYmVsQ29sb3I7XHJcbiAgICAgICAgdGhpcy5jb250ZXh0LnRleHRCYXNlbGluZSA9IFwidG9wXCI7XHJcbiAgICAgICAgdGhpcy5jb250ZXh0LnRleHRBbGlnbiA9IFwic3RhcnRcIlxyXG4gICAgICAgIHRoaXMuY29udGV4dC5mb250ID0gYCR7dGhpcy5zZXR0aW5ncy5mb250U2l6ZX1weCBBcmlhbCwgc2Fucy1zZXJpZmA7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnJvd3MubGVuZ3RoOyBpICs9IHN0ZXBTaXplKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHJvdyA9IHRoaXMucm93c1tpXTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLnNldHRpbmdzLmhpZ2hsaWdodFNlbGVjdGlvbiAmJiBpID09IHRoaXMuaGlnaGxpZ2h0ZWRSb3cpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5zYXZlKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuZmlsbFN0eWxlID0gdGhpcy5zZXR0aW5ncy5oaWdobGlnaHRGb250Q29sb3I7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuZm9udCA9IGAke3RoaXMuc2V0dGluZ3MuaGlnaGxpZ2h0Rm9udFNpemV9cHggJ0hlbHZldGljYSBOZXVlJywgSGVsdmV0aWNhLCBBcmlhbCwgc2Fucy1zZXJpZmA7XHJcbiAgICAgICAgICAgICAgICB0ZXh0Q2VudGVyID0gTWF0aC5tYXgoKHNxdWFyZVdpZHRoIC0gdGhpcy5zZXR0aW5ncy5oaWdobGlnaHRGb250U2l6ZSkgLyAyLCAwKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY29uc3Qgb3JpZ2luYWxZID0gdGhpcy5jdXJyZW50Vmlld1BvcnQueVRvcCArIGRlbmRyb2dyYW1XaWR0aCArIChzcXVhcmVXaWR0aCArIHRoaXMuc2V0dGluZ3Muc3F1YXJlUGFkZGluZykgKiBpICsgdGV4dENlbnRlcjtcclxuICAgICAgICAgICAgY29uc3QgZW5kWSA9IHRoaXMuY3VycmVudFZpZXdQb3J0LnlUb3AgKyBkZW5kcm9ncmFtV2lkdGggKyAoc3F1YXJlV2lkdGggKyB0aGlzLnNldHRpbmdzLnNxdWFyZVBhZGRpbmcpICogbmV3Um93UG9zaXRpb25zW2ldICsgdGV4dENlbnRlcjtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGRpZmZlcmVuY2UgPSBlbmRZIC0gb3JpZ2luYWxZO1xyXG4gICAgICAgICAgICBjb25zdCBjdXJyZW50WSA9IG9yaWdpbmFsWSArIGRpZmZlcmVuY2UgKiBhbmltYXRpb25TdGVwO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5jb250ZXh0LmZpbGxUZXh0KFxyXG4gICAgICAgICAgICAgICAgdGhpcy5lbGxpcHNpemVTdHJpbmcocm93Lm5hbWUsIHRoaXMudGV4dFdpZHRoKSxcclxuICAgICAgICAgICAgICAgIHRleHRTdGFydCxcclxuICAgICAgICAgICAgICAgIGN1cnJlbnRZXHJcbiAgICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5oaWdobGlnaHRTZWxlY3Rpb24gJiYgaSA9PSB0aGlzLmhpZ2hsaWdodGVkUm93KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQucmVzdG9yZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmNvbnRleHQucmVzdG9yZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgcmVkcmF3Q29sdW1uVGl0bGVzKFxyXG4gICAgICAgIG5ld0NvbHVtblBvc2l0aW9uczogbnVtYmVyW10sXHJcbiAgICAgICAgYW5pbWF0aW9uU3RlcDogbnVtYmVyXHJcbiAgICApIHtcclxuICAgICAgICBpZiAoYW5pbWF0aW9uU3RlcCA9PT0gLTEpIHtcclxuICAgICAgICAgICAgYW5pbWF0aW9uU3RlcCA9IDA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgc3F1YXJlV2lkdGggPSB0aGlzLmRldGVybWluZVNxdWFyZVdpZHRoKCk7XHJcbiAgICAgICAgY29uc3QgZGVuZHJvZ3JhbVdpZHRoID0gdGhpcy5kZXRlcm1pbmVEZW5kcm9ncmFtV2lkdGgoKTtcclxuXHJcbiAgICAgICAgLy8gUGVyIGhvdyBtYW55IGl0ZW1zIHNob3VsZCB3ZSBkaXNwbGF5IGEgdGV4dCBpdGVtPyAocGFkZGluZyBpcyA4KVxyXG4gICAgICAgIGxldCBzdGVwU2l6ZTogbnVtYmVyID0gTWF0aC5tYXgoTWF0aC5mbG9vcigodGhpcy5zZXR0aW5ncy5mb250U2l6ZSArIDEyKSAvIChzcXVhcmVXaWR0aCArIHRoaXMuc2V0dGluZ3Muc3F1YXJlUGFkZGluZykpLCAxKTtcclxuXHJcbiAgICAgICAgbGV0IHRleHRTdGFydCA9IHRoaXMuY29tcHV0ZVRleHRTdGFydFkoKTtcclxuICAgICAgICBsZXQgdGV4dENlbnRlciA9IE1hdGgubWF4KChzcXVhcmVXaWR0aCAtIHRoaXMuc2V0dGluZ3MuZm9udFNpemUpIC8gMiwgMCk7XHJcblxyXG4gICAgICAgIHRoaXMuY29udGV4dC5zYXZlKCk7XHJcbiAgICAgICAgdGhpcy5jb250ZXh0LnJvdGF0ZSgoOTAgKiBNYXRoLlBJKSAvIDE4MCk7XHJcbiAgICAgICAgdGhpcy5jb250ZXh0LmZpbGxTdHlsZSA9IHRoaXMuc2V0dGluZ3MubGFiZWxDb2xvcjtcclxuICAgICAgICB0aGlzLmNvbnRleHQudGV4dEJhc2VsaW5lID0gXCJib3R0b21cIjtcclxuICAgICAgICB0aGlzLmNvbnRleHQudGV4dEFsaWduID0gXCJzdGFydFwiO1xyXG4gICAgICAgIHRoaXMuY29udGV4dC5mb250ID0gYCR7dGhpcy5zZXR0aW5ncy5mb250U2l6ZX1weCBBcmlhbCwgc2Fucy1zZXJpZmA7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmNvbHVtbnMubGVuZ3RoOyBpICs9IHN0ZXBTaXplKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvbCA9IHRoaXMuY29sdW1uc1tpXTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLnNldHRpbmdzLmhpZ2hsaWdodFNlbGVjdGlvbiAmJiBpID09IHRoaXMuaGlnaGxpZ2h0ZWRDb2x1bW4pIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5zYXZlKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuZmlsbFN0eWxlID0gdGhpcy5zZXR0aW5ncy5oaWdobGlnaHRGb250Q29sb3I7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuZm9udCA9IGAke3RoaXMuc2V0dGluZ3MuaGlnaGxpZ2h0Rm9udFNpemV9cHggJ0hlbHZldGljYSBOZXVlJywgSGVsdmV0aWNhLCBBcmlhbCwgc2Fucy1zZXJpZmA7XHJcbiAgICAgICAgICAgICAgICB0ZXh0Q2VudGVyID0gTWF0aC5tYXgoKHNxdWFyZVdpZHRoIC0gdGhpcy5zZXR0aW5ncy5oaWdobGlnaHRGb250U2l6ZSkgLyAyLCAwKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY29uc3Qgb3JpZ2luYWxYID0gLSh0aGlzLmN1cnJlbnRWaWV3UG9ydC54VG9wICsgZGVuZHJvZ3JhbVdpZHRoICsgKHNxdWFyZVdpZHRoICsgdGhpcy5zZXR0aW5ncy5zcXVhcmVQYWRkaW5nKSAqIGkgKyB0ZXh0Q2VudGVyKTtcclxuICAgICAgICAgICAgY29uc3QgZW5kWCA9IC0odGhpcy5jdXJyZW50Vmlld1BvcnQueFRvcCArIGRlbmRyb2dyYW1XaWR0aCArIChzcXVhcmVXaWR0aCArIHRoaXMuc2V0dGluZ3Muc3F1YXJlUGFkZGluZykgKiBuZXdDb2x1bW5Qb3NpdGlvbnNbaV0gKyB0ZXh0Q2VudGVyKTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGRpZmZlcmVuY2UgPSBlbmRYIC0gb3JpZ2luYWxYO1xyXG4gICAgICAgICAgICBjb25zdCBjdXJyZW50WCA9IG9yaWdpbmFsWCArIGRpZmZlcmVuY2UgKiBhbmltYXRpb25TdGVwO1xyXG5cclxuICAgICAgICAgICAgLy8gVGhlIGF4aXMgb2YgdGhlIGNhbnZhcyBhbHNvIHJvdGF0ZSA5MCBkZWdyZWVzIGNsb2Nrd2lzZVxyXG4gICAgICAgICAgICB0aGlzLmNvbnRleHQuZmlsbFRleHQoXHJcbiAgICAgICAgICAgICAgICB0aGlzLmVsbGlwc2l6ZVN0cmluZyhjb2wubmFtZSwgdGhpcy50ZXh0SGVpZ2h0KSxcclxuICAgICAgICAgICAgICAgIHRleHRTdGFydCxcclxuICAgICAgICAgICAgICAgIGN1cnJlbnRYXHJcbiAgICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5oaWdobGlnaHRTZWxlY3Rpb24gJiYgaSA9PSB0aGlzLmhpZ2hsaWdodGVkQ29sdW1uKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQucmVzdG9yZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmNvbnRleHQucmVzdG9yZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUGVyZm9ybSBhIEJGUyBzZWFyY2ggb24gdGhlIGdpdmVuIHRyZWUgYW5kIG9yZGVyIGFsbCBlbmNvdW50ZXJlZCBub2RlcyBwZXIgZGVwdGggbGV2ZWwuIFRoZSByZXN1bHRpbmcgb3V0cHV0XHJcbiAgICAgKiBvZiB0aGlzIGZ1bmN0aW9uIGlzIGEgMkQgYXJyYXkgb2YgdGhlIGZvcm1hdCBkZXB0aCA9PiBUcmVlTm9kZVtdICh0aHVzIGl0IGtlZXBzIHRyYWNrIG9mIGFsbCBub2RlcyB0aGF0IGFyZVxyXG4gICAgICogc2l0dWF0ZWQgYXQgYSBzcGVjaWZpYyBsZXZlbCkuIE5vdGUgdGhhdCB0aGUgb3JkZXJpbmcgb2YgdGhlc2Ugbm9kZXMgcGVyIGxldmVsIGlzIG5vdCBhcmJpdHJhcnksIGJ1dCB0aGF0IG5vZGVzXHJcbiAgICAgKiBpbiBwYWlycyBzaGFyZSB0aGUgcGFyZW50ICh0aGF0IGlzLCBub2RlIGF0IGluZGV4IDAgYW5kIGluZGV4IDEgc2hhcmUgdGhlIHNhbWUgcGFyZW50LCBldGMpLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSByb290IFRoZSByb290IG9mIHRoZSB0cmVlIGZvciB3aGljaCB3ZSBzaG91bGQgb3JkZXIgYWxsIHRoZSBjaGlsZHJlbiBwZXIgZGVwdGggbGV2ZWwuXHJcbiAgICAgKiBAcmV0dXJuIEEgMkQgYXJyYXkgY29udGFpbmluZyBvbmUgYXJyYXkgcGVyIGRlcHRoIGxldmVsIG9mIHRoZSBnaXZlbiB0cmVlLlxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGJmc05vZGVzUGVyRGVwdGgocm9vdDogVHJlZU5vZGUpIHtcclxuICAgICAgICBjb25zdCBub2Rlc1BlckRlcHRoOiBUcmVlTm9kZVtdW10gPSBbXTtcclxuXHJcbiAgICAgICAgY29uc3QgcXVldWU6IFtUcmVlTm9kZSwgbnVtYmVyXVtdID0gW107XHJcbiAgICAgICAgLy8gUHVzaCBjdXJyZW50IG5vZGUgYW5kIGRlcHRoIG9mIHRoZSBub2RlXHJcbiAgICAgICAgcXVldWUucHVzaChbcm9vdCwgMF0pO1xyXG5cclxuICAgICAgICB3aGlsZSAocXVldWUubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICBjb25zdCBbbm9kZSwgZGVwdGhdOiBbVHJlZU5vZGUsIG51bWJlcl0gPSBxdWV1ZS5zaGlmdCgpITtcclxuICAgICAgICAgICAgaWYgKG5vZGVzUGVyRGVwdGgubGVuZ3RoIDw9IGRlcHRoKSB7XHJcbiAgICAgICAgICAgICAgICBub2Rlc1BlckRlcHRoLnB1c2goW10pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG5vZGVzUGVyRGVwdGhbZGVwdGhdLnB1c2gobm9kZSk7XHJcblxyXG4gICAgICAgICAgICBpZiAobm9kZS5sZWZ0Q2hpbGQpIHtcclxuICAgICAgICAgICAgICAgIHF1ZXVlLnB1c2goW25vZGUubGVmdENoaWxkLCBkZXB0aCArIDFdKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKG5vZGUucmlnaHRDaGlsZCkge1xyXG4gICAgICAgICAgICAgICAgcXVldWUucHVzaChbbm9kZS5yaWdodENoaWxkLCBkZXB0aCArIDFdKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIG5vZGVzUGVyRGVwdGg7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSByZWRyYXdEZW5kcm9ncmFtKGFuaW1hdGlvblN0ZXA6IG51bWJlcikge1xyXG4gICAgICAgIGlmICh0aGlzLnNldHRpbmdzLmRlbmRyb2dyYW1FbmFibGVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMucmVkcmF3SG9yaXpvbnRhbERlbmRyb2dyYW0oYW5pbWF0aW9uU3RlcCk7XHJcbiAgICAgICAgICAgIHRoaXMucmVkcmF3VmVydGljYWxEZW5kcm9ncmFtKGFuaW1hdGlvblN0ZXApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGNvbXB1dGVEZW5kcm9ncmFtQ29sb3IoY2x1c3RlcmVkOiBib29sZWFuLCBzaG91bGRBbmltYXRlOiBib29sZWFuLCBhbmltYXRpb25TdGVwOiBudW1iZXIpIHtcclxuICAgICAgICBpZiAoYW5pbWF0aW9uU3RlcCA9PT0gLTEgfHwgIXNob3VsZEFuaW1hdGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGNsdXN0ZXJlZCA/IHRoaXMuc2V0dGluZ3MuZGVuZHJvZ3JhbUNvbG9yIDogXCIjZDNkM2QzXCI7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBzY2FsZSA9IGQzLmludGVycG9sYXRlTGFiKGQzLmxhYihcIiNkM2QzZDNcIiksIGQzLmxhYih0aGlzLnNldHRpbmdzLmRlbmRyb2dyYW1Db2xvcikpO1xyXG4gICAgICAgIHJldHVybiBzY2FsZShhbmltYXRpb25TdGVwKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHJlZHJhd1ZlcnRpY2FsRGVuZHJvZ3JhbShhbmltYXRpb25TdGVwOiBudW1iZXIpIHtcclxuICAgICAgICB0aGlzLmNvbnRleHQuc2F2ZSgpO1xyXG5cclxuICAgICAgICBjb25zdCBjbHVzdGVyQ29sb3I6IHN0cmluZyA9IHRoaXMuY29tcHV0ZURlbmRyb2dyYW1Db2xvcih0aGlzLmNsdXN0ZXJlZFZlcnRpY2FsLCB0aGlzLmFuaW1hdGluZ1Jvd3MsIGFuaW1hdGlvblN0ZXApO1xyXG5cclxuICAgICAgICAvLyBDYWxjdWxhdGUgc2l6ZSBvZiBhbGwgdGhlIGRpZmZlcmVudCBpdGVtc1xyXG4gICAgICAgIGNvbnN0IHNxdWFyZVdpZHRoOiBudW1iZXIgPSB0aGlzLmRldGVybWluZVNxdWFyZVdpZHRoKCk7XHJcbiAgICAgICAgY29uc3QgZGVuZHJvZ3JhbVdpZHRoOiBudW1iZXIgPSB0aGlzLnNldHRpbmdzLmRlbmRyb2dyYW1XaWR0aCAqIHRoaXMubGFzdFpvb21TdGF0dXMuaztcclxuXHJcbiAgICAgICAgY29uc3QgcmVuZGVySGVscGVyOiBSZW5kZXJIZWxwZXIgPSBuZXcgQ2FudmFzUmVuZGVySGVscGVyKHRoaXMuY29udGV4dCk7XHJcblxyXG4gICAgICAgIGNvbnN0IHZlcnRpY2FsTGluZU9mZnNldDogbnVtYmVyID0gdGhpcy5jdXJyZW50Vmlld1BvcnQueVRvcCArIGRlbmRyb2dyYW1XaWR0aCArIHNxdWFyZVdpZHRoIC8gMjtcclxuXHJcbiAgICAgICAgLy8gTWFwcyBub2RlIHdpdGggaWQgaSB0byBpdCdzIGNvcnJlc3BvbmRpbmcgc3RhcnRpbmcgcG9zaXRpb24gKFt4LCB5XSk7XHJcbiAgICAgICAgY29uc3Qgbm9kZVBvc2l0aW9uczogTWFwPG51bWJlciwgW251bWJlciwgbnVtYmVyXT4gPSBuZXcgTWFwPG51bWJlciwgW251bWJlciwgbnVtYmVyXT4oKTtcclxuICAgICAgICBjb25zdCBuZXdSb3dQb3NpdGlvbnMgPSB0aGlzLmRldGVybWluZU9yZGVyKHRoaXMucm93Q2x1c3RlclJvb3QhKTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5ld1Jvd1Bvc2l0aW9ucy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBub2RlUG9zaXRpb25zLnNldChcclxuICAgICAgICAgICAgICAgIG5ld1Jvd1Bvc2l0aW9uc1tpXSxcclxuICAgICAgICAgICAgICAgIFtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRWaWV3UG9ydC54VG9wICsgZGVuZHJvZ3JhbVdpZHRoLFxyXG4gICAgICAgICAgICAgICAgICAgIGkgKiAoc3F1YXJlV2lkdGggKyB0aGlzLnNldHRpbmdzLnNxdWFyZVBhZGRpbmcpICsgdmVydGljYWxMaW5lT2Zmc2V0XHJcbiAgICAgICAgICAgICAgICBdXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBDYWxjdWxhdGUgdGhlIGFtb3VudCBvZiBwaXhlbHMgdGhhdCBjYW4gYmUgdXNlZCBmb3IgZWFjaCBtZXJnZVxyXG4gICAgICAgIGNvbnN0IHBpeGVsc1Blck1lcmdlOiBudW1iZXIgPSBkZW5kcm9ncmFtV2lkdGggLyB0aGlzLnJvd3MubGVuZ3RoO1xyXG4gICAgICAgIGxldCBjdXJyZW50TWVyZ2VTdGVwOiBudW1iZXIgPSB0aGlzLmN1cnJlbnRWaWV3UG9ydC54VG9wICsgZGVuZHJvZ3JhbVdpZHRoIC0gcGl4ZWxzUGVyTWVyZ2U7XHJcblxyXG4gICAgICAgIGZvciAobGV0IGN1cnJlbnREZXB0aCA9IHRoaXMudmVydGljYWxOb2Rlc1BlckRlcHRoLmxlbmd0aCAtIDE7IGN1cnJlbnREZXB0aCA+IDA7IGN1cnJlbnREZXB0aC0tKSB7XHJcbiAgICAgICAgICAgIC8vIFdlIG5lZWQgdG8gaXRlcmF0ZSBvdmVyIHRoZSBkaWZmZXJlbnQgbm9kZXMgaW4gaW5jcmVtZW50cyBvZiAyIChzaW5jZSB0aGVzZSBub2RlcyBkZWZpbmUgYSBtZXJnZSBwZXIgMilcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnZlcnRpY2FsTm9kZXNQZXJEZXB0aFtjdXJyZW50RGVwdGhdLmxlbmd0aDsgaSArPSAyKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBsZWZ0Q2hpbGQgPSB0aGlzLnZlcnRpY2FsTm9kZXNQZXJEZXB0aFtjdXJyZW50RGVwdGhdW2ldO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcmlnaHRDaGlsZCA9IHRoaXMudmVydGljYWxOb2Rlc1BlckRlcHRoW2N1cnJlbnREZXB0aF1baSArIDFdO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcGFyZW50ID0gbGVmdENoaWxkLnBhcmVudDtcclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCBbbGVmdFgsIGxlZnRZXSA9IG5vZGVQb3NpdGlvbnMuZ2V0KGxlZnRDaGlsZC5pZCkhO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgW3JpZ2h0WCwgcmlnaHRZXSA9IG5vZGVQb3NpdGlvbnMuZ2V0KHJpZ2h0Q2hpbGQuaWQpITtcclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgICAgICAgICAvLyBMaW5lIGZvciB0aGUgbGVmdCBjaGlsZFxyXG4gICAgICAgICAgICAgICAgcmVuZGVySGVscGVyLnJlbmRlckxpbmUobGVmdFgsIGxlZnRZLCBjdXJyZW50TWVyZ2VTdGVwLCBsZWZ0WSwgdGhpcy5zZXR0aW5ncy5kZW5kcm9ncmFtTGluZVdpZHRoLCBjbHVzdGVyQ29sb3IpO1xyXG4gICAgICAgICAgICAgICAgLy8gTGluZSBmb3IgcmlnaHQgY2hpbGRcclxuICAgICAgICAgICAgICAgIHJlbmRlckhlbHBlci5yZW5kZXJMaW5lKHJpZ2h0WCwgcmlnaHRZLCBjdXJyZW50TWVyZ2VTdGVwLCByaWdodFksIHRoaXMuc2V0dGluZ3MuZGVuZHJvZ3JhbUxpbmVXaWR0aCwgY2x1c3RlckNvbG9yKTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBEcmF3IHZlcnRpY2FsIGxpbmUgdGhhdCBjb25uZWN0cyBib3RoIGl0ZW1zXHJcbiAgICAgICAgICAgICAgICByZW5kZXJIZWxwZXIucmVuZGVyTGluZShjdXJyZW50TWVyZ2VTdGVwLCBsZWZ0WSwgY3VycmVudE1lcmdlU3RlcCwgcmlnaHRZLCB0aGlzLnNldHRpbmdzLmRlbmRyb2dyYW1MaW5lV2lkdGgsIGNsdXN0ZXJDb2xvcik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuY2xvc2VQYXRoKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gVXBkYXRlIHRoZSBzdGFydGluZyBwb3NpdGlvbiBvZiB0aGUgcGFyZW50IG5vZGUuXHJcbiAgICAgICAgICAgICAgICBpZiAocGFyZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbWVyZ2VQb2ludDogbnVtYmVyID0gTWF0aC5taW4obGVmdFksIHJpZ2h0WSkgKyBNYXRoLmFicyhsZWZ0WSAtIHJpZ2h0WSkgLyAyO1xyXG4gICAgICAgICAgICAgICAgICAgIG5vZGVQb3NpdGlvbnMuc2V0KHBhcmVudC5pZCwgW2N1cnJlbnRNZXJnZVN0ZXAsIG1lcmdlUG9pbnRdKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBjdXJyZW50TWVyZ2VTdGVwIC09IHBpeGVsc1Blck1lcmdlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoIXRoaXMuY2x1c3RlcmVkVmVydGljYWwpIHtcclxuICAgICAgICAgICAgdGhpcy5jb250ZXh0LnJvdGF0ZSgtKDkwICogTWF0aC5QSSkgLyAxODApO1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRleHQuZmlsbFN0eWxlID0gdGhpcy5zZXR0aW5ncy5sYWJlbENvbG9yO1xyXG4gICAgICAgICAgICBjb25zdCBmb250U2l6ZSA9IDI0ICogdGhpcy5sYXN0Wm9vbVN0YXR1cy5rO1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRleHQuZm9udCA9IGAke2ZvbnRTaXplfXB4ICdIZWx2ZXRpY2EgTmV1ZScsIEhlbHZldGljYSwgQXJpYWwsIHNhbnMtc2VyaWZgO1xyXG4gICAgICAgICAgICBjb25zdCB0ZXh0V2lkdGggPSB0aGlzLmNvbnRleHQubWVhc3VyZVRleHQoXCJDbGljayB0byBjbHVzdGVyXCIpLndpZHRoO1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRleHQuZmlsbFRleHQoXHJcbiAgICAgICAgICAgICAgICBcIkNsaWNrIHRvIGNsdXN0ZXJcIixcclxuICAgICAgICAgICAgICAgIC0odGhpcy5jdXJyZW50Vmlld1BvcnQueVRvcCArIGRlbmRyb2dyYW1XaWR0aCArICh0aGlzLnJvd3MubGVuZ3RoICogKHNxdWFyZVdpZHRoICsgdGhpcy5zZXR0aW5ncy5zcXVhcmVQYWRkaW5nKSkgLyAyKSAtIHRleHRXaWR0aCAvIDIsXHJcbiAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRWaWV3UG9ydC54VG9wICsgZGVuZHJvZ3JhbVdpZHRoIC8gMiArIGZvbnRTaXplIC8gMixcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuY29udGV4dC5yZXN0b3JlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSByZWRyYXdIb3Jpem9udGFsRGVuZHJvZ3JhbShhbmltYXRpb25TdGVwOiBudW1iZXIpIHtcclxuICAgICAgICB0aGlzLmNvbnRleHQuc2F2ZSgpO1xyXG5cclxuICAgICAgICBjb25zdCBjbHVzdGVyQ29sb3I6IHN0cmluZyA9IHRoaXMuY29tcHV0ZURlbmRyb2dyYW1Db2xvcih0aGlzLmNsdXN0ZXJlZEhvcml6b250YWwsIHRoaXMuYW5pbWF0aW5nQ29scywgYW5pbWF0aW9uU3RlcCk7XHJcblxyXG4gICAgICAgIC8vIENhbGN1bGF0ZSBzaXplIG9mIGFsbCB0aGUgZGlmZmVyZW50IGl0ZW1zXHJcbiAgICAgICAgY29uc3Qgc3F1YXJlV2lkdGg6IG51bWJlciA9IHRoaXMuZGV0ZXJtaW5lU3F1YXJlV2lkdGgoKTtcclxuICAgICAgICBjb25zdCBkZW5kcm9ncmFtV2lkdGg6IG51bWJlciA9IHRoaXMuc2V0dGluZ3MuZGVuZHJvZ3JhbVdpZHRoICogdGhpcy5sYXN0Wm9vbVN0YXR1cy5rO1xyXG5cclxuICAgICAgICBjb25zdCByZW5kZXJIZWxwZXI6IFJlbmRlckhlbHBlciA9IG5ldyBDYW52YXNSZW5kZXJIZWxwZXIodGhpcy5jb250ZXh0KTtcclxuXHJcbiAgICAgICAgY29uc3QgaG9yaXpvbnRhbExpbmVPZmZzZXQ6IG51bWJlciA9IHRoaXMuY3VycmVudFZpZXdQb3J0LnhUb3AgKyBzcXVhcmVXaWR0aCAvIDIgKyBkZW5kcm9ncmFtV2lkdGg7XHJcblxyXG4gICAgICAgIC8vIE1hcHMgbm9kZSB3aXRoIGlkIGkgdG8gaXQncyBjb3JyZXNwb25kaW5nIHN0YXJ0aW5nIHBvc2l0aW9uIChbeCwgeV0pO1xyXG4gICAgICAgIGNvbnN0IG5vZGVQb3NpdGlvbnM6IE1hcDxudW1iZXIsIFtudW1iZXIsIG51bWJlcl0+ID0gbmV3IE1hcDxudW1iZXIsIFtudW1iZXIsIG51bWJlcl0+KCk7XHJcbiAgICAgICAgY29uc3QgbmV3Q29sUG9zaXRpb25zID0gdGhpcy5kZXRlcm1pbmVPcmRlcih0aGlzLmNvbENsdXN0ZXJSb290KTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5ld0NvbFBvc2l0aW9ucy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBub2RlUG9zaXRpb25zLnNldChcclxuICAgICAgICAgICAgICAgIG5ld0NvbFBvc2l0aW9uc1tpXSxcclxuICAgICAgICAgICAgICAgIFtcclxuICAgICAgICAgICAgICAgICAgICBpICogKHNxdWFyZVdpZHRoICsgdGhpcy5zZXR0aW5ncy5zcXVhcmVQYWRkaW5nKSArIGhvcml6b250YWxMaW5lT2Zmc2V0LFxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudFZpZXdQb3J0LnlUb3AgKyBkZW5kcm9ncmFtV2lkdGhcclxuICAgICAgICAgICAgICAgIF1cclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIENhbGN1bGF0ZSB0aGUgYW1vdW50IG9mIHBpeGVscyB0aGF0IGNhbiBiZSB1c2VkIGZvciBlYWNoIG1lcmdlXHJcbiAgICAgICAgY29uc3QgcGl4ZWxzUGVyTWVyZ2U6IG51bWJlciA9IGRlbmRyb2dyYW1XaWR0aCAvIHRoaXMuY29sdW1ucy5sZW5ndGg7XHJcbiAgICAgICAgbGV0IGN1cnJlbnRNZXJnZVN0ZXA6IG51bWJlciA9IHRoaXMuY3VycmVudFZpZXdQb3J0LnlUb3AgKyBkZW5kcm9ncmFtV2lkdGggLSBwaXhlbHNQZXJNZXJnZTtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgY3VycmVudERlcHRoID0gdGhpcy5ob3Jpem9udGFsTm9kZXNQZXJEZXB0aC5sZW5ndGggLSAxOyBjdXJyZW50RGVwdGggPiAwOyBjdXJyZW50RGVwdGgtLSkge1xyXG4gICAgICAgICAgICAvLyBXZSBuZWVkIHRvIGl0ZXJhdGUgb3ZlciB0aGUgZGlmZmVyZW50IG5vZGVzIGluIGluY3JlbWVudHMgb2YgMiAoc2luY2UgdGhlc2Ugbm9kZXMgZGVmaW5lIGEgbWVyZ2UgcGVyIDIpXHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5ob3Jpem9udGFsTm9kZXNQZXJEZXB0aFtjdXJyZW50RGVwdGhdLmxlbmd0aDsgaSArPSAyKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBsZWZ0Q2hpbGQgPSB0aGlzLmhvcml6b250YWxOb2Rlc1BlckRlcHRoW2N1cnJlbnREZXB0aF1baV07XHJcbiAgICAgICAgICAgICAgICBjb25zdCByaWdodENoaWxkID0gdGhpcy5ob3Jpem9udGFsTm9kZXNQZXJEZXB0aFtjdXJyZW50RGVwdGhdW2kgKyAxXTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHBhcmVudCA9IGxlZnRDaGlsZC5wYXJlbnQ7XHJcblxyXG4gICAgICAgICAgICAgICAgY29uc3QgW2xlZnRYLCBsZWZ0WV0gPSBub2RlUG9zaXRpb25zLmdldChsZWZ0Q2hpbGQuaWQpITtcclxuICAgICAgICAgICAgICAgIGNvbnN0IFtyaWdodFgsIHJpZ2h0WV0gPSBub2RlUG9zaXRpb25zLmdldChyaWdodENoaWxkLmlkKSE7XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgICAgICAgICAgLy8gTGluZSBmb3IgdGhlIGxlZnQgY2hpbGRcclxuICAgICAgICAgICAgICAgIHJlbmRlckhlbHBlci5yZW5kZXJMaW5lKGxlZnRYLCBsZWZ0WSwgbGVmdFgsIGN1cnJlbnRNZXJnZVN0ZXAsIHRoaXMuc2V0dGluZ3MuZGVuZHJvZ3JhbUxpbmVXaWR0aCwgY2x1c3RlckNvbG9yKTtcclxuICAgICAgICAgICAgICAgIC8vIExpbmUgZm9yIHJpZ2h0IGNoaWxkXHJcbiAgICAgICAgICAgICAgICByZW5kZXJIZWxwZXIucmVuZGVyTGluZShyaWdodFgsIHJpZ2h0WSwgcmlnaHRYLCBjdXJyZW50TWVyZ2VTdGVwLCB0aGlzLnNldHRpbmdzLmRlbmRyb2dyYW1MaW5lV2lkdGgsIGNsdXN0ZXJDb2xvcik7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gRHJhdyBob3Jpem9udGFsIGxpbmUgdGhhdCBjb25uZWN0cyBib3RoIGl0ZW1zXHJcbiAgICAgICAgICAgICAgICByZW5kZXJIZWxwZXIucmVuZGVyTGluZShsZWZ0WCwgY3VycmVudE1lcmdlU3RlcCwgcmlnaHRYLCBjdXJyZW50TWVyZ2VTdGVwLCB0aGlzLnNldHRpbmdzLmRlbmRyb2dyYW1MaW5lV2lkdGgsIGNsdXN0ZXJDb2xvcik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuY2xvc2VQYXRoKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gVXBkYXRlIHRoZSBzdGFydGluZyBwb3NpdGlvbiBvZiB0aGUgcGFyZW50IG5vZGUuXHJcbiAgICAgICAgICAgICAgICBpZiAocGFyZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbWVyZ2VQb2ludDogbnVtYmVyID0gTWF0aC5taW4obGVmdFgsIHJpZ2h0WCkgKyBNYXRoLmFicyhsZWZ0WCAtIHJpZ2h0WCkgLyAyO1xyXG4gICAgICAgICAgICAgICAgICAgIG5vZGVQb3NpdGlvbnMuc2V0KHBhcmVudC5pZCwgW21lcmdlUG9pbnQsIGN1cnJlbnRNZXJnZVN0ZXBdKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBjdXJyZW50TWVyZ2VTdGVwIC09IHBpeGVsc1Blck1lcmdlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoIXRoaXMuY2x1c3RlcmVkSG9yaXpvbnRhbCkge1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRleHQuZmlsbFN0eWxlID0gdGhpcy5zZXR0aW5ncy5sYWJlbENvbG9yO1xyXG4gICAgICAgICAgICBjb25zdCBmb250U2l6ZSA9IDI0ICogdGhpcy5sYXN0Wm9vbVN0YXR1cy5rO1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRleHQuZm9udCA9IGAke2ZvbnRTaXplfXB4ICdIZWx2ZXRpY2EgTmV1ZScsIEhlbHZldGljYSwgQXJpYWwsIHNhbnMtc2VyaWZgO1xyXG4gICAgICAgICAgICBjb25zdCB0ZXh0V2lkdGggPSB0aGlzLmNvbnRleHQubWVhc3VyZVRleHQoXCJDbGljayB0byBjbHVzdGVyXCIpLndpZHRoO1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRleHQuZmlsbFRleHQoXHJcbiAgICAgICAgICAgICAgICBcIkNsaWNrIHRvIGNsdXN0ZXJcIixcclxuICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudFZpZXdQb3J0LnhUb3AgKyBkZW5kcm9ncmFtV2lkdGggKyAodGhpcy5jb2x1bW5zLmxlbmd0aCAqIChzcXVhcmVXaWR0aCArIHRoaXMuc2V0dGluZ3Muc3F1YXJlUGFkZGluZykpIC8gMiAtIHRleHRXaWR0aCAvIDIsXHJcbiAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRWaWV3UG9ydC55VG9wICsgZGVuZHJvZ3JhbVdpZHRoIC8gMiArIGZvbnRTaXplIC8gMixcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuY29udGV4dC5yZXN0b3JlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBpbml0VG9vbHRpcCgpIHtcclxuICAgICAgICByZXR1cm4gZDMuc2VsZWN0KFwiYm9keVwiKVxyXG4gICAgICAgICAgICAuYXBwZW5kKFwiZGl2XCIpXHJcbiAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJ0aXBcIilcclxuICAgICAgICAgICAgLnN0eWxlKFwicG9zaXRpb25cIiwgXCJhYnNvbHV0ZVwiKVxyXG4gICAgICAgICAgICAuc3R5bGUoXCJ6LWluZGV4XCIsIFwiMTBcIilcclxuICAgICAgICAgICAgLnN0eWxlKFwidmlzaWJpbGl0eVwiLCBcImhpZGRlblwiKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGZpbmRSb3dBbmRDb2xGb3JQb3NpdGlvbih4OiBudW1iZXIsIHk6IG51bWJlcik6IFtudW1iZXIsIG51bWJlcl0ge1xyXG4gICAgICAgIGNvbnN0IGRlbmRyb2dyYW1XaWR0aCA9IHRoaXMuZGV0ZXJtaW5lRGVuZHJvZ3JhbVdpZHRoKCk7XHJcbiAgICAgICAgY29uc3QgY3VycmVudFggPSB4IC0gdGhpcy5jdXJyZW50Vmlld1BvcnQueFRvcCAtIGRlbmRyb2dyYW1XaWR0aDtcclxuICAgICAgICBjb25zdCBjdXJyZW50WSA9IHkgLSB0aGlzLmN1cnJlbnRWaWV3UG9ydC55VG9wIC0gZGVuZHJvZ3JhbVdpZHRoO1xyXG5cclxuICAgICAgICBjb25zdCBzcXVhcmVXaWR0aCA9IHRoaXMuZGV0ZXJtaW5lU3F1YXJlV2lkdGgoKTtcclxuXHJcbiAgICAgICAgY29uc3Qgcm93ID0gTWF0aC5mbG9vcihjdXJyZW50WSAvIChzcXVhcmVXaWR0aCArIHRoaXMuc2V0dGluZ3Muc3F1YXJlUGFkZGluZykpO1xyXG4gICAgICAgIGNvbnN0IGNvbCA9IE1hdGguZmxvb3IoY3VycmVudFggLyAoc3F1YXJlV2lkdGggKyB0aGlzLnNldHRpbmdzLnNxdWFyZVBhZGRpbmcpKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIFtyb3csIGNvbF07XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSB0b29sdGlwTW92ZShldmVudDogTW91c2VFdmVudCkge1xyXG4gICAgICAgIC8vIEZpbmQgb3V0IHdoaWNoIGVsZW1lbnQgaXMgc2l0dWF0ZWQgdW5kZXIgdGhlIGN1cnJlbnQgbW91c2UgcG9zaXRpb24uXHJcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgIGNvbnN0IHJlY3QgPSBldmVudC50YXJnZXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcbiAgICAgICAgY29uc3QgW3JvdywgY29sXSA9IHRoaXMuZmluZFJvd0FuZENvbEZvclBvc2l0aW9uKGV2ZW50LmNsaWVudFggLSByZWN0LmxlZnQsIGV2ZW50LmNsaWVudFkgLSByZWN0LnRvcCk7XHJcblxyXG4gICAgICAgIGlmIChyb3cgPCAwIHx8IHJvdyA+PSB0aGlzLnJvd3MubGVuZ3RoIHx8IGNvbCA8IDAgfHwgY29sID49IHRoaXMuY29sdW1ucy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3MuZW5hYmxlVG9vbHRpcHMgJiYgdGhpcy50b29sdGlwKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnRvb2x0aXAuc3R5bGUoXCJ2aXNpYmlsaXR5XCIsIFwiaGlkZGVuXCIpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLmhpZ2hsaWdodGVkUm93ID0gLTE7XHJcbiAgICAgICAgICAgIHRoaXMuaGlnaGxpZ2h0ZWRDb2x1bW4gPSAtMTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLnNldHRpbmdzLmhpZ2hsaWdodFNlbGVjdGlvbikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yZWRyYXcoKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5oaWdobGlnaHRlZFJvdyA9IHJvdztcclxuICAgICAgICB0aGlzLmhpZ2hsaWdodGVkQ29sdW1uID0gY29sO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5oaWdobGlnaHRTZWxlY3Rpb24pIHtcclxuICAgICAgICAgICAgdGhpcy5yZWRyYXcoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnNldHRpbmdzLmVuYWJsZVRvb2x0aXBzICYmIHRoaXMudG9vbHRpcCkge1xyXG4gICAgICAgICAgICB0aGlzLnRvb2x0aXAuaHRtbCh0aGlzLnNldHRpbmdzLmdldFRvb2x0aXAodGhpcy52YWx1ZXNbcm93XVtjb2xdLCB0aGlzLnJvd3Nbcm93XSwgdGhpcy5jb2x1bW5zW2NvbF0pKVxyXG4gICAgICAgICAgICAgICAgLnN0eWxlKFwidG9wXCIsIChldmVudC5wYWdlWSArIDEwKSArIFwicHhcIilcclxuICAgICAgICAgICAgICAgIC5zdHlsZShcImxlZnRcIiwgKGV2ZW50LnBhZ2VYICsgMTApICsgXCJweFwiKVxyXG4gICAgICAgICAgICAgICAgLnN0eWxlKFwidmlzaWJpbGl0eVwiLCBcInZpc2libGVcIik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogRGV0ZXJtaW5lcyBpZiBhIGNsaWNrIG9jY3VycmVkIG9uIG9uZSBvZiB0aGUgZGVuZHJvZ3JhbXMgYW5kIGlmIGNsdXN0ZXJpbmcgc2hvdWxkIGJlIGFwcGxpZWQgdG8gdGhlIGhlYXRtYXAuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIGV2ZW50XHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGNsaWNrKGV2ZW50OiBNb3VzZUV2ZW50KSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLnNldHRpbmdzLmRlbmRyb2dyYW1FbmFibGVkKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGRlbmRyb1dpZHRoID0gdGhpcy5kZXRlcm1pbmVEZW5kcm9ncmFtV2lkdGgoKTtcclxuICAgICAgICBjb25zdCBzcXVhcmVXaWR0aCA9IHRoaXMuZGV0ZXJtaW5lU3F1YXJlV2lkdGgoKTtcclxuXHJcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgIGNvbnN0IHJlY3QgPSBldmVudC50YXJnZXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcbiAgICAgICAgY29uc3QgeCA9IGV2ZW50LmNsaWVudFggLSByZWN0LmxlZnQ7XHJcbiAgICAgICAgY29uc3QgeSA9IGV2ZW50LmNsaWVudFkgLSByZWN0LnRvcDtcclxuXHJcbiAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICB4ID49IHRoaXMuY3VycmVudFZpZXdQb3J0LnhUb3AgJiZcclxuICAgICAgICAgICAgeCA8PSB0aGlzLmN1cnJlbnRWaWV3UG9ydC54VG9wICsgZGVuZHJvV2lkdGggJiZcclxuICAgICAgICAgICAgeSA+PSB0aGlzLmN1cnJlbnRWaWV3UG9ydC55VG9wICsgZGVuZHJvV2lkdGggJiZcclxuICAgICAgICAgICAgeSA8PSB0aGlzLmN1cnJlbnRWaWV3UG9ydC55VG9wICsgZGVuZHJvV2lkdGggKyB0aGlzLnJvd3MubGVuZ3RoICogKHNxdWFyZVdpZHRoICsgdGhpcy5zZXR0aW5ncy5zcXVhcmVQYWRkaW5nKVxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICAvLyBDbGlja2VkIG9uIHRoZSB2ZXJ0aWNhbCBkZW5kcm9ncmFtIChhbmQgdGh1cyBjbHVzdGVyIHZlcnRpY2FsbHkpXHJcbiAgICAgICAgICAgIHRoaXMuY2x1c3RlcihcInJvd3NcIik7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChcclxuICAgICAgICAgICAgeCA+PSB0aGlzLmN1cnJlbnRWaWV3UG9ydC54VG9wICsgZGVuZHJvV2lkdGggJiZcclxuICAgICAgICAgICAgeCA8PSB0aGlzLmN1cnJlbnRWaWV3UG9ydC54VG9wICsgZGVuZHJvV2lkdGggKyB0aGlzLmNvbHVtbnMubGVuZ3RoICogKHNxdWFyZVdpZHRoICsgdGhpcy5zZXR0aW5ncy5zcXVhcmVQYWRkaW5nKSAmJlxyXG4gICAgICAgICAgICB5ID49IHRoaXMuY3VycmVudFZpZXdQb3J0LnlUb3AgJiZcclxuICAgICAgICAgICAgeSA8PSB0aGlzLmN1cnJlbnRWaWV3UG9ydC55VG9wICsgZGVuZHJvV2lkdGhcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgdGhpcy5jbHVzdGVyKFwiY29sdW1uc1wiKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgTWV0cmljIGZyb20gXCIuL01ldHJpY1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQZWFyc29uQ29ycmVsYXRpb25NZXRyaWMgaW1wbGVtZW50cyBNZXRyaWMge1xuICAgIGdldERpc3RhbmNlKG1hdHJpeDogbnVtYmVyW11bXSk6IG51bWJlcltdW10ge1xuICAgICAgICBsZXQgb3V0cHV0OiBudW1iZXJbXVtdID0gW107XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtYXRyaXgubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGxldCByb3c6IG51bWJlcltdID0gW107XG4gICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8PSBpOyBqKyspIHtcbiAgICAgICAgICAgICAgICByb3cucHVzaCh0aGlzLmdldFBlYXJzb25Db3JyZWxhdGlvbkJldHdlZW4yU2FtcGxlcyhtYXRyaXhbaV0sIG1hdHJpeFtqXSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb3V0cHV0LnB1c2gocm93KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBvdXRwdXQ7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXRQZWFyc29uQ29ycmVsYXRpb25CZXR3ZWVuMlNhbXBsZXMoeDogbnVtYmVyW10sIHk6IG51bWJlcltdKSB7XG4gICAgICAgIGNvbnN0IHN1bSA9IChhOiBudW1iZXIsIGI6IG51bWJlcikgPT4gYSArIGI7XG4gICAgICAgIGNvbnN0IHhNZWFuID0geC5yZWR1Y2Uoc3VtLCAwKSAvIHgubGVuZ3RoO1xuICAgICAgICBjb25zdCB5TWVhbiA9IHkucmVkdWNlKHN1bSwgMCkgLyB5Lmxlbmd0aDtcblxuICAgICAgICBsZXQgbnVtZXJhdG9yID0gMDtcbiAgICAgICAgbGV0IGRlbm9taW5hdG9yID0gMDtcblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHgubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIG51bWVyYXRvciArPSAoeFtpXSAtIHhNZWFuKSAqICh5W2ldIC0geU1lYW4pO1xuICAgICAgICAgICAgZGVub21pbmF0b3IgKz0gTWF0aC5zcXJ0KE1hdGgucG93KCh4W2ldIC0geE1lYW4pLCAyKSkgKiBNYXRoLnNxcnQoTWF0aC5wb3coKHlbaV0gLSB5TWVhbiksIDIpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAxIC0gbnVtZXJhdG9yIC8gZGVub21pbmF0b3I7XG4gICAgfVxufVxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29sb3JQYWxldHRlIHtcbiAgICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IERFRkFVTFRfQ09MT1JTID0gW1xuICAgICAgICBcIiNmOWYwYWJcIixcbiAgICAgICAgXCIjZThlNTk2XCIsXG4gICAgICAgIFwiI2YwZTJhM1wiLFxuICAgICAgICBcIiNlZGU0ODdcIixcbiAgICAgICAgXCIjZWZkNTgwXCIsXG4gICAgICAgIFwiI2YxY2I4MlwiLFxuICAgICAgICBcIiNmMWMyOThcIixcbiAgICAgICAgXCIjZThiNTk4XCIsXG4gICAgICAgIFwiI2Q1ZGRhMVwiLFxuICAgICAgICBcIiNjOWQyYjVcIixcbiAgICAgICAgXCIjYWVjMWFkXCIsXG4gICAgICAgIFwiI2E3YjhhOFwiLFxuICAgICAgICBcIiNiNDlhM2RcIixcbiAgICAgICAgXCIjYjI4NjQ3XCIsXG4gICAgICAgIFwiI2E5N2QzMlwiLFxuICAgICAgICBcIiNiNjgzMzRcIixcbiAgICAgICAgXCIjZDZhNjgwXCIsXG4gICAgICAgIFwiI2RmYWQ3MFwiLFxuICAgICAgICBcIiNhMjc2NWRcIixcbiAgICAgICAgXCIjOWY2NjUyXCIsXG4gICAgICAgIFwiI2I5NzYzZlwiLFxuICAgICAgICBcIiNiZjZlNWRcIixcbiAgICAgICAgXCIjYWY2NDNjXCIsXG4gICAgICAgIFwiIzliNGMzZlwiLFxuICAgICAgICBcIiM3MjY1OWRcIixcbiAgICAgICAgXCIjOGE2ZTllXCIsXG4gICAgICAgIFwiIzhmNWM4NVwiLFxuICAgICAgICBcIiM5MzRiOGJcIixcbiAgICAgICAgXCIjOWQ0ZTg3XCIsXG4gICAgICAgIFwiIzkyNTM4Y1wiLFxuICAgICAgICBcIiM4YjYzOTdcIixcbiAgICAgICAgXCIjNzE2MDg0XCIsXG4gICAgICAgIFwiIzJlNjA5M1wiLFxuICAgICAgICBcIiMzYTU5ODhcIixcbiAgICAgICAgXCIjNGE1MDcyXCIsXG4gICAgICAgIFwiIzM5M2U2NFwiLFxuICAgICAgICBcIiNhYWExY2NcIixcbiAgICAgICAgXCIjZTBiNWM5XCIsXG4gICAgICAgIFwiI2UwOThiMFwiLFxuICAgICAgICBcIiNlZTgyYTJcIixcbiAgICAgICAgXCIjZWY5MWFjXCIsXG4gICAgICAgIFwiI2VkYTk5NFwiLFxuICAgICAgICBcIiNlZWI3OThcIixcbiAgICAgICAgXCIjZWNjMDk5XCIsXG4gICAgICAgIFwiI2Y2ZDVhYVwiLFxuICAgICAgICBcIiNmMGQ0OGFcIixcbiAgICAgICAgXCIjZWZkOTVmXCIsXG4gICAgICAgIFwiI2VlZTQ2OVwiLFxuICAgICAgICBcIiNkYmRjN2ZcIixcbiAgICAgICAgXCIjZGZkOTYxXCIsXG4gICAgICAgIFwiI2ViZTM3OFwiLFxuICAgICAgICBcIiNmNWUzNTFcIlxuICAgIF07XG5cbiAgICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IEZJWEVEX0NPTE9SUyA9IFtcbiAgICAgICAgXCIjMWY3N2I0XCIsXG4gICAgICAgIFwiI2FlYzdlOFwiLFxuICAgICAgICBcIiNmZjdmMGVcIixcbiAgICAgICAgXCIjZmZiYjc4XCIsXG4gICAgICAgIFwiIzJjYTAyY1wiLFxuICAgICAgICBcIiM5OGRmOGFcIixcbiAgICAgICAgXCIjZDYyNzI4XCIsXG4gICAgICAgIFwiI2ZmOTg5NlwiLFxuICAgICAgICBcIiM5NDY3YmRcIixcbiAgICAgICAgXCIjYzViMGQ1XCIsXG4gICAgICAgIFwiIzhjNTY0YlwiLFxuICAgICAgICBcIiNjNDljOTRcIixcbiAgICAgICAgXCIjZTM3N2MyXCIsXG4gICAgICAgIFwiI2Y3YjZkMlwiLFxuICAgICAgICBcIiM3ZjdmN2ZcIixcbiAgICAgICAgXCIjYzdjN2M3XCIsXG4gICAgICAgIFwiI2JjYmQyMlwiLFxuICAgICAgICBcIiNkYmRiOGRcIixcbiAgICAgICAgXCIjMTdiZWNmXCIsXG4gICAgICAgIFwiIzllZGFlNVwiLFxuICAgICAgICBcIiMzOTNiNzlcIixcbiAgICAgICAgXCIjNTI1NGEzXCIsXG4gICAgICAgIFwiIzZiNmVjZlwiLFxuICAgICAgICBcIiM5YzllZGVcIixcbiAgICAgICAgXCIjNjM3OTM5XCIsXG4gICAgICAgIFwiIzhjYTI1MlwiLFxuICAgICAgICBcIiNiNWNmNmJcIixcbiAgICAgICAgXCIjY2VkYjljXCIsXG4gICAgICAgIFwiIzhjNmQzMVwiLFxuICAgICAgICBcIiNiZDllMzlcIixcbiAgICAgICAgXCIjZTdiYTUyXCIsXG4gICAgICAgIFwiI2U3Y2I5NFwiLFxuICAgICAgICBcIiM4NDNjMzlcIixcbiAgICAgICAgXCIjYWQ0OTRhXCIsXG4gICAgICAgIFwiI2Q2NjE2YlwiLFxuICAgICAgICBcIiNlNzk2OWNcIixcbiAgICAgICAgXCIjN2I0MTczXCIsXG4gICAgICAgIFwiI2E1NTE5NFwiLFxuICAgICAgICBcIiNjZTZkYmRcIixcbiAgICAgICAgXCIjZGU5ZWQ2XCIsXG4gICAgICAgIFwiIzMxODJiZFwiLFxuICAgICAgICBcIiM2YmFlZDZcIixcbiAgICAgICAgXCIjOWVjYWUxXCIsXG4gICAgICAgIFwiI2M2ZGJlZlwiLFxuICAgICAgICBcIiNlNjU1MGRcIixcbiAgICAgICAgXCIjZmQ4ZDNjXCIsXG4gICAgICAgIFwiI2ZkYWU2YlwiLFxuICAgICAgICBcIiNmZGQwYTJcIixcbiAgICAgICAgXCIjMzFhMzU0XCIsXG4gICAgICAgIFwiIzc0YzQ3NlwiLFxuICAgICAgICBcIiNhMWQ5OWJcIixcbiAgICAgICAgXCIjYzdlOWMwXCIsXG4gICAgICAgIFwiIzc1NmJiMVwiLFxuICAgICAgICBcIiM5ZTlhYzhcIixcbiAgICAgICAgXCIjYmNiZGRjXCIsXG4gICAgICAgIFwiI2RhZGFlYlwiLFxuICAgICAgICBcIiM2MzYzNjNcIixcbiAgICAgICAgXCIjOTY5Njk2XCIsXG4gICAgICAgIFwiI2JkYmRiZFwiLFxuICAgICAgICBcIiNkOWQ5ZDlcIlxuICAgIF07XG5cbiAgICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IE1BVEVSSUFMX0RFU0lHTl9DT0xPUlMgPSBbXG4gICAgICAgIFwiI2VmNTM1MFwiLFxuICAgICAgICBcIiNlYzQwN2FcIixcbiAgICAgICAgXCIjYWI0N2JjXCIsXG4gICAgICAgIFwiIzdlNTdjMlwiLFxuICAgICAgICBcIiM1YzZiYzBcIixcbiAgICAgICAgXCIjNDJhNWY1XCIsXG4gICAgICAgIFwiIzI5YjZmNlwiLFxuICAgICAgICBcIiMyNmM2ZGFcIixcbiAgICAgICAgXCIjMjZhNjlhXCIsXG4gICAgICAgIFwiIzY2YmI2YVwiLFxuICAgICAgICBcIiM5Y2NjNjVcIixcbiAgICAgICAgXCIjZDRlMTU3XCIsXG4gICAgICAgIFwiI2ZmZWU1OFwiLFxuICAgICAgICBcIiNmZmNhMjhcIixcbiAgICAgICAgXCIjZmZhNzI2XCIsXG4gICAgICAgIFwiI2ZmNzA0M1wiLFxuICAgICAgICBcIiM4ZDZlNjNcIlxuICAgIF07XG59XG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBTdHJpbmdVdGlscyB7XG4gICAgLyoqXG4gICAgICogSGFzaCBmdW5jdGlvbiBmb3Igc3RyaW5ncyBmcm9tIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzE1NzEwNjkyLzg2NTY5NlxuICAgICAqL1xuICAgIHN0YXRpYyBzdHJpbmdIYXNoKHM6IHN0cmluZyk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiBzLnNwbGl0KFwiXCIpLnJlZHVjZShmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgICAgICBsZXQgYyA9ICgoYSA8PCA1KSAtIGEpICsgYi5jaGFyQ29kZUF0KDApO1xuICAgICAgICAgICAgcmV0dXJuIGMgJiBjO1xuICAgICAgICB9LCAwKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgU2V0dGluZ3MgZnJvbSBcIi4vLi4vLi4vU2V0dGluZ3NcIjtcbmltcG9ydCBEYXRhTm9kZSAgZnJvbSBcIi4vLi4vLi4vRGF0YU5vZGVcIjtcbmltcG9ydCBDb2xvclBhbGV0dGUgZnJvbSBcIi4vLi4vLi4vY29sb3IvQ29sb3JQYWxldHRlXCI7XG5pbXBvcnQgU3RyaW5nVXRpbHMgZnJvbSBcIi4vLi4vLi4vdXRpbGl0aWVzL1N0cmluZ1V0aWxzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFN1bmJ1cnN0U2V0dGluZ3MgZXh0ZW5kcyBTZXR0aW5ncyB7XG4gICAgLyoqXG4gICAgICogUmFkaXVzIHNpemUgb2YgdGhlIHN1bmJ1cnN0IHZpc3VhbGl6YXRpb24gKGluIHBpeGVscykuXG4gICAgICovXG4gICAgcmFkaXVzOiBudW1iZXIgPSAzMDA7XG5cbiAgICAvKipcbiAgICAgKiBBbW91bnQgb2YgcGl4ZWxzIHRoYXQgYXJlIHJlc2VydmVkIGZvciB0aGUgYnJlYWRjcnVtYnMgKHRvIHRoZSByaWdodCBvZiB0aGUgc3VuYnVyc3QgdmlzdWFsaXphdGlvbiBpdHNlbGYpLlxuICAgICAqL1xuICAgIGJyZWFkY3J1bWJXaWR0aDogbnVtYmVyID0gMjAwO1xuXG4gICAgLyoqXG4gICAgICogQ2xhc3NuYW1lIHRoYXQncyBpbnRlcm5hbGx5IHVzZWQgZm9yIHRoZSBvYmplY3QuXG4gICAgICovXG4gICAgY2xhc3NOYW1lOiBzdHJpbmcgPSBcInN1bmJ1cnN0XCI7XG5cbiAgICAvKipcbiAgICAgKiBTaG91bGQgdGhlIGNvbG9ycyB0aGF0IGFyZSB1c2VkIHRvIG1hcmsgbm9kZXMgYmUgYmFzZWQgdXBvbiB0aGUgbGFiZWwtbmFtZXM/IChJLmUuIGlmIHRoaXMgaXMgZW5hYmxlZCwgYWxsIG5vZGVzXG4gICAgICogd2l0aCB0aGUgc2FtZSBsYWJlbCwgd2lsbCByZWNlaXZlIHRoZSBzYW1lIGNvbG9yKS5cbiAgICAgKi9cbiAgICB1c2VGaXhlZENvbG9yczogYm9vbGVhbiA9IGZhbHNlO1xuXG4gICAgLyoqXG4gICAgICogRGVmYXVsdCBjb2xvciBwYWxldHRlIHRoYXQgc2hvdWxkIGJlIHVzZWQgZm9yIHRoZSBub2RlIGNvbG9ycy4gVXNlIG9uZSBvZiB0aGUgcHJlZGVmaW5lZCBwYWxldHRlcyBmcm9tIHRoZVxuICAgICAqIENvbG9yUGFsZXR0ZS1jbGFzcyBpZiB5b3UgZG9uJ3QgZmVlbCBpbnNwaXJlZC5cbiAgICAgKi9cbiAgICBjb2xvclBhbGV0dGU6IHN0cmluZ1tdID0gQ29sb3JQYWxldHRlLkRFRkFVTFRfQ09MT1JTO1xuXG4gICAgLyoqXG4gICAgICogQ29sb3IgcGFsZXR0ZSB0aGF0IHNob3VsZCBiZSB1c2VkIGlmIHRoZSB1c2VGaXhlZENvbG9ycyBvcHRpb24gaXMgZW5hYmxlZC5cbiAgICAgKi9cbiAgICBmaXhlZENvbG9yUGFsZXR0ZTogc3RyaW5nW10gPSBDb2xvclBhbGV0dGUuRklYRURfQ09MT1JTO1xuXG4gICAgLyoqXG4gICAgICogU2hvdWxkIGJyZWFkY3J1bWJzIGJlIHNob3duIHRvIHRoZSByaWdodCBvZiB0aGUgc3VuYnVyc3QgdmlzdWFsaXphdGlvbj9cbiAgICAgKi9cbiAgICBlbmFibGVCcmVhZGNydW1iczogYm9vbGVhbiA9IHRydWU7XG5cbiAgICAvKipcbiAgICAgKiBXaXRoIGhvdyBtYW55IGxldmVscyBjYW4gdGhlIHVzZXIgaW50ZXJhY3QgaW4gdGhlIHN1bmJ1cnN0IHZpc3VhbGl6YXRpb24/XG4gICAgICovXG4gICAgbGV2ZWxzOiBudW1iZXIgPSA0O1xuXG4gICAgLyoqXG4gICAgICogSG93IGxvbmcgc2hvdWxkIHRoZSBzdW5idXJzdCB2aXN1YWxpemF0aW9uIGFuaW1hdGlvbiB0YWtlIChpbiBtaWxsaXNlY29uZHMpP1xuICAgICAqL1xuICAgIGFuaW1hdGlvbkR1cmF0aW9uOiBudW1iZXIgPSAxMDAwO1xuXG4gICAgLyoqXG4gICAgICogQ2FsbGJhY2sgdGhhdCdzIGNhbGxlZCB3aGVuZXZlciB0aGUgdXNlciBjbGlja3Mgb24gYSBub2RlIGluIHRoZSB2aXN1YWxpemF0aW9uLlxuICAgICAqL1xuICAgIHJlcm9vdENhbGxiYWNrOiAobm9kZTogRGF0YU5vZGUpID0+IHZvaWQgPSAoKSA9PiB7fTtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGhhc2ggdGhhdCdzIHVzZWQgdG8gZGV0ZXJtaW5lIHdoaWNoIGNvbG9yIHNob3VsZCBiZSBhc3NpZ25lZCB0byB0aGlzIGRhdGFub2RlLiBUaGUgaGFzaCBzaG91bGQgYmVcbiAgICAgKiBhIG51bWJlci4gSGFzaCBzaG91bGQgYmUgdGhlIHNhbWUgZm9yIGFsbCBub2RlcyB0byB3aGljaCB0aGUgc2FtZSBjb2xvciBzaG91bGQgYmUgYXNzaWduZWQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbm9kZSBUaGUgRGF0YU5vZGUgZm9yIHdoaWNoIHRoZSBjdXJyZW50IGhhc2ggc2hvdWxkIGJlIHJldHVybmVkLlxuICAgICAqL1xuICAgIGZpeGVkQ29sb3JIYXNoOiAobm9kZTogRGF0YU5vZGUpID0+IG51bWJlciA9IChub2RlOiBEYXRhTm9kZSkgPT4gU3RyaW5nVXRpbHMuc3RyaW5nSGFzaChub2RlLm5hbWUpO1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgaHRtbCB0byB1c2UgYXMgdG9vbHRpcCBmb3IgY3VycmVudCBtb3VzZSBwb3NpdGlvbi4gVGhpcyB0b29sdGlwIHByb3ZpZGVzIGluZm9ybWF0aW9uIHRvIHRoZSB1c2VyXG4gICAgICogYWJvdXQgdGhlIG5vZGUgdGhhdCdzIGN1cnJlbnRseSBob3ZlcmVkIGJ5IHRoZSBtb3VzZSBjdXJzb3IuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdmFsdWUgQ3VycmVudCBub2RlIHRoYXQncyBiZWluZyBob3ZlcmVkIGJ5IHRoZSBtb3VzZSBjdXJzb3IuXG4gICAgICogQHJldHVybiBBIHZhbGlkIEhUTUwtc3RyaW5nIHRoYXQgcmVwcmVzZW50cyBhIHRvb2x0aXAuXG4gICAgICovXG4gICAgZ2V0VG9vbHRpcDogKFxuICAgICAgICB2YWx1ZTogRGF0YU5vZGUsXG4gICAgKSA9PiBzdHJpbmcgPSAodmFsdWU6IERhdGFOb2RlKSA9PiB7XG4gICAgICAgIHJldHVybiBgXG4gICAgICAgICAgICA8c3R5bGU+XG4gICAgICAgICAgICAgICAgLnVuaXBlcHQtdG9vbHRpcCB7XG4gICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6IDEwcHg7XG4gICAgICAgICAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDVweDsgXG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6IHJnYmEoMCwgMCwgMCwgMC44KTsgXG4gICAgICAgICAgICAgICAgICAgIGNvbG9yOiAjZmZmO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAudW5pcGVwdC10b29sdGlwIGRpdiwgLnVuaXBlcHQtdG9vbHRpcCBhIHtcbiAgICAgICAgICAgICAgICAgICAgZm9udC1mYW1pbHk6IFJvYm90bywgJ0hlbHZldGljYSBOZXVlJywgSGVsdmV0aWNhLCBBcmlhbCwgc2Fucy1zZXJpZjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLnVuaXBlcHQtdG9vbHRpcCBkaXYge1xuICAgICAgICAgICAgICAgICAgICBmb250LXdlaWdodDogYm9sZDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICA8L3N0eWxlPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInVuaXBlcHQtdG9vbHRpcFwiPlxuICAgICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgICAgICR7dGhpcy5nZXRUb29sdGlwVGl0bGUodmFsdWUpfVxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDxhPlxuICAgICAgICAgICAgICAgICAgICAke3RoaXMuZ2V0VG9vbHRpcFRleHQodmFsdWUpfVxuICAgICAgICAgICAgICAgIDwvYT5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICBgXG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGV4dCB0aGF0J3MgYmVpbmcgdXNlZCBmb3IgdGhlIHRpdGxlIG9mIGEgdG9vbHRpcC4gVGhpcyB0b29sdGlwIHByb3ZpZGVzIGluZm9ybWF0aW9uIHRvIHRoZSB1c2VyIGFib3V0XG4gICAgICogdGhlIG5vZGUgdGhhdCdzIGN1cnJlbnRseSBob3ZlcmVkIGJ5IHRoZSBtb3VzZSBjdXJzb3IuXG4gICAgICpcbiAgICAgKiBUaGlzIGZ1bmN0aW9uIHJldHVybnMgdGhlIHJvdyBhbmQgY29sdW1uIHRpdGxlIG9mIHRoZSBjdXJyZW50bHkgc2VsZWN0ZWQgdmFsdWUgYnkgZGVmYXVsdC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB2YWx1ZSBDdXJyZW50IG5vZGUgdGhhdCdzIGJlaW5nIGhvdmVyZWQgYnkgdGhlIG1vdXNlIGN1cnNvci5cbiAgICAgKiBAcmV0dXJuIFRleHQgY29udGVudCB0aGF0IHNob3VsZCBiZSB1c2VkIGZvciB0aGUgaGVhZGVyIG9mIHRoZSB0b29sdGlwLlxuICAgICAqL1xuICAgIGdldFRvb2x0aXBUaXRsZTogKHZhbHVlOiBEYXRhTm9kZSwpID0+IHN0cmluZyA9ICh2YWx1ZTogRGF0YU5vZGUpID0+IHZhbHVlLm5hbWU7XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRleHQgdGhhdCdzIGJlaW5nIHVzZWQgZm9yIHRoZSBib2R5IG9mIGEgdG9vbHRpcC4gVGhpcyB0b29sdGlwIHByb3ZpZGVzIGluZm9ybWF0aW9uIHRvIHRoZSB1c2VyIGFib3V0XG4gICAgICogdGhlIG5vZGUgdGhhdCdzIGN1cnJlbnRseSBob3ZlcmVkIGJ5IHRoZSBtb3VzZSBjdXJzb3IuXG4gICAgICpcbiAgICAgKiBAcGFyYW0geCBDdXJyZW50IHZhbHVlIGZvciB0aGUgbm9kZSB0aGF0J3MgYmVpbmcgaG92ZXJlZCBieSB0aGUgbW91c2UgY3Vyc29yLlxuICAgICAqIEByZXR1cm4gVGV4dCBjb250ZW50IHRoYXQgc2hvdWxkIGJlIHVzZWQgZm9yIHRoZSBoZWFkZXIgb2YgdGhlIHRvb2x0aXAuXG4gICAgICovXG4gICAgZ2V0VG9vbHRpcFRleHQ6ICh4OiBEYXRhTm9kZSkgPT4gc3RyaW5nID0gKHg6IERhdGFOb2RlKSA9PiBgJHt4LmNvdW50fSBoaXRzYDtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGxhYmVsIHRoYXQgc2hvdWxkIGJlIGRpc3BsYXllZCBmb3IgYSBzcGVjaWZpYyBub2RlICh0aGUgbGFiZWwgY29ycmVzcG9uZHMgdG8gdGhlIHRleHQgc2hvd24gaW4gdGhlXG4gICAgICogdmlzdWFsaXphdGlvbiBvbiB0b3Agb2YgYW4gYXJjKS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB4IE5vZGUgZm9yIHdoaWNoIHRoZSBsYWJlbCBzaG91bGQgYmUgcmVuZGVyZWQuXG4gICAgICogQHJldHVybiBUaGUgbGFiZWwgdGV4dCwgZXhhY3RseSBhcyBpdCBzaG91bGQgYmUgdXNlZCBieSB0aGUgdmlzdWFsaXphdGlvbi5cbiAgICAgKi9cbiAgICBnZXRMYWJlbDogKHg6IERhdGFOb2RlKSA9PiBzdHJpbmcgPSAoeDogRGF0YU5vZGUpID0+IHgubmFtZSA9PT0gXCJlbXB0eVwiID8gXCJcIiA6IHgubmFtZTtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGxhYmVsIG9yIHRpdGxlIHRleHQgdGhhdCdzIGFzc29jaWF0ZWQgdG8gYSBicmVhZGNydW1iIGZvciBhIHNwZWNpZmljIG5vZGUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0geCBOb2RlIGZvciB3aGljaCB0aGUgbGFiZWwgLyB0aXRsZSB0ZXh0IHNob3VsZCBiZSByZW5kZXJlZC5cbiAgICAgKiBAcmV0dXJuIFRoZSB0aXRsZSB0aGF0IHNob3VsZCBiZSBhc3NvY2lhdGVkIHdpdGggYSBicmVhZGNydW1iIGZvciB0aGUgZ2l2ZW4gbm9kZS5cbiAgICAgKi9cbiAgICBnZXRUaXRsZVRleHQ6ICh4OiBEYXRhTm9kZSkgPT4gc3RyaW5nID0gdGhpcy5nZXRMYWJlbDtcbn1cbiIsImltcG9ydCBEYXRhTm9kZSwgeyBEYXRhTm9kZUxpa2UgfSBmcm9tIFwiLi8uLi8uLi9EYXRhTm9kZVwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTdW5idXJzdFByZXByb2Nlc3NvciB7XG4gICAgcHJpdmF0ZSBzdGF0aWMgaWRDb3VudGVyOiBudW1iZXIgPSAwO1xuXG4gICAgLyoqXG4gICAgICogUHJlcHJvY2Vzc2VzIHRoZSBnaXZlbiBOb2RlIGRhdGEgc3RydWN0dXJlLlxuICAgICAqXG4gICAgICogQHBhcmFtIGRhdGEgQSBub2RlLWxpa2Ugc3RydWN0dXJlIHRoYXQgc2hvdWxkIGJlIGNvbnZlcnRlZCB0byBwcm9wZXIgRGF0YU5vZGUtb2JqZWN0cyBhbmQgdGhhdCBzaG91bGQgYmUgcHJlcGFyZWRcbiAgICAgKiBmb3IgdXNlIGluIHRoZSBTdW5idXJzdCB2aXN1YWxpemF0aW9uLlxuICAgICAqL1xuICAgIHB1YmxpYyBwcmVwcm9jZXNzRGF0YShcbiAgICAgICAgZGF0YTogRGF0YU5vZGVMaWtlXG4gICAgKTogRGF0YU5vZGUge1xuICAgICAgICBjb25zdCBjaGlsZHJlbjogRGF0YU5vZGVbXSA9IFtdO1xuXG4gICAgICAgIGlmIChkYXRhLmNoaWxkcmVuKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGNoaWxkIG9mIGRhdGEuY2hpbGRyZW4pIHtcbiAgICAgICAgICAgICAgICBjaGlsZHJlbi5wdXNoKHRoaXMucHJlcHJvY2Vzc0RhdGEoY2hpbGQpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjaGlsZHJlbi5sZW5ndGggPiAwICYmIGRhdGEuY291bnQgIT09IDApIHtcbiAgICAgICAgICAgIGNoaWxkcmVuLnB1c2gobmV3IERhdGFOb2RlKC0xLCBcImVtcHR5XCIsIFtdLCBkYXRhLmNvdW50LCBkYXRhLnNlbGZDb3VudCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG5ldyBEYXRhTm9kZShcbiAgICAgICAgICAgIGRhdGEuaWQgfHwgKytTdW5idXJzdFByZXByb2Nlc3Nvci5pZENvdW50ZXIsXG4gICAgICAgICAgICBkYXRhLm5hbWUgfHwgXCJcIixcbiAgICAgICAgICAgIGNoaWxkcmVuLFxuICAgICAgICAgICAgZGF0YS5jb3VudCxcbiAgICAgICAgICAgIGRhdGEuc2VsZkNvdW50LFxuICAgICAgICAgICAgZGF0YS5leHRyYVxuICAgICAgICApO1xuICAgIH1cbn1cbiIsImltcG9ydCAqIGFzIGQzIGZyb20gXCJkM1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUb29sdGlwVXRpbGl0aWVzIHtcbiAgICBwdWJsaWMgc3RhdGljIGluaXRUb29sdGlwKCk6IGQzLlNlbGVjdGlvbjxIVE1MRGl2RWxlbWVudCwgdW5rbm93biwgSFRNTEVsZW1lbnQsIGFueT4ge1xuICAgICAgICByZXR1cm4gZDMuc2VsZWN0KFwiYm9keVwiKVxuICAgICAgICAgICAgLmFwcGVuZChcImRpdlwiKVxuICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcInRpcFwiKVxuICAgICAgICAgICAgLnN0eWxlKFwicG9zaXRpb25cIiwgXCJhYnNvbHV0ZVwiKVxuICAgICAgICAgICAgLnN0eWxlKFwiei1pbmRleFwiLCBcIjEwXCIpXG4gICAgICAgICAgICAuc3R5bGUoXCJ2aXNpYmlsaXR5XCIsIFwiaGlkZGVuXCIpO1xuICAgIH1cbn1cbiIsImltcG9ydCAqIGFzIGQzIGZyb20gXCJkM1wiO1xuXG5pbXBvcnQgRGF0YU5vZGUgZnJvbSBcIi4vLi4vRGF0YU5vZGVcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTm9kZVV0aWxzIHtcbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgcCBpcyBhIHBhcmVudCBvZiBjLiBJZiB0aGUgY2hpbGQgaXMgc2l0dWF0ZWQgZGVlcGVyIGluIHRoZSBoaWVyYXJjaHkgdGhhbiBtYXhMZXZlbHMsIGZhbHNlIGlzIHJldHVybmVkLlxuICAgICAqXG4gICAgICogQHBhcmFtIHAgUG9zc2libGUgcGFyZW50IG5vZGUuXG4gICAgICogQHBhcmFtIGMgUG9zc2libGUgY2hpbGQgbm9kZS5cbiAgICAgKiBAcGFyYW0gbWF4TGV2ZWxzIE1heGltdW0gZGVwdGggZm9yIHRoZSBjaGlsZCBub2RlIGluIHRoZSBoaWVyYXJjaHkuXG4gICAgICovXG4gICAgcHVibGljIHN0YXRpYyBpc1BhcmVudE9mKFxuICAgICAgICBwOiBkMy5IaWVyYXJjaHlSZWN0YW5ndWxhck5vZGU8RGF0YU5vZGU+LFxuICAgICAgICBjOiBkMy5IaWVyYXJjaHlSZWN0YW5ndWxhck5vZGU8RGF0YU5vZGU+LFxuICAgICAgICBtYXhMZXZlbHM6IG51bWJlclxuICAgICk6IGJvb2xlYW4ge1xuICAgICAgICBpZiAoYy5kZXB0aCA+PSBtYXhMZXZlbHMpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwID09PSBjKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwLmNoaWxkcmVuKSB7XG4gICAgICAgICAgICByZXR1cm4gcC5jaGlsZHJlbi5zb21lKChkOiBkMy5IaWVyYXJjaHlSZWN0YW5ndWxhck5vZGU8RGF0YU5vZGU+KSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIE5vZGVVdGlscy5pc1BhcmVudE9mKGQsIGMsIG1heExldmVscyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyByZ2IgfSBmcm9tIFwiZDNcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29sb3JVdGlscyB7XG4gICAgLypcbiAgICAgKiBSZXR1cm5zIHRoZSByZWFkYWJsZSB0ZXh0IGNvbG9yIGJhc2VkIG9uIHRoZSBicmlnaHRuZXNzIG9mIGEgZ2l2ZW4gYmFja2dyb3VuZCBjb2xvci5cbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIGdldFJlYWRhYmxlQ29sb3JGb3IoY29sb3I6IHN0cmluZykge1xuICAgICAgICBsZXQgdGV4dENvbG9yID0gXCIjMDAwXCI7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0ZXh0Q29sb3IgPSBDb2xvclV0aWxzLmJyaWdodG5lc3MocmdiKGNvbG9yKSkgPCAxMjUgPyBcIiNlZWVcIiA6IFwiIzAwMFwiO1xuICAgICAgICB9IGNhdGNoIChlcnIpIHsgLyogZ28gb24gKi8gfVxuICAgICAgICByZXR1cm4gdGV4dENvbG9yO1xuICAgIH1cblxuICAgIC8qXG4gICAgICogUmV0dXJucyB0aGUgYnJpZ2h0bmVzcyBvZiBhbiByZ2ItY29sb3IuXG4gICAgICogZnJvbTogaHR0cDovLyB3d3cudzMub3JnL1dBSS9FUi9XRC1BRVJULyNjb2xvci1jb250cmFzdFxuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgYnJpZ2h0bmVzcyh7IHIsIGcsIGIgfToge3I6IG51bWJlciwgZzogbnVtYmVyLCBiOiBudW1iZXJ9KTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHIgKiAwLjI5OSArIGcgKiAwLjU4NyArIGIgKiAwLjExNDtcbiAgICB9XG59XG4iLCJpbXBvcnQgKiBhcyBkMyBmcm9tIFwiZDNcIjtcblxuaW1wb3J0IFN1bmJ1cnN0U2V0dGluZ3MgZnJvbSBcIi4vU3VuYnVyc3RTZXR0aW5nc1wiO1xuaW1wb3J0IFN1bmJ1cnN0UHJlcHJvY2Vzc29yIGZyb20gXCIuL1N1bmJ1cnN0UHJlcHJvY2Vzc29yXCI7XG5pbXBvcnQgRGF0YU5vZGUsIHsgRGF0YU5vZGVMaWtlIH0gZnJvbSBcIi4vLi4vLi4vRGF0YU5vZGVcIjtcbmltcG9ydCBUb29sdGlwVXRpbGl0aWVzIGZyb20gXCIuLy4uLy4uL3V0aWxpdGllcy9Ub29sdGlwVXRpbGl0aWVzXCI7XG5pbXBvcnQgU3RyaW5nVXRpbHMgZnJvbSBcIi4vLi4vLi4vdXRpbGl0aWVzL1N0cmluZ1V0aWxzXCI7XG5pbXBvcnQgTm9kZVV0aWxzIGZyb20gXCIuLy4uLy4uL3V0aWxpdGllcy9Ob2RlVXRpbHNcIjtcbmltcG9ydCBDb2xvclV0aWxzIGZyb20gXCIuLy4uLy4uL2NvbG9yL0NvbG9yVXRpbHNcIjtcblxuaW1wb3J0IFwiY29yZS1qcy9zdGFibGVcIjtcbmltcG9ydCBcInJlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZVwiO1xuXG50eXBlIEhSTjxUPiA9IGQzLkhpZXJhcmNoeVJlY3Rhbmd1bGFyTm9kZTxUPjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU3VuYnVyc3Qge1xuICAgIHByaXZhdGUgcmVhZG9ubHkgc2V0dGluZ3M6IFN1bmJ1cnN0U2V0dGluZ3M7XG4gICAgcHJpdmF0ZSByZWFkb25seSBkYXRhOiBIUk48RGF0YU5vZGU+W107XG5cbiAgICBwcml2YXRlIHRvb2x0aXAhOiBkMy5TZWxlY3Rpb248SFRNTERpdkVsZW1lbnQsIHVua25vd24sIEhUTUxFbGVtZW50LCBhbnk+O1xuICAgIHByaXZhdGUgYnJlYWRDcnVtYnM6IGQzLlNlbGVjdGlvbjxIVE1MVUxpc3RFbGVtZW50LCB1bmtub3duLCBIVE1MRWxlbWVudCwgYW55PjtcblxuICAgIHByaXZhdGUgY29sb3JDb3VudGVyOiBudW1iZXIgPSAtMTtcbiAgICBwcml2YXRlIGN1cnJlbnRNYXhMZXZlbDogbnVtYmVyID0gNDtcblxuICAgIHByaXZhdGUgeFNjYWxlOiBkMy5TY2FsZUxpbmVhcjxudW1iZXIsIG51bWJlcj47XG4gICAgcHJpdmF0ZSB5U2NhbGU6IGQzLlNjYWxlTGluZWFyPG51bWJlciwgbnVtYmVyPjtcblxuICAgIHByaXZhdGUgcGF0aCE6IGQzLlNlbGVjdGlvbjxTVkdQYXRoRWxlbWVudCwgSFJOPERhdGFOb2RlPiwgU1ZHR0VsZW1lbnQsIHVua25vd24+O1xuICAgIHByaXZhdGUgdGV4dCE6IGQzLlNlbGVjdGlvbjxhbnksIEhSTjxEYXRhTm9kZT4sIFNWR0dFbGVtZW50LCB1bmtub3duPjtcbiAgICBwcml2YXRlIGFyYyE6IGQzLkFyYzxhbnksIEhSTjxEYXRhTm9kZT4+O1xuXG4gICAgcHJpdmF0ZSB2aXNHRWxlbWVudDogZDMuU2VsZWN0aW9uPFNWR0dFbGVtZW50LCB1bmtub3duLCBIVE1MRWxlbWVudCwgdW5rbm93bj47XG5cbiAgICBwcml2YXRlIGFyY0RhdGE6IEhSTjxEYXRhTm9kZT5bXSA9IFtdO1xuICAgIHByaXZhdGUgdGV4dERhdGE6IEhSTjxEYXRhTm9kZT5bXSA9IFtdO1xuXG4gICAgcHJpdmF0ZSBwcmV2aW91c1Jvb3Q6IEhSTjxEYXRhTm9kZT4gfCBudWxsID0gbnVsbDtcbiAgICBwcml2YXRlIHByZXZpb3VzTWF4TGV2ZWw6IG51bWJlciA9IHRoaXMuY3VycmVudE1heExldmVsO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgZWxlbWVudDogSFRNTEVsZW1lbnQsXG4gICAgICAgIGRhdGE6IERhdGFOb2RlTGlrZSxcbiAgICAgICAgb3B0aW9uczogU3VuYnVyc3RTZXR0aW5ncyA9IG5ldyBTdW5idXJzdFNldHRpbmdzKClcbiAgICApIHtcbiAgICAgICAgdGhpcy5zZXR0aW5ncyA9IHRoaXMuZmlsbE9wdGlvbnMob3B0aW9ucyk7XG5cbiAgICAgICAgY29uc3QgcHJlcHJvY2Vzc29yID0gbmV3IFN1bmJ1cnN0UHJlcHJvY2Vzc29yKCk7XG4gICAgICAgIGNvbnN0IHByb2Nlc3NlZERhdGEgPSBwcmVwcm9jZXNzb3IucHJlcHJvY2Vzc0RhdGEoZGF0YSk7XG5cbiAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3MuZW5hYmxlVG9vbHRpcHMpIHtcbiAgICAgICAgICAgIHRoaXMudG9vbHRpcCA9IFRvb2x0aXBVdGlsaXRpZXMuaW5pdFRvb2x0aXAoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuY3VycmVudE1heExldmVsID0gdGhpcy5zZXR0aW5ncy5sZXZlbHM7XG5cbiAgICAgICAgdGhpcy54U2NhbGUgPSBkMy5zY2FsZUxpbmVhcigpLnJhbmdlKFswLCAyICogTWF0aC5QSV0pOyAvLyB1c2UgZnVsbCBjaXJjbGVcbiAgICAgICAgdGhpcy55U2NhbGUgPSBkMy5zY2FsZUxpbmVhcigpLmRvbWFpbihbMCwgMV0pLnJhbmdlKFswLCB0aGlzLnNldHRpbmdzLnJhZGl1c10pO1xuXG4gICAgICAgIGNvbnN0IHJvb3ROb2RlID0gZDMuaGllcmFyY2h5PERhdGFOb2RlPihwcm9jZXNzZWREYXRhKTtcbiAgICAgICAgLy8gV2UgZG9uJ3Qgd2FudCBEMyB0byBjb21wdXRlIHRoZSBzdW0gaXRzZWxmLiBUaGF0J3Mgd2h5IHdlIG5lZWQgdG8gcmV0dXJuIDAgaWYgdGhlIGN1cnJlbnQgbm9kZSBoYXMgbm9cbiAgICAgICAgLy8gY2hpbGRyZW4uXG4gICAgICAgIHJvb3ROb2RlLnN1bSgoZDogRGF0YU5vZGUpID0+IGQuY2hpbGRyZW4ubGVuZ3RoID4gMCA/IDAgOiBkLnNlbGZDb3VudCk7XG5cbiAgICAgICAgY29uc3QgcGFydGl0aW9uID0gZDMucGFydGl0aW9uPERhdGFOb2RlPigpO1xuICAgICAgICB0aGlzLmRhdGEgPSBwYXJ0aXRpb24ocm9vdE5vZGUpLmRlc2NlbmRhbnRzKCk7XG5cbiAgICAgICAgdGhpcy5hcmMgPSBkMy5hcmM8SFJOPERhdGFOb2RlPj4oKVxuICAgICAgICAgICAgLnN0YXJ0QW5nbGUoKGQ6IEhSTjxEYXRhTm9kZT4pID0+IE1hdGgubWF4KDAsIE1hdGgubWluKE1hdGguUEkgKiAyLCB0aGlzLnhTY2FsZShkLngwKSkpKVxuICAgICAgICAgICAgLmVuZEFuZ2xlKChkOiBIUk48RGF0YU5vZGU+KSA9PiBNYXRoLm1heCgwLCBNYXRoLm1pbihNYXRoLlBJICogMiwgdGhpcy54U2NhbGUoZC54MSkpKSlcbiAgICAgICAgICAgIC5pbm5lclJhZGl1cygoZDogSFJOPERhdGFOb2RlPikgPT4gTWF0aC5tYXgoMCwgZC55MCA/IHRoaXMueVNjYWxlKGQueTApIDogZC55MCkpXG4gICAgICAgICAgICAub3V0ZXJSYWRpdXMoKGQ6IEhSTjxEYXRhTm9kZT4pID0+IE1hdGgubWF4KDAsIHRoaXMueVNjYWxlKGQueTEpICsgMSkpO1xuXG4gICAgICAgIHRoaXMuaW5pdENzcygpO1xuXG4gICAgICAgIC8vIFByZXBhcmUgZWxlbWVudCBhbmQgY3JlYXRlIFNWRyBjb250YWluZXJcbiAgICAgICAgdGhpcy5lbGVtZW50LmlubmVySFRNTCA9IFwiXCI7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgdGhpcy5icmVhZENydW1icyA9IGQzLnNlbGVjdCh0aGlzLmVsZW1lbnQpXG4gICAgICAgICAgICAuYXBwZW5kKFwiZGl2XCIpXG4gICAgICAgICAgICAuYXR0cihcImlkXCIsIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDIqKjE2KSArIFwiLWJyZWFkY3J1bWJzXCIpXG4gICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwic3VuYnVyc3QtYnJlYWRjcnVtYnNcIilcbiAgICAgICAgICAgIC5hcHBlbmQoXCJ1bFwiKTtcblxuICAgICAgICBjb25zdCB2aXNFbGVtZW50ID0gZDMuc2VsZWN0KHRoaXMuZWxlbWVudClcbiAgICAgICAgICAgIC5hcHBlbmQoXCJzdmdcIilcbiAgICAgICAgICAgIC5hdHRyKFwidmVyc2lvblwiLCBcIjEuMVwiKVxuICAgICAgICAgICAgLmF0dHIoXCJ4bWxuc1wiLCBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIpXG4gICAgICAgICAgICAuYXR0cihcInZpZXdCb3hcIiwgYDAgMCAke3RoaXMuc2V0dGluZ3Mud2lkdGh9ICR7dGhpcy5zZXR0aW5ncy5oZWlnaHR9YClcbiAgICAgICAgICAgIC5hdHRyKFwid2lkdGhcIiwgdGhpcy5zZXR0aW5ncy53aWR0aClcbiAgICAgICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIHRoaXMuc2V0dGluZ3MuaGVpZ2h0KVxuICAgICAgICAgICAgLmF0dHIoXCJvdmVyZmxvd1wiLCBcImhpZGRlblwiKVxuICAgICAgICAgICAgLnN0eWxlKFwiZm9udC1mYW1pbHlcIiwgXCInSGVsdmV0aWNhIE5ldWUnLCBIZWx2ZXRpY2EsIEFyaWFsLCBzYW5zLXNlcmlmXCIpO1xuXG4gICAgICAgIHZpc0VsZW1lbnQuYXBwZW5kKFwic3R5bGVcIilcbiAgICAgICAgICAgIC5hdHRyKFwidHlwZVwiLCBcInRleHQvY3NzXCIpXG4gICAgICAgICAgICAuaHRtbChcIi5oaWRkZW57IHZpc2liaWxpdHk6IGhpZGRlbjt9XCIpO1xuXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgdGhpcy52aXNHRWxlbWVudCA9IHZpc0VsZW1lbnQuYXBwZW5kKFwiZ1wiKVxuICAgICAgICAgICAgLy8gc2V0IG9yaWdpbiB0byByYWRpdXMgY2VudGVyXG4gICAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZShcIiArIHRoaXMuc2V0dGluZ3MucmFkaXVzICsgXCIsXCIgKyB0aGlzLnNldHRpbmdzLnJhZGl1cyArIFwiKVwiKTtcblxuICAgICAgICAvLyBGYWtlIGNsaWNrIG9uIHRoZSBjZW50ZXIgbm9kZVxuICAgICAgICB0aGlzLnJlc2V0KCk7XG4gICAgfVxuXG4gICAgcHVibGljIHJlc2V0KCkge1xuICAgICAgICB0aGlzLmNsaWNrKHRoaXMuZGF0YVswXSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBmaWxsT3B0aW9ucyhvcHRpb25zOiBhbnkgPSB1bmRlZmluZWQpOiBTdW5idXJzdFNldHRpbmdzIHtcbiAgICAgICAgY29uc3Qgb3V0cHV0ID0gbmV3IFN1bmJ1cnN0U2V0dGluZ3MoKTtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24ob3V0cHV0LCBvcHRpb25zKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIG1heFkoZDogSFJOPERhdGFOb2RlPik6IG51bWJlciB7XG4gICAgICAgIHJldHVybiBkLmNoaWxkcmVuID8gTWF0aC5tYXgoLi4uZC5jaGlsZHJlbiEubWFwKChpKSA9PiB0aGlzLm1heFkoaSkpKSA6IGQueTE7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2FsY3VsYXRlcyB0aGUgY29sb3Igb2YgYW4gYXJjIGJhc2VkIG9uIHRoZSBjb2xvciBvZiBoaXMgY2hpbGRyZW4uXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZCBUaGUgbm9kZSBmb3Igd2hpY2ggd2Ugd2FudCB0aGUgY29sb3IuXG4gICAgICogQHJldHVybiBzdHJpbmcgVGhlIGNhbGN1bGF0ZWQgY29sb3IgaW4gSFRNTCBjb2xvciByZXByZXNlbnRhdGlvbi5cbiAgICAgKi9cbiAgICBwcml2YXRlIGNvbG9yKGQ6IERhdGFOb2RlKSB7XG4gICAgICAgIGlmIChkLm5hbWUgPT09IFwiZW1wdHlcIikge1xuICAgICAgICAgICAgcmV0dXJuIFwid2hpdGVcIjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy51c2VGaXhlZENvbG9ycykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2V0dGluZ3MuZml4ZWRDb2xvclBhbGV0dGVbXG4gICAgICAgICAgICAgICAgTWF0aC5hYnModGhpcy5zZXR0aW5ncy5maXhlZENvbG9ySGFzaChkKSkgJSB0aGlzLnNldHRpbmdzLmZpeGVkQ29sb3JQYWxldHRlLmxlbmd0aFxuICAgICAgICAgICAgXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChkLmNoaWxkcmVuLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjb2xvdXJzOiBzdHJpbmdbXSA9IGQuY2hpbGRyZW4ubWFwKGMgPT4gdGhpcy5jb2xvcihjKSk7XG4gICAgICAgICAgICAgICAgY29uc3QgYSA9IGQzLmhzbChjb2xvdXJzWzBdKTtcbiAgICAgICAgICAgICAgICBjb25zdCBiID0gZDMuaHNsKGNvbG91cnNbMV0pO1xuICAgICAgICAgICAgICAgIGNvbnN0IHNpbmdsZUNoaWxkID0gZC5jaGlsZHJlbi5sZW5ndGggPT09IDEgfHwgZC5jaGlsZHJlblsxXS5uYW1lID09PSBcImVtcHR5XCI7XG5cbiAgICAgICAgICAgICAgICAvLyBpZiB3ZSBvbmx5IGhhdmUgb25lIGNoaWxkLCByZXR1cm4gYSBzbGlnaHRseSBkYXJrZXIgdmFyaWFudCBvZiB0aGUgY2hpbGQgY29sb3JcbiAgICAgICAgICAgICAgICBpZiAoc2luZ2xlQ2hpbGQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGQzLmhzbChhLmgsIGEucywgYS5sICogMC45OCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gaWYgd2UgaGF2ZSAyIGNoaWxkcmVuIG9yIG1vcmUsIHRha2UgdGhlIGF2ZXJhZ2Ugb2YgdGhlIGZpcnN0IHR3byBjaGlsZHJlblxuICAgICAgICAgICAgICAgIHJldHVybiBkMy5oc2woKGEuaCArIGIuaCkgLyAyLCAoYS5zICsgYi5zKSAvIDIsIChhLmwgKyBiLmwpIC8gMik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBpZiB3ZSBkb24ndCBoYXZlIGNoaWxkcmVuLCBwaWNrIGEgbmV3IGNvbG9yXG4gICAgICAgICAgICBpZiAoIWQuZXh0cmEuY29sb3IpIHtcbiAgICAgICAgICAgICAgICBkLmV4dHJhLmNvbG9yID0gdGhpcy5nZXRDb2xvcigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGQuZXh0cmEuY29sb3I7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb2xvciBnZW5lcmF0aW9uIGZ1bmN0aW9uIHRoYXQgaXRlcmF0ZXMgb3ZlciBhIGZpeGVkIGxpc3Qgb2YgY29sb3JzLlxuICAgICAqXG4gICAgICogQHJldHVybiBzdHJpbmcgSFRNTC1yZXByZXNlbnRhdGlvbiBvZiB0aGUgZ2VuZXJhdGVkIGNvbG9yXG4gICAgICovXG4gICAgcHJpdmF0ZSBnZXRDb2xvcigpOiBzdHJpbmcge1xuICAgICAgICB0aGlzLmNvbG9yQ291bnRlciA9ICh0aGlzLmNvbG9yQ291bnRlciArIDEpICUgdGhpcy5zZXR0aW5ncy5jb2xvclBhbGV0dGUubGVuZ3RoO1xuICAgICAgICByZXR1cm4gdGhpcy5zZXR0aW5ncy5jb2xvclBhbGV0dGVbdGhpcy5jb2xvckNvdW50ZXJdO1xuICAgIH1cblxuICAgIHByaXZhdGUgaW5pdENzcygpIHtcbiAgICAgICAgbGV0IGVsZW1lbnRDbGFzcyA9IHRoaXMuc2V0dGluZ3MuY2xhc3NOYW1lO1xuICAgICAgICB0aGlzLmVsZW1lbnQuY2xhc3NOYW1lICs9IFwiIFwiICsgZWxlbWVudENsYXNzO1xuXG4gICAgICAgIGNvbnN0IHN0eWxlRWxlbWVudCA9IHRoaXMuZWxlbWVudC5vd25lckRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcbiAgICAgICAgc3R5bGVFbGVtZW50LmFwcGVuZENoaWxkKHRoaXMuZWxlbWVudC5vd25lckRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGBcbi4ke2VsZW1lbnRDbGFzc30ge1xuICAgIGZvbnQtZmFtaWx5OiBSb2JvdG8sJ0hlbHZldGljYSBOZXVlJyxIZWx2ZXRpY2EsQXJpYWwsc2Fucy1zZXJpZjtcbiAgICB3aWR0aDogJHt0aGlzLnNldHRpbmdzLndpZHRoICsgdGhpcy5zZXR0aW5ncy5icmVhZGNydW1iV2lkdGh9cHg7XG59XG4uJHtlbGVtZW50Q2xhc3N9IC5zdW5idXJzdC1icmVhZGNydW1icyB7XG4gICAgd2lkdGg6IDE3NnB4O1xuICAgIGZsb2F0OiByaWdodDtcbiAgICBtYXJnaW4tcmlnaHQ6IDE1cHg7XG4gICAgbWFyZ2luLXRvcDogMTBweDtcbiAgICBwYWRkaW5nLWxlZnQ6IDVweDtcbn1cbi4ke2VsZW1lbnRDbGFzc30gLnN1bmJ1cnN0LWJyZWFkY3J1bWJzIHVsIHtcbiAgICBwYWRkaW5nLWxlZnQ6IDA7XG4gICAgbGlzdC1zdHlsZTogbm9uZTtcbn1cbi4ke2VsZW1lbnRDbGFzc30gLnN1bmJ1cnN0LWJyZWFkY3J1bWJzIC5jcnVtYiB7XG4gICAgbWFyZ2luLWJvdHRvbTogNXB4O1xuICAgIGN1cnNvcjogcG9pbnRlcjtcbn1cbi4ke2VsZW1lbnRDbGFzc30gLnN1bmJ1cnN0LWJyZWFkY3J1bWJzIC5jcnVtYiBzdmcge1xuICAgIGZsb2F0OiBsZWZ0O1xuICAgIG1hcmdpbi1yaWdodDogM3B4O1xufVxuLiR7ZWxlbWVudENsYXNzfSAuc3VuYnVyc3QtYnJlYWRjcnVtYnMgLmNydW1iIHAge1xuICAgIHdoaXRlLXNwYWNlOiBub3dyYXA7XG4gICAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7XG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICBtYXJnaW46IDA7XG4gICAgZm9udC1zaXplOiAxNHB4O1xufVxuLiR7ZWxlbWVudENsYXNzfSAuc3VuYnVyc3QtYnJlYWRjcnVtYnMgLmNydW1iIC5wZXJjZW50YWdlIHtcbiAgICBmb250LXNpemU6IDExcHg7XG59YCkpXG4gICAgICAgIHRoaXMuZWxlbWVudC5vd25lckRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoc3R5bGVFbGVtZW50KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbnRlcnBvbGF0ZSB0aGUgc2NhbGVzISBEZWZpbmVzIG5ldyBzY2FsZXMgYmFzZWQgb24gdGhlIGNsaWNrZWQgaXRlbS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBkIFRoZSBjbGlja2VkIGl0ZW1cbiAgICAgKiBAcmV0dXJuIG5ldyBzY2FsZXNcbiAgICAgKi9cbiAgICBwcml2YXRlIGFyY1R3ZWVuKGQ6IEhSTjxEYXRhTm9kZT4sIHRoYXQ6IGFueSk6IGFueSB7XG4gICAgICAgIGxldCBteSA9IE1hdGgubWluKHRoaXMubWF4WShkKSwgZC55MCArIHRoYXQuc2V0dGluZ3MubGV2ZWxzICogKGQueTEgLSBkLnkwKSksXG4gICAgICAgICAgICB4ZCA9IGQzLmludGVycG9sYXRlKHRoYXQueFNjYWxlLmRvbWFpbigpLCBbZC54MCwgZC54MV0pLFxuICAgICAgICAgICAgeWQgPSBkMy5pbnRlcnBvbGF0ZSh0aGF0LnlTY2FsZS5kb21haW4oKSwgW2QueTAsIG15XSksXG4gICAgICAgICAgICB5ciA9IGQzLmludGVycG9sYXRlKHRoYXQueVNjYWxlLnJhbmdlKCksIFtkLnkwID8gMjAgOiAwLCB0aGF0LnNldHRpbmdzLnJhZGl1c10pO1xuXG4gICAgICAgIHJldHVybiAoZDogSFJOPERhdGFOb2RlPikgPT4ge1xuICAgICAgICAgICAgLy8gUmV0dXJuIGEgZnVuY3Rpb24gdGhhdCB0YWtlcyBpbiBhIHRpbWluZyAoYmV0d2VlbiAwIGFuZCAxKSBhbmQgcmV0dXJucyB0aGUgY3VycmVudCBhcmMgdGhhdCBjb3JyZXNwb25kc1xuICAgICAgICAgICAgLy8gd2l0aCB0aGlzIHRpbWluZy5cbiAgICAgICAgICAgIHJldHVybiAodDogbnVtYmVyKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhhdC54U2NhbGUuZG9tYWluKHhkKHQpKTtcbiAgICAgICAgICAgICAgICB0aGF0LnlTY2FsZS5kb21haW4oeWQodCkpLnJhbmdlKHlyKHQpKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhhdC5hcmMoZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIHRvb2x0aXBJbihldmVudDogTW91c2VFdmVudCwgZDogSFJOPERhdGFOb2RlPikge1xuICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5lbmFibGVUb29sdGlwcyAmJiB0aGlzLnRvb2x0aXApIHtcbiAgICAgICAgICAgIGlmIChkLmRlcHRoIDwgdGhpcy5jdXJyZW50TWF4TGV2ZWwgJiYgZC5kYXRhLm5hbWUgIT09IFwiZW1wdHlcIikge1xuICAgICAgICAgICAgICAgIHRoaXMudG9vbHRpcC5odG1sKHRoaXMuc2V0dGluZ3MuZ2V0VG9vbHRpcChkLmRhdGEpKVxuICAgICAgICAgICAgICAgICAgICAuc3R5bGUoXCJ0b3BcIiwgKGV2ZW50LnBhZ2VZICsgMTApICsgXCJweFwiKVxuICAgICAgICAgICAgICAgICAgICAuc3R5bGUoXCJsZWZ0XCIsIChldmVudC5wYWdlWCArIDEwKSArIFwicHhcIilcbiAgICAgICAgICAgICAgICAgICAgLnN0eWxlKFwidmlzaWJpbGl0eVwiLCBcInZpc2libGVcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIHRvb2x0aXBNb3ZlKGV2ZW50OiBNb3VzZUV2ZW50LCBkOiBIUk48RGF0YU5vZGU+KSB7XG4gICAgICAgIGlmICh0aGlzLnNldHRpbmdzLmVuYWJsZVRvb2x0aXBzICYmIHRoaXMudG9vbHRpcCkge1xuICAgICAgICAgICAgdGhpcy50b29sdGlwXG4gICAgICAgICAgICAgICAgLnN0eWxlKFwidG9wXCIsIChldmVudC5wYWdlWSArIDEwKSArIFwicHhcIilcbiAgICAgICAgICAgICAgICAuc3R5bGUoXCJsZWZ0XCIsIChldmVudC5wYWdlWCArIDEwKSArIFwicHhcIik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIHRvb2x0aXBPdXQoZXZlbnQ6IE1vdXNlRXZlbnQsIGQ6IEhSTjxEYXRhTm9kZT4pIHtcbiAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3MuZW5hYmxlVG9vbHRpcHMgJiYgdGhpcy50b29sdGlwKSB7XG4gICAgICAgICAgICB0aGlzLnRvb2x0aXAuc3R5bGUoXCJ2aXNpYmlsaXR5XCIsIFwiaGlkZGVuXCIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29tcHV0ZSB0aGUgYW1vdW50IG9mIHZlcnRpY2FsIHNwYWNlIHRoYXQncyBhdmFpbGFibGUgZm9yIHRleHQgKGkuZS4gdGhlIG1heGltdW0gdGV4dCBoZWlnaHQpIGZvciBhIHNwZWNpZmljIG5vZGVcbiAgICAgKiBpbiB0aGUgc3VuYnVyc3QgdmlzdWFsaXphdGlvbi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBkIFRoZSBub2RlIGluIHRoZSBzdW5idXJzdCB2aXN1YWxpemF0aW9uIGZvciB3aGljaCB0aGUgdmVydGljYWwgc3BhY2Ugc2hvdWxkIGJlIGNvbXB1dGVkLlxuICAgICAqIEByZXR1cm4gVGhlIGF2YWlsYWJsZSB2ZXJ0aWNhbCBzcGFjZSBpbiBwaXhlbHMuXG4gICAgICovXG4gICAgcHJpdmF0ZSBjb21wdXRlQXZhaWxhYmxlU3BhY2UoZDogSFJOPERhdGFOb2RlPik6IG51bWJlciB7XG4gICAgICAgIGNvbnN0IGNpcmN1bWZlcmVuY2UgPSAyICogTWF0aC5tYXgoMCwgdGhpcy55U2NhbGUoZC55MSkgKyAxKSAqIE1hdGguUEk7XG4gICAgICAgIC8vIERpZmZlcmVuY2UgaW4gcmFkaWFucyBiZXR3ZWVuIHRoZSBzdGFydCBhbmQgZW5kIG9mIHRoZSBhbmdsZS5cbiAgICAgICAgY29uc3QgZGlmZmVyZW5jZSA9IE1hdGgubWF4KFxuICAgICAgICAgICAgMCxcbiAgICAgICAgICAgIE1hdGgubWluKE1hdGguUEkgKiAyLCB0aGlzLnhTY2FsZShkLngxKSkgLVxuICAgICAgICAgICAgTWF0aC5tYXgoMCwgTWF0aC5taW4oTWF0aC5QSSAqIDIsIHRoaXMueFNjYWxlKGQueDApKSlcbiAgICAgICAgKTtcblxuICAgICAgICAvLyBTaW5jZSBhbiBhbmdsZSBvZiAzNjAgZGVncmVlcyBjb3JyZXNwb25kcyB0byAyICogUGkgcmFkaWFucywgd2UgY2FuIGNvbnZlcnQgdGhpcyBhbmdsZSBkaWZmZXJlbmNlIHRvXG4gICAgICAgIC8vIHBpeGVscyBpZiB3ZSBjb21wdXRlIChkaWZmZXJlbmNlIC8gKDIgKiBQaSkpICogY2lyY3VtZmVyZW5jZV9pbl9waXhlbHNcbiAgICAgICAgcmV0dXJuIGNpcmN1bWZlcmVuY2UgKiAoZGlmZmVyZW5jZSAvICgyICogTWF0aC5QSSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERlZmluZXMgd2hhdCBoYXBwZW5zIGFmdGVyIGEgbm9kZSBpcyBjbGlja2VkLlxuICAgICAqXG4gICAgICogQHBhcmFtIGQgVGhlIGRhdGEgb2JqZWN0IG9mIHRoZSBjbGlja2VkIGFyY1xuICAgICAqL1xuICAgIHByaXZhdGUgY2xpY2soZDogSFJOPERhdGFOb2RlPikge1xuICAgICAgICBpZiAoZC5kYXRhLm5hbWUgPT09IFwiZW1wdHlcIiB8fCAodGhpcy5wcmV2aW91c1Jvb3QgJiYgdGhpcy5wcmV2aW91c1Jvb3QuZGF0YS5pZCA9PT0gZC5kYXRhLmlkKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5wcmV2aW91c1Jvb3QgPSBkO1xuXG4gICAgICAgIGlmICh0aGlzLnNldHRpbmdzLmVuYWJsZUJyZWFkY3J1bWJzKSB7XG4gICAgICAgICAgICB0aGlzLnNldEJyZWFkY3J1bWJzKGQpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3MucmVyb290Q2FsbGJhY2spIHtcbiAgICAgICAgICAgIHRoaXMuc2V0dGluZ3MucmVyb290Q2FsbGJhY2soZC5kYXRhKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHBlcmZvcm0gYW5pbWF0aW9uXG4gICAgICAgIHRoaXMuY3VycmVudE1heExldmVsID0gZC5kZXB0aCArIHRoaXMuc2V0dGluZ3MubGV2ZWxzO1xuXG4gICAgICAgIHRoaXMucmVuZGVyQXJjcyhkKTtcbiAgICAgICAgdGhpcy5yZW5kZXJUZXh0KGQpO1xuICAgIH1cblxuICAgIHByaXZhdGUgYXN5bmMgcmVuZGVyQXJjcyhwYXJlbnROb2RlOiBIUk48RGF0YU5vZGU+KSB7XG4gICAgICAgIC8vIFRoZSBwcmV2aW91c2x5IHJlbmRlcmVkIG5vZGVzIHNob3VsZCBiZSBrZXB0IHVudGlsIHRoZSBhbmltYXRpb24gaXMgb3Zlci4gV2Ugc2hvdWxkIGFsc28gY29tcHV0ZSB3aGljaCBpdGVtc1xuICAgICAgICAvLyBuZWVkIHRvIGJlIGFkZGVkIHRvIHRoZSBzZWxlY3Rpb24uXG4gICAgICAgIGNvbnN0IGZpbHRlcmVkRGF0YSA9IHRoaXMuZGF0YS5maWx0ZXIoKGU6IEhSTjxEYXRhTm9kZT4pID0+IHtcbiAgICAgICAgICAgIHJldHVybiBOb2RlVXRpbHMuaXNQYXJlbnRPZihwYXJlbnROb2RlLCBlLCB0aGlzLmN1cnJlbnRNYXhMZXZlbCArIDIpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpZiAocGFyZW50Tm9kZS5wYXJlbnQpIHtcbiAgICAgICAgICAgIGZpbHRlcmVkRGF0YS5wdXNoKHBhcmVudE5vZGUucGFyZW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IG5ld0RhdGEgPSBmaWx0ZXJlZERhdGEuZmlsdGVyKCh4OiBIUk48RGF0YU5vZGU+KSA9PiAhdGhpcy5hcmNEYXRhLmluY2x1ZGVzKHgpKTtcbiAgICAgICAgY29uc3QgZGF0YSA9IHRoaXMuYXJjRGF0YS5jb25jYXQoLi4ubmV3RGF0YSk7XG5cbiAgICAgICAgdGhpcy52aXNHRWxlbWVudC5zZWxlY3RBbGwoXCJwYXRoXCIpLmRhdGEoW10pLmV4aXQoKS5yZW1vdmUoKTtcblxuICAgICAgICB0aGlzLnBhdGggPSB0aGlzLnZpc0dFbGVtZW50LnNlbGVjdEFsbChcInBhdGhcIilcbiAgICAgICAgICAgIC5kYXRhKGRhdGEpXG4gICAgICAgICAgICAuZW50ZXIoKVxuICAgICAgICAgICAgLmluc2VydChcInBhdGhcIilcbiAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJhcmNcIilcbiAgICAgICAgICAgIC5hdHRyKFwiaWRcIiwgKGQ6IEhSTjxEYXRhTm9kZT4sIGk6IG51bWJlcikgPT4gXCJwYXRoLVwiICsgaSkgLy8gaWQgYmFzZWQgb24gaW5kZXhcbiAgICAgICAgICAgIC5hdHRyKFwiZFwiLCB0aGlzLmFyYykgLy8gcGF0aCBkYXRhXG4gICAgICAgICAgICAuYXR0cihcImZpbGwtcnVsZVwiLCBcImV2ZW5vZGRcIikgLy8gZmlsbCBydWxlXG4gICAgICAgICAgICAuc3R5bGUoXCJmaWxsXCIsIChkOiBIUk48RGF0YU5vZGU+KSA9PiB0aGlzLmNvbG9yKGQuZGF0YSkpIC8vIGNhbGwgZnVuY3Rpb24gZm9yIGNvbG91clxuICAgICAgICAgICAgLmF0dHIoXCJmaWxsLW9wYWNpdHlcIiwgZCA9PiBkLmRlcHRoID49IHRoaXMucHJldmlvdXNNYXhMZXZlbCA/IDAuMiA6IDEpXG4gICAgICAgICAgICAub24oXCJjbGlja1wiLCAoZXZlbnQ6IE1vdXNlRXZlbnQsIGQ6IEhSTjxEYXRhTm9kZT4pID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoZC5kZXB0aCA8IHRoaXMuY3VycmVudE1heExldmVsKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2xpY2soZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5vbihcIm1vdXNlb3ZlclwiLCAoZXZlbnQ6IE1vdXNlRXZlbnQsIGQ6IEhSTjxEYXRhTm9kZT4pID0+IHRoaXMudG9vbHRpcEluKGV2ZW50LCBkKSlcbiAgICAgICAgICAgIC5vbihcIm1vdXNlbW92ZVwiLCAoZXZlbnQ6IE1vdXNlRXZlbnQsIGQ6IEhSTjxEYXRhTm9kZT4pID0+IHRoaXMudG9vbHRpcE1vdmUoZXZlbnQsIGQgYXMgSFJOPERhdGFOb2RlPikpXG4gICAgICAgICAgICAub24oXCJtb3VzZW91dFwiLCAoZXZlbnQ6IE1vdXNlRXZlbnQsIGQ6IEhSTjxEYXRhTm9kZT4pID0+IHRoaXMudG9vbHRpcE91dChldmVudCwgZCBhcyBIUk48RGF0YU5vZGU+KSk7XG5cbiAgICAgICAgLy8gV2FpdCBmb3IgdGhlIGFuaW1hdGlvbnMgdG8gYmUgY29tcGxldGVkLi4uXG4gICAgICAgIGF3YWl0IG5ldyBQcm9taXNlPHZvaWQ+KChyZXNvbHZlKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnBhdGgudHJhbnNpdGlvbigpXG4gICAgICAgICAgICAgICAgLmR1cmF0aW9uKHRoaXMuc2V0dGluZ3MuYW5pbWF0aW9uRHVyYXRpb24pXG4gICAgICAgICAgICAgICAgLmF0dHJUd2VlbihcImRcIiwgdGhpcy5hcmNUd2VlbihwYXJlbnROb2RlLCB0aGlzKSlcbiAgICAgICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIChkOiBIUk48RGF0YU5vZGU+KSA9PiBkLmRlcHRoID49IHRoaXMuY3VycmVudE1heExldmVsID8gXCJhcmMgdG9IaWRlXCIgOiBcImFyY1wiKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwiZmlsbC1vcGFjaXR5XCIsIGQgPT4gZC5kZXB0aCA+PSB0aGlzLmN1cnJlbnRNYXhMZXZlbCA/IDAuMiA6IDEpXG4gICAgICAgICAgICAgICAgLm9uKFwiZW5kXCIsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLnByZXZpb3VzTWF4TGV2ZWwgPSB0aGlzLmN1cnJlbnRNYXhMZXZlbDtcbiAgICAgICAgdGhpcy5hcmNEYXRhID0gZmlsdGVyZWREYXRhO1xuICAgIH1cblxuICAgIHByaXZhdGUgYXN5bmMgcmVuZGVyVGV4dChwYXJlbnROb2RlOiBIUk48RGF0YU5vZGU+KSB7XG4gICAgICAgIGNvbnN0IGZpbHRlcmVkRGF0YSA9IHRoaXMuZGF0YS5maWx0ZXIoKGU6IEhSTjxEYXRhTm9kZT4pID0+IHtcbiAgICAgICAgICAgIHJldHVybiBOb2RlVXRpbHMuaXNQYXJlbnRPZihwYXJlbnROb2RlLCBlLCB0aGlzLmN1cnJlbnRNYXhMZXZlbCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnN0IG5ld0RhdGEgPSBmaWx0ZXJlZERhdGEuZmlsdGVyKCh4OiBIUk48RGF0YU5vZGU+KSA9PiAhdGhpcy50ZXh0RGF0YS5pbmNsdWRlcyh4KSk7XG4gICAgICAgIGNvbnN0IGRhdGEgPSB0aGlzLnRleHREYXRhLmNvbmNhdCguLi5uZXdEYXRhKTtcblxuICAgICAgICBpZiAocGFyZW50Tm9kZS5wYXJlbnQpIHtcbiAgICAgICAgICAgIGRhdGEuc3BsaWNlKGRhdGEuaW5kZXhPZihwYXJlbnROb2RlLnBhcmVudCksIDEpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gaGFjayBmb3IgdGhlIGdldENvbXB1dGVkVGV4dExlbmd0aFxuICAgICAgICBjb25zdCB0aGF0ID0gdGhpcztcblxuICAgICAgICBjb25zdCBvZmZzY3JlZW5DYW52YXNTdXBwb3J0ZWQgPSB0eXBlb2YgT2Zmc2NyZWVuQ2FudmFzICE9PSBcInVuZGVmaW5lZFwiO1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgICAgICAgbGV0IGN0eDogT2Zmc2NyZWVuQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEO1xuICAgICAgICBpZiAob2Zmc2NyZWVuQ2FudmFzU3VwcG9ydGVkKSB7XG4gICAgICAgICAgICBjb25zdCBvZmZzY3JlZW5DYW52YXMgPSBuZXcgT2Zmc2NyZWVuQ2FudmFzKDEsIDEpO1xuICAgICAgICAgICAgY3R4ID0gb2Zmc2NyZWVuQ2FudmFzLmdldENvbnRleHQoXCIyZFwiKSE7XG4gICAgICAgICAgICBjdHguZm9udCA9IGN0eCEuZm9udCA9IFwiMTZweCAnSGVsdmV0aWNhIE5ldWUnLCBIZWx2ZXRpY2EsIEFyaWFsLCBzYW5zLXNlcmlmXCJcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFJlbW92ZSBvbGQgdGV4dCBub2Rlc1xuICAgICAgICB0aGlzLnZpc0dFbGVtZW50LnNlbGVjdEFsbChcInRleHRcIikuZGF0YShbXSkuZXhpdCgpLnJlbW92ZSgpO1xuXG4gICAgICAgIC8vIEFkZCBuZXcgdGV4dCBub2Rlc1xuICAgICAgICB0aGlzLnRleHQgPSB0aGlzLnZpc0dFbGVtZW50LnNlbGVjdEFsbChcInRleHRcIikuZGF0YShkYXRhKS5lbnRlcigpLmFwcGVuZChcInRleHRcIilcbiAgICAgICAgICAgIC5zdHlsZShcImZpbGxcIiwgKGQ6IEhSTjxEYXRhTm9kZT4pID0+IENvbG9yVXRpbHMuZ2V0UmVhZGFibGVDb2xvckZvcih0aGlzLmNvbG9yKGQuZGF0YSkpKVxuICAgICAgICAgICAgLnN0eWxlKFwiZmlsbC1vcGFjaXR5XCIsIDApXG4gICAgICAgICAgICAuc3R5bGUoXCJmb250LWZhbWlseVwiLCBcImZvbnQtZmFtaWx5OiBIZWx2ZXRpY2EsICdTdXBlciBTYW5zJywgc2Fucy1zZXJpZlwiKVxuICAgICAgICAgICAgLnN0eWxlKFwicG9pbnRlci1ldmVudHNcIiwgXCJub25lXCIpIC8vIGRvbid0IGludm9rZSBtb3VzZSBldmVudHNcbiAgICAgICAgICAgIC5hdHRyKFwiZHlcIiwgXCIuMmVtXCIpXG4gICAgICAgICAgICAudGV4dCgoZDogSFJOPERhdGFOb2RlPikgPT4gdGhpcy5zZXR0aW5ncy5nZXRMYWJlbChkLmRhdGEpKVxuICAgICAgICAgICAgLnN0eWxlKFwiZm9udC1zaXplXCIsIGZ1bmN0aW9uKHRoaXM6IFNWR1RleHRDb250ZW50RWxlbWVudCwgZDogSFJOPERhdGFOb2RlPikge1xuICAgICAgICAgICAgICAgIGNvbnN0IHR4dExlbmd0aCA9IG9mZnNjcmVlbkNhbnZhc1N1cHBvcnRlZCA/IGN0eC5tZWFzdXJlVGV4dCh0aGlzLnRleHRDb250ZW50ISkud2lkdGggOiB0aGlzLmdldENvbXB1dGVkVGV4dExlbmd0aCgpO1xuICAgICAgICAgICAgICAgIHJldHVybiBNYXRoLmZsb29yKE1hdGgubWluKCgodGhhdC5zZXR0aW5ncy5yYWRpdXMgLyB0aGF0LnNldHRpbmdzLmxldmVscykgLyB0eHRMZW5ndGggKiAxMCkgKyAxLCAxMikpICsgXCJweFwiO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gU29tZXdoYXQgb2YgYSBoYWNrIGFzIHdlIHJlbHkgb24gYXJjVHdlZW4gdXBkYXRpbmcgdGhlIHNjYWxlcy5cbiAgICAgICAgYXdhaXQgbmV3IFByb21pc2U8dm9pZD4oKHJlc29sdmUpID0+IHtcbiAgICAgICAgICAgIHRoaXMudGV4dFxuICAgICAgICAgICAgICAgIC50cmFuc2l0aW9uKCkuZHVyYXRpb24odGhpcy5zZXR0aW5ncy5hbmltYXRpb25EdXJhdGlvbilcbiAgICAgICAgICAgICAgICAuYXR0clR3ZWVuKFwidGV4dC1hbmNob3JcIiwgKGQ6IEhSTjxEYXRhTm9kZT4pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICh0OiBudW1iZXIpID0+IHRoaXMueFNjYWxlKGQueDAgKyAoZC54MSAtIGQueDApIC8gMikgPiBNYXRoLlBJID8gXCJlbmRcIiA6IFwic3RhcnRcIjtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5hdHRyVHdlZW4oXCJkeFwiLCAoZDogSFJOPERhdGFOb2RlPikgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKHQ6IG51bWJlcikgPT4gdGhpcy54U2NhbGUoZC54MCArIChkLngxIC0gZC54MCkgLyAyKSA+IE1hdGguUEkgPyBcIi00cHhcIiA6IFwiNHB4XCI7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAuYXR0clR3ZWVuKFwidHJhbnNmb3JtXCIsIChkOiBIUk48RGF0YU5vZGU+KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAodDogbnVtYmVyKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgYW5nbGUgPSB0aGlzLnhTY2FsZShkLngwICsgKGQueDEgLSBkLngwKSAvIDIpICogMTgwIC8gTWF0aC5QSSAtIDkwO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGByb3RhdGUoJHthbmdsZX0pdHJhbnNsYXRlKCR7dGhpcy55U2NhbGUoZC55MCl9KXJvdGF0ZSgke2FuZ2xlID4gOTAgPyAtMTgwIDogMH0pYDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLnN0eWxlVHdlZW4oXCJmaWxsLW9wYWNpdHlcIiwgZnVuY3Rpb24odGhpczogU1ZHVGV4dENvbnRlbnRFbGVtZW50LCBlOiBIUk48RGF0YU5vZGU+KSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHNlbGVjdGVkRm9udFNpemUgPSBOdW1iZXIucGFyc2VJbnQoZDMuc2VsZWN0KHRoaXMpLnN0eWxlKFwiZm9udC1zaXplXCIpLnJlcGxhY2UoXCJweFwiLCBcIlwiKSlcblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKHQ6IG51bWJlcikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYXZhaWxhYmxlU3BhY2UgPSB0aGF0LmNvbXB1dGVBdmFpbGFibGVTcGFjZShlKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGF2YWlsYWJsZVNwYWNlID4gc2VsZWN0ZWRGb250U2l6ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0LnRvU3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIjBcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLm9uKFwiZW5kXCIsIGZ1bmN0aW9uKHRoaXM6IFNWR1RleHRDb250ZW50RWxlbWVudCwgZTogSFJOPERhdGFOb2RlPikge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBhdmFpbGFibGVTcGFjZSA9IHRoYXQuY29tcHV0ZUF2YWlsYWJsZVNwYWNlKGUpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBub2RlID0gZDMuc2VsZWN0KHRoaXMpO1xuXG4gICAgICAgICAgICAgICAgICAgIG5vZGUuc3R5bGUoXG4gICAgICAgICAgICAgICAgICAgICAgICBcInZpc2liaWxpdHlcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGF2YWlsYWJsZVNwYWNlID4gTnVtYmVyLnBhcnNlSW50KG5vZGUuc3R5bGUoXCJmb250LXNpemVcIikucmVwbGFjZShcInB4XCIsIFwiXCIpKSAmJiBOb2RlVXRpbHMuaXNQYXJlbnRPZihwYXJlbnROb2RlLCBlLCB0aGF0LmN1cnJlbnRNYXhMZXZlbCkgID8gXCJ2aXNpYmxlXCIgOiBcImhpZGRlblwiXG4gICAgICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLnRleHREYXRhID0gZmlsdGVyZWREYXRhO1xuICAgIH1cblxuICAgIHByaXZhdGUgc2V0QnJlYWRjcnVtYnMoZDogSFJOPERhdGFOb2RlPikge1xuICAgICAgICAvLyBGaXJzdCBmaW5kIG91dCB3aGljaCBub2RlcyB3ZSBlbmNvdW50ZXIgb24gdGhlIHBhdGggZnJvbSB0aGUgcm9vdCBub2RlIHRvIHRoZSBjbGlja2VkIG5vZGUuXG4gICAgICAgIGxldCBjcnVtYnM6IEhSTjxEYXRhTm9kZT5bXSA9IFtdO1xuICAgICAgICBsZXQgdGVtcDogKEhSTjxEYXRhTm9kZT4gfCBudWxsKSA9IGQ7XG5cbiAgICAgICAgd2hpbGUgKHRlbXApIHtcbiAgICAgICAgICAgIGNydW1icy5wdXNoKHRlbXApO1xuICAgICAgICAgICAgdGVtcCA9IHRlbXAucGFyZW50O1xuICAgICAgICB9XG4gICAgICAgIGNydW1icy5yZXZlcnNlKCkuc2hpZnQoKTtcblxuICAgICAgICAvLyBTbWFsbCBhcmMgdGhhdCdzIGRyYXduIGZvciBlYWNoIG9mIHRoZSBicmVhZGNydW1ic1xuICAgICAgICBjb25zdCBicmVhZEFyYzogYW55ID0gZDMuYXJjKClcbiAgICAgICAgICAgIC5pbm5lclJhZGl1cygwKVxuICAgICAgICAgICAgLm91dGVyUmFkaXVzKDE1KVxuICAgICAgICAgICAgLnN0YXJ0QW5nbGUoMClcbiAgICAgICAgICAgIC5lbmRBbmdsZSgoZDogYW55KSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDIgKiBNYXRoLlBJICogZC5kYXRhLmNvdW50IC8gZC5wYXJlbnQhLmRhdGEuY291bnRcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuYnJlYWRDcnVtYnMuc2VsZWN0QWxsKFwiLmNydW1iXCIpXG4gICAgICAgICAgICAuZGF0YShjcnVtYnMpXG4gICAgICAgICAgICAuZW50ZXIoKVxuICAgICAgICAgICAgLmFwcGVuZChcImxpXCIpXG4gICAgICAgICAgICAub24oXCJjbGlja1wiLCAoZXZlbnQ6IE1vdXNlRXZlbnQsIGQ6IEhSTjxEYXRhTm9kZT4pID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmNsaWNrKGQucGFyZW50ISk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcImNydW1iXCIpXG4gICAgICAgICAgICAuc3R5bGUoXCJvcGFjaXR5XCIsIFwiMFwiKVxuICAgICAgICAgICAgLmF0dHIoXCJ0aXRsZVwiLCAoZDogSFJOPERhdGFOb2RlPikgPT4gdGhpcy5zZXR0aW5ncy5nZXRUaXRsZVRleHQoZC5kYXRhKSlcbiAgICAgICAgICAgIC5odG1sKChkOiBIUk48RGF0YU5vZGU+KSA9PiBgXG48cCBjbGFzcz0nbmFtZSc+JHtkLmRhdGEubmFtZX08L3A+XG48cCBjbGFzcz0ncGVyY2VudGFnZSc+JHtNYXRoLnJvdW5kKDEwMCAqIGQuZGF0YS5jb3VudCAvIGQucGFyZW50IS5kYXRhLmNvdW50KX0lIG9mICR7ZC5wYXJlbnQ/LmRhdGEubmFtZX08L3A+YClcbiAgICAgICAgICAgIC5pbnNlcnQoXCJzdmdcIiwgXCI6Zmlyc3QtY2hpbGRcIikuYXR0cihcIndpZHRoXCIsIDMwKVxuICAgICAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgMzApXG4gICAgICAgICAgICAuYXBwZW5kKFwicGF0aFwiKVxuICAgICAgICAgICAgLmF0dHIoXCJkXCIsIGJyZWFkQXJjKVxuICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGUoMTUsIDE1KVwiKVxuICAgICAgICAgICAgLmF0dHIoXCJmaWxsXCIsIChkOiBIUk48RGF0YU5vZGU+KSA9PiB0aGlzLmNvbG9yKGQuZGF0YSkpO1xuXG4gICAgICAgIHRoaXMuYnJlYWRDcnVtYnMuc2VsZWN0QWxsKFwiLmNydW1iXCIpXG4gICAgICAgICAgICAudHJhbnNpdGlvbigpXG4gICAgICAgICAgICAuZHVyYXRpb24odGhpcy5zZXR0aW5ncy5hbmltYXRpb25EdXJhdGlvbilcbiAgICAgICAgICAgIC5zdHlsZShcIm9wYWNpdHlcIiwgXCIxXCIpO1xuXG4gICAgICAgIHRoaXMuYnJlYWRDcnVtYnMuc2VsZWN0QWxsKFwiLmNydW1iXCIpXG4gICAgICAgICAgICAuZGF0YShjcnVtYnMpXG4gICAgICAgICAgICAuZXhpdCgpLnRyYW5zaXRpb24oKVxuICAgICAgICAgICAgLmR1cmF0aW9uKHRoaXMuc2V0dGluZ3MuYW5pbWF0aW9uRHVyYXRpb24pXG4gICAgICAgICAgICAuc3R5bGUoXCJvcGFjaXR5XCIsIFwiMFwiKVxuICAgICAgICAgICAgLnJlbW92ZSgpO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IEhpZXJhcmNoeVJlY3Rhbmd1bGFyTm9kZSB9IGZyb20gXCJkM1wiO1xuaW1wb3J0IFNldHRpbmdzIGZyb20gXCIuLy4uLy4uL1NldHRpbmdzXCI7XG5pbXBvcnQgRGF0YU5vZGUgZnJvbSBcIi4vLi4vLi4vRGF0YU5vZGVcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVHJlZW1hcFNldHRpbmdzIGV4dGVuZHMgU2V0dGluZ3Mge1xuICAgIC8qKlxuICAgICAqIENsYXNzbmFtZSB0aGF0J3MgYXNzb2NpYXRlZCB0byB0aGUgZWxlbWVudCB0aGF0J3MgdXNlZCB0byByZW5kZXIgdGhpcyB0cmVlbWFwIGluLlxuICAgICAqL1xuICAgIGNsYXNzTmFtZTogc3RyaW5nID0gXCJ0cmVlbWFwXCI7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgbWF4aW11bSBkZXB0aCBvZiB0aGUgZGF0YSBvYmplY3QuIEJ5IGRlZmF1bHQgdGhlIGFjdHVhbCBkZXB0aCBpcyB1c2VkLlxuICAgICAqL1xuICAgIGxldmVsczogbnVtYmVyIHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGhlaWdodCAoaW4gcGl4ZWxzKSBvZiB0aGUgYnJlYWRjcnVtYiBiYXIuXG4gICAgICovXG4gICAgbGFiZWxIZWlnaHQ6IG51bWJlciA9IDEwO1xuXG4gICAgLyoqXG4gICAgICogQ29sb3Igb2YgdGhlIHJvb3QuXG4gICAgICovXG4gICAgY29sb3JSb290OiBzdHJpbmcgPSBcIiMxMDRCN0RcIjtcblxuICAgIC8qKlxuICAgICAqIENvbG9yIG9mIHRoZSBsZWF2ZXMuXG4gICAgICovXG4gICAgY29sb3JMZWFmOiBzdHJpbmcgPSBcIiNmZGZmY2NcIjtcblxuICAgIC8qKlxuICAgICAqIENvbG9yIG9mIHRoZSBicmVhZGNydW1iIGJhci5cbiAgICAgKi9cbiAgICBjb2xvckJyZWFkY3J1bWJzOiBzdHJpbmcgPSBcIiNGRjhGMDBcIjtcblxuICAgIC8qKlxuICAgICAqIENhbGxiYWNrIHRoYXQncyBjYWxsZWQgd2hlbmV2ZXIgdGhlIHVzZXIgY2xpY2tzIG9uIGEgbm9kZSBpbiB0aGUgdmlzdWFsaXphdGlvbi5cbiAgICAgKi9cbiAgICByZXJvb3RDYWxsYmFjazogKG5vZGU6IERhdGFOb2RlKSA9PiB2b2lkID0gKCkgPT4ge307XG5cbiAgICAvKipcbiAgICAgKiBGdW5jdGlvbiB0aGF0IHJldHVybnMgYSBzdHJpbmcgdG8gdXNlIGFzIHRvb2x0aXAgZm9yIHRoZSBicmVhZGNydW1icy4gSXMgY2FsbGVkIHdpdGggYSBub2RlIGFzIHBhcmFtZXRlci5cbiAgICAgKiBCeSBkZWZhdWx0LCB0aGUgbmFtZSBhdHRyaWJ1dGUgb2YgdGhlIG5vZGUgaXMgdXNlZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBkIEEgRGF0YU5vZGUgZm9yIHdoaWNoIHdlIG5lZWQgdG8gY29ycmVzcG9uZGluZyBicmVhZGNydW1iIHRpdGxlXG4gICAgICogQHJldHVybiBUaGUgYnJlYWRjcnVtYiB0aXRsZSBmb3IgdGhlIGdpdmVuIERhdGFOb2RlLlxuICAgICAqL1xuICAgIGdldEJyZWFkY3J1bWJUb29sdGlwOiAoZDogRGF0YU5vZGUpID0+IHN0cmluZyA9IChkOiBEYXRhTm9kZSkgPT4gZC5uYW1lO1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgaHRtbCB0byB1c2UgYXMgdG9vbHRpcCBmb3IgY3VycmVudCBtb3VzZSBwb3NpdGlvbi4gVGhpcyB0b29sdGlwIHByb3ZpZGVzIGluZm9ybWF0aW9uIHRvIHRoZSB1c2VyXG4gICAgICogYWJvdXQgdGhlIG5vZGUgdGhhdCdzIGN1cnJlbnRseSBob3ZlcmVkIGJ5IHRoZSBtb3VzZSBjdXJzb3IuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdmFsdWUgQ3VycmVudCBub2RlIHRoYXQncyBiZWluZyBob3ZlcmVkIGJ5IHRoZSBtb3VzZSBjdXJzb3IuXG4gICAgICogQHJldHVybiBBIHZhbGlkIEhUTUwtc3RyaW5nIHRoYXQgcmVwcmVzZW50cyBhIHRvb2x0aXAuXG4gICAgICovXG4gICAgZ2V0VG9vbHRpcDogKFxuICAgICAgICB2YWx1ZTogRGF0YU5vZGUsXG4gICAgKSA9PiBzdHJpbmcgPSAodmFsdWU6IERhdGFOb2RlKSA9PiB7XG4gICAgICAgIHJldHVybiBgXG4gICAgICAgICAgICA8c3R5bGU+XG4gICAgICAgICAgICAgICAgLnVuaXBlcHQtdG9vbHRpcCB7XG4gICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6IDEwcHg7XG4gICAgICAgICAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDVweDsgXG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6IHJnYmEoMCwgMCwgMCwgMC44KTsgXG4gICAgICAgICAgICAgICAgICAgIGNvbG9yOiAjZmZmO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAudW5pcGVwdC10b29sdGlwIGRpdiwgLnVuaXBlcHQtdG9vbHRpcCBhIHtcbiAgICAgICAgICAgICAgICAgICAgZm9udC1mYW1pbHk6IFJvYm90bywgJ0hlbHZldGljYSBOZXVlJywgSGVsdmV0aWNhLCBBcmlhbCwgc2Fucy1zZXJpZjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLnVuaXBlcHQtdG9vbHRpcCBkaXYge1xuICAgICAgICAgICAgICAgICAgICBmb250LXdlaWdodDogYm9sZDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICA8L3N0eWxlPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInVuaXBlcHQtdG9vbHRpcFwiPlxuICAgICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgICAgICR7dGhpcy5nZXRUb29sdGlwVGl0bGUodmFsdWUpfVxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDxhPlxuICAgICAgICAgICAgICAgICAgICAke3RoaXMuZ2V0VG9vbHRpcFRleHQodmFsdWUpfVxuICAgICAgICAgICAgICAgIDwvYT5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICBgXG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGV4dCB0aGF0J3MgYmVpbmcgdXNlZCBmb3IgdGhlIHRpdGxlIG9mIGEgdG9vbHRpcC4gVGhpcyB0b29sdGlwIHByb3ZpZGVzIGluZm9ybWF0aW9uIHRvIHRoZSB1c2VyIGFib3V0XG4gICAgICogdGhlIG5vZGUgdGhhdCdzIGN1cnJlbnRseSBob3ZlcmVkIGJ5IHRoZSBtb3VzZSBjdXJzb3IuXG4gICAgICpcbiAgICAgKiBUaGlzIGZ1bmN0aW9uIHJldHVybnMgdGhlIHJvdyBhbmQgY29sdW1uIHRpdGxlIG9mIHRoZSBjdXJyZW50bHkgc2VsZWN0ZWQgdmFsdWUgYnkgZGVmYXVsdC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB2YWx1ZSBDdXJyZW50IG5vZGUgdGhhdCdzIGJlaW5nIGhvdmVyZWQgYnkgdGhlIG1vdXNlIGN1cnNvci5cbiAgICAgKiBAcmV0dXJuIFRleHQgY29udGVudCB0aGF0IHNob3VsZCBiZSB1c2VkIGZvciB0aGUgaGVhZGVyIG9mIHRoZSB0b29sdGlwLlxuICAgICAqL1xuICAgIGdldFRvb2x0aXBUaXRsZTogKHZhbHVlOiBEYXRhTm9kZSkgPT4gc3RyaW5nID0gKHZhbHVlOiBEYXRhTm9kZSkgPT4gdmFsdWUubmFtZTtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGV4dCB0aGF0J3MgYmVpbmcgdXNlZCBmb3IgdGhlIGJvZHkgb2YgYSB0b29sdGlwLiBUaGlzIHRvb2x0aXAgcHJvdmlkZXMgaW5mb3JtYXRpb24gdG8gdGhlIHVzZXIgYWJvdXRcbiAgICAgKiB0aGUgbm9kZSB0aGF0J3MgY3VycmVudGx5IGhvdmVyZWQgYnkgdGhlIG1vdXNlIGN1cnNvci5cbiAgICAgKipcbiAgICAgKiBAcGFyYW0geCBDdXJyZW50IHZhbHVlIGZvciB0aGUgbm9kZSB0aGF0J3MgYmVpbmcgaG92ZXJlZCBieSB0aGUgbW91c2UgY3Vyc29yLlxuICAgICAqIEByZXR1cm4gVGV4dCBjb250ZW50IHRoYXQgc2hvdWxkIGJlIHVzZWQgZm9yIHRoZSBoZWFkZXIgb2YgdGhlIHRvb2x0aXAuXG4gICAgICovXG4gICAgZ2V0VG9vbHRpcFRleHQ6ICh4OiBEYXRhTm9kZSkgPT4gc3RyaW5nID0gKHg6IERhdGFOb2RlKSA9PiBgJHt4LmNvdW50fSBoaXRzYDtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGxhYmVsIHRoYXQgc2hvdWxkIGJlIGRpc3BsYXllZCBmb3IgYSBzcGVjaWZpYyBub2RlICh0aGUgbGFiZWwgY29ycmVzcG9uZHMgdG8gdGhlIHRleHQgc2hvd24gaW4gdGhlXG4gICAgICogdmlzdWFsaXphdGlvbiBvbiB0b3Agb2YgYSByZWN0YW5nbGUpLlxuICAgICAqXG4gICAgICogQHBhcmFtIHggTm9kZSBmb3Igd2hpY2ggdGhlIGxhYmVsIHNob3VsZCBiZSByZW5kZXJlZC5cbiAgICAgKiBAcmV0dXJuIFRoZSBsYWJlbCB0ZXh0LCBleGFjdGx5IGFzIGl0IHNob3VsZCBiZSB1c2VkIGJ5IHRoZSB2aXN1YWxpemF0aW9uLlxuICAgICAqL1xuICAgIGdldExhYmVsOiAoeDogRGF0YU5vZGUpID0+IHN0cmluZyA9ICh4OiBEYXRhTm9kZSkgPT4geC5uYW1lO1xuXG4gICAgLyoqXG4gICAgICogRnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSBkZXB0aCBvZiBhIG5vZGUgKHVzZWQgZm9yIGRldGVybWluaW5nIHRoZSBjb2xvcikuIElzIGNhbGxlZCB3aXRoIGEgbm9kZSBhcyBwYXJhbWV0ZXIuXG4gICAgICogQnkgZGVmYXVsdCB0aGUgYWN0dWFsIGRlcHRoIGlzIHVzZWQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0geCBOb2RlIGZvciB3aGljaCB0aGUgZGVwdGggc2hvdWxkIGJlIGNvbXB1dGVkLlxuICAgICAqIEByZXR1cm4gVGhlIGRlcHRoIHRoYXQncyBhc3NvY2lhdGVkIHdpdGggdGhlIGdpdmVuIG5vZGUuXG4gICAgICovXG4gICAgZ2V0TGV2ZWw6ICh4OiBIaWVyYXJjaHlSZWN0YW5ndWxhck5vZGU8RGF0YU5vZGU+KSA9PiBudW1iZXIgPSAoeDogSGllcmFyY2h5UmVjdGFuZ3VsYXJOb2RlPERhdGFOb2RlPikgPT4gIHguZGVwdGg7XG59XG4iLCJpbXBvcnQgRGF0YU5vZGUsIHsgRGF0YU5vZGVMaWtlIH0gZnJvbSBcIi4vLi4vLi4vRGF0YU5vZGVcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVHJlZW1hcFByZXByb2Nlc3NvciB7XG4gICAgcHJpdmF0ZSBzdGF0aWMgaWRDb3VudGVyOiBudW1iZXIgPSAwO1xuXG4gICAgcHVibGljIHByZXByb2Nlc3NEYXRhKG5vZGU6IERhdGFOb2RlTGlrZSk6IERhdGFOb2RlIHtcbiAgICAgICAgY29uc3QgY2hpbGRyZW46IERhdGFOb2RlW10gPSBbXTtcblxuICAgICAgICBpZiAobm9kZS5jaGlsZHJlbikge1xuICAgICAgICAgICAgZm9yIChjb25zdCBjaGlsZCBvZiBub2RlLmNoaWxkcmVuKSB7XG4gICAgICAgICAgICAgICAgY2hpbGRyZW4ucHVzaCh0aGlzLnByZXByb2Nlc3NEYXRhKGNoaWxkKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbmV3IERhdGFOb2RlKFxuICAgICAgICAgICAgbm9kZS5pZCB8fCArK1RyZWVtYXBQcmVwcm9jZXNzb3IuaWRDb3VudGVyLFxuICAgICAgICAgICAgbm9kZS5uYW1lIHx8IFwiXCIsXG4gICAgICAgICAgICBjaGlsZHJlbixcbiAgICAgICAgICAgIG5vZGUuY291bnQsXG4gICAgICAgICAgICBub2RlLnNlbGZDb3VudCxcbiAgICAgICAgICAgIG5vZGUuZXh0cmFcbiAgICAgICAgKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgKiBhcyBkMyBmcm9tIFwiZDNcIjtcbmltcG9ydCBUcmVlbWFwU2V0dGluZ3MgZnJvbSBcIi4vVHJlZW1hcFNldHRpbmdzXCI7XG5pbXBvcnQgRGF0YU5vZGUsIHsgRGF0YU5vZGVMaWtlIH0gZnJvbSBcIi4vLi4vLi4vRGF0YU5vZGVcIjtcbmltcG9ydCBUb29sdGlwVXRpbGl0aWVzIGZyb20gXCIuLy4uLy4uL3V0aWxpdGllcy9Ub29sdGlwVXRpbGl0aWVzXCI7XG5pbXBvcnQgQ29sb3JVdGlscyBmcm9tIFwiLi8uLi8uLi9jb2xvci9Db2xvclV0aWxzXCI7XG5pbXBvcnQgVHJlZW1hcFByZXByb2Nlc3NvciBmcm9tIFwiLi9UcmVlbWFwUHJlcHJvY2Vzc29yXCI7XG5cbnR5cGUgSFJOPFQ+ID0gZDMuSGllcmFyY2h5UmVjdGFuZ3VsYXJOb2RlPFQ+O1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUcmVlbWFwIHtcbiAgICBwcml2YXRlIHJlYWRvbmx5IHNldHRpbmdzOiBUcmVlbWFwU2V0dGluZ3M7XG4gICAgcHJpdmF0ZSByZWFkb25seSBkYXRhOiBIUk48RGF0YU5vZGU+W107XG5cbiAgICAvLyBUaGlzIGlzIHJlcXVpcmVkIHRvIGZpbmQgb3V0IGhvdyBhIGNsaWNrZWQgbm9kZSBpcyByZWxhdGVkIHRvIGl0J3MgcGFyZW50cyAoc2luY2UgcGFydCBvZiB0aGUgcGFyZW50LWNoaWxkXG4gICAgLy8gcmVsYXRpb24gaXMgbG9zdCB3aGVuIHJlcm9vdGluZyB0aGUgdHJlZSkuXG4gICAgcHJpdmF0ZSByZWFkb25seSBjaGlsZFBhcmVudFJlbGF0aW9uczogTWFwPERhdGFOb2RlLCBEYXRhTm9kZSB8IHVuZGVmaW5lZD4gPSBuZXcgTWFwPERhdGFOb2RlLCBEYXRhTm9kZT4oKTtcblxuICAgIHByaXZhdGUgY3VycmVudFJvb3Q6IEhSTjxEYXRhTm9kZT47XG5cbiAgICBwcml2YXRlIHRvb2x0aXAhOiBkMy5TZWxlY3Rpb248SFRNTERpdkVsZW1lbnQsIHVua25vd24sIEhUTUxFbGVtZW50LCBhbnk+O1xuICAgIHByaXZhdGUgYnJlYWRDcnVtYnM6IGQzLlNlbGVjdGlvbjxIVE1MRGl2RWxlbWVudCwgdW5rbm93biwgSFRNTEVsZW1lbnQsIGFueT47XG4gICAgcHJpdmF0ZSB0cmVlbWFwOiBkMy5TZWxlY3Rpb248SFRNTERpdkVsZW1lbnQsIHVua25vd24sIG51bGwsIHVuZGVmaW5lZD47XG5cbiAgICBwcml2YXRlIGNvbG9yU2NhbGU6IGQzLlNjYWxlTGluZWFyPG51bWJlciwgbnVtYmVyPjtcblxuICAgIHByaXZhdGUgcGFydGl0aW9uOiBkMy5UcmVlbWFwTGF5b3V0PERhdGFOb2RlPjtcbiAgICBwcml2YXRlIG5vZGVJZDogbnVtYmVyID0gMDtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwcml2YXRlIGVsZW1lbnQ6IEhUTUxFbGVtZW50LFxuICAgICAgICBkYXRhOiBEYXRhTm9kZUxpa2UsXG4gICAgICAgIG9wdGlvbnM6IFRyZWVtYXBTZXR0aW5ncyA9IG5ldyBUcmVlbWFwU2V0dGluZ3MoKVxuICAgICkge1xuICAgICAgICB0aGlzLnNldHRpbmdzID0gdGhpcy5maWxsT3B0aW9ucyhvcHRpb25zKTtcblxuICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5lbmFibGVUb29sdGlwcykge1xuICAgICAgICAgICAgdGhpcy50b29sdGlwID0gVG9vbHRpcFV0aWxpdGllcy5pbml0VG9vbHRpcCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5pbml0Q3NzKCk7XG5cbiAgICAgICAgY29uc3QgcHJlcHJvY2Vzc29yID0gbmV3IFRyZWVtYXBQcmVwcm9jZXNzb3IoKTtcblxuICAgICAgICBjb25zdCByb290Tm9kZSA9IGQzLmhpZXJhcmNoeTxEYXRhTm9kZT4ocHJlcHJvY2Vzc29yLnByZXByb2Nlc3NEYXRhKGRhdGEpKTtcbiAgICAgICAgcm9vdE5vZGUuc3VtKChkOiBEYXRhTm9kZSkgPT4gZC5jaGlsZHJlbi5sZW5ndGggPiAwID8gMCA6IGQuY291bnQpO1xuICAgICAgICByb290Tm9kZS5zb3J0KChhOiBkMy5IaWVyYXJjaHlOb2RlPERhdGFOb2RlPiwgYjogZDMuSGllcmFyY2h5Tm9kZTxEYXRhTm9kZT4pID0+IGIudmFsdWUhIC0gYS52YWx1ZSEpO1xuXG4gICAgICAgIHRoaXMucGFydGl0aW9uID0gZDMudHJlZW1hcDxEYXRhTm9kZT4oKTtcbiAgICAgICAgdGhpcy5wYXJ0aXRpb24uc2l6ZShbdGhpcy5zZXR0aW5ncy53aWR0aCArIDEsIHRoaXMuc2V0dGluZ3MuaGVpZ2h0ICsgMV0pXG4gICAgICAgICAgICAucGFkZGluZ1RvcCh0aGlzLnNldHRpbmdzLmxhYmVsSGVpZ2h0KTtcbiAgICAgICAgdGhpcy5kYXRhID0gdGhpcy5wYXJ0aXRpb24ocm9vdE5vZGUpLmRlc2NlbmRhbnRzKCk7XG5cbiAgICAgICAgaWYgKCF0aGlzLnNldHRpbmdzLmxldmVscykge1xuICAgICAgICAgICAgdGhpcy5zZXR0aW5ncy5sZXZlbHMgPSB0aGlzLmRhdGFbMF0uaGVpZ2h0O1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChjb25zdCBpdGVtIG9mIHRoaXMuZGF0YSkge1xuICAgICAgICAgICAgdGhpcy5jaGlsZFBhcmVudFJlbGF0aW9ucy5zZXQoaXRlbS5kYXRhLCBpdGVtLnBhcmVudD8uZGF0YSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmN1cnJlbnRSb290ID0gdGhpcy5kYXRhWzBdO1xuXG4gICAgICAgIHRoaXMuY29sb3JTY2FsZSA9ICBkMy5zY2FsZUxpbmVhcigpXG4gICAgICAgICAgICAuZG9tYWluKFswLCB0aGlzLnNldHRpbmdzLmxldmVsc10pXG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICAucmFuZ2UoW3RoaXMuc2V0dGluZ3MuY29sb3JSb290LCB0aGlzLnNldHRpbmdzLmNvbG9yTGVhZl0pXG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICAuaW50ZXJwb2xhdGUoZDMuaW50ZXJwb2xhdGVMYWIpO1xuXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgdGhpcy5icmVhZENydW1icyA9IGQzLnNlbGVjdCh0aGlzLmVsZW1lbnQpXG4gICAgICAgICAgICAuYXBwZW5kKFwiZGl2XCIpXG4gICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwiYnJlYWRjcnVtYnNcIilcbiAgICAgICAgICAgIC5zdHlsZShcInBvc2l0aW9uXCIsIFwicmVsYXRpdmVcIilcbiAgICAgICAgICAgIC5zdHlsZShcIndpZHRoXCIsIHRoaXMuc2V0dGluZ3Mud2lkdGggKyBcInB4XCIpXG4gICAgICAgICAgICAuc3R5bGUoXCJoZWlnaHRcIiwgXCIyMHB4XCIpXG4gICAgICAgICAgICAuc3R5bGUoXCJiYWNrZ3JvdW5kLWNvbG9yXCIsIHRoaXMuc2V0dGluZ3MuY29sb3JCcmVhZGNydW1icyk7XG5cbiAgICAgICAgdGhpcy50cmVlbWFwID0gZDMuc2VsZWN0KHRoaXMuZWxlbWVudClcbiAgICAgICAgICAgIC5hcHBlbmQoXCJkaXZcIilcbiAgICAgICAgICAgIC5zdHlsZShcInBvc2l0aW9uXCIsIFwicmVsYXRpdmVcIilcbiAgICAgICAgICAgIC5zdHlsZShcIndpZHRoXCIsIHRoaXMuc2V0dGluZ3Mud2lkdGggKyBcInB4XCIpXG4gICAgICAgICAgICAuc3R5bGUoXCJoZWlnaHRcIiwgdGhpcy5zZXR0aW5ncy5oZWlnaHQgKyBcInB4XCIpO1xuXG4gICAgICAgIHRoaXMucmVuZGVyKHRoaXMuY3VycmVudFJvb3QpO1xuICAgIH1cblxuICAgIHB1YmxpYyByZXNpemUobmV3V2lkdGg6IG51bWJlciwgbmV3SGVpZ2h0OiBudW1iZXIpIHtcbiAgICAgICAgdGhpcy5zZXR0aW5ncy53aWR0aCA9IG5ld1dpZHRoO1xuICAgICAgICB0aGlzLnNldHRpbmdzLmhlaWdodCA9IG5ld0hlaWdodDtcbiAgICAgICAgdGhpcy5wYXJ0aXRpb24uc2l6ZShbbmV3V2lkdGggKyAxLCBuZXdIZWlnaHQgKyAxXSk7XG5cbiAgICAgICAgdGhpcy5icmVhZENydW1icy5zdHlsZShcIndpZHRoXCIsIHRoaXMuc2V0dGluZ3Mud2lkdGggKyBcInB4XCIpO1xuICAgICAgICB0aGlzLnRyZWVtYXAuc3R5bGUoXCJ3aWR0aFwiLCB0aGlzLnNldHRpbmdzLndpZHRoICsgXCJweFwiKTtcbiAgICAgICAgdGhpcy50cmVlbWFwLnN0eWxlKFwiaGVpZ2h0XCIsIHRoaXMuc2V0dGluZ3MuaGVpZ2h0ICsgXCJweFwiKTtcblxuICAgICAgICB0aGlzLnJlbmRlcih0aGlzLmN1cnJlbnRSb290LCBmYWxzZSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBmaWxsT3B0aW9ucyhvcHRpb25zOiBhbnkgPSB1bmRlZmluZWQpOiBUcmVlbWFwU2V0dGluZ3Mge1xuICAgICAgICBjb25zdCBvdXRwdXQgPSBuZXcgVHJlZW1hcFNldHRpbmdzKCk7XG4gICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKG91dHB1dCwgb3B0aW9ucyk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBpbml0Q3NzKCkge1xuICAgICAgICBsZXQgZWxlbWVudENsYXNzID0gdGhpcy5zZXR0aW5ncy5jbGFzc05hbWU7XG4gICAgICAgIHRoaXMuZWxlbWVudC5jbGFzc05hbWUgKz0gXCIgXCIgKyBlbGVtZW50Q2xhc3M7XG5cbiAgICAgICAgY29uc3Qgc3R5bGVFbGVtZW50ID0gdGhpcy5lbGVtZW50Lm93bmVyRG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuICAgICAgICBzdHlsZUVsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy5lbGVtZW50Lm93bmVyRG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoYFxuICAgICAgICAgICAgLiR7ZWxlbWVudENsYXNzfSB7XG4gICAgICAgICAgICAgICAgZm9udC1mYW1pbHk6IEFyaWFsLHNhbnMtc2VyaWY7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAuJHtlbGVtZW50Q2xhc3N9IC5ub2RlIHtcbiAgICAgICAgICAgICAgICBmb250LXNpemU6IDlweDtcbiAgICAgICAgICAgICAgICBsaW5lLWhlaWdodDogMTBweDtcbiAgICAgICAgICAgICAgICBvdmVyZmxvdzogaGlkZGVuO1xuICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgICAgICAgICAgICB0ZXh0LWluZGVudDogMnB4O1xuICAgICAgICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICAgICAgICAgICAgICB0ZXh0LW92ZXJmbG93OiBlbGxpcHNpcztcbiAgICAgICAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAuJHtlbGVtZW50Q2xhc3N9IC5ub2RlOmhvdmVyIHtcbiAgICAgICAgICAgICAgICBvdXRsaW5lOiAxcHggc29saWQgd2hpdGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAuJHtlbGVtZW50Q2xhc3N9IC5icmVhZGNydW1icyB7XG4gICAgICAgICAgICAgICAgZm9udC1zaXplOiAxMXB4O1xuICAgICAgICAgICAgICAgIGxpbmUtaGVpZ2h0OiAyMHB4O1xuICAgICAgICAgICAgICAgIHBhZGRpbmctbGVmdDogNXB4O1xuICAgICAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xuICAgICAgICAgICAgICAgIGNvbG9yOiB3aGl0ZTtcbiAgICAgICAgICAgICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLmZ1bGwtc2NyZWVuIC4ke2VsZW1lbnRDbGFzc30gLmJyZWFkY3J1bWJzIHtcbiAgICAgICAgICAgICAgICB3aWR0aDogMTAwJSAhaW1wb3J0YW50O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLiR7ZWxlbWVudENsYXNzfSAuY3J1bWIge1xuICAgICAgICAgICAgICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC4ke2VsZW1lbnRDbGFzc30gLmNydW1iIC5saW5rOmhvdmVyIHtcbiAgICAgICAgICAgICAgICB0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC4ke2VsZW1lbnRDbGFzc30gLmJyZWFkY3J1bWJzIC5jcnVtYiArIC5jcnVtYjo6YmVmb3JlIHtcbiAgICAgICAgICAgICAgICBjb250ZW50OiBcIiA+IFwiO1xuICAgICAgICAgICAgICAgIGN1cnNvcjogZGVmYXVsdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgYCkpO1xuICAgICAgICB0aGlzLmVsZW1lbnQub3duZXJEb2N1bWVudC5oZWFkLmFwcGVuZChzdHlsZUVsZW1lbnQpO1xuICAgIH1cblxuICAgIHByaXZhdGUgcmVuZGVyKGRhdGE6IEhSTjxEYXRhTm9kZT4sIHRyaWdnZXJDYWxsYmFjazogYm9vbGVhbiA9IHRydWUpIHtcbiAgICAgICAgdGhpcy5jdXJyZW50Um9vdCA9IGRhdGE7XG5cbiAgICAgICAgdGhpcy5zZXRCcmVhZGNydW1icygpO1xuXG4gICAgICAgIGNvbnN0IHJvb3ROb2RlID0gZDMuaGllcmFyY2h5PERhdGFOb2RlPihkYXRhLmRhdGEpO1xuICAgICAgICByb290Tm9kZS5zdW0oKGQ6IERhdGFOb2RlKSA9PiBkLmNoaWxkcmVuLmxlbmd0aCA+IDAgPyAwIDogZC5jb3VudCk7XG5cbiAgICAgICAgcm9vdE5vZGUuc29ydCgoYTogZDMuSGllcmFyY2h5Tm9kZTxEYXRhTm9kZT4sIGI6IGQzLkhpZXJhcmNoeU5vZGU8RGF0YU5vZGU+KSA9PiBiLnZhbHVlISAtIGEudmFsdWUhKTtcblxuICAgICAgICBsZXQgbm9kZXMgPSB0aGlzLnRyZWVtYXAuc2VsZWN0QWxsPGQzLkJhc2VUeXBlLCBIUk48RGF0YU5vZGU+PihcIi5ub2RlXCIpXG4gICAgICAgICAgICAuZGF0YShcbiAgICAgICAgICAgICAgICB0aGlzLnBhcnRpdGlvbihyb290Tm9kZSkuZGVzY2VuZGFudHMoKSxcbiAgICAgICAgICAgICAgICAoZDogSFJOPERhdGFOb2RlPikgPT4gZC5kYXRhLmlkIHx8IChkLmRhdGEuaWQgPSArK3RoaXMubm9kZUlkKVxuICAgICAgICAgICAgKTtcblxuICAgICAgICBjb25zdCBkaXZOb2RlcyA9IG5vZGVzLmVudGVyKClcbiAgICAgICAgICAgIC5hcHBlbmQoXCJkaXZcIilcbiAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJub2RlXCIpXG4gICAgICAgICAgICAuc3R5bGUoXCJiYWNrZ3JvdW5kXCIsIChkOiBIUk48RGF0YU5vZGU+KSA9PiB0aGlzLmNvbG9yU2NhbGUodGhpcy5zZXR0aW5ncy5nZXRMZXZlbChkKSkpXG4gICAgICAgICAgICAuc3R5bGUoXCJjb2xvclwiLCAoZDogSFJOPERhdGFOb2RlPikgPT4gQ29sb3JVdGlscy5nZXRSZWFkYWJsZUNvbG9yRm9yKHRoaXMuY29sb3JTY2FsZSh0aGlzLnNldHRpbmdzLmdldExldmVsKGQpKS50b1N0cmluZygpKSlcbiAgICAgICAgICAgIC5zdHlsZShcImxlZnRcIiwgXCIwcHhcIilcbiAgICAgICAgICAgIC5zdHlsZShcInRvcFwiLCBcIjBweFwiKVxuICAgICAgICAgICAgLnN0eWxlKFwid2lkdGhcIiwgXCIwcHhcIilcbiAgICAgICAgICAgIC5zdHlsZShcImhlaWdodFwiLCBcIjBweFwiKVxuICAgICAgICAgICAgLnRleHQoKGQ6IEhSTjxEYXRhTm9kZT4pID0+IHRoaXMuc2V0dGluZ3MuZ2V0TGFiZWwoZC5kYXRhKSlcbiAgICAgICAgICAgIC5vbihcImNsaWNrXCIsIChldmVudDogTW91c2VFdmVudCwgZDogSFJOPERhdGFOb2RlPikgPT4gdGhpcy5yZW5kZXIoZCkpXG4gICAgICAgICAgICAub24oXCJjb250ZXh0bWVudVwiLCAoZXZlbnQ6IE1vdXNlRXZlbnQsIGQ6IEhSTjxEYXRhTm9kZT4pID0+IHtcbiAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmN1cnJlbnRSb290LnBhcmVudCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbmRlcih0aGlzLmN1cnJlbnRSb290LnBhcmVudCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5vbihcIm1vdXNlb3ZlclwiLCAoZXZlbnQ6IE1vdXNlRXZlbnQsIGQ6IEhSTjxEYXRhTm9kZT4pID0+IHRoaXMudG9vbHRpcEluKGV2ZW50LCBkKSlcbiAgICAgICAgICAgIC5vbihcIm1vdXNlbW92ZVwiLCAoZXZlbnQ6IE1vdXNlRXZlbnQsIGQ6IEhSTjxEYXRhTm9kZT4pID0+IHRoaXMudG9vbHRpcE1vdmUoZXZlbnQsIGQpKVxuICAgICAgICAgICAgLm9uKFwibW91c2VvdXRcIiwgKGV2ZW50OiBNb3VzZUV2ZW50LCBkOiBIUk48RGF0YU5vZGU+KSA9PiB0aGlzLnRvb2x0aXBPdXQoZXZlbnQsIGQpKTtcblxuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIGRpdk5vZGVzLm1lcmdlKG5vZGVzKVxuICAgICAgICAgICAgLm9yZGVyKClcbiAgICAgICAgICAgIC50cmFuc2l0aW9uKClcbiAgICAgICAgICAgIC5jYWxsKCh0cmFuc2l0aW9uKSA9PiB7XG4gICAgICAgICAgICAgICAgdHJhbnNpdGlvbi5zdHlsZShcImxlZnRcIiwgKGQ6IEhSTjxEYXRhTm9kZT4pID0+IGQueDAgKyBcInB4XCIpO1xuICAgICAgICAgICAgICAgIHRyYW5zaXRpb24uc3R5bGUoXCJ0b3BcIiwgKGQ6IEhSTjxEYXRhTm9kZT4pID0+IGQueTAgKyBcInB4XCIpO1xuICAgICAgICAgICAgICAgIHRyYW5zaXRpb24uc3R5bGUoXCJ3aWR0aFwiLCAoZDogSFJOPERhdGFOb2RlPikgPT4gTWF0aC5tYXgoMCwgKGQueDEgLSBkLngwKSAtIDEpICsgXCJweFwiKTtcbiAgICAgICAgICAgICAgICB0cmFuc2l0aW9uLnN0eWxlKFwiaGVpZ2h0XCIsIChkOiBIUk48RGF0YU5vZGU+KSA9PiBNYXRoLm1heCgwLCAoZC55MSAtIGQueTApIC0gMSkgKyBcInB4XCIpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgbm9kZXMuZXhpdCgpLnJlbW92ZSgpO1xuXG4gICAgICAgIGlmICh0cmlnZ2VyQ2FsbGJhY2spIHtcbiAgICAgICAgICAgIHRoaXMuc2V0dGluZ3MucmVyb290Q2FsbGJhY2sodGhpcy5jdXJyZW50Um9vdC5kYXRhKVxuICAgICAgICB9XG5cbiAgICB9XG5cbiAgICBwcml2YXRlIHNldEJyZWFkY3J1bWJzKCkge1xuICAgICAgICBsZXQgY3J1bWJzOiBEYXRhTm9kZVtdID0gW107XG4gICAgICAgIGxldCB0ZW1wOiBEYXRhTm9kZSB8IHVuZGVmaW5lZCA9IHRoaXMuY3VycmVudFJvb3QuZGF0YTtcbiAgICAgICAgd2hpbGUgKHRlbXApIHtcbiAgICAgICAgICAgIGNydW1icy5wdXNoKHRlbXApO1xuICAgICAgICAgICAgdGVtcCA9IHRoaXMuY2hpbGRQYXJlbnRSZWxhdGlvbnMuZ2V0KHRlbXApO1xuICAgICAgICB9XG4gICAgICAgIGNydW1icy5yZXZlcnNlKCk7XG5cbiAgICAgICAgdGhpcy5icmVhZENydW1icy5odG1sKFwiXCIpO1xuICAgICAgICB0aGlzLmJyZWFkQ3J1bWJzLnNlbGVjdEFsbChcIi5jcnVtYlwiKVxuICAgICAgICAgICAgLmRhdGEoY3J1bWJzKVxuICAgICAgICAgICAgLmVudGVyKClcbiAgICAgICAgICAgIC5hcHBlbmQoXCJzcGFuXCIpXG4gICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwiY3J1bWJcIilcbiAgICAgICAgICAgIC5hdHRyKFwidGl0bGVcIiwgKGQ6IERhdGFOb2RlKSA9PiB0aGlzLnNldHRpbmdzLmdldEJyZWFkY3J1bWJUb29sdGlwKGQpKVxuICAgICAgICAgICAgLmh0bWwoKGQ6IERhdGFOb2RlKSA9PiBgPHNwYW4gY2xhc3M9J2xpbmsnPiR7ZC5uYW1lfTwvc3Bhbj5gKVxuICAgICAgICAgICAgLm9uKFwiY2xpY2tcIiwgKGV2ZW50OiBNb3VzZUV2ZW50LCBkOiBEYXRhTm9kZSkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyKHRoaXMuZGF0YS5maWx0ZXIoKGl0ZW06IEhSTjxEYXRhTm9kZT4pID0+IGl0ZW0uZGF0YS5pZCA9PT0gZC5pZClbMF0pO1xuICAgICAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSB0b29sdGlwSW4oZXZlbnQ6IE1vdXNlRXZlbnQsIGQ6IEhSTjxEYXRhTm9kZT4pIHtcbiAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3MuZW5hYmxlVG9vbHRpcHMgJiYgdGhpcy50b29sdGlwKSB7XG4gICAgICAgICAgICB0aGlzLnRvb2x0aXAuaHRtbCh0aGlzLnNldHRpbmdzLmdldFRvb2x0aXAoZC5kYXRhKSlcbiAgICAgICAgICAgICAgICAuc3R5bGUoXCJ0b3BcIiwgKGV2ZW50LnBhZ2VZICsgMTApICsgXCJweFwiKVxuICAgICAgICAgICAgICAgIC5zdHlsZShcImxlZnRcIiwgKGV2ZW50LnBhZ2VYICsgMTApICsgXCJweFwiKVxuICAgICAgICAgICAgICAgIC5zdHlsZShcInZpc2liaWxpdHlcIiwgXCJ2aXNpYmxlXCIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSB0b29sdGlwTW92ZShldmVudDogTW91c2VFdmVudCwgZDogSFJOPERhdGFOb2RlPikge1xuICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5lbmFibGVUb29sdGlwcyAmJiB0aGlzLnRvb2x0aXApIHtcbiAgICAgICAgICAgIHRoaXMudG9vbHRpcFxuICAgICAgICAgICAgICAgIC5zdHlsZShcInRvcFwiLCAoZXZlbnQucGFnZVkgKyAxMCkgKyBcInB4XCIpXG4gICAgICAgICAgICAgICAgLnN0eWxlKFwibGVmdFwiLCAoZXZlbnQucGFnZVggKyAxMCkgKyBcInB4XCIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSB0b29sdGlwT3V0KGV2ZW50OiBNb3VzZUV2ZW50LCBkOiBIUk48RGF0YU5vZGU+KSB7XG4gICAgICAgIGlmICh0aGlzLnNldHRpbmdzLmVuYWJsZVRvb2x0aXBzICYmIHRoaXMudG9vbHRpcCkge1xuICAgICAgICAgICAgdGhpcy50b29sdGlwLnN0eWxlKFwidmlzaWJpbGl0eVwiLCBcImhpZGRlblwiKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsImltcG9ydCB7IHNjYWxlT3JkaW5hbCwgc2NoZW1lQ2F0ZWdvcnkxMCwgSGllcmFyY2h5UG9pbnRMaW5rIH0gZnJvbSBcImQzXCI7XG5cbmltcG9ydCBTZXR0aW5ncyBmcm9tIFwiLi8uLi8uLi9TZXR0aW5nc1wiO1xuaW1wb3J0IFRyZWV2aWV3Tm9kZSBmcm9tIFwiLi9UcmVldmlld05vZGVcIjtcblxuY29uc3QgZGVmYXVsdENvbG9yU2NhbGUgPSBzY2FsZU9yZGluYWwoc2NoZW1lQ2F0ZWdvcnkxMCk7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRyZWV2aWV3U2V0dGluZ3MgZXh0ZW5kcyBTZXR0aW5ncyB7XG4gICAgLyoqXG4gICAgICogU2l6ZSAoaW4gcGl4ZWxzKSB0aGF0IHNob3VsZCBiZSBhc3NvY2lhdGVkIHRvIG5vZGVzIHdpdGggdGhlIGxvd2VzdCBwb3NzaWJsZSBjb3VudCB2YWx1ZS5cbiAgICAgKi9cbiAgICBtaW5Ob2RlU2l6ZTogbnVtYmVyID0gMjtcblxuICAgIC8qKlxuICAgICAqIFNpemUgKGluIHBpeGVscykgdGhhdCBzaG91bGQgYmUgYXNzb2NpYXRlZCB0byBub2RlcyB3aXRoIHRoZSBtYXhpbXVtIHBvc3NpYmxlIGNvdW50IHZhbHVlLlxuICAgICAqL1xuICAgIG1heE5vZGVTaXplOiBudW1iZXIgPSAxMDU7XG5cbiAgICAvKipcbiAgICAgKiBTaG91bGQgYSBzdWJ0cmVlIGJlIGV4cGFuZGVkIC8gY29sbGFwc2Ugd2hlbiBpdCdzIHJvb3QgaGFzIGJlZW4gY2xpY2tlZD9cbiAgICAgKi9cbiAgICBlbmFibGVFeHBhbmRPbkNsaWNrOiBib29sZWFuID0gdHJ1ZTtcblxuICAgIC8qKlxuICAgICAqIFNob3VsZCBhIGhldXJpc3RpYyBiZSB1c2VkIHRvIGV4cGFuZCB0aGUgbW9zdCBpbXBvcnRhbnQgYnJhbmNoZXMgd2hlbiBsb2FkaW5nIHRoZSBpbml0aWFsIHZpc3VhbGl6YXRpb24uXG4gICAgICogSWYgYSBudW1iZXIgaXMgc3VwcGxpZWQsIHRoYXQgbnVtYmVyIHdpbGwgYmUgdXNlZCBhcyBwYXJhbWV0ZXIgZm9yIHRoZSBoZXVyaXN0aWMsIGEgaGlnaGVyIHZhbHVlIGNhdXNlc1xuICAgICAqIG1vcmUgZXhwYW5zaW9uLlxuICAgICAqL1xuICAgIGVuYWJsZUF1dG9FeHBhbmQ6IGJvb2xlYW4gPSBmYWxzZTtcblxuICAgIC8qKlxuICAgICAqIFZhbHVlIHRoYXQncyB1c2VkIHRvIHR3ZWFrIHRoZSBhdXRvLWV4cGFuZCBoZXVyaXN0aWMgb2YgdGhlIHZpc3VhbGl6YXRpb24uIEluY3JlYXNlIHRvIGV4cGFuZCBtb3JlLlxuICAgICAqL1xuICAgIGF1dG9FeHBhbmRWYWx1ZTogbnVtYmVyID0gMC44O1xuXG4gICAgLyoqXG4gICAgICogVGhlIG51bWJlciBvZiBsZXZlbHMgdG8gZXhwYW5kIGFmdGVyIGNsaWNraW5nIG9uIGEgbm9kZSBhbmQgd2hlbiBsb2FkaW5nIHRoZSBpbml0aWFsIHZpc3VhbGl6YXRpb24uXG4gICAgICovXG4gICAgbGV2ZWxzVG9FeHBhbmQ6IG51bWJlciA9IDI7XG5cbiAgICAvKipcbiAgICAgKiBTaG91bGQgdGhlIHRyZWUgcmVyb290IHdoZW4gcmlnaHQgY2xpY2tpbmcgYSBub2RlP1xuICAgICAqL1xuICAgIGVuYWJsZVJpZ2h0Q2xpY2s6IGJvb2xlYW4gPSB0cnVlO1xuXG4gICAgLyoqXG4gICAgICogU2hvdWxkIGlubmVyIGFyY3MgYmUgc2hvd24/XG4gICAgICovXG4gICAgZW5hYmxlSW5uZXJBcmNzOiBib29sZWFuID0gdHJ1ZTtcblxuICAgIC8qKlxuICAgICAqIFNob3VsZCBsYWJlbHMgKGNvbnRhaW5pbmcgdGhlIG5vZGUncyBuYW1lcykgYmUgc2hvd24sIG5leHQgdG8gdGhlIG5vZGVzP1xuICAgICAqL1xuICAgIGVuYWJsZUxhYmVsczogYm9vbGVhbiA9IHRydWU7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgaG9yaXpvbnRhbCBkaXN0YW5jZSAoaW4gcGl4ZWxzKSBiZXR3ZWVuIG5vZGVzLlxuICAgICAqL1xuICAgIG5vZGVEaXN0YW5jZTogbnVtYmVyID0gMTgwO1xuXG4gICAgLyoqXG4gICAgICogVGltZSB0aGUgYW5pbWF0aW9uIHNob3VsZCBsYXN0IChpbiBtaWxsaXNlY29uZHMpLlxuICAgICAqL1xuICAgIGFuaW1hdGlvbkR1cmF0aW9uOiBudW1iZXIgPSA1MDA7XG5cbiAgICAvKipcbiAgICAgKiBGdW5jdGlvbiB0aGF0IHJldHVybnMgYSBjb2xvciB0byB1c2UgYXMgYSBmaWxsIGNvbG9yLlxuICAgICAqXG4gICAgICogQHBhcmFtIGQgVGhlIFRyZWV2aWV3Tm9kZSBmb3Igd2hpY2ggdGhlIG5vZGUgZmlsbCBjb2xvciBzaG91bGQgYmUgcmV0dXJuZWQuXG4gICAgICogQHJldHVybiBUaGUgY29sb3IgdGhhdCBzaG91bGQgYmUgdXNlZCBhcyBhIGZpbGwgY29sb3IgZm9yIGEgbm9kZS5cbiAgICAgKi9cbiAgICBub2RlRmlsbENvbG9yOiAoZDogVHJlZXZpZXdOb2RlKSA9PiBzdHJpbmcgPSAoZDogVHJlZXZpZXdOb2RlKSA9PiB7XG4gICAgICAgIGlmIChkLmlzU2VsZWN0ZWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIGQuY2hpbGRyZW4ubGVuZ3RoID4gMCA/IGQuZ2V0Q29sb3IoKSB8fCBcIiNhYWFcIiA6IFwiI2ZmZlwiO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIFwiI2FhYVwiO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRnVuY3Rpb24gdGhhdCByZXR1cm5zIGEgY29sb3IgdG8gdXNlIGFzIGEgc3Ryb2tlIGNvbG9yIGZvciBhIG5vZGUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZCBUaGUgVHJlZXZpZXdOb2RlIGZvciB3aGljaCB0aGUgc3Ryb2tlIGNvbG9yIHNob3VsZCBiZSByZXR1cm5lZC5cbiAgICAgKiBAcmV0dXJuIFRoZSBjb2xvciB0aGF0IHNob3VsZCBiZSB1c2VkIGFzIGEgc3Ryb2tlIGNvbG9yIGZvciBhIG5vZGUuXG4gICAgICovXG4gICAgbm9kZVN0cm9rZUNvbG9yOiAoZDogVHJlZXZpZXdOb2RlKSA9PiBzdHJpbmcgPVxuICAgICAgICAoZDogVHJlZXZpZXdOb2RlKSA9PiBkLmlzU2VsZWN0ZWQoKSA/IChkLmdldENvbG9yKCkgfHwgXCIjYWFhXCIpIDogXCIjYWFhXCI7XG5cbiAgICAvKipcbiAgICAgKiBGdW5jdGlvbiB0aGF0IHJldHVybnMgYSBjb2xvciB0byB1c2UgYXMgYSBzdHJva2UgZm9yIGEgbGluayAoYSBjb25uZWN0aW9uIGJldHdlZW4gdHdvIG5vZGVzKS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBsIFRoZSBsaW5rIGZvciB3aGljaCB0aGUgc3Ryb2tlIGNvbG9yIHNob3VsZCBiZSBkZXRlcm1pbmVkLiBBIGxpbmsgY29udGFpbnMgYm90aCBhIHNvdXJjZSBhbmQgdGFyZ2V0IG5vZGUuXG4gICAgICogQHJldHVybiBUaGUgY29sb3IgdGhhdCBzaG91bGQgYmUgdXNlZCBhcyBhIHN0cm9rZSBjb2xvciBmb3IgdGhlIGdpdmVuIGxpbmsuXG4gICAgICovXG4gICAgbGlua1N0cm9rZUNvbG9yOiAobDogSGllcmFyY2h5UG9pbnRMaW5rPFRyZWV2aWV3Tm9kZT4pID0+IHN0cmluZyA9XG4gICAgICAgIChsOiBIaWVyYXJjaHlQb2ludExpbms8VHJlZXZpZXdOb2RlPikgPT4gbC5zb3VyY2UuZGF0YS5pc1NlbGVjdGVkKCkgPyBsLnRhcmdldC5kYXRhLmdldENvbG9yKCkgOiBcIiNhYWFcIjtcblxuICAgIC8qKlxuICAgICAqIEZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGUgY29sb3IgdGhhdCBzaG91bGQgYmUgdXNlZCBmb3IgYSBzcGVjaWZpYyBub2RlLiBUaGlzIGFjdHVhbGx5IGNvcnJlc3BvbmRzIHRvIHRoZVxuICAgICAqIHNwZWNpZmljIGNvbG9yIHNjYWxlIHRoYXQgc2hvdWxkIGJlIHVzZWQgZm9yIHRoaXMgdmlzdWFsaXphdGlvbi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBkIEEgVHJlZXZpZXdOb2RlIGZvciB3aGljaCB0aGUgY29ycmVzcG9uZGluZyBjb2xvciBzaG91bGQgYmUgY29tcHV0ZWQuXG4gICAgICogQHJldHVybiBUaGUgY29sb3IgYXNzb2NpYXRlZCB3aXRoIHRoZSBnaXZlbiBub2RlLlxuICAgICAqL1xuICAgIGNvbG9yUHJvdmlkZXI6IChkOiBUcmVldmlld05vZGUpID0+IHN0cmluZyA9IChkOiBUcmVldmlld05vZGUpID0+IGRlZmF1bHRDb2xvclNjYWxlKGQubmFtZSk7XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBsYWJlbCB0aGF0IHNob3VsZCBiZSBkaXNwbGF5ZWQgZm9yIGEgc3BlY2lmaWMgbm9kZSAodGhlIGxhYmVsIGNvcnJlc3BvbmRzIHRvIHRoZSB0ZXh0IHNob3duIGluIHRoZVxuICAgICAqIHZpc3VhbGl6YXRpb24gb24gdG9wIG9mIGEgbm9kZSkuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZCBOb2RlIGZvciB3aGljaCB0aGUgbGFiZWwgc2hvdWxkIGJlIHJlbmRlcmVkLlxuICAgICAqIEByZXR1cm4gVGhlIGxhYmVsIHRleHQsIGV4YWN0bHkgYXMgaXQgc2hvdWxkIGJlIHVzZWQgYnkgdGhlIHZpc3VhbGl6YXRpb24uXG4gICAgICovXG4gICAgZ2V0TGFiZWw6IChkOiBUcmVldmlld05vZGUpID0+IHN0cmluZyA9IChkOiBUcmVldmlld05vZGUpID0+IGQubmFtZTtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGh0bWwgdG8gdXNlIGFzIHRvb2x0aXAgZm9yIGN1cnJlbnQgbW91c2UgcG9zaXRpb24uIFRoaXMgdG9vbHRpcCBwcm92aWRlcyBpbmZvcm1hdGlvbiB0byB0aGUgdXNlclxuICAgICAqIGFib3V0IHRoZSBub2RlIHRoYXQncyBjdXJyZW50bHkgaG92ZXJlZCBieSB0aGUgbW91c2UgY3Vyc29yLlxuICAgICAqXG4gICAgICogQHBhcmFtIHZhbHVlIEN1cnJlbnQgbm9kZSB0aGF0J3MgYmVpbmcgaG92ZXJlZCBieSB0aGUgbW91c2UgY3Vyc29yLlxuICAgICAqIEByZXR1cm4gQSB2YWxpZCBIVE1MLXN0cmluZyB0aGF0IHJlcHJlc2VudHMgYSB0b29sdGlwLlxuICAgICAqL1xuICAgIGdldFRvb2x0aXA6IChcbiAgICAgICAgdmFsdWU6IFRyZWV2aWV3Tm9kZSxcbiAgICApID0+IHN0cmluZyA9ICh2YWx1ZTogVHJlZXZpZXdOb2RlKSA9PiB7XG4gICAgICAgIHJldHVybiBgXG4gICAgICAgICAgICA8c3R5bGU+XG4gICAgICAgICAgICAgICAgLnVuaXBlcHQtdG9vbHRpcCB7XG4gICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6IDEwcHg7XG4gICAgICAgICAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDVweDsgXG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6IHJnYmEoMCwgMCwgMCwgMC44KTsgXG4gICAgICAgICAgICAgICAgICAgIGNvbG9yOiAjZmZmO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAudW5pcGVwdC10b29sdGlwIGRpdiwgLnVuaXBlcHQtdG9vbHRpcCBhIHtcbiAgICAgICAgICAgICAgICAgICAgZm9udC1mYW1pbHk6IFJvYm90bywgJ0hlbHZldGljYSBOZXVlJywgSGVsdmV0aWNhLCBBcmlhbCwgc2Fucy1zZXJpZjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLnVuaXBlcHQtdG9vbHRpcCBkaXYge1xuICAgICAgICAgICAgICAgICAgICBmb250LXdlaWdodDogYm9sZDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICA8L3N0eWxlPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInVuaXBlcHQtdG9vbHRpcFwiPlxuICAgICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgICAgICR7dGhpcy5nZXRUb29sdGlwVGl0bGUodmFsdWUpfVxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDxhPlxuICAgICAgICAgICAgICAgICAgICAke3RoaXMuZ2V0VG9vbHRpcFRleHQodmFsdWUpfVxuICAgICAgICAgICAgICAgIDwvYT5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICBgXG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGV4dCB0aGF0J3MgYmVpbmcgdXNlZCBmb3IgdGhlIHRpdGxlIG9mIGEgdG9vbHRpcC4gVGhpcyB0b29sdGlwIHByb3ZpZGVzIGluZm9ybWF0aW9uIHRvIHRoZSB1c2VyIGFib3V0XG4gICAgICogdGhlIG5vZGUgdGhhdCdzIGN1cnJlbnRseSBob3ZlcmVkIGJ5IHRoZSBtb3VzZSBjdXJzb3IuXG4gICAgICpcbiAgICAgKiBUaGlzIGZ1bmN0aW9uIHJldHVybnMgdGhlIHJvdyBhbmQgY29sdW1uIHRpdGxlIG9mIHRoZSBjdXJyZW50bHkgc2VsZWN0ZWQgdmFsdWUgYnkgZGVmYXVsdC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB2YWx1ZSBDdXJyZW50IG5vZGUgdGhhdCdzIGJlaW5nIGhvdmVyZWQgYnkgdGhlIG1vdXNlIGN1cnNvci5cbiAgICAgKiBAcmV0dXJuIFRleHQgY29udGVudCB0aGF0IHNob3VsZCBiZSB1c2VkIGZvciB0aGUgaGVhZGVyIG9mIHRoZSB0b29sdGlwLlxuICAgICAqL1xuICAgIGdldFRvb2x0aXBUaXRsZTogKHZhbHVlOiBUcmVldmlld05vZGUpID0+IHN0cmluZyA9ICh2YWx1ZTogVHJlZXZpZXdOb2RlKSA9PiB2YWx1ZS5uYW1lO1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0ZXh0IHRoYXQncyBiZWluZyB1c2VkIGZvciB0aGUgYm9keSBvZiBhIHRvb2x0aXAuIFRoaXMgdG9vbHRpcCBwcm92aWRlcyBpbmZvcm1hdGlvbiB0byB0aGUgdXNlciBhYm91dFxuICAgICAqIHRoZSBub2RlIHRoYXQncyBjdXJyZW50bHkgaG92ZXJlZCBieSB0aGUgbW91c2UgY3Vyc29yLlxuICAgICAqKlxuICAgICAqIEBwYXJhbSB4IEN1cnJlbnQgdmFsdWUgZm9yIHRoZSBub2RlIHRoYXQncyBiZWluZyBob3ZlcmVkIGJ5IHRoZSBtb3VzZSBjdXJzb3IuXG4gICAgICogQHJldHVybiBUZXh0IGNvbnRlbnQgdGhhdCBzaG91bGQgYmUgdXNlZCBmb3IgdGhlIGhlYWRlciBvZiB0aGUgdG9vbHRpcC5cbiAgICAgKi9cbiAgICBnZXRUb29sdGlwVGV4dDogKHg6IFRyZWV2aWV3Tm9kZSkgPT4gc3RyaW5nID0gKHg6IFRyZWV2aWV3Tm9kZSkgPT4gYCR7eC5jb3VudH0gaGl0c2A7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBNYXhDb3VudEhlYXA8VD4ge1xuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IGRhdGE6IFRbXSA9IFtdLFxuICAgICAgICBwcml2YXRlIGNvbXBhcmF0b3I6IChhOiBULCBiOiBUKSA9PiBudW1iZXJcbiAgICApIHtcbiAgICAgICAgdGhpcy5oZWFwaWZ5KCk7XG4gICAgfVxuXG4gICAgcHVibGljIGFkZChpdGVtOiBUKTogdm9pZCB7XG4gICAgICAgIHRoaXMuZGF0YS5wdXNoKGl0ZW0pO1xuICAgICAgICB0aGlzLmJ1YmJsZVVwKHRoaXMuZGF0YS5sZW5ndGggLSAxKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgcGVlaygpOiBUIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YVswXTtcbiAgICB9XG5cbiAgICBwdWJsaWMgcmVtb3ZlKCk6IFQge1xuICAgICAgICBjb25zdCBvdXRwdXQgPSB0aGlzLmRhdGFbMF07XG5cbiAgICAgICAgaWYgKHRoaXMuZGF0YS5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICB0aGlzLmRhdGFbMF0gPSB0aGlzLmRhdGEucG9wKCkhO1xuICAgICAgICAgICAgdGhpcy5zaW5rKDApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5kYXRhLnBvcCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG91dHB1dDtcbiAgICB9XG5cbiAgICBwdWJsaWMgY2xlYXIoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuZGF0YS5zcGxpY2UoMCwgdGhpcy5kYXRhLmxlbmd0aCk7XG4gICAgfVxuXG4gICAgcHVibGljIHNpemUoKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YS5sZW5ndGg7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBoZWFwaWZ5KCkge1xuICAgICAgICBmb3IgKGxldCBpID0gTWF0aC5mbG9vcigodGhpcy5kYXRhLmxlbmd0aCAtIDIpIC8gMik7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgICB0aGlzLnNpbmsoaSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGJ1YmJsZVVwKGluZGV4OiBudW1iZXIpOiBudW1iZXIge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IHRoaXMuZGF0YVtpbmRleF07XG5cbiAgICAgICAgd2hpbGUgKGluZGV4ID4gMCkge1xuICAgICAgICAgICAgY29uc3QgcGFyZW50SW5kZXggPSBNYXRoLmZsb29yKChpbmRleCAtIDEpIC8gMik7XG4gICAgICAgICAgICBjb25zdCBwYXJlbnQgPSB0aGlzLmRhdGFbcGFyZW50SW5kZXhdO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5jb21wYXJhdG9yKHZhbHVlLCBwYXJlbnQpIDwgMCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZGF0YVtpbmRleF0gPSBwYXJlbnQ7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpbmRleCA9IHBhcmVudEluZGV4O1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5kYXRhW2luZGV4XSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzaW5rKGluZGV4OiBudW1iZXIpOiBudW1iZXIge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IHRoaXMuZGF0YVtpbmRleF07XG4gICAgICAgIGNvbnN0IHNpemUgPSB0aGlzLmRhdGEubGVuZ3RoO1xuXG4gICAgICAgIHdoaWxlICgyICogaW5kZXggKyAxIDwgc2l6ZSkge1xuICAgICAgICAgICAgbGV0IHRhcmdldEluZGV4ID0gMiAqIGluZGV4ICsgMTtcbiAgICAgICAgICAgIGlmICh0YXJnZXRJbmRleCA8IHNpemUgLSAxICYmIHRoaXMuY29tcGFyYXRvcih0aGlzLmRhdGFbdGFyZ2V0SW5kZXggKyAxXSwgdGhpcy5kYXRhW3RhcmdldEluZGV4XSkgPCAwKSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0SW5kZXgrKztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHRoaXMuY29tcGFyYXRvcih2YWx1ZSwgdGhpcy5kYXRhW3RhcmdldEluZGV4XSkgPD0gMCkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLmRhdGFbaW5kZXhdID0gdGhpcy5kYXRhW3RhcmdldEluZGV4XTtcbiAgICAgICAgICAgIGluZGV4ID0gdGFyZ2V0SW5kZXg7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmRhdGFbaW5kZXhdID0gdmFsdWU7XG4gICAgICAgIHJldHVybiBpbmRleDtcbiAgICB9XG59XG4iLCJpbXBvcnQgRGF0YU5vZGUgZnJvbSBcIi4vLi4vLi4vRGF0YU5vZGVcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVHJlZXZpZXdOb2RlIGV4dGVuZHMgRGF0YU5vZGUge1xuICAgIHB1YmxpYyBwcmV2aW91c1Bvc2l0aW9uOiB7IHg6IG51bWJlciwgeTogbnVtYmVyIH0gPSB7IHg6IDAsIHk6IDAgfTtcblxuICAgIHByaXZhdGUgc2VsZWN0ZWQ6IGJvb2xlYW4gPSBmYWxzZTtcbiAgICBwcml2YXRlIGNvbGxhcHNlZDogYm9vbGVhbiA9IGZhbHNlO1xuICAgIHByaXZhdGUgY29sb3I6IHN0cmluZyA9IFwiXCI7XG5cbiAgICBwdWJsaWMgaXNDb2xsYXBzZWQoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbGxhcHNlZDtcbiAgICB9XG5cbiAgICBwdWJsaWMgc2V0Q29sbGFwc2VkKHZhbHVlOiBib29sZWFuKTogdm9pZCB7XG4gICAgICAgIHRoaXMuY29sbGFwc2VkID0gdmFsdWU7XG4gICAgfVxuXG4gICAgcHVibGljIGlzU2VsZWN0ZWQoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLnNlbGVjdGVkO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRDb2xvcigpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5jb2xvcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBNYXJrIHRoaXMgbm9kZSBhbmQgYWxsIG9mIGl0cyBjaGlsZHJlbiBhcyAoZGUpc2VsZWN0ZWQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdmFsdWUgVHJ1ZSBpZiB0aGUgbm9kZSBzaG91bGQgYmUgbWFya2VkIGFzIHNlbGVjdGVkLCBmYWxzZSBvdGhlcndpc2UuXG4gICAgICovXG4gICAgcHVibGljIHNldFNlbGVjdGVkKHZhbHVlOiBib29sZWFuKSB7XG4gICAgICAgIHRoaXMuc2VsZWN0ZWQgPSB2YWx1ZTtcbiAgICAgICAgZm9yIChjb25zdCBjaGlsZCBvZiB0aGlzLmNoaWxkcmVuKSB7XG4gICAgICAgICAgICAoY2hpbGQgYXMgVHJlZXZpZXdOb2RlKS5zZXRTZWxlY3RlZCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZWN1cnNpdmVseSBjb2xsYXBzZSBhbGwgY2hpbGRyZW4gb2YgdGhpcyBub2RlLlxuICAgICAqL1xuICAgIHB1YmxpYyBjb2xsYXBzZUFsbCgpOiB2b2lkIHtcbiAgICAgICAgZm9yIChjb25zdCBjaGlsZCBvZiAodGhpcy5jaGlsZHJlbiBhcyBUcmVldmlld05vZGVbXSkpIHtcbiAgICAgICAgICAgIGNoaWxkLnNldENvbGxhcHNlZCh0cnVlKTtcbiAgICAgICAgICAgIGNoaWxkLmNvbGxhcHNlQWxsKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb2xsYXBzZSB0aGlzIG5vZGUuXG4gICAgICovXG4gICAgcHVibGljIGNvbGxhcHNlKCk6IHZvaWQge1xuICAgICAgICBmb3IgKGNvbnN0IGNoaWxkIG9mICh0aGlzLmNoaWxkcmVuIGFzIFRyZWV2aWV3Tm9kZVtdKSkge1xuICAgICAgICAgICAgY2hpbGQuc2V0Q29sbGFwc2VkKHRydWUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRXhwYW5kIHRoaXMgbm9kZSBhbmQgYWxsIG9mIGl0cyBjaGlsZHJlbiByZWN1cnNpdmVseS5cbiAgICAgKi9cbiAgICBwdWJsaWMgZXhwYW5kQWxsKCk6IHZvaWQge1xuICAgICAgICB0aGlzLmV4cGFuZCgxMDApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEV4cGFuZCB0aGlzIG5vZGUgYW5kIGFsbCBjaGlsZHJlbiB0aGF0IGFyZSBtYXhpbXVtIGkgbGV2ZWxzIGRlZXBlciB0aGFuIHRoZSBjdXJyZW50IG5vZGUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gaSBNYXhpbXVtIGFtb3VudCBvZiBsZXZlbHMgZGVlcGVyIGF0IHdoaWNoIG5vZGVzIHdpbGwgYmUgZXhwYW5kZWQuXG4gICAgICovXG4gICAgcHVibGljIGV4cGFuZChpOiBudW1iZXIpOiB2b2lkIHtcbiAgICAgICAgaWYgKGkgPiAwKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5jaGlsZHJlbi5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBjaGlsZCBvZiAodGhpcy5jaGlsZHJlbiBhcyBUcmVldmlld05vZGVbXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2hpbGQuc2V0Q29sbGFwc2VkKGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgY2hpbGQuZXhwYW5kKGkgLSAxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZWN1cnNpdmVseSBzZXRzIHRoZSBjb2xvciBvZiB0aGlzIG5vZGUgYW5kIGFsbCBvZiBpdCdzIGNoaWxkcmVuIHRvIHRoZSBwcm92aWRlZCB2YWx1ZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBjb2xvciBIVE1MIGhleCBzdHJpbmcgdGhhdCByZXByZXNlbnRzIGEgdmFsaWQgY29sb3IuXG4gICAgICovXG4gICAgcHVibGljIHNldENvbG9yKGNvbG9yOiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5jb2xvciA9IGNvbG9yO1xuICAgICAgICBmb3IgKGNvbnN0IGNoaWxkIG9mICh0aGlzLmNoaWxkcmVuIGFzIFRyZWV2aWV3Tm9kZVtdKSkge1xuICAgICAgICAgICAgY2hpbGQuc2V0Q29sb3IoY29sb3IpO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwiaW1wb3J0IFRyZWV2aWV3Tm9kZSBmcm9tIFwiLi9UcmVldmlld05vZGVcIjtcbmltcG9ydCB7IERhdGFOb2RlTGlrZSB9IGZyb20gXCIuLy4uLy4uL0RhdGFOb2RlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRyZWV2aWV3UHJlcHJvY2Vzc29yIHtcbiAgICBwcml2YXRlIHN0YXRpYyBpZENvdW50ZXI6IG51bWJlciA9IDA7XG5cbiAgICBwdWJsaWMgcHJlcHJvY2Vzc0RhdGEoZGF0YTogRGF0YU5vZGVMaWtlKTogVHJlZXZpZXdOb2RlIHtcbiAgICAgICAgY29uc3QgY2hpbGRyZW46IFRyZWV2aWV3Tm9kZVtdID0gW107XG5cbiAgICAgICAgaWYgKGRhdGEuY2hpbGRyZW4pIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgY2hpbGQgb2YgZGF0YS5jaGlsZHJlbikge1xuICAgICAgICAgICAgICAgIGNoaWxkcmVuLnB1c2godGhpcy5wcmVwcm9jZXNzRGF0YShjaGlsZCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG5ldyBUcmVldmlld05vZGUoXG4gICAgICAgICAgICBkYXRhLmlkIHx8ICsrVHJlZXZpZXdQcmVwcm9jZXNzb3IuaWRDb3VudGVyLFxuICAgICAgICAgICAgZGF0YS5uYW1lIHx8IFwiXCIsXG4gICAgICAgICAgICBjaGlsZHJlbixcbiAgICAgICAgICAgIGRhdGEuY291bnQsXG4gICAgICAgICAgICBkYXRhLnNlbGZDb3VudCxcbiAgICAgICAgICAgIGRhdGEuZXh0cmFcbiAgICAgICAgKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgKiBhcyBkMyBmcm9tIFwiZDNcIjtcblxuaW1wb3J0IFRyZWV2aWV3U2V0dGluZ3MgZnJvbSBcIi4vVHJlZXZpZXdTZXR0aW5nc1wiO1xuaW1wb3J0IFRyZWV2aWV3Tm9kZSBmcm9tIFwiLi9UcmVldmlld05vZGVcIjtcbmltcG9ydCBNYXhDb3VudEhlYXAgZnJvbSBcIi4vaGVhcC9NYXhDb3VudEhlYXBcIjtcbmltcG9ydCBUcmVldmlld1ByZXByb2Nlc3NvciBmcm9tIFwiLi9UcmVldmlld1ByZXByb2Nlc3NvclwiO1xuaW1wb3J0IFRvb2x0aXBVdGlsaXRpZXMgZnJvbSBcIi4vLi4vLi4vdXRpbGl0aWVzL1Rvb2x0aXBVdGlsaXRpZXNcIjtcbmltcG9ydCB7IERhdGFOb2RlTGlrZSB9IGZyb20gXCIuLy4uLy4uL0RhdGFOb2RlXCI7XG5cbnR5cGUgSFBOPFQ+ID0gZDMuSGllcmFyY2h5UG9pbnROb2RlPFQ+O1xudHlwZSBIUEw8VD4gPSBkMy5IaWVyYXJjaHlQb2ludExpbms8VD47XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRyZWV2aWV3IHtcbiAgICBwcml2YXRlIHJlYWRvbmx5IHNldHRpbmdzOiBUcmVldmlld1NldHRpbmdzO1xuICAgIHByaXZhdGUgcmVhZG9ubHkgZGF0YTogSFBOPFRyZWV2aWV3Tm9kZT5bXTtcblxuICAgIHByaXZhdGUgcm9vdDogSFBOPFRyZWV2aWV3Tm9kZT47XG4gICAgcHJpdmF0ZSBub2RlSWQ6IG51bWJlciA9IDA7XG5cbiAgICBwcml2YXRlIHdpZHRoU2NhbGU6IGQzLlNjYWxlTGluZWFyPG51bWJlciwgbnVtYmVyPjtcbiAgICBwcml2YXRlIHRyZWVMYXlvdXQ6IGQzLlRyZWVMYXlvdXQ8VHJlZXZpZXdOb2RlPjtcblxuICAgIHByaXZhdGUgdmlzRWxlbWVudDogZDMuU2VsZWN0aW9uPFNWR0dFbGVtZW50LCBhbnksIGQzLkJhc2VUeXBlLCB1bmtub3duPjtcblxuICAgIHByaXZhdGUgdG9vbHRpcCE6IGQzLlNlbGVjdGlvbjxIVE1MRGl2RWxlbWVudCwgdW5rbm93biwgSFRNTEVsZW1lbnQsIGFueT47XG5cbiAgICBwcml2YXRlIHpvb21MaXN0ZW5lcjogZDMuWm9vbUJlaGF2aW9yPGFueSwgYW55PjtcbiAgICBwcml2YXRlIHRvb2x0aXBUaW1lciE6IG51bWJlcjtcblxuICAgIHByaXZhdGUgem9vbVNjYWxlOiBudW1iZXIgPSAxO1xuXG4gICAgcHJpdmF0ZSBzdmc6IGFueTtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IGVsZW1lbnQ6IEhUTUxFbGVtZW50LFxuICAgICAgICBkYXRhOiBEYXRhTm9kZUxpa2UsXG4gICAgICAgIG9wdGlvbnM6IFRyZWV2aWV3U2V0dGluZ3MgPSBuZXcgVHJlZXZpZXdTZXR0aW5ncygpXG4gICAgKSB7XG4gICAgICAgIHRoaXMuc2V0dGluZ3MgPSB0aGlzLmZpbGxPcHRpb25zKG9wdGlvbnMpO1xuXG4gICAgICAgIGlmICh0aGlzLnNldHRpbmdzLmVuYWJsZVRvb2x0aXBzKSB7XG4gICAgICAgICAgICB0aGlzLnRvb2x0aXAgPSBUb29sdGlwVXRpbGl0aWVzLmluaXRUb29sdGlwKCk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBkYXRhUHJvY2Vzc29yID0gbmV3IFRyZWV2aWV3UHJlcHJvY2Vzc29yKCk7XG4gICAgICAgIGNvbnN0IHByb2Nlc3NlZERhdGEgPSBkYXRhUHJvY2Vzc29yLnByZXByb2Nlc3NEYXRhKGRhdGEpO1xuXG4gICAgICAgIGNvbnN0IHJvb3ROb2RlID0gZDMuaGllcmFyY2h5PFRyZWV2aWV3Tm9kZT4ocHJvY2Vzc2VkRGF0YSk7XG4gICAgICAgIC8vIFdlIGRvbid0IHdhbnQgRDMgdG8gY29tcHV0ZSB0aGUgc3VtIGl0c2VsZi4gVGhhdCdzIHdoeSB3ZSBuZWVkIHRvIHJldHVybiAwIGlmIHRoZSBjdXJyZW50IG5vZGUgaGFzIG5vXG4gICAgICAgIC8vIGNoaWxkcmVuLlxuICAgICAgICByb290Tm9kZS5zdW0oKGQ6IFRyZWV2aWV3Tm9kZSkgPT4gZC5jaGlsZHJlbi5sZW5ndGggPiAwID8gMCA6IGQuY291bnQpO1xuXG4gICAgICAgIHRoaXMud2lkdGhTY2FsZSA9IGQzLnNjYWxlTGluZWFyKClcbiAgICAgICAgICAgIC5yYW5nZShbdGhpcy5zZXR0aW5ncy5taW5Ob2RlU2l6ZSwgdGhpcy5zZXR0aW5ncy5tYXhOb2RlU2l6ZV0pO1xuXG4gICAgICAgIHRoaXMudHJlZUxheW91dCA9IGQzLnRyZWU8VHJlZXZpZXdOb2RlPigpXG4gICAgICAgICAgICAubm9kZVNpemUoWzIsIDEwXSlcbiAgICAgICAgICAgIC5zZXBhcmF0aW9uKChhOiBIUE48VHJlZXZpZXdOb2RlPiwgYjogSFBOPFRyZWV2aWV3Tm9kZT4pID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoYS5kYXRhLmlzQ29sbGFwc2VkKCkgfHwgYi5kYXRhLmlzQ29sbGFwc2VkKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IHdpZHRoID0gKHRoaXMuY29tcHV0ZU5vZGVTaXplKGEpICsgdGhpcy5jb21wdXRlTm9kZVNpemUoYikpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGRpc3RhbmNlID0gd2lkdGggLyAyICsgNDtcbiAgICAgICAgICAgICAgICByZXR1cm4gKGEucGFyZW50ID09PSBiLnBhcmVudCkgPyBkaXN0YW5jZSA6IGRpc3RhbmNlICsgNDtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuZGF0YSA9IHRoaXMudHJlZUxheW91dChyb290Tm9kZSkuZGVzY2VuZGFudHMoKTtcbiAgICAgICAgdGhpcy5yb290ID0gdGhpcy5kYXRhWzBdO1xuXG4gICAgICAgIHRoaXMuZWxlbWVudC5pbm5lckhUTUwgPSBcIlwiO1xuXG4gICAgICAgIHRoaXMuc3ZnID0gZDMuc2VsZWN0KHRoaXMuZWxlbWVudClcbiAgICAgICAgICAgIC5hcHBlbmQoXCJzdmdcIilcbiAgICAgICAgICAgIC5hdHRyKFwidmVyc2lvblwiLCBcIjEuMVwiKVxuICAgICAgICAgICAgLmF0dHIoXCJ4bWxuc1wiLCBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIpXG4gICAgICAgICAgICAuYXR0cihcInZpZXdCb3hcIiwgYDAgMCAke3RoaXMuc2V0dGluZ3Mud2lkdGh9ICR7dGhpcy5zZXR0aW5ncy5oZWlnaHR9YClcbiAgICAgICAgICAgIC5hdHRyKFwid2lkdGhcIiwgdGhpcy5zZXR0aW5ncy53aWR0aClcbiAgICAgICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIHRoaXMuc2V0dGluZ3MuaGVpZ2h0KVxuICAgICAgICAgICAgLnN0eWxlKFwiZm9udC1mYW1pbHlcIiwgXCInSGVsdmV0aWNhIE5ldWUnLCBIZWx2ZXRpY2EsIEFyaWFsLCBzYW5zLXNlcmlmXCIpO1xuXG4gICAgICAgIHRoaXMuem9vbUxpc3RlbmVyID0gZDMuem9vbSgpXG4gICAgICAgICAgICAuZXh0ZW50KFtbMCwgMF0sIFt0aGlzLnNldHRpbmdzLndpZHRoLCB0aGlzLnNldHRpbmdzLmhlaWdodF1dKVxuICAgICAgICAgICAgLnNjYWxlRXh0ZW50KFswLjEsIDNdKVxuICAgICAgICAgICAgLm9uKFwiem9vbVwiLCAoZXZlbnQ6IGQzLkQzWm9vbUV2ZW50PGFueSwgYW55PikgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuem9vbVNjYWxlID0gZXZlbnQudHJhbnNmb3JtLms7XG4gICAgICAgICAgICAgICAgdGhpcy52aXNFbGVtZW50LmF0dHIoXCJ0cmFuc2Zvcm1cIiwgZXZlbnQudHJhbnNmb3JtLnRvU3RyaW5nKCkpXG4gICAgICAgICAgICB9KVxuXG4gICAgICAgIHRoaXMudmlzRWxlbWVudCA9IHRoaXMuc3ZnLmNhbGwodGhpcy56b29tTGlzdGVuZXIpLmFwcGVuZChcImdcIik7XG5cbiAgICAgICAgdGhpcy5yZW5kZXIodGhpcy5yb290KTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGZpbGxPcHRpb25zKG9wdGlvbnM6IGFueSA9IHVuZGVmaW5lZCk6IFRyZWV2aWV3U2V0dGluZ3Mge1xuICAgICAgICBjb25zdCBvdXRwdXQgPSBuZXcgVHJlZXZpZXdTZXR0aW5ncygpO1xuICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihvdXRwdXQsIG9wdGlvbnMpO1xuICAgIH1cblxuICAgIHByaXZhdGUgcmVuZGVyKHJvb3Q6IEhQTjxUcmVldmlld05vZGU+KSB7XG4gICAgICAgIHRoaXMud2lkdGhTY2FsZS5kb21haW4oWzAsIHJvb3QuZGF0YS5jb3VudF0pO1xuXG4gICAgICAgIHRoaXMucm9vdCA9IHJvb3Q7XG5cbiAgICAgICAgdGhpcy5yb290LnggPSB0aGlzLnNldHRpbmdzLmhlaWdodCAvIDI7XG4gICAgICAgIHRoaXMucm9vdC55ID0gMDtcblxuICAgICAgICB0aGlzLnJvb3QuZGF0YS5zZXRTZWxlY3RlZCh0cnVlKTtcblxuICAgICAgICB0aGlzLnJvb3QuY2hpbGRyZW4/LmZvckVhY2goKGQ6IEhQTjxUcmVldmlld05vZGU+LCBpOiBudW1iZXIpID0+IHtcbiAgICAgICAgICAgIGQuZGF0YS5zZXRDb2xvcih0aGlzLnNldHRpbmdzLmNvbG9yUHJvdmlkZXIoZC5kYXRhKSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmICh0aGlzLnNldHRpbmdzLmVuYWJsZUV4cGFuZE9uQ2xpY2spIHtcbiAgICAgICAgICAgIHRoaXMucm9vdC5kYXRhLmNvbGxhcHNlQWxsKCk7XG4gICAgICAgICAgICB0aGlzLmluaXRpYWxFeHBhbmQodGhpcy5yb290KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMucm9vdC5kYXRhLmV4cGFuZEFsbCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy51cGRhdGUocm9vdCk7XG4gICAgICAgIHRoaXMuY2VudGVyUm9vdChyb290KTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGNlbnRlclJvb3Qoc291cmNlOiBIUE48VHJlZXZpZXdOb2RlPik6IHZvaWQge1xuICAgICAgICBsZXQgW3gsIHldID0gWy1zb3VyY2UueSwgLXNvdXJjZS54XTtcblxuICAgICAgICB4ID0geCAqIHRoaXMuem9vbVNjYWxlICsgdGhpcy5zZXR0aW5ncy53aWR0aCAvIDQ7XG4gICAgICAgIHkgPSB5ICogdGhpcy56b29tU2NhbGUgKyB0aGlzLnNldHRpbmdzLmhlaWdodCAvIDI7XG5cbiAgICAgICAgdGhpcy52aXNFbGVtZW50XG4gICAgICAgICAgICAudHJhbnNpdGlvbigpXG4gICAgICAgICAgICAuZHVyYXRpb24odGhpcy5zZXR0aW5ncy5hbmltYXRpb25EdXJhdGlvbilcbiAgICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIGB0cmFuc2xhdGUoJHt4fSwke3l9KXNjYWxlKCR7dGhpcy56b29tU2NhbGV9KWApXG4gICAgICAgICAgICAub24oXCJlbmRcIiwgKCkgPT4gdGhpcy56b29tTGlzdGVuZXIudHJhbnNmb3JtKHRoaXMuc3ZnLCBkMy56b29tSWRlbnRpdHkudHJhbnNsYXRlKHgsIHkpLnNjYWxlKHRoaXMuem9vbVNjYWxlKSkpO1xuICAgIH1cblxuICAgIHByaXZhdGUgaW5pdGlhbEV4cGFuZChyb290OiBIUE48VHJlZXZpZXdOb2RlPik6IHZvaWQge1xuICAgICAgICBpZiAoIXRoaXMuc2V0dGluZ3MuZW5hYmxlQXV0b0V4cGFuZCkge1xuICAgICAgICAgICAgcm9vdC5kYXRhLmV4cGFuZCh0aGlzLnNldHRpbmdzLmxldmVsc1RvRXhwYW5kKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJvb3QuZGF0YS5leHBhbmQoMSk7XG4gICAgICAgIGxldCBhbGxvd2VkQ291bnQgPSByb290LmRhdGEuY291bnQgKiAodGhpcy5zZXR0aW5ncy5lbmFibGVBdXRvRXhwYW5kID8gdGhpcy5zZXR0aW5ncy5hdXRvRXhwYW5kVmFsdWUgOiAwLjgpO1xuICAgICAgICBjb25zdCBwcSA9IG5ldyBNYXhDb3VudEhlYXA8SFBOPFRyZWV2aWV3Tm9kZT4+KFsuLi4ocm9vdC5jaGlsZHJlbiB8fCBbXSldLCAoYTogSFBOPFRyZWV2aWV3Tm9kZT4sIGI6IEhQTjxUcmVldmlld05vZGU+KSA9PiBiLmRhdGEuY291bnQgLSBhLmRhdGEuY291bnQpO1xuICAgICAgICB3aGlsZSAoYWxsb3dlZENvdW50ID4gMCAmJiBwcS5zaXplKCkgPiAwKSB7XG4gICAgICAgICAgICBjb25zdCB0b0V4cGFuZCA9IHBxLnJlbW92ZSgpO1xuICAgICAgICAgICAgYWxsb3dlZENvdW50IC09IHRvRXhwYW5kLmRhdGEuY291bnQ7XG4gICAgICAgICAgICB0b0V4cGFuZC5kYXRhLmV4cGFuZCgxKTtcbiAgICAgICAgICAgIHRvRXhwYW5kLmNoaWxkcmVuPy5mb3JFYWNoKChkOiBIUE48VHJlZXZpZXdOb2RlPiwgaTogbnVtYmVyKSA9PiB7XG4gICAgICAgICAgICAgICAgcHEuYWRkKGQpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIHVwZGF0ZShzb3VyY2U6IEhQTjxUcmVldmlld05vZGU+KTogdm9pZCB7XG4gICAgICAgIC8vIENvbXB1dGUgdGhlIG5ldyB0cmVlIGxheW91dFxuICAgICAgICBjb25zdCBsYXlvdXQgPSB0aGlzLnRyZWVMYXlvdXQodGhpcy5yb290KTtcbiAgICAgICAgY29uc3Qgbm9kZXM6IEhQTjxUcmVldmlld05vZGU+W10gPSBsYXlvdXQuZGVzY2VuZGFudHMoKS5yZXZlcnNlKCkuZmlsdGVyKChkOiBIUE48VHJlZXZpZXdOb2RlPikgPT4gIWQuZGF0YS5pc0NvbGxhcHNlZCgpKTtcbiAgICAgICAgY29uc3QgbGlua3M6IEhQTDxUcmVldmlld05vZGU+W10gPSBsYXlvdXQubGlua3MoKS5maWx0ZXIoKGQ6IEhQTDxUcmVldmlld05vZGU+KSA9PiAhZC50YXJnZXQuZGF0YS5pc0NvbGxhcHNlZCgpICYmICFkLnNvdXJjZS5kYXRhLmlzQ29sbGFwc2VkKCkpO1xuXG4gICAgICAgIC8vIE5vcm1hbGl6ZSBmb3IgZml4ZWQgZGVwdGguIFRoZSBkZXB0aCBvZiBhIG5vZGUgZGV0ZXJtaW5lcyBpdCdzIGhvcml6b250YWwgcG9zaXRpb24gZnJvbSB0aGUgcm9vdC5cbiAgICAgICAgbm9kZXMuZm9yRWFjaChkID0+IGQueSA9IGQuZGVwdGggKiB0aGlzLnNldHRpbmdzLm5vZGVEaXN0YW5jZSk7XG5cbiAgICAgICAgLy8gVXBkYXRlIHRoZSBub2Rlcy4uLlxuICAgICAgICBjb25zdCBub2RlID0gdGhpcy52aXNFbGVtZW50LnNlbGVjdEFsbDxkMy5CYXNlVHlwZSwgSFBOPFRyZWV2aWV3Tm9kZT4+KFwiZy5ub2RlXCIpXG4gICAgICAgICAgICAuZGF0YShub2RlcywgKGQ6IEhQTjxUcmVldmlld05vZGU+KSA9PiBkLmRhdGEuaWQgfHwgKGQuZGF0YS5pZCA9ICsrdGhpcy5ub2RlSWQpKTtcblxuICAgICAgICBsZXQgbm9kZUVudGVyID0gbm9kZS5lbnRlcigpXG4gICAgICAgICAgICAuYXBwZW5kKFwiZ1wiKVxuICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcIm5vZGVcIilcbiAgICAgICAgICAgIC5zdHlsZShcImN1cnNvclwiLCBcInBvaW50ZXJcIilcbiAgICAgICAgICAgIC8vIEV2ZXJ5IG5vZGUgaXMgb3JpZ2luYWxseSBzaXR1YXRlZCBvbiB0aGUgY2xpY2tlZCBub2RlJ3MgKHRoZSBzb3VyY2UpIHBvc2l0aW9uLiBBbmltYXRpb25zIGFmdGVyd2FyZHNcbiAgICAgICAgICAgIC8vIHJlcG9zaXRpb24gdGhlIG5vZGUgdG8gaXQncyBmaW5hbCBsb2NhdGlvbi5cbiAgICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIGB0cmFuc2xhdGUoJHtzb3VyY2UueSB8fCAwfSwke3NvdXJjZS5kYXRhLnByZXZpb3VzUG9zaXRpb24ueCB8fCAwfSlgKVxuICAgICAgICAgICAgLm9uKFwiY2xpY2tcIiwgKGV2ZW50OiBNb3VzZUV2ZW50LCBkOiBIUE48VHJlZXZpZXdOb2RlPikgPT4gdGhpcy5jbGljayhldmVudCwgZCkpXG4gICAgICAgICAgICAub24oXCJtb3VzZW92ZXJcIiwgKGV2ZW50OiBNb3VzZUV2ZW50LCBkOiBIUE48VHJlZXZpZXdOb2RlPikgPT4gdGhpcy50b29sdGlwSW4oZXZlbnQsIGQpKVxuICAgICAgICAgICAgLm9uKFwibW91c2VvdXRcIiwgKGV2ZW50OiBNb3VzZUV2ZW50LCBkOiBIUE48VHJlZXZpZXdOb2RlPikgPT4gdGhpcy50b29sdGlwT3V0KGV2ZW50LCBkKSlcbiAgICAgICAgICAgIC5vbihcImNvbnRleHRtZW51XCIsIChldmVudDogTW91c2VFdmVudCwgZDogSFBOPFRyZWV2aWV3Tm9kZT4pID0+IHRoaXMucmlnaHRDbGljayhldmVudCwgZCkpXG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICAubWVyZ2Uobm9kZSk7XG5cbiAgICAgICAgbm9kZUVudGVyLmFwcGVuZChcImNpcmNsZVwiKVxuICAgICAgICAgICAgLmF0dHIoXCJyXCIsIDFlLTYpXG4gICAgICAgICAgICAuc3R5bGUoXCJzdHJva2Utd2lkdGhcIiwgXCIxLjVweFwiKVxuICAgICAgICAgICAgLnN0eWxlKFwic3Ryb2tlXCIsIChkOiBIUE48VHJlZXZpZXdOb2RlPikgPT4gdGhpcy5zZXR0aW5ncy5ub2RlU3Ryb2tlQ29sb3IoZC5kYXRhKSlcbiAgICAgICAgICAgIC5zdHlsZShcImZpbGxcIiwgKGQ6IEhQTjxUcmVldmlld05vZGU+KSA9PiB0aGlzLnNldHRpbmdzLm5vZGVGaWxsQ29sb3IoZC5kYXRhKSk7XG5cbiAgICAgICAgY29uc3QgYXJjU2NhbGUgPSBkMy5zY2FsZUxpbmVhcigpLnJhbmdlKFswLCAyICogTWF0aC5QSV0pO1xuXG4gICAgICAgIGNvbnN0IGlubmVyQXJjID0gZDMuYXJjKClcbiAgICAgICAgICAgIC5pbm5lclJhZGl1cygwKVxuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgLm91dGVyUmFkaXVzKChkOiBIUE48VHJlZXZpZXdOb2RlPikgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbXB1dGVOb2RlU2l6ZShkKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuc3RhcnRBbmdsZSgwKVxuICAgICAgICAgICAgLmVuZEFuZ2xlKGQgPT4ge1xuICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgICAgICByZXR1cm4gYXJjU2NhbGUoZC5kYXRhLnNlbGZDb3VudCAvIGQuZGF0YS5jb3VudCkgfHwgMDtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIGlmICh0aGlzLnNldHRpbmdzLmVuYWJsZUlubmVyQXJjcykge1xuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgbm9kZUVudGVyLmFwcGVuZChcInBhdGhcIilcbiAgICAgICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwiaW5uZXJBcmNcIilcbiAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJkXCIsIGlubmVyQXJjKVxuICAgICAgICAgICAgICAgIC5zdHlsZShcImZpbGxcIiwgKGQ6IEhQTjxUcmVldmlld05vZGU+KSA9PiB0aGlzLnNldHRpbmdzLm5vZGVTdHJva2VDb2xvcihkLmRhdGEpKVxuICAgICAgICAgICAgICAgIC5zdHlsZShcImZpbGwtb3BhY2l0eVwiLCAwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLnNldHRpbmdzLmVuYWJsZUxhYmVscykge1xuICAgICAgICAgICAgbm9kZUVudGVyLmFwcGVuZChcInRleHRcIilcbiAgICAgICAgICAgICAgICAuYXR0cihcInhcIiwgKGQ6IEhQTjxUcmVldmlld05vZGU+KSA9PiBkLmNoaWxkcmVuID8gLTEwIDogMTApXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJkeVwiLCBcIi4zNWVtXCIpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ0ZXh0LWFuY2hvclwiLCAoZDogSFBOPFRyZWV2aWV3Tm9kZT4pID0+IGQuY2hpbGRyZW4gPyBcImVuZFwiIDogXCJzdGFydFwiKVxuICAgICAgICAgICAgICAgIC50ZXh0KChkOiBIUE48VHJlZXZpZXdOb2RlPikgPT4gdGhpcy5zZXR0aW5ncy5nZXRMYWJlbChkLmRhdGEpKVxuICAgICAgICAgICAgICAgIC5zdHlsZShcImZvbnRcIiwgXCIxMHB4IHNhbnMtc2VyaWZcIilcbiAgICAgICAgICAgICAgICAuc3R5bGUoXCJmaWxsLW9wYWNpdHlcIiwgMWUtNik7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUcmFuc2l0aW9uIG5vZGVzIHRvIHRoZWlyIG5ldyBwb3NpdGlvbi4gKEZyb20gdGhlIHNvdXJjZSdzIGxvY2F0aW9uIHRvIHRoZSBmaW5hbCBsb2NhdGlvbilcbiAgICAgICAgY29uc3Qgbm9kZVVwZGF0ZSA9IG5vZGVFbnRlci50cmFuc2l0aW9uKClcbiAgICAgICAgICAgIC5kdXJhdGlvbih0aGlzLnNldHRpbmdzLmFuaW1hdGlvbkR1cmF0aW9uKVxuICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgKGQ6IEhQTjxUcmVldmlld05vZGU+KSA9PiBgdHJhbnNsYXRlKCR7ZC55fSwgJHtkLnh9KWApO1xuXG4gICAgICAgIC8vIEFuaW1hdGUgdGhlIGZpbGwgYW5kIHN0cm9rZSBvZiBlYWNoIGNpcmNsZSAodGhlc2UgY2lyY2xlcyBtYWtlIHVwIHRoZSBub2RlcyB0aGF0IGFyZSByZW5kZXJlZCkuXG4gICAgICAgIG5vZGVVcGRhdGUuc2VsZWN0KFwiY2lyY2xlXCIpXG4gICAgICAgICAgICAuYXR0cihcInJcIiwgKGQ6IEhQTjxUcmVldmlld05vZGU+KSA9PiB0aGlzLmNvbXB1dGVOb2RlU2l6ZShkKSlcbiAgICAgICAgICAgIC5zdHlsZShcImZpbGwtb3BhY2l0eVwiLCAoZDogSFBOPFRyZWV2aWV3Tm9kZT4pID0+IGQuY2hpbGRyZW4gJiYgZC5jaGlsZHJlblswXS5kYXRhLmlzQ29sbGFwc2VkKCkgPyAxIDogMClcbiAgICAgICAgICAgIC5zdHlsZShcInN0cm9rZVwiLCAoZDogSFBOPFRyZWV2aWV3Tm9kZT4pID0+IHRoaXMuc2V0dGluZ3Mubm9kZVN0cm9rZUNvbG9yKGQuZGF0YSkpXG4gICAgICAgICAgICAuc3R5bGUoXCJmaWxsXCIsIChkOiBIUE48VHJlZXZpZXdOb2RlPikgPT4gdGhpcy5zZXR0aW5ncy5ub2RlRmlsbENvbG9yKGQuZGF0YSkpO1xuXG4gICAgICAgIGlmICh0aGlzLnNldHRpbmdzLmVuYWJsZUlubmVyQXJjcykge1xuICAgICAgICAgICAgbm9kZVVwZGF0ZS5zZWxlY3QoXCIuaW5uZXJBcmNcIilcbiAgICAgICAgICAgICAgICAuc3R5bGUoXCJmaWxsLW9wYWNpdHlcIiwgMSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5lbmFibGVMYWJlbHMpIHtcbiAgICAgICAgICAgIG5vZGVVcGRhdGUuc2VsZWN0KFwidGV4dFwiKVxuICAgICAgICAgICAgICAgIC5zdHlsZShcImZpbGwtb3BhY2l0eVwiLCAxKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEFuaW1hdGUgdGhlIG1vdmVtZW50IG9mIGV2ZXJ5IG5vZGUgdGhhdCBzaG91bGQgYmUgcmVtb3ZlZCB0byB0aGUgc291cmNlIG5vZGUgbG9jYXRpb24uXG4gICAgICAgIGNvbnN0IG5vZGVFeGl0ID0gbm9kZS5leGl0KCkudHJhbnNpdGlvbigpXG4gICAgICAgICAgICAuZHVyYXRpb24odGhpcy5zZXR0aW5ncy5hbmltYXRpb25EdXJhdGlvbilcbiAgICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIGQgPT4gYHRyYW5zbGF0ZSgke3NvdXJjZS55fSwke3NvdXJjZS54fSlgKVxuICAgICAgICAgICAgLnJlbW92ZSgpO1xuXG4gICAgICAgIG5vZGVFeGl0LnNlbGVjdChcImNpcmNsZVwiKVxuICAgICAgICAgICAgLmF0dHIoXCJyXCIsIDFlLTYpO1xuXG4gICAgICAgIG5vZGVFeGl0LnNlbGVjdChcInBhdGhcIilcbiAgICAgICAgICAgIC5zdHlsZShcImZpbGwtb3BhY2l0eVwiLCAxZS02KTtcblxuICAgICAgICBub2RlRXhpdC5zZWxlY3QoXCJ0ZXh0XCIpXG4gICAgICAgICAgICAuc3R5bGUoXCJmaWxsLW9wYWNpdHlcIiwgMWUtNik7XG5cbiAgICAgICAgLy8gVXBkYXRlIHRoZSBsaW5rcyBiZXR3ZWVuIHRoZSBkaWZmZXJlbnQgbm9kZXMuXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgbGV0IGxpbmsgPSB0aGlzLnZpc0VsZW1lbnQuc2VsZWN0QWxsKFwicGF0aC5saW5rXCIpXG4gICAgICAgICAgICAuZGF0YShsaW5rcywgKGQ6IEhQTDxUcmVldmlld05vZGU+KSA9PiBkLnRhcmdldC5kYXRhLmlkKTtcblxuICAgICAgICBjb25zdCBsaW5rR2VuZXJhdG9yID0gZDMubGlua0hvcml6b250YWw8YW55LCBIUEw8VHJlZXZpZXdOb2RlPiwgSFBOPFRyZWV2aWV3Tm9kZT4+KCkueChkID0+IGQueSkueShkID0+IGQueCk7XG5cbiAgICAgICAgLy8gRW50ZXIgYW55IG5ldyBsaW5rcyBhdCB0aGUgcGFyZW50J3MgcHJldmlvdXMgcG9zaXRpb24uXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgbGluay5lbnRlcigpXG4gICAgICAgICAgICAuaW5zZXJ0KFwicGF0aFwiLCBcImdcIilcbiAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJsaW5rXCIpXG4gICAgICAgICAgICAuc3R5bGUoXCJmaWxsXCIsIFwibm9uZVwiKVxuICAgICAgICAgICAgLnN0eWxlKFwic3Ryb2tlLW9wYWNpdHlcIiwgXCIwLjVcIilcbiAgICAgICAgICAgIC5zdHlsZShcInN0cm9rZS1saW5lY2FwXCIsIFwicm91bmRcIilcbiAgICAgICAgICAgIC5zdHlsZShcInN0cm9rZVwiLCAoZDogSFBMPFRyZWV2aWV3Tm9kZT4pID0+IHRoaXMuc2V0dGluZ3MubGlua1N0cm9rZUNvbG9yKGQpKVxuICAgICAgICAgICAgLnN0eWxlKFwic3Ryb2tlLXdpZHRoXCIsIDFlLTYpXG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICAuYXR0cihcImRcIiwgKGQ6IEhQTDxUcmVldmlld05vZGU+KSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgbyA9IHtcbiAgICAgICAgICAgICAgICAgICAgeDogc291cmNlLmRhdGEucHJldmlvdXNQb3NpdGlvbi54LFxuICAgICAgICAgICAgICAgICAgICB5OiBzb3VyY2UuZGF0YS5wcmV2aW91c1Bvc2l0aW9uLnlcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICAgICAgcmV0dXJuIGxpbmtHZW5lcmF0b3Ioe1xuICAgICAgICAgICAgICAgICAgICBzb3VyY2U6IG8sXG4gICAgICAgICAgICAgICAgICAgIHRhcmdldDogb1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgIC5tZXJnZShsaW5rKVxuICAgICAgICAgICAgLnRyYW5zaXRpb24oKVxuICAgICAgICAgICAgLmR1cmF0aW9uKHRoaXMuc2V0dGluZ3MuYW5pbWF0aW9uRHVyYXRpb24pXG4gICAgICAgICAgICAuYXR0cihcImRcIiwgbGlua0dlbmVyYXRvcilcbiAgICAgICAgICAgIC5zdHlsZShcInN0cm9rZVwiLCB0aGlzLnNldHRpbmdzLmxpbmtTdHJva2VDb2xvcilcbiAgICAgICAgICAgIC5zdHlsZShcInN0cm9rZS13aWR0aFwiLCAoZDogSFBMPFRyZWV2aWV3Tm9kZT4pID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoZC5zb3VyY2UuZGF0YS5pc1NlbGVjdGVkKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMud2lkdGhTY2FsZShkLnRhcmdldC5kYXRhLmNvdW50KSArIFwicHhcIjtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCI0cHhcIjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAvLyBUcmFuc2l0aW9uIGV4aXRpbmcgbGlua3MgdG8gcGFyZW50J3MgbmV3IHBvc2l0aW9uLlxuICAgICAgICBsaW5rLmV4aXQoKS50cmFuc2l0aW9uKClcbiAgICAgICAgICAgIC5kdXJhdGlvbih0aGlzLnNldHRpbmdzLmFuaW1hdGlvbkR1cmF0aW9uKVxuICAgICAgICAgICAgLnN0eWxlKFwic3Ryb2tlLXdpZHRoXCIsIDFlLTYpXG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICAuYXR0cihcImRcIiwgKGQ6IEhQTDxUcmVldmlld05vZGU+KSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgbyA9IHtcbiAgICAgICAgICAgICAgICAgICAgeDogc291cmNlLngsXG4gICAgICAgICAgICAgICAgICAgIHk6IHNvdXJjZS55XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgICAgICByZXR1cm4gbGlua0dlbmVyYXRvcih7XG4gICAgICAgICAgICAgICAgICAgIHNvdXJjZTogbyxcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0OiBvXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLnJlbW92ZSgpO1xuXG4gICAgICAgIC8vIEtlZXAgdHJhY2sgb2YgdGhlIG9sZCBwb3NpdGlvbnMgZm9yIHRoZSB0cmFuc2l0aW9uc1xuICAgICAgICBub2Rlcy5mb3JFYWNoKChkOiBIUE48VHJlZXZpZXdOb2RlPikgPT4ge1xuICAgICAgICAgICAgZC5kYXRhLnByZXZpb3VzUG9zaXRpb24gPSB7XG4gICAgICAgICAgICAgICAgeDogZC54LFxuICAgICAgICAgICAgICAgIHk6IGQueVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBjb21wdXRlTm9kZVNpemUoZDogSFBOPFRyZWV2aWV3Tm9kZT4pOiBudW1iZXIge1xuICAgICAgICBpZiAoZC5kYXRhLmlzU2VsZWN0ZWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMud2lkdGhTY2FsZShkLmRhdGEuY291bnQpIC8gMjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiAyO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBjbGljayhldmVudDogTW91c2VFdmVudCwgZDogSFBOPFRyZWV2aWV3Tm9kZT4pOiB2b2lkIHtcbiAgICAgICAgaWYgKCF0aGlzLnNldHRpbmdzLmVuYWJsZUV4cGFuZE9uQ2xpY2spIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChldmVudC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZXZlbnQuc2hpZnRLZXkpIHtcbiAgICAgICAgICAgIGQuZGF0YS5leHBhbmRBbGwoKTtcbiAgICAgICAgfSBlbHNlIGlmIChkLmNoaWxkcmVuICYmIGQuY2hpbGRyZW4uc29tZShuID0+ICFuLmRhdGEuaXNDb2xsYXBzZWQoKSkpIHtcbiAgICAgICAgICAgIGQuZGF0YS5jb2xsYXBzZUFsbCgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZC5kYXRhLmV4cGFuZCh0aGlzLnNldHRpbmdzLmxldmVsc1RvRXhwYW5kKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMudXBkYXRlKGQpO1xuICAgICAgICB0aGlzLmNlbnRlclJvb3QoZCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSB0b29sdGlwSW4oZXZlbnQ6IE1vdXNlRXZlbnQsIGQ6IEhQTjxUcmVldmlld05vZGU+KSB7XG4gICAgICAgIGlmICh0aGlzLnNldHRpbmdzLmVuYWJsZVRvb2x0aXBzICYmIHRoaXMudG9vbHRpcCkge1xuICAgICAgICAgICAgdGhpcy50b29sdGlwLmh0bWwodGhpcy5zZXR0aW5ncy5nZXRUb29sdGlwKGQuZGF0YSkpXG4gICAgICAgICAgICAgICAgLnN0eWxlKFwidG9wXCIsIChldmVudC5wYWdlWSArIDEwKSArIFwicHhcIilcbiAgICAgICAgICAgICAgICAuc3R5bGUoXCJsZWZ0XCIsIChldmVudC5wYWdlWCArIDEwKSArIFwicHhcIik7XG5cbiAgICAgICAgICAgIHRoaXMudG9vbHRpcFRpbWVyID0gd2luZG93LnNldFRpbWVvdXQoKCkgPT4gdGhpcy50b29sdGlwLnN0eWxlKFwidmlzaWJpbGl0eVwiLCBcInZpc2libGVcIiksIDEwMDApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSB0b29sdGlwT3V0KGV2ZW50OiBNb3VzZUV2ZW50LCBkOiBIUE48VHJlZXZpZXdOb2RlPikge1xuICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5lbmFibGVUb29sdGlwcyAmJiB0aGlzLnRvb2x0aXApIHtcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLnRvb2x0aXBUaW1lcik7XG4gICAgICAgICAgICB0aGlzLnRvb2x0aXAuc3R5bGUoXCJ2aXNpYmlsaXR5XCIsIFwiaGlkZGVuXCIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSByaWdodENsaWNrKGV2ZW50OiBNb3VzZUV2ZW50LCBkOiBIUE48VHJlZXZpZXdOb2RlPikge1xuICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5lbmFibGVSaWdodENsaWNrKSB7XG4gICAgICAgICAgICB0aGlzLnJlbmRlcihkKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=