{"version":3,"sources":["unipept-visualizations.js"],"names":["univis","Node","node","data","property","value","children","forEach","c","setRecursiveProperty","_children","length","_height","undefined","isLeaf","d3","max","getHeight","_depth","parent","getDepth","construct","new","map","createNode","n","call","TreeMap","element","options","that","MARGIN","top","right","bottom","left","DEFAULTS","height","width","className","levels","getLevel","d","countAccessor","self_count","rerootCallback","getBreadcrumbTooltip","name","colorRoot","colorLeaf","colorBreadcrumbs","labelHeight","getLabel","enableTooltips","getTooltip","getTooltipTitle","getTooltipText","settings","root","nodeId","current","treemapLayout","breadcrumbs","treemap","tooltip","colorScale","init","TreemapNode","initTooltip","initCSS","draw","reroot","select","append","attr","id","style","elementClass","$","addClass","prop","html","appendTo","empty","layout","size","padding","scale","linear","domain","range","interpolate","interpolateLab","setBreadcrumbs","crumbs","temp","push","reverse","selectAll","enter","on","triggerCallback","nodes","getReadableColorFor","text","event","preventDefault","tooltipIn","tooltipMove","tooltipOut","order","transition","position","exit","remove","update","x","y","Math","dx","dy","resize","i","pageY","pageX","count","color","textColor","brightness","rgb","err","r","g","b","reset","setFullScreen","isFullScreen","setTimeout","w","h","window","Plugin","userData","option","each","$this","extend","fn","Constructor","TreeView","DURATION","COLOR_SCALE","category10","nodeDistance","levelsToExpand","minNodeSize","maxNodeSize","colors","nodeFillColor","nodeStrokeColor","linkStrokeColor","enableInnerArcs","enableExpandOnClick","enableRightClick","enableLabels","visibleRoot","tooltipTimer","tree","diagonal","widthScale","innerArc","zoomListener","svg","initInnerArcs","nodeSize","separation","a","distance","projection","behavior","zoom","scaleExtent","translate","TreeviewNode","arcScale","PI","arc","outerRadius","startAngle","endAngle","x0","y0","setSelected","functor","collapseAll","expand","expandAll","centerNode","source","links","depth","nodeEnter","click","rightClick","nodeUpdate","duration","nodeExit","link","target","insert","o","selected","defaultPrevented","shiftKey","collapse","clearTimeout","setCount","reduce","sum","treeview"],"mappings":"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","file":"unipept-visualizations.es5.js","sourcesContent":["let univis = {};\n\nunivis.Node = class Node {\n    constructor(node = {}) {\n        this.data = {};\n        Object.assign(this, node);\n    }\n\n    static new(node = {}) {\n        return new Node(node);\n    }\n\n    static createNode(node, construct = Node.new) {\n        if (node.children) {\n            node.children = node.children.map(\n                n => Node.createNode(n, construct)\n            );\n        }\n        return construct.call(null, node);\n    }\n\n    // sets a property for a node and all its children\n    setRecursiveProperty(property, value) {\n        this[property] = value;\n        if (this.children) {\n            this.children.forEach(c => {\n                c.setRecursiveProperty(property, value);\n            });\n        } else if (this._children) {\n            this._children.forEach(c => {\n                c.setRecursiveProperty(property, value);\n            });\n        }\n    }\n\n    // Returns true if a node is a leaf\n    isLeaf() {\n        return (!this.children && !this._children) ||\n            (this.children && this.children.length === 0) ||\n            (this._children && this._children.length === 0);\n    }\n\n    getHeight() {\n        if (this._height === undefined) {\n            if (this.isLeaf()) {\n                this._height = 0;\n            } else {\n                this._height = d3.max(this.children, c => c.getHeight()) + 1;\n            }\n        }\n        return this._height;\n    }\n\n    getDepth() {\n        if (this._depth === undefined) {\n            if (this.parent === undefined) {\n                this._depth = 0;\n            } else {\n                this._depth = this.parent.getDepth() + 1;\n            }\n        }\n        return this._depth;\n    }\n};\n;/**\n * Interactive treemap\n */\n(function () {\n    let TreeMap = function TreeMap(element, data, options = {}) {\n        let that = {};\n\n        const MARGIN = {\n                top: 0,\n                right: 0,\n                bottom: 0,\n                left: 0,\n            },\n            DEFAULTS = {\n                height: 300,\n                width: 600,\n\n                className: \"unipept-treemap\",\n                levels: undefined,\n                getLevel: d => d.getDepth(),\n\n                countAccessor: d => d.data.self_count,\n                rerootCallback: undefined,\n\n                getBreadcrumbTooltip: d => d.name,\n                colorRoot: \"#104B7D\",\n                colorLeaf: \"#fdffcc\",\n                colorBreadcrumbs: \"#FF8F00\",\n\n                labelHeight: 10,\n                getLabel: d => d.name,\n\n                enableTooltips: true,\n                getTooltip: getTooltip,\n                getTooltipTitle: getTooltipTitle,\n                getTooltipText: getTooltipText,\n            };\n\n        let settings;\n\n        let root,\n            nodeId = 0,\n            current,\n            treemapLayout,\n            breadcrumbs,\n            treemap,\n            tooltip,\n            colorScale;\n\n        /**\n         * Initializes Treemap\n         */\n        function init() {\n            settings = Object.assign({}, DEFAULTS, options);\n\n            root = TreemapNode.createNode(data);\n\n            settings.width = settings.width - MARGIN.right - MARGIN.left;\n            settings.height = settings.height - MARGIN.top - MARGIN.bottom;\n\n            settings.levels = settings.levels || root.getHeight();\n\n            if (settings.enableTooltips) {\n                initTooltip();\n            }\n\n            initCSS();\n\n            // setup the visualisation\n            draw(root);\n            reroot(root, false);\n        }\n\n        function initTooltip() {\n            tooltip = d3.select(\"body\")\n                .append(\"div\")\n                .attr(\"id\", element.id + \"-tooltip\")\n                .attr(\"class\", \"tip\")\n                .style(\"position\", \"absolute\")\n                .style(\"z-index\", \"10\")\n                .style(\"visibility\", \"hidden\")\n                .style(\"background-color\", \"white\")\n                .style(\"padding\", \"2px\")\n                .style(\"border\", \"1px solid #dddddd\")\n                .style(\"border-radius\", \"3px;\");\n        }\n\n        function initCSS() {\n            let elementClass = settings.className;\n            $(element).addClass(elementClass);\n            $(\"<style>\").prop(\"type\", \"text/css\")\n                .html(`\n                    .${elementClass} {\n                        font-family: Roboto,'Helvetica Neue',Helvetica,Arial,sans-serif;\n                    }\n                    .${elementClass} .node {\n                        font-size: 9px;\n                        line-height: 10px;\n                        overflow: hidden;\n                        position: absolute;\n                        text-indent: 2px;\n                        text-align: center;\n                        text-overflow: ellipsis;\n                        cursor: pointer;\n                    }\n                    .${elementClass} .node:hover {\n                        outline: 1px solid white;\n                    }\n                    .${elementClass} .breadcrumbs {\n                        font-size: 11px;\n                        line-height: 20px;\n                        padding-left: 5px;\n                        font-weight: bold;\n                        color: white;\n                        box-sizing: border-box;\n                    }\n                    .full-screen .${elementClass} .breadcrumbs {\n                        width: 100% !important;\n                    }\n                    .${elementClass} .crumb {\n                        cursor: pointer;\n                    }\n                    .${elementClass} .crumb .link:hover {\n                        text-decoration: underline;\n                    }\n                    .${elementClass} .breadcrumbs .crumb + .crumb::before {\n                        content: \" > \";\n                        cursor: default;\n                    }\n                `)\n                .appendTo(\"head\");\n        }\n\n        function draw(data) {\n            $(element).empty();\n\n            treemapLayout = d3.layout.treemap()\n                .size([settings.width + 1, settings.height + 1])\n                .padding([settings.labelHeight, 0, 0, 0])\n                .value(settings.countAccessor);\n\n            colorScale = d3.scale.linear()\n                .domain([0, settings.levels])\n                .range([settings.colorRoot, settings.colorLeaf])\n                .interpolate(d3.interpolateLab);\n\n            breadcrumbs = d3.select(element).append(\"div\")\n                .attr(\"class\", \"breadcrumbs\")\n                .style(\"position\", \"relative\")\n                .style(\"width\", settings.width + \"px\")\n                .style(\"height\", \"20px\")\n                .style(\"background-color\", settings.colorBreadcrumbs);\n\n            treemap = d3.select(element).append(\"div\")\n                .style(\"position\", \"relative\")\n                .style(\"width\", settings.width + \"px\")\n                .style(\"height\", settings.height + \"px\")\n                .style(\"left\", MARGIN.left + \"px\")\n                .style(\"top\", MARGIN.top + \"px\");\n        }\n\n        function setBreadcrumbs() {\n            let crumbs = [];\n            let temp = current;\n            while (temp) {\n                crumbs.push(temp);\n                temp = temp.parent;\n            }\n            crumbs.reverse();\n            breadcrumbs.html(\"\");\n            breadcrumbs.selectAll(\".crumb\")\n                .data(crumbs)\n                .enter()\n                .append(\"span\")\n                .attr(\"class\", \"crumb\")\n                .attr(\"title\", settings.getBreadcrumbTooltip)\n                .html(d => `<span class='link'>${d.name}</span>`)\n                .on(\"click\", d => {\n                    reroot(d);\n                });\n        }\n\n        function reroot(data, triggerCallback = true) {\n            current = data;\n\n            setBreadcrumbs();\n\n            let nodes = treemap.selectAll(\".node\")\n                .data(treemapLayout.nodes(data), d => d.id || (d.id = ++nodeId));\n\n            nodes.enter()\n                .append(\"div\")\n                .attr(\"class\", \"node\")\n                .style(\"background\", d => colorScale(settings.getLevel(d)))\n                .style(\"color\", d => getReadableColorFor(colorScale(settings.getLevel(d))))\n                .style(\"left\", \"0px\")\n                .style(\"top\", \"0px\")\n                .style(\"width\", \"0px\")\n                .style(\"height\", \"0px\")\n                .text(settings.getLabel)\n                .on(\"click\", d => {\n                    reroot(d);\n                })\n                .on(\"contextmenu\", d => {\n                    d3.event.preventDefault();\n                    if (current.parent) {\n                        reroot(current.parent);\n                    }\n                })\n                .on(\"mouseover\", tooltipIn)\n                .on(\"mousemove\", tooltipMove)\n                .on(\"mouseout\", tooltipOut);\n\n            nodes.order()\n                .transition()\n                .call(position);\n\n            nodes.exit().remove();\n\n            if (triggerCallback && settings.rerootCallback) {\n                settings.rerootCallback.call(null, current);\n            }\n        }\n\n        function update() {\n            let nodes = treemap.selectAll(\".node\")\n                .data(treemapLayout.nodes(data), d => d.id)\n                .order()\n                .transition()\n                .call(position);\n        }\n\n        /**\n         * sets the position of a square\n         */\n        function position() {\n            this.style(\"left\", d => d.x + \"px\")\n                .style(\"top\", d => d.y + \"px\")\n                .style(\"width\", d => Math.max(0, d.dx - 1) + \"px\")\n                .style(\"height\", d => Math.max(0, d.dy - 1) + \"px\");\n        }\n\n        /**\n         * Resizes the treemap for a given width and height\n         */\n        function resize(width, height) {\n            treemapLayout = d3.layout.treemap()\n                .size([width + 1, height + 1])\n                .padding([10, 0, 0, 0])\n                .value(settings.countAccessor);\n            update();\n        }\n\n        // tooltip functions\n        function tooltipIn(d, i) {\n            if (!settings.enableTooltips) {\n                return;\n            }\n            tooltip.html(settings.getTooltip(d))\n                .style(\"top\", (d3.event.pageY - 5) + \"px\")\n                .style(\"left\", (d3.event.pageX + 15) + \"px\")\n                .style(\"visibility\", \"visible\");\n        }\n\n        function tooltipOut(d, i) {\n            if (!settings.enableTooltips) {\n                return;\n            }\n            tooltip.style(\"visibility\", \"hidden\");\n        }\n\n        function tooltipMove(d, i) {\n            if (!settings.enableTooltips) {\n                return;\n            }\n            tooltip.style(\"top\", (d3.event.pageY - 5) + \"px\")\n                .style(\"left\", (d3.event.pageX + 15) + \"px\");\n        }\n\n        function getTooltip(d) {\n            return `<h3 class='tip-title'>${settings.getTooltipTitle(d)}</h3><p>${settings.getTooltipText(d)}</p>`;\n        }\n\n        function getTooltipTitle(d) {\n            return d.name;\n        }\n\n        function getTooltipText(d) {\n            return `${d.data.count} hits`;\n        }\n\n        /*\n         * Returns the readable text color based on the brightness of a given backgroud color\n         */\n        function getReadableColorFor(color) {\n            let textColor = \"#000\";\n            try {\n                textColor = brightness(d3.rgb(color)) < 125 ? \"#eee\" : \"#000\";\n            } catch (err) { /* go on */ }\n            return textColor;\n        }\n\n        /*\n         * Returns the brightness of an rgb-color\n         * from: http:// www.w3.org/WAI/ER/WD-AERT/#color-contrast\n         */\n        function brightness(rgb) {\n            return rgb.r * 0.299 + rgb.g * 0.587 + rgb.b * 0.114;\n        }\n\n        class TreemapNode extends univis.Node {\n            static new(node = {}) {\n                return new TreemapNode(node);\n            }\n\n            static createNode(node) {\n                return univis.Node.createNode(node, TreemapNode.new);\n            }\n        }\n\n\n        /** ************* Public methods ***************/\n        /**\n         * Resets the treemap to its initial position\n         */\n        that.reset = function reset() {\n            reroot(root);\n        };\n\n        /**\n         * Sets the visualisation in full screen mode\n         *\n         * @param <boolean> isFullScreen indicates if we're in full screen mode\n         */\n        that.setFullScreen = function setFullScreen(isFullScreen) {\n            // the delay is because the event fires before we're in fullscreen\n            // so the height en width functions don't give a correct result\n            // without the delay\n            setTimeout(function () {\n                let [w, h] = [settings.width, settings.height];\n                if (isFullScreen) {\n                    w = $(window).width();\n                    h = $(window).height() - 44;\n                }\n                resize(w, h);\n            }, 1000);\n        };\n\n        // initialize the object\n        init();\n\n        return that;\n    };\n\n    function Plugin(userData, option) {\n        return this.each(function () {\n            let $this = $(this);\n            let data = $this.data(\"vis.treemap\");\n            let options = $.extend({}, $this.data(), typeof option === \"object\" && option);\n\n            if (!data) {\n                $this.data(\"vis.treemap\", (data = new TreeMap(this, userData, options)));\n            }\n            if (typeof option === \"string\") {\n                data[option]();\n            }\n        });\n    }\n\n    $.fn.treemap = Plugin;\n    $.fn.treemap.Constructor = TreeMap;\n})();\n;/**\n * Zoomable treeview, inspiration from\n * - http://bl.ocks.org/mbostock/4339083\n * - https://gist.github.com/robschmuecker/7880033\n * - http://www.brightpointinc.com/interactive/budget/index.html?source=d3js\n */\n(function () {\n    let TreeView = function TreeView(element, data, options = {}) {\n        let that = {};\n\n        const MARGIN = {\n                top: 5,\n                right: 5,\n                bottom: 5,\n                left: 5,\n            },\n            DURATION = 750,\n            COLOR_SCALE = d3.scale.category10(),\n            DEFAULTS = {\n                height: 300,\n                width: 600,\n                nodeDistance: 180,\n                levelsToExpand: 2,\n                minNodeSize: 2,\n                maxNodeSize: 105,\n\n                countAccessor: d => d.data.count,\n\n                colors: d => COLOR_SCALE(d.name),\n                nodeFillColor: nodeFillColor,\n                nodeStrokeColor: nodeStrokeColor,\n                linkStrokeColor: linkStrokeColor,\n\n                enableInnerArcs: true,\n                enableExpandOnClick: true,\n                enableRightClick: true,\n\n                enableLabels: true,\n                getLabel: d => d.name,\n\n                enableTooltips: true,\n                getTooltip: getTooltip,\n                getTooltipTitle: getTooltipTitle,\n                getTooltipText: getTooltipText,\n            };\n\n        let settings;\n\n        let visibleRoot,\n            tooltipTimer;\n\n        let nodeId = 0,\n            root;\n\n        let tree,\n            tooltip,\n            diagonal,\n            widthScale,\n            innerArc,\n            zoomListener,\n            svg;\n\n        function init() {\n            settings = Object.assign({}, DEFAULTS, options);\n\n            settings.width = settings.width - MARGIN.right - MARGIN.left;\n            settings.height = settings.height - MARGIN.top - MARGIN.bottom;\n\n            if (settings.enableTooltips) {\n                initTooltip();\n            }\n\n            if (settings.enableInnerArcs) {\n                initInnerArcs();\n            }\n\n            tree = d3.layout.tree()\n                .nodeSize([2, 10])\n                .separation((a, b) => {\n                    let width = (nodeSize(a) + nodeSize(b)),\n                        distance = width / 2 + 4;\n                    return (a.parent === b.parent) ? distance : distance + 4;\n                });\n\n            diagonal = d3.svg.diagonal().projection(d => [d.y, d.x]);\n\n            widthScale = d3.scale.linear().range([settings.minNodeSize, settings.maxNodeSize]);\n\n            // define the zoomListener which calls the zoom function on the \"zoom\" event constrained within the scaleExtents\n            zoomListener = d3.behavior.zoom()\n                .scaleExtent([0.1, 3])\n                .on(\"zoom\", () => {\n                    svg.attr(\"transform\", `translate(${d3.event.translate})scale(${d3.event.scale})`);\n                });\n\n            svg = d3.select(element).append(\"svg\")\n                .attr(\"version\", \"1.1\")\n                .attr(\"xmlns\", \"http://www.w3.org/2000/svg\")\n                .attr(\"viewBox\", `0 0 ${settings.width + MARGIN.right + MARGIN.left} ${settings.height + MARGIN.top + MARGIN.bottom}`)\n                .attr(\"width\", settings.width + MARGIN.right + MARGIN.left)\n                .attr(\"height\", settings.height + MARGIN.top + MARGIN.bottom)\n                .call(zoomListener)\n                .append(\"g\")\n                .attr(\"transform\", `translate(${MARGIN.left},${MARGIN.top})`)\n                .append(\"g\");\n\n            draw(TreeviewNode.createNode(data));\n        }\n\n        function initTooltip() {\n            tooltip = d3.select(\"body\")\n                .append(\"div\")\n                .attr(\"id\", element.id + \"-tooltip\")\n                .attr(\"class\", \"tip\")\n                .style(\"position\", \"absolute\")\n                .style(\"z-index\", \"10\")\n                .style(\"visibility\", \"hidden\")\n                .style(\"background-color\", \"white\")\n                .style(\"padding\", \"2px\")\n                .style(\"border\", \"1px solid #dddddd\")\n                .style(\"border-radius\", \"3px;\");\n        }\n\n        function initInnerArcs() {\n            let arcScale = d3.scale.linear().range([0, 2 * Math.PI]);\n\n            innerArc = d3.svg.arc()\n                .outerRadius(nodeSize)\n                .startAngle(0)\n                .endAngle(d => arcScale(d.data.self_count / d.data.count) || 0);\n        }\n\n        function draw(data) {\n            widthScale.domain([0, data.data.count]);\n\n            root = data;\n            root.x0 = settings.height / 2;\n            root.y0 = 0;\n\n            // set everything visible\n            root.setSelected(true);\n\n            root.children.forEach((d, i) => {\n                d.color = d3.functor(settings.colors).call(this, d, i);\n                d.setRecursiveProperty(\"color\", d.color);\n            });\n\n            if (settings.enableExpandOnClick) {\n                root.collapseAll();\n                root.expand();\n            } else {\n                root.expandAll();\n            }\n\n            update(root);\n            centerNode(root);\n        }\n\n        function update(source) {\n            // Compute the new tree layout.\n            let nodes = tree.nodes(root).reverse(),\n                links = tree.links(nodes);\n\n            // Normalize for fixed-depth.\n            nodes.forEach(d => {\n                d.y = d.depth * settings.nodeDistance;\n            });\n\n            // Update the nodes…\n            let node = svg.selectAll(\"g.node\")\n                .data(nodes, d => d.id || (d.id = ++nodeId));\n\n            // Enter any new nodes at the parent's previous position.\n            let nodeEnter = node.enter().append(\"g\")\n                .attr(\"class\", \"node\")\n                .style(\"cursor\", \"pointer\")\n                .attr(\"transform\", d => `translate(${source.y || 0},${source.x0 || 0})`)\n                .on(\"click\", click)\n                .on(\"mouseover\", tooltipIn)\n                .on(\"mouseout\", tooltipOut)\n                .on(\"contextmenu\", rightClick);\n\n            nodeEnter.append(\"circle\")\n                .attr(\"r\", 1e-6)\n                .style(\"stroke-width\", \"1.5px\")\n                .style(\"stroke\", settings.nodeStrokeColor)\n                .style(\"fill\", settings.nodeFillColor);\n\n            if (settings.enableInnerArcs) {\n                nodeEnter.append(\"path\")\n                    .attr(\"d\", innerArc)\n                    .style(\"fill\", settings.nodeStrokeColor)\n                    .style(\"fill-opacity\", 0);\n            }\n\n            if (settings.enableLabels) {\n                nodeEnter.append(\"text\")\n                    .attr(\"x\", d => d.isLeaf() ? 10 : -10)\n                    .attr(\"dy\", \".35em\")\n                    .attr(\"text-anchor\", d => d.isLeaf() ? \"start\" : \"end\")\n                    .text(settings.getLabel)\n                    .style(\"font\", \"10px sans-serif\")\n                    .style(\"fill-opacity\", 1e-6);\n            }\n\n            // Transition nodes to their new position.\n            let nodeUpdate = node.transition()\n                .duration(DURATION)\n                .attr(\"transform\", d => `translate(${d.y},${d.x})`);\n\n            nodeUpdate.select(\"circle\")\n                .attr(\"r\", nodeSize)\n                .style(\"fill-opacity\", d => d._children ? 1 : 0)\n                .style(\"stroke\", settings.nodeStrokeColor)\n                .style(\"fill\", settings.nodeFillColor);\n\n            if (settings.enableLabels) {\n                nodeUpdate.select(\"text\")\n                    .style(\"fill-opacity\", 1);\n            }\n\n            if (settings.enableInnerArcs) {\n                nodeUpdate.select(\"path\")\n                    .duration(DURATION)\n                    .attr(\"d\", innerArc)\n                    .style(\"fill-opacity\", 0.8);\n            }\n\n            // Transition exiting nodes to the parent's new position.\n            let nodeExit = node.exit().transition()\n                .duration(DURATION)\n                .attr(\"transform\", d => `translate(${source.y},${source.x})`)\n                .remove();\n\n            nodeExit.select(\"circle\")\n                .attr(\"r\", 1e-6);\n\n            nodeExit.select(\"path\")\n                .style(\"fill-opacity\", 1e-6);\n\n            nodeExit.select(\"text\")\n                .style(\"fill-opacity\", 1e-6);\n\n            // Update the links…\n            let link = svg.selectAll(\"path.link\")\n                .data(links, d => d.target.id);\n\n            // Enter any new links at the parent's previous position.\n            link.enter().insert(\"path\", \"g\")\n                .attr(\"class\", \"link\")\n                .style(\"fill\", \"none\")\n                .style(\"stroke-opacity\", \"0.5\")\n                .style(\"stroke-linecap\", \"round\")\n                .style(\"stroke\", settings.linkStrokeColor)\n                .style(\"stroke-width\", 1e-6)\n                .attr(\"d\", d => {\n                    let o = {\n                        x: (source.x0 || 0),\n                        y: (source.y0 || 0),\n                    };\n                    return diagonal({\n                        source: o,\n                        target: o,\n                    });\n                });\n\n            // Transition links to their new position.\n            link.transition()\n                .duration(DURATION)\n                .attr(\"d\", diagonal)\n                .style(\"stroke\", settings.linkStrokeColor)\n                .style(\"stroke-width\", d => {\n                    if (d.source.selected) {\n                        return widthScale(d.target.data.count) + \"px\";\n                    } else {\n                        return \"4px\";\n                    }\n                });\n\n            // Transition exiting nodes to the parent's new position.\n            link.exit().transition()\n                .duration(DURATION)\n                .style(\"stroke-width\", 1e-6)\n                .attr(\"d\", d => {\n                    let o = {\n                        x: source.x,\n                        y: source.y,\n                    };\n                    return diagonal({\n                        source: o,\n                        target: o,\n                    });\n                })\n                .remove();\n\n            // Stash the old positions for transition.\n            nodes.forEach(d => {\n                [d.x0, d.y0] = [d.x, d.y];\n            });\n        }\n\n        function nodeSize(d) {\n            if (d.selected) {\n                return widthScale(d.data.count) / 2;\n            } else {\n                return 2;\n            }\n        }\n\n        // Toggle children on click.\n        function click(d) {\n            if (!settings.enableExpandOnClick) {\n                return;\n            }\n\n            // check if click is triggered by panning on a node\n            if (d3.event.defaultPrevented) {\n                return;\n            }\n\n            if (d3.event.shiftKey) {\n                d.expandAll();\n            } else if (d.children) {\n                d.collapse();\n            } else {\n                d.expand();\n            }\n            update(d);\n            centerNode(d);\n        }\n\n        function rightClick(d) {\n            if (settings.enableRightClick) {\n                reroot(d);\n            }\n        }\n\n        // Sets the width of the right clicked node to 100%\n        function reroot(d) {\n            if (d === visibleRoot && d !== root) {\n                reroot(root);\n                return;\n            }\n            visibleRoot = d;\n\n            // set Selection properties\n            root.setSelected(false);\n            d.setSelected(true);\n\n            // scale the lines\n            widthScale.domain([0, d.data.count]);\n\n            d.expand();\n\n            // redraw\n            if (d3.event !== null) {\n                d3.event.preventDefault();\n            }\n            update(d);\n            centerNode(d);\n        }\n\n        // Center a node\n        function centerNode(source) {\n            let scale = zoomListener.scale(),\n                [x, y] = [-source.y0, -source.x0];\n            x = x * scale + settings.width / 4;\n            y = y * scale + settings.height / 2;\n            svg.transition()\n                .duration(DURATION)\n                .attr(\"transform\", `translate(${x},${y})scale(${scale})`);\n            zoomListener.scale(scale);\n            zoomListener.translate([x, y]);\n        }\n\n        // tooltip functions\n        function tooltipIn(d, i) {\n            if (!settings.enableTooltips) {\n                return;\n            }\n            tooltip.html(settings.getTooltip(d))\n                .style(\"top\", (d3.event.pageY - 5) + \"px\")\n                .style(\"left\", (d3.event.pageX + 15) + \"px\");\n\n            tooltipTimer = setTimeout(() => {\n                tooltip.style(\"visibility\", \"visible\");\n            }, 1000);\n        }\n\n        function tooltipOut(d, i) {\n            if (!settings.enableTooltips) {\n                return;\n            }\n            clearTimeout(tooltipTimer);\n            tooltip.style(\"visibility\", \"hidden\");\n        }\n\n        /** ************ Default methods ***************/\n        // set fill color\n        function nodeFillColor(d) {\n            if (d.selected) {\n                return d._children ? d.color || \"#aaa\" : \"#fff\";\n            } else {\n                return \"#aaa\";\n            }\n        }\n\n        // set node stroke color\n        function nodeStrokeColor(d) {\n            if (d.selected) {\n                return d.color || \"#aaa\";\n            } else {\n                return \"#aaa\";\n            }\n        }\n\n        // set link stroke color\n        function linkStrokeColor(d) {\n            if (d.source.selected) {\n                return d.target.color;\n            } else {\n                return \"#aaa\";\n            }\n        }\n\n        function getTooltip(d) {\n            return `<h3 class='tip-title'>${settings.getTooltipTitle(d)}</h3><p>${settings.getTooltipText(d)}</p>`;\n        }\n\n        function getTooltipTitle(d) {\n            return d.name;\n        }\n\n        function getTooltipText(d) {\n            return `${d.data.count} hits`;\n        }\n\n        class TreeviewNode extends univis.Node {\n            constructor(node = {}) {\n                super(node);\n                this.setCount();\n            }\n\n            static new(node = {}) {\n                return new TreeviewNode(node);\n            }\n\n            static createNode(node) {\n                return univis.Node.createNode(node, TreeviewNode.new);\n            }\n\n            setCount() {\n                if (settings.countAccessor(this)) {\n                    this.data.count = settings.countAccessor(this);\n                } else if (this.children) {\n                    this.data.count = this.children.reduce((sum, c) => sum + c.data.count, 0);\n                } else {\n                    this.data.count = 0;\n                }\n            }\n\n            setSelected(value) {\n                this.setRecursiveProperty(\"selected\", value);\n            }\n\n            // collapse everything\n            collapseAll() {\n                if (this.children && this.children.length === 0) {\n                    this.children = null;\n                }\n                if (this.children) {\n                    this._children = this.children;\n                    this._children.forEach(c => {\n                        c.collapseAll();\n                    });\n                    this.children = null;\n                }\n            }\n\n            // Collapses a node\n            collapse() {\n                if (this.children) {\n                    this._children = this.children;\n                    this.children = null;\n                }\n            }\n\n            expandAll() {\n                this.expand(100);\n            }\n\n            // Expands a node and its children\n            expand(i = settings.levelsToExpand) {\n                if (i > 0) {\n                    if (this._children) {\n                        this.children = this._children;\n                        this._children = null;\n                    }\n                    if (this.children) {\n                        this.children.forEach(c => {\n                            c.expand(i - 1);\n                        });\n                    }\n                }\n            }\n        }\n\n        /** ************* Public methods ***************/\n        that.reset = function reset() {\n            zoomListener.scale(1);\n            reroot(root);\n        };\n\n        // initialize the object\n        init();\n\n        // return the object\n        return that;\n    };\n\n    function Plugin(userData, option) {\n        return this.each(function () {\n            let $this = $(this);\n            let data = $this.data(\"vis.treeview\");\n            let options = $.extend({}, $this.data(), typeof option === \"object\" && option);\n\n            if (!data) {\n                $this.data(\"vis.treeview\", (data = new TreeView(this, userData, options)));\n            }\n            if (typeof option === \"string\") {\n                data[option]();\n            }\n        });\n    }\n\n    $.fn.treeview = Plugin;\n    $.fn.treeview.Constructor = TreeView;\n})();\n"]}